// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// libflac.js - port of libflac to JavaScript using emscripten


(function (root, factory) {

	var lib, env;
	if (typeof define === 'function' && define.amd) {
		// AMD. Register as an anonymous module.
		define(['require'], function (req) {
			lib = factory(root, req);
			return lib;
		});
	} else if (typeof module === 'object' && module.exports) {
		// Node. Does not work with strict CommonJS, but
		// only CommonJS-like environments that support module.exports,
		// like Node.

		// use process.env (if available) for reading Flac environment settings:
		env = typeof process !== 'undefined' && process && process.env? process.env : root;
		lib = factory(env, module.require);
		module.exports = lib;
	} else {
		// Browser globals
		lib = factory(root);
		root.Flac = lib;
	}

	//non-UMD mode: "classic mode" exports library to global variable Flac regardless of environment.
	// -> for backwards compatibility: by default, always export library to global variable Flac
	//                                 except in case UMD mode is explicitly activated.
	var umdMode = env? env.FLAC_UMD_MODE : root.FLAC_UMD_MODE;
	if(/false/.test(umdMode)){//<- normalize "true" | "false" | true | false -> BOOLEAN

		// if in Node environment, use Node's global (if available) as global/root namespace:
		root = env && env !== root && typeof global !== 'undefined' && global? global : root;
		root.Flac = lib;
	}

}(typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : this, function (global, require) {
'use strict';

var Module = Module || {};
var _flac_ready = false;
//in case resources are loaded asynchronously (e.g. *.mem file for minified version): setup "ready" handling
Module["onRuntimeInitialized"] = function(){
	_flac_ready = true;
	if(!_exported){
		//if _exported is not yet set, "pause" until initialization has run through
		setTimeout(function(){do_fire_event('ready', [_exported], true);}, 0);
	} else {
		do_fire_event('ready', [_exported], true);
	}
};

if(global && global.FLAC_SCRIPT_LOCATION){

	Module["locateFile"] = function(fileName){
		var path = global.FLAC_SCRIPT_LOCATION || '';
		if(path[fileName]){
			return path[fileName];
		}
		path += path && !/\/$/.test(path)? '/' : '';
		return path + fileName;
	};

	Module["readBinary"] = function(filePath){

		//for Node: use default implementation (copied from generated code):
		if(ENVIRONMENT_IS_NODE){
			var ret = Module['read'](filePath, true);
			if (!ret.buffer) {
				ret = new Uint8Array(ret);
			}
			assert(ret.buffer);
			return ret;
		}

		//otherwise: try "fallback" to AJAX
		return new Promise(function(resolve, reject){
			var xhr = new XMLHttpRequest();
			xhr.responseType = "arraybuffer";
			xhr.addEventListener("load", function(evt){
				resolve(xhr.response);
			});
			xhr.addEventListener("error", function(err){
				reject(err);
			});
			xhr.open("GET", filePath);
			xhr.send();
		});
	};
}



// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;


// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  } else {
    return scriptDirectory + path;
  }
}

if (ENVIRONMENT_IS_NODE) {
  scriptDirectory = __dirname + '/';

  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
    ret = tryParseAsDataURI(filename);
    if (!ret) {
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    }
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', abort);

  Module['quit'] = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status) {
      quit(status);
    }
  }
} else
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  Module['read'] = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  Module['setWindowTitle'] = function(title) { document.title = title };
} else
{
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
// If the user provided Module.print or printErr, use that. Otherwise,
// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
var out = Module['print'] || (typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null));
var err = Module['printErr'] || (typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || out));

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;


function staticAlloc(size) {
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};



var jsCallStartIndex = 1;
var functionPointers = new Array(5);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  var base = 0;
  for (var i = base; i < base + 5; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
}

var getTempRet0 = function() {
  return tempRet0;
}


var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;


// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};

// For fast lookup of conversion functions
var toC = {
  'string': JSfuncs['stringToC'], 'array': JSfuncs['arrayToC']
};


// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  function convertReturnValue(ret) {
    if (returnType === 'string') return Pointer_stringify(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  argTypes = argTypes || [];
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs && !opts) {
    return getCFunc(ident);
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (y + ' [' + x + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;




function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

if (!Module['reallocBuffer']) Module['reallocBuffer'] = function(size) {
  var ret;
  try {
    var oldHEAP8 = HEAP8;
    ret = new ArrayBuffer(size);
    var temp = new Int8Array(ret);
    temp.set(oldHEAP8);
  } catch(e) {
    return false;
  }
  var success = _emscripten_replace_memory(ret);
  if (!success) return false;
  return ret;
};

function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and DYNAMICTOP is the new top.


  var PAGE_MULTIPLE = Module["usingWasm"] ? WASM_PAGE_SIZE : ASMJS_PAGE_SIZE; // In wasm, heap size must be a multiple of 64KB. In asm.js, they need to be multiples of 16MB.
  var LIMIT = 2147483648 - PAGE_MULTIPLE; // We can do one page short of 2GB as theoretical maximum.

  if (HEAP32[DYNAMICTOP_PTR>>2] > LIMIT) {
    return false;
  }

  var OLD_TOTAL_MEMORY = TOTAL_MEMORY;
  TOTAL_MEMORY = Math.max(TOTAL_MEMORY, MIN_TOTAL_MEMORY); // So the loop below will not be infinite, and minimum asm.js memory size is 16MB.

  while (TOTAL_MEMORY < HEAP32[DYNAMICTOP_PTR>>2]) { // Keep incrementing the heap size as long as it's less than what is requested.
    if (TOTAL_MEMORY <= 536870912) {
      TOTAL_MEMORY = alignUp(2 * TOTAL_MEMORY, PAGE_MULTIPLE); // Simple heuristic: double until 1GB...
    } else {
      // ..., but after that, add smaller increments towards 2GB, which we cannot reach
      TOTAL_MEMORY = Math.min(alignUp((3 * TOTAL_MEMORY + 2147483648) / 4, PAGE_MULTIPLE), LIMIT);
    }
  }



  var replacement = Module['reallocBuffer'](TOTAL_MEMORY);
  if (!replacement || replacement.byteLength != TOTAL_MEMORY) {
    // restore the state to before this call, we failed
    TOTAL_MEMORY = OLD_TOTAL_MEMORY;
    return false;
  }

  // everything worked

  updateGlobalBuffer(replacement);
  updateGlobalBufferViews();



  return true;
}

var byteLength;
try {
  byteLength = Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, 'byteLength').get);
  byteLength(new ArrayBuffer(4)); // can fail on older ie
} catch(e) { // can fail on older node/v8
  byteLength = function(buffer) { return buffer.byteLength; };
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) err('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [];





STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 6176;
/* global initializers */  __ATINIT__.push();


memoryInitializer = "data:application/octet-stream;base64,AAAAAAAAAAAKAAAAZAAAAOgDAAAQJwAAoIYBAEBCDwCAlpgAAOH1BQAAAAAFgAAAD4AAAAoAAAAbgAAAHgAAABQAAAARgAAAM4AAADYAAAA8AAAAOYAAACgAAAAtgAAAJ4AAACIAAABjgAAAZgAAAGwAAABpgAAAeAAAAH2AAAB3gAAAcgAAAFAAAABVgAAAX4AAAFoAAABLgAAATgAAAEQAAABBgAAAw4AAAMYAAADMAAAAyYAAANgAAADdgAAA14AAANIAAADwAAAA9YAAAP+AAAD6AAAA64AAAO4AAADkAAAA4YAAAKAAAAClgAAAr4AAAKoAAAC7gAAAvgAAALQAAACxgAAAk4AAAJYAAACcAAAAmYAAAIgAAACNgAAAh4AAAIIAAACDgQAAhgEAAIwBAACJgQAAmAEAAJ2BAACXgQAAkgEAALABAAC1gQAAv4EAALoBAACrgQAArgEAAKQBAAChgQAA4AEAAOWBAADvgQAA6gEAAPuBAAD+AQAA9AEAAPGBAADTgQAA1gEAANwBAADZgQAAyAEAAM2BAADHgQAAwgEAAEABAABFgQAAT4EAAEoBAABbgQAAXgEAAFQBAABRgQAAc4EAAHYBAAB8AQAAeYEAAGgBAABtgQAAZ4EAAGIBAAAjgQAAJgEAACwBAAApgQAAOAEAAD2BAAA3gQAAMgEAABABAAAVgQAAH4EAABoBAAALgQAADgEAAAQBAAABgQAAA4MAAAYDAAAMAwAACYMAABgDAAAdgwAAF4MAABIDAAAwAwAANYMAAD+DAAA6AwAAK4MAAC4DAAAkAwAAIYMAAGADAABlgwAAb4MAAGoDAAB7gwAAfgMAAHQDAABxgwAAU4MAAFYDAABcAwAAWYMAAEgDAABNgwAAR4MAAEIDAADAAwAAxYMAAM+DAADKAwAA24MAAN4DAADUAwAA0YMAAPODAAD2AwAA/AMAAPmDAADoAwAA7YMAAOeDAADiAwAAo4MAAKYDAACsAwAAqYMAALgDAAC9gwAAt4MAALIDAACQAwAAlYMAAJ+DAACaAwAAi4MAAI4DAACEAwAAgYMAAIACAACFggAAj4IAAIoCAACbggAAngIAAJQCAACRggAAs4IAALYCAAC8AgAAuYIAAKgCAACtggAAp4IAAKICAADjggAA5gIAAOwCAADpggAA+AIAAP2CAAD3ggAA8gIAANACAADVggAA34IAANoCAADLggAAzgIAAMQCAADBggAAQ4IAAEYCAABMAgAASYIAAFgCAABdggAAV4IAAFICAABwAgAAdYIAAH+CAAB6AgAAa4IAAG4CAABkAgAAYYIAACACAAAlggAAL4IAACoCAAA7ggAAPgIAADQCAAAxggAAE4IAABYCAAAcAgAAGYIAAAgCAAANggAAB4IAAAICAABDYUxmFAAAACQAAABgAAAAbgAAAAAEAAAXCAAAIAAAAAcAAAAYAAAA/j8AAA4AAAADAAAACAAAAA8AAAAfAAAABAAAAAUAAAAGAAAAAQAAAAIAAAAQAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAAAAAoDQAAAQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAAAAAACgNAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAKA0AAAAAAAAAAAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAoDQAAAQAAAAEAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAACgNAAABAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAAAAAAAAKA0AAAEAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgAAAAAAAAA0DQAAAQAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAAAAAADQNAAABAAAAAAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAAAAAAAAAUQ0AABwGAAAJAAAAAAAAAAAAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAYAAAAAAAAABwAAAKgNAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnAYAAAUAAAAAAAAAAAAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAHAAAAuBEAAAAEAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAr/////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACcBgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADcFwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAF9wiQD/CS8PAAcOCRwbEhU4PzYxJCMqLXB3fnlsa2JlSE9GQVRTWl3g5+7p/Pvy9djf1tHEw8rNkJeemYyLgoWor6ahtLO6vcfAyc7b3NXS//jx9uPk7eq3sLm+q6yloo+IgYaTlJ2aJyApLjs8NTIfGBEWAwQNCldQWV5LTEVCb2hhZnN0fXqJjoeAlZKbnLG2v7itqqOk+f738OXi6+zBxs/I3drT1GluZ2B1cnt8UVZfWE1KQ0QZHhcQBQILDCEmLyg9OjM0TklAR1JVXFt2cXh/am1kYz45MDciJSwrBgEIDxodFBOuqaCnsrW8u5aRmJ+KjYSD3tnQ18LFzMvm4ejv+v3083JlZmVyZW5jZSBsaWJGTEFDIDEuMy4yIDIwMTcwMTAxAGZMYUNDRC1EQSBjdWUgc2hlZXQgbXVzdCBoYXZlIGEgbGVhZC1pbiBsZW5ndGggb2YgYXQgbGVhc3QgMiBzZWNvbmRzAENELURBIGN1ZSBzaGVldCBsZWFkLWluIGxlbmd0aCBtdXN0IGJlIGV2ZW5seSBkaXZpc2libGUgYnkgNTg4IHNhbXBsZXMAY3VlIHNoZWV0IG11c3QgaGF2ZSBhdCBsZWFzdCBvbmUgdHJhY2sgKHRoZSBsZWFkLW91dCkAQ0QtREEgY3VlIHNoZWV0IG11c3QgaGF2ZSBhIGxlYWQtb3V0IHRyYWNrIG51bWJlciAxNzAgKDB4QUEpAGN1ZSBzaGVldCBtYXkgbm90IGhhdmUgYSB0cmFjayBudW1iZXIgMABDRC1EQSBjdWUgc2hlZXQgdHJhY2sgbnVtYmVyIG11c3QgYmUgMS05OSBvciAxNzAAQ0QtREEgY3VlIHNoZWV0IGxlYWQtb3V0IG9mZnNldCBtdXN0IGJlIGV2ZW5seSBkaXZpc2libGUgYnkgNTg4IHNhbXBsZXMAQ0QtREEgY3VlIHNoZWV0IHRyYWNrIG9mZnNldCBtdXN0IGJlIGV2ZW5seSBkaXZpc2libGUgYnkgNTg4IHNhbXBsZXMAY3VlIHNoZWV0IHRyYWNrIG11c3QgaGF2ZSBhdCBsZWFzdCBvbmUgaW5kZXggcG9pbnQAY3VlIHNoZWV0IHRyYWNrJ3MgZmlyc3QgaW5kZXggbnVtYmVyIG11c3QgYmUgMCBvciAxAENELURBIGN1ZSBzaGVldCB0cmFjayBpbmRleCBvZmZzZXQgbXVzdCBiZSBldmVubHkgZGl2aXNpYmxlIGJ5IDU4OCBzYW1wbGVzAGN1ZSBzaGVldCB0cmFjayBpbmRleCBudW1iZXJzIG11c3QgaW5jcmVhc2UgYnkgMQBNSU1FIHR5cGUgc3RyaW5nIG11c3QgY29udGFpbiBvbmx5IHByaW50YWJsZSBBU0NJSSBjaGFyYWN0ZXJzICgweDIwLTB4N2UpAGRlc2NyaXB0aW9uIHN0cmluZyBtdXN0IGJlIHZhbGlkIFVURi04AElEM2JhcnRsZXR0AGJhcnRsZXR0X2hhbm4AYmxhY2ttYW4AYmxhY2ttYW5faGFycmlzXzR0ZXJtXzkyZGIAY29ubmVzAGZsYXR0b3AAZ2F1c3MoAGhhbW1pbmcAaGFubgBrYWlzZXJfYmVzc2VsAG51dHRhbGwAcmVjdGFuZ2xlAHRyaWFuZ2xlAHR1a2V5KABwYXJ0aWFsX3R1a2V5KABwdW5jaG91dF90dWtleSgAd2VsY2gAdHVrZXkoNWUtMSkAdHVrZXkoNWUtMSk7cGFydGlhbF90dWtleSgyKQB0dWtleSg1ZS0xKTtwYXJ0aWFsX3R1a2V5KDIpO3B1bmNob3V0X3R1a2V5KDMpAGltYWdlL3BuZwAtLT4AaW5maW5pdHkAbmFu";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}

function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

// {{PRE_LIBRARY}}


  function ___lock() {}

  
    

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var i = 0;
          try {
            if (offset === 0 && length === 0) {
              // musl implements an fflush using a write of a NULL buffer of size 0
              stream.tty.ops.flush(stream.tty);
            } else {
              while (i < length) {
                stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
                i++;
              }
            }
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          // If memory can grow, we don't want to hold on to references of
          // the memory Buffer, as they may get invalidated. That means
          // we need to do a copy here.
          canOwn = false;
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
  
        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            console.log("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function (stream) {
        return stream.fd === null;
      },llseek:function (stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto')['randomBytes'](1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { abort("random_device"); /*Math.random() is not safe for random number generation, so this fallback random_device implementation aborts... see kripken/emscripten/pull/7096 */ };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
     

  function ___unlock() {}

   

   

   

   



   

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

   

   

   
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

var ASSERTIONS = false;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}



function jsCall_ii(index,a1) {
    return functionPointers[index](a1);
}

function jsCall_iii(index,a1,a2) {
    return functionPointers[index](a1,a2);
}

function jsCall_iiii(index,a1,a2,a3) {
    return functionPointers[index](a1,a2,a3);
}

function jsCall_iiiii(index,a1,a2,a3,a4) {
    return functionPointers[index](a1,a2,a3,a4);
}

function jsCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
    return functionPointers[index](a1,a2,a3,a4,a5,a6);
}

function jsCall_viii(index,a1,a2,a3) {
    functionPointers[index](a1,a2,a3);
}

function jsCall_viiii(index,a1,a2,a3,a4) {
    functionPointers[index](a1,a2,a3,a4);
}

function jsCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
    functionPointers[index](a1,a2,a3,a4,a5,a6);
}

function jsCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
    functionPointers[index](a1,a2,a3,a4,a5,a6,a7);
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity, "byteLength": byteLength };

Module.asmLibraryArg = { "a": abort, "b": assert, "c": enlargeMemory, "d": getTotalMemory, "e": setTempRet0, "f": getTempRet0, "g": abortOnCannotGrowMemory, "h": jsCall_ii, "i": jsCall_iii, "j": jsCall_iiii, "k": jsCall_iiiii, "l": jsCall_iiiiiii, "m": jsCall_viii, "n": jsCall_viiii, "o": jsCall_viiiiii, "p": jsCall_viiiiiii, "q": ___lock, "r": ___setErrNo, "s": ___syscall140, "t": ___syscall145, "u": ___syscall146, "v": ___syscall54, "w": ___syscall6, "x": ___unlock, "y": _emscripten_memcpy_big, "z": DYNAMICTOP_PTR, "A": tempDoublePtr, "B": STACKTOP, "C": STACK_MAX };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'almost asm';


  var Int8View = global.Int8Array;
  var HEAP8 = new Int8View(buffer);
  var Int16View = global.Int16Array;
  var HEAP16 = new Int16View(buffer);
  var Int32View = global.Int32Array;
  var HEAP32 = new Int32View(buffer);
  var Uint8View = global.Uint8Array;
  var HEAPU8 = new Uint8View(buffer);
  var Uint16View = global.Uint16Array;
  var HEAPU16 = new Uint16View(buffer);
  var Uint32View = global.Uint32Array;
  var HEAPU32 = new Uint32View(buffer);
  var Float32View = global.Float32Array;
  var HEAPF32 = new Float32View(buffer);
  var Float64View = global.Float64Array;
  var HEAPF64 = new Float64View(buffer);
  var byteLength = global.byteLength;

  var DYNAMICTOP_PTR=env.z|0;
  var tempDoublePtr=env.A|0;
  var STACKTOP=env.B|0;
  var STACK_MAX=env.C|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.a;
  var assert=env.b;
  var enlargeMemory=env.c;
  var getTotalMemory=env.d;
  var setTempRet0=env.e;
  var getTempRet0=env.f;
  var abortOnCannotGrowMemory=env.g;
  var jsCall_ii=env.h;
  var jsCall_iii=env.i;
  var jsCall_iiii=env.j;
  var jsCall_iiiii=env.k;
  var jsCall_iiiiiii=env.l;
  var jsCall_viii=env.m;
  var jsCall_viiii=env.n;
  var jsCall_viiiiii=env.o;
  var jsCall_viiiiiii=env.p;
  var ___lock=env.q;
  var ___setErrNo=env.r;
  var ___syscall140=env.s;
  var ___syscall145=env.t;
  var ___syscall146=env.u;
  var ___syscall54=env.v;
  var ___syscall6=env.w;
  var ___unlock=env.x;
  var _emscripten_memcpy_big=env.y;
  var tempFloat = 0.0;

function _emscripten_replace_memory(newBuffer) {
  if ((byteLength(newBuffer) & 0xffffff || byteLength(newBuffer) <= 0xffffff) || byteLength(newBuffer) > 0x80000000) return false;
  HEAP8 = new Int8View(newBuffer);
  HEAP16 = new Int16View(newBuffer);
  HEAP32 = new Int32View(newBuffer);
  HEAPU8 = new Uint8View(newBuffer);
  HEAPU16 = new Uint16View(newBuffer);
  HEAPU32 = new Uint32View(newBuffer);
  HEAPF32 = new Float32View(newBuffer);
  HEAPF64 = new Float64View(newBuffer);
  buffer = newBuffer;
  return true;
}

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  
  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}
function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function _FLAC__bitreader_new() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_calloc(1,40)|0);
 return ($0|0);
}
function _FLAC__bitreader_delete($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _FLAC__bitreader_free($0);
 _free($0);
 return;
}
function _FLAC__bitreader_free($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  _free($1);
 }
 $3 = ((($0)) + 32|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 0;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;HEAP32[$0+20>>2]=0|0;
 return;
}
function _FLAC__bitreader_init($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 8|0);
 $4 = ((($0)) + 4|0);
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;
 HEAP32[$4>>2] = 2048;
 $5 = (_malloc(8192)|0);
 HEAP32[$0>>2] = $5;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = ((($0)) + 32|0);
 HEAP32[$7>>2] = $1;
 $8 = ((($0)) + 36|0);
 HEAP32[$8>>2] = $2;
 $$0 = 1;
 return ($$0|0);
}
function _FLAC__bitreader_clear($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;
 return 1;
}
function _FLAC__bitreader_reset_read_crc16($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1&65535;
 $3 = ((($0)) + 24|0);
 HEAP32[$3>>2] = $2;
 $4 = ((($0)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 28|0);
 HEAP32[$6>>2] = $5;
 return;
}
function _FLAC__bitreader_get_read_crc16($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ((($0)) + 16|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($4) + ($6<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($0)) + 28|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10>>>0)<($2>>>0);
  if ($11) {
   $12 = ((($0)) + 24|0);
   $18 = $10;
   while(1) {
    $13 = HEAP32[$12>>2]|0;
    $14 = $13 << 8;
    $15 = $14 & 65280;
    $16 = $13 >>> 8;
    $17 = (24 - ($18))|0;
    $19 = $8 >>> $17;
    $20 = $19 & 255;
    $21 = $16 ^ $20;
    $22 = (48 + ($21<<2)|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = $15 ^ $23;
    HEAP32[$12>>2] = $24;
    $25 = (($18) + 8)|0;
    HEAP32[$9>>2] = $25;
    $26 = ($25>>>0)<($2>>>0);
    if ($26) {
     $18 = $25;
    } else {
     break;
    }
   }
  }
 }
 $27 = ((($0)) + 24|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $28&65535;
 return ($29|0);
}
function _FLAC__bitreader_is_consumed_byte_aligned($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 7;
 $4 = ($3|0)==(0);
 $5 = $4&1;
 return ($5|0);
}
function _FLAC__bitreader_bits_left_for_byte_alignment($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 7;
 $4 = (8 - ($3))|0;
 return ($4|0);
}
function _FLAC__bitreader_get_input_bits_unconsumed($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) - ($4))|0;
 $6 = $5 << 5;
 $7 = ((($0)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 << 3;
 $10 = (($6) + ($9))|0;
 $11 = ((($0)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) - ($12))|0;
 return ($13|0);
}
function _FLAC__bitreader_read_raw_uint32($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$2 = 0, $$lcssa = 0, $$lcssa72 = 0, $$lcssa76 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  HEAP32[$1>>2] = 0;
  $$2 = 1;
  return ($$2|0);
 }
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) - ($7))|0;
 $9 = $8 << 5;
 $10 = ((($0)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 << 3;
 $13 = (($9) + ($12))|0;
 $14 = ((($0)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) - ($15))|0;
 $17 = ($16>>>0)<($2>>>0);
 L5: do {
  if ($17) {
   while(1) {
    $28 = (_bitreader_read_from_client_($0)|0);
    $29 = ($28|0)==(0);
    if ($29) {
     $$2 = 0;
     break;
    }
    $18 = HEAP32[$4>>2]|0;
    $19 = HEAP32[$6>>2]|0;
    $20 = (($18) - ($19))|0;
    $21 = $20 << 5;
    $22 = HEAP32[$10>>2]|0;
    $23 = $22 << 3;
    $24 = (($21) + ($23))|0;
    $25 = HEAP32[$14>>2]|0;
    $26 = (($24) - ($25))|0;
    $27 = ($26>>>0)<($2>>>0);
    if (!($27)) {
     $$lcssa = $25;$$lcssa72 = $19;$$lcssa76 = $18;
     break L5;
    }
   }
   return ($$2|0);
  } else {
   $$lcssa = $15;$$lcssa72 = $7;$$lcssa76 = $5;
  }
 } while(0);
 $30 = ($$lcssa76>>>0)>($$lcssa72>>>0);
 $31 = ($$lcssa|0)!=(0);
 if (!($30)) {
  $64 = HEAP32[$0>>2]|0;
  $65 = (($64) + ($$lcssa72<<2)|0);
  $66 = HEAP32[$65>>2]|0;
  if ($31) {
   $67 = -1 >>> $$lcssa;
   $68 = $66 & $67;
   $69 = (32 - ($2))|0;
   $70 = (($69) - ($$lcssa))|0;
   $71 = $68 >>> $70;
   HEAP32[$1>>2] = $71;
   $72 = HEAP32[$14>>2]|0;
   $73 = (($72) + ($2))|0;
   HEAP32[$14>>2] = $73;
   $$2 = 1;
   return ($$2|0);
  } else {
   $74 = (32 - ($2))|0;
   $75 = $66 >>> $74;
   HEAP32[$1>>2] = $75;
   $76 = HEAP32[$14>>2]|0;
   $77 = (($76) + ($2))|0;
   HEAP32[$14>>2] = $77;
   $$2 = 1;
   return ($$2|0);
  }
 }
 if (!($31)) {
  $56 = HEAP32[$0>>2]|0;
  $57 = (($56) + ($$lcssa72<<2)|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ($2>>>0)<(32);
  if ($59) {
   $60 = (32 - ($2))|0;
   $61 = $58 >>> $60;
   HEAP32[$1>>2] = $61;
   HEAP32[$14>>2] = $2;
   $$2 = 1;
   return ($$2|0);
  } else {
   HEAP32[$1>>2] = $58;
   _crc16_update_word_($0,$58);
   $62 = HEAP32[$6>>2]|0;
   $63 = (($62) + 1)|0;
   HEAP32[$6>>2] = $63;
   $$2 = 1;
   return ($$2|0);
  }
 }
 $32 = (32 - ($$lcssa))|0;
 $33 = HEAP32[$0>>2]|0;
 $34 = (($33) + ($$lcssa72<<2)|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($32>>>0)>($2>>>0);
 $37 = -1 >>> $$lcssa;
 $38 = $35 & $37;
 if ($36) {
  $39 = (($32) - ($2))|0;
  $40 = $38 >>> $39;
  HEAP32[$1>>2] = $40;
  $41 = HEAP32[$14>>2]|0;
  $42 = (($41) + ($2))|0;
  HEAP32[$14>>2] = $42;
  $$2 = 1;
  return ($$2|0);
 }
 HEAP32[$1>>2] = $38;
 $43 = (($2) - ($32))|0;
 _crc16_update_word_($0,$35);
 $44 = HEAP32[$6>>2]|0;
 $45 = (($44) + 1)|0;
 HEAP32[$6>>2] = $45;
 HEAP32[$14>>2] = 0;
 $46 = ($43|0)==(0);
 if ($46) {
  $$2 = 1;
  return ($$2|0);
 }
 $47 = HEAP32[$1>>2]|0;
 $48 = $47 << $43;
 HEAP32[$1>>2] = $48;
 $49 = HEAP32[$0>>2]|0;
 $50 = HEAP32[$6>>2]|0;
 $51 = (($49) + ($50<<2)|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (32 - ($43))|0;
 $54 = $52 >>> $53;
 $55 = $54 | $48;
 HEAP32[$1>>2] = $55;
 HEAP32[$14>>2] = $43;
 $$2 = 1;
 return ($$2|0);
}
function _bitreader_read_from_client_($0) {
 $0 = $0|0;
 var $$0 = 0, $$05859 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = ((($0)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $5 = ((($0)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($0)) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)!=(0);
  $10 = $9&1;
  $11 = HEAP32[$0>>2]|0;
  $12 = (($11) + ($3<<2)|0);
  $13 = (($6) - ($3))|0;
  $14 = (($13) + ($10))|0;
  $15 = $14 << 2;
  _memmove(($11|0),($12|0),($15|0))|0;
  $16 = HEAP32[$5>>2]|0;
  $17 = (($16) - ($3))|0;
  HEAP32[$5>>2] = $17;
  HEAP32[$2>>2] = 0;
 }
 $18 = ((($0)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($0)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($19) - ($21))|0;
 $23 = $22 << 2;
 $24 = ((($0)) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($23) - ($25))|0;
 HEAP32[$1>>2] = $26;
 $27 = ($26|0)==(0);
 if ($27) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $28 = HEAP32[$0>>2]|0;
 $29 = (($28) + ($21<<2)|0);
 $30 = (($29) + ($25)|0);
 $31 = ($25|0)==(0);
 if (!($31)) {
  $32 = HEAP32[$29>>2]|0;
  $33 = (_llvm_bswap_i32(($32|0))|0);
  HEAP32[$29>>2] = $33;
 }
 $34 = ((($0)) + 32|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($0)) + 36|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (FUNCTION_TABLE_iiii[$35 & 15]($30,$1,$37)|0);
 $39 = ($38|0)==(0);
 if ($39) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $40 = HEAP32[$20>>2]|0;
 $41 = $40 << 2;
 $42 = HEAP32[$24>>2]|0;
 $43 = HEAP32[$1>>2]|0;
 $44 = (($42) + 3)|0;
 $45 = (($44) + ($41))|0;
 $46 = (($45) + ($43))|0;
 $47 = $46 >>> 2;
 $48 = ($40>>>0)<($47>>>0);
 if ($48) {
  $49 = HEAP32[$0>>2]|0;
  $$05859 = $40;
  while(1) {
   $50 = (($49) + ($$05859<<2)|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (_llvm_bswap_i32(($51|0))|0);
   HEAP32[$50>>2] = $52;
   $53 = (($$05859) + 1)|0;
   $exitcond = ($53|0)==($47|0);
   if ($exitcond) {
    break;
   } else {
    $$05859 = $53;
   }
  }
 }
 $54 = HEAP32[$20>>2]|0;
 $55 = $54 << 2;
 $56 = HEAP32[$24>>2]|0;
 $57 = (($55) + ($56))|0;
 $58 = HEAP32[$1>>2]|0;
 $59 = (($57) + ($58))|0;
 $60 = $59 >>> 2;
 HEAP32[$20>>2] = $60;
 $61 = $59 & 3;
 HEAP32[$24>>2] = $61;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _crc16_update_word_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$1 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >>> 3;
 $7 = $5 << 29;
 $8 = $6 | $7;
 switch ($8|0) {
 case 0:  {
  $9 = $3 << 8;
  $10 = $9 & 65280;
  $11 = $3 >>> 8;
  $12 = $1 >>> 24;
  $13 = $11 ^ $12;
  $14 = (48 + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15 ^ $10;
  $$0 = $16;
  label = 3;
  break;
 }
 case 1:  {
  $$0 = $3;
  label = 3;
  break;
 }
 case 2:  {
  $$1 = $3;
  label = 4;
  break;
 }
 case 3:  {
  $$2 = $3;
  break;
 }
 default: {
  HEAP32[$4>>2] = 0;
  return;
 }
 }
 if ((label|0) == 3) {
  $17 = $$0 << 8;
  $18 = $17 & 65280;
  $19 = $$0 >>> 8;
  $20 = $1 >>> 16;
  $21 = $20 & 255;
  $22 = $19 ^ $21;
  $23 = (48 + ($22<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $18 ^ $24;
  $$1 = $25;
  label = 4;
 }
 if ((label|0) == 4) {
  $26 = $$1 << 8;
  $27 = $26 & 65280;
  $28 = $$1 >>> 8;
  $29 = $1 >>> 8;
  $30 = $29 & 255;
  $31 = $28 ^ $30;
  $32 = (48 + ($31<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $27 ^ $33;
  $$2 = $34;
 }
 $35 = $$2 << 8;
 $36 = $35 & 65280;
 $37 = $$2 >>> 8;
 $38 = $1 & 255;
 $39 = $37 ^ $38;
 $40 = (48 + ($39<<2)|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $36 ^ $41;
 HEAP32[$2>>2] = $42;
 HEAP32[$4>>2] = 0;
 return;
}
function _FLAC__bitreader_read_raw_int32($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 $4 = (_FLAC__bitreader_read_raw_uint32($0,$3,$2)|0);
 $5 = ($4|0)==(0);
 $6 = (($2) + -1)|0;
 $7 = 1 << $6;
 if ($5) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = HEAP32[$3>>2]|0;
 $9 = $8 ^ $7;
 $10 = (($9) - ($7))|0;
 HEAP32[$1>>2] = $10;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _FLAC__bitreader_read_raw_uint64($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = ($2>>>0)>(32);
 do {
  if ($5) {
   $6 = (($2) + -32)|0;
   $7 = (_FLAC__bitreader_read_raw_uint32($0,$3,$6)|0);
   $8 = ($7|0)==(0);
   if ($8) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $9 = (_FLAC__bitreader_read_raw_uint32($0,$4,32)|0);
   $10 = ($9|0)==(0);
   if ($10) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $11 = HEAP32[$3>>2]|0;
    $12 = $1;
    $13 = $12;
    HEAP32[$13>>2] = 0;
    $14 = (($12) + 4)|0;
    $15 = $14;
    HEAP32[$15>>2] = $11;
    $16 = HEAP32[$4>>2]|0;
    $22 = $16;$25 = $11;
    break;
   }
  } else {
   $17 = (_FLAC__bitreader_read_raw_uint32($0,$4,$2)|0);
   $18 = ($17|0)==(0);
   if ($18) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $19 = HEAP32[$4>>2]|0;
    $22 = $19;$25 = 0;
    break;
   }
  }
 } while(0);
 $20 = $1;
 $21 = $20;
 HEAP32[$21>>2] = $22;
 $23 = (($20) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $25;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _FLAC__bitreader_read_uint32_little_endian($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$3>>2] = 0;
 $4 = (_FLAC__bitreader_read_raw_uint32($0,$3,8)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (_FLAC__bitreader_read_raw_uint32($0,$2,8)|0);
 $7 = ($6|0)==(0);
 if ($7) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = $8 << 8;
 $10 = HEAP32[$3>>2]|0;
 $11 = $10 | $9;
 HEAP32[$3>>2] = $11;
 $12 = (_FLAC__bitreader_read_raw_uint32($0,$2,8)|0);
 $13 = ($12|0)==(0);
 if ($13) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = HEAP32[$2>>2]|0;
 $15 = $14 << 16;
 $16 = $15 | $11;
 HEAP32[$3>>2] = $16;
 $17 = (_FLAC__bitreader_read_raw_uint32($0,$2,8)|0);
 $18 = ($17|0)==(0);
 if ($18) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $19 = HEAP32[$2>>2]|0;
 $20 = $19 << 24;
 $21 = $20 | $16;
 HEAP32[$3>>2] = $21;
 HEAP32[$1>>2] = $21;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _FLAC__bitreader_skip_bits_no_crc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$024 = 0, $$1 = 0, $$125 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ($1|0)==(0);
 if ($3) {
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 $4 = ((($0)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 7;
 $7 = ($6|0)==(0);
 if ($7) {
  $$024 = $1;
  label = 5;
 } else {
  $8 = (8 - ($6))|0;
  $9 = ($8>>>0)<($1>>>0);
  $10 = $9 ? $8 : $1;
  $11 = (_FLAC__bitreader_read_raw_uint32($0,$2,$10)|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = (($1) - ($10))|0;
   $$024 = $13;
   label = 5;
  }
 }
 do {
  if ((label|0) == 5) {
   $14 = $$024 >>> 3;
   $15 = ($14|0)==(0);
   if ($15) {
    $$125 = $$024;
   } else {
    $16 = (_FLAC__bitreader_skip_byte_block_aligned_no_crc($0,$14)|0);
    $17 = ($16|0)==(0);
    if ($17) {
     break;
    }
    $18 = $$024 & 7;
    $$125 = $18;
   }
   $19 = ($$125|0)==(0);
   if (!($19)) {
    $20 = (_FLAC__bitreader_read_raw_uint32($0,$2,$$125)|0);
    $21 = ($20|0)==(0);
    if ($21) {
     break;
    }
   }
   $$1 = 1;
   STACKTOP = sp;return ($$1|0);
  }
 } while(0);
 $$1 = 0;
 STACKTOP = sp;return ($$1|0);
}
function _FLAC__bitreader_skip_byte_block_aligned_no_crc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$013 = 0, $$026 = 0, $$122 = 0, $$2 = 0, $$319 = 0, $$319$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $cond25 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $cond25 = ($1|0)==(0);
 L1: do {
  if ($cond25) {
   $$013 = 1;
  } else {
   $3 = ((($0)) + 20|0);
   $$026 = $1;
   while(1) {
    $4 = HEAP32[$3>>2]|0;
    $5 = ($4|0)==(0);
    if ($5) {
     break;
    }
    $6 = (_FLAC__bitreader_read_raw_uint32($0,$2,8)|0);
    $7 = ($6|0)==(0);
    if ($7) {
     $$013 = 0;
     break L1;
    }
    $8 = (($$026) + -1)|0;
    $cond = ($8|0)==(0);
    if ($cond) {
     $$013 = 1;
     break L1;
    } else {
     $$026 = $8;
    }
   }
   $9 = ($$026>>>0)>(3);
   if ($9) {
    $10 = ((($0)) + 16|0);
    $11 = ((($0)) + 8|0);
    $$122 = $$026;
    while(1) {
     $12 = HEAP32[$10>>2]|0;
     $13 = HEAP32[$11>>2]|0;
     $14 = ($12>>>0)<($13>>>0);
     if ($14) {
      $15 = (($12) + 1)|0;
      HEAP32[$10>>2] = $15;
      $16 = (($$122) + -4)|0;
      $$2 = $16;
     } else {
      $17 = (_bitreader_read_from_client_($0)|0);
      $18 = ($17|0)==(0);
      if ($18) {
       $$013 = 0;
       break L1;
      } else {
       $$2 = $$122;
      }
     }
     $19 = ($$2>>>0)>(3);
     if ($19) {
      $$122 = $$2;
     } else {
      break;
     }
    }
    $20 = ($$2|0)==(0);
    if ($20) {
     $$013 = 1;
     break;
    } else {
     $$319$ph = $$2;
    }
   } else {
    $$319$ph = $$026;
   }
   $$319 = $$319$ph;
   while(1) {
    $23 = (_FLAC__bitreader_read_raw_uint32($0,$2,8)|0);
    $24 = ($23|0)==(0);
    $21 = (($$319) + -1)|0;
    if ($24) {
     $$013 = 0;
     break L1;
    }
    $22 = ($21|0)==(0);
    if ($22) {
     $$013 = 1;
     break;
    } else {
     $$319 = $21;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$013|0);
}
function _FLAC__bitreader_read_byte_block_aligned_no_crc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$02750 = 0, $$02849 = 0, $$12943 = 0, $$144 = 0, $$2 = 0, $$230 = 0, $$33139 = 0, $$33139$ph = 0, $$340 = 0, $$340$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $cond48 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 $cond48 = ($2|0)==(0);
 if ($cond48) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = ((($0)) + 20|0);
 $$02750 = $2;$$02849 = $1;
 while(1) {
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0);
  if ($6) {
   label = 6;
   break;
  }
  $7 = (_FLAC__bitreader_read_raw_uint32($0,$3,8)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$0 = 0;
   label = 16;
   break;
  }
  $9 = HEAP32[$3>>2]|0;
  $10 = $9&255;
  $11 = ((($$02849)) + 1|0);
  HEAP8[$$02849>>0] = $10;
  $12 = (($$02750) + -1)|0;
  $cond = ($12|0)==(0);
  if ($cond) {
   $$0 = 1;
   label = 16;
   break;
  } else {
   $$02750 = $12;$$02849 = $11;
  }
 }
 if ((label|0) == 6) {
  $13 = ($$02750>>>0)>(3);
  if ($13) {
   $14 = ((($0)) + 16|0);
   $15 = ((($0)) + 8|0);
   $$12943 = $$02849;$$144 = $$02750;
   while(1) {
    $16 = HEAP32[$14>>2]|0;
    $17 = HEAP32[$15>>2]|0;
    $18 = ($16>>>0)<($17>>>0);
    if ($18) {
     $19 = HEAP32[$0>>2]|0;
     $20 = (($16) + 1)|0;
     HEAP32[$14>>2] = $20;
     $21 = (($19) + ($16<<2)|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = $22 >>> 24;
     $24 = $23&255;
     HEAP8[$$12943>>0] = $24;
     $25 = $22 >>> 16;
     $26 = $25&255;
     $27 = ((($$12943)) + 1|0);
     HEAP8[$27>>0] = $26;
     $28 = $22 >>> 8;
     $29 = $28&255;
     $30 = ((($$12943)) + 2|0);
     HEAP8[$30>>0] = $29;
     $31 = $22&255;
     $32 = ((($$12943)) + 3|0);
     HEAP8[$32>>0] = $31;
     $33 = ((($$12943)) + 4|0);
     $34 = (($$144) + -4)|0;
     $$2 = $34;$$230 = $33;
    } else {
     $35 = (_bitreader_read_from_client_($0)|0);
     $36 = ($35|0)==(0);
     if ($36) {
      $$0 = 0;
      label = 16;
      break;
     } else {
      $$2 = $$144;$$230 = $$12943;
     }
    }
    $37 = ($$2>>>0)>(3);
    if ($37) {
     $$12943 = $$230;$$144 = $$2;
    } else {
     break;
    }
   }
   if ((label|0) == 16) {
    STACKTOP = sp;return ($$0|0);
   }
   $38 = ($$2|0)==(0);
   if ($38) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $$33139$ph = $$230;$$340$ph = $$2;
   }
  } else {
   $$33139$ph = $$02849;$$340$ph = $$02750;
  }
  $$33139 = $$33139$ph;$$340 = $$340$ph;
  while(1) {
   $39 = (_FLAC__bitreader_read_raw_uint32($0,$3,8)|0);
   $40 = ($39|0)==(0);
   if ($40) {
    $$0 = 0;
    label = 16;
    break;
   }
   $41 = HEAP32[$3>>2]|0;
   $42 = $41&255;
   $43 = ((($$33139)) + 1|0);
   HEAP8[$$33139>>0] = $42;
   $44 = (($$340) + -1)|0;
   $45 = ($44|0)==(0);
   if ($45) {
    $$0 = 1;
    label = 16;
    break;
   } else {
    $$33139 = $43;$$340 = $44;
   }
  }
  if ((label|0) == 16) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 16) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _FLAC__bitreader_read_unary_unsigned($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$5 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 16|0);
 $3 = ((($0)) + 8|0);
 $4 = ((($0)) + 12|0);
 $5 = ((($0)) + 20|0);
 $6 = ((($0)) + 20|0);
 L1: while(1) {
  $7 = HEAP32[$2>>2]|0;
  $8 = HEAP32[$3>>2]|0;
  $9 = ($7>>>0)<($8>>>0);
  if ($9) {
   $12 = $7;
   while(1) {
    $10 = HEAP32[$0>>2]|0;
    $11 = (($10) + ($12<<2)|0);
    $13 = HEAP32[$11>>2]|0;
    $14 = HEAP32[$6>>2]|0;
    $15 = $13 << $14;
    $16 = ($15|0)==(0);
    if (!($16)) {
     label = 5;
     break L1;
    }
    $29 = (32 - ($14))|0;
    $30 = HEAP32[$1>>2]|0;
    $31 = (($29) + ($30))|0;
    HEAP32[$1>>2] = $31;
    $32 = HEAP32[$2>>2]|0;
    $33 = (($10) + ($32<<2)|0);
    $34 = HEAP32[$33>>2]|0;
    _crc16_update_word_($0,$34);
    $35 = HEAP32[$2>>2]|0;
    $36 = (($35) + 1)|0;
    HEAP32[$2>>2] = $36;
    HEAP32[$6>>2] = 0;
    $37 = HEAP32[$3>>2]|0;
    $38 = ($36>>>0)<($37>>>0);
    if ($38) {
     $12 = $36;
    } else {
     $$lcssa = $36;
     break;
    }
   }
  } else {
   $$lcssa = $7;
  }
  $39 = HEAP32[$4>>2]|0;
  $40 = $39 << 3;
  $41 = HEAP32[$5>>2]|0;
  $42 = ($40>>>0)>($41>>>0);
  if ($42) {
   $43 = HEAP32[$0>>2]|0;
   $44 = (($43) + ($$lcssa<<2)|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (32 - ($40))|0;
   $47 = -1 << $46;
   $48 = $45 & $47;
   $49 = $48 << $41;
   $50 = ($49|0)==(0);
   if (!($50)) {
    label = 10;
    break;
   }
   $57 = (($40) - ($41))|0;
   $58 = HEAP32[$1>>2]|0;
   $59 = (($57) + ($58))|0;
   HEAP32[$1>>2] = $59;
   HEAP32[$5>>2] = $40;
  }
  $60 = (_bitreader_read_from_client_($0)|0);
  $61 = ($60|0)==(0);
  if ($61) {
   $$5 = 0;
   label = 13;
   break;
  }
 }
 if ((label|0) == 5) {
  $17 = (_FLAC__clz_uint32($15)|0);
  $18 = HEAP32[$1>>2]|0;
  $19 = (($18) + ($17))|0;
  HEAP32[$1>>2] = $19;
  $20 = (($17) + 1)|0;
  $21 = HEAP32[$6>>2]|0;
  $22 = (($20) + ($21))|0;
  HEAP32[$6>>2] = $22;
  $23 = ($22>>>0)>(31);
  if (!($23)) {
   $$5 = 1;
   return ($$5|0);
  }
  $24 = HEAP32[$2>>2]|0;
  $25 = (($10) + ($24<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  _crc16_update_word_($0,$26);
  $27 = HEAP32[$2>>2]|0;
  $28 = (($27) + 1)|0;
  HEAP32[$2>>2] = $28;
  HEAP32[$6>>2] = 0;
  $$5 = 1;
  return ($$5|0);
 }
 else if ((label|0) == 10) {
  $51 = (_FLAC__clz_uint32($49)|0);
  $52 = HEAP32[$1>>2]|0;
  $53 = (($52) + ($51))|0;
  HEAP32[$1>>2] = $53;
  $54 = (($51) + 1)|0;
  $55 = HEAP32[$5>>2]|0;
  $56 = (($54) + ($55))|0;
  HEAP32[$5>>2] = $56;
  $$5 = 1;
  return ($$5|0);
 }
 else if ((label|0) == 13) {
  return ($$5|0);
 }
 return (0)|0;
}
function _FLAC__clz_uint32($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (Math_clz32(($0|0))|0);
 return ($1|0);
}
function _FLAC__bitreader_read_rice_signed_block($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0114150 = 0, $$0115155 = 0, $$0118$lcssa = 0, $$0118$ph = 0, $$0118154 = 0, $$0122 = 0, $$0123 = 0, $$0128$ph = 0, $$0129$lcssa = 0, $$0129153 = 0, $$1$ph = 0, $$1116 = 0, $$1119 = 0, $$1124 = 0, $$1130 = 0, $$1156 = 0, $$2117 = 0, $$2120 = 0, $$2125 = 0;
 var $$2131 = 0, $$3 = 0, $$3121 = 0, $$3132 = 0, $$4 = 0, $$4127 = 0, $$4133 = 0, $$5 = 0, $$sink196 = 0, $$sink196$in = 0, $$sink198 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond134 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp + 4|0;
 $5 = sp;
 $6 = (($1) + ($2<<2)|0);
 $7 = ($3|0)==(0);
 if ($7) {
  $8 = ($2|0)>(0);
  if (!($8)) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $$0114150 = $1;
  while(1) {
   $9 = (_FLAC__bitreader_read_unary_unsigned($0,$5)|0);
   $10 = ($9|0)==(0);
   if ($10) {
    $$0 = 0;
    label = 28;
    break;
   }
   $11 = HEAP32[$5>>2]|0;
   $12 = $11 >>> 1;
   $13 = $11 & 1;
   $14 = (0 - ($13))|0;
   $15 = $12 ^ $14;
   $16 = ((($$0114150)) + 4|0);
   HEAP32[$$0114150>>2] = $15;
   $17 = ($16>>>0)<($6>>>0);
   if ($17) {
    $$0114150 = $16;
   } else {
    $$0 = 1;
    label = 28;
    break;
   }
  }
  if ((label|0) == 28) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 $18 = ((($0)) + 16|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($0)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($19>>>0)<($21>>>0);
 if ($22) {
  $$0128$ph = $21;$$1$ph = $1;$$sink198 = $19;
  label = 8;
 } else {
  $$3 = $1;$$4127 = 0;
  label = 20;
 }
 L15: while(1) {
  do {
   if ((label|0) == 8) {
    label = 0;
    $$sink196$in = ((($0)) + 20|0);
    $$sink196 = HEAP32[$$sink196$in>>2]|0;
    $$0118$ph = (32 - ($$sink196))|0;
    $23 = ($$1$ph>>>0)<($6>>>0);
    if (!($23)) {
     $$0118$lcssa = $$0118$ph;$$0129$lcssa = $$sink198;
     label = 25;
     break L15;
    }
    $24 = HEAP32[$0>>2]|0;
    $25 = (($24) + ($$sink198<<2)|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $26 << $$sink196;
    $28 = (32 - ($3))|0;
    $$0115155 = $27;$$0118154 = $$0118$ph;$$0129153 = $$sink198;$$1156 = $$1$ph;
    L19: while(1) {
     $29 = (_FLAC__clz2_uint32($$0115155)|0);
     $30 = ($29|0)==(32);
     if ($30) {
      $$0123 = $$0118154;$$1130 = $$0129153;
      while(1) {
       $31 = HEAP32[$0>>2]|0;
       $32 = (($$1130) + 1)|0;
       $33 = (($31) + ($$1130<<2)|0);
       $34 = HEAP32[$33>>2]|0;
       _crc16_update_word_($0,$34);
       $35 = ($32>>>0)<($$0128$ph>>>0);
       if (!($35)) {
        label = 19;
        break L19;
       }
       $36 = HEAP32[$0>>2]|0;
       $37 = (($36) + ($32<<2)|0);
       $38 = HEAP32[$37>>2]|0;
       $39 = (_FLAC__clz2_uint32($38)|0);
       $40 = (($39) + ($$0123))|0;
       $41 = ($39|0)==(32);
       if ($41) {
        $$0123 = $40;$$1130 = $32;
       } else {
        $$0122 = $39;$$1116 = $38;$$1124 = $40;$$2131 = $32;
        break;
       }
      }
     } else {
      $$0122 = $29;$$1116 = $$0115155;$$1124 = $29;$$2131 = $$0129153;
     }
     $42 = $$1116 << $$0122;
     $43 = $42 << 1;
     $44 = (($$0118154) + 31)|0;
     $45 = (($44) - ($$1124))|0;
     $46 = $45 & 31;
     HEAP32[$5>>2] = $$1124;
     $47 = $43 >>> $28;
     $48 = ($46>>>0)<($3>>>0);
     if ($48) {
      $51 = HEAP32[$0>>2]|0;
      $52 = (($$2131) + 1)|0;
      $53 = (($51) + ($$2131<<2)|0);
      $54 = HEAP32[$53>>2]|0;
      _crc16_update_word_($0,$54);
      $55 = ($52>>>0)<($$0128$ph>>>0);
      if (!($55)) {
       label = 22;
       break;
      }
      $56 = HEAP32[$0>>2]|0;
      $57 = (($56) + ($52<<2)|0);
      $58 = HEAP32[$57>>2]|0;
      $59 = (($46) + ($28))|0;
      $60 = $58 >>> $59;
      $61 = $60 | $47;
      $62 = (32 - ($59))|0;
      $63 = $58 << $62;
      $$1119 = $59;$$2117 = $63;$$2125 = $61;$$3132 = $52;
     } else {
      $49 = (($46) - ($3))|0;
      $50 = $43 << $3;
      $$1119 = $49;$$2117 = $50;$$2125 = $47;$$3132 = $$2131;
     }
     HEAP32[$4>>2] = $$2125;
     $64 = $$1124 << $3;
     $65 = $$2125 | $64;
     $66 = $65 >>> 1;
     $67 = $65 & 1;
     $68 = (0 - ($67))|0;
     $69 = $66 ^ $68;
     $70 = ((($$1156)) + 4|0);
     HEAP32[$$1156>>2] = $69;
     $71 = ($70>>>0)<($6>>>0);
     if ($71) {
      $$0115155 = $$2117;$$0118154 = $$1119;$$0129153 = $$3132;$$1156 = $70;
     } else {
      $$0118$lcssa = $$1119;$$0129$lcssa = $$3132;
      label = 25;
      break L15;
     }
    }
    if ((label|0) == 19) {
     label = 0;
     $72 = ((($0)) + 20|0);
     HEAP32[$72>>2] = 0;
     HEAP32[$18>>2] = $32;
     $$3 = $$1156;$$4127 = $$0123;
     label = 20;
     continue L15;
    }
    else if ((label|0) == 22) {
     label = 0;
     $77 = ((($0)) + 20|0);
     HEAP32[$77>>2] = 0;
     HEAP32[$18>>2] = $52;
     $$2120 = $46;$$4 = $$1156;$$5 = $47;
     break;
    }
   }
   else if ((label|0) == 20) {
    label = 0;
    $73 = (_FLAC__bitreader_read_unary_unsigned($0,$5)|0);
    $74 = ($73|0)==(0);
    if ($74) {
     $$0 = 0;
     label = 28;
     break L15;
    }
    $75 = HEAP32[$5>>2]|0;
    $76 = (($75) + ($$4127))|0;
    HEAP32[$5>>2] = $76;
    $$2120 = 0;$$4 = $$3;$$5 = 0;
   }
  } while(0);
  $78 = (($3) - ($$2120))|0;
  $79 = (_FLAC__bitreader_read_raw_uint32($0,$4,$78)|0);
  $80 = ($79|0)==(0);
  if ($80) {
   $$0 = 0;
   label = 28;
   break;
  }
  $81 = HEAP32[$4>>2]|0;
  $82 = $81 | $$5;
  HEAP32[$4>>2] = $82;
  $83 = HEAP32[$5>>2]|0;
  $84 = $83 << $3;
  $85 = $84 | $82;
  $86 = $85 >>> 1;
  $87 = $85 & 1;
  $88 = (0 - ($87))|0;
  $89 = $86 ^ $88;
  $90 = ((($$4)) + 4|0);
  HEAP32[$$4>>2] = $89;
  $91 = HEAP32[$18>>2]|0;
  $92 = HEAP32[$20>>2]|0;
  $93 = ($91>>>0)>=($92>>>0);
  $94 = ($90>>>0)<($6>>>0);
  $or$cond = $94 & $93;
  if ($or$cond) {
   $$3 = $90;$$4127 = 0;
   label = 20;
  } else {
   $$0128$ph = $92;$$1$ph = $90;$$sink198 = $91;
   label = 8;
  }
 }
 if ((label|0) == 25) {
  $95 = ($$0118$lcssa|0)==(0);
  $96 = ($$0129$lcssa>>>0)<($$0128$ph>>>0);
  $or$cond134 = $96 & $95;
  if ($or$cond134) {
   $97 = (($$0129$lcssa) + 1)|0;
   $98 = HEAP32[$0>>2]|0;
   $99 = (($98) + ($$0129$lcssa<<2)|0);
   $100 = HEAP32[$99>>2]|0;
   _crc16_update_word_($0,$100);
   $$3121 = 32;$$4133 = $97;
  } else {
   $$3121 = $$0118$lcssa;$$4133 = $$0129$lcssa;
  }
  $101 = (32 - ($$3121))|0;
  $102 = ((($0)) + 20|0);
  HEAP32[$102>>2] = $101;
  HEAP32[$18>>2] = $$4133;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 28) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _FLAC__clz2_uint32($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 32;
 } else {
  $2 = (_FLAC__clz_uint32($0)|0);
  $$0 = $2;
 }
 return ($$0|0);
}
function _FLAC__bitreader_read_utf8_uint32($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0$ph = 0, $$021 = 0, $$120$lcssa = 0, $$12035 = 0, $$136 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond24 = 0, $or$cond26 = 0, $or$cond28 = 0, $or$cond30 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp;
 $5 = (_FLAC__bitreader_read_raw_uint32($0,$4,8)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $$021 = 0;
  STACKTOP = sp;return ($$021|0);
 }
 $7 = ($2|0)!=(0|0);
 if ($7) {
  $8 = HEAP32[$4>>2]|0;
  $9 = $8&255;
  $10 = HEAP32[$3>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$3>>2] = $11;
  $12 = (($2) + ($10)|0);
  HEAP8[$12>>0] = $9;
 }
 $13 = HEAP32[$4>>2]|0;
 $14 = $13 & 128;
 $15 = ($14|0)==(0);
 L7: do {
  if ($15) {
   $$120$lcssa = $13;
  } else {
   $16 = $13 & 192;
   $17 = ($16|0)!=(0);
   $18 = $13 & 32;
   $19 = ($18|0)==(0);
   $or$cond = $17 & $19;
   if ($or$cond) {
    $$0$ph = 1;$$sink = 31;
   } else {
    $20 = $13 & 224;
    $21 = ($20|0)!=(0);
    $22 = $13 & 16;
    $23 = ($22|0)==(0);
    $or$cond24 = $21 & $23;
    if ($or$cond24) {
     $$0$ph = 2;$$sink = 15;
    } else {
     $24 = $13 & 240;
     $25 = ($24|0)!=(0);
     $26 = $13 & 8;
     $27 = ($26|0)==(0);
     $or$cond26 = $25 & $27;
     if ($or$cond26) {
      $$0$ph = 3;$$sink = 7;
     } else {
      $28 = $13 & 248;
      $29 = ($28|0)!=(0);
      $30 = $13 & 4;
      $31 = ($30|0)==(0);
      $or$cond28 = $29 & $31;
      if ($or$cond28) {
       $$0$ph = 4;$$sink = 3;
      } else {
       $32 = $13 & 252;
       $33 = ($32|0)!=(0);
       $34 = $13 & 2;
       $35 = ($34|0)==(0);
       $or$cond30 = $33 & $35;
       if ($or$cond30) {
        $$0$ph = 5;$$sink = 1;
       } else {
        HEAP32[$1>>2] = -1;
        $$021 = 1;
        STACKTOP = sp;return ($$021|0);
       }
      }
     }
    }
   }
   $36 = $13 & $$sink;
   $$12035 = $36;$$136 = $$0$ph;
   while(1) {
    $37 = (_FLAC__bitreader_read_raw_uint32($0,$4,8)|0);
    $38 = ($37|0)==(0);
    if ($38) {
     $$021 = 0;
     label = 19;
     break;
    }
    if ($7) {
     $39 = HEAP32[$4>>2]|0;
     $40 = $39&255;
     $41 = HEAP32[$3>>2]|0;
     $42 = (($41) + 1)|0;
     HEAP32[$3>>2] = $42;
     $43 = (($2) + ($41)|0);
     HEAP8[$43>>0] = $40;
    }
    $44 = HEAP32[$4>>2]|0;
    $45 = $44 & 192;
    $46 = ($45|0)==(128);
    if (!($46)) {
     break;
    }
    $47 = $$12035 << 6;
    $48 = $44 & 63;
    $49 = $48 | $47;
    $50 = (($$136) + -1)|0;
    $51 = ($50|0)==(0);
    if ($51) {
     $$120$lcssa = $49;
     break L7;
    } else {
     $$12035 = $49;$$136 = $50;
    }
   }
   if ((label|0) == 19) {
    STACKTOP = sp;return ($$021|0);
   }
   HEAP32[$1>>2] = -1;
   $$021 = 1;
   STACKTOP = sp;return ($$021|0);
  }
 } while(0);
 HEAP32[$1>>2] = $$120$lcssa;
 $$021 = 1;
 STACKTOP = sp;return ($$021|0);
}
function _FLAC__bitreader_read_utf8_uint64($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0$ph = 0, $$019$shrunk$ph = 0, $$021 = 0, $$138 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond24 = 0, $or$cond26 = 0;
 var $or$cond28 = 0, $or$cond30 = 0, $or$cond32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp;
 $5 = (_FLAC__bitreader_read_raw_uint32($0,$4,8)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $$021 = 0;
  STACKTOP = sp;return ($$021|0);
 }
 $7 = ($2|0)!=(0|0);
 if ($7) {
  $8 = HEAP32[$4>>2]|0;
  $9 = $8&255;
  $10 = HEAP32[$3>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$3>>2] = $11;
  $12 = (($2) + ($10)|0);
  HEAP8[$12>>0] = $9;
 }
 $13 = HEAP32[$4>>2]|0;
 $14 = $13 & 128;
 $15 = ($14|0)==(0);
 L7: do {
  if ($15) {
   $73 = $13;$76 = 0;
  } else {
   $16 = $13 & 192;
   $17 = ($16|0)!=(0);
   $18 = $13 & 32;
   $19 = ($18|0)==(0);
   $or$cond = $17 & $19;
   do {
    if ($or$cond) {
     $20 = $13 & 31;
     $$0$ph = 1;$$019$shrunk$ph = $20;
    } else {
     $21 = $13 & 224;
     $22 = ($21|0)!=(0);
     $23 = $13 & 16;
     $24 = ($23|0)==(0);
     $or$cond24 = $22 & $24;
     if ($or$cond24) {
      $25 = $13 & 15;
      $$0$ph = 2;$$019$shrunk$ph = $25;
      break;
     }
     $26 = $13 & 240;
     $27 = ($26|0)!=(0);
     $28 = $13 & 8;
     $29 = ($28|0)==(0);
     $or$cond26 = $27 & $29;
     if ($or$cond26) {
      $30 = $13 & 7;
      $$0$ph = 3;$$019$shrunk$ph = $30;
      break;
     }
     $31 = $13 & 248;
     $32 = ($31|0)!=(0);
     $33 = $13 & 4;
     $34 = ($33|0)==(0);
     $or$cond28 = $32 & $34;
     if ($or$cond28) {
      $35 = $13 & 3;
      $$0$ph = 4;$$019$shrunk$ph = $35;
      break;
     }
     $36 = $13 & 252;
     $37 = ($36|0)!=(0);
     $38 = $13 & 2;
     $39 = ($38|0)==(0);
     $or$cond30 = $37 & $39;
     if ($or$cond30) {
      $40 = $13 & 1;
      $$0$ph = 5;$$019$shrunk$ph = $40;
      break;
     }
     $41 = $13 & 254;
     $42 = ($41|0)!=(0);
     $43 = $13 & 1;
     $44 = ($43|0)==(0);
     $or$cond32 = $42 & $44;
     if ($or$cond32) {
      $$0$ph = 6;$$019$shrunk$ph = 0;
     } else {
      $45 = $1;
      $46 = $45;
      HEAP32[$46>>2] = -1;
      $47 = (($45) + 4)|0;
      $48 = $47;
      HEAP32[$48>>2] = -1;
      $$021 = 1;
      STACKTOP = sp;return ($$021|0);
     }
    }
   } while(0);
   $$138 = $$0$ph;$63 = $$019$shrunk$ph;$64 = 0;
   while(1) {
    $49 = (_FLAC__bitreader_read_raw_uint32($0,$4,8)|0);
    $50 = ($49|0)==(0);
    if ($50) {
     $$021 = 0;
     label = 26;
     break;
    }
    if ($7) {
     $51 = HEAP32[$4>>2]|0;
     $52 = $51&255;
     $53 = HEAP32[$3>>2]|0;
     $54 = (($53) + 1)|0;
     HEAP32[$3>>2] = $54;
     $55 = (($2) + ($53)|0);
     HEAP8[$55>>0] = $52;
    }
    $56 = HEAP32[$4>>2]|0;
    $57 = $56 & 192;
    $58 = ($57|0)==(128);
    if (!($58)) {
     break;
    }
    $65 = (_bitshift64Shl(($63|0),($64|0),6)|0);
    $66 = (getTempRet0() | 0);
    $67 = $56 & 63;
    $68 = $65 | $67;
    $69 = (($$138) + -1)|0;
    $70 = ($69|0)==(0);
    if ($70) {
     $73 = $68;$76 = $66;
     break L7;
    } else {
     $$138 = $69;$63 = $68;$64 = $66;
    }
   }
   if ((label|0) == 26) {
    STACKTOP = sp;return ($$021|0);
   }
   $59 = $1;
   $60 = $59;
   HEAP32[$60>>2] = -1;
   $61 = (($59) + 4)|0;
   $62 = $61;
   HEAP32[$62>>2] = -1;
   $$021 = 1;
   STACKTOP = sp;return ($$021|0);
  }
 } while(0);
 $71 = $1;
 $72 = $71;
 HEAP32[$72>>2] = $73;
 $74 = (($71) + 4)|0;
 $75 = $74;
 HEAP32[$75>>2] = $76;
 $$021 = 1;
 STACKTOP = sp;return ($$021|0);
}
function _FLAC__bitwriter_new() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_calloc(1,20)|0);
 return ($0|0);
}
function _FLAC__bitwriter_delete($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _FLAC__bitwriter_free($0);
 _free($0);
 return;
}
function _FLAC__bitwriter_free($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  _free($1);
 }
 HEAP32[$0>>2] = 0;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 16|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 12|0);
 HEAP32[$5>>2] = 0;
 return;
}
function _FLAC__bitwriter_init($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 12|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = 8192;
 $4 = (_malloc(32768)|0);
 HEAP32[$0>>2] = $4;
 $5 = ($4|0)!=(0|0);
 $$ = $5&1;
 return ($$|0);
}
function _FLAC__bitwriter_clear($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 12|0);
 HEAP32[$2>>2] = 0;
 return;
}
function _FLAC__bitwriter_get_write_crc16($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp + 4|0;
 $3 = sp;
 $4 = (_FLAC__bitwriter_get_buffer($0,$2,$3)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = HEAP32[$2>>2]|0;
 $7 = HEAP32[$3>>2]|0;
 $8 = (_FLAC__crc16($6,$7)|0);
 $9 = $8&65535;
 HEAP16[$1>>1] = $9;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _FLAC__bitwriter_get_buffer($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 7;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = ($4|0)==(0);
 if (!($7)) {
  $8 = ((($0)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($0)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($9|0)==($11|0);
  if ($12) {
   $13 = (_bitwriter_grow_($0,32)|0);
   $14 = ($13|0)==(0);
   if ($14) {
    $$0 = 0;
    return ($$0|0);
   }
  }
  $15 = ((($0)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$3>>2]|0;
  $18 = (32 - ($17))|0;
  $19 = $16 << $18;
  $20 = (_llvm_bswap_i32(($19|0))|0);
  $21 = HEAP32[$0>>2]|0;
  $22 = HEAP32[$8>>2]|0;
  $23 = (($21) + ($22<<2)|0);
  HEAP32[$23>>2] = $20;
 }
 $24 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $24;
 $25 = ((($0)) + 12|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $26 << 2;
 $28 = HEAP32[$3>>2]|0;
 $29 = $28 >>> 3;
 $30 = (($29) + ($27))|0;
 HEAP32[$2>>2] = $30;
 $$0 = 1;
 return ($$0|0);
}
function _bitwriter_grow_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$020 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($1) + 31)|0;
 $7 = (($6) + ($5))|0;
 $8 = $7 >>> 5;
 $9 = (($8) + ($3))|0;
 $10 = ((($0)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($9>>>0)>($11>>>0);
 if (!($12)) {
  $$0 = 1;
  return ($$0|0);
 }
 $13 = (($9) - ($11))|0;
 $14 = $13 & 1023;
 $15 = ($14|0)==(0);
 $16 = (1024 - ($14))|0;
 $17 = $15 ? 0 : $16;
 $$020 = (($17) + ($9))|0;
 $18 = HEAP32[$0>>2]|0;
 $19 = (_safe_realloc_mul_2op_($18,$$020)|0);
 $20 = ($19|0)==(0|0);
 if ($20) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$0>>2] = $19;
 HEAP32[$10>>2] = $$020;
 $$0 = 1;
 return ($$0|0);
}
function _safe_realloc_mul_2op_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = (_realloc($0,0)|0);
  $$0 = $3;
 } else {
  $4 = ($1>>>0)>(1073741823);
  if ($4) {
   $$0 = 0;
  } else {
   $5 = $1 << 2;
   $6 = (_safe_realloc_($0,$5)|0);
   $$0 = $6;
  }
 }
 return ($$0|0);
}
function _safe_realloc_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_realloc($0,$1)|0);
 $3 = ($1|0)!=(0);
 $4 = ($2|0)==(0|0);
 $or$cond = $3 & $4;
 if (!($or$cond)) {
  return ($2|0);
 }
 _free($0);
 return ($2|0);
}
function _FLAC__bitwriter_release_buffer($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _FLAC__bitwriter_get_write_crc8($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp + 4|0;
 $3 = sp;
 $4 = (_FLAC__bitwriter_get_buffer($0,$2,$3)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = HEAP32[$2>>2]|0;
 $7 = HEAP32[$3>>2]|0;
 $8 = (_FLAC__crc8($6,$7)|0);
 HEAP8[$1>>0] = $8;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _FLAC__bitwriter_write_zeroes($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $$034 = 0, $$1$lcssa = 0, $$135 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 if ($2) {
  $$0 = 1;
  return ($$0|0);
 }
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($1))|0;
 $8 = ($4>>>0)>($7>>>0);
 if (!($8)) {
  $9 = (_bitwriter_grow_($0,$1)|0);
  $10 = ($9|0)==(0);
  if ($10) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0);
 do {
  if ($13) {
   $$034 = $1;
  } else {
   $14 = (32 - ($12))|0;
   $15 = ($14>>>0)<($1>>>0);
   $$ = $15 ? $14 : $1;
   $16 = ((($0)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $17 << $$;
   HEAP32[$16>>2] = $18;
   $19 = (($$) + ($12))|0;
   HEAP32[$11>>2] = $19;
   $20 = ($19|0)==(32);
   if ($20) {
    $21 = (($1) - ($$))|0;
    $22 = (_llvm_bswap_i32(($18|0))|0);
    $23 = HEAP32[$0>>2]|0;
    $24 = HEAP32[$5>>2]|0;
    $25 = (($24) + 1)|0;
    HEAP32[$5>>2] = $25;
    $26 = (($23) + ($24<<2)|0);
    HEAP32[$26>>2] = $22;
    HEAP32[$11>>2] = 0;
    $$034 = $21;
    break;
   } else {
    $$0 = 1;
    return ($$0|0);
   }
  }
 } while(0);
 $27 = ($$034>>>0)>(31);
 if ($27) {
  $28 = HEAP32[$0>>2]|0;
  $$135 = $$034;
  while(1) {
   $29 = HEAP32[$5>>2]|0;
   $30 = (($29) + 1)|0;
   HEAP32[$5>>2] = $30;
   $31 = (($28) + ($29<<2)|0);
   HEAP32[$31>>2] = 0;
   $32 = (($$135) + -32)|0;
   $33 = ($32>>>0)>(31);
   if ($33) {
    $$135 = $32;
   } else {
    break;
   }
  }
  $34 = $$034 & 31;
  $$1$lcssa = $34;
 } else {
  $$1$lcssa = $$034;
 }
 $35 = ($$1$lcssa|0)==(0);
 if ($35) {
  $$0 = 1;
  return ($$0|0);
 }
 $36 = ((($0)) + 4|0);
 HEAP32[$36>>2] = 0;
 HEAP32[$11>>2] = $$1$lcssa;
 $$0 = 1;
 return ($$0|0);
}
function _FLAC__bitwriter_write_raw_uint32($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2>>>0)>(31);
 $4 = $1 >>> $2;
 $5 = ($4|0)==(0);
 $or$cond = $3 | $5;
 if (!($or$cond)) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$1,$2)|0);
 $$0 = $6;
 return ($$0|0);
}
function _FLAC__bitwriter_write_raw_uint32_nocheck($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = ($4|0)==(0|0);
 $6 = ($2>>>0)>(32);
 $or$cond = $6 | $5;
 if ($or$cond) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = ($2|0)==(0);
 if ($7) {
  $$0 = 1;
  return ($$0|0);
 }
 $8 = ((($0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($0)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($2))|0;
 $13 = ($9>>>0)>($12>>>0);
 if (!($13)) {
  $14 = (_bitwriter_grow_($0,$2)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $16 = ((($0)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (32 - ($17))|0;
 $19 = ($18>>>0)>($2>>>0);
 if ($19) {
  $20 = ((($0)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 << $2;
  $23 = $22 | $1;
  HEAP32[$20>>2] = $23;
  $24 = (($17) + ($2))|0;
  HEAP32[$16>>2] = $24;
  $$0 = 1;
  return ($$0|0);
 }
 $25 = ($17|0)==(0);
 if ($25) {
  $45 = (_llvm_bswap_i32(($1|0))|0);
  $46 = HEAP32[$0>>2]|0;
  $47 = HEAP32[$10>>2]|0;
  $48 = (($47) + 1)|0;
  HEAP32[$10>>2] = $48;
  $49 = (($46) + ($47<<2)|0);
  HEAP32[$49>>2] = $45;
  $$0 = 1;
  return ($$0|0);
 } else {
  $26 = ((($0)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $27 << $18;
  $29 = (($2) - ($18))|0;
  HEAP32[$16>>2] = $29;
  $30 = $1 >>> $29;
  $31 = $28 | $30;
  $32 = $31 >>> 24;
  $33 = $31 >>> 8;
  $34 = $33 & 65280;
  $35 = $31 << 8;
  $36 = $35 & 16711680;
  $37 = $31 << 24;
  $38 = $37 | $32;
  $39 = $38 | $34;
  $40 = $39 | $36;
  $41 = HEAP32[$0>>2]|0;
  $42 = HEAP32[$10>>2]|0;
  $43 = (($42) + 1)|0;
  HEAP32[$10>>2] = $43;
  $44 = (($41) + ($42<<2)|0);
  HEAP32[$44>>2] = $40;
  HEAP32[$26>>2] = $1;
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function _FLAC__bitwriter_write_raw_int32($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2>>>0)<(32);
 $4 = -1 << $2;
 $5 = $4 ^ -1;
 $6 = $3 ? $5 : -1;
 $spec$select = $6 & $1;
 $7 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$spec$select,$2)|0);
 return ($7|0);
}
function _FLAC__bitwriter_write_raw_uint64($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($3>>>0)>(32);
 if (!($4)) {
  $10 = (_FLAC__bitwriter_write_raw_uint32($0,$1,$3)|0);
  $$0 = $10;
  return ($$0|0);
 }
 $5 = (($3) + -32)|0;
 $6 = (_FLAC__bitwriter_write_raw_uint32($0,$2,$5)|0);
 $7 = ($6|0)==(0);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 $8 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$1,32)|0);
 $9 = ($8|0)!=(0);
 $phitmp = $9&1;
 $$0 = $phitmp;
 return ($$0|0);
}
function _FLAC__bitwriter_write_raw_uint32_little_endian($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$2,8)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = $1 >>> 8;
 $6 = $5 & 255;
 $7 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$6,8)|0);
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = 0;
  return ($$0|0);
 }
 $9 = $1 >>> 16;
 $10 = $9 & 255;
 $11 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$10,8)|0);
 $12 = ($11|0)==(0);
 if ($12) {
  $$0 = 0;
  return ($$0|0);
 }
 $13 = $1 >>> 24;
 $14 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$13,8)|0);
 $15 = ($14|0)!=(0);
 $$ = $15&1;
 $$0 = $$;
 return ($$0|0);
}
function _FLAC__bitwriter_write_byte_block($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$07 = 0, $$08 = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $$07 = 1;
  return ($$07|0);
 }
 $$08 = 0;
 while(1) {
  $6 = (($1) + ($$08)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$8,8)|0);
  $10 = ($9|0)==(0);
  $4 = (($$08) + 1)|0;
  if ($10) {
   $$07 = 0;
   label = 5;
   break;
  }
  $5 = ($4>>>0)<($2>>>0);
  if ($5) {
   $$08 = $4;
  } else {
   $$07 = 1;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  return ($$07|0);
 }
 return (0)|0;
}
function _FLAC__bitwriter_write_unary_unsigned($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)<(32);
 if ($2) {
  $3 = (($1) + 1)|0;
  $4 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,1,$3)|0);
  $$0 = $4;
  return ($$0|0);
 }
 $5 = (_FLAC__bitwriter_write_zeroes($0,$1)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,1,1)|0);
 $8 = ($7|0)!=(0);
 $phitmp = $8&1;
 $$0 = $phitmp;
 return ($$0|0);
}
function _FLAC__bitwriter_write_rice_signed_block($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0102 = 0, $$0103107 = 0, $$0104106 = 0, $$1$lcssa = 0, $$1105 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = -1 << $3;
 $5 = (31 - ($3))|0;
 $6 = -1 >>> $5;
 $7 = (($3) + 1)|0;
 $8 = ($2|0)==(0);
 if ($8) {
  $$0 = 1;
  return ($$0|0);
 }
 $9 = ((($0)) + 16|0);
 $10 = ((($0)) + 8|0);
 $11 = ((($0)) + 12|0);
 $12 = ((($0)) + 4|0);
 $13 = ((($0)) + 4|0);
 $14 = ((($0)) + 4|0);
 $15 = ((($0)) + 4|0);
 $$0103107 = $1;$$0104106 = $2;
 L4: while(1) {
  $16 = HEAP32[$$0103107>>2]|0;
  $17 = $16 << 1;
  $18 = $16 >> 31;
  $19 = $17 ^ $18;
  $20 = $19 >>> $3;
  $21 = (($20) + ($7))|0;
  $22 = HEAP32[$9>>2]|0;
  $23 = ($22|0)==(0);
  if ($23) {
   label = 6;
  } else {
   $24 = (($21) + ($22))|0;
   $25 = ($24>>>0)<(32);
   if ($25) {
    HEAP32[$9>>2] = $24;
    $26 = $19 | $4;
    $27 = $26 & $6;
    $28 = HEAP32[$12>>2]|0;
    $29 = $28 << $21;
    $30 = $29 | $27;
    HEAP32[$12>>2] = $30;
   } else {
    label = 6;
   }
  }
  do {
   if ((label|0) == 6) {
    label = 0;
    $31 = HEAP32[$10>>2]|0;
    $32 = HEAP32[$11>>2]|0;
    $33 = (($22) + 1)|0;
    $34 = (($33) + ($20))|0;
    $35 = (($34) + ($32))|0;
    $36 = ($31>>>0)>($35>>>0);
    if (!($36)) {
     $37 = (_bitwriter_grow_($0,$21)|0);
     $38 = ($37|0)==(0);
     if ($38) {
      $$0 = 0;
      label = 23;
      break L4;
     }
    }
    $39 = ($20|0)==(0);
    L14: do {
     if (!($39)) {
      $40 = HEAP32[$9>>2]|0;
      $41 = ($40|0)==(0);
      do {
       if ($41) {
        $$0102 = $20;
       } else {
        $42 = (32 - ($40))|0;
        $43 = ($20>>>0)<($42>>>0);
        $44 = HEAP32[$14>>2]|0;
        if ($43) {
         $45 = $44 << $20;
         HEAP32[$14>>2] = $45;
         $46 = (($40) + ($20))|0;
         HEAP32[$9>>2] = $46;
         break L14;
        } else {
         $47 = $44 << $42;
         HEAP32[$14>>2] = $47;
         $48 = (($20) - ($42))|0;
         $49 = (_llvm_bswap_i32(($47|0))|0);
         $50 = HEAP32[$0>>2]|0;
         $51 = HEAP32[$11>>2]|0;
         $52 = (($51) + 1)|0;
         HEAP32[$11>>2] = $52;
         $53 = (($50) + ($51<<2)|0);
         HEAP32[$53>>2] = $49;
         HEAP32[$9>>2] = 0;
         $$0102 = $48;
         break;
        }
       }
      } while(0);
      $54 = ($$0102>>>0)>(31);
      if ($54) {
       $55 = HEAP32[$0>>2]|0;
       $$1105 = $$0102;
       while(1) {
        $56 = HEAP32[$11>>2]|0;
        $57 = (($56) + 1)|0;
        HEAP32[$11>>2] = $57;
        $58 = (($55) + ($56<<2)|0);
        HEAP32[$58>>2] = 0;
        $59 = (($$1105) + -32)|0;
        $60 = ($59>>>0)>(31);
        if ($60) {
         $$1105 = $59;
        } else {
         break;
        }
       }
       $61 = $$0102 & 31;
       $$1$lcssa = $61;
      } else {
       $$1$lcssa = $$0102;
      }
      $62 = ($$1$lcssa|0)==(0);
      if (!($62)) {
       HEAP32[$15>>2] = 0;
       HEAP32[$9>>2] = $$1$lcssa;
      }
     }
    } while(0);
    $63 = $19 | $4;
    $64 = $63 & $6;
    $65 = HEAP32[$9>>2]|0;
    $66 = (32 - ($65))|0;
    $67 = ($7>>>0)<($66>>>0);
    $68 = HEAP32[$13>>2]|0;
    if ($67) {
     $69 = $68 << $7;
     $70 = $69 | $64;
     HEAP32[$13>>2] = $70;
     $71 = (($65) + ($7))|0;
     HEAP32[$9>>2] = $71;
     break;
    } else {
     $72 = $68 << $66;
     $73 = (($7) - ($66))|0;
     HEAP32[$9>>2] = $73;
     $74 = $64 >>> $73;
     $75 = $74 | $72;
     $76 = $75 >>> 24;
     $77 = $75 >>> 8;
     $78 = $77 & 65280;
     $79 = $75 << 8;
     $80 = $79 & 16711680;
     $81 = $75 << 24;
     $82 = $81 | $76;
     $83 = $82 | $78;
     $84 = $83 | $80;
     $85 = HEAP32[$0>>2]|0;
     $86 = HEAP32[$11>>2]|0;
     $87 = (($86) + 1)|0;
     HEAP32[$11>>2] = $87;
     $88 = (($85) + ($86<<2)|0);
     HEAP32[$88>>2] = $84;
     HEAP32[$13>>2] = $64;
     break;
    }
   }
  } while(0);
  $89 = ((($$0103107)) + 4|0);
  $90 = (($$0104106) + -1)|0;
  $91 = ($90|0)==(0);
  if ($91) {
   $$0 = 1;
   label = 23;
   break;
  } else {
   $$0103107 = $89;$$0104106 = $90;
  }
 }
 if ((label|0) == 23) {
  return ($$0|0);
 }
 return (0)|0;
}
function _FLAC__bitwriter_write_utf8_uint32($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$068 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)<(0);
 if ($2) {
  $$068 = 0;
  return ($$068|0);
 }
 $3 = ($1>>>0)<(128);
 if ($3) {
  $4 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$1,8)|0);
  $$068 = $4;
  return ($$068|0);
 }
 $5 = ($1>>>0)<(2048);
 if ($5) {
  $6 = $1 >>> 6;
  $7 = $6 | 192;
  $8 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$7,8)|0);
  $9 = $8 & 1;
  $10 = $1 & 63;
  $11 = $10 | 128;
  $12 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$11,8)|0);
  $13 = $9 & $12;
  $$068 = $13;
  return ($$068|0);
 }
 $14 = ($1>>>0)<(65536);
 if ($14) {
  $15 = $1 >>> 12;
  $16 = $15 | 224;
  $17 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$16,8)|0);
  $18 = $17 & 1;
  $19 = $1 >>> 6;
  $20 = $19 & 63;
  $21 = $20 | 128;
  $22 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$21,8)|0);
  $23 = $18 & $22;
  $24 = $1 & 63;
  $25 = $24 | 128;
  $26 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$25,8)|0);
  $27 = $23 & $26;
  $$068 = $27;
  return ($$068|0);
 }
 $28 = ($1>>>0)<(2097152);
 if ($28) {
  $29 = $1 >>> 18;
  $30 = $29 | 240;
  $31 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$30,8)|0);
  $32 = $31 & 1;
  $33 = $1 >>> 12;
  $34 = $33 & 63;
  $35 = $34 | 128;
  $36 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$35,8)|0);
  $37 = $32 & $36;
  $38 = $1 >>> 6;
  $39 = $38 & 63;
  $40 = $39 | 128;
  $41 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$40,8)|0);
  $42 = $37 & $41;
  $43 = $1 & 63;
  $44 = $43 | 128;
  $45 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$44,8)|0);
  $46 = $42 & $45;
  $$068 = $46;
  return ($$068|0);
 }
 $47 = ($1>>>0)<(67108864);
 if ($47) {
  $48 = $1 >>> 24;
  $49 = $48 | 248;
  $50 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$49,8)|0);
  $51 = $50 & 1;
  $52 = $1 >>> 18;
  $53 = $52 & 63;
  $54 = $53 | 128;
  $55 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$54,8)|0);
  $56 = $51 & $55;
  $57 = $1 >>> 12;
  $58 = $57 & 63;
  $59 = $58 | 128;
  $60 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$59,8)|0);
  $61 = $56 & $60;
  $62 = $1 >>> 6;
  $63 = $62 & 63;
  $64 = $63 | 128;
  $65 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$64,8)|0);
  $66 = $61 & $65;
  $67 = $1 & 63;
  $68 = $67 | 128;
  $69 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$68,8)|0);
  $70 = $66 & $69;
  $$068 = $70;
  return ($$068|0);
 } else {
  $71 = $1 >>> 30;
  $72 = $71 | 252;
  $73 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$72,8)|0);
  $74 = $73 & 1;
  $75 = $1 >>> 24;
  $76 = $75 & 63;
  $77 = $76 | 128;
  $78 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$77,8)|0);
  $79 = $74 & $78;
  $80 = $1 >>> 18;
  $81 = $80 & 63;
  $82 = $81 | 128;
  $83 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$82,8)|0);
  $84 = $79 & $83;
  $85 = $1 >>> 12;
  $86 = $85 & 63;
  $87 = $86 | 128;
  $88 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$87,8)|0);
  $89 = $84 & $88;
  $90 = $1 >>> 6;
  $91 = $90 & 63;
  $92 = $91 | 128;
  $93 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$92,8)|0);
  $94 = $89 & $93;
  $95 = $1 & 63;
  $96 = $95 | 128;
  $97 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$96,8)|0);
  $98 = $94 & $97;
  $$068 = $98;
  return ($$068|0);
 }
 return (0)|0;
}
function _FLAC__bitwriter_write_utf8_uint64($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$090 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2>>>0)>(15);
 $4 = ($1>>>0)>(4294967295);
 $5 = ($2|0)==(15);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$090 = 0;
  return ($$090|0);
 }
 $8 = ($2>>>0)<(0);
 $9 = ($1>>>0)<(128);
 $10 = ($2|0)==(0);
 $11 = $10 & $9;
 $12 = $8 | $11;
 if ($12) {
  $13 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$1,8)|0);
  $$090 = $13;
  return ($$090|0);
 }
 $14 = ($2>>>0)<(0);
 $15 = ($1>>>0)<(2048);
 $16 = ($2|0)==(0);
 $17 = $16 & $15;
 $18 = $14 | $17;
 if ($18) {
  $19 = (_bitshift64Lshr(($1|0),($2|0),6)|0);
  $20 = (getTempRet0() | 0);
  $21 = $19 | 192;
  $22 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$21,8)|0);
  $23 = $22 & 1;
  $24 = $1 & 63;
  $25 = $24 | 128;
  $26 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$25,8)|0);
  $27 = $23 & $26;
  $$090 = $27;
  return ($$090|0);
 }
 $28 = ($2>>>0)<(0);
 $29 = ($1>>>0)<(65536);
 $30 = ($2|0)==(0);
 $31 = $30 & $29;
 $32 = $28 | $31;
 if ($32) {
  $33 = (_bitshift64Lshr(($1|0),($2|0),12)|0);
  $34 = (getTempRet0() | 0);
  $35 = $33 | 224;
  $36 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$35,8)|0);
  $37 = $36 & 1;
  $38 = (_bitshift64Lshr(($1|0),($2|0),6)|0);
  $39 = (getTempRet0() | 0);
  $40 = $38 & 63;
  $41 = $40 | 128;
  $42 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$41,8)|0);
  $43 = $37 & $42;
  $44 = $1 & 63;
  $45 = $44 | 128;
  $46 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$45,8)|0);
  $47 = $43 & $46;
  $$090 = $47;
  return ($$090|0);
 }
 $48 = ($2>>>0)<(0);
 $49 = ($1>>>0)<(2097152);
 $50 = ($2|0)==(0);
 $51 = $50 & $49;
 $52 = $48 | $51;
 if ($52) {
  $53 = (_bitshift64Lshr(($1|0),($2|0),18)|0);
  $54 = (getTempRet0() | 0);
  $55 = $53 | 240;
  $56 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$55,8)|0);
  $57 = $56 & 1;
  $58 = (_bitshift64Lshr(($1|0),($2|0),12)|0);
  $59 = (getTempRet0() | 0);
  $60 = $58 & 63;
  $61 = $60 | 128;
  $62 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$61,8)|0);
  $63 = $57 & $62;
  $64 = (_bitshift64Lshr(($1|0),($2|0),6)|0);
  $65 = (getTempRet0() | 0);
  $66 = $64 & 63;
  $67 = $66 | 128;
  $68 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$67,8)|0);
  $69 = $63 & $68;
  $70 = $1 & 63;
  $71 = $70 | 128;
  $72 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$71,8)|0);
  $73 = $69 & $72;
  $$090 = $73;
  return ($$090|0);
 }
 $74 = ($2>>>0)<(0);
 $75 = ($1>>>0)<(67108864);
 $76 = ($2|0)==(0);
 $77 = $76 & $75;
 $78 = $74 | $77;
 if ($78) {
  $79 = (_bitshift64Lshr(($1|0),($2|0),24)|0);
  $80 = (getTempRet0() | 0);
  $81 = $79 | 248;
  $82 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$81,8)|0);
  $83 = $82 & 1;
  $84 = (_bitshift64Lshr(($1|0),($2|0),18)|0);
  $85 = (getTempRet0() | 0);
  $86 = $84 & 63;
  $87 = $86 | 128;
  $88 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$87,8)|0);
  $89 = $83 & $88;
  $90 = (_bitshift64Lshr(($1|0),($2|0),12)|0);
  $91 = (getTempRet0() | 0);
  $92 = $90 & 63;
  $93 = $92 | 128;
  $94 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$93,8)|0);
  $95 = $89 & $94;
  $96 = (_bitshift64Lshr(($1|0),($2|0),6)|0);
  $97 = (getTempRet0() | 0);
  $98 = $96 & 63;
  $99 = $98 | 128;
  $100 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$99,8)|0);
  $101 = $95 & $100;
  $102 = $1 & 63;
  $103 = $102 | 128;
  $104 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$103,8)|0);
  $105 = $101 & $104;
  $$090 = $105;
  return ($$090|0);
 }
 $106 = ($2>>>0)<(0);
 $107 = ($1>>>0)<(2147483648);
 $108 = ($2|0)==(0);
 $109 = $108 & $107;
 $110 = $106 | $109;
 if ($110) {
  $111 = (_bitshift64Lshr(($1|0),($2|0),30)|0);
  $112 = (getTempRet0() | 0);
  $113 = $111 | 252;
  $114 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$113,8)|0);
  $115 = $114 & 1;
  $116 = (_bitshift64Lshr(($1|0),($2|0),24)|0);
  $117 = (getTempRet0() | 0);
  $118 = $116 & 63;
  $119 = $118 | 128;
  $120 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$119,8)|0);
  $121 = $115 & $120;
  $122 = (_bitshift64Lshr(($1|0),($2|0),18)|0);
  $123 = (getTempRet0() | 0);
  $124 = $122 & 63;
  $125 = $124 | 128;
  $126 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$125,8)|0);
  $127 = $121 & $126;
  $128 = (_bitshift64Lshr(($1|0),($2|0),12)|0);
  $129 = (getTempRet0() | 0);
  $130 = $128 & 63;
  $131 = $130 | 128;
  $132 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$131,8)|0);
  $133 = $127 & $132;
  $134 = (_bitshift64Lshr(($1|0),($2|0),6)|0);
  $135 = (getTempRet0() | 0);
  $136 = $134 & 63;
  $137 = $136 | 128;
  $138 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$137,8)|0);
  $139 = $133 & $138;
  $140 = $1 & 63;
  $141 = $140 | 128;
  $142 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$141,8)|0);
  $143 = $139 & $142;
  $$090 = $143;
  return ($$090|0);
 } else {
  $144 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,254,8)|0);
  $145 = $144 & 1;
  $146 = (_bitshift64Lshr(($1|0),($2|0),30)|0);
  $147 = (getTempRet0() | 0);
  $148 = $146 & 63;
  $149 = $148 | 128;
  $150 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$149,8)|0);
  $151 = $145 & $150;
  $152 = (_bitshift64Lshr(($1|0),($2|0),24)|0);
  $153 = (getTempRet0() | 0);
  $154 = $152 & 63;
  $155 = $154 | 128;
  $156 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$155,8)|0);
  $157 = $151 & $156;
  $158 = (_bitshift64Lshr(($1|0),($2|0),18)|0);
  $159 = (getTempRet0() | 0);
  $160 = $158 & 63;
  $161 = $160 | 128;
  $162 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$161,8)|0);
  $163 = $157 & $162;
  $164 = (_bitshift64Lshr(($1|0),($2|0),12)|0);
  $165 = (getTempRet0() | 0);
  $166 = $164 & 63;
  $167 = $166 | 128;
  $168 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$167,8)|0);
  $169 = $163 & $168;
  $170 = (_bitshift64Lshr(($1|0),($2|0),6)|0);
  $171 = (getTempRet0() | 0);
  $172 = $170 & 63;
  $173 = $172 | 128;
  $174 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$173,8)|0);
  $175 = $169 & $174;
  $176 = $1 & 63;
  $177 = $176 | 128;
  $178 = (_FLAC__bitwriter_write_raw_uint32_nocheck($0,$177,8)|0);
  $179 = $175 & $178;
  $$090 = $179;
  return ($$090|0);
 }
 return (0)|0;
}
function _FLAC__bitwriter_zero_pad_to_byte_boundary($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 7;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = 1;
  return ($$0|0);
 }
 $5 = (8 - ($3))|0;
 $6 = (_FLAC__bitwriter_write_zeroes($0,$5)|0);
 $$0 = $6;
 return ($$0|0);
}
function _FLAC__cpu_info($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 dest=$1; stop=dest+80|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 2;
 HEAP32[$0>>2] = 0;
 return;
}
function _FLAC__crc8($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$025 = 0, $$034 = 0, $$06 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 if ($2) {
  $$0$lcssa = 0;
  return ($$0$lcssa|0);
 }
 $$025 = $1;$$034 = $0;$$06 = 0;
 while(1) {
  $3 = (($$025) + -1)|0;
  $4 = ((($$034)) + 1|0);
  $5 = HEAP8[$$034>>0]|0;
  $6 = $5 ^ $$06;
  $7 = $6&255;
  $8 = (2072 + ($7)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($3|0)==(0);
  if ($10) {
   $$0$lcssa = $9;
   break;
  } else {
   $$025 = $3;$$034 = $4;$$06 = $9;
  }
 }
 return ($$0$lcssa|0);
}
function _FLAC__crc16($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$047 = 0, $$056 = 0, $$08 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 if ($2) {
  $$0$lcssa = 0;
  return ($$0$lcssa|0);
 }
 $$047 = $1;$$056 = $0;$$08 = 0;
 while(1) {
  $3 = (($$047) + -1)|0;
  $4 = $$08 << 8;
  $5 = $$08 >>> 8;
  $6 = ((($$056)) + 1|0);
  $7 = HEAP8[$$056>>0]|0;
  $8 = $7&255;
  $9 = $5 ^ $8;
  $10 = (48 + ($9<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11 ^ $4;
  $13 = $12 & 65535;
  $14 = ($3|0)==(0);
  if ($14) {
   $$0$lcssa = $13;
   break;
  } else {
   $$047 = $3;$$056 = $6;$$08 = $13;
  }
 }
 return ($$0$lcssa|0);
}
function _FLAC__fixed_compute_best_predictor($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$$0133 = 0, $$$0134 = 0, $$0 = 0, $$0132161 = 0, $$0133$lcssa = 0, $$0133160 = 0, $$0134$lcssa = 0, $$0134159 = 0, $$0135$lcssa = 0, $$0135158 = 0, $$0136$lcssa = 0, $$0136157 = 0, $$0137$lcssa = 0, $$0137156 = 0, $$0138155 = 0, $$0139154 = 0, $$0140153 = 0, $$0141152 = 0, $$neg150 = 0;
 var $$neg151 = 0, $10 = 0, $100 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0;
 var $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0;
 var $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, $exitcond = 0;
 var $phitmp = 0.0, $phitmp142 = 0.0, $phitmp143 = 0.0, $phitmp144 = 0.0, $phitmp145 = 0.0, $spec$select = 0, $spec$select147 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + -4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + -8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ((($0)) + -12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) - ($6))|0;
 $11 = (($10) + ($7))|0;
 $12 = ($1|0)==(0);
 if ($12) {
  $$0133$lcssa = 0;$$0134$lcssa = 0;$$0135$lcssa = 0;$$0136$lcssa = 0;$$0137$lcssa = 0;
 } else {
  $13 = $9 << 1;
  $$neg150 = (($13) - ($6))|0;
  $14 = ((($0)) + -16|0);
  $15 = HEAP32[$14>>2]|0;
  $$neg151 = (($$neg150) - ($15))|0;
  $16 = (($$neg151) + ($11))|0;
  $$0132161 = 0;$$0133160 = 0;$$0134159 = 0;$$0135158 = 0;$$0136157 = 0;$$0137156 = 0;$$0138155 = $4;$$0139154 = $7;$$0140153 = $16;$$0141152 = $11;
  while(1) {
   $17 = (($0) + ($$0132161<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)<(0);
   $20 = (0 - ($18))|0;
   $21 = $19 ? $20 : $18;
   $22 = (($21) + ($$0137156))|0;
   $23 = (($18) - ($$0138155))|0;
   $24 = ($23|0)<(0);
   $25 = (0 - ($23))|0;
   $26 = $24 ? $25 : $23;
   $27 = (($26) + ($$0136157))|0;
   $28 = (($23) - ($$0139154))|0;
   $29 = ($28|0)<(0);
   $30 = (0 - ($28))|0;
   $31 = $29 ? $30 : $28;
   $32 = (($31) + ($$0135158))|0;
   $33 = (($28) - ($$0141152))|0;
   $34 = ($33|0)<(0);
   $35 = (0 - ($33))|0;
   $36 = $34 ? $35 : $33;
   $37 = (($36) + ($$0134159))|0;
   $38 = (($33) - ($$0140153))|0;
   $39 = ($38|0)<(0);
   $40 = (0 - ($38))|0;
   $41 = $39 ? $40 : $38;
   $42 = (($41) + ($$0133160))|0;
   $43 = (($$0132161) + 1)|0;
   $exitcond = ($43|0)==($1|0);
   if ($exitcond) {
    $$0133$lcssa = $42;$$0134$lcssa = $37;$$0135$lcssa = $32;$$0136$lcssa = $27;$$0137$lcssa = $22;
    break;
   } else {
    $$0132161 = $43;$$0133160 = $42;$$0134159 = $37;$$0135158 = $32;$$0136157 = $27;$$0137156 = $22;$$0138155 = $18;$$0139154 = $23;$$0140153 = $33;$$0141152 = $28;
   }
  }
 }
 $44 = ($$0136$lcssa>>>0)<($$0135$lcssa>>>0);
 $45 = $44 ? $$0136$lcssa : $$0135$lcssa;
 $46 = ($45>>>0)<($$0134$lcssa>>>0);
 $$$0134 = $46 ? $45 : $$0134$lcssa;
 $47 = ($$$0134>>>0)<($$0133$lcssa>>>0);
 $48 = $47 ? $$$0134 : $$0133$lcssa;
 $49 = ($$0137$lcssa>>>0)<($48>>>0);
 if ($49) {
  $$0 = 0;
 } else {
  $50 = ($$0135$lcssa>>>0)<($$0134$lcssa>>>0);
  $51 = $50 ? $$0135$lcssa : $$0134$lcssa;
  $52 = ($51>>>0)<($$0133$lcssa>>>0);
  $$$0133 = $52 ? $51 : $$0133$lcssa;
  $53 = ($$0136$lcssa>>>0)<($$$0133>>>0);
  $54 = ($$0134$lcssa>>>0)<($$0133$lcssa>>>0);
  $55 = $54 ? $$0134$lcssa : $$0133$lcssa;
  $56 = ($$0135$lcssa>>>0)<($55>>>0);
  $$ = $54 ? 3 : 4;
  $spec$select = $56 ? 2 : $$;
  $spec$select147 = $53 ? 1 : $spec$select;
  $$0 = $spec$select147;
 }
 $57 = ($$0137$lcssa|0)==(0);
 if ($57) {
  $64 = 0.0;
 } else {
  $58 = (+($$0137$lcssa>>>0));
  $59 = $58 * 0.69314718055994529;
  $60 = (+($1>>>0));
  $61 = $59 / $60;
  $62 = (+Math_log((+$61)));
  $63 = $62 / 0.69314718055994529;
  $phitmp = $63;
  $64 = $phitmp;
 }
 HEAPF32[$2>>2] = $64;
 $65 = ($$0136$lcssa|0)==(0);
 if ($65) {
  $73 = 0.0;
 } else {
  $66 = (+($$0136$lcssa>>>0));
  $67 = $66 * 0.69314718055994529;
  $68 = (+($1>>>0));
  $69 = $67 / $68;
  $70 = (+Math_log((+$69)));
  $71 = $70 / 0.69314718055994529;
  $phitmp142 = $71;
  $73 = $phitmp142;
 }
 $72 = ((($2)) + 4|0);
 HEAPF32[$72>>2] = $73;
 $74 = ($$0135$lcssa|0)==(0);
 if ($74) {
  $82 = 0.0;
 } else {
  $75 = (+($$0135$lcssa>>>0));
  $76 = $75 * 0.69314718055994529;
  $77 = (+($1>>>0));
  $78 = $76 / $77;
  $79 = (+Math_log((+$78)));
  $80 = $79 / 0.69314718055994529;
  $phitmp143 = $80;
  $82 = $phitmp143;
 }
 $81 = ((($2)) + 8|0);
 HEAPF32[$81>>2] = $82;
 $83 = ($$0134$lcssa|0)==(0);
 if ($83) {
  $91 = 0.0;
 } else {
  $84 = (+($$0134$lcssa>>>0));
  $85 = $84 * 0.69314718055994529;
  $86 = (+($1>>>0));
  $87 = $85 / $86;
  $88 = (+Math_log((+$87)));
  $89 = $88 / 0.69314718055994529;
  $phitmp144 = $89;
  $91 = $phitmp144;
 }
 $90 = ((($2)) + 12|0);
 HEAPF32[$90>>2] = $91;
 $92 = ($$0133$lcssa|0)==(0);
 if ($92) {
  $100 = 0.0;
  $99 = ((($2)) + 16|0);
  HEAPF32[$99>>2] = $100;
  return ($$0|0);
 }
 $93 = (+($$0133$lcssa>>>0));
 $94 = $93 * 0.69314718055994529;
 $95 = (+($1>>>0));
 $96 = $94 / $95;
 $97 = (+Math_log((+$96)));
 $98 = $97 / 0.69314718055994529;
 $phitmp145 = $98;
 $100 = $phitmp145;
 $99 = ((($2)) + 16|0);
 HEAPF32[$99>>2] = $100;
 return ($$0|0);
}
function _FLAC__fixed_compute_best_predictor_wide($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$0132161 = 0, $$0138155 = 0, $$0139154 = 0, $$0140153 = 0, $$0141152 = 0, $$neg150 = 0, $$neg151 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0;
 var $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0.0;
 var $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0.0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $phitmp = 0.0, $phitmp142 = 0.0, $phitmp143 = 0.0, $phitmp144 = 0.0, $phitmp145 = 0.0, $spec$select = 0, $spec$select147 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + -4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + -8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ((($0)) + -12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) - ($6))|0;
 $11 = (($10) + ($7))|0;
 $12 = ($1|0)==(0);
 if ($12) {
  $59 = 0;$61 = 0;$62 = 0;$64 = 0;$71 = 0;$73 = 0;$80 = 0;$82 = 0;$88 = 0;$90 = 0;
 } else {
  $13 = $9 << 1;
  $$neg150 = (($13) - ($6))|0;
  $14 = ((($0)) + -16|0);
  $15 = HEAP32[$14>>2]|0;
  $$neg151 = (($$neg150) - ($15))|0;
  $16 = (($$neg151) + ($11))|0;
  $$0132161 = 0;$$0138155 = $4;$$0139154 = $7;$$0140153 = $16;$$0141152 = $11;$22 = 0;$23 = 0;$30 = 0;$31 = 0;$38 = 0;$39 = 0;$46 = 0;$47 = 0;$54 = 0;$55 = 0;
  while(1) {
   $17 = (($0) + ($$0132161<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)<(0);
   $20 = (0 - ($18))|0;
   $21 = $19 ? $20 : $18;
   $24 = (_i64Add(($22|0),($23|0),($21|0),0)|0);
   $25 = (getTempRet0() | 0);
   $26 = (($18) - ($$0138155))|0;
   $27 = ($26|0)<(0);
   $28 = (0 - ($26))|0;
   $29 = $27 ? $28 : $26;
   $32 = (_i64Add(($30|0),($31|0),($29|0),0)|0);
   $33 = (getTempRet0() | 0);
   $34 = (($26) - ($$0139154))|0;
   $35 = ($34|0)<(0);
   $36 = (0 - ($34))|0;
   $37 = $35 ? $36 : $34;
   $40 = (_i64Add(($38|0),($39|0),($37|0),0)|0);
   $41 = (getTempRet0() | 0);
   $42 = (($34) - ($$0141152))|0;
   $43 = ($42|0)<(0);
   $44 = (0 - ($42))|0;
   $45 = $43 ? $44 : $42;
   $48 = (_i64Add(($46|0),($47|0),($45|0),0)|0);
   $49 = (getTempRet0() | 0);
   $50 = (($42) - ($$0140153))|0;
   $51 = ($50|0)<(0);
   $52 = (0 - ($50))|0;
   $53 = $51 ? $52 : $50;
   $56 = (_i64Add(($54|0),($55|0),($53|0),0)|0);
   $57 = (getTempRet0() | 0);
   $58 = (($$0132161) + 1)|0;
   $exitcond = ($58|0)==($1|0);
   if ($exitcond) {
    $59 = $33;$61 = $41;$62 = $32;$64 = $40;$71 = $49;$73 = $48;$80 = $57;$82 = $56;$88 = $25;$90 = $24;
    break;
   } else {
    $$0132161 = $58;$$0138155 = $18;$$0139154 = $26;$$0140153 = $42;$$0141152 = $34;$22 = $24;$23 = $25;$30 = $32;$31 = $33;$38 = $40;$39 = $41;$46 = $48;$47 = $49;$54 = $56;$55 = $57;
   }
  }
 }
 $60 = ($59>>>0)<($61>>>0);
 $63 = ($62>>>0)<($64>>>0);
 $65 = ($59|0)==($61|0);
 $66 = $65 & $63;
 $67 = $60 | $66;
 $68 = $67 ? $62 : $64;
 $69 = $67 ? $59 : $61;
 $70 = ($69>>>0)<($71>>>0);
 $72 = ($68>>>0)<($73>>>0);
 $74 = ($69|0)==($71|0);
 $75 = $74 & $72;
 $76 = $70 | $75;
 $77 = $76 ? $68 : $73;
 $78 = $76 ? $69 : $71;
 $79 = ($78>>>0)<($80>>>0);
 $81 = ($77>>>0)<($82>>>0);
 $83 = ($78|0)==($80|0);
 $84 = $83 & $81;
 $85 = $79 | $84;
 $86 = $85 ? $77 : $82;
 $87 = $85 ? $78 : $80;
 $89 = ($88>>>0)<($87>>>0);
 $91 = ($90>>>0)<($86>>>0);
 $92 = ($88|0)==($87|0);
 $93 = $92 & $91;
 $94 = $89 | $93;
 if ($94) {
  $$0 = 0;
 } else {
  $95 = ($61>>>0)<($71>>>0);
  $96 = ($64>>>0)<($73>>>0);
  $97 = ($61|0)==($71|0);
  $98 = $97 & $96;
  $99 = $95 | $98;
  $100 = $99 ? $64 : $73;
  $101 = $99 ? $61 : $71;
  $102 = ($101>>>0)<($80>>>0);
  $103 = ($100>>>0)<($82>>>0);
  $104 = ($101|0)==($80|0);
  $105 = $104 & $103;
  $106 = $102 | $105;
  $107 = $106 ? $100 : $82;
  $108 = $106 ? $101 : $80;
  $109 = ($59>>>0)<($108>>>0);
  $110 = ($62>>>0)<($107>>>0);
  $111 = ($59|0)==($108|0);
  $112 = $111 & $110;
  $113 = $109 | $112;
  $114 = ($71>>>0)<($80>>>0);
  $115 = ($73>>>0)<($82>>>0);
  $116 = ($71|0)==($80|0);
  $117 = $116 & $115;
  $118 = $114 | $117;
  $119 = $118 ? $73 : $82;
  $120 = $118 ? $71 : $80;
  $121 = ($61>>>0)<($120>>>0);
  $122 = ($64>>>0)<($119>>>0);
  $123 = ($61|0)==($120|0);
  $124 = $123 & $122;
  $125 = $121 | $124;
  $$ = $118 ? 3 : 4;
  $spec$select = $125 ? 2 : $$;
  $spec$select147 = $113 ? 1 : $spec$select;
  $$0 = $spec$select147;
 }
 $126 = ($90|0)==(0);
 $127 = ($88|0)==(0);
 $128 = $126 & $127;
 if ($128) {
  $135 = 0.0;
 } else {
  $129 = (+($90>>>0)) + (4294967296.0*(+($88>>>0)));
  $130 = $129 * 0.69314718055994529;
  $131 = (+($1>>>0));
  $132 = $130 / $131;
  $133 = (+Math_log((+$132)));
  $134 = $133 / 0.69314718055994529;
  $phitmp = $134;
  $135 = $phitmp;
 }
 HEAPF32[$2>>2] = $135;
 $136 = ($62|0)==(0);
 $137 = ($59|0)==(0);
 $138 = $136 & $137;
 if ($138) {
  $146 = 0.0;
 } else {
  $139 = (+($62>>>0)) + (4294967296.0*(+($59>>>0)));
  $140 = $139 * 0.69314718055994529;
  $141 = (+($1>>>0));
  $142 = $140 / $141;
  $143 = (+Math_log((+$142)));
  $144 = $143 / 0.69314718055994529;
  $phitmp142 = $144;
  $146 = $phitmp142;
 }
 $145 = ((($2)) + 4|0);
 HEAPF32[$145>>2] = $146;
 $147 = ($64|0)==(0);
 $148 = ($61|0)==(0);
 $149 = $147 & $148;
 if ($149) {
  $157 = 0.0;
 } else {
  $150 = (+($64>>>0)) + (4294967296.0*(+($61>>>0)));
  $151 = $150 * 0.69314718055994529;
  $152 = (+($1>>>0));
  $153 = $151 / $152;
  $154 = (+Math_log((+$153)));
  $155 = $154 / 0.69314718055994529;
  $phitmp143 = $155;
  $157 = $phitmp143;
 }
 $156 = ((($2)) + 8|0);
 HEAPF32[$156>>2] = $157;
 $158 = ($73|0)==(0);
 $159 = ($71|0)==(0);
 $160 = $158 & $159;
 if ($160) {
  $168 = 0.0;
 } else {
  $161 = (+($73>>>0)) + (4294967296.0*(+($71>>>0)));
  $162 = $161 * 0.69314718055994529;
  $163 = (+($1>>>0));
  $164 = $162 / $163;
  $165 = (+Math_log((+$164)));
  $166 = $165 / 0.69314718055994529;
  $phitmp144 = $166;
  $168 = $phitmp144;
 }
 $167 = ((($2)) + 12|0);
 HEAPF32[$167>>2] = $168;
 $169 = ($82|0)==(0);
 $170 = ($80|0)==(0);
 $171 = $169 & $170;
 if ($171) {
  $179 = 0.0;
  $178 = ((($2)) + 16|0);
  HEAPF32[$178>>2] = $179;
  return ($$0|0);
 }
 $172 = (+($82>>>0)) + (4294967296.0*(+($80>>>0)));
 $173 = $172 * 0.69314718055994529;
 $174 = (+($1>>>0));
 $175 = $173 / $174;
 $176 = (+Math_log((+$175)));
 $177 = $176 / 0.69314718055994529;
 $phitmp145 = $177;
 $179 = $phitmp145;
 $178 = ((($2)) + 16|0);
 HEAPF32[$178>>2] = $179;
 return ($$0|0);
}
function _FLAC__fixed_compute_residual($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$061 = 0, $$162 = 0, $$264 = 0, $$366 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond71 = 0, $exitcond72 = 0, $exitcond73 = 0, $reass$add = 0, $reass$mul = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($2|0) {
 case 0:  {
  $4 = $1 << 2;
  _memcpy(($3|0),($0|0),($4|0))|0;
  return;
  break;
 }
 case 1:  {
  $5 = ($1|0)>(0);
  if (!($5)) {
   return;
  }
  $$061 = 0;
  while(1) {
   $6 = (($0) + ($$061<<2)|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (($$061) + -1)|0;
   $9 = (($0) + ($8<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($7) - ($10))|0;
   $12 = (($3) + ($$061<<2)|0);
   HEAP32[$12>>2] = $11;
   $13 = (($$061) + 1)|0;
   $exitcond = ($13|0)==($1|0);
   if ($exitcond) {
    break;
   } else {
    $$061 = $13;
   }
  }
  return;
  break;
 }
 case 2:  {
  $14 = ($1|0)>(0);
  if (!($14)) {
   return;
  }
  $$162 = 0;
  while(1) {
   $15 = (($0) + ($$162<<2)|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($$162) + -1)|0;
   $18 = (($0) + ($17<<2)|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $19 << 1;
   $21 = (($16) - ($20))|0;
   $22 = (($$162) + -2)|0;
   $23 = (($0) + ($22<<2)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($21) + ($24))|0;
   $26 = (($3) + ($$162<<2)|0);
   HEAP32[$26>>2] = $25;
   $27 = (($$162) + 1)|0;
   $exitcond71 = ($27|0)==($1|0);
   if ($exitcond71) {
    break;
   } else {
    $$162 = $27;
   }
  }
  return;
  break;
 }
 case 3:  {
  $28 = ($1|0)>(0);
  if (!($28)) {
   return;
  }
  $$264 = 0;
  while(1) {
   $29 = (($0) + ($$264<<2)|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($$264) + -1)|0;
   $32 = (($0) + ($31<<2)|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($$264) + -2)|0;
   $35 = (($0) + ($34<<2)|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (($$264) + -3)|0;
   $38 = (($0) + ($37<<2)|0);
   $39 = HEAP32[$38>>2]|0;
   $reass$add = (($36) - ($33))|0;
   $reass$mul = ($reass$add*3)|0;
   $40 = (($30) - ($39))|0;
   $41 = (($40) + ($reass$mul))|0;
   $42 = (($3) + ($$264<<2)|0);
   HEAP32[$42>>2] = $41;
   $43 = (($$264) + 1)|0;
   $exitcond72 = ($43|0)==($1|0);
   if ($exitcond72) {
    break;
   } else {
    $$264 = $43;
   }
  }
  return;
  break;
 }
 case 4:  {
  $44 = ($1|0)>(0);
  if (!($44)) {
   return;
  }
  $$366 = 0;
  while(1) {
   $45 = (($0) + ($$366<<2)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (($$366) + -1)|0;
   $48 = (($0) + ($47<<2)|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = $49 << 2;
   $51 = (($46) - ($50))|0;
   $52 = (($$366) + -2)|0;
   $53 = (($0) + ($52<<2)|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ($54*6)|0;
   $56 = (($51) + ($55))|0;
   $57 = (($$366) + -3)|0;
   $58 = (($0) + ($57<<2)|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 << 2;
   $61 = (($56) - ($60))|0;
   $62 = (($$366) + -4)|0;
   $63 = (($0) + ($62<<2)|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = (($61) + ($64))|0;
   $66 = (($3) + ($$366<<2)|0);
   HEAP32[$66>>2] = $65;
   $67 = (($$366) + 1)|0;
   $exitcond73 = ($67|0)==($1|0);
   if ($exitcond73) {
    break;
   } else {
    $$366 = $67;
   }
  }
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _FLAC__fixed_restore_signal($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$061 = 0, $$162 = 0, $$264 = 0, $$366 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond71 = 0, $exitcond72 = 0, $exitcond73 = 0, $load_initial = 0, $load_initial81 = 0, $load_initial84 = 0;
 var $load_initial87 = 0, $reass$add = 0, $reass$add55 = 0, $reass$mul = 0, $reass$mul56 = 0, $scevgep = 0, $scevgep80 = 0, $scevgep83 = 0, $scevgep86 = 0, $store_forwarded = 0, $store_forwarded82 = 0, $store_forwarded85 = 0, $store_forwarded88 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($2|0) {
 case 0:  {
  $4 = $1 << 2;
  _memcpy(($3|0),($0|0),($4|0))|0;
  return;
  break;
 }
 case 1:  {
  $5 = ($1|0)>(0);
  if (!($5)) {
   return;
  }
  $scevgep = ((($3)) + -4|0);
  $load_initial = HEAP32[$scevgep>>2]|0;
  $$061 = 0;$store_forwarded = $load_initial;
  while(1) {
   $6 = (($0) + ($$061<<2)|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (($store_forwarded) + ($7))|0;
   $9 = (($3) + ($$061<<2)|0);
   HEAP32[$9>>2] = $8;
   $10 = (($$061) + 1)|0;
   $exitcond = ($10|0)==($1|0);
   if ($exitcond) {
    break;
   } else {
    $$061 = $10;$store_forwarded = $8;
   }
  }
  return;
  break;
 }
 case 2:  {
  $11 = ($1|0)>(0);
  if (!($11)) {
   return;
  }
  $scevgep80 = ((($3)) + -4|0);
  $load_initial81 = HEAP32[$scevgep80>>2]|0;
  $$162 = 0;$store_forwarded82 = $load_initial81;
  while(1) {
   $12 = (($0) + ($$162<<2)|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $store_forwarded82 << 1;
   $15 = (($14) + ($13))|0;
   $16 = (($$162) + -2)|0;
   $17 = (($3) + ($16<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (($15) - ($18))|0;
   $20 = (($3) + ($$162<<2)|0);
   HEAP32[$20>>2] = $19;
   $21 = (($$162) + 1)|0;
   $exitcond71 = ($21|0)==($1|0);
   if ($exitcond71) {
    break;
   } else {
    $$162 = $21;$store_forwarded82 = $19;
   }
  }
  return;
  break;
 }
 case 3:  {
  $22 = ($1|0)>(0);
  if (!($22)) {
   return;
  }
  $scevgep83 = ((($3)) + -4|0);
  $load_initial84 = HEAP32[$scevgep83>>2]|0;
  $$264 = 0;$store_forwarded85 = $load_initial84;
  while(1) {
   $23 = (($0) + ($$264<<2)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($$264) + -2)|0;
   $26 = (($3) + ($25<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($$264) + -3)|0;
   $29 = (($3) + ($28<<2)|0);
   $30 = HEAP32[$29>>2]|0;
   $reass$add55 = (($store_forwarded85) - ($27))|0;
   $reass$mul56 = ($reass$add55*3)|0;
   $31 = (($30) + ($24))|0;
   $32 = (($31) + ($reass$mul56))|0;
   $33 = (($3) + ($$264<<2)|0);
   HEAP32[$33>>2] = $32;
   $34 = (($$264) + 1)|0;
   $exitcond72 = ($34|0)==($1|0);
   if ($exitcond72) {
    break;
   } else {
    $$264 = $34;$store_forwarded85 = $32;
   }
  }
  return;
  break;
 }
 case 4:  {
  $35 = ($1|0)>(0);
  if (!($35)) {
   return;
  }
  $scevgep86 = ((($3)) + -4|0);
  $load_initial87 = HEAP32[$scevgep86>>2]|0;
  $$366 = 0;$store_forwarded88 = $load_initial87;
  while(1) {
   $36 = (($0) + ($$366<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($$366) + -2)|0;
   $39 = (($3) + ($38<<2)|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = Math_imul($40, -6)|0;
   $42 = (($$366) + -3)|0;
   $43 = (($3) + ($42<<2)|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (($$366) + -4)|0;
   $46 = (($3) + ($45<<2)|0);
   $47 = HEAP32[$46>>2]|0;
   $reass$add = (($44) + ($store_forwarded88))|0;
   $reass$mul = $reass$add << 2;
   $48 = (($41) + ($37))|0;
   $49 = (($48) - ($47))|0;
   $50 = (($49) + ($reass$mul))|0;
   $51 = (($3) + ($$366<<2)|0);
   HEAP32[$51>>2] = $50;
   $52 = (($$366) + 1)|0;
   $exitcond73 = ($52|0)==($1|0);
   if ($exitcond73) {
    break;
   } else {
    $$366 = $52;$store_forwarded88 = $50;
   }
  }
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _FLAC__format_sample_rate_is_valid($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -1)|0;
 $2 = ($1>>>0)<(655350);
 $$ = $2&1;
 return ($$|0);
}
function _FLAC__format_blocksize_is_subset($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $narrow = 0, $not$or$cond = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0>>>0)<(16385);
 $3 = ($1>>>0)>(48000);
 $4 = ($0>>>0)<(4609);
 $not$or$cond = $4 | $3;
 $narrow = $2 & $not$or$cond;
 $spec$select = $narrow&1;
 return ($spec$select|0);
}
function _FLAC__format_sample_rate_is_subset($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, $or$cond7 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_FLAC__format_sample_rate_is_valid($0)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  return 0;
 } else {
  $3 = ($0>>>0)<(65536);
  $4 = (($0>>>0) % 1000)&-1;
  $5 = ($4|0)==(0);
  $or$cond = $3 | $5;
  $6 = (($0>>>0) % 10)&-1;
  $7 = ($6|0)==(0);
  $or$cond7 = $7 | $or$cond;
  $spec$select = $or$cond7&1;
  return ($spec$select|0);
 }
 return (0)|0;
}
function _FLAC__format_seektable_is_legal($0) {
 $0 = $0|0;
 var $$01719 = 0, $$018 = 0, $$021 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $$018 = 1;
  return ($$018|0);
 }
 $3 = ((($0)) + 4|0);
 $4 = ((($0)) + 4|0);
 $$01719 = 0;$$021 = 1;$17 = 0;$19 = 0;
 while(1) {
  if (!($$021)) {
   $5 = HEAP32[$4>>2]|0;
   $6 = (($5) + (($$01719*24)|0)|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = ($9|0)==(-1);
   $14 = ($12|0)==(-1);
   $15 = $13 & $14;
   $16 = ($12>>>0)>($17>>>0);
   $18 = ($9>>>0)>($19>>>0);
   $20 = ($12|0)==($17|0);
   $21 = $20 & $18;
   $22 = $16 | $21;
   $or$cond = $15 | $22;
   if (!($or$cond)) {
    $$018 = 0;
    label = 6;
    break;
   }
  }
  $23 = HEAP32[$3>>2]|0;
  $24 = (($23) + (($$01719*24)|0)|0);
  $25 = $24;
  $26 = $25;
  $27 = HEAP32[$26>>2]|0;
  $28 = (($25) + 4)|0;
  $29 = $28;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($$01719) + 1)|0;
  $32 = HEAP32[$0>>2]|0;
  $33 = ($31>>>0)<($32>>>0);
  if ($33) {
   $$01719 = $31;$$021 = 0;$17 = $30;$19 = $27;
  } else {
   $$018 = 1;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  return ($$018|0);
 }
 return (0)|0;
}
function _FLAC__format_seektable_sort($0) {
 $0 = $0|0;
 var $$034$lcssa = 0, $$03441 = 0, $$03640 = 0, $$038 = 0, $$135 = 0, $$13739 = 0, $$lcssa = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $$038 = 0;
  return ($$038|0);
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 _qsort($4,$1,24,6);
 $5 = HEAP32[$0>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $$034$lcssa = 0;$$lcssa = 0;
 } else {
  $7 = HEAP32[$0>>2]|0;
  $8 = ($7>>>0)>(1);
  if ($8) {
   $$03441 = 1;$$03640 = 1;
   while(1) {
    $9 = HEAP32[$3>>2]|0;
    $10 = (($9) + (($$03640*24)|0)|0);
    $11 = $10;
    $12 = $11;
    $13 = HEAP32[$12>>2]|0;
    $14 = (($11) + 4)|0;
    $15 = $14;
    $16 = HEAP32[$15>>2]|0;
    $17 = ($13|0)==(-1);
    $18 = ($16|0)==(-1);
    $19 = $17 & $18;
    if ($19) {
     label = 7;
    } else {
     $20 = (($$03441) + -1)|0;
     $21 = (($9) + (($20*24)|0)|0);
     $22 = $21;
     $23 = $22;
     $24 = HEAP32[$23>>2]|0;
     $25 = (($22) + 4)|0;
     $26 = $25;
     $27 = HEAP32[$26>>2]|0;
     $28 = ($13|0)==($24|0);
     $29 = ($16|0)==($27|0);
     $30 = $28 & $29;
     if ($30) {
      $$135 = $$03441;
     } else {
      label = 7;
     }
    }
    if ((label|0) == 7) {
     label = 0;
     $31 = (($$03441) + 1)|0;
     $32 = (($9) + (($$03441*24)|0)|0);
     $33 = (($9) + (($$03640*24)|0)|0);
     ;HEAP32[$32>>2]=HEAP32[$33>>2]|0;HEAP32[$32+4>>2]=HEAP32[$33+4>>2]|0;HEAP32[$32+8>>2]=HEAP32[$33+8>>2]|0;HEAP32[$32+12>>2]=HEAP32[$33+12>>2]|0;HEAP32[$32+16>>2]=HEAP32[$33+16>>2]|0;HEAP32[$32+20>>2]=HEAP32[$33+20>>2]|0;
     $$135 = $31;
    }
    $34 = (($$03640) + 1)|0;
    $35 = HEAP32[$0>>2]|0;
    $36 = ($34>>>0)<($35>>>0);
    if ($36) {
     $$03441 = $$135;$$03640 = $34;
    } else {
     $$034$lcssa = $$135;$$lcssa = $35;
     break;
    }
   }
  } else {
   $$034$lcssa = 1;$$lcssa = $7;
  }
 }
 $37 = ($$034$lcssa>>>0)<($$lcssa>>>0);
 if (!($37)) {
  $$038 = $$034$lcssa;
  return ($$038|0);
 }
 $38 = HEAP32[$3>>2]|0;
 $$13739 = $$034$lcssa;
 while(1) {
  $39 = (($38) + (($$13739*24)|0)|0);
  $40 = $39;
  $41 = $40;
  HEAP32[$41>>2] = -1;
  $42 = (($40) + 4)|0;
  $43 = $42;
  HEAP32[$43>>2] = -1;
  $44 = (((($38) + (($$13739*24)|0)|0)) + 8|0);
  $45 = $44;
  $46 = $45;
  HEAP32[$46>>2] = 0;
  $47 = (($45) + 4)|0;
  $48 = $47;
  HEAP32[$48>>2] = 0;
  $49 = (((($38) + (($$13739*24)|0)|0)) + 16|0);
  HEAP32[$49>>2] = 0;
  $50 = (($$13739) + 1)|0;
  $exitcond = ($50|0)==($$lcssa|0);
  if ($exitcond) {
   $$038 = $$034$lcssa;
   break;
  } else {
   $$13739 = $50;
  }
 }
 return ($$038|0);
}
function _seekpoint_compare_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $0;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = $1;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($4|0)==($10|0);
 $15 = ($7|0)==($13|0);
 $16 = $14 & $15;
 $17 = ($7>>>0)<($13>>>0);
 $18 = ($4>>>0)<($10>>>0);
 $19 = ($7|0)==($13|0);
 $20 = $19 & $18;
 $21 = $17 | $20;
 $$ = $21 ? -1 : 1;
 $$0 = $16 ? 0 : $$;
 return ($$0|0);
}
function _utf8len_($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $or$cond = 0;
 var $or$cond37 = 0, $or$cond39 = 0, $or$cond41 = 0, $or$cond45 = 0, $spec$select = 0, $spec$select42 = 0, $spec$select43 = 0, $spec$select46 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = $2 & 128;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = 1;
  return ($$0|0);
 }
 $5 = $2 & 224;
 $6 = ($5|0)==(192);
 if ($6) {
  $7 = ((($0)) + 1|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8 & -64;
  $10 = ($9<<24>>24)==(-128);
  if ($10) {
   $11 = $2 & 254;
   $12 = ($11|0)==(192);
   $$ = $12 ? 0 : 2;
   $$0 = $$;
   return ($$0|0);
  }
 }
 $13 = $1 & -16;
 $14 = ($13<<24>>24)==(-32);
 if ($14) {
  $15 = ((($0)) + 1|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = $17 & 192;
  $19 = ($18|0)==(128);
  if ($19) {
   $20 = ((($0)) + 2|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21 & -64;
   $23 = ($22<<24>>24)==(-128);
   if ($23) {
    $24 = ($1<<24>>24)==(-32);
    $25 = $17 & 224;
    $26 = ($25|0)==(128);
    $or$cond = $24 & $26;
    if ($or$cond) {
     $$0 = 0;
     return ($$0|0);
    }
    switch ($1<<24>>24) {
    case -19:  {
     $27 = $16 & -32;
     $28 = ($27<<24>>24)==(-96);
     if ($28) {
      $$0 = 0;
      return ($$0|0);
     }
     break;
    }
    case -17:  {
     $29 = ($16<<24>>24)==(-65);
     $30 = $21 & -2;
     $31 = ($30<<24>>24)==(-66);
     $or$cond45 = $29 & $31;
     if ($or$cond45) {
      $$0 = 0;
      return ($$0|0);
     }
     break;
    }
    default: {
    }
    }
    $$0 = 3;
    return ($$0|0);
   }
  }
 }
 $32 = $1 & -8;
 $33 = ($32<<24>>24)==(-16);
 if ($33) {
  $34 = ((($0)) + 1|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $37 = $36 & 192;
  $38 = ($37|0)==(128);
  if ($38) {
   $39 = ((($0)) + 2|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = $40 & -64;
   $42 = ($41<<24>>24)==(-128);
   if ($42) {
    $43 = ((($0)) + 3|0);
    $44 = HEAP8[$43>>0]|0;
    $45 = $44 & -64;
    $46 = ($45<<24>>24)==(-128);
    if ($46) {
     $47 = ($1<<24>>24)==(-16);
     $48 = $36 & 240;
     $49 = ($48|0)==(128);
     $or$cond37 = $47 & $49;
     $spec$select = $or$cond37 ? 0 : 4;
     return ($spec$select|0);
    }
   }
  }
 }
 $50 = $1 & -4;
 $51 = ($50<<24>>24)==(-8);
 if ($51) {
  $52 = ((($0)) + 1|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  $55 = $54 & 192;
  $56 = ($55|0)==(128);
  if ($56) {
   $57 = ((($0)) + 2|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58 & -64;
   $60 = ($59<<24>>24)==(-128);
   if ($60) {
    $61 = ((($0)) + 3|0);
    $62 = HEAP8[$61>>0]|0;
    $63 = $62 & -64;
    $64 = ($63<<24>>24)==(-128);
    if ($64) {
     $65 = ((($0)) + 4|0);
     $66 = HEAP8[$65>>0]|0;
     $67 = $66 & -64;
     $68 = ($67<<24>>24)==(-128);
     if ($68) {
      $69 = ($1<<24>>24)==(-8);
      $70 = $54 & 248;
      $71 = ($70|0)==(128);
      $or$cond39 = $69 & $71;
      $spec$select42 = $or$cond39 ? 0 : 5;
      $$0 = $spec$select42;
      return ($$0|0);
     }
    }
   }
  }
 }
 $72 = $1 & -2;
 $73 = ($72<<24>>24)==(-4);
 if (!($73)) {
  $$0 = 0;
  return ($$0|0);
 }
 $74 = ((($0)) + 1|0);
 $75 = HEAP8[$74>>0]|0;
 $76 = $75&255;
 $77 = $76 & 192;
 $78 = ($77|0)==(128);
 if (!($78)) {
  $$0 = 0;
  return ($$0|0);
 }
 $79 = ((($0)) + 2|0);
 $80 = HEAP8[$79>>0]|0;
 $81 = $80 & -64;
 $82 = ($81<<24>>24)==(-128);
 if (!($82)) {
  $$0 = 0;
  return ($$0|0);
 }
 $83 = ((($0)) + 3|0);
 $84 = HEAP8[$83>>0]|0;
 $85 = $84 & -64;
 $86 = ($85<<24>>24)==(-128);
 if (!($86)) {
  $$0 = 0;
  return ($$0|0);
 }
 $87 = ((($0)) + 4|0);
 $88 = HEAP8[$87>>0]|0;
 $89 = $88 & -64;
 $90 = ($89<<24>>24)==(-128);
 if ($90) {
  $91 = ((($0)) + 5|0);
  $92 = HEAP8[$91>>0]|0;
  $93 = $92 & -64;
  $94 = ($93<<24>>24)==(-128);
  $95 = ($1<<24>>24)==(-4);
  $96 = $76 & 252;
  $97 = ($96|0)==(128);
  $or$cond41 = $95 & $97;
  $spec$select43 = $or$cond41 ? 0 : 6;
  $spec$select46 = $94 ? $spec$select43 : 0;
  return ($spec$select46|0);
 } else {
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _FLAC__format_cuesheet_is_legal($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$07081 = 0, $$071 = 0, $$080 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond72 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)!=(0);
 if ($3) {
  $4 = ((($0)) + 136|0);
  $5 = $4;
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  $8 = (($5) + 4)|0;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10>>>0)<(0);
  $12 = ($7>>>0)<(88200);
  $13 = ($10|0)==(0);
  $14 = $13 & $12;
  $15 = $11 | $14;
  if ($15) {
   $16 = ($2|0)==(0|0);
   if ($16) {
    $$071 = 0;
    return ($$071|0);
   }
   HEAP32[$2>>2] = 2365;
   $$071 = 0;
   return ($$071|0);
  }
  $17 = (___uremdi3(($7|0),($10|0),588,0)|0);
  $18 = (getTempRet0() | 0);
  $19 = ($17|0)==(0);
  $20 = ($18|0)==(0);
  $21 = $19 & $20;
  if (!($21)) {
   $22 = ($2|0)==(0|0);
   if ($22) {
    $$071 = 0;
    return ($$071|0);
   }
   HEAP32[$2>>2] = 2430;
   $$071 = 0;
   return ($$071|0);
  }
 }
 $23 = ((($0)) + 148|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0);
 if ($25) {
  $26 = ($2|0)==(0|0);
  if ($26) {
   $$071 = 0;
   return ($$071|0);
  }
  HEAP32[$2>>2] = 2501;
  $$071 = 0;
  return ($$071|0);
 }
 if ($3) {
  $27 = ((($0)) + 152|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($24) + -1)|0;
  $30 = (((($28) + ($29<<5)|0)) + 8|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = ($31<<24>>24)==(-86);
  if (!($32)) {
   $33 = ($2|0)==(0|0);
   if ($33) {
    $$071 = 0;
    return ($$071|0);
   }
   HEAP32[$2>>2] = 2555;
   $$071 = 0;
   return ($$071|0);
  }
 }
 $34 = ((($0)) + 152|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($24) + -1)|0;
 $$07081 = 0;
 L31: while(1) {
  $37 = (((($35) + ($$07081<<5)|0)) + 8|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = ($38<<24>>24)==(0);
  if ($39) {
   label = 17;
   break;
  }
  if ($3) {
   $41 = ($38&255)<(100);
   $42 = ($38<<24>>24)==(-86);
   $or$cond72 = $41 | $42;
   if (!($or$cond72)) {
    label = 21;
    break;
   }
   $44 = (($35) + ($$07081<<5)|0);
   $45 = $44;
   $46 = $45;
   $47 = HEAP32[$46>>2]|0;
   $48 = (($45) + 4)|0;
   $49 = $48;
   $50 = HEAP32[$49>>2]|0;
   $51 = (___uremdi3(($47|0),($50|0),588,0)|0);
   $52 = (getTempRet0() | 0);
   $53 = ($51|0)==(0);
   $54 = ($52|0)==(0);
   $55 = $53 & $54;
   if (!($55)) {
    label = 24;
    break;
   }
  }
  $59 = ($$07081>>>0)<($36>>>0);
  if ($59) {
   $60 = (((($35) + ($$07081<<5)|0)) + 23|0);
   $61 = HEAP8[$60>>0]|0;
   $62 = ($61<<24>>24)==(0);
   if ($62) {
    label = 30;
    break;
   }
   $64 = (((($35) + ($$07081<<5)|0)) + 24|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ((($65)) + 8|0);
   $67 = HEAP8[$66>>0]|0;
   $68 = ($67&255)>(1);
   if ($68) {
    label = 33;
    break;
   }
  }
  $70 = (((($35) + ($$07081<<5)|0)) + 23|0);
  $71 = HEAP8[$70>>0]|0;
  $72 = ($71<<24>>24)==(0);
  if (!($72)) {
   $73 = (((($35) + ($$07081<<5)|0)) + 24|0);
   $74 = (((($35) + ($$07081<<5)|0)) + 24|0);
   $$080 = 0;
   while(1) {
    if ($3) {
     $75 = HEAP32[$73>>2]|0;
     $76 = (($75) + ($$080<<4)|0);
     $77 = $76;
     $78 = $77;
     $79 = HEAP32[$78>>2]|0;
     $80 = (($77) + 4)|0;
     $81 = $80;
     $82 = HEAP32[$81>>2]|0;
     $83 = (___uremdi3(($79|0),($82|0),588,0)|0);
     $84 = (getTempRet0() | 0);
     $85 = ($83|0)==(0);
     $86 = ($84|0)==(0);
     $87 = $85 & $86;
     if (!($87)) {
      label = 39;
      break L31;
     }
    }
    $89 = ($$080|0)==(0);
    if (!($89)) {
     $90 = HEAP32[$74>>2]|0;
     $91 = (((($90) + ($$080<<4)|0)) + 8|0);
     $92 = HEAP8[$91>>0]|0;
     $93 = $92&255;
     $94 = (($$080) + -1)|0;
     $95 = (((($90) + ($94<<4)|0)) + 8|0);
     $96 = HEAP8[$95>>0]|0;
     $97 = $96&255;
     $98 = (($97) + 1)|0;
     $99 = ($98|0)==($93|0);
     if (!($99)) {
      label = 43;
      break L31;
     }
    }
    $101 = (($$080) + 1)|0;
    $102 = HEAP8[$70>>0]|0;
    $103 = $102&255;
    $104 = ($101>>>0)<($103>>>0);
    if ($104) {
     $$080 = $101;
    } else {
     break;
    }
   }
  }
  $105 = (($$07081) + 1)|0;
  $106 = ($105>>>0)<($24>>>0);
  if ($106) {
   $$07081 = $105;
  } else {
   $$071 = 1;
   label = 47;
   break;
  }
 }
 if ((label|0) == 17) {
  $40 = ($2|0)==(0|0);
  if ($40) {
   $$071 = 0;
   return ($$071|0);
  }
  HEAP32[$2>>2] = 2616;
  $$071 = 0;
  return ($$071|0);
 }
 else if ((label|0) == 21) {
  $43 = ($2|0)==(0|0);
  if ($43) {
   $$071 = 0;
   return ($$071|0);
  }
  HEAP32[$2>>2] = 2656;
  $$071 = 0;
  return ($$071|0);
 }
 else if ((label|0) == 24) {
  $56 = ($2|0)==(0|0);
  if ($56) {
   $$071 = 0;
   return ($$071|0);
  }
  $57 = (($24) + -1)|0;
  $58 = ($$07081|0)==($57|0);
  if ($58) {
   HEAP32[$2>>2] = 2705;
   $$071 = 0;
   return ($$071|0);
  } else {
   HEAP32[$2>>2] = 2777;
   $$071 = 0;
   return ($$071|0);
  }
 }
 else if ((label|0) == 30) {
  $63 = ($2|0)==(0|0);
  if ($63) {
   $$071 = 0;
   return ($$071|0);
  }
  HEAP32[$2>>2] = 2846;
  $$071 = 0;
  return ($$071|0);
 }
 else if ((label|0) == 33) {
  $69 = ($2|0)==(0|0);
  if ($69) {
   $$071 = 0;
   return ($$071|0);
  }
  HEAP32[$2>>2] = 2897;
  $$071 = 0;
  return ($$071|0);
 }
 else if ((label|0) == 39) {
  $88 = ($2|0)==(0|0);
  if ($88) {
   $$071 = 0;
   return ($$071|0);
  }
  HEAP32[$2>>2] = 2949;
  $$071 = 0;
  return ($$071|0);
 }
 else if ((label|0) == 43) {
  $100 = ($2|0)==(0|0);
  if ($100) {
   $$071 = 0;
   return ($$071|0);
  }
  HEAP32[$2>>2] = 3024;
  $$071 = 0;
  return ($$071|0);
 }
 else if ((label|0) == 47) {
  return ($$071|0);
 }
 return (0)|0;
}
function _FLAC__format_picture_is_legal($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$02225 = 0, $$02426 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 L1: do {
  if (!($5)) {
   $$02426 = $3;$9 = $4;
   while(1) {
    $10 = ($9<<24>>24)<(32);
    $11 = ($9<<24>>24)==(127);
    $or$cond = $10 | $11;
    $7 = ((($$02426)) + 1|0);
    if ($or$cond) {
     break;
    }
    $6 = HEAP8[$7>>0]|0;
    $8 = ($6<<24>>24)==(0);
    if ($8) {
     break L1;
    } else {
     $$02426 = $7;$9 = $6;
    }
   }
   $12 = ($1|0)==(0|0);
   if ($12) {
    $$2 = 0;
    return ($$2|0);
   }
   HEAP32[$1>>2] = 3073;
   $$2 = 0;
   return ($$2|0);
  }
 } while(0);
 $13 = ((($0)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP8[$14>>0]|0;
 $16 = ($15<<24>>24)==(0);
 if ($16) {
  $$2 = 1;
  return ($$2|0);
 }
 $$02225 = $14;
 while(1) {
  $17 = (_utf8len_($$02225)|0);
  $18 = ($17|0)==(0);
  if ($18) {
   break;
  }
  $20 = (($$02225) + ($17)|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = ($21<<24>>24)==(0);
  if ($22) {
   $$2 = 1;
   label = 13;
   break;
  } else {
   $$02225 = $20;
  }
 }
 if ((label|0) == 13) {
  return ($$2|0);
 }
 $19 = ($1|0)==(0|0);
 if ($19) {
  $$2 = 0;
  return ($$2|0);
 }
 HEAP32[$1>>2] = 3147;
 $$2 = 0;
 return ($$2|0);
}
function _FLAC__format_get_max_rice_partition_order_from_blocksize($0) {
 $0 = $0|0;
 var $$0$lcssa8 = 0, $$056 = 0, $$07 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 & 1;
 $2 = ($1|0)==(0);
 if ($2) {
  $$056 = $0;$$07 = 0;
  while(1) {
   $3 = (($$07) + 1)|0;
   $4 = $$056 >>> 1;
   $5 = $$056 & 2;
   $6 = ($5|0)==(0);
   if ($6) {
    $$056 = $4;$$07 = $3;
   } else {
    break;
   }
  }
  $7 = ($3>>>0)<(15);
  if ($7) {
   $$0$lcssa8 = $3;
  } else {
   $8 = 15;
   return ($8|0);
  }
 } else {
  $$0$lcssa8 = 0;
 }
 $8 = $$0$lcssa8;
 return ($8|0);
}
function _FLAC__format_get_max_rice_partition_order_from_blocksize_limited_max_and_predictor_order($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $0;
 while(1) {
  $3 = ($$0|0)!=(0);
  $4 = $1 >>> $$0;
  $5 = ($4>>>0)<=($2>>>0);
  $6 = $3 & $5;
  $7 = (($$0) + -1)|0;
  if ($6) {
   $$0 = $7;
  } else {
   break;
  }
 }
 return ($$0|0);
}
function _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 0;
 return;
}
function _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  _free($1);
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  _free($4);
 }
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($0);
 return;
}
function _FLAC__format_entropy_coding_method_partitioned_rice_contents_ensure_size($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3>>>0)<($1>>>0);
 if (!($4)) {
  $$0 = 1;
  return ($$0|0);
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = 4 << $1;
 $7 = (_safe_realloc__19($5,$6)|0);
 HEAP32[$0>>2] = $7;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$0 = 0;
  return ($$0|0);
 }
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_safe_realloc__19($10,$6)|0);
 HEAP32[$9>>2] = $11;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $$0 = 0;
  return ($$0|0);
 }
 _memset(($11|0),0,($6|0))|0;
 HEAP32[$2>>2] = $1;
 $$0 = 1;
 return ($$0|0);
}
function _safe_realloc__19($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_realloc($0,$1)|0);
 $3 = ($1|0)!=(0);
 $4 = ($2|0)==(0|0);
 $or$cond = $3 & $4;
 if (!($or$cond)) {
  return ($2|0);
 }
 _free($0);
 return ($2|0);
}
function _FLAC__lpc_window_data($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$09 = 0, $10 = 0.0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($3|0)==(0);
 if ($4) {
  return;
 }
 $$09 = 0;
 while(1) {
  $5 = (($0) + ($$09<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (+($6|0));
  $8 = (($1) + ($$09<<2)|0);
  $9 = +HEAPF32[$8>>2];
  $10 = $9 * $7;
  $11 = (($2) + ($$09<<2)|0);
  HEAPF32[$11>>2] = $10;
  $12 = (($$09) + 1)|0;
  $exitcond = ($12|0)==($3|0);
  if ($exitcond) {
   break;
  } else {
   $$09 = $12;
  }
 }
 return;
}
function _FLAC__lpc_compute_autocorrelation($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$04254 = 0, $$14345 = 0, $$150 = 0, $$244 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $exitcond = 0, $exitcond60 = 0, $exitcond61 = 0, $indvars$iv = 0, $indvars$iv$next = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = (($1) - ($2))|0;
 $5 = ($2|0)==(0);
 if (!($5)) {
  $6 = $2 << 2;
  _memset(($3|0),0,($6|0))|0;
 }
 $7 = ($2|0)==(0);
 $$04254 = 0;
 while(1) {
  $8 = (($0) + ($$04254<<2)|0);
  $9 = +HEAPF32[$8>>2];
  if (!($7)) {
   $$150 = 0;
   while(1) {
    $10 = (($$150) + ($$04254))|0;
    $11 = (($0) + ($10<<2)|0);
    $12 = +HEAPF32[$11>>2];
    $13 = $9 * $12;
    $14 = (($3) + ($$150<<2)|0);
    $15 = +HEAPF32[$14>>2];
    $16 = $15 + $13;
    HEAPF32[$14>>2] = $16;
    $17 = (($$150) + 1)|0;
    $exitcond61 = ($17|0)==($2|0);
    if ($exitcond61) {
     break;
    } else {
     $$150 = $17;
    }
   }
  }
  $18 = (($$04254) + 1)|0;
  $19 = ($18>>>0)>($4>>>0);
  if ($19) {
   break;
  } else {
   $$04254 = $18;
  }
 }
 $20 = ($18>>>0)<($1>>>0);
 if (!($20)) {
  return;
 }
 $21 = (($1) - ($18))|0;
 $$14345 = $18;$indvars$iv = $21;
 while(1) {
  $22 = (($0) + ($$14345<<2)|0);
  $23 = +HEAPF32[$22>>2];
  $24 = ($$14345|0)==($1|0);
  if (!($24)) {
   $$244 = 0;
   while(1) {
    $25 = (($$244) + ($$14345))|0;
    $26 = (($0) + ($25<<2)|0);
    $27 = +HEAPF32[$26>>2];
    $28 = $23 * $27;
    $29 = (($3) + ($$244<<2)|0);
    $30 = +HEAPF32[$29>>2];
    $31 = $30 + $28;
    HEAPF32[$29>>2] = $31;
    $32 = (($$244) + 1)|0;
    $exitcond = ($32|0)==($indvars$iv|0);
    if ($exitcond) {
     break;
    } else {
     $$244 = $32;
    }
   }
  }
  $33 = (($$14345) + 1)|0;
  $indvars$iv$next = (($indvars$iv) + -1)|0;
  $exitcond60 = ($33|0)==($1|0);
  if ($exitcond60) {
   break;
  } else {
   $$14345 = $33;$indvars$iv = $indvars$iv$next;
  }
 }
 return;
}
function _FLAC__lpc_compute_lp_coefficients($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05768 = 0.0, $$05861 = 0.0, $$05960 = 0, $$069 = 0, $$1$lcssa = 0, $$162 = 0, $$267 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0;
 var $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0;
 var $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0.0, $61 = 0, $62 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, $exitcond = 0, $exitcond75 = 0, $exitcond76 = 0, $indvars$iv = 0, $indvars$iv$next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $4 = sp;
 $5 = HEAP32[$1>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = +HEAPF32[$0>>2];
 $8 = $7;
 $$05768 = $8;$$069 = 0;$indvars$iv = 1;
 while(1) {
  $12 = $$069 >>> 1;
  $10 = (($$069) + 1)|0;
  $13 = (($0) + ($10<<2)|0);
  $14 = +HEAPF32[$13>>2];
  $15 = - $14;
  $16 = $15;
  $17 = ($$069|0)==(0);
  if ($17) {
   $18 = $16 / $$05768;
   $19 = (($4) + ($$069<<3)|0);
   HEAPF64[$19>>3] = $18;
   $52 = $18;
  } else {
   $$05861 = $16;$$05960 = 0;
   while(1) {
    $20 = (($4) + ($$05960<<3)|0);
    $21 = +HEAPF64[$20>>3];
    $22 = (($$069) - ($$05960))|0;
    $23 = (($0) + ($22<<2)|0);
    $24 = +HEAPF32[$23>>2];
    $25 = $24;
    $26 = $21 * $25;
    $27 = $$05861 - $26;
    $28 = (($$05960) + 1)|0;
    $exitcond = ($28|0)==($$069|0);
    if ($exitcond) {
     break;
    } else {
     $$05861 = $27;$$05960 = $28;
    }
   }
   $29 = $27 / $$05768;
   $30 = (($4) + ($$069<<3)|0);
   HEAPF64[$30>>3] = $29;
   $31 = $$069 >>> 1;
   $32 = ($31|0)==(0);
   if ($32) {
    $$1$lcssa = 0;
   } else {
    $33 = (($$069) + -1)|0;
    $$162 = 0;
    while(1) {
     $34 = (($4) + ($$162<<3)|0);
     $35 = +HEAPF64[$34>>3];
     $36 = (($33) - ($$162))|0;
     $37 = (($4) + ($36<<3)|0);
     $38 = +HEAPF64[$37>>3];
     $39 = $29 * $38;
     $40 = $35 + $39;
     HEAPF64[$34>>3] = $40;
     $41 = $29 * $35;
     $42 = +HEAPF64[$37>>3];
     $43 = $41 + $42;
     HEAPF64[$37>>3] = $43;
     $44 = (($$162) + 1)|0;
     $exitcond75 = ($44|0)==($12|0);
     if ($exitcond75) {
      $$1$lcssa = $31;
      break;
     } else {
      $$162 = $44;
     }
    }
   }
   $45 = $$069 & 1;
   $46 = ($45|0)==(0);
   $47 = (($4) + ($$1$lcssa<<3)|0);
   if ($46) {
    $52 = $29;
   } else {
    $48 = +HEAPF64[$47>>3];
    $49 = $29 * $48;
    $50 = $48 + $49;
    HEAPF64[$47>>3] = $50;
    $52 = $29;
   }
  }
  $51 = $52 * $52;
  $53 = 1.0 - $51;
  $$267 = 0;
  while(1) {
   $54 = (($4) + ($$267<<3)|0);
   $55 = +HEAPF64[$54>>3];
   $56 = $55;
   $57 = - $56;
   $58 = ((($2) + ($$069<<7)|0) + ($$267<<2)|0);
   HEAPF32[$58>>2] = $57;
   $59 = (($$267) + 1)|0;
   $exitcond76 = ($59|0)==($indvars$iv|0);
   if ($exitcond76) {
    break;
   } else {
    $$267 = $59;
   }
  }
  $60 = $$05768 * $53;
  $61 = (($3) + ($$069<<3)|0);
  HEAPF64[$61>>3] = $60;
  $62 = $60 == 0.0;
  if ($62) {
   break;
  }
  $9 = HEAP32[$1>>2]|0;
  $11 = ($10>>>0)<($9>>>0);
  $indvars$iv$next = (($indvars$iv) + 1)|0;
  if ($11) {
   $$05768 = $60;$$069 = $10;$indvars$iv = $indvars$iv$next;
  } else {
   label = 17;
   break;
  }
 }
 if ((label|0) == 17) {
  STACKTOP = sp;return;
 }
 HEAP32[$1>>2] = $10;
 STACKTOP = sp;return;
}
function _FLAC__lpc_quantize_coefficients($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$088101 = 0.0, $$090 = 0, $$09199 = 0.0, $$092104 = 0, $$095103 = 0.0, $$1 = 0, $$19398 = 0, $$196 = 0.0, $$2100 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0;
 var $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond108 = 0, $exitcond109 = 0, $spec$select = 0, $spec$select97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $5 = sp;
 $6 = (($2) + -1)|0;
 $7 = 1 << $6;
 $8 = (0 - ($7))|0;
 $9 = (($7) + -1)|0;
 $10 = ($1|0)==(0);
 if ($10) {
  $$1 = 2;
  STACKTOP = sp;return ($$1|0);
 }
 $$092104 = 0;$$095103 = 0.0;
 while(1) {
  $11 = (($0) + ($$092104<<2)|0);
  $12 = +HEAPF32[$11>>2];
  $13 = (+Math_abs((+$12)));
  $14 = $13;
  $15 = $$095103 < $14;
  $$196 = $15 ? $14 : $$095103;
  $16 = (($$092104) + 1)|0;
  $exitcond109 = ($16|0)==($1|0);
  if ($exitcond109) {
   break;
  } else {
   $$092104 = $16;$$095103 = $$196;
  }
 }
 $17 = !($$196 <= 0.0);
 if (!($17)) {
  $$1 = 2;
  STACKTOP = sp;return ($$1|0);
 }
 $18 = HEAP32[285]|0;
 $19 = (($18) + -1)|0;
 $20 = 1 << $19;
 (+_frexp($$196,$5));
 $21 = HEAP32[$5>>2]|0;
 $22 = (($21) + -1)|0;
 HEAP32[$5>>2] = $22;
 $23 = (($6) - ($22))|0;
 $24 = (($23) + -1)|0;
 HEAP32[$4>>2] = $24;
 $25 = ($23|0)>($20|0);
 if ($25) {
  $26 = (($20) + -1)|0;
  HEAP32[$4>>2] = $26;
  $29 = $26;
 } else {
  $27 = (1 - ($20))|0;
  $28 = ($23|0)<($27|0);
  if ($28) {
   $$1 = 1;
   STACKTOP = sp;return ($$1|0);
  } else {
   $29 = $24;
  }
 }
 $30 = ($29|0)>(-1);
 $31 = ($1|0)==(0);
 if ($30) {
  if ($31) {
   $$1 = 0;
   STACKTOP = sp;return ($$1|0);
  }
  $$09199 = 0.0;$$19398 = 0;
  while(1) {
   $32 = (($0) + ($$19398<<2)|0);
   $33 = +HEAPF32[$32>>2];
   $34 = HEAP32[$4>>2]|0;
   $35 = 1 << $34;
   $36 = (+($35|0));
   $37 = $33 * $36;
   $38 = $37;
   $39 = $$09199 + $38;
   $40 = (_lround($39)|0);
   $41 = ($40|0)<($7|0);
   $42 = ($40|0)<($8|0);
   $spec$select = $42 ? $8 : $40;
   $$090 = $41 ? $spec$select : $9;
   $43 = (+($$090|0));
   $44 = $39 - $43;
   $45 = (($3) + ($$19398<<2)|0);
   HEAP32[$45>>2] = $$090;
   $46 = (($$19398) + 1)|0;
   $exitcond = ($46|0)==($1|0);
   if ($exitcond) {
    $$1 = 0;
    break;
   } else {
    $$09199 = $44;$$19398 = $46;
   }
  }
  STACKTOP = sp;return ($$1|0);
 } else {
  if (!($31)) {
   $47 = (0 - ($29))|0;
   $48 = 1 << $47;
   $49 = (+($48|0));
   $$088101 = 0.0;$$2100 = 0;
   while(1) {
    $50 = (($0) + ($$2100<<2)|0);
    $51 = +HEAPF32[$50>>2];
    $52 = $51 / $49;
    $53 = $52;
    $54 = $$088101 + $53;
    $55 = (_lround($54)|0);
    $56 = ($55|0)<($7|0);
    $57 = ($55|0)<($8|0);
    $spec$select97 = $57 ? $8 : $55;
    $$0 = $56 ? $spec$select97 : $9;
    $58 = (+($$0|0));
    $59 = $54 - $58;
    $60 = (($3) + ($$2100<<2)|0);
    HEAP32[$60>>2] = $$0;
    $61 = (($$2100) + 1)|0;
    $exitcond108 = ($61|0)==($1|0);
    if ($exitcond108) {
     break;
    } else {
     $$088101 = $59;$$2100 = $61;
    }
   }
  }
  HEAP32[$4>>2] = 0;
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 return (0)|0;
}
function _FLAC__lpc_compute_residual_from_qlp_coefficients($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0565590 = 0, $$1 = 0, $$10 = 0, $$10575609 = 0, $$11 = 0, $$11576611 = 0, $$12 = 0, $$12577613 = 0, $$13 = 0, $$14 = 0, $$15 = 0, $$1566591 = 0, $$16 = 0, $$17 = 0, $$18 = 0, $$19 = 0, $$2 = 0, $$2567593 = 0, $$3 = 0;
 var $$3568595 = 0, $$4 = 0, $$4569597 = 0, $$5 = 0, $$5570599 = 0, $$6 = 0, $$6571601 = 0, $$7 = 0, $$7572603 = 0, $$8 = 0, $$8573605 = 0, $$9 = 0, $$9574607 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
 var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
 var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0;
 var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
 var $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
 var $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0;
 var $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0;
 var $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0;
 var $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0;
 var $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0;
 var $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0;
 var $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0;
 var $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0;
 var $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0;
 var $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond646 = 0, $exitcond647 = 0, $exitcond648 = 0, $exitcond649 = 0, $exitcond650 = 0;
 var $exitcond651 = 0, $exitcond652 = 0, $exitcond653 = 0, $exitcond654 = 0, $exitcond655 = 0, $exitcond656 = 0, $exitcond657 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ($3>>>0)<(13);
 if (!($6)) {
  $618 = ($1|0)>(0);
  if (!($618)) {
   return;
  }
  $619 = ((($2)) + 124|0);
  $620 = ((($2)) + 120|0);
  $621 = ((($2)) + 116|0);
  $622 = ((($2)) + 112|0);
  $623 = ((($2)) + 108|0);
  $624 = ((($2)) + 104|0);
  $625 = ((($2)) + 100|0);
  $626 = ((($2)) + 96|0);
  $627 = ((($2)) + 92|0);
  $628 = ((($2)) + 88|0);
  $629 = ((($2)) + 84|0);
  $630 = ((($2)) + 80|0);
  $631 = ((($2)) + 76|0);
  $632 = ((($2)) + 72|0);
  $633 = ((($2)) + 68|0);
  $634 = ((($2)) + 64|0);
  $635 = ((($2)) + 60|0);
  $636 = ((($2)) + 56|0);
  $637 = ((($2)) + 52|0);
  $638 = ((($2)) + 48|0);
  $639 = ((($2)) + 44|0);
  $640 = ((($2)) + 40|0);
  $641 = ((($2)) + 36|0);
  $642 = ((($2)) + 32|0);
  $643 = ((($2)) + 28|0);
  $644 = ((($2)) + 24|0);
  $645 = ((($2)) + 20|0);
  $646 = ((($2)) + 16|0);
  $647 = ((($2)) + 12|0);
  $648 = ((($2)) + 8|0);
  $649 = ((($2)) + 4|0);
  $$12577613 = 0;
  while(1) {
   switch ($3|0) {
   case 32:  {
    $650 = HEAP32[$619>>2]|0;
    $651 = (($$12577613) + -32)|0;
    $652 = (($0) + ($651<<2)|0);
    $653 = HEAP32[$652>>2]|0;
    $654 = Math_imul($653, $650)|0;
    $$0 = $654;
    label = 53;
    break;
   }
   case 31:  {
    $$0 = 0;
    label = 53;
    break;
   }
   case 30:  {
    $$1 = 0;
    label = 54;
    break;
   }
   case 29:  {
    $$2 = 0;
    label = 55;
    break;
   }
   case 28:  {
    $$3 = 0;
    label = 56;
    break;
   }
   case 27:  {
    $$4 = 0;
    label = 57;
    break;
   }
   case 26:  {
    $$5 = 0;
    label = 58;
    break;
   }
   case 25:  {
    $$6 = 0;
    label = 59;
    break;
   }
   case 24:  {
    $$7 = 0;
    label = 60;
    break;
   }
   case 23:  {
    $$8 = 0;
    label = 61;
    break;
   }
   case 22:  {
    $$9 = 0;
    label = 62;
    break;
   }
   case 21:  {
    $$10 = 0;
    label = 63;
    break;
   }
   case 20:  {
    $$11 = 0;
    label = 64;
    break;
   }
   case 19:  {
    $$12 = 0;
    label = 65;
    break;
   }
   case 18:  {
    $$13 = 0;
    label = 66;
    break;
   }
   case 17:  {
    $$14 = 0;
    label = 67;
    break;
   }
   case 16:  {
    $$15 = 0;
    label = 68;
    break;
   }
   case 15:  {
    $$16 = 0;
    label = 69;
    break;
   }
   case 14:  {
    $$17 = 0;
    label = 70;
    break;
   }
   case 13:  {
    $$18 = 0;
    label = 71;
    break;
   }
   default: {
    $$19 = 0;
   }
   }
   if ((label|0) == 53) {
    label = 0;
    $655 = HEAP32[$620>>2]|0;
    $656 = (($$12577613) + -31)|0;
    $657 = (($0) + ($656<<2)|0);
    $658 = HEAP32[$657>>2]|0;
    $659 = Math_imul($658, $655)|0;
    $660 = (($659) + ($$0))|0;
    $$1 = $660;
    label = 54;
   }
   if ((label|0) == 54) {
    label = 0;
    $661 = HEAP32[$621>>2]|0;
    $662 = (($$12577613) + -30)|0;
    $663 = (($0) + ($662<<2)|0);
    $664 = HEAP32[$663>>2]|0;
    $665 = Math_imul($664, $661)|0;
    $666 = (($665) + ($$1))|0;
    $$2 = $666;
    label = 55;
   }
   if ((label|0) == 55) {
    label = 0;
    $667 = HEAP32[$622>>2]|0;
    $668 = (($$12577613) + -29)|0;
    $669 = (($0) + ($668<<2)|0);
    $670 = HEAP32[$669>>2]|0;
    $671 = Math_imul($670, $667)|0;
    $672 = (($671) + ($$2))|0;
    $$3 = $672;
    label = 56;
   }
   if ((label|0) == 56) {
    label = 0;
    $673 = HEAP32[$623>>2]|0;
    $674 = (($$12577613) + -28)|0;
    $675 = (($0) + ($674<<2)|0);
    $676 = HEAP32[$675>>2]|0;
    $677 = Math_imul($676, $673)|0;
    $678 = (($677) + ($$3))|0;
    $$4 = $678;
    label = 57;
   }
   if ((label|0) == 57) {
    label = 0;
    $679 = HEAP32[$624>>2]|0;
    $680 = (($$12577613) + -27)|0;
    $681 = (($0) + ($680<<2)|0);
    $682 = HEAP32[$681>>2]|0;
    $683 = Math_imul($682, $679)|0;
    $684 = (($683) + ($$4))|0;
    $$5 = $684;
    label = 58;
   }
   if ((label|0) == 58) {
    label = 0;
    $685 = HEAP32[$625>>2]|0;
    $686 = (($$12577613) + -26)|0;
    $687 = (($0) + ($686<<2)|0);
    $688 = HEAP32[$687>>2]|0;
    $689 = Math_imul($688, $685)|0;
    $690 = (($689) + ($$5))|0;
    $$6 = $690;
    label = 59;
   }
   if ((label|0) == 59) {
    label = 0;
    $691 = HEAP32[$626>>2]|0;
    $692 = (($$12577613) + -25)|0;
    $693 = (($0) + ($692<<2)|0);
    $694 = HEAP32[$693>>2]|0;
    $695 = Math_imul($694, $691)|0;
    $696 = (($695) + ($$6))|0;
    $$7 = $696;
    label = 60;
   }
   if ((label|0) == 60) {
    label = 0;
    $697 = HEAP32[$627>>2]|0;
    $698 = (($$12577613) + -24)|0;
    $699 = (($0) + ($698<<2)|0);
    $700 = HEAP32[$699>>2]|0;
    $701 = Math_imul($700, $697)|0;
    $702 = (($701) + ($$7))|0;
    $$8 = $702;
    label = 61;
   }
   if ((label|0) == 61) {
    label = 0;
    $703 = HEAP32[$628>>2]|0;
    $704 = (($$12577613) + -23)|0;
    $705 = (($0) + ($704<<2)|0);
    $706 = HEAP32[$705>>2]|0;
    $707 = Math_imul($706, $703)|0;
    $708 = (($707) + ($$8))|0;
    $$9 = $708;
    label = 62;
   }
   if ((label|0) == 62) {
    label = 0;
    $709 = HEAP32[$629>>2]|0;
    $710 = (($$12577613) + -22)|0;
    $711 = (($0) + ($710<<2)|0);
    $712 = HEAP32[$711>>2]|0;
    $713 = Math_imul($712, $709)|0;
    $714 = (($713) + ($$9))|0;
    $$10 = $714;
    label = 63;
   }
   if ((label|0) == 63) {
    label = 0;
    $715 = HEAP32[$630>>2]|0;
    $716 = (($$12577613) + -21)|0;
    $717 = (($0) + ($716<<2)|0);
    $718 = HEAP32[$717>>2]|0;
    $719 = Math_imul($718, $715)|0;
    $720 = (($719) + ($$10))|0;
    $$11 = $720;
    label = 64;
   }
   if ((label|0) == 64) {
    label = 0;
    $721 = HEAP32[$631>>2]|0;
    $722 = (($$12577613) + -20)|0;
    $723 = (($0) + ($722<<2)|0);
    $724 = HEAP32[$723>>2]|0;
    $725 = Math_imul($724, $721)|0;
    $726 = (($725) + ($$11))|0;
    $$12 = $726;
    label = 65;
   }
   if ((label|0) == 65) {
    label = 0;
    $727 = HEAP32[$632>>2]|0;
    $728 = (($$12577613) + -19)|0;
    $729 = (($0) + ($728<<2)|0);
    $730 = HEAP32[$729>>2]|0;
    $731 = Math_imul($730, $727)|0;
    $732 = (($731) + ($$12))|0;
    $$13 = $732;
    label = 66;
   }
   if ((label|0) == 66) {
    label = 0;
    $733 = HEAP32[$633>>2]|0;
    $734 = (($$12577613) + -18)|0;
    $735 = (($0) + ($734<<2)|0);
    $736 = HEAP32[$735>>2]|0;
    $737 = Math_imul($736, $733)|0;
    $738 = (($737) + ($$13))|0;
    $$14 = $738;
    label = 67;
   }
   if ((label|0) == 67) {
    label = 0;
    $739 = HEAP32[$634>>2]|0;
    $740 = (($$12577613) + -17)|0;
    $741 = (($0) + ($740<<2)|0);
    $742 = HEAP32[$741>>2]|0;
    $743 = Math_imul($742, $739)|0;
    $744 = (($743) + ($$14))|0;
    $$15 = $744;
    label = 68;
   }
   if ((label|0) == 68) {
    label = 0;
    $745 = HEAP32[$635>>2]|0;
    $746 = (($$12577613) + -16)|0;
    $747 = (($0) + ($746<<2)|0);
    $748 = HEAP32[$747>>2]|0;
    $749 = Math_imul($748, $745)|0;
    $750 = (($749) + ($$15))|0;
    $$16 = $750;
    label = 69;
   }
   if ((label|0) == 69) {
    label = 0;
    $751 = HEAP32[$636>>2]|0;
    $752 = (($$12577613) + -15)|0;
    $753 = (($0) + ($752<<2)|0);
    $754 = HEAP32[$753>>2]|0;
    $755 = Math_imul($754, $751)|0;
    $756 = (($755) + ($$16))|0;
    $$17 = $756;
    label = 70;
   }
   if ((label|0) == 70) {
    label = 0;
    $757 = HEAP32[$637>>2]|0;
    $758 = (($$12577613) + -14)|0;
    $759 = (($0) + ($758<<2)|0);
    $760 = HEAP32[$759>>2]|0;
    $761 = Math_imul($760, $757)|0;
    $762 = (($761) + ($$17))|0;
    $$18 = $762;
    label = 71;
   }
   if ((label|0) == 71) {
    label = 0;
    $763 = HEAP32[$638>>2]|0;
    $764 = (($$12577613) + -13)|0;
    $765 = (($0) + ($764<<2)|0);
    $766 = HEAP32[$765>>2]|0;
    $767 = Math_imul($766, $763)|0;
    $768 = (($767) + ($$18))|0;
    $769 = HEAP32[$639>>2]|0;
    $770 = (($$12577613) + -12)|0;
    $771 = (($0) + ($770<<2)|0);
    $772 = HEAP32[$771>>2]|0;
    $773 = Math_imul($772, $769)|0;
    $774 = (($768) + ($773))|0;
    $775 = HEAP32[$640>>2]|0;
    $776 = (($$12577613) + -11)|0;
    $777 = (($0) + ($776<<2)|0);
    $778 = HEAP32[$777>>2]|0;
    $779 = Math_imul($778, $775)|0;
    $780 = (($774) + ($779))|0;
    $781 = HEAP32[$641>>2]|0;
    $782 = (($$12577613) + -10)|0;
    $783 = (($0) + ($782<<2)|0);
    $784 = HEAP32[$783>>2]|0;
    $785 = Math_imul($784, $781)|0;
    $786 = (($780) + ($785))|0;
    $787 = HEAP32[$642>>2]|0;
    $788 = (($$12577613) + -9)|0;
    $789 = (($0) + ($788<<2)|0);
    $790 = HEAP32[$789>>2]|0;
    $791 = Math_imul($790, $787)|0;
    $792 = (($786) + ($791))|0;
    $793 = HEAP32[$643>>2]|0;
    $794 = (($$12577613) + -8)|0;
    $795 = (($0) + ($794<<2)|0);
    $796 = HEAP32[$795>>2]|0;
    $797 = Math_imul($796, $793)|0;
    $798 = (($792) + ($797))|0;
    $799 = HEAP32[$644>>2]|0;
    $800 = (($$12577613) + -7)|0;
    $801 = (($0) + ($800<<2)|0);
    $802 = HEAP32[$801>>2]|0;
    $803 = Math_imul($802, $799)|0;
    $804 = (($798) + ($803))|0;
    $805 = HEAP32[$645>>2]|0;
    $806 = (($$12577613) + -6)|0;
    $807 = (($0) + ($806<<2)|0);
    $808 = HEAP32[$807>>2]|0;
    $809 = Math_imul($808, $805)|0;
    $810 = (($804) + ($809))|0;
    $811 = HEAP32[$646>>2]|0;
    $812 = (($$12577613) + -5)|0;
    $813 = (($0) + ($812<<2)|0);
    $814 = HEAP32[$813>>2]|0;
    $815 = Math_imul($814, $811)|0;
    $816 = (($810) + ($815))|0;
    $817 = HEAP32[$647>>2]|0;
    $818 = (($$12577613) + -4)|0;
    $819 = (($0) + ($818<<2)|0);
    $820 = HEAP32[$819>>2]|0;
    $821 = Math_imul($820, $817)|0;
    $822 = (($816) + ($821))|0;
    $823 = HEAP32[$648>>2]|0;
    $824 = (($$12577613) + -3)|0;
    $825 = (($0) + ($824<<2)|0);
    $826 = HEAP32[$825>>2]|0;
    $827 = Math_imul($826, $823)|0;
    $828 = (($822) + ($827))|0;
    $829 = HEAP32[$649>>2]|0;
    $830 = (($$12577613) + -2)|0;
    $831 = (($0) + ($830<<2)|0);
    $832 = HEAP32[$831>>2]|0;
    $833 = Math_imul($832, $829)|0;
    $834 = (($828) + ($833))|0;
    $835 = HEAP32[$2>>2]|0;
    $836 = (($$12577613) + -1)|0;
    $837 = (($0) + ($836<<2)|0);
    $838 = HEAP32[$837>>2]|0;
    $839 = Math_imul($838, $835)|0;
    $840 = (($834) + ($839))|0;
    $$19 = $840;
   }
   $841 = (($0) + ($$12577613<<2)|0);
   $842 = HEAP32[$841>>2]|0;
   $843 = $$19 >> $4;
   $844 = (($842) - ($843))|0;
   $845 = (($5) + ($$12577613<<2)|0);
   HEAP32[$845>>2] = $844;
   $846 = (($$12577613) + 1)|0;
   $exitcond657 = ($846|0)==($1|0);
   if ($exitcond657) {
    break;
   } else {
    $$12577613 = $846;
   }
  }
  return;
 }
 $7 = ($3>>>0)>(8);
 if ($7) {
  $8 = ($3>>>0)>(10);
  if ($8) {
   $9 = ($3|0)==(12);
   $10 = ($1|0)>(0);
   if ($9) {
    if (!($10)) {
     return;
    }
    $11 = ((($2)) + 44|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ((($2)) + 40|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($2)) + 32|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($2)) + 28|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ((($2)) + 24|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($2)) + 20|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($2)) + 16|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ((($2)) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ((($2)) + 8|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ((($2)) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = HEAP32[$2>>2]|0;
    $$0565590 = 0;
    while(1) {
     $34 = (($$0565590) + -12)|0;
     $35 = (($0) + ($34<<2)|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = Math_imul($36, $12)|0;
     $38 = (($$0565590) + -11)|0;
     $39 = (($0) + ($38<<2)|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = Math_imul($40, $14)|0;
     $42 = (($41) + ($37))|0;
     $43 = (($$0565590) + -10)|0;
     $44 = (($0) + ($43<<2)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = Math_imul($45, $16)|0;
     $47 = (($42) + ($46))|0;
     $48 = (($$0565590) + -9)|0;
     $49 = (($0) + ($48<<2)|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = Math_imul($50, $18)|0;
     $52 = (($47) + ($51))|0;
     $53 = (($$0565590) + -8)|0;
     $54 = (($0) + ($53<<2)|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = Math_imul($55, $20)|0;
     $57 = (($52) + ($56))|0;
     $58 = (($$0565590) + -7)|0;
     $59 = (($0) + ($58<<2)|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = Math_imul($60, $22)|0;
     $62 = (($57) + ($61))|0;
     $63 = (($$0565590) + -6)|0;
     $64 = (($0) + ($63<<2)|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = Math_imul($65, $24)|0;
     $67 = (($62) + ($66))|0;
     $68 = (($$0565590) + -5)|0;
     $69 = (($0) + ($68<<2)|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = Math_imul($70, $26)|0;
     $72 = (($67) + ($71))|0;
     $73 = (($$0565590) + -4)|0;
     $74 = (($0) + ($73<<2)|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = Math_imul($75, $28)|0;
     $77 = (($72) + ($76))|0;
     $78 = (($$0565590) + -3)|0;
     $79 = (($0) + ($78<<2)|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = Math_imul($80, $30)|0;
     $82 = (($77) + ($81))|0;
     $83 = (($$0565590) + -2)|0;
     $84 = (($0) + ($83<<2)|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = Math_imul($85, $32)|0;
     $87 = (($82) + ($86))|0;
     $88 = (($$0565590) + -1)|0;
     $89 = (($0) + ($88<<2)|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = Math_imul($90, $33)|0;
     $92 = (($87) + ($91))|0;
     $93 = (($0) + ($$0565590<<2)|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = $92 >> $4;
     $96 = (($94) - ($95))|0;
     $97 = (($5) + ($$0565590<<2)|0);
     HEAP32[$97>>2] = $96;
     $98 = (($$0565590) + 1)|0;
     $exitcond = ($98|0)==($1|0);
     if ($exitcond) {
      break;
     } else {
      $$0565590 = $98;
     }
    }
    return;
   } else {
    if (!($10)) {
     return;
    }
    $99 = ((($2)) + 40|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = ((($2)) + 36|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = ((($2)) + 32|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = ((($2)) + 28|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = ((($2)) + 24|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = ((($2)) + 20|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = ((($2)) + 16|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = ((($2)) + 12|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = ((($2)) + 8|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = ((($2)) + 4|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = HEAP32[$2>>2]|0;
    $$1566591 = 0;
    while(1) {
     $120 = (($$1566591) + -11)|0;
     $121 = (($0) + ($120<<2)|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = Math_imul($122, $100)|0;
     $124 = (($$1566591) + -10)|0;
     $125 = (($0) + ($124<<2)|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = Math_imul($126, $102)|0;
     $128 = (($127) + ($123))|0;
     $129 = (($$1566591) + -9)|0;
     $130 = (($0) + ($129<<2)|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = Math_imul($131, $104)|0;
     $133 = (($128) + ($132))|0;
     $134 = (($$1566591) + -8)|0;
     $135 = (($0) + ($134<<2)|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = Math_imul($136, $106)|0;
     $138 = (($133) + ($137))|0;
     $139 = (($$1566591) + -7)|0;
     $140 = (($0) + ($139<<2)|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = Math_imul($141, $108)|0;
     $143 = (($138) + ($142))|0;
     $144 = (($$1566591) + -6)|0;
     $145 = (($0) + ($144<<2)|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = Math_imul($146, $110)|0;
     $148 = (($143) + ($147))|0;
     $149 = (($$1566591) + -5)|0;
     $150 = (($0) + ($149<<2)|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = Math_imul($151, $112)|0;
     $153 = (($148) + ($152))|0;
     $154 = (($$1566591) + -4)|0;
     $155 = (($0) + ($154<<2)|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = Math_imul($156, $114)|0;
     $158 = (($153) + ($157))|0;
     $159 = (($$1566591) + -3)|0;
     $160 = (($0) + ($159<<2)|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = Math_imul($161, $116)|0;
     $163 = (($158) + ($162))|0;
     $164 = (($$1566591) + -2)|0;
     $165 = (($0) + ($164<<2)|0);
     $166 = HEAP32[$165>>2]|0;
     $167 = Math_imul($166, $118)|0;
     $168 = (($163) + ($167))|0;
     $169 = (($$1566591) + -1)|0;
     $170 = (($0) + ($169<<2)|0);
     $171 = HEAP32[$170>>2]|0;
     $172 = Math_imul($171, $119)|0;
     $173 = (($168) + ($172))|0;
     $174 = (($0) + ($$1566591<<2)|0);
     $175 = HEAP32[$174>>2]|0;
     $176 = $173 >> $4;
     $177 = (($175) - ($176))|0;
     $178 = (($5) + ($$1566591<<2)|0);
     HEAP32[$178>>2] = $177;
     $179 = (($$1566591) + 1)|0;
     $exitcond646 = ($179|0)==($1|0);
     if ($exitcond646) {
      break;
     } else {
      $$1566591 = $179;
     }
    }
    return;
   }
  } else {
   $180 = ($3|0)==(10);
   $181 = ($1|0)>(0);
   if ($180) {
    if (!($181)) {
     return;
    }
    $182 = ((($2)) + 36|0);
    $183 = HEAP32[$182>>2]|0;
    $184 = ((($2)) + 32|0);
    $185 = HEAP32[$184>>2]|0;
    $186 = ((($2)) + 28|0);
    $187 = HEAP32[$186>>2]|0;
    $188 = ((($2)) + 24|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = ((($2)) + 20|0);
    $191 = HEAP32[$190>>2]|0;
    $192 = ((($2)) + 16|0);
    $193 = HEAP32[$192>>2]|0;
    $194 = ((($2)) + 12|0);
    $195 = HEAP32[$194>>2]|0;
    $196 = ((($2)) + 8|0);
    $197 = HEAP32[$196>>2]|0;
    $198 = ((($2)) + 4|0);
    $199 = HEAP32[$198>>2]|0;
    $200 = HEAP32[$2>>2]|0;
    $$2567593 = 0;
    while(1) {
     $201 = (($$2567593) + -10)|0;
     $202 = (($0) + ($201<<2)|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = Math_imul($203, $183)|0;
     $205 = (($$2567593) + -9)|0;
     $206 = (($0) + ($205<<2)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = Math_imul($207, $185)|0;
     $209 = (($208) + ($204))|0;
     $210 = (($$2567593) + -8)|0;
     $211 = (($0) + ($210<<2)|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = Math_imul($212, $187)|0;
     $214 = (($209) + ($213))|0;
     $215 = (($$2567593) + -7)|0;
     $216 = (($0) + ($215<<2)|0);
     $217 = HEAP32[$216>>2]|0;
     $218 = Math_imul($217, $189)|0;
     $219 = (($214) + ($218))|0;
     $220 = (($$2567593) + -6)|0;
     $221 = (($0) + ($220<<2)|0);
     $222 = HEAP32[$221>>2]|0;
     $223 = Math_imul($222, $191)|0;
     $224 = (($219) + ($223))|0;
     $225 = (($$2567593) + -5)|0;
     $226 = (($0) + ($225<<2)|0);
     $227 = HEAP32[$226>>2]|0;
     $228 = Math_imul($227, $193)|0;
     $229 = (($224) + ($228))|0;
     $230 = (($$2567593) + -4)|0;
     $231 = (($0) + ($230<<2)|0);
     $232 = HEAP32[$231>>2]|0;
     $233 = Math_imul($232, $195)|0;
     $234 = (($229) + ($233))|0;
     $235 = (($$2567593) + -3)|0;
     $236 = (($0) + ($235<<2)|0);
     $237 = HEAP32[$236>>2]|0;
     $238 = Math_imul($237, $197)|0;
     $239 = (($234) + ($238))|0;
     $240 = (($$2567593) + -2)|0;
     $241 = (($0) + ($240<<2)|0);
     $242 = HEAP32[$241>>2]|0;
     $243 = Math_imul($242, $199)|0;
     $244 = (($239) + ($243))|0;
     $245 = (($$2567593) + -1)|0;
     $246 = (($0) + ($245<<2)|0);
     $247 = HEAP32[$246>>2]|0;
     $248 = Math_imul($247, $200)|0;
     $249 = (($244) + ($248))|0;
     $250 = (($0) + ($$2567593<<2)|0);
     $251 = HEAP32[$250>>2]|0;
     $252 = $249 >> $4;
     $253 = (($251) - ($252))|0;
     $254 = (($5) + ($$2567593<<2)|0);
     HEAP32[$254>>2] = $253;
     $255 = (($$2567593) + 1)|0;
     $exitcond647 = ($255|0)==($1|0);
     if ($exitcond647) {
      break;
     } else {
      $$2567593 = $255;
     }
    }
    return;
   } else {
    if (!($181)) {
     return;
    }
    $256 = ((($2)) + 32|0);
    $257 = HEAP32[$256>>2]|0;
    $258 = ((($2)) + 28|0);
    $259 = HEAP32[$258>>2]|0;
    $260 = ((($2)) + 24|0);
    $261 = HEAP32[$260>>2]|0;
    $262 = ((($2)) + 20|0);
    $263 = HEAP32[$262>>2]|0;
    $264 = ((($2)) + 16|0);
    $265 = HEAP32[$264>>2]|0;
    $266 = ((($2)) + 12|0);
    $267 = HEAP32[$266>>2]|0;
    $268 = ((($2)) + 8|0);
    $269 = HEAP32[$268>>2]|0;
    $270 = ((($2)) + 4|0);
    $271 = HEAP32[$270>>2]|0;
    $272 = HEAP32[$2>>2]|0;
    $$3568595 = 0;
    while(1) {
     $273 = (($$3568595) + -9)|0;
     $274 = (($0) + ($273<<2)|0);
     $275 = HEAP32[$274>>2]|0;
     $276 = Math_imul($275, $257)|0;
     $277 = (($$3568595) + -8)|0;
     $278 = (($0) + ($277<<2)|0);
     $279 = HEAP32[$278>>2]|0;
     $280 = Math_imul($279, $259)|0;
     $281 = (($280) + ($276))|0;
     $282 = (($$3568595) + -7)|0;
     $283 = (($0) + ($282<<2)|0);
     $284 = HEAP32[$283>>2]|0;
     $285 = Math_imul($284, $261)|0;
     $286 = (($281) + ($285))|0;
     $287 = (($$3568595) + -6)|0;
     $288 = (($0) + ($287<<2)|0);
     $289 = HEAP32[$288>>2]|0;
     $290 = Math_imul($289, $263)|0;
     $291 = (($286) + ($290))|0;
     $292 = (($$3568595) + -5)|0;
     $293 = (($0) + ($292<<2)|0);
     $294 = HEAP32[$293>>2]|0;
     $295 = Math_imul($294, $265)|0;
     $296 = (($291) + ($295))|0;
     $297 = (($$3568595) + -4)|0;
     $298 = (($0) + ($297<<2)|0);
     $299 = HEAP32[$298>>2]|0;
     $300 = Math_imul($299, $267)|0;
     $301 = (($296) + ($300))|0;
     $302 = (($$3568595) + -3)|0;
     $303 = (($0) + ($302<<2)|0);
     $304 = HEAP32[$303>>2]|0;
     $305 = Math_imul($304, $269)|0;
     $306 = (($301) + ($305))|0;
     $307 = (($$3568595) + -2)|0;
     $308 = (($0) + ($307<<2)|0);
     $309 = HEAP32[$308>>2]|0;
     $310 = Math_imul($309, $271)|0;
     $311 = (($306) + ($310))|0;
     $312 = (($$3568595) + -1)|0;
     $313 = (($0) + ($312<<2)|0);
     $314 = HEAP32[$313>>2]|0;
     $315 = Math_imul($314, $272)|0;
     $316 = (($311) + ($315))|0;
     $317 = (($0) + ($$3568595<<2)|0);
     $318 = HEAP32[$317>>2]|0;
     $319 = $316 >> $4;
     $320 = (($318) - ($319))|0;
     $321 = (($5) + ($$3568595<<2)|0);
     HEAP32[$321>>2] = $320;
     $322 = (($$3568595) + 1)|0;
     $exitcond648 = ($322|0)==($1|0);
     if ($exitcond648) {
      break;
     } else {
      $$3568595 = $322;
     }
    }
    return;
   }
  }
 }
 $323 = ($3>>>0)>(4);
 if ($323) {
  $324 = ($3>>>0)>(6);
  if ($324) {
   $325 = ($3|0)==(8);
   $326 = ($1|0)>(0);
   if ($325) {
    if (!($326)) {
     return;
    }
    $327 = ((($2)) + 28|0);
    $328 = HEAP32[$327>>2]|0;
    $329 = ((($2)) + 24|0);
    $330 = HEAP32[$329>>2]|0;
    $331 = ((($2)) + 20|0);
    $332 = HEAP32[$331>>2]|0;
    $333 = ((($2)) + 16|0);
    $334 = HEAP32[$333>>2]|0;
    $335 = ((($2)) + 12|0);
    $336 = HEAP32[$335>>2]|0;
    $337 = ((($2)) + 8|0);
    $338 = HEAP32[$337>>2]|0;
    $339 = ((($2)) + 4|0);
    $340 = HEAP32[$339>>2]|0;
    $341 = HEAP32[$2>>2]|0;
    $$4569597 = 0;
    while(1) {
     $342 = (($$4569597) + -8)|0;
     $343 = (($0) + ($342<<2)|0);
     $344 = HEAP32[$343>>2]|0;
     $345 = Math_imul($344, $328)|0;
     $346 = (($$4569597) + -7)|0;
     $347 = (($0) + ($346<<2)|0);
     $348 = HEAP32[$347>>2]|0;
     $349 = Math_imul($348, $330)|0;
     $350 = (($349) + ($345))|0;
     $351 = (($$4569597) + -6)|0;
     $352 = (($0) + ($351<<2)|0);
     $353 = HEAP32[$352>>2]|0;
     $354 = Math_imul($353, $332)|0;
     $355 = (($350) + ($354))|0;
     $356 = (($$4569597) + -5)|0;
     $357 = (($0) + ($356<<2)|0);
     $358 = HEAP32[$357>>2]|0;
     $359 = Math_imul($358, $334)|0;
     $360 = (($355) + ($359))|0;
     $361 = (($$4569597) + -4)|0;
     $362 = (($0) + ($361<<2)|0);
     $363 = HEAP32[$362>>2]|0;
     $364 = Math_imul($363, $336)|0;
     $365 = (($360) + ($364))|0;
     $366 = (($$4569597) + -3)|0;
     $367 = (($0) + ($366<<2)|0);
     $368 = HEAP32[$367>>2]|0;
     $369 = Math_imul($368, $338)|0;
     $370 = (($365) + ($369))|0;
     $371 = (($$4569597) + -2)|0;
     $372 = (($0) + ($371<<2)|0);
     $373 = HEAP32[$372>>2]|0;
     $374 = Math_imul($373, $340)|0;
     $375 = (($370) + ($374))|0;
     $376 = (($$4569597) + -1)|0;
     $377 = (($0) + ($376<<2)|0);
     $378 = HEAP32[$377>>2]|0;
     $379 = Math_imul($378, $341)|0;
     $380 = (($375) + ($379))|0;
     $381 = (($0) + ($$4569597<<2)|0);
     $382 = HEAP32[$381>>2]|0;
     $383 = $380 >> $4;
     $384 = (($382) - ($383))|0;
     $385 = (($5) + ($$4569597<<2)|0);
     HEAP32[$385>>2] = $384;
     $386 = (($$4569597) + 1)|0;
     $exitcond649 = ($386|0)==($1|0);
     if ($exitcond649) {
      break;
     } else {
      $$4569597 = $386;
     }
    }
    return;
   } else {
    if (!($326)) {
     return;
    }
    $387 = ((($2)) + 24|0);
    $388 = HEAP32[$387>>2]|0;
    $389 = ((($2)) + 20|0);
    $390 = HEAP32[$389>>2]|0;
    $391 = ((($2)) + 16|0);
    $392 = HEAP32[$391>>2]|0;
    $393 = ((($2)) + 12|0);
    $394 = HEAP32[$393>>2]|0;
    $395 = ((($2)) + 8|0);
    $396 = HEAP32[$395>>2]|0;
    $397 = ((($2)) + 4|0);
    $398 = HEAP32[$397>>2]|0;
    $399 = HEAP32[$2>>2]|0;
    $$5570599 = 0;
    while(1) {
     $400 = (($$5570599) + -7)|0;
     $401 = (($0) + ($400<<2)|0);
     $402 = HEAP32[$401>>2]|0;
     $403 = Math_imul($402, $388)|0;
     $404 = (($$5570599) + -6)|0;
     $405 = (($0) + ($404<<2)|0);
     $406 = HEAP32[$405>>2]|0;
     $407 = Math_imul($406, $390)|0;
     $408 = (($407) + ($403))|0;
     $409 = (($$5570599) + -5)|0;
     $410 = (($0) + ($409<<2)|0);
     $411 = HEAP32[$410>>2]|0;
     $412 = Math_imul($411, $392)|0;
     $413 = (($408) + ($412))|0;
     $414 = (($$5570599) + -4)|0;
     $415 = (($0) + ($414<<2)|0);
     $416 = HEAP32[$415>>2]|0;
     $417 = Math_imul($416, $394)|0;
     $418 = (($413) + ($417))|0;
     $419 = (($$5570599) + -3)|0;
     $420 = (($0) + ($419<<2)|0);
     $421 = HEAP32[$420>>2]|0;
     $422 = Math_imul($421, $396)|0;
     $423 = (($418) + ($422))|0;
     $424 = (($$5570599) + -2)|0;
     $425 = (($0) + ($424<<2)|0);
     $426 = HEAP32[$425>>2]|0;
     $427 = Math_imul($426, $398)|0;
     $428 = (($423) + ($427))|0;
     $429 = (($$5570599) + -1)|0;
     $430 = (($0) + ($429<<2)|0);
     $431 = HEAP32[$430>>2]|0;
     $432 = Math_imul($431, $399)|0;
     $433 = (($428) + ($432))|0;
     $434 = (($0) + ($$5570599<<2)|0);
     $435 = HEAP32[$434>>2]|0;
     $436 = $433 >> $4;
     $437 = (($435) - ($436))|0;
     $438 = (($5) + ($$5570599<<2)|0);
     HEAP32[$438>>2] = $437;
     $439 = (($$5570599) + 1)|0;
     $exitcond650 = ($439|0)==($1|0);
     if ($exitcond650) {
      break;
     } else {
      $$5570599 = $439;
     }
    }
    return;
   }
  } else {
   $440 = ($3|0)==(6);
   $441 = ($1|0)>(0);
   if ($440) {
    if (!($441)) {
     return;
    }
    $442 = ((($2)) + 20|0);
    $443 = HEAP32[$442>>2]|0;
    $444 = ((($2)) + 16|0);
    $445 = HEAP32[$444>>2]|0;
    $446 = ((($2)) + 12|0);
    $447 = HEAP32[$446>>2]|0;
    $448 = ((($2)) + 8|0);
    $449 = HEAP32[$448>>2]|0;
    $450 = ((($2)) + 4|0);
    $451 = HEAP32[$450>>2]|0;
    $452 = HEAP32[$2>>2]|0;
    $$6571601 = 0;
    while(1) {
     $453 = (($$6571601) + -6)|0;
     $454 = (($0) + ($453<<2)|0);
     $455 = HEAP32[$454>>2]|0;
     $456 = Math_imul($455, $443)|0;
     $457 = (($$6571601) + -5)|0;
     $458 = (($0) + ($457<<2)|0);
     $459 = HEAP32[$458>>2]|0;
     $460 = Math_imul($459, $445)|0;
     $461 = (($460) + ($456))|0;
     $462 = (($$6571601) + -4)|0;
     $463 = (($0) + ($462<<2)|0);
     $464 = HEAP32[$463>>2]|0;
     $465 = Math_imul($464, $447)|0;
     $466 = (($461) + ($465))|0;
     $467 = (($$6571601) + -3)|0;
     $468 = (($0) + ($467<<2)|0);
     $469 = HEAP32[$468>>2]|0;
     $470 = Math_imul($469, $449)|0;
     $471 = (($466) + ($470))|0;
     $472 = (($$6571601) + -2)|0;
     $473 = (($0) + ($472<<2)|0);
     $474 = HEAP32[$473>>2]|0;
     $475 = Math_imul($474, $451)|0;
     $476 = (($471) + ($475))|0;
     $477 = (($$6571601) + -1)|0;
     $478 = (($0) + ($477<<2)|0);
     $479 = HEAP32[$478>>2]|0;
     $480 = Math_imul($479, $452)|0;
     $481 = (($476) + ($480))|0;
     $482 = (($0) + ($$6571601<<2)|0);
     $483 = HEAP32[$482>>2]|0;
     $484 = $481 >> $4;
     $485 = (($483) - ($484))|0;
     $486 = (($5) + ($$6571601<<2)|0);
     HEAP32[$486>>2] = $485;
     $487 = (($$6571601) + 1)|0;
     $exitcond651 = ($487|0)==($1|0);
     if ($exitcond651) {
      break;
     } else {
      $$6571601 = $487;
     }
    }
    return;
   } else {
    if (!($441)) {
     return;
    }
    $488 = ((($2)) + 16|0);
    $489 = HEAP32[$488>>2]|0;
    $490 = ((($2)) + 12|0);
    $491 = HEAP32[$490>>2]|0;
    $492 = ((($2)) + 8|0);
    $493 = HEAP32[$492>>2]|0;
    $494 = ((($2)) + 4|0);
    $495 = HEAP32[$494>>2]|0;
    $496 = HEAP32[$2>>2]|0;
    $$7572603 = 0;
    while(1) {
     $497 = (($$7572603) + -5)|0;
     $498 = (($0) + ($497<<2)|0);
     $499 = HEAP32[$498>>2]|0;
     $500 = Math_imul($499, $489)|0;
     $501 = (($$7572603) + -4)|0;
     $502 = (($0) + ($501<<2)|0);
     $503 = HEAP32[$502>>2]|0;
     $504 = Math_imul($503, $491)|0;
     $505 = (($504) + ($500))|0;
     $506 = (($$7572603) + -3)|0;
     $507 = (($0) + ($506<<2)|0);
     $508 = HEAP32[$507>>2]|0;
     $509 = Math_imul($508, $493)|0;
     $510 = (($505) + ($509))|0;
     $511 = (($$7572603) + -2)|0;
     $512 = (($0) + ($511<<2)|0);
     $513 = HEAP32[$512>>2]|0;
     $514 = Math_imul($513, $495)|0;
     $515 = (($510) + ($514))|0;
     $516 = (($$7572603) + -1)|0;
     $517 = (($0) + ($516<<2)|0);
     $518 = HEAP32[$517>>2]|0;
     $519 = Math_imul($518, $496)|0;
     $520 = (($515) + ($519))|0;
     $521 = (($0) + ($$7572603<<2)|0);
     $522 = HEAP32[$521>>2]|0;
     $523 = $520 >> $4;
     $524 = (($522) - ($523))|0;
     $525 = (($5) + ($$7572603<<2)|0);
     HEAP32[$525>>2] = $524;
     $526 = (($$7572603) + 1)|0;
     $exitcond652 = ($526|0)==($1|0);
     if ($exitcond652) {
      break;
     } else {
      $$7572603 = $526;
     }
    }
    return;
   }
  }
 } else {
  $527 = ($3>>>0)>(2);
  if ($527) {
   $528 = ($3|0)==(4);
   $529 = ($1|0)>(0);
   if ($528) {
    if (!($529)) {
     return;
    }
    $530 = ((($2)) + 12|0);
    $531 = HEAP32[$530>>2]|0;
    $532 = ((($2)) + 8|0);
    $533 = HEAP32[$532>>2]|0;
    $534 = ((($2)) + 4|0);
    $535 = HEAP32[$534>>2]|0;
    $536 = HEAP32[$2>>2]|0;
    $$8573605 = 0;
    while(1) {
     $537 = (($$8573605) + -4)|0;
     $538 = (($0) + ($537<<2)|0);
     $539 = HEAP32[$538>>2]|0;
     $540 = Math_imul($539, $531)|0;
     $541 = (($$8573605) + -3)|0;
     $542 = (($0) + ($541<<2)|0);
     $543 = HEAP32[$542>>2]|0;
     $544 = Math_imul($543, $533)|0;
     $545 = (($544) + ($540))|0;
     $546 = (($$8573605) + -2)|0;
     $547 = (($0) + ($546<<2)|0);
     $548 = HEAP32[$547>>2]|0;
     $549 = Math_imul($548, $535)|0;
     $550 = (($545) + ($549))|0;
     $551 = (($$8573605) + -1)|0;
     $552 = (($0) + ($551<<2)|0);
     $553 = HEAP32[$552>>2]|0;
     $554 = Math_imul($553, $536)|0;
     $555 = (($550) + ($554))|0;
     $556 = (($0) + ($$8573605<<2)|0);
     $557 = HEAP32[$556>>2]|0;
     $558 = $555 >> $4;
     $559 = (($557) - ($558))|0;
     $560 = (($5) + ($$8573605<<2)|0);
     HEAP32[$560>>2] = $559;
     $561 = (($$8573605) + 1)|0;
     $exitcond653 = ($561|0)==($1|0);
     if ($exitcond653) {
      break;
     } else {
      $$8573605 = $561;
     }
    }
    return;
   } else {
    if (!($529)) {
     return;
    }
    $562 = ((($2)) + 8|0);
    $563 = HEAP32[$562>>2]|0;
    $564 = ((($2)) + 4|0);
    $565 = HEAP32[$564>>2]|0;
    $566 = HEAP32[$2>>2]|0;
    $$9574607 = 0;
    while(1) {
     $567 = (($$9574607) + -3)|0;
     $568 = (($0) + ($567<<2)|0);
     $569 = HEAP32[$568>>2]|0;
     $570 = Math_imul($569, $563)|0;
     $571 = (($$9574607) + -2)|0;
     $572 = (($0) + ($571<<2)|0);
     $573 = HEAP32[$572>>2]|0;
     $574 = Math_imul($573, $565)|0;
     $575 = (($574) + ($570))|0;
     $576 = (($$9574607) + -1)|0;
     $577 = (($0) + ($576<<2)|0);
     $578 = HEAP32[$577>>2]|0;
     $579 = Math_imul($578, $566)|0;
     $580 = (($575) + ($579))|0;
     $581 = (($0) + ($$9574607<<2)|0);
     $582 = HEAP32[$581>>2]|0;
     $583 = $580 >> $4;
     $584 = (($582) - ($583))|0;
     $585 = (($5) + ($$9574607<<2)|0);
     HEAP32[$585>>2] = $584;
     $586 = (($$9574607) + 1)|0;
     $exitcond654 = ($586|0)==($1|0);
     if ($exitcond654) {
      break;
     } else {
      $$9574607 = $586;
     }
    }
    return;
   }
  } else {
   $587 = ($3|0)==(2);
   $588 = ($1|0)>(0);
   if ($587) {
    if (!($588)) {
     return;
    }
    $589 = ((($2)) + 4|0);
    $590 = HEAP32[$589>>2]|0;
    $591 = HEAP32[$2>>2]|0;
    $$10575609 = 0;
    while(1) {
     $592 = (($$10575609) + -2)|0;
     $593 = (($0) + ($592<<2)|0);
     $594 = HEAP32[$593>>2]|0;
     $595 = Math_imul($594, $590)|0;
     $596 = (($$10575609) + -1)|0;
     $597 = (($0) + ($596<<2)|0);
     $598 = HEAP32[$597>>2]|0;
     $599 = Math_imul($598, $591)|0;
     $600 = (($599) + ($595))|0;
     $601 = (($0) + ($$10575609<<2)|0);
     $602 = HEAP32[$601>>2]|0;
     $603 = $600 >> $4;
     $604 = (($602) - ($603))|0;
     $605 = (($5) + ($$10575609<<2)|0);
     HEAP32[$605>>2] = $604;
     $606 = (($$10575609) + 1)|0;
     $exitcond655 = ($606|0)==($1|0);
     if ($exitcond655) {
      break;
     } else {
      $$10575609 = $606;
     }
    }
    return;
   } else {
    if (!($588)) {
     return;
    }
    $607 = HEAP32[$2>>2]|0;
    $$11576611 = 0;
    while(1) {
     $608 = (($0) + ($$11576611<<2)|0);
     $609 = HEAP32[$608>>2]|0;
     $610 = (($$11576611) + -1)|0;
     $611 = (($0) + ($610<<2)|0);
     $612 = HEAP32[$611>>2]|0;
     $613 = Math_imul($612, $607)|0;
     $614 = $613 >> $4;
     $615 = (($609) - ($614))|0;
     $616 = (($5) + ($$11576611<<2)|0);
     HEAP32[$616>>2] = $615;
     $617 = (($$11576611) + 1)|0;
     $exitcond656 = ($617|0)==($1|0);
     if ($exitcond656) {
      break;
     } else {
      $$11576611 = $617;
     }
    }
    return;
   }
  }
 }
}
function _FLAC__lpc_compute_residual_from_qlp_coefficients_wide($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0565590 = 0, $$10575609 = 0, $$11576611 = 0, $$12577613 = 0, $$1566591 = 0, $$2567593 = 0, $$3568595 = 0, $$4569597 = 0, $$5570599 = 0, $$6571601 = 0, $$7572603 = 0, $$8573605 = 0, $$9574607 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0;
 var $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0;
 var $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0;
 var $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0;
 var $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0;
 var $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0;
 var $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0;
 var $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0;
 var $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0;
 var $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0;
 var $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0;
 var $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0;
 var $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0;
 var $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0;
 var $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0;
 var $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0;
 var $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0;
 var $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0;
 var $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0;
 var $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0;
 var $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0;
 var $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0;
 var $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0;
 var $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0;
 var $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0;
 var $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0;
 var $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0;
 var $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0;
 var $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0;
 var $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0;
 var $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0;
 var $1546 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0;
 var $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0;
 var $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0;
 var $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0;
 var $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0;
 var $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0;
 var $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0;
 var $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0;
 var $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0;
 var $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0;
 var $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0;
 var $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0;
 var $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0;
 var $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0;
 var $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0;
 var $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0;
 var $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0;
 var $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0;
 var $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0;
 var $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $exitcond = 0, $exitcond646 = 0, $exitcond647 = 0, $exitcond648 = 0, $exitcond649 = 0, $exitcond650 = 0;
 var $exitcond651 = 0, $exitcond652 = 0, $exitcond653 = 0, $exitcond654 = 0, $exitcond655 = 0, $exitcond656 = 0, $exitcond657 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ($3>>>0)<(13);
 if (!($6)) {
  $1086 = ($1|0)>(0);
  if (!($1086)) {
   return;
  }
  $1087 = ((($2)) + 124|0);
  $1088 = ((($2)) + 120|0);
  $1089 = ((($2)) + 116|0);
  $1090 = ((($2)) + 112|0);
  $1091 = ((($2)) + 108|0);
  $1092 = ((($2)) + 104|0);
  $1093 = ((($2)) + 100|0);
  $1094 = ((($2)) + 96|0);
  $1095 = ((($2)) + 92|0);
  $1096 = ((($2)) + 88|0);
  $1097 = ((($2)) + 84|0);
  $1098 = ((($2)) + 80|0);
  $1099 = ((($2)) + 76|0);
  $1100 = ((($2)) + 72|0);
  $1101 = ((($2)) + 68|0);
  $1102 = ((($2)) + 64|0);
  $1103 = ((($2)) + 60|0);
  $1104 = ((($2)) + 56|0);
  $1105 = ((($2)) + 52|0);
  $1106 = ((($2)) + 48|0);
  $1107 = ((($2)) + 44|0);
  $1108 = ((($2)) + 40|0);
  $1109 = ((($2)) + 36|0);
  $1110 = ((($2)) + 32|0);
  $1111 = ((($2)) + 28|0);
  $1112 = ((($2)) + 24|0);
  $1113 = ((($2)) + 20|0);
  $1114 = ((($2)) + 16|0);
  $1115 = ((($2)) + 12|0);
  $1116 = ((($2)) + 8|0);
  $1117 = ((($2)) + 4|0);
  $$12577613 = 0;
  while(1) {
   switch ($3|0) {
   case 32:  {
    $1118 = HEAP32[$1087>>2]|0;
    $1119 = ($1118|0)<(0);
    $1120 = $1119 << 31 >> 31;
    $1121 = (($$12577613) + -32)|0;
    $1122 = (($0) + ($1121<<2)|0);
    $1123 = HEAP32[$1122>>2]|0;
    $1124 = ($1123|0)<(0);
    $1125 = $1124 << 31 >> 31;
    $1126 = (___muldi3(($1123|0),($1125|0),($1118|0),($1120|0))|0);
    $1127 = (getTempRet0() | 0);
    $1138 = $1126;$1139 = $1127;
    label = 53;
    break;
   }
   case 31:  {
    $1138 = 0;$1139 = 0;
    label = 53;
    break;
   }
   case 30:  {
    $1152 = 0;$1153 = 0;
    label = 54;
    break;
   }
   case 29:  {
    $1166 = 0;$1167 = 0;
    label = 55;
    break;
   }
   case 28:  {
    $1180 = 0;$1181 = 0;
    label = 56;
    break;
   }
   case 27:  {
    $1194 = 0;$1195 = 0;
    label = 57;
    break;
   }
   case 26:  {
    $1208 = 0;$1209 = 0;
    label = 58;
    break;
   }
   case 25:  {
    $1222 = 0;$1223 = 0;
    label = 59;
    break;
   }
   case 24:  {
    $1236 = 0;$1237 = 0;
    label = 60;
    break;
   }
   case 23:  {
    $1250 = 0;$1251 = 0;
    label = 61;
    break;
   }
   case 22:  {
    $1264 = 0;$1265 = 0;
    label = 62;
    break;
   }
   case 21:  {
    $1278 = 0;$1279 = 0;
    label = 63;
    break;
   }
   case 20:  {
    $1292 = 0;$1293 = 0;
    label = 64;
    break;
   }
   case 19:  {
    $1306 = 0;$1307 = 0;
    label = 65;
    break;
   }
   case 18:  {
    $1320 = 0;$1321 = 0;
    label = 66;
    break;
   }
   case 17:  {
    $1334 = 0;$1335 = 0;
    label = 67;
    break;
   }
   case 16:  {
    $1348 = 0;$1349 = 0;
    label = 68;
    break;
   }
   case 15:  {
    $1362 = 0;$1363 = 0;
    label = 69;
    break;
   }
   case 14:  {
    $1376 = 0;$1377 = 0;
    label = 70;
    break;
   }
   case 13:  {
    $1390 = 0;$1391 = 0;
    label = 71;
    break;
   }
   default: {
    $1540 = 0;$1541 = 0;
   }
   }
   if ((label|0) == 53) {
    label = 0;
    $1128 = HEAP32[$1088>>2]|0;
    $1129 = ($1128|0)<(0);
    $1130 = $1129 << 31 >> 31;
    $1131 = (($$12577613) + -31)|0;
    $1132 = (($0) + ($1131<<2)|0);
    $1133 = HEAP32[$1132>>2]|0;
    $1134 = ($1133|0)<(0);
    $1135 = $1134 << 31 >> 31;
    $1136 = (___muldi3(($1133|0),($1135|0),($1128|0),($1130|0))|0);
    $1137 = (getTempRet0() | 0);
    $1140 = (_i64Add(($1136|0),($1137|0),($1138|0),($1139|0))|0);
    $1141 = (getTempRet0() | 0);
    $1152 = $1140;$1153 = $1141;
    label = 54;
   }
   if ((label|0) == 54) {
    label = 0;
    $1142 = HEAP32[$1089>>2]|0;
    $1143 = ($1142|0)<(0);
    $1144 = $1143 << 31 >> 31;
    $1145 = (($$12577613) + -30)|0;
    $1146 = (($0) + ($1145<<2)|0);
    $1147 = HEAP32[$1146>>2]|0;
    $1148 = ($1147|0)<(0);
    $1149 = $1148 << 31 >> 31;
    $1150 = (___muldi3(($1147|0),($1149|0),($1142|0),($1144|0))|0);
    $1151 = (getTempRet0() | 0);
    $1154 = (_i64Add(($1150|0),($1151|0),($1152|0),($1153|0))|0);
    $1155 = (getTempRet0() | 0);
    $1166 = $1154;$1167 = $1155;
    label = 55;
   }
   if ((label|0) == 55) {
    label = 0;
    $1156 = HEAP32[$1090>>2]|0;
    $1157 = ($1156|0)<(0);
    $1158 = $1157 << 31 >> 31;
    $1159 = (($$12577613) + -29)|0;
    $1160 = (($0) + ($1159<<2)|0);
    $1161 = HEAP32[$1160>>2]|0;
    $1162 = ($1161|0)<(0);
    $1163 = $1162 << 31 >> 31;
    $1164 = (___muldi3(($1161|0),($1163|0),($1156|0),($1158|0))|0);
    $1165 = (getTempRet0() | 0);
    $1168 = (_i64Add(($1164|0),($1165|0),($1166|0),($1167|0))|0);
    $1169 = (getTempRet0() | 0);
    $1180 = $1168;$1181 = $1169;
    label = 56;
   }
   if ((label|0) == 56) {
    label = 0;
    $1170 = HEAP32[$1091>>2]|0;
    $1171 = ($1170|0)<(0);
    $1172 = $1171 << 31 >> 31;
    $1173 = (($$12577613) + -28)|0;
    $1174 = (($0) + ($1173<<2)|0);
    $1175 = HEAP32[$1174>>2]|0;
    $1176 = ($1175|0)<(0);
    $1177 = $1176 << 31 >> 31;
    $1178 = (___muldi3(($1175|0),($1177|0),($1170|0),($1172|0))|0);
    $1179 = (getTempRet0() | 0);
    $1182 = (_i64Add(($1178|0),($1179|0),($1180|0),($1181|0))|0);
    $1183 = (getTempRet0() | 0);
    $1194 = $1182;$1195 = $1183;
    label = 57;
   }
   if ((label|0) == 57) {
    label = 0;
    $1184 = HEAP32[$1092>>2]|0;
    $1185 = ($1184|0)<(0);
    $1186 = $1185 << 31 >> 31;
    $1187 = (($$12577613) + -27)|0;
    $1188 = (($0) + ($1187<<2)|0);
    $1189 = HEAP32[$1188>>2]|0;
    $1190 = ($1189|0)<(0);
    $1191 = $1190 << 31 >> 31;
    $1192 = (___muldi3(($1189|0),($1191|0),($1184|0),($1186|0))|0);
    $1193 = (getTempRet0() | 0);
    $1196 = (_i64Add(($1192|0),($1193|0),($1194|0),($1195|0))|0);
    $1197 = (getTempRet0() | 0);
    $1208 = $1196;$1209 = $1197;
    label = 58;
   }
   if ((label|0) == 58) {
    label = 0;
    $1198 = HEAP32[$1093>>2]|0;
    $1199 = ($1198|0)<(0);
    $1200 = $1199 << 31 >> 31;
    $1201 = (($$12577613) + -26)|0;
    $1202 = (($0) + ($1201<<2)|0);
    $1203 = HEAP32[$1202>>2]|0;
    $1204 = ($1203|0)<(0);
    $1205 = $1204 << 31 >> 31;
    $1206 = (___muldi3(($1203|0),($1205|0),($1198|0),($1200|0))|0);
    $1207 = (getTempRet0() | 0);
    $1210 = (_i64Add(($1206|0),($1207|0),($1208|0),($1209|0))|0);
    $1211 = (getTempRet0() | 0);
    $1222 = $1210;$1223 = $1211;
    label = 59;
   }
   if ((label|0) == 59) {
    label = 0;
    $1212 = HEAP32[$1094>>2]|0;
    $1213 = ($1212|0)<(0);
    $1214 = $1213 << 31 >> 31;
    $1215 = (($$12577613) + -25)|0;
    $1216 = (($0) + ($1215<<2)|0);
    $1217 = HEAP32[$1216>>2]|0;
    $1218 = ($1217|0)<(0);
    $1219 = $1218 << 31 >> 31;
    $1220 = (___muldi3(($1217|0),($1219|0),($1212|0),($1214|0))|0);
    $1221 = (getTempRet0() | 0);
    $1224 = (_i64Add(($1220|0),($1221|0),($1222|0),($1223|0))|0);
    $1225 = (getTempRet0() | 0);
    $1236 = $1224;$1237 = $1225;
    label = 60;
   }
   if ((label|0) == 60) {
    label = 0;
    $1226 = HEAP32[$1095>>2]|0;
    $1227 = ($1226|0)<(0);
    $1228 = $1227 << 31 >> 31;
    $1229 = (($$12577613) + -24)|0;
    $1230 = (($0) + ($1229<<2)|0);
    $1231 = HEAP32[$1230>>2]|0;
    $1232 = ($1231|0)<(0);
    $1233 = $1232 << 31 >> 31;
    $1234 = (___muldi3(($1231|0),($1233|0),($1226|0),($1228|0))|0);
    $1235 = (getTempRet0() | 0);
    $1238 = (_i64Add(($1234|0),($1235|0),($1236|0),($1237|0))|0);
    $1239 = (getTempRet0() | 0);
    $1250 = $1238;$1251 = $1239;
    label = 61;
   }
   if ((label|0) == 61) {
    label = 0;
    $1240 = HEAP32[$1096>>2]|0;
    $1241 = ($1240|0)<(0);
    $1242 = $1241 << 31 >> 31;
    $1243 = (($$12577613) + -23)|0;
    $1244 = (($0) + ($1243<<2)|0);
    $1245 = HEAP32[$1244>>2]|0;
    $1246 = ($1245|0)<(0);
    $1247 = $1246 << 31 >> 31;
    $1248 = (___muldi3(($1245|0),($1247|0),($1240|0),($1242|0))|0);
    $1249 = (getTempRet0() | 0);
    $1252 = (_i64Add(($1248|0),($1249|0),($1250|0),($1251|0))|0);
    $1253 = (getTempRet0() | 0);
    $1264 = $1252;$1265 = $1253;
    label = 62;
   }
   if ((label|0) == 62) {
    label = 0;
    $1254 = HEAP32[$1097>>2]|0;
    $1255 = ($1254|0)<(0);
    $1256 = $1255 << 31 >> 31;
    $1257 = (($$12577613) + -22)|0;
    $1258 = (($0) + ($1257<<2)|0);
    $1259 = HEAP32[$1258>>2]|0;
    $1260 = ($1259|0)<(0);
    $1261 = $1260 << 31 >> 31;
    $1262 = (___muldi3(($1259|0),($1261|0),($1254|0),($1256|0))|0);
    $1263 = (getTempRet0() | 0);
    $1266 = (_i64Add(($1262|0),($1263|0),($1264|0),($1265|0))|0);
    $1267 = (getTempRet0() | 0);
    $1278 = $1266;$1279 = $1267;
    label = 63;
   }
   if ((label|0) == 63) {
    label = 0;
    $1268 = HEAP32[$1098>>2]|0;
    $1269 = ($1268|0)<(0);
    $1270 = $1269 << 31 >> 31;
    $1271 = (($$12577613) + -21)|0;
    $1272 = (($0) + ($1271<<2)|0);
    $1273 = HEAP32[$1272>>2]|0;
    $1274 = ($1273|0)<(0);
    $1275 = $1274 << 31 >> 31;
    $1276 = (___muldi3(($1273|0),($1275|0),($1268|0),($1270|0))|0);
    $1277 = (getTempRet0() | 0);
    $1280 = (_i64Add(($1276|0),($1277|0),($1278|0),($1279|0))|0);
    $1281 = (getTempRet0() | 0);
    $1292 = $1280;$1293 = $1281;
    label = 64;
   }
   if ((label|0) == 64) {
    label = 0;
    $1282 = HEAP32[$1099>>2]|0;
    $1283 = ($1282|0)<(0);
    $1284 = $1283 << 31 >> 31;
    $1285 = (($$12577613) + -20)|0;
    $1286 = (($0) + ($1285<<2)|0);
    $1287 = HEAP32[$1286>>2]|0;
    $1288 = ($1287|0)<(0);
    $1289 = $1288 << 31 >> 31;
    $1290 = (___muldi3(($1287|0),($1289|0),($1282|0),($1284|0))|0);
    $1291 = (getTempRet0() | 0);
    $1294 = (_i64Add(($1290|0),($1291|0),($1292|0),($1293|0))|0);
    $1295 = (getTempRet0() | 0);
    $1306 = $1294;$1307 = $1295;
    label = 65;
   }
   if ((label|0) == 65) {
    label = 0;
    $1296 = HEAP32[$1100>>2]|0;
    $1297 = ($1296|0)<(0);
    $1298 = $1297 << 31 >> 31;
    $1299 = (($$12577613) + -19)|0;
    $1300 = (($0) + ($1299<<2)|0);
    $1301 = HEAP32[$1300>>2]|0;
    $1302 = ($1301|0)<(0);
    $1303 = $1302 << 31 >> 31;
    $1304 = (___muldi3(($1301|0),($1303|0),($1296|0),($1298|0))|0);
    $1305 = (getTempRet0() | 0);
    $1308 = (_i64Add(($1304|0),($1305|0),($1306|0),($1307|0))|0);
    $1309 = (getTempRet0() | 0);
    $1320 = $1308;$1321 = $1309;
    label = 66;
   }
   if ((label|0) == 66) {
    label = 0;
    $1310 = HEAP32[$1101>>2]|0;
    $1311 = ($1310|0)<(0);
    $1312 = $1311 << 31 >> 31;
    $1313 = (($$12577613) + -18)|0;
    $1314 = (($0) + ($1313<<2)|0);
    $1315 = HEAP32[$1314>>2]|0;
    $1316 = ($1315|0)<(0);
    $1317 = $1316 << 31 >> 31;
    $1318 = (___muldi3(($1315|0),($1317|0),($1310|0),($1312|0))|0);
    $1319 = (getTempRet0() | 0);
    $1322 = (_i64Add(($1318|0),($1319|0),($1320|0),($1321|0))|0);
    $1323 = (getTempRet0() | 0);
    $1334 = $1322;$1335 = $1323;
    label = 67;
   }
   if ((label|0) == 67) {
    label = 0;
    $1324 = HEAP32[$1102>>2]|0;
    $1325 = ($1324|0)<(0);
    $1326 = $1325 << 31 >> 31;
    $1327 = (($$12577613) + -17)|0;
    $1328 = (($0) + ($1327<<2)|0);
    $1329 = HEAP32[$1328>>2]|0;
    $1330 = ($1329|0)<(0);
    $1331 = $1330 << 31 >> 31;
    $1332 = (___muldi3(($1329|0),($1331|0),($1324|0),($1326|0))|0);
    $1333 = (getTempRet0() | 0);
    $1336 = (_i64Add(($1332|0),($1333|0),($1334|0),($1335|0))|0);
    $1337 = (getTempRet0() | 0);
    $1348 = $1336;$1349 = $1337;
    label = 68;
   }
   if ((label|0) == 68) {
    label = 0;
    $1338 = HEAP32[$1103>>2]|0;
    $1339 = ($1338|0)<(0);
    $1340 = $1339 << 31 >> 31;
    $1341 = (($$12577613) + -16)|0;
    $1342 = (($0) + ($1341<<2)|0);
    $1343 = HEAP32[$1342>>2]|0;
    $1344 = ($1343|0)<(0);
    $1345 = $1344 << 31 >> 31;
    $1346 = (___muldi3(($1343|0),($1345|0),($1338|0),($1340|0))|0);
    $1347 = (getTempRet0() | 0);
    $1350 = (_i64Add(($1346|0),($1347|0),($1348|0),($1349|0))|0);
    $1351 = (getTempRet0() | 0);
    $1362 = $1350;$1363 = $1351;
    label = 69;
   }
   if ((label|0) == 69) {
    label = 0;
    $1352 = HEAP32[$1104>>2]|0;
    $1353 = ($1352|0)<(0);
    $1354 = $1353 << 31 >> 31;
    $1355 = (($$12577613) + -15)|0;
    $1356 = (($0) + ($1355<<2)|0);
    $1357 = HEAP32[$1356>>2]|0;
    $1358 = ($1357|0)<(0);
    $1359 = $1358 << 31 >> 31;
    $1360 = (___muldi3(($1357|0),($1359|0),($1352|0),($1354|0))|0);
    $1361 = (getTempRet0() | 0);
    $1364 = (_i64Add(($1360|0),($1361|0),($1362|0),($1363|0))|0);
    $1365 = (getTempRet0() | 0);
    $1376 = $1364;$1377 = $1365;
    label = 70;
   }
   if ((label|0) == 70) {
    label = 0;
    $1366 = HEAP32[$1105>>2]|0;
    $1367 = ($1366|0)<(0);
    $1368 = $1367 << 31 >> 31;
    $1369 = (($$12577613) + -14)|0;
    $1370 = (($0) + ($1369<<2)|0);
    $1371 = HEAP32[$1370>>2]|0;
    $1372 = ($1371|0)<(0);
    $1373 = $1372 << 31 >> 31;
    $1374 = (___muldi3(($1371|0),($1373|0),($1366|0),($1368|0))|0);
    $1375 = (getTempRet0() | 0);
    $1378 = (_i64Add(($1374|0),($1375|0),($1376|0),($1377|0))|0);
    $1379 = (getTempRet0() | 0);
    $1390 = $1378;$1391 = $1379;
    label = 71;
   }
   if ((label|0) == 71) {
    label = 0;
    $1380 = HEAP32[$1106>>2]|0;
    $1381 = ($1380|0)<(0);
    $1382 = $1381 << 31 >> 31;
    $1383 = (($$12577613) + -13)|0;
    $1384 = (($0) + ($1383<<2)|0);
    $1385 = HEAP32[$1384>>2]|0;
    $1386 = ($1385|0)<(0);
    $1387 = $1386 << 31 >> 31;
    $1388 = (___muldi3(($1385|0),($1387|0),($1380|0),($1382|0))|0);
    $1389 = (getTempRet0() | 0);
    $1392 = (_i64Add(($1388|0),($1389|0),($1390|0),($1391|0))|0);
    $1393 = (getTempRet0() | 0);
    $1394 = HEAP32[$1107>>2]|0;
    $1395 = ($1394|0)<(0);
    $1396 = $1395 << 31 >> 31;
    $1397 = (($$12577613) + -12)|0;
    $1398 = (($0) + ($1397<<2)|0);
    $1399 = HEAP32[$1398>>2]|0;
    $1400 = ($1399|0)<(0);
    $1401 = $1400 << 31 >> 31;
    $1402 = (___muldi3(($1399|0),($1401|0),($1394|0),($1396|0))|0);
    $1403 = (getTempRet0() | 0);
    $1404 = (_i64Add(($1392|0),($1393|0),($1402|0),($1403|0))|0);
    $1405 = (getTempRet0() | 0);
    $1406 = HEAP32[$1108>>2]|0;
    $1407 = ($1406|0)<(0);
    $1408 = $1407 << 31 >> 31;
    $1409 = (($$12577613) + -11)|0;
    $1410 = (($0) + ($1409<<2)|0);
    $1411 = HEAP32[$1410>>2]|0;
    $1412 = ($1411|0)<(0);
    $1413 = $1412 << 31 >> 31;
    $1414 = (___muldi3(($1411|0),($1413|0),($1406|0),($1408|0))|0);
    $1415 = (getTempRet0() | 0);
    $1416 = (_i64Add(($1404|0),($1405|0),($1414|0),($1415|0))|0);
    $1417 = (getTempRet0() | 0);
    $1418 = HEAP32[$1109>>2]|0;
    $1419 = ($1418|0)<(0);
    $1420 = $1419 << 31 >> 31;
    $1421 = (($$12577613) + -10)|0;
    $1422 = (($0) + ($1421<<2)|0);
    $1423 = HEAP32[$1422>>2]|0;
    $1424 = ($1423|0)<(0);
    $1425 = $1424 << 31 >> 31;
    $1426 = (___muldi3(($1423|0),($1425|0),($1418|0),($1420|0))|0);
    $1427 = (getTempRet0() | 0);
    $1428 = (_i64Add(($1416|0),($1417|0),($1426|0),($1427|0))|0);
    $1429 = (getTempRet0() | 0);
    $1430 = HEAP32[$1110>>2]|0;
    $1431 = ($1430|0)<(0);
    $1432 = $1431 << 31 >> 31;
    $1433 = (($$12577613) + -9)|0;
    $1434 = (($0) + ($1433<<2)|0);
    $1435 = HEAP32[$1434>>2]|0;
    $1436 = ($1435|0)<(0);
    $1437 = $1436 << 31 >> 31;
    $1438 = (___muldi3(($1435|0),($1437|0),($1430|0),($1432|0))|0);
    $1439 = (getTempRet0() | 0);
    $1440 = (_i64Add(($1428|0),($1429|0),($1438|0),($1439|0))|0);
    $1441 = (getTempRet0() | 0);
    $1442 = HEAP32[$1111>>2]|0;
    $1443 = ($1442|0)<(0);
    $1444 = $1443 << 31 >> 31;
    $1445 = (($$12577613) + -8)|0;
    $1446 = (($0) + ($1445<<2)|0);
    $1447 = HEAP32[$1446>>2]|0;
    $1448 = ($1447|0)<(0);
    $1449 = $1448 << 31 >> 31;
    $1450 = (___muldi3(($1447|0),($1449|0),($1442|0),($1444|0))|0);
    $1451 = (getTempRet0() | 0);
    $1452 = (_i64Add(($1440|0),($1441|0),($1450|0),($1451|0))|0);
    $1453 = (getTempRet0() | 0);
    $1454 = HEAP32[$1112>>2]|0;
    $1455 = ($1454|0)<(0);
    $1456 = $1455 << 31 >> 31;
    $1457 = (($$12577613) + -7)|0;
    $1458 = (($0) + ($1457<<2)|0);
    $1459 = HEAP32[$1458>>2]|0;
    $1460 = ($1459|0)<(0);
    $1461 = $1460 << 31 >> 31;
    $1462 = (___muldi3(($1459|0),($1461|0),($1454|0),($1456|0))|0);
    $1463 = (getTempRet0() | 0);
    $1464 = (_i64Add(($1452|0),($1453|0),($1462|0),($1463|0))|0);
    $1465 = (getTempRet0() | 0);
    $1466 = HEAP32[$1113>>2]|0;
    $1467 = ($1466|0)<(0);
    $1468 = $1467 << 31 >> 31;
    $1469 = (($$12577613) + -6)|0;
    $1470 = (($0) + ($1469<<2)|0);
    $1471 = HEAP32[$1470>>2]|0;
    $1472 = ($1471|0)<(0);
    $1473 = $1472 << 31 >> 31;
    $1474 = (___muldi3(($1471|0),($1473|0),($1466|0),($1468|0))|0);
    $1475 = (getTempRet0() | 0);
    $1476 = (_i64Add(($1464|0),($1465|0),($1474|0),($1475|0))|0);
    $1477 = (getTempRet0() | 0);
    $1478 = HEAP32[$1114>>2]|0;
    $1479 = ($1478|0)<(0);
    $1480 = $1479 << 31 >> 31;
    $1481 = (($$12577613) + -5)|0;
    $1482 = (($0) + ($1481<<2)|0);
    $1483 = HEAP32[$1482>>2]|0;
    $1484 = ($1483|0)<(0);
    $1485 = $1484 << 31 >> 31;
    $1486 = (___muldi3(($1483|0),($1485|0),($1478|0),($1480|0))|0);
    $1487 = (getTempRet0() | 0);
    $1488 = (_i64Add(($1476|0),($1477|0),($1486|0),($1487|0))|0);
    $1489 = (getTempRet0() | 0);
    $1490 = HEAP32[$1115>>2]|0;
    $1491 = ($1490|0)<(0);
    $1492 = $1491 << 31 >> 31;
    $1493 = (($$12577613) + -4)|0;
    $1494 = (($0) + ($1493<<2)|0);
    $1495 = HEAP32[$1494>>2]|0;
    $1496 = ($1495|0)<(0);
    $1497 = $1496 << 31 >> 31;
    $1498 = (___muldi3(($1495|0),($1497|0),($1490|0),($1492|0))|0);
    $1499 = (getTempRet0() | 0);
    $1500 = (_i64Add(($1488|0),($1489|0),($1498|0),($1499|0))|0);
    $1501 = (getTempRet0() | 0);
    $1502 = HEAP32[$1116>>2]|0;
    $1503 = ($1502|0)<(0);
    $1504 = $1503 << 31 >> 31;
    $1505 = (($$12577613) + -3)|0;
    $1506 = (($0) + ($1505<<2)|0);
    $1507 = HEAP32[$1506>>2]|0;
    $1508 = ($1507|0)<(0);
    $1509 = $1508 << 31 >> 31;
    $1510 = (___muldi3(($1507|0),($1509|0),($1502|0),($1504|0))|0);
    $1511 = (getTempRet0() | 0);
    $1512 = (_i64Add(($1500|0),($1501|0),($1510|0),($1511|0))|0);
    $1513 = (getTempRet0() | 0);
    $1514 = HEAP32[$1117>>2]|0;
    $1515 = ($1514|0)<(0);
    $1516 = $1515 << 31 >> 31;
    $1517 = (($$12577613) + -2)|0;
    $1518 = (($0) + ($1517<<2)|0);
    $1519 = HEAP32[$1518>>2]|0;
    $1520 = ($1519|0)<(0);
    $1521 = $1520 << 31 >> 31;
    $1522 = (___muldi3(($1519|0),($1521|0),($1514|0),($1516|0))|0);
    $1523 = (getTempRet0() | 0);
    $1524 = (_i64Add(($1512|0),($1513|0),($1522|0),($1523|0))|0);
    $1525 = (getTempRet0() | 0);
    $1526 = HEAP32[$2>>2]|0;
    $1527 = ($1526|0)<(0);
    $1528 = $1527 << 31 >> 31;
    $1529 = (($$12577613) + -1)|0;
    $1530 = (($0) + ($1529<<2)|0);
    $1531 = HEAP32[$1530>>2]|0;
    $1532 = ($1531|0)<(0);
    $1533 = $1532 << 31 >> 31;
    $1534 = (___muldi3(($1531|0),($1533|0),($1526|0),($1528|0))|0);
    $1535 = (getTempRet0() | 0);
    $1536 = (_i64Add(($1524|0),($1525|0),($1534|0),($1535|0))|0);
    $1537 = (getTempRet0() | 0);
    $1540 = $1536;$1541 = $1537;
   }
   $1538 = (($0) + ($$12577613<<2)|0);
   $1539 = HEAP32[$1538>>2]|0;
   $1542 = (_bitshift64Ashr(($1540|0),($1541|0),($4|0))|0);
   $1543 = (getTempRet0() | 0);
   $1544 = (($1539) - ($1542))|0;
   $1545 = (($5) + ($$12577613<<2)|0);
   HEAP32[$1545>>2] = $1544;
   $1546 = (($$12577613) + 1)|0;
   $exitcond657 = ($1546|0)==($1|0);
   if ($exitcond657) {
    break;
   } else {
    $$12577613 = $1546;
   }
  }
  return;
 }
 $7 = ($3>>>0)>(8);
 if ($7) {
  $8 = ($3>>>0)>(10);
  if ($8) {
   $9 = ($3|0)==(12);
   $10 = ($1|0)>(0);
   if ($9) {
    if (!($10)) {
     return;
    }
    $11 = ((($2)) + 44|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)<(0);
    $14 = $13 << 31 >> 31;
    $15 = ((($2)) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)<(0);
    $18 = $17 << 31 >> 31;
    $19 = ((($2)) + 36|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)<(0);
    $22 = $21 << 31 >> 31;
    $23 = ((($2)) + 32|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)<(0);
    $26 = $25 << 31 >> 31;
    $27 = ((($2)) + 28|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($28|0)<(0);
    $30 = $29 << 31 >> 31;
    $31 = ((($2)) + 24|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ($32|0)<(0);
    $34 = $33 << 31 >> 31;
    $35 = ((($2)) + 20|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($36|0)<(0);
    $38 = $37 << 31 >> 31;
    $39 = ((($2)) + 16|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ($40|0)<(0);
    $42 = $41 << 31 >> 31;
    $43 = ((($2)) + 12|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ($44|0)<(0);
    $46 = $45 << 31 >> 31;
    $47 = ((($2)) + 8|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($48|0)<(0);
    $50 = $49 << 31 >> 31;
    $51 = ((($2)) + 4|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ($52|0)<(0);
    $54 = $53 << 31 >> 31;
    $55 = HEAP32[$2>>2]|0;
    $56 = ($55|0)<(0);
    $57 = $56 << 31 >> 31;
    $$0565590 = 0;
    while(1) {
     $58 = (($$0565590) + -12)|0;
     $59 = (($0) + ($58<<2)|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)<(0);
     $62 = $61 << 31 >> 31;
     $63 = (___muldi3(($60|0),($62|0),($12|0),($14|0))|0);
     $64 = (getTempRet0() | 0);
     $65 = (($$0565590) + -11)|0;
     $66 = (($0) + ($65<<2)|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ($67|0)<(0);
     $69 = $68 << 31 >> 31;
     $70 = (___muldi3(($67|0),($69|0),($16|0),($18|0))|0);
     $71 = (getTempRet0() | 0);
     $72 = (_i64Add(($70|0),($71|0),($63|0),($64|0))|0);
     $73 = (getTempRet0() | 0);
     $74 = (($$0565590) + -10)|0;
     $75 = (($0) + ($74<<2)|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = ($76|0)<(0);
     $78 = $77 << 31 >> 31;
     $79 = (___muldi3(($76|0),($78|0),($20|0),($22|0))|0);
     $80 = (getTempRet0() | 0);
     $81 = (_i64Add(($72|0),($73|0),($79|0),($80|0))|0);
     $82 = (getTempRet0() | 0);
     $83 = (($$0565590) + -9)|0;
     $84 = (($0) + ($83<<2)|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = (___muldi3(($85|0),($87|0),($24|0),($26|0))|0);
     $89 = (getTempRet0() | 0);
     $90 = (_i64Add(($81|0),($82|0),($88|0),($89|0))|0);
     $91 = (getTempRet0() | 0);
     $92 = (($$0565590) + -8)|0;
     $93 = (($0) + ($92<<2)|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = ($94|0)<(0);
     $96 = $95 << 31 >> 31;
     $97 = (___muldi3(($94|0),($96|0),($28|0),($30|0))|0);
     $98 = (getTempRet0() | 0);
     $99 = (_i64Add(($90|0),($91|0),($97|0),($98|0))|0);
     $100 = (getTempRet0() | 0);
     $101 = (($$0565590) + -7)|0;
     $102 = (($0) + ($101<<2)|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = ($103|0)<(0);
     $105 = $104 << 31 >> 31;
     $106 = (___muldi3(($103|0),($105|0),($32|0),($34|0))|0);
     $107 = (getTempRet0() | 0);
     $108 = (_i64Add(($99|0),($100|0),($106|0),($107|0))|0);
     $109 = (getTempRet0() | 0);
     $110 = (($$0565590) + -6)|0;
     $111 = (($0) + ($110<<2)|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112|0)<(0);
     $114 = $113 << 31 >> 31;
     $115 = (___muldi3(($112|0),($114|0),($36|0),($38|0))|0);
     $116 = (getTempRet0() | 0);
     $117 = (_i64Add(($108|0),($109|0),($115|0),($116|0))|0);
     $118 = (getTempRet0() | 0);
     $119 = (($$0565590) + -5)|0;
     $120 = (($0) + ($119<<2)|0);
     $121 = HEAP32[$120>>2]|0;
     $122 = ($121|0)<(0);
     $123 = $122 << 31 >> 31;
     $124 = (___muldi3(($121|0),($123|0),($40|0),($42|0))|0);
     $125 = (getTempRet0() | 0);
     $126 = (_i64Add(($117|0),($118|0),($124|0),($125|0))|0);
     $127 = (getTempRet0() | 0);
     $128 = (($$0565590) + -4)|0;
     $129 = (($0) + ($128<<2)|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($130|0)<(0);
     $132 = $131 << 31 >> 31;
     $133 = (___muldi3(($130|0),($132|0),($44|0),($46|0))|0);
     $134 = (getTempRet0() | 0);
     $135 = (_i64Add(($126|0),($127|0),($133|0),($134|0))|0);
     $136 = (getTempRet0() | 0);
     $137 = (($$0565590) + -3)|0;
     $138 = (($0) + ($137<<2)|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = ($139|0)<(0);
     $141 = $140 << 31 >> 31;
     $142 = (___muldi3(($139|0),($141|0),($48|0),($50|0))|0);
     $143 = (getTempRet0() | 0);
     $144 = (_i64Add(($135|0),($136|0),($142|0),($143|0))|0);
     $145 = (getTempRet0() | 0);
     $146 = (($$0565590) + -2)|0;
     $147 = (($0) + ($146<<2)|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)<(0);
     $150 = $149 << 31 >> 31;
     $151 = (___muldi3(($148|0),($150|0),($52|0),($54|0))|0);
     $152 = (getTempRet0() | 0);
     $153 = (_i64Add(($144|0),($145|0),($151|0),($152|0))|0);
     $154 = (getTempRet0() | 0);
     $155 = (($$0565590) + -1)|0;
     $156 = (($0) + ($155<<2)|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)<(0);
     $159 = $158 << 31 >> 31;
     $160 = (___muldi3(($157|0),($159|0),($55|0),($57|0))|0);
     $161 = (getTempRet0() | 0);
     $162 = (_i64Add(($153|0),($154|0),($160|0),($161|0))|0);
     $163 = (getTempRet0() | 0);
     $164 = (($0) + ($$0565590<<2)|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = (_bitshift64Ashr(($162|0),($163|0),($4|0))|0);
     $167 = (getTempRet0() | 0);
     $168 = (($165) - ($166))|0;
     $169 = (($5) + ($$0565590<<2)|0);
     HEAP32[$169>>2] = $168;
     $170 = (($$0565590) + 1)|0;
     $exitcond = ($170|0)==($1|0);
     if ($exitcond) {
      break;
     } else {
      $$0565590 = $170;
     }
    }
    return;
   } else {
    if (!($10)) {
     return;
    }
    $171 = ((($2)) + 40|0);
    $172 = HEAP32[$171>>2]|0;
    $173 = ($172|0)<(0);
    $174 = $173 << 31 >> 31;
    $175 = ((($2)) + 36|0);
    $176 = HEAP32[$175>>2]|0;
    $177 = ($176|0)<(0);
    $178 = $177 << 31 >> 31;
    $179 = ((($2)) + 32|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = ($180|0)<(0);
    $182 = $181 << 31 >> 31;
    $183 = ((($2)) + 28|0);
    $184 = HEAP32[$183>>2]|0;
    $185 = ($184|0)<(0);
    $186 = $185 << 31 >> 31;
    $187 = ((($2)) + 24|0);
    $188 = HEAP32[$187>>2]|0;
    $189 = ($188|0)<(0);
    $190 = $189 << 31 >> 31;
    $191 = ((($2)) + 20|0);
    $192 = HEAP32[$191>>2]|0;
    $193 = ($192|0)<(0);
    $194 = $193 << 31 >> 31;
    $195 = ((($2)) + 16|0);
    $196 = HEAP32[$195>>2]|0;
    $197 = ($196|0)<(0);
    $198 = $197 << 31 >> 31;
    $199 = ((($2)) + 12|0);
    $200 = HEAP32[$199>>2]|0;
    $201 = ($200|0)<(0);
    $202 = $201 << 31 >> 31;
    $203 = ((($2)) + 8|0);
    $204 = HEAP32[$203>>2]|0;
    $205 = ($204|0)<(0);
    $206 = $205 << 31 >> 31;
    $207 = ((($2)) + 4|0);
    $208 = HEAP32[$207>>2]|0;
    $209 = ($208|0)<(0);
    $210 = $209 << 31 >> 31;
    $211 = HEAP32[$2>>2]|0;
    $212 = ($211|0)<(0);
    $213 = $212 << 31 >> 31;
    $$1566591 = 0;
    while(1) {
     $214 = (($$1566591) + -11)|0;
     $215 = (($0) + ($214<<2)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)<(0);
     $218 = $217 << 31 >> 31;
     $219 = (___muldi3(($216|0),($218|0),($172|0),($174|0))|0);
     $220 = (getTempRet0() | 0);
     $221 = (($$1566591) + -10)|0;
     $222 = (($0) + ($221<<2)|0);
     $223 = HEAP32[$222>>2]|0;
     $224 = ($223|0)<(0);
     $225 = $224 << 31 >> 31;
     $226 = (___muldi3(($223|0),($225|0),($176|0),($178|0))|0);
     $227 = (getTempRet0() | 0);
     $228 = (_i64Add(($226|0),($227|0),($219|0),($220|0))|0);
     $229 = (getTempRet0() | 0);
     $230 = (($$1566591) + -9)|0;
     $231 = (($0) + ($230<<2)|0);
     $232 = HEAP32[$231>>2]|0;
     $233 = ($232|0)<(0);
     $234 = $233 << 31 >> 31;
     $235 = (___muldi3(($232|0),($234|0),($180|0),($182|0))|0);
     $236 = (getTempRet0() | 0);
     $237 = (_i64Add(($228|0),($229|0),($235|0),($236|0))|0);
     $238 = (getTempRet0() | 0);
     $239 = (($$1566591) + -8)|0;
     $240 = (($0) + ($239<<2)|0);
     $241 = HEAP32[$240>>2]|0;
     $242 = ($241|0)<(0);
     $243 = $242 << 31 >> 31;
     $244 = (___muldi3(($241|0),($243|0),($184|0),($186|0))|0);
     $245 = (getTempRet0() | 0);
     $246 = (_i64Add(($237|0),($238|0),($244|0),($245|0))|0);
     $247 = (getTempRet0() | 0);
     $248 = (($$1566591) + -7)|0;
     $249 = (($0) + ($248<<2)|0);
     $250 = HEAP32[$249>>2]|0;
     $251 = ($250|0)<(0);
     $252 = $251 << 31 >> 31;
     $253 = (___muldi3(($250|0),($252|0),($188|0),($190|0))|0);
     $254 = (getTempRet0() | 0);
     $255 = (_i64Add(($246|0),($247|0),($253|0),($254|0))|0);
     $256 = (getTempRet0() | 0);
     $257 = (($$1566591) + -6)|0;
     $258 = (($0) + ($257<<2)|0);
     $259 = HEAP32[$258>>2]|0;
     $260 = ($259|0)<(0);
     $261 = $260 << 31 >> 31;
     $262 = (___muldi3(($259|0),($261|0),($192|0),($194|0))|0);
     $263 = (getTempRet0() | 0);
     $264 = (_i64Add(($255|0),($256|0),($262|0),($263|0))|0);
     $265 = (getTempRet0() | 0);
     $266 = (($$1566591) + -5)|0;
     $267 = (($0) + ($266<<2)|0);
     $268 = HEAP32[$267>>2]|0;
     $269 = ($268|0)<(0);
     $270 = $269 << 31 >> 31;
     $271 = (___muldi3(($268|0),($270|0),($196|0),($198|0))|0);
     $272 = (getTempRet0() | 0);
     $273 = (_i64Add(($264|0),($265|0),($271|0),($272|0))|0);
     $274 = (getTempRet0() | 0);
     $275 = (($$1566591) + -4)|0;
     $276 = (($0) + ($275<<2)|0);
     $277 = HEAP32[$276>>2]|0;
     $278 = ($277|0)<(0);
     $279 = $278 << 31 >> 31;
     $280 = (___muldi3(($277|0),($279|0),($200|0),($202|0))|0);
     $281 = (getTempRet0() | 0);
     $282 = (_i64Add(($273|0),($274|0),($280|0),($281|0))|0);
     $283 = (getTempRet0() | 0);
     $284 = (($$1566591) + -3)|0;
     $285 = (($0) + ($284<<2)|0);
     $286 = HEAP32[$285>>2]|0;
     $287 = ($286|0)<(0);
     $288 = $287 << 31 >> 31;
     $289 = (___muldi3(($286|0),($288|0),($204|0),($206|0))|0);
     $290 = (getTempRet0() | 0);
     $291 = (_i64Add(($282|0),($283|0),($289|0),($290|0))|0);
     $292 = (getTempRet0() | 0);
     $293 = (($$1566591) + -2)|0;
     $294 = (($0) + ($293<<2)|0);
     $295 = HEAP32[$294>>2]|0;
     $296 = ($295|0)<(0);
     $297 = $296 << 31 >> 31;
     $298 = (___muldi3(($295|0),($297|0),($208|0),($210|0))|0);
     $299 = (getTempRet0() | 0);
     $300 = (_i64Add(($291|0),($292|0),($298|0),($299|0))|0);
     $301 = (getTempRet0() | 0);
     $302 = (($$1566591) + -1)|0;
     $303 = (($0) + ($302<<2)|0);
     $304 = HEAP32[$303>>2]|0;
     $305 = ($304|0)<(0);
     $306 = $305 << 31 >> 31;
     $307 = (___muldi3(($304|0),($306|0),($211|0),($213|0))|0);
     $308 = (getTempRet0() | 0);
     $309 = (_i64Add(($300|0),($301|0),($307|0),($308|0))|0);
     $310 = (getTempRet0() | 0);
     $311 = (($0) + ($$1566591<<2)|0);
     $312 = HEAP32[$311>>2]|0;
     $313 = (_bitshift64Ashr(($309|0),($310|0),($4|0))|0);
     $314 = (getTempRet0() | 0);
     $315 = (($312) - ($313))|0;
     $316 = (($5) + ($$1566591<<2)|0);
     HEAP32[$316>>2] = $315;
     $317 = (($$1566591) + 1)|0;
     $exitcond646 = ($317|0)==($1|0);
     if ($exitcond646) {
      break;
     } else {
      $$1566591 = $317;
     }
    }
    return;
   }
  } else {
   $318 = ($3|0)==(10);
   $319 = ($1|0)>(0);
   if ($318) {
    if (!($319)) {
     return;
    }
    $320 = ((($2)) + 36|0);
    $321 = HEAP32[$320>>2]|0;
    $322 = ($321|0)<(0);
    $323 = $322 << 31 >> 31;
    $324 = ((($2)) + 32|0);
    $325 = HEAP32[$324>>2]|0;
    $326 = ($325|0)<(0);
    $327 = $326 << 31 >> 31;
    $328 = ((($2)) + 28|0);
    $329 = HEAP32[$328>>2]|0;
    $330 = ($329|0)<(0);
    $331 = $330 << 31 >> 31;
    $332 = ((($2)) + 24|0);
    $333 = HEAP32[$332>>2]|0;
    $334 = ($333|0)<(0);
    $335 = $334 << 31 >> 31;
    $336 = ((($2)) + 20|0);
    $337 = HEAP32[$336>>2]|0;
    $338 = ($337|0)<(0);
    $339 = $338 << 31 >> 31;
    $340 = ((($2)) + 16|0);
    $341 = HEAP32[$340>>2]|0;
    $342 = ($341|0)<(0);
    $343 = $342 << 31 >> 31;
    $344 = ((($2)) + 12|0);
    $345 = HEAP32[$344>>2]|0;
    $346 = ($345|0)<(0);
    $347 = $346 << 31 >> 31;
    $348 = ((($2)) + 8|0);
    $349 = HEAP32[$348>>2]|0;
    $350 = ($349|0)<(0);
    $351 = $350 << 31 >> 31;
    $352 = ((($2)) + 4|0);
    $353 = HEAP32[$352>>2]|0;
    $354 = ($353|0)<(0);
    $355 = $354 << 31 >> 31;
    $356 = HEAP32[$2>>2]|0;
    $357 = ($356|0)<(0);
    $358 = $357 << 31 >> 31;
    $$2567593 = 0;
    while(1) {
     $359 = (($$2567593) + -10)|0;
     $360 = (($0) + ($359<<2)|0);
     $361 = HEAP32[$360>>2]|0;
     $362 = ($361|0)<(0);
     $363 = $362 << 31 >> 31;
     $364 = (___muldi3(($361|0),($363|0),($321|0),($323|0))|0);
     $365 = (getTempRet0() | 0);
     $366 = (($$2567593) + -9)|0;
     $367 = (($0) + ($366<<2)|0);
     $368 = HEAP32[$367>>2]|0;
     $369 = ($368|0)<(0);
     $370 = $369 << 31 >> 31;
     $371 = (___muldi3(($368|0),($370|0),($325|0),($327|0))|0);
     $372 = (getTempRet0() | 0);
     $373 = (_i64Add(($371|0),($372|0),($364|0),($365|0))|0);
     $374 = (getTempRet0() | 0);
     $375 = (($$2567593) + -8)|0;
     $376 = (($0) + ($375<<2)|0);
     $377 = HEAP32[$376>>2]|0;
     $378 = ($377|0)<(0);
     $379 = $378 << 31 >> 31;
     $380 = (___muldi3(($377|0),($379|0),($329|0),($331|0))|0);
     $381 = (getTempRet0() | 0);
     $382 = (_i64Add(($373|0),($374|0),($380|0),($381|0))|0);
     $383 = (getTempRet0() | 0);
     $384 = (($$2567593) + -7)|0;
     $385 = (($0) + ($384<<2)|0);
     $386 = HEAP32[$385>>2]|0;
     $387 = ($386|0)<(0);
     $388 = $387 << 31 >> 31;
     $389 = (___muldi3(($386|0),($388|0),($333|0),($335|0))|0);
     $390 = (getTempRet0() | 0);
     $391 = (_i64Add(($382|0),($383|0),($389|0),($390|0))|0);
     $392 = (getTempRet0() | 0);
     $393 = (($$2567593) + -6)|0;
     $394 = (($0) + ($393<<2)|0);
     $395 = HEAP32[$394>>2]|0;
     $396 = ($395|0)<(0);
     $397 = $396 << 31 >> 31;
     $398 = (___muldi3(($395|0),($397|0),($337|0),($339|0))|0);
     $399 = (getTempRet0() | 0);
     $400 = (_i64Add(($391|0),($392|0),($398|0),($399|0))|0);
     $401 = (getTempRet0() | 0);
     $402 = (($$2567593) + -5)|0;
     $403 = (($0) + ($402<<2)|0);
     $404 = HEAP32[$403>>2]|0;
     $405 = ($404|0)<(0);
     $406 = $405 << 31 >> 31;
     $407 = (___muldi3(($404|0),($406|0),($341|0),($343|0))|0);
     $408 = (getTempRet0() | 0);
     $409 = (_i64Add(($400|0),($401|0),($407|0),($408|0))|0);
     $410 = (getTempRet0() | 0);
     $411 = (($$2567593) + -4)|0;
     $412 = (($0) + ($411<<2)|0);
     $413 = HEAP32[$412>>2]|0;
     $414 = ($413|0)<(0);
     $415 = $414 << 31 >> 31;
     $416 = (___muldi3(($413|0),($415|0),($345|0),($347|0))|0);
     $417 = (getTempRet0() | 0);
     $418 = (_i64Add(($409|0),($410|0),($416|0),($417|0))|0);
     $419 = (getTempRet0() | 0);
     $420 = (($$2567593) + -3)|0;
     $421 = (($0) + ($420<<2)|0);
     $422 = HEAP32[$421>>2]|0;
     $423 = ($422|0)<(0);
     $424 = $423 << 31 >> 31;
     $425 = (___muldi3(($422|0),($424|0),($349|0),($351|0))|0);
     $426 = (getTempRet0() | 0);
     $427 = (_i64Add(($418|0),($419|0),($425|0),($426|0))|0);
     $428 = (getTempRet0() | 0);
     $429 = (($$2567593) + -2)|0;
     $430 = (($0) + ($429<<2)|0);
     $431 = HEAP32[$430>>2]|0;
     $432 = ($431|0)<(0);
     $433 = $432 << 31 >> 31;
     $434 = (___muldi3(($431|0),($433|0),($353|0),($355|0))|0);
     $435 = (getTempRet0() | 0);
     $436 = (_i64Add(($427|0),($428|0),($434|0),($435|0))|0);
     $437 = (getTempRet0() | 0);
     $438 = (($$2567593) + -1)|0;
     $439 = (($0) + ($438<<2)|0);
     $440 = HEAP32[$439>>2]|0;
     $441 = ($440|0)<(0);
     $442 = $441 << 31 >> 31;
     $443 = (___muldi3(($440|0),($442|0),($356|0),($358|0))|0);
     $444 = (getTempRet0() | 0);
     $445 = (_i64Add(($436|0),($437|0),($443|0),($444|0))|0);
     $446 = (getTempRet0() | 0);
     $447 = (($0) + ($$2567593<<2)|0);
     $448 = HEAP32[$447>>2]|0;
     $449 = (_bitshift64Ashr(($445|0),($446|0),($4|0))|0);
     $450 = (getTempRet0() | 0);
     $451 = (($448) - ($449))|0;
     $452 = (($5) + ($$2567593<<2)|0);
     HEAP32[$452>>2] = $451;
     $453 = (($$2567593) + 1)|0;
     $exitcond647 = ($453|0)==($1|0);
     if ($exitcond647) {
      break;
     } else {
      $$2567593 = $453;
     }
    }
    return;
   } else {
    if (!($319)) {
     return;
    }
    $454 = ((($2)) + 32|0);
    $455 = HEAP32[$454>>2]|0;
    $456 = ($455|0)<(0);
    $457 = $456 << 31 >> 31;
    $458 = ((($2)) + 28|0);
    $459 = HEAP32[$458>>2]|0;
    $460 = ($459|0)<(0);
    $461 = $460 << 31 >> 31;
    $462 = ((($2)) + 24|0);
    $463 = HEAP32[$462>>2]|0;
    $464 = ($463|0)<(0);
    $465 = $464 << 31 >> 31;
    $466 = ((($2)) + 20|0);
    $467 = HEAP32[$466>>2]|0;
    $468 = ($467|0)<(0);
    $469 = $468 << 31 >> 31;
    $470 = ((($2)) + 16|0);
    $471 = HEAP32[$470>>2]|0;
    $472 = ($471|0)<(0);
    $473 = $472 << 31 >> 31;
    $474 = ((($2)) + 12|0);
    $475 = HEAP32[$474>>2]|0;
    $476 = ($475|0)<(0);
    $477 = $476 << 31 >> 31;
    $478 = ((($2)) + 8|0);
    $479 = HEAP32[$478>>2]|0;
    $480 = ($479|0)<(0);
    $481 = $480 << 31 >> 31;
    $482 = ((($2)) + 4|0);
    $483 = HEAP32[$482>>2]|0;
    $484 = ($483|0)<(0);
    $485 = $484 << 31 >> 31;
    $486 = HEAP32[$2>>2]|0;
    $487 = ($486|0)<(0);
    $488 = $487 << 31 >> 31;
    $$3568595 = 0;
    while(1) {
     $489 = (($$3568595) + -9)|0;
     $490 = (($0) + ($489<<2)|0);
     $491 = HEAP32[$490>>2]|0;
     $492 = ($491|0)<(0);
     $493 = $492 << 31 >> 31;
     $494 = (___muldi3(($491|0),($493|0),($455|0),($457|0))|0);
     $495 = (getTempRet0() | 0);
     $496 = (($$3568595) + -8)|0;
     $497 = (($0) + ($496<<2)|0);
     $498 = HEAP32[$497>>2]|0;
     $499 = ($498|0)<(0);
     $500 = $499 << 31 >> 31;
     $501 = (___muldi3(($498|0),($500|0),($459|0),($461|0))|0);
     $502 = (getTempRet0() | 0);
     $503 = (_i64Add(($501|0),($502|0),($494|0),($495|0))|0);
     $504 = (getTempRet0() | 0);
     $505 = (($$3568595) + -7)|0;
     $506 = (($0) + ($505<<2)|0);
     $507 = HEAP32[$506>>2]|0;
     $508 = ($507|0)<(0);
     $509 = $508 << 31 >> 31;
     $510 = (___muldi3(($507|0),($509|0),($463|0),($465|0))|0);
     $511 = (getTempRet0() | 0);
     $512 = (_i64Add(($503|0),($504|0),($510|0),($511|0))|0);
     $513 = (getTempRet0() | 0);
     $514 = (($$3568595) + -6)|0;
     $515 = (($0) + ($514<<2)|0);
     $516 = HEAP32[$515>>2]|0;
     $517 = ($516|0)<(0);
     $518 = $517 << 31 >> 31;
     $519 = (___muldi3(($516|0),($518|0),($467|0),($469|0))|0);
     $520 = (getTempRet0() | 0);
     $521 = (_i64Add(($512|0),($513|0),($519|0),($520|0))|0);
     $522 = (getTempRet0() | 0);
     $523 = (($$3568595) + -5)|0;
     $524 = (($0) + ($523<<2)|0);
     $525 = HEAP32[$524>>2]|0;
     $526 = ($525|0)<(0);
     $527 = $526 << 31 >> 31;
     $528 = (___muldi3(($525|0),($527|0),($471|0),($473|0))|0);
     $529 = (getTempRet0() | 0);
     $530 = (_i64Add(($521|0),($522|0),($528|0),($529|0))|0);
     $531 = (getTempRet0() | 0);
     $532 = (($$3568595) + -4)|0;
     $533 = (($0) + ($532<<2)|0);
     $534 = HEAP32[$533>>2]|0;
     $535 = ($534|0)<(0);
     $536 = $535 << 31 >> 31;
     $537 = (___muldi3(($534|0),($536|0),($475|0),($477|0))|0);
     $538 = (getTempRet0() | 0);
     $539 = (_i64Add(($530|0),($531|0),($537|0),($538|0))|0);
     $540 = (getTempRet0() | 0);
     $541 = (($$3568595) + -3)|0;
     $542 = (($0) + ($541<<2)|0);
     $543 = HEAP32[$542>>2]|0;
     $544 = ($543|0)<(0);
     $545 = $544 << 31 >> 31;
     $546 = (___muldi3(($543|0),($545|0),($479|0),($481|0))|0);
     $547 = (getTempRet0() | 0);
     $548 = (_i64Add(($539|0),($540|0),($546|0),($547|0))|0);
     $549 = (getTempRet0() | 0);
     $550 = (($$3568595) + -2)|0;
     $551 = (($0) + ($550<<2)|0);
     $552 = HEAP32[$551>>2]|0;
     $553 = ($552|0)<(0);
     $554 = $553 << 31 >> 31;
     $555 = (___muldi3(($552|0),($554|0),($483|0),($485|0))|0);
     $556 = (getTempRet0() | 0);
     $557 = (_i64Add(($548|0),($549|0),($555|0),($556|0))|0);
     $558 = (getTempRet0() | 0);
     $559 = (($$3568595) + -1)|0;
     $560 = (($0) + ($559<<2)|0);
     $561 = HEAP32[$560>>2]|0;
     $562 = ($561|0)<(0);
     $563 = $562 << 31 >> 31;
     $564 = (___muldi3(($561|0),($563|0),($486|0),($488|0))|0);
     $565 = (getTempRet0() | 0);
     $566 = (_i64Add(($557|0),($558|0),($564|0),($565|0))|0);
     $567 = (getTempRet0() | 0);
     $568 = (($0) + ($$3568595<<2)|0);
     $569 = HEAP32[$568>>2]|0;
     $570 = (_bitshift64Ashr(($566|0),($567|0),($4|0))|0);
     $571 = (getTempRet0() | 0);
     $572 = (($569) - ($570))|0;
     $573 = (($5) + ($$3568595<<2)|0);
     HEAP32[$573>>2] = $572;
     $574 = (($$3568595) + 1)|0;
     $exitcond648 = ($574|0)==($1|0);
     if ($exitcond648) {
      break;
     } else {
      $$3568595 = $574;
     }
    }
    return;
   }
  }
 }
 $575 = ($3>>>0)>(4);
 if ($575) {
  $576 = ($3>>>0)>(6);
  if ($576) {
   $577 = ($3|0)==(8);
   $578 = ($1|0)>(0);
   if ($577) {
    if (!($578)) {
     return;
    }
    $579 = ((($2)) + 28|0);
    $580 = HEAP32[$579>>2]|0;
    $581 = ($580|0)<(0);
    $582 = $581 << 31 >> 31;
    $583 = ((($2)) + 24|0);
    $584 = HEAP32[$583>>2]|0;
    $585 = ($584|0)<(0);
    $586 = $585 << 31 >> 31;
    $587 = ((($2)) + 20|0);
    $588 = HEAP32[$587>>2]|0;
    $589 = ($588|0)<(0);
    $590 = $589 << 31 >> 31;
    $591 = ((($2)) + 16|0);
    $592 = HEAP32[$591>>2]|0;
    $593 = ($592|0)<(0);
    $594 = $593 << 31 >> 31;
    $595 = ((($2)) + 12|0);
    $596 = HEAP32[$595>>2]|0;
    $597 = ($596|0)<(0);
    $598 = $597 << 31 >> 31;
    $599 = ((($2)) + 8|0);
    $600 = HEAP32[$599>>2]|0;
    $601 = ($600|0)<(0);
    $602 = $601 << 31 >> 31;
    $603 = ((($2)) + 4|0);
    $604 = HEAP32[$603>>2]|0;
    $605 = ($604|0)<(0);
    $606 = $605 << 31 >> 31;
    $607 = HEAP32[$2>>2]|0;
    $608 = ($607|0)<(0);
    $609 = $608 << 31 >> 31;
    $$4569597 = 0;
    while(1) {
     $610 = (($$4569597) + -8)|0;
     $611 = (($0) + ($610<<2)|0);
     $612 = HEAP32[$611>>2]|0;
     $613 = ($612|0)<(0);
     $614 = $613 << 31 >> 31;
     $615 = (___muldi3(($612|0),($614|0),($580|0),($582|0))|0);
     $616 = (getTempRet0() | 0);
     $617 = (($$4569597) + -7)|0;
     $618 = (($0) + ($617<<2)|0);
     $619 = HEAP32[$618>>2]|0;
     $620 = ($619|0)<(0);
     $621 = $620 << 31 >> 31;
     $622 = (___muldi3(($619|0),($621|0),($584|0),($586|0))|0);
     $623 = (getTempRet0() | 0);
     $624 = (_i64Add(($622|0),($623|0),($615|0),($616|0))|0);
     $625 = (getTempRet0() | 0);
     $626 = (($$4569597) + -6)|0;
     $627 = (($0) + ($626<<2)|0);
     $628 = HEAP32[$627>>2]|0;
     $629 = ($628|0)<(0);
     $630 = $629 << 31 >> 31;
     $631 = (___muldi3(($628|0),($630|0),($588|0),($590|0))|0);
     $632 = (getTempRet0() | 0);
     $633 = (_i64Add(($624|0),($625|0),($631|0),($632|0))|0);
     $634 = (getTempRet0() | 0);
     $635 = (($$4569597) + -5)|0;
     $636 = (($0) + ($635<<2)|0);
     $637 = HEAP32[$636>>2]|0;
     $638 = ($637|0)<(0);
     $639 = $638 << 31 >> 31;
     $640 = (___muldi3(($637|0),($639|0),($592|0),($594|0))|0);
     $641 = (getTempRet0() | 0);
     $642 = (_i64Add(($633|0),($634|0),($640|0),($641|0))|0);
     $643 = (getTempRet0() | 0);
     $644 = (($$4569597) + -4)|0;
     $645 = (($0) + ($644<<2)|0);
     $646 = HEAP32[$645>>2]|0;
     $647 = ($646|0)<(0);
     $648 = $647 << 31 >> 31;
     $649 = (___muldi3(($646|0),($648|0),($596|0),($598|0))|0);
     $650 = (getTempRet0() | 0);
     $651 = (_i64Add(($642|0),($643|0),($649|0),($650|0))|0);
     $652 = (getTempRet0() | 0);
     $653 = (($$4569597) + -3)|0;
     $654 = (($0) + ($653<<2)|0);
     $655 = HEAP32[$654>>2]|0;
     $656 = ($655|0)<(0);
     $657 = $656 << 31 >> 31;
     $658 = (___muldi3(($655|0),($657|0),($600|0),($602|0))|0);
     $659 = (getTempRet0() | 0);
     $660 = (_i64Add(($651|0),($652|0),($658|0),($659|0))|0);
     $661 = (getTempRet0() | 0);
     $662 = (($$4569597) + -2)|0;
     $663 = (($0) + ($662<<2)|0);
     $664 = HEAP32[$663>>2]|0;
     $665 = ($664|0)<(0);
     $666 = $665 << 31 >> 31;
     $667 = (___muldi3(($664|0),($666|0),($604|0),($606|0))|0);
     $668 = (getTempRet0() | 0);
     $669 = (_i64Add(($660|0),($661|0),($667|0),($668|0))|0);
     $670 = (getTempRet0() | 0);
     $671 = (($$4569597) + -1)|0;
     $672 = (($0) + ($671<<2)|0);
     $673 = HEAP32[$672>>2]|0;
     $674 = ($673|0)<(0);
     $675 = $674 << 31 >> 31;
     $676 = (___muldi3(($673|0),($675|0),($607|0),($609|0))|0);
     $677 = (getTempRet0() | 0);
     $678 = (_i64Add(($669|0),($670|0),($676|0),($677|0))|0);
     $679 = (getTempRet0() | 0);
     $680 = (($0) + ($$4569597<<2)|0);
     $681 = HEAP32[$680>>2]|0;
     $682 = (_bitshift64Ashr(($678|0),($679|0),($4|0))|0);
     $683 = (getTempRet0() | 0);
     $684 = (($681) - ($682))|0;
     $685 = (($5) + ($$4569597<<2)|0);
     HEAP32[$685>>2] = $684;
     $686 = (($$4569597) + 1)|0;
     $exitcond649 = ($686|0)==($1|0);
     if ($exitcond649) {
      break;
     } else {
      $$4569597 = $686;
     }
    }
    return;
   } else {
    if (!($578)) {
     return;
    }
    $687 = ((($2)) + 24|0);
    $688 = HEAP32[$687>>2]|0;
    $689 = ($688|0)<(0);
    $690 = $689 << 31 >> 31;
    $691 = ((($2)) + 20|0);
    $692 = HEAP32[$691>>2]|0;
    $693 = ($692|0)<(0);
    $694 = $693 << 31 >> 31;
    $695 = ((($2)) + 16|0);
    $696 = HEAP32[$695>>2]|0;
    $697 = ($696|0)<(0);
    $698 = $697 << 31 >> 31;
    $699 = ((($2)) + 12|0);
    $700 = HEAP32[$699>>2]|0;
    $701 = ($700|0)<(0);
    $702 = $701 << 31 >> 31;
    $703 = ((($2)) + 8|0);
    $704 = HEAP32[$703>>2]|0;
    $705 = ($704|0)<(0);
    $706 = $705 << 31 >> 31;
    $707 = ((($2)) + 4|0);
    $708 = HEAP32[$707>>2]|0;
    $709 = ($708|0)<(0);
    $710 = $709 << 31 >> 31;
    $711 = HEAP32[$2>>2]|0;
    $712 = ($711|0)<(0);
    $713 = $712 << 31 >> 31;
    $$5570599 = 0;
    while(1) {
     $714 = (($$5570599) + -7)|0;
     $715 = (($0) + ($714<<2)|0);
     $716 = HEAP32[$715>>2]|0;
     $717 = ($716|0)<(0);
     $718 = $717 << 31 >> 31;
     $719 = (___muldi3(($716|0),($718|0),($688|0),($690|0))|0);
     $720 = (getTempRet0() | 0);
     $721 = (($$5570599) + -6)|0;
     $722 = (($0) + ($721<<2)|0);
     $723 = HEAP32[$722>>2]|0;
     $724 = ($723|0)<(0);
     $725 = $724 << 31 >> 31;
     $726 = (___muldi3(($723|0),($725|0),($692|0),($694|0))|0);
     $727 = (getTempRet0() | 0);
     $728 = (_i64Add(($726|0),($727|0),($719|0),($720|0))|0);
     $729 = (getTempRet0() | 0);
     $730 = (($$5570599) + -5)|0;
     $731 = (($0) + ($730<<2)|0);
     $732 = HEAP32[$731>>2]|0;
     $733 = ($732|0)<(0);
     $734 = $733 << 31 >> 31;
     $735 = (___muldi3(($732|0),($734|0),($696|0),($698|0))|0);
     $736 = (getTempRet0() | 0);
     $737 = (_i64Add(($728|0),($729|0),($735|0),($736|0))|0);
     $738 = (getTempRet0() | 0);
     $739 = (($$5570599) + -4)|0;
     $740 = (($0) + ($739<<2)|0);
     $741 = HEAP32[$740>>2]|0;
     $742 = ($741|0)<(0);
     $743 = $742 << 31 >> 31;
     $744 = (___muldi3(($741|0),($743|0),($700|0),($702|0))|0);
     $745 = (getTempRet0() | 0);
     $746 = (_i64Add(($737|0),($738|0),($744|0),($745|0))|0);
     $747 = (getTempRet0() | 0);
     $748 = (($$5570599) + -3)|0;
     $749 = (($0) + ($748<<2)|0);
     $750 = HEAP32[$749>>2]|0;
     $751 = ($750|0)<(0);
     $752 = $751 << 31 >> 31;
     $753 = (___muldi3(($750|0),($752|0),($704|0),($706|0))|0);
     $754 = (getTempRet0() | 0);
     $755 = (_i64Add(($746|0),($747|0),($753|0),($754|0))|0);
     $756 = (getTempRet0() | 0);
     $757 = (($$5570599) + -2)|0;
     $758 = (($0) + ($757<<2)|0);
     $759 = HEAP32[$758>>2]|0;
     $760 = ($759|0)<(0);
     $761 = $760 << 31 >> 31;
     $762 = (___muldi3(($759|0),($761|0),($708|0),($710|0))|0);
     $763 = (getTempRet0() | 0);
     $764 = (_i64Add(($755|0),($756|0),($762|0),($763|0))|0);
     $765 = (getTempRet0() | 0);
     $766 = (($$5570599) + -1)|0;
     $767 = (($0) + ($766<<2)|0);
     $768 = HEAP32[$767>>2]|0;
     $769 = ($768|0)<(0);
     $770 = $769 << 31 >> 31;
     $771 = (___muldi3(($768|0),($770|0),($711|0),($713|0))|0);
     $772 = (getTempRet0() | 0);
     $773 = (_i64Add(($764|0),($765|0),($771|0),($772|0))|0);
     $774 = (getTempRet0() | 0);
     $775 = (($0) + ($$5570599<<2)|0);
     $776 = HEAP32[$775>>2]|0;
     $777 = (_bitshift64Ashr(($773|0),($774|0),($4|0))|0);
     $778 = (getTempRet0() | 0);
     $779 = (($776) - ($777))|0;
     $780 = (($5) + ($$5570599<<2)|0);
     HEAP32[$780>>2] = $779;
     $781 = (($$5570599) + 1)|0;
     $exitcond650 = ($781|0)==($1|0);
     if ($exitcond650) {
      break;
     } else {
      $$5570599 = $781;
     }
    }
    return;
   }
  } else {
   $782 = ($3|0)==(6);
   $783 = ($1|0)>(0);
   if ($782) {
    if (!($783)) {
     return;
    }
    $784 = ((($2)) + 20|0);
    $785 = HEAP32[$784>>2]|0;
    $786 = ($785|0)<(0);
    $787 = $786 << 31 >> 31;
    $788 = ((($2)) + 16|0);
    $789 = HEAP32[$788>>2]|0;
    $790 = ($789|0)<(0);
    $791 = $790 << 31 >> 31;
    $792 = ((($2)) + 12|0);
    $793 = HEAP32[$792>>2]|0;
    $794 = ($793|0)<(0);
    $795 = $794 << 31 >> 31;
    $796 = ((($2)) + 8|0);
    $797 = HEAP32[$796>>2]|0;
    $798 = ($797|0)<(0);
    $799 = $798 << 31 >> 31;
    $800 = ((($2)) + 4|0);
    $801 = HEAP32[$800>>2]|0;
    $802 = ($801|0)<(0);
    $803 = $802 << 31 >> 31;
    $804 = HEAP32[$2>>2]|0;
    $805 = ($804|0)<(0);
    $806 = $805 << 31 >> 31;
    $$6571601 = 0;
    while(1) {
     $807 = (($$6571601) + -6)|0;
     $808 = (($0) + ($807<<2)|0);
     $809 = HEAP32[$808>>2]|0;
     $810 = ($809|0)<(0);
     $811 = $810 << 31 >> 31;
     $812 = (___muldi3(($809|0),($811|0),($785|0),($787|0))|0);
     $813 = (getTempRet0() | 0);
     $814 = (($$6571601) + -5)|0;
     $815 = (($0) + ($814<<2)|0);
     $816 = HEAP32[$815>>2]|0;
     $817 = ($816|0)<(0);
     $818 = $817 << 31 >> 31;
     $819 = (___muldi3(($816|0),($818|0),($789|0),($791|0))|0);
     $820 = (getTempRet0() | 0);
     $821 = (_i64Add(($819|0),($820|0),($812|0),($813|0))|0);
     $822 = (getTempRet0() | 0);
     $823 = (($$6571601) + -4)|0;
     $824 = (($0) + ($823<<2)|0);
     $825 = HEAP32[$824>>2]|0;
     $826 = ($825|0)<(0);
     $827 = $826 << 31 >> 31;
     $828 = (___muldi3(($825|0),($827|0),($793|0),($795|0))|0);
     $829 = (getTempRet0() | 0);
     $830 = (_i64Add(($821|0),($822|0),($828|0),($829|0))|0);
     $831 = (getTempRet0() | 0);
     $832 = (($$6571601) + -3)|0;
     $833 = (($0) + ($832<<2)|0);
     $834 = HEAP32[$833>>2]|0;
     $835 = ($834|0)<(0);
     $836 = $835 << 31 >> 31;
     $837 = (___muldi3(($834|0),($836|0),($797|0),($799|0))|0);
     $838 = (getTempRet0() | 0);
     $839 = (_i64Add(($830|0),($831|0),($837|0),($838|0))|0);
     $840 = (getTempRet0() | 0);
     $841 = (($$6571601) + -2)|0;
     $842 = (($0) + ($841<<2)|0);
     $843 = HEAP32[$842>>2]|0;
     $844 = ($843|0)<(0);
     $845 = $844 << 31 >> 31;
     $846 = (___muldi3(($843|0),($845|0),($801|0),($803|0))|0);
     $847 = (getTempRet0() | 0);
     $848 = (_i64Add(($839|0),($840|0),($846|0),($847|0))|0);
     $849 = (getTempRet0() | 0);
     $850 = (($$6571601) + -1)|0;
     $851 = (($0) + ($850<<2)|0);
     $852 = HEAP32[$851>>2]|0;
     $853 = ($852|0)<(0);
     $854 = $853 << 31 >> 31;
     $855 = (___muldi3(($852|0),($854|0),($804|0),($806|0))|0);
     $856 = (getTempRet0() | 0);
     $857 = (_i64Add(($848|0),($849|0),($855|0),($856|0))|0);
     $858 = (getTempRet0() | 0);
     $859 = (($0) + ($$6571601<<2)|0);
     $860 = HEAP32[$859>>2]|0;
     $861 = (_bitshift64Ashr(($857|0),($858|0),($4|0))|0);
     $862 = (getTempRet0() | 0);
     $863 = (($860) - ($861))|0;
     $864 = (($5) + ($$6571601<<2)|0);
     HEAP32[$864>>2] = $863;
     $865 = (($$6571601) + 1)|0;
     $exitcond651 = ($865|0)==($1|0);
     if ($exitcond651) {
      break;
     } else {
      $$6571601 = $865;
     }
    }
    return;
   } else {
    if (!($783)) {
     return;
    }
    $866 = ((($2)) + 16|0);
    $867 = HEAP32[$866>>2]|0;
    $868 = ($867|0)<(0);
    $869 = $868 << 31 >> 31;
    $870 = ((($2)) + 12|0);
    $871 = HEAP32[$870>>2]|0;
    $872 = ($871|0)<(0);
    $873 = $872 << 31 >> 31;
    $874 = ((($2)) + 8|0);
    $875 = HEAP32[$874>>2]|0;
    $876 = ($875|0)<(0);
    $877 = $876 << 31 >> 31;
    $878 = ((($2)) + 4|0);
    $879 = HEAP32[$878>>2]|0;
    $880 = ($879|0)<(0);
    $881 = $880 << 31 >> 31;
    $882 = HEAP32[$2>>2]|0;
    $883 = ($882|0)<(0);
    $884 = $883 << 31 >> 31;
    $$7572603 = 0;
    while(1) {
     $885 = (($$7572603) + -5)|0;
     $886 = (($0) + ($885<<2)|0);
     $887 = HEAP32[$886>>2]|0;
     $888 = ($887|0)<(0);
     $889 = $888 << 31 >> 31;
     $890 = (___muldi3(($887|0),($889|0),($867|0),($869|0))|0);
     $891 = (getTempRet0() | 0);
     $892 = (($$7572603) + -4)|0;
     $893 = (($0) + ($892<<2)|0);
     $894 = HEAP32[$893>>2]|0;
     $895 = ($894|0)<(0);
     $896 = $895 << 31 >> 31;
     $897 = (___muldi3(($894|0),($896|0),($871|0),($873|0))|0);
     $898 = (getTempRet0() | 0);
     $899 = (_i64Add(($897|0),($898|0),($890|0),($891|0))|0);
     $900 = (getTempRet0() | 0);
     $901 = (($$7572603) + -3)|0;
     $902 = (($0) + ($901<<2)|0);
     $903 = HEAP32[$902>>2]|0;
     $904 = ($903|0)<(0);
     $905 = $904 << 31 >> 31;
     $906 = (___muldi3(($903|0),($905|0),($875|0),($877|0))|0);
     $907 = (getTempRet0() | 0);
     $908 = (_i64Add(($899|0),($900|0),($906|0),($907|0))|0);
     $909 = (getTempRet0() | 0);
     $910 = (($$7572603) + -2)|0;
     $911 = (($0) + ($910<<2)|0);
     $912 = HEAP32[$911>>2]|0;
     $913 = ($912|0)<(0);
     $914 = $913 << 31 >> 31;
     $915 = (___muldi3(($912|0),($914|0),($879|0),($881|0))|0);
     $916 = (getTempRet0() | 0);
     $917 = (_i64Add(($908|0),($909|0),($915|0),($916|0))|0);
     $918 = (getTempRet0() | 0);
     $919 = (($$7572603) + -1)|0;
     $920 = (($0) + ($919<<2)|0);
     $921 = HEAP32[$920>>2]|0;
     $922 = ($921|0)<(0);
     $923 = $922 << 31 >> 31;
     $924 = (___muldi3(($921|0),($923|0),($882|0),($884|0))|0);
     $925 = (getTempRet0() | 0);
     $926 = (_i64Add(($917|0),($918|0),($924|0),($925|0))|0);
     $927 = (getTempRet0() | 0);
     $928 = (($0) + ($$7572603<<2)|0);
     $929 = HEAP32[$928>>2]|0;
     $930 = (_bitshift64Ashr(($926|0),($927|0),($4|0))|0);
     $931 = (getTempRet0() | 0);
     $932 = (($929) - ($930))|0;
     $933 = (($5) + ($$7572603<<2)|0);
     HEAP32[$933>>2] = $932;
     $934 = (($$7572603) + 1)|0;
     $exitcond652 = ($934|0)==($1|0);
     if ($exitcond652) {
      break;
     } else {
      $$7572603 = $934;
     }
    }
    return;
   }
  }
 } else {
  $935 = ($3>>>0)>(2);
  if ($935) {
   $936 = ($3|0)==(4);
   $937 = ($1|0)>(0);
   if ($936) {
    if (!($937)) {
     return;
    }
    $938 = ((($2)) + 12|0);
    $939 = HEAP32[$938>>2]|0;
    $940 = ($939|0)<(0);
    $941 = $940 << 31 >> 31;
    $942 = ((($2)) + 8|0);
    $943 = HEAP32[$942>>2]|0;
    $944 = ($943|0)<(0);
    $945 = $944 << 31 >> 31;
    $946 = ((($2)) + 4|0);
    $947 = HEAP32[$946>>2]|0;
    $948 = ($947|0)<(0);
    $949 = $948 << 31 >> 31;
    $950 = HEAP32[$2>>2]|0;
    $951 = ($950|0)<(0);
    $952 = $951 << 31 >> 31;
    $$8573605 = 0;
    while(1) {
     $953 = (($$8573605) + -4)|0;
     $954 = (($0) + ($953<<2)|0);
     $955 = HEAP32[$954>>2]|0;
     $956 = ($955|0)<(0);
     $957 = $956 << 31 >> 31;
     $958 = (___muldi3(($955|0),($957|0),($939|0),($941|0))|0);
     $959 = (getTempRet0() | 0);
     $960 = (($$8573605) + -3)|0;
     $961 = (($0) + ($960<<2)|0);
     $962 = HEAP32[$961>>2]|0;
     $963 = ($962|0)<(0);
     $964 = $963 << 31 >> 31;
     $965 = (___muldi3(($962|0),($964|0),($943|0),($945|0))|0);
     $966 = (getTempRet0() | 0);
     $967 = (_i64Add(($965|0),($966|0),($958|0),($959|0))|0);
     $968 = (getTempRet0() | 0);
     $969 = (($$8573605) + -2)|0;
     $970 = (($0) + ($969<<2)|0);
     $971 = HEAP32[$970>>2]|0;
     $972 = ($971|0)<(0);
     $973 = $972 << 31 >> 31;
     $974 = (___muldi3(($971|0),($973|0),($947|0),($949|0))|0);
     $975 = (getTempRet0() | 0);
     $976 = (_i64Add(($967|0),($968|0),($974|0),($975|0))|0);
     $977 = (getTempRet0() | 0);
     $978 = (($$8573605) + -1)|0;
     $979 = (($0) + ($978<<2)|0);
     $980 = HEAP32[$979>>2]|0;
     $981 = ($980|0)<(0);
     $982 = $981 << 31 >> 31;
     $983 = (___muldi3(($980|0),($982|0),($950|0),($952|0))|0);
     $984 = (getTempRet0() | 0);
     $985 = (_i64Add(($976|0),($977|0),($983|0),($984|0))|0);
     $986 = (getTempRet0() | 0);
     $987 = (($0) + ($$8573605<<2)|0);
     $988 = HEAP32[$987>>2]|0;
     $989 = (_bitshift64Ashr(($985|0),($986|0),($4|0))|0);
     $990 = (getTempRet0() | 0);
     $991 = (($988) - ($989))|0;
     $992 = (($5) + ($$8573605<<2)|0);
     HEAP32[$992>>2] = $991;
     $993 = (($$8573605) + 1)|0;
     $exitcond653 = ($993|0)==($1|0);
     if ($exitcond653) {
      break;
     } else {
      $$8573605 = $993;
     }
    }
    return;
   } else {
    if (!($937)) {
     return;
    }
    $994 = ((($2)) + 8|0);
    $995 = HEAP32[$994>>2]|0;
    $996 = ($995|0)<(0);
    $997 = $996 << 31 >> 31;
    $998 = ((($2)) + 4|0);
    $999 = HEAP32[$998>>2]|0;
    $1000 = ($999|0)<(0);
    $1001 = $1000 << 31 >> 31;
    $1002 = HEAP32[$2>>2]|0;
    $1003 = ($1002|0)<(0);
    $1004 = $1003 << 31 >> 31;
    $$9574607 = 0;
    while(1) {
     $1005 = (($$9574607) + -3)|0;
     $1006 = (($0) + ($1005<<2)|0);
     $1007 = HEAP32[$1006>>2]|0;
     $1008 = ($1007|0)<(0);
     $1009 = $1008 << 31 >> 31;
     $1010 = (___muldi3(($1007|0),($1009|0),($995|0),($997|0))|0);
     $1011 = (getTempRet0() | 0);
     $1012 = (($$9574607) + -2)|0;
     $1013 = (($0) + ($1012<<2)|0);
     $1014 = HEAP32[$1013>>2]|0;
     $1015 = ($1014|0)<(0);
     $1016 = $1015 << 31 >> 31;
     $1017 = (___muldi3(($1014|0),($1016|0),($999|0),($1001|0))|0);
     $1018 = (getTempRet0() | 0);
     $1019 = (_i64Add(($1017|0),($1018|0),($1010|0),($1011|0))|0);
     $1020 = (getTempRet0() | 0);
     $1021 = (($$9574607) + -1)|0;
     $1022 = (($0) + ($1021<<2)|0);
     $1023 = HEAP32[$1022>>2]|0;
     $1024 = ($1023|0)<(0);
     $1025 = $1024 << 31 >> 31;
     $1026 = (___muldi3(($1023|0),($1025|0),($1002|0),($1004|0))|0);
     $1027 = (getTempRet0() | 0);
     $1028 = (_i64Add(($1019|0),($1020|0),($1026|0),($1027|0))|0);
     $1029 = (getTempRet0() | 0);
     $1030 = (($0) + ($$9574607<<2)|0);
     $1031 = HEAP32[$1030>>2]|0;
     $1032 = (_bitshift64Ashr(($1028|0),($1029|0),($4|0))|0);
     $1033 = (getTempRet0() | 0);
     $1034 = (($1031) - ($1032))|0;
     $1035 = (($5) + ($$9574607<<2)|0);
     HEAP32[$1035>>2] = $1034;
     $1036 = (($$9574607) + 1)|0;
     $exitcond654 = ($1036|0)==($1|0);
     if ($exitcond654) {
      break;
     } else {
      $$9574607 = $1036;
     }
    }
    return;
   }
  } else {
   $1037 = ($3|0)==(2);
   $1038 = ($1|0)>(0);
   if ($1037) {
    if (!($1038)) {
     return;
    }
    $1039 = ((($2)) + 4|0);
    $1040 = HEAP32[$1039>>2]|0;
    $1041 = ($1040|0)<(0);
    $1042 = $1041 << 31 >> 31;
    $1043 = HEAP32[$2>>2]|0;
    $1044 = ($1043|0)<(0);
    $1045 = $1044 << 31 >> 31;
    $$10575609 = 0;
    while(1) {
     $1046 = (($$10575609) + -2)|0;
     $1047 = (($0) + ($1046<<2)|0);
     $1048 = HEAP32[$1047>>2]|0;
     $1049 = ($1048|0)<(0);
     $1050 = $1049 << 31 >> 31;
     $1051 = (___muldi3(($1048|0),($1050|0),($1040|0),($1042|0))|0);
     $1052 = (getTempRet0() | 0);
     $1053 = (($$10575609) + -1)|0;
     $1054 = (($0) + ($1053<<2)|0);
     $1055 = HEAP32[$1054>>2]|0;
     $1056 = ($1055|0)<(0);
     $1057 = $1056 << 31 >> 31;
     $1058 = (___muldi3(($1055|0),($1057|0),($1043|0),($1045|0))|0);
     $1059 = (getTempRet0() | 0);
     $1060 = (_i64Add(($1058|0),($1059|0),($1051|0),($1052|0))|0);
     $1061 = (getTempRet0() | 0);
     $1062 = (($0) + ($$10575609<<2)|0);
     $1063 = HEAP32[$1062>>2]|0;
     $1064 = (_bitshift64Ashr(($1060|0),($1061|0),($4|0))|0);
     $1065 = (getTempRet0() | 0);
     $1066 = (($1063) - ($1064))|0;
     $1067 = (($5) + ($$10575609<<2)|0);
     HEAP32[$1067>>2] = $1066;
     $1068 = (($$10575609) + 1)|0;
     $exitcond655 = ($1068|0)==($1|0);
     if ($exitcond655) {
      break;
     } else {
      $$10575609 = $1068;
     }
    }
    return;
   } else {
    if (!($1038)) {
     return;
    }
    $1069 = HEAP32[$2>>2]|0;
    $1070 = ($1069|0)<(0);
    $1071 = $1070 << 31 >> 31;
    $$11576611 = 0;
    while(1) {
     $1072 = (($0) + ($$11576611<<2)|0);
     $1073 = HEAP32[$1072>>2]|0;
     $1074 = (($$11576611) + -1)|0;
     $1075 = (($0) + ($1074<<2)|0);
     $1076 = HEAP32[$1075>>2]|0;
     $1077 = ($1076|0)<(0);
     $1078 = $1077 << 31 >> 31;
     $1079 = (___muldi3(($1076|0),($1078|0),($1069|0),($1071|0))|0);
     $1080 = (getTempRet0() | 0);
     $1081 = (_bitshift64Ashr(($1079|0),($1080|0),($4|0))|0);
     $1082 = (getTempRet0() | 0);
     $1083 = (($1073) - ($1081))|0;
     $1084 = (($5) + ($$11576611<<2)|0);
     HEAP32[$1084>>2] = $1083;
     $1085 = (($$11576611) + 1)|0;
     $exitcond656 = ($1085|0)==($1|0);
     if ($exitcond656) {
      break;
     } else {
      $$11576611 = $1085;
     }
    }
    return;
   }
  }
 }
}
function _FLAC__lpc_restore_signal($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0565590 = 0, $$1 = 0, $$10 = 0, $$10575609 = 0, $$11 = 0, $$11576611 = 0, $$12 = 0, $$12577613 = 0, $$13 = 0, $$14 = 0, $$15 = 0, $$1566591 = 0, $$16 = 0, $$17 = 0, $$18 = 0, $$19 = 0, $$2 = 0, $$2567593 = 0, $$3 = 0;
 var $$3568595 = 0, $$4 = 0, $$4569597 = 0, $$5 = 0, $$5570599 = 0, $$6 = 0, $$6571601 = 0, $$7 = 0, $$7572603 = 0, $$8 = 0, $$8573605 = 0, $$9 = 0, $$9574607 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
 var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
 var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0;
 var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
 var $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
 var $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0;
 var $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0;
 var $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0;
 var $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0;
 var $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0;
 var $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0;
 var $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0;
 var $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond646 = 0;
 var $exitcond647 = 0, $exitcond648 = 0, $exitcond649 = 0, $exitcond650 = 0, $exitcond651 = 0, $exitcond652 = 0, $exitcond653 = 0, $exitcond654 = 0, $exitcond655 = 0, $exitcond656 = 0, $exitcond657 = 0, $load_initial = 0, $load_initial683 = 0, $load_initial686 = 0, $load_initial689 = 0, $load_initial692 = 0, $load_initial695 = 0, $load_initial698 = 0, $load_initial701 = 0, $load_initial704 = 0;
 var $load_initial707 = 0, $load_initial710 = 0, $load_initial713 = 0, $scevgep = 0, $scevgep682 = 0, $scevgep685 = 0, $scevgep688 = 0, $scevgep691 = 0, $scevgep694 = 0, $scevgep697 = 0, $scevgep700 = 0, $scevgep703 = 0, $scevgep706 = 0, $scevgep709 = 0, $scevgep712 = 0, $store_forwarded = 0, $store_forwarded684 = 0, $store_forwarded687 = 0, $store_forwarded690 = 0, $store_forwarded693 = 0;
 var $store_forwarded696 = 0, $store_forwarded699 = 0, $store_forwarded702 = 0, $store_forwarded705 = 0, $store_forwarded708 = 0, $store_forwarded711 = 0, $store_forwarded714 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ($3>>>0)<(13);
 if (!($6)) {
  $582 = ($1|0)>(0);
  if (!($582)) {
   return;
  }
  $583 = ((($2)) + 124|0);
  $584 = ((($2)) + 120|0);
  $585 = ((($2)) + 116|0);
  $586 = ((($2)) + 112|0);
  $587 = ((($2)) + 108|0);
  $588 = ((($2)) + 104|0);
  $589 = ((($2)) + 100|0);
  $590 = ((($2)) + 96|0);
  $591 = ((($2)) + 92|0);
  $592 = ((($2)) + 88|0);
  $593 = ((($2)) + 84|0);
  $594 = ((($2)) + 80|0);
  $595 = ((($2)) + 76|0);
  $596 = ((($2)) + 72|0);
  $597 = ((($2)) + 68|0);
  $598 = ((($2)) + 64|0);
  $599 = ((($2)) + 60|0);
  $600 = ((($2)) + 56|0);
  $601 = ((($2)) + 52|0);
  $602 = ((($2)) + 48|0);
  $603 = ((($2)) + 44|0);
  $604 = ((($2)) + 40|0);
  $605 = ((($2)) + 36|0);
  $606 = ((($2)) + 32|0);
  $607 = ((($2)) + 28|0);
  $608 = ((($2)) + 24|0);
  $609 = ((($2)) + 20|0);
  $610 = ((($2)) + 16|0);
  $611 = ((($2)) + 12|0);
  $612 = ((($2)) + 8|0);
  $613 = ((($2)) + 4|0);
  $$12577613 = 0;
  while(1) {
   switch ($3|0) {
   case 32:  {
    $614 = HEAP32[$583>>2]|0;
    $615 = (($$12577613) + -32)|0;
    $616 = (($5) + ($615<<2)|0);
    $617 = HEAP32[$616>>2]|0;
    $618 = Math_imul($617, $614)|0;
    $$0 = $618;
    label = 53;
    break;
   }
   case 31:  {
    $$0 = 0;
    label = 53;
    break;
   }
   case 30:  {
    $$1 = 0;
    label = 54;
    break;
   }
   case 29:  {
    $$2 = 0;
    label = 55;
    break;
   }
   case 28:  {
    $$3 = 0;
    label = 56;
    break;
   }
   case 27:  {
    $$4 = 0;
    label = 57;
    break;
   }
   case 26:  {
    $$5 = 0;
    label = 58;
    break;
   }
   case 25:  {
    $$6 = 0;
    label = 59;
    break;
   }
   case 24:  {
    $$7 = 0;
    label = 60;
    break;
   }
   case 23:  {
    $$8 = 0;
    label = 61;
    break;
   }
   case 22:  {
    $$9 = 0;
    label = 62;
    break;
   }
   case 21:  {
    $$10 = 0;
    label = 63;
    break;
   }
   case 20:  {
    $$11 = 0;
    label = 64;
    break;
   }
   case 19:  {
    $$12 = 0;
    label = 65;
    break;
   }
   case 18:  {
    $$13 = 0;
    label = 66;
    break;
   }
   case 17:  {
    $$14 = 0;
    label = 67;
    break;
   }
   case 16:  {
    $$15 = 0;
    label = 68;
    break;
   }
   case 15:  {
    $$16 = 0;
    label = 69;
    break;
   }
   case 14:  {
    $$17 = 0;
    label = 70;
    break;
   }
   case 13:  {
    $$18 = 0;
    label = 71;
    break;
   }
   default: {
    $$19 = 0;
   }
   }
   if ((label|0) == 53) {
    label = 0;
    $619 = HEAP32[$584>>2]|0;
    $620 = (($$12577613) + -31)|0;
    $621 = (($5) + ($620<<2)|0);
    $622 = HEAP32[$621>>2]|0;
    $623 = Math_imul($622, $619)|0;
    $624 = (($623) + ($$0))|0;
    $$1 = $624;
    label = 54;
   }
   if ((label|0) == 54) {
    label = 0;
    $625 = HEAP32[$585>>2]|0;
    $626 = (($$12577613) + -30)|0;
    $627 = (($5) + ($626<<2)|0);
    $628 = HEAP32[$627>>2]|0;
    $629 = Math_imul($628, $625)|0;
    $630 = (($629) + ($$1))|0;
    $$2 = $630;
    label = 55;
   }
   if ((label|0) == 55) {
    label = 0;
    $631 = HEAP32[$586>>2]|0;
    $632 = (($$12577613) + -29)|0;
    $633 = (($5) + ($632<<2)|0);
    $634 = HEAP32[$633>>2]|0;
    $635 = Math_imul($634, $631)|0;
    $636 = (($635) + ($$2))|0;
    $$3 = $636;
    label = 56;
   }
   if ((label|0) == 56) {
    label = 0;
    $637 = HEAP32[$587>>2]|0;
    $638 = (($$12577613) + -28)|0;
    $639 = (($5) + ($638<<2)|0);
    $640 = HEAP32[$639>>2]|0;
    $641 = Math_imul($640, $637)|0;
    $642 = (($641) + ($$3))|0;
    $$4 = $642;
    label = 57;
   }
   if ((label|0) == 57) {
    label = 0;
    $643 = HEAP32[$588>>2]|0;
    $644 = (($$12577613) + -27)|0;
    $645 = (($5) + ($644<<2)|0);
    $646 = HEAP32[$645>>2]|0;
    $647 = Math_imul($646, $643)|0;
    $648 = (($647) + ($$4))|0;
    $$5 = $648;
    label = 58;
   }
   if ((label|0) == 58) {
    label = 0;
    $649 = HEAP32[$589>>2]|0;
    $650 = (($$12577613) + -26)|0;
    $651 = (($5) + ($650<<2)|0);
    $652 = HEAP32[$651>>2]|0;
    $653 = Math_imul($652, $649)|0;
    $654 = (($653) + ($$5))|0;
    $$6 = $654;
    label = 59;
   }
   if ((label|0) == 59) {
    label = 0;
    $655 = HEAP32[$590>>2]|0;
    $656 = (($$12577613) + -25)|0;
    $657 = (($5) + ($656<<2)|0);
    $658 = HEAP32[$657>>2]|0;
    $659 = Math_imul($658, $655)|0;
    $660 = (($659) + ($$6))|0;
    $$7 = $660;
    label = 60;
   }
   if ((label|0) == 60) {
    label = 0;
    $661 = HEAP32[$591>>2]|0;
    $662 = (($$12577613) + -24)|0;
    $663 = (($5) + ($662<<2)|0);
    $664 = HEAP32[$663>>2]|0;
    $665 = Math_imul($664, $661)|0;
    $666 = (($665) + ($$7))|0;
    $$8 = $666;
    label = 61;
   }
   if ((label|0) == 61) {
    label = 0;
    $667 = HEAP32[$592>>2]|0;
    $668 = (($$12577613) + -23)|0;
    $669 = (($5) + ($668<<2)|0);
    $670 = HEAP32[$669>>2]|0;
    $671 = Math_imul($670, $667)|0;
    $672 = (($671) + ($$8))|0;
    $$9 = $672;
    label = 62;
   }
   if ((label|0) == 62) {
    label = 0;
    $673 = HEAP32[$593>>2]|0;
    $674 = (($$12577613) + -22)|0;
    $675 = (($5) + ($674<<2)|0);
    $676 = HEAP32[$675>>2]|0;
    $677 = Math_imul($676, $673)|0;
    $678 = (($677) + ($$9))|0;
    $$10 = $678;
    label = 63;
   }
   if ((label|0) == 63) {
    label = 0;
    $679 = HEAP32[$594>>2]|0;
    $680 = (($$12577613) + -21)|0;
    $681 = (($5) + ($680<<2)|0);
    $682 = HEAP32[$681>>2]|0;
    $683 = Math_imul($682, $679)|0;
    $684 = (($683) + ($$10))|0;
    $$11 = $684;
    label = 64;
   }
   if ((label|0) == 64) {
    label = 0;
    $685 = HEAP32[$595>>2]|0;
    $686 = (($$12577613) + -20)|0;
    $687 = (($5) + ($686<<2)|0);
    $688 = HEAP32[$687>>2]|0;
    $689 = Math_imul($688, $685)|0;
    $690 = (($689) + ($$11))|0;
    $$12 = $690;
    label = 65;
   }
   if ((label|0) == 65) {
    label = 0;
    $691 = HEAP32[$596>>2]|0;
    $692 = (($$12577613) + -19)|0;
    $693 = (($5) + ($692<<2)|0);
    $694 = HEAP32[$693>>2]|0;
    $695 = Math_imul($694, $691)|0;
    $696 = (($695) + ($$12))|0;
    $$13 = $696;
    label = 66;
   }
   if ((label|0) == 66) {
    label = 0;
    $697 = HEAP32[$597>>2]|0;
    $698 = (($$12577613) + -18)|0;
    $699 = (($5) + ($698<<2)|0);
    $700 = HEAP32[$699>>2]|0;
    $701 = Math_imul($700, $697)|0;
    $702 = (($701) + ($$13))|0;
    $$14 = $702;
    label = 67;
   }
   if ((label|0) == 67) {
    label = 0;
    $703 = HEAP32[$598>>2]|0;
    $704 = (($$12577613) + -17)|0;
    $705 = (($5) + ($704<<2)|0);
    $706 = HEAP32[$705>>2]|0;
    $707 = Math_imul($706, $703)|0;
    $708 = (($707) + ($$14))|0;
    $$15 = $708;
    label = 68;
   }
   if ((label|0) == 68) {
    label = 0;
    $709 = HEAP32[$599>>2]|0;
    $710 = (($$12577613) + -16)|0;
    $711 = (($5) + ($710<<2)|0);
    $712 = HEAP32[$711>>2]|0;
    $713 = Math_imul($712, $709)|0;
    $714 = (($713) + ($$15))|0;
    $$16 = $714;
    label = 69;
   }
   if ((label|0) == 69) {
    label = 0;
    $715 = HEAP32[$600>>2]|0;
    $716 = (($$12577613) + -15)|0;
    $717 = (($5) + ($716<<2)|0);
    $718 = HEAP32[$717>>2]|0;
    $719 = Math_imul($718, $715)|0;
    $720 = (($719) + ($$16))|0;
    $$17 = $720;
    label = 70;
   }
   if ((label|0) == 70) {
    label = 0;
    $721 = HEAP32[$601>>2]|0;
    $722 = (($$12577613) + -14)|0;
    $723 = (($5) + ($722<<2)|0);
    $724 = HEAP32[$723>>2]|0;
    $725 = Math_imul($724, $721)|0;
    $726 = (($725) + ($$17))|0;
    $$18 = $726;
    label = 71;
   }
   if ((label|0) == 71) {
    label = 0;
    $727 = HEAP32[$602>>2]|0;
    $728 = (($$12577613) + -13)|0;
    $729 = (($5) + ($728<<2)|0);
    $730 = HEAP32[$729>>2]|0;
    $731 = Math_imul($730, $727)|0;
    $732 = (($731) + ($$18))|0;
    $733 = HEAP32[$603>>2]|0;
    $734 = (($$12577613) + -12)|0;
    $735 = (($5) + ($734<<2)|0);
    $736 = HEAP32[$735>>2]|0;
    $737 = Math_imul($736, $733)|0;
    $738 = (($732) + ($737))|0;
    $739 = HEAP32[$604>>2]|0;
    $740 = (($$12577613) + -11)|0;
    $741 = (($5) + ($740<<2)|0);
    $742 = HEAP32[$741>>2]|0;
    $743 = Math_imul($742, $739)|0;
    $744 = (($738) + ($743))|0;
    $745 = HEAP32[$605>>2]|0;
    $746 = (($$12577613) + -10)|0;
    $747 = (($5) + ($746<<2)|0);
    $748 = HEAP32[$747>>2]|0;
    $749 = Math_imul($748, $745)|0;
    $750 = (($744) + ($749))|0;
    $751 = HEAP32[$606>>2]|0;
    $752 = (($$12577613) + -9)|0;
    $753 = (($5) + ($752<<2)|0);
    $754 = HEAP32[$753>>2]|0;
    $755 = Math_imul($754, $751)|0;
    $756 = (($750) + ($755))|0;
    $757 = HEAP32[$607>>2]|0;
    $758 = (($$12577613) + -8)|0;
    $759 = (($5) + ($758<<2)|0);
    $760 = HEAP32[$759>>2]|0;
    $761 = Math_imul($760, $757)|0;
    $762 = (($756) + ($761))|0;
    $763 = HEAP32[$608>>2]|0;
    $764 = (($$12577613) + -7)|0;
    $765 = (($5) + ($764<<2)|0);
    $766 = HEAP32[$765>>2]|0;
    $767 = Math_imul($766, $763)|0;
    $768 = (($762) + ($767))|0;
    $769 = HEAP32[$609>>2]|0;
    $770 = (($$12577613) + -6)|0;
    $771 = (($5) + ($770<<2)|0);
    $772 = HEAP32[$771>>2]|0;
    $773 = Math_imul($772, $769)|0;
    $774 = (($768) + ($773))|0;
    $775 = HEAP32[$610>>2]|0;
    $776 = (($$12577613) + -5)|0;
    $777 = (($5) + ($776<<2)|0);
    $778 = HEAP32[$777>>2]|0;
    $779 = Math_imul($778, $775)|0;
    $780 = (($774) + ($779))|0;
    $781 = HEAP32[$611>>2]|0;
    $782 = (($$12577613) + -4)|0;
    $783 = (($5) + ($782<<2)|0);
    $784 = HEAP32[$783>>2]|0;
    $785 = Math_imul($784, $781)|0;
    $786 = (($780) + ($785))|0;
    $787 = HEAP32[$612>>2]|0;
    $788 = (($$12577613) + -3)|0;
    $789 = (($5) + ($788<<2)|0);
    $790 = HEAP32[$789>>2]|0;
    $791 = Math_imul($790, $787)|0;
    $792 = (($786) + ($791))|0;
    $793 = HEAP32[$613>>2]|0;
    $794 = (($$12577613) + -2)|0;
    $795 = (($5) + ($794<<2)|0);
    $796 = HEAP32[$795>>2]|0;
    $797 = Math_imul($796, $793)|0;
    $798 = (($792) + ($797))|0;
    $799 = HEAP32[$2>>2]|0;
    $800 = (($$12577613) + -1)|0;
    $801 = (($5) + ($800<<2)|0);
    $802 = HEAP32[$801>>2]|0;
    $803 = Math_imul($802, $799)|0;
    $804 = (($798) + ($803))|0;
    $$19 = $804;
   }
   $805 = (($0) + ($$12577613<<2)|0);
   $806 = HEAP32[$805>>2]|0;
   $807 = $$19 >> $4;
   $808 = (($806) + ($807))|0;
   $809 = (($5) + ($$12577613<<2)|0);
   HEAP32[$809>>2] = $808;
   $810 = (($$12577613) + 1)|0;
   $exitcond657 = ($810|0)==($1|0);
   if ($exitcond657) {
    break;
   } else {
    $$12577613 = $810;
   }
  }
  return;
 }
 $7 = ($3>>>0)>(8);
 if ($7) {
  $8 = ($3>>>0)>(10);
  if ($8) {
   $9 = ($3|0)==(12);
   $10 = ($1|0)>(0);
   if ($9) {
    if (!($10)) {
     return;
    }
    $11 = ((($2)) + 44|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ((($2)) + 40|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($2)) + 32|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($2)) + 28|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ((($2)) + 24|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($2)) + 20|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($2)) + 16|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ((($2)) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ((($2)) + 8|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ((($2)) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = HEAP32[$2>>2]|0;
    $scevgep = ((($5)) + -4|0);
    $load_initial = HEAP32[$scevgep>>2]|0;
    $$0565590 = 0;$store_forwarded = $load_initial;
    while(1) {
     $34 = (($$0565590) + -12)|0;
     $35 = (($5) + ($34<<2)|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = Math_imul($36, $12)|0;
     $38 = (($$0565590) + -11)|0;
     $39 = (($5) + ($38<<2)|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = Math_imul($40, $14)|0;
     $42 = (($41) + ($37))|0;
     $43 = (($$0565590) + -10)|0;
     $44 = (($5) + ($43<<2)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = Math_imul($45, $16)|0;
     $47 = (($42) + ($46))|0;
     $48 = (($$0565590) + -9)|0;
     $49 = (($5) + ($48<<2)|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = Math_imul($50, $18)|0;
     $52 = (($47) + ($51))|0;
     $53 = (($$0565590) + -8)|0;
     $54 = (($5) + ($53<<2)|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = Math_imul($55, $20)|0;
     $57 = (($52) + ($56))|0;
     $58 = (($$0565590) + -7)|0;
     $59 = (($5) + ($58<<2)|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = Math_imul($60, $22)|0;
     $62 = (($57) + ($61))|0;
     $63 = (($$0565590) + -6)|0;
     $64 = (($5) + ($63<<2)|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = Math_imul($65, $24)|0;
     $67 = (($62) + ($66))|0;
     $68 = (($$0565590) + -5)|0;
     $69 = (($5) + ($68<<2)|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = Math_imul($70, $26)|0;
     $72 = (($67) + ($71))|0;
     $73 = (($$0565590) + -4)|0;
     $74 = (($5) + ($73<<2)|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = Math_imul($75, $28)|0;
     $77 = (($72) + ($76))|0;
     $78 = (($$0565590) + -3)|0;
     $79 = (($5) + ($78<<2)|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = Math_imul($80, $30)|0;
     $82 = (($77) + ($81))|0;
     $83 = (($$0565590) + -2)|0;
     $84 = (($5) + ($83<<2)|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = Math_imul($85, $32)|0;
     $87 = (($82) + ($86))|0;
     $88 = Math_imul($store_forwarded, $33)|0;
     $89 = (($87) + ($88))|0;
     $90 = (($0) + ($$0565590<<2)|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = $89 >> $4;
     $93 = (($92) + ($91))|0;
     $94 = (($5) + ($$0565590<<2)|0);
     HEAP32[$94>>2] = $93;
     $95 = (($$0565590) + 1)|0;
     $exitcond = ($95|0)==($1|0);
     if ($exitcond) {
      break;
     } else {
      $$0565590 = $95;$store_forwarded = $93;
     }
    }
    return;
   } else {
    if (!($10)) {
     return;
    }
    $96 = ((($2)) + 40|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ((($2)) + 36|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ((($2)) + 32|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = ((($2)) + 28|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = ((($2)) + 24|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = ((($2)) + 20|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = ((($2)) + 16|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ((($2)) + 12|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = ((($2)) + 8|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = ((($2)) + 4|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = HEAP32[$2>>2]|0;
    $scevgep682 = ((($5)) + -4|0);
    $load_initial683 = HEAP32[$scevgep682>>2]|0;
    $$1566591 = 0;$store_forwarded684 = $load_initial683;
    while(1) {
     $117 = (($$1566591) + -11)|0;
     $118 = (($5) + ($117<<2)|0);
     $119 = HEAP32[$118>>2]|0;
     $120 = Math_imul($119, $97)|0;
     $121 = (($$1566591) + -10)|0;
     $122 = (($5) + ($121<<2)|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = Math_imul($123, $99)|0;
     $125 = (($124) + ($120))|0;
     $126 = (($$1566591) + -9)|0;
     $127 = (($5) + ($126<<2)|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = Math_imul($128, $101)|0;
     $130 = (($125) + ($129))|0;
     $131 = (($$1566591) + -8)|0;
     $132 = (($5) + ($131<<2)|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = Math_imul($133, $103)|0;
     $135 = (($130) + ($134))|0;
     $136 = (($$1566591) + -7)|0;
     $137 = (($5) + ($136<<2)|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = Math_imul($138, $105)|0;
     $140 = (($135) + ($139))|0;
     $141 = (($$1566591) + -6)|0;
     $142 = (($5) + ($141<<2)|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = Math_imul($143, $107)|0;
     $145 = (($140) + ($144))|0;
     $146 = (($$1566591) + -5)|0;
     $147 = (($5) + ($146<<2)|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = Math_imul($148, $109)|0;
     $150 = (($145) + ($149))|0;
     $151 = (($$1566591) + -4)|0;
     $152 = (($5) + ($151<<2)|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = Math_imul($153, $111)|0;
     $155 = (($150) + ($154))|0;
     $156 = (($$1566591) + -3)|0;
     $157 = (($5) + ($156<<2)|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = Math_imul($158, $113)|0;
     $160 = (($155) + ($159))|0;
     $161 = (($$1566591) + -2)|0;
     $162 = (($5) + ($161<<2)|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = Math_imul($163, $115)|0;
     $165 = (($160) + ($164))|0;
     $166 = Math_imul($store_forwarded684, $116)|0;
     $167 = (($165) + ($166))|0;
     $168 = (($0) + ($$1566591<<2)|0);
     $169 = HEAP32[$168>>2]|0;
     $170 = $167 >> $4;
     $171 = (($170) + ($169))|0;
     $172 = (($5) + ($$1566591<<2)|0);
     HEAP32[$172>>2] = $171;
     $173 = (($$1566591) + 1)|0;
     $exitcond646 = ($173|0)==($1|0);
     if ($exitcond646) {
      break;
     } else {
      $$1566591 = $173;$store_forwarded684 = $171;
     }
    }
    return;
   }
  } else {
   $174 = ($3|0)==(10);
   $175 = ($1|0)>(0);
   if ($174) {
    if (!($175)) {
     return;
    }
    $176 = ((($2)) + 36|0);
    $177 = HEAP32[$176>>2]|0;
    $178 = ((($2)) + 32|0);
    $179 = HEAP32[$178>>2]|0;
    $180 = ((($2)) + 28|0);
    $181 = HEAP32[$180>>2]|0;
    $182 = ((($2)) + 24|0);
    $183 = HEAP32[$182>>2]|0;
    $184 = ((($2)) + 20|0);
    $185 = HEAP32[$184>>2]|0;
    $186 = ((($2)) + 16|0);
    $187 = HEAP32[$186>>2]|0;
    $188 = ((($2)) + 12|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = ((($2)) + 8|0);
    $191 = HEAP32[$190>>2]|0;
    $192 = ((($2)) + 4|0);
    $193 = HEAP32[$192>>2]|0;
    $194 = HEAP32[$2>>2]|0;
    $scevgep685 = ((($5)) + -4|0);
    $load_initial686 = HEAP32[$scevgep685>>2]|0;
    $$2567593 = 0;$store_forwarded687 = $load_initial686;
    while(1) {
     $195 = (($$2567593) + -10)|0;
     $196 = (($5) + ($195<<2)|0);
     $197 = HEAP32[$196>>2]|0;
     $198 = Math_imul($197, $177)|0;
     $199 = (($$2567593) + -9)|0;
     $200 = (($5) + ($199<<2)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = Math_imul($201, $179)|0;
     $203 = (($202) + ($198))|0;
     $204 = (($$2567593) + -8)|0;
     $205 = (($5) + ($204<<2)|0);
     $206 = HEAP32[$205>>2]|0;
     $207 = Math_imul($206, $181)|0;
     $208 = (($203) + ($207))|0;
     $209 = (($$2567593) + -7)|0;
     $210 = (($5) + ($209<<2)|0);
     $211 = HEAP32[$210>>2]|0;
     $212 = Math_imul($211, $183)|0;
     $213 = (($208) + ($212))|0;
     $214 = (($$2567593) + -6)|0;
     $215 = (($5) + ($214<<2)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = Math_imul($216, $185)|0;
     $218 = (($213) + ($217))|0;
     $219 = (($$2567593) + -5)|0;
     $220 = (($5) + ($219<<2)|0);
     $221 = HEAP32[$220>>2]|0;
     $222 = Math_imul($221, $187)|0;
     $223 = (($218) + ($222))|0;
     $224 = (($$2567593) + -4)|0;
     $225 = (($5) + ($224<<2)|0);
     $226 = HEAP32[$225>>2]|0;
     $227 = Math_imul($226, $189)|0;
     $228 = (($223) + ($227))|0;
     $229 = (($$2567593) + -3)|0;
     $230 = (($5) + ($229<<2)|0);
     $231 = HEAP32[$230>>2]|0;
     $232 = Math_imul($231, $191)|0;
     $233 = (($228) + ($232))|0;
     $234 = (($$2567593) + -2)|0;
     $235 = (($5) + ($234<<2)|0);
     $236 = HEAP32[$235>>2]|0;
     $237 = Math_imul($236, $193)|0;
     $238 = (($233) + ($237))|0;
     $239 = Math_imul($store_forwarded687, $194)|0;
     $240 = (($238) + ($239))|0;
     $241 = (($0) + ($$2567593<<2)|0);
     $242 = HEAP32[$241>>2]|0;
     $243 = $240 >> $4;
     $244 = (($243) + ($242))|0;
     $245 = (($5) + ($$2567593<<2)|0);
     HEAP32[$245>>2] = $244;
     $246 = (($$2567593) + 1)|0;
     $exitcond647 = ($246|0)==($1|0);
     if ($exitcond647) {
      break;
     } else {
      $$2567593 = $246;$store_forwarded687 = $244;
     }
    }
    return;
   } else {
    if (!($175)) {
     return;
    }
    $247 = ((($2)) + 32|0);
    $248 = HEAP32[$247>>2]|0;
    $249 = ((($2)) + 28|0);
    $250 = HEAP32[$249>>2]|0;
    $251 = ((($2)) + 24|0);
    $252 = HEAP32[$251>>2]|0;
    $253 = ((($2)) + 20|0);
    $254 = HEAP32[$253>>2]|0;
    $255 = ((($2)) + 16|0);
    $256 = HEAP32[$255>>2]|0;
    $257 = ((($2)) + 12|0);
    $258 = HEAP32[$257>>2]|0;
    $259 = ((($2)) + 8|0);
    $260 = HEAP32[$259>>2]|0;
    $261 = ((($2)) + 4|0);
    $262 = HEAP32[$261>>2]|0;
    $263 = HEAP32[$2>>2]|0;
    $scevgep688 = ((($5)) + -4|0);
    $load_initial689 = HEAP32[$scevgep688>>2]|0;
    $$3568595 = 0;$store_forwarded690 = $load_initial689;
    while(1) {
     $264 = (($$3568595) + -9)|0;
     $265 = (($5) + ($264<<2)|0);
     $266 = HEAP32[$265>>2]|0;
     $267 = Math_imul($266, $248)|0;
     $268 = (($$3568595) + -8)|0;
     $269 = (($5) + ($268<<2)|0);
     $270 = HEAP32[$269>>2]|0;
     $271 = Math_imul($270, $250)|0;
     $272 = (($271) + ($267))|0;
     $273 = (($$3568595) + -7)|0;
     $274 = (($5) + ($273<<2)|0);
     $275 = HEAP32[$274>>2]|0;
     $276 = Math_imul($275, $252)|0;
     $277 = (($272) + ($276))|0;
     $278 = (($$3568595) + -6)|0;
     $279 = (($5) + ($278<<2)|0);
     $280 = HEAP32[$279>>2]|0;
     $281 = Math_imul($280, $254)|0;
     $282 = (($277) + ($281))|0;
     $283 = (($$3568595) + -5)|0;
     $284 = (($5) + ($283<<2)|0);
     $285 = HEAP32[$284>>2]|0;
     $286 = Math_imul($285, $256)|0;
     $287 = (($282) + ($286))|0;
     $288 = (($$3568595) + -4)|0;
     $289 = (($5) + ($288<<2)|0);
     $290 = HEAP32[$289>>2]|0;
     $291 = Math_imul($290, $258)|0;
     $292 = (($287) + ($291))|0;
     $293 = (($$3568595) + -3)|0;
     $294 = (($5) + ($293<<2)|0);
     $295 = HEAP32[$294>>2]|0;
     $296 = Math_imul($295, $260)|0;
     $297 = (($292) + ($296))|0;
     $298 = (($$3568595) + -2)|0;
     $299 = (($5) + ($298<<2)|0);
     $300 = HEAP32[$299>>2]|0;
     $301 = Math_imul($300, $262)|0;
     $302 = (($297) + ($301))|0;
     $303 = Math_imul($store_forwarded690, $263)|0;
     $304 = (($302) + ($303))|0;
     $305 = (($0) + ($$3568595<<2)|0);
     $306 = HEAP32[$305>>2]|0;
     $307 = $304 >> $4;
     $308 = (($307) + ($306))|0;
     $309 = (($5) + ($$3568595<<2)|0);
     HEAP32[$309>>2] = $308;
     $310 = (($$3568595) + 1)|0;
     $exitcond648 = ($310|0)==($1|0);
     if ($exitcond648) {
      break;
     } else {
      $$3568595 = $310;$store_forwarded690 = $308;
     }
    }
    return;
   }
  }
 }
 $311 = ($3>>>0)>(4);
 if ($311) {
  $312 = ($3>>>0)>(6);
  if ($312) {
   $313 = ($3|0)==(8);
   $314 = ($1|0)>(0);
   if ($313) {
    if (!($314)) {
     return;
    }
    $315 = ((($2)) + 28|0);
    $316 = HEAP32[$315>>2]|0;
    $317 = ((($2)) + 24|0);
    $318 = HEAP32[$317>>2]|0;
    $319 = ((($2)) + 20|0);
    $320 = HEAP32[$319>>2]|0;
    $321 = ((($2)) + 16|0);
    $322 = HEAP32[$321>>2]|0;
    $323 = ((($2)) + 12|0);
    $324 = HEAP32[$323>>2]|0;
    $325 = ((($2)) + 8|0);
    $326 = HEAP32[$325>>2]|0;
    $327 = ((($2)) + 4|0);
    $328 = HEAP32[$327>>2]|0;
    $329 = HEAP32[$2>>2]|0;
    $scevgep691 = ((($5)) + -4|0);
    $load_initial692 = HEAP32[$scevgep691>>2]|0;
    $$4569597 = 0;$store_forwarded693 = $load_initial692;
    while(1) {
     $330 = (($$4569597) + -8)|0;
     $331 = (($5) + ($330<<2)|0);
     $332 = HEAP32[$331>>2]|0;
     $333 = Math_imul($332, $316)|0;
     $334 = (($$4569597) + -7)|0;
     $335 = (($5) + ($334<<2)|0);
     $336 = HEAP32[$335>>2]|0;
     $337 = Math_imul($336, $318)|0;
     $338 = (($337) + ($333))|0;
     $339 = (($$4569597) + -6)|0;
     $340 = (($5) + ($339<<2)|0);
     $341 = HEAP32[$340>>2]|0;
     $342 = Math_imul($341, $320)|0;
     $343 = (($338) + ($342))|0;
     $344 = (($$4569597) + -5)|0;
     $345 = (($5) + ($344<<2)|0);
     $346 = HEAP32[$345>>2]|0;
     $347 = Math_imul($346, $322)|0;
     $348 = (($343) + ($347))|0;
     $349 = (($$4569597) + -4)|0;
     $350 = (($5) + ($349<<2)|0);
     $351 = HEAP32[$350>>2]|0;
     $352 = Math_imul($351, $324)|0;
     $353 = (($348) + ($352))|0;
     $354 = (($$4569597) + -3)|0;
     $355 = (($5) + ($354<<2)|0);
     $356 = HEAP32[$355>>2]|0;
     $357 = Math_imul($356, $326)|0;
     $358 = (($353) + ($357))|0;
     $359 = (($$4569597) + -2)|0;
     $360 = (($5) + ($359<<2)|0);
     $361 = HEAP32[$360>>2]|0;
     $362 = Math_imul($361, $328)|0;
     $363 = (($358) + ($362))|0;
     $364 = Math_imul($store_forwarded693, $329)|0;
     $365 = (($363) + ($364))|0;
     $366 = (($0) + ($$4569597<<2)|0);
     $367 = HEAP32[$366>>2]|0;
     $368 = $365 >> $4;
     $369 = (($368) + ($367))|0;
     $370 = (($5) + ($$4569597<<2)|0);
     HEAP32[$370>>2] = $369;
     $371 = (($$4569597) + 1)|0;
     $exitcond649 = ($371|0)==($1|0);
     if ($exitcond649) {
      break;
     } else {
      $$4569597 = $371;$store_forwarded693 = $369;
     }
    }
    return;
   } else {
    if (!($314)) {
     return;
    }
    $372 = ((($2)) + 24|0);
    $373 = HEAP32[$372>>2]|0;
    $374 = ((($2)) + 20|0);
    $375 = HEAP32[$374>>2]|0;
    $376 = ((($2)) + 16|0);
    $377 = HEAP32[$376>>2]|0;
    $378 = ((($2)) + 12|0);
    $379 = HEAP32[$378>>2]|0;
    $380 = ((($2)) + 8|0);
    $381 = HEAP32[$380>>2]|0;
    $382 = ((($2)) + 4|0);
    $383 = HEAP32[$382>>2]|0;
    $384 = HEAP32[$2>>2]|0;
    $scevgep694 = ((($5)) + -4|0);
    $load_initial695 = HEAP32[$scevgep694>>2]|0;
    $$5570599 = 0;$store_forwarded696 = $load_initial695;
    while(1) {
     $385 = (($$5570599) + -7)|0;
     $386 = (($5) + ($385<<2)|0);
     $387 = HEAP32[$386>>2]|0;
     $388 = Math_imul($387, $373)|0;
     $389 = (($$5570599) + -6)|0;
     $390 = (($5) + ($389<<2)|0);
     $391 = HEAP32[$390>>2]|0;
     $392 = Math_imul($391, $375)|0;
     $393 = (($392) + ($388))|0;
     $394 = (($$5570599) + -5)|0;
     $395 = (($5) + ($394<<2)|0);
     $396 = HEAP32[$395>>2]|0;
     $397 = Math_imul($396, $377)|0;
     $398 = (($393) + ($397))|0;
     $399 = (($$5570599) + -4)|0;
     $400 = (($5) + ($399<<2)|0);
     $401 = HEAP32[$400>>2]|0;
     $402 = Math_imul($401, $379)|0;
     $403 = (($398) + ($402))|0;
     $404 = (($$5570599) + -3)|0;
     $405 = (($5) + ($404<<2)|0);
     $406 = HEAP32[$405>>2]|0;
     $407 = Math_imul($406, $381)|0;
     $408 = (($403) + ($407))|0;
     $409 = (($$5570599) + -2)|0;
     $410 = (($5) + ($409<<2)|0);
     $411 = HEAP32[$410>>2]|0;
     $412 = Math_imul($411, $383)|0;
     $413 = (($408) + ($412))|0;
     $414 = Math_imul($store_forwarded696, $384)|0;
     $415 = (($413) + ($414))|0;
     $416 = (($0) + ($$5570599<<2)|0);
     $417 = HEAP32[$416>>2]|0;
     $418 = $415 >> $4;
     $419 = (($418) + ($417))|0;
     $420 = (($5) + ($$5570599<<2)|0);
     HEAP32[$420>>2] = $419;
     $421 = (($$5570599) + 1)|0;
     $exitcond650 = ($421|0)==($1|0);
     if ($exitcond650) {
      break;
     } else {
      $$5570599 = $421;$store_forwarded696 = $419;
     }
    }
    return;
   }
  } else {
   $422 = ($3|0)==(6);
   $423 = ($1|0)>(0);
   if ($422) {
    if (!($423)) {
     return;
    }
    $424 = ((($2)) + 20|0);
    $425 = HEAP32[$424>>2]|0;
    $426 = ((($2)) + 16|0);
    $427 = HEAP32[$426>>2]|0;
    $428 = ((($2)) + 12|0);
    $429 = HEAP32[$428>>2]|0;
    $430 = ((($2)) + 8|0);
    $431 = HEAP32[$430>>2]|0;
    $432 = ((($2)) + 4|0);
    $433 = HEAP32[$432>>2]|0;
    $434 = HEAP32[$2>>2]|0;
    $scevgep697 = ((($5)) + -4|0);
    $load_initial698 = HEAP32[$scevgep697>>2]|0;
    $$6571601 = 0;$store_forwarded699 = $load_initial698;
    while(1) {
     $435 = (($$6571601) + -6)|0;
     $436 = (($5) + ($435<<2)|0);
     $437 = HEAP32[$436>>2]|0;
     $438 = Math_imul($437, $425)|0;
     $439 = (($$6571601) + -5)|0;
     $440 = (($5) + ($439<<2)|0);
     $441 = HEAP32[$440>>2]|0;
     $442 = Math_imul($441, $427)|0;
     $443 = (($442) + ($438))|0;
     $444 = (($$6571601) + -4)|0;
     $445 = (($5) + ($444<<2)|0);
     $446 = HEAP32[$445>>2]|0;
     $447 = Math_imul($446, $429)|0;
     $448 = (($443) + ($447))|0;
     $449 = (($$6571601) + -3)|0;
     $450 = (($5) + ($449<<2)|0);
     $451 = HEAP32[$450>>2]|0;
     $452 = Math_imul($451, $431)|0;
     $453 = (($448) + ($452))|0;
     $454 = (($$6571601) + -2)|0;
     $455 = (($5) + ($454<<2)|0);
     $456 = HEAP32[$455>>2]|0;
     $457 = Math_imul($456, $433)|0;
     $458 = (($453) + ($457))|0;
     $459 = Math_imul($store_forwarded699, $434)|0;
     $460 = (($458) + ($459))|0;
     $461 = (($0) + ($$6571601<<2)|0);
     $462 = HEAP32[$461>>2]|0;
     $463 = $460 >> $4;
     $464 = (($463) + ($462))|0;
     $465 = (($5) + ($$6571601<<2)|0);
     HEAP32[$465>>2] = $464;
     $466 = (($$6571601) + 1)|0;
     $exitcond651 = ($466|0)==($1|0);
     if ($exitcond651) {
      break;
     } else {
      $$6571601 = $466;$store_forwarded699 = $464;
     }
    }
    return;
   } else {
    if (!($423)) {
     return;
    }
    $467 = ((($2)) + 16|0);
    $468 = HEAP32[$467>>2]|0;
    $469 = ((($2)) + 12|0);
    $470 = HEAP32[$469>>2]|0;
    $471 = ((($2)) + 8|0);
    $472 = HEAP32[$471>>2]|0;
    $473 = ((($2)) + 4|0);
    $474 = HEAP32[$473>>2]|0;
    $475 = HEAP32[$2>>2]|0;
    $scevgep700 = ((($5)) + -4|0);
    $load_initial701 = HEAP32[$scevgep700>>2]|0;
    $$7572603 = 0;$store_forwarded702 = $load_initial701;
    while(1) {
     $476 = (($$7572603) + -5)|0;
     $477 = (($5) + ($476<<2)|0);
     $478 = HEAP32[$477>>2]|0;
     $479 = Math_imul($478, $468)|0;
     $480 = (($$7572603) + -4)|0;
     $481 = (($5) + ($480<<2)|0);
     $482 = HEAP32[$481>>2]|0;
     $483 = Math_imul($482, $470)|0;
     $484 = (($483) + ($479))|0;
     $485 = (($$7572603) + -3)|0;
     $486 = (($5) + ($485<<2)|0);
     $487 = HEAP32[$486>>2]|0;
     $488 = Math_imul($487, $472)|0;
     $489 = (($484) + ($488))|0;
     $490 = (($$7572603) + -2)|0;
     $491 = (($5) + ($490<<2)|0);
     $492 = HEAP32[$491>>2]|0;
     $493 = Math_imul($492, $474)|0;
     $494 = (($489) + ($493))|0;
     $495 = Math_imul($store_forwarded702, $475)|0;
     $496 = (($494) + ($495))|0;
     $497 = (($0) + ($$7572603<<2)|0);
     $498 = HEAP32[$497>>2]|0;
     $499 = $496 >> $4;
     $500 = (($499) + ($498))|0;
     $501 = (($5) + ($$7572603<<2)|0);
     HEAP32[$501>>2] = $500;
     $502 = (($$7572603) + 1)|0;
     $exitcond652 = ($502|0)==($1|0);
     if ($exitcond652) {
      break;
     } else {
      $$7572603 = $502;$store_forwarded702 = $500;
     }
    }
    return;
   }
  }
 } else {
  $503 = ($3>>>0)>(2);
  if ($503) {
   $504 = ($3|0)==(4);
   $505 = ($1|0)>(0);
   if ($504) {
    if (!($505)) {
     return;
    }
    $506 = ((($2)) + 12|0);
    $507 = HEAP32[$506>>2]|0;
    $508 = ((($2)) + 8|0);
    $509 = HEAP32[$508>>2]|0;
    $510 = ((($2)) + 4|0);
    $511 = HEAP32[$510>>2]|0;
    $512 = HEAP32[$2>>2]|0;
    $scevgep703 = ((($5)) + -4|0);
    $load_initial704 = HEAP32[$scevgep703>>2]|0;
    $$8573605 = 0;$store_forwarded705 = $load_initial704;
    while(1) {
     $513 = (($$8573605) + -4)|0;
     $514 = (($5) + ($513<<2)|0);
     $515 = HEAP32[$514>>2]|0;
     $516 = Math_imul($515, $507)|0;
     $517 = (($$8573605) + -3)|0;
     $518 = (($5) + ($517<<2)|0);
     $519 = HEAP32[$518>>2]|0;
     $520 = Math_imul($519, $509)|0;
     $521 = (($520) + ($516))|0;
     $522 = (($$8573605) + -2)|0;
     $523 = (($5) + ($522<<2)|0);
     $524 = HEAP32[$523>>2]|0;
     $525 = Math_imul($524, $511)|0;
     $526 = (($521) + ($525))|0;
     $527 = Math_imul($store_forwarded705, $512)|0;
     $528 = (($526) + ($527))|0;
     $529 = (($0) + ($$8573605<<2)|0);
     $530 = HEAP32[$529>>2]|0;
     $531 = $528 >> $4;
     $532 = (($531) + ($530))|0;
     $533 = (($5) + ($$8573605<<2)|0);
     HEAP32[$533>>2] = $532;
     $534 = (($$8573605) + 1)|0;
     $exitcond653 = ($534|0)==($1|0);
     if ($exitcond653) {
      break;
     } else {
      $$8573605 = $534;$store_forwarded705 = $532;
     }
    }
    return;
   } else {
    if (!($505)) {
     return;
    }
    $535 = ((($2)) + 8|0);
    $536 = HEAP32[$535>>2]|0;
    $537 = ((($2)) + 4|0);
    $538 = HEAP32[$537>>2]|0;
    $539 = HEAP32[$2>>2]|0;
    $scevgep706 = ((($5)) + -4|0);
    $load_initial707 = HEAP32[$scevgep706>>2]|0;
    $$9574607 = 0;$store_forwarded708 = $load_initial707;
    while(1) {
     $540 = (($$9574607) + -3)|0;
     $541 = (($5) + ($540<<2)|0);
     $542 = HEAP32[$541>>2]|0;
     $543 = Math_imul($542, $536)|0;
     $544 = (($$9574607) + -2)|0;
     $545 = (($5) + ($544<<2)|0);
     $546 = HEAP32[$545>>2]|0;
     $547 = Math_imul($546, $538)|0;
     $548 = (($547) + ($543))|0;
     $549 = Math_imul($store_forwarded708, $539)|0;
     $550 = (($548) + ($549))|0;
     $551 = (($0) + ($$9574607<<2)|0);
     $552 = HEAP32[$551>>2]|0;
     $553 = $550 >> $4;
     $554 = (($553) + ($552))|0;
     $555 = (($5) + ($$9574607<<2)|0);
     HEAP32[$555>>2] = $554;
     $556 = (($$9574607) + 1)|0;
     $exitcond654 = ($556|0)==($1|0);
     if ($exitcond654) {
      break;
     } else {
      $$9574607 = $556;$store_forwarded708 = $554;
     }
    }
    return;
   }
  } else {
   $557 = ($3|0)==(2);
   $558 = ($1|0)>(0);
   if ($557) {
    if (!($558)) {
     return;
    }
    $559 = ((($2)) + 4|0);
    $560 = HEAP32[$559>>2]|0;
    $561 = HEAP32[$2>>2]|0;
    $scevgep709 = ((($5)) + -4|0);
    $load_initial710 = HEAP32[$scevgep709>>2]|0;
    $$10575609 = 0;$store_forwarded711 = $load_initial710;
    while(1) {
     $562 = (($$10575609) + -2)|0;
     $563 = (($5) + ($562<<2)|0);
     $564 = HEAP32[$563>>2]|0;
     $565 = Math_imul($564, $560)|0;
     $566 = Math_imul($store_forwarded711, $561)|0;
     $567 = (($566) + ($565))|0;
     $568 = (($0) + ($$10575609<<2)|0);
     $569 = HEAP32[$568>>2]|0;
     $570 = $567 >> $4;
     $571 = (($570) + ($569))|0;
     $572 = (($5) + ($$10575609<<2)|0);
     HEAP32[$572>>2] = $571;
     $573 = (($$10575609) + 1)|0;
     $exitcond655 = ($573|0)==($1|0);
     if ($exitcond655) {
      break;
     } else {
      $$10575609 = $573;$store_forwarded711 = $571;
     }
    }
    return;
   } else {
    if (!($558)) {
     return;
    }
    $574 = HEAP32[$2>>2]|0;
    $scevgep712 = ((($5)) + -4|0);
    $load_initial713 = HEAP32[$scevgep712>>2]|0;
    $$11576611 = 0;$store_forwarded714 = $load_initial713;
    while(1) {
     $575 = (($0) + ($$11576611<<2)|0);
     $576 = HEAP32[$575>>2]|0;
     $577 = Math_imul($store_forwarded714, $574)|0;
     $578 = $577 >> $4;
     $579 = (($578) + ($576))|0;
     $580 = (($5) + ($$11576611<<2)|0);
     HEAP32[$580>>2] = $579;
     $581 = (($$11576611) + 1)|0;
     $exitcond656 = ($581|0)==($1|0);
     if ($exitcond656) {
      break;
     } else {
      $$11576611 = $581;$store_forwarded714 = $579;
     }
    }
    return;
   }
  }
 }
}
function _FLAC__lpc_restore_signal_wide($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0565590 = 0, $$10575609 = 0, $$11576611 = 0, $$12577613 = 0, $$1566591 = 0, $$2567593 = 0, $$3568595 = 0, $$4569597 = 0, $$5570599 = 0, $$6571601 = 0, $$7572603 = 0, $$8573605 = 0, $$9574607 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0;
 var $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0;
 var $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0;
 var $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0;
 var $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0;
 var $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0;
 var $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0;
 var $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0;
 var $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0;
 var $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0;
 var $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0;
 var $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0;
 var $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0;
 var $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0;
 var $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0;
 var $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0;
 var $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0;
 var $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0;
 var $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0;
 var $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0;
 var $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0;
 var $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0;
 var $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0;
 var $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0;
 var $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0;
 var $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0;
 var $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0;
 var $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0;
 var $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0;
 var $151 = 0, $1510 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
 var $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0;
 var $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
 var $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0;
 var $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0;
 var $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0;
 var $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0;
 var $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0;
 var $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0;
 var $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0;
 var $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0;
 var $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0;
 var $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0;
 var $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0;
 var $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0;
 var $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0;
 var $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0;
 var $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0;
 var $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0;
 var $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0;
 var $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $exitcond = 0, $exitcond646 = 0;
 var $exitcond647 = 0, $exitcond648 = 0, $exitcond649 = 0, $exitcond650 = 0, $exitcond651 = 0, $exitcond652 = 0, $exitcond653 = 0, $exitcond654 = 0, $exitcond655 = 0, $exitcond656 = 0, $exitcond657 = 0, $load_initial = 0, $load_initial683 = 0, $load_initial686 = 0, $load_initial689 = 0, $load_initial692 = 0, $load_initial695 = 0, $load_initial698 = 0, $load_initial701 = 0, $load_initial704 = 0;
 var $load_initial707 = 0, $load_initial710 = 0, $load_initial713 = 0, $scevgep = 0, $scevgep682 = 0, $scevgep685 = 0, $scevgep688 = 0, $scevgep691 = 0, $scevgep694 = 0, $scevgep697 = 0, $scevgep700 = 0, $scevgep703 = 0, $scevgep706 = 0, $scevgep709 = 0, $scevgep712 = 0, $store_forwarded = 0, $store_forwarded684 = 0, $store_forwarded687 = 0, $store_forwarded690 = 0, $store_forwarded693 = 0;
 var $store_forwarded696 = 0, $store_forwarded699 = 0, $store_forwarded702 = 0, $store_forwarded705 = 0, $store_forwarded708 = 0, $store_forwarded711 = 0, $store_forwarded714 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ($3>>>0)<(13);
 if (!($6)) {
  $1050 = ($1|0)>(0);
  if (!($1050)) {
   return;
  }
  $1051 = ((($2)) + 124|0);
  $1052 = ((($2)) + 120|0);
  $1053 = ((($2)) + 116|0);
  $1054 = ((($2)) + 112|0);
  $1055 = ((($2)) + 108|0);
  $1056 = ((($2)) + 104|0);
  $1057 = ((($2)) + 100|0);
  $1058 = ((($2)) + 96|0);
  $1059 = ((($2)) + 92|0);
  $1060 = ((($2)) + 88|0);
  $1061 = ((($2)) + 84|0);
  $1062 = ((($2)) + 80|0);
  $1063 = ((($2)) + 76|0);
  $1064 = ((($2)) + 72|0);
  $1065 = ((($2)) + 68|0);
  $1066 = ((($2)) + 64|0);
  $1067 = ((($2)) + 60|0);
  $1068 = ((($2)) + 56|0);
  $1069 = ((($2)) + 52|0);
  $1070 = ((($2)) + 48|0);
  $1071 = ((($2)) + 44|0);
  $1072 = ((($2)) + 40|0);
  $1073 = ((($2)) + 36|0);
  $1074 = ((($2)) + 32|0);
  $1075 = ((($2)) + 28|0);
  $1076 = ((($2)) + 24|0);
  $1077 = ((($2)) + 20|0);
  $1078 = ((($2)) + 16|0);
  $1079 = ((($2)) + 12|0);
  $1080 = ((($2)) + 8|0);
  $1081 = ((($2)) + 4|0);
  $$12577613 = 0;
  while(1) {
   switch ($3|0) {
   case 32:  {
    $1082 = HEAP32[$1051>>2]|0;
    $1083 = ($1082|0)<(0);
    $1084 = $1083 << 31 >> 31;
    $1085 = (($$12577613) + -32)|0;
    $1086 = (($5) + ($1085<<2)|0);
    $1087 = HEAP32[$1086>>2]|0;
    $1088 = ($1087|0)<(0);
    $1089 = $1088 << 31 >> 31;
    $1090 = (___muldi3(($1087|0),($1089|0),($1082|0),($1084|0))|0);
    $1091 = (getTempRet0() | 0);
    $1102 = $1090;$1103 = $1091;
    label = 53;
    break;
   }
   case 31:  {
    $1102 = 0;$1103 = 0;
    label = 53;
    break;
   }
   case 30:  {
    $1116 = 0;$1117 = 0;
    label = 54;
    break;
   }
   case 29:  {
    $1130 = 0;$1131 = 0;
    label = 55;
    break;
   }
   case 28:  {
    $1144 = 0;$1145 = 0;
    label = 56;
    break;
   }
   case 27:  {
    $1158 = 0;$1159 = 0;
    label = 57;
    break;
   }
   case 26:  {
    $1172 = 0;$1173 = 0;
    label = 58;
    break;
   }
   case 25:  {
    $1186 = 0;$1187 = 0;
    label = 59;
    break;
   }
   case 24:  {
    $1200 = 0;$1201 = 0;
    label = 60;
    break;
   }
   case 23:  {
    $1214 = 0;$1215 = 0;
    label = 61;
    break;
   }
   case 22:  {
    $1228 = 0;$1229 = 0;
    label = 62;
    break;
   }
   case 21:  {
    $1242 = 0;$1243 = 0;
    label = 63;
    break;
   }
   case 20:  {
    $1256 = 0;$1257 = 0;
    label = 64;
    break;
   }
   case 19:  {
    $1270 = 0;$1271 = 0;
    label = 65;
    break;
   }
   case 18:  {
    $1284 = 0;$1285 = 0;
    label = 66;
    break;
   }
   case 17:  {
    $1298 = 0;$1299 = 0;
    label = 67;
    break;
   }
   case 16:  {
    $1312 = 0;$1313 = 0;
    label = 68;
    break;
   }
   case 15:  {
    $1326 = 0;$1327 = 0;
    label = 69;
    break;
   }
   case 14:  {
    $1340 = 0;$1341 = 0;
    label = 70;
    break;
   }
   case 13:  {
    $1354 = 0;$1355 = 0;
    label = 71;
    break;
   }
   default: {
    $1504 = 0;$1505 = 0;
   }
   }
   if ((label|0) == 53) {
    label = 0;
    $1092 = HEAP32[$1052>>2]|0;
    $1093 = ($1092|0)<(0);
    $1094 = $1093 << 31 >> 31;
    $1095 = (($$12577613) + -31)|0;
    $1096 = (($5) + ($1095<<2)|0);
    $1097 = HEAP32[$1096>>2]|0;
    $1098 = ($1097|0)<(0);
    $1099 = $1098 << 31 >> 31;
    $1100 = (___muldi3(($1097|0),($1099|0),($1092|0),($1094|0))|0);
    $1101 = (getTempRet0() | 0);
    $1104 = (_i64Add(($1100|0),($1101|0),($1102|0),($1103|0))|0);
    $1105 = (getTempRet0() | 0);
    $1116 = $1104;$1117 = $1105;
    label = 54;
   }
   if ((label|0) == 54) {
    label = 0;
    $1106 = HEAP32[$1053>>2]|0;
    $1107 = ($1106|0)<(0);
    $1108 = $1107 << 31 >> 31;
    $1109 = (($$12577613) + -30)|0;
    $1110 = (($5) + ($1109<<2)|0);
    $1111 = HEAP32[$1110>>2]|0;
    $1112 = ($1111|0)<(0);
    $1113 = $1112 << 31 >> 31;
    $1114 = (___muldi3(($1111|0),($1113|0),($1106|0),($1108|0))|0);
    $1115 = (getTempRet0() | 0);
    $1118 = (_i64Add(($1114|0),($1115|0),($1116|0),($1117|0))|0);
    $1119 = (getTempRet0() | 0);
    $1130 = $1118;$1131 = $1119;
    label = 55;
   }
   if ((label|0) == 55) {
    label = 0;
    $1120 = HEAP32[$1054>>2]|0;
    $1121 = ($1120|0)<(0);
    $1122 = $1121 << 31 >> 31;
    $1123 = (($$12577613) + -29)|0;
    $1124 = (($5) + ($1123<<2)|0);
    $1125 = HEAP32[$1124>>2]|0;
    $1126 = ($1125|0)<(0);
    $1127 = $1126 << 31 >> 31;
    $1128 = (___muldi3(($1125|0),($1127|0),($1120|0),($1122|0))|0);
    $1129 = (getTempRet0() | 0);
    $1132 = (_i64Add(($1128|0),($1129|0),($1130|0),($1131|0))|0);
    $1133 = (getTempRet0() | 0);
    $1144 = $1132;$1145 = $1133;
    label = 56;
   }
   if ((label|0) == 56) {
    label = 0;
    $1134 = HEAP32[$1055>>2]|0;
    $1135 = ($1134|0)<(0);
    $1136 = $1135 << 31 >> 31;
    $1137 = (($$12577613) + -28)|0;
    $1138 = (($5) + ($1137<<2)|0);
    $1139 = HEAP32[$1138>>2]|0;
    $1140 = ($1139|0)<(0);
    $1141 = $1140 << 31 >> 31;
    $1142 = (___muldi3(($1139|0),($1141|0),($1134|0),($1136|0))|0);
    $1143 = (getTempRet0() | 0);
    $1146 = (_i64Add(($1142|0),($1143|0),($1144|0),($1145|0))|0);
    $1147 = (getTempRet0() | 0);
    $1158 = $1146;$1159 = $1147;
    label = 57;
   }
   if ((label|0) == 57) {
    label = 0;
    $1148 = HEAP32[$1056>>2]|0;
    $1149 = ($1148|0)<(0);
    $1150 = $1149 << 31 >> 31;
    $1151 = (($$12577613) + -27)|0;
    $1152 = (($5) + ($1151<<2)|0);
    $1153 = HEAP32[$1152>>2]|0;
    $1154 = ($1153|0)<(0);
    $1155 = $1154 << 31 >> 31;
    $1156 = (___muldi3(($1153|0),($1155|0),($1148|0),($1150|0))|0);
    $1157 = (getTempRet0() | 0);
    $1160 = (_i64Add(($1156|0),($1157|0),($1158|0),($1159|0))|0);
    $1161 = (getTempRet0() | 0);
    $1172 = $1160;$1173 = $1161;
    label = 58;
   }
   if ((label|0) == 58) {
    label = 0;
    $1162 = HEAP32[$1057>>2]|0;
    $1163 = ($1162|0)<(0);
    $1164 = $1163 << 31 >> 31;
    $1165 = (($$12577613) + -26)|0;
    $1166 = (($5) + ($1165<<2)|0);
    $1167 = HEAP32[$1166>>2]|0;
    $1168 = ($1167|0)<(0);
    $1169 = $1168 << 31 >> 31;
    $1170 = (___muldi3(($1167|0),($1169|0),($1162|0),($1164|0))|0);
    $1171 = (getTempRet0() | 0);
    $1174 = (_i64Add(($1170|0),($1171|0),($1172|0),($1173|0))|0);
    $1175 = (getTempRet0() | 0);
    $1186 = $1174;$1187 = $1175;
    label = 59;
   }
   if ((label|0) == 59) {
    label = 0;
    $1176 = HEAP32[$1058>>2]|0;
    $1177 = ($1176|0)<(0);
    $1178 = $1177 << 31 >> 31;
    $1179 = (($$12577613) + -25)|0;
    $1180 = (($5) + ($1179<<2)|0);
    $1181 = HEAP32[$1180>>2]|0;
    $1182 = ($1181|0)<(0);
    $1183 = $1182 << 31 >> 31;
    $1184 = (___muldi3(($1181|0),($1183|0),($1176|0),($1178|0))|0);
    $1185 = (getTempRet0() | 0);
    $1188 = (_i64Add(($1184|0),($1185|0),($1186|0),($1187|0))|0);
    $1189 = (getTempRet0() | 0);
    $1200 = $1188;$1201 = $1189;
    label = 60;
   }
   if ((label|0) == 60) {
    label = 0;
    $1190 = HEAP32[$1059>>2]|0;
    $1191 = ($1190|0)<(0);
    $1192 = $1191 << 31 >> 31;
    $1193 = (($$12577613) + -24)|0;
    $1194 = (($5) + ($1193<<2)|0);
    $1195 = HEAP32[$1194>>2]|0;
    $1196 = ($1195|0)<(0);
    $1197 = $1196 << 31 >> 31;
    $1198 = (___muldi3(($1195|0),($1197|0),($1190|0),($1192|0))|0);
    $1199 = (getTempRet0() | 0);
    $1202 = (_i64Add(($1198|0),($1199|0),($1200|0),($1201|0))|0);
    $1203 = (getTempRet0() | 0);
    $1214 = $1202;$1215 = $1203;
    label = 61;
   }
   if ((label|0) == 61) {
    label = 0;
    $1204 = HEAP32[$1060>>2]|0;
    $1205 = ($1204|0)<(0);
    $1206 = $1205 << 31 >> 31;
    $1207 = (($$12577613) + -23)|0;
    $1208 = (($5) + ($1207<<2)|0);
    $1209 = HEAP32[$1208>>2]|0;
    $1210 = ($1209|0)<(0);
    $1211 = $1210 << 31 >> 31;
    $1212 = (___muldi3(($1209|0),($1211|0),($1204|0),($1206|0))|0);
    $1213 = (getTempRet0() | 0);
    $1216 = (_i64Add(($1212|0),($1213|0),($1214|0),($1215|0))|0);
    $1217 = (getTempRet0() | 0);
    $1228 = $1216;$1229 = $1217;
    label = 62;
   }
   if ((label|0) == 62) {
    label = 0;
    $1218 = HEAP32[$1061>>2]|0;
    $1219 = ($1218|0)<(0);
    $1220 = $1219 << 31 >> 31;
    $1221 = (($$12577613) + -22)|0;
    $1222 = (($5) + ($1221<<2)|0);
    $1223 = HEAP32[$1222>>2]|0;
    $1224 = ($1223|0)<(0);
    $1225 = $1224 << 31 >> 31;
    $1226 = (___muldi3(($1223|0),($1225|0),($1218|0),($1220|0))|0);
    $1227 = (getTempRet0() | 0);
    $1230 = (_i64Add(($1226|0),($1227|0),($1228|0),($1229|0))|0);
    $1231 = (getTempRet0() | 0);
    $1242 = $1230;$1243 = $1231;
    label = 63;
   }
   if ((label|0) == 63) {
    label = 0;
    $1232 = HEAP32[$1062>>2]|0;
    $1233 = ($1232|0)<(0);
    $1234 = $1233 << 31 >> 31;
    $1235 = (($$12577613) + -21)|0;
    $1236 = (($5) + ($1235<<2)|0);
    $1237 = HEAP32[$1236>>2]|0;
    $1238 = ($1237|0)<(0);
    $1239 = $1238 << 31 >> 31;
    $1240 = (___muldi3(($1237|0),($1239|0),($1232|0),($1234|0))|0);
    $1241 = (getTempRet0() | 0);
    $1244 = (_i64Add(($1240|0),($1241|0),($1242|0),($1243|0))|0);
    $1245 = (getTempRet0() | 0);
    $1256 = $1244;$1257 = $1245;
    label = 64;
   }
   if ((label|0) == 64) {
    label = 0;
    $1246 = HEAP32[$1063>>2]|0;
    $1247 = ($1246|0)<(0);
    $1248 = $1247 << 31 >> 31;
    $1249 = (($$12577613) + -20)|0;
    $1250 = (($5) + ($1249<<2)|0);
    $1251 = HEAP32[$1250>>2]|0;
    $1252 = ($1251|0)<(0);
    $1253 = $1252 << 31 >> 31;
    $1254 = (___muldi3(($1251|0),($1253|0),($1246|0),($1248|0))|0);
    $1255 = (getTempRet0() | 0);
    $1258 = (_i64Add(($1254|0),($1255|0),($1256|0),($1257|0))|0);
    $1259 = (getTempRet0() | 0);
    $1270 = $1258;$1271 = $1259;
    label = 65;
   }
   if ((label|0) == 65) {
    label = 0;
    $1260 = HEAP32[$1064>>2]|0;
    $1261 = ($1260|0)<(0);
    $1262 = $1261 << 31 >> 31;
    $1263 = (($$12577613) + -19)|0;
    $1264 = (($5) + ($1263<<2)|0);
    $1265 = HEAP32[$1264>>2]|0;
    $1266 = ($1265|0)<(0);
    $1267 = $1266 << 31 >> 31;
    $1268 = (___muldi3(($1265|0),($1267|0),($1260|0),($1262|0))|0);
    $1269 = (getTempRet0() | 0);
    $1272 = (_i64Add(($1268|0),($1269|0),($1270|0),($1271|0))|0);
    $1273 = (getTempRet0() | 0);
    $1284 = $1272;$1285 = $1273;
    label = 66;
   }
   if ((label|0) == 66) {
    label = 0;
    $1274 = HEAP32[$1065>>2]|0;
    $1275 = ($1274|0)<(0);
    $1276 = $1275 << 31 >> 31;
    $1277 = (($$12577613) + -18)|0;
    $1278 = (($5) + ($1277<<2)|0);
    $1279 = HEAP32[$1278>>2]|0;
    $1280 = ($1279|0)<(0);
    $1281 = $1280 << 31 >> 31;
    $1282 = (___muldi3(($1279|0),($1281|0),($1274|0),($1276|0))|0);
    $1283 = (getTempRet0() | 0);
    $1286 = (_i64Add(($1282|0),($1283|0),($1284|0),($1285|0))|0);
    $1287 = (getTempRet0() | 0);
    $1298 = $1286;$1299 = $1287;
    label = 67;
   }
   if ((label|0) == 67) {
    label = 0;
    $1288 = HEAP32[$1066>>2]|0;
    $1289 = ($1288|0)<(0);
    $1290 = $1289 << 31 >> 31;
    $1291 = (($$12577613) + -17)|0;
    $1292 = (($5) + ($1291<<2)|0);
    $1293 = HEAP32[$1292>>2]|0;
    $1294 = ($1293|0)<(0);
    $1295 = $1294 << 31 >> 31;
    $1296 = (___muldi3(($1293|0),($1295|0),($1288|0),($1290|0))|0);
    $1297 = (getTempRet0() | 0);
    $1300 = (_i64Add(($1296|0),($1297|0),($1298|0),($1299|0))|0);
    $1301 = (getTempRet0() | 0);
    $1312 = $1300;$1313 = $1301;
    label = 68;
   }
   if ((label|0) == 68) {
    label = 0;
    $1302 = HEAP32[$1067>>2]|0;
    $1303 = ($1302|0)<(0);
    $1304 = $1303 << 31 >> 31;
    $1305 = (($$12577613) + -16)|0;
    $1306 = (($5) + ($1305<<2)|0);
    $1307 = HEAP32[$1306>>2]|0;
    $1308 = ($1307|0)<(0);
    $1309 = $1308 << 31 >> 31;
    $1310 = (___muldi3(($1307|0),($1309|0),($1302|0),($1304|0))|0);
    $1311 = (getTempRet0() | 0);
    $1314 = (_i64Add(($1310|0),($1311|0),($1312|0),($1313|0))|0);
    $1315 = (getTempRet0() | 0);
    $1326 = $1314;$1327 = $1315;
    label = 69;
   }
   if ((label|0) == 69) {
    label = 0;
    $1316 = HEAP32[$1068>>2]|0;
    $1317 = ($1316|0)<(0);
    $1318 = $1317 << 31 >> 31;
    $1319 = (($$12577613) + -15)|0;
    $1320 = (($5) + ($1319<<2)|0);
    $1321 = HEAP32[$1320>>2]|0;
    $1322 = ($1321|0)<(0);
    $1323 = $1322 << 31 >> 31;
    $1324 = (___muldi3(($1321|0),($1323|0),($1316|0),($1318|0))|0);
    $1325 = (getTempRet0() | 0);
    $1328 = (_i64Add(($1324|0),($1325|0),($1326|0),($1327|0))|0);
    $1329 = (getTempRet0() | 0);
    $1340 = $1328;$1341 = $1329;
    label = 70;
   }
   if ((label|0) == 70) {
    label = 0;
    $1330 = HEAP32[$1069>>2]|0;
    $1331 = ($1330|0)<(0);
    $1332 = $1331 << 31 >> 31;
    $1333 = (($$12577613) + -14)|0;
    $1334 = (($5) + ($1333<<2)|0);
    $1335 = HEAP32[$1334>>2]|0;
    $1336 = ($1335|0)<(0);
    $1337 = $1336 << 31 >> 31;
    $1338 = (___muldi3(($1335|0),($1337|0),($1330|0),($1332|0))|0);
    $1339 = (getTempRet0() | 0);
    $1342 = (_i64Add(($1338|0),($1339|0),($1340|0),($1341|0))|0);
    $1343 = (getTempRet0() | 0);
    $1354 = $1342;$1355 = $1343;
    label = 71;
   }
   if ((label|0) == 71) {
    label = 0;
    $1344 = HEAP32[$1070>>2]|0;
    $1345 = ($1344|0)<(0);
    $1346 = $1345 << 31 >> 31;
    $1347 = (($$12577613) + -13)|0;
    $1348 = (($5) + ($1347<<2)|0);
    $1349 = HEAP32[$1348>>2]|0;
    $1350 = ($1349|0)<(0);
    $1351 = $1350 << 31 >> 31;
    $1352 = (___muldi3(($1349|0),($1351|0),($1344|0),($1346|0))|0);
    $1353 = (getTempRet0() | 0);
    $1356 = (_i64Add(($1352|0),($1353|0),($1354|0),($1355|0))|0);
    $1357 = (getTempRet0() | 0);
    $1358 = HEAP32[$1071>>2]|0;
    $1359 = ($1358|0)<(0);
    $1360 = $1359 << 31 >> 31;
    $1361 = (($$12577613) + -12)|0;
    $1362 = (($5) + ($1361<<2)|0);
    $1363 = HEAP32[$1362>>2]|0;
    $1364 = ($1363|0)<(0);
    $1365 = $1364 << 31 >> 31;
    $1366 = (___muldi3(($1363|0),($1365|0),($1358|0),($1360|0))|0);
    $1367 = (getTempRet0() | 0);
    $1368 = (_i64Add(($1356|0),($1357|0),($1366|0),($1367|0))|0);
    $1369 = (getTempRet0() | 0);
    $1370 = HEAP32[$1072>>2]|0;
    $1371 = ($1370|0)<(0);
    $1372 = $1371 << 31 >> 31;
    $1373 = (($$12577613) + -11)|0;
    $1374 = (($5) + ($1373<<2)|0);
    $1375 = HEAP32[$1374>>2]|0;
    $1376 = ($1375|0)<(0);
    $1377 = $1376 << 31 >> 31;
    $1378 = (___muldi3(($1375|0),($1377|0),($1370|0),($1372|0))|0);
    $1379 = (getTempRet0() | 0);
    $1380 = (_i64Add(($1368|0),($1369|0),($1378|0),($1379|0))|0);
    $1381 = (getTempRet0() | 0);
    $1382 = HEAP32[$1073>>2]|0;
    $1383 = ($1382|0)<(0);
    $1384 = $1383 << 31 >> 31;
    $1385 = (($$12577613) + -10)|0;
    $1386 = (($5) + ($1385<<2)|0);
    $1387 = HEAP32[$1386>>2]|0;
    $1388 = ($1387|0)<(0);
    $1389 = $1388 << 31 >> 31;
    $1390 = (___muldi3(($1387|0),($1389|0),($1382|0),($1384|0))|0);
    $1391 = (getTempRet0() | 0);
    $1392 = (_i64Add(($1380|0),($1381|0),($1390|0),($1391|0))|0);
    $1393 = (getTempRet0() | 0);
    $1394 = HEAP32[$1074>>2]|0;
    $1395 = ($1394|0)<(0);
    $1396 = $1395 << 31 >> 31;
    $1397 = (($$12577613) + -9)|0;
    $1398 = (($5) + ($1397<<2)|0);
    $1399 = HEAP32[$1398>>2]|0;
    $1400 = ($1399|0)<(0);
    $1401 = $1400 << 31 >> 31;
    $1402 = (___muldi3(($1399|0),($1401|0),($1394|0),($1396|0))|0);
    $1403 = (getTempRet0() | 0);
    $1404 = (_i64Add(($1392|0),($1393|0),($1402|0),($1403|0))|0);
    $1405 = (getTempRet0() | 0);
    $1406 = HEAP32[$1075>>2]|0;
    $1407 = ($1406|0)<(0);
    $1408 = $1407 << 31 >> 31;
    $1409 = (($$12577613) + -8)|0;
    $1410 = (($5) + ($1409<<2)|0);
    $1411 = HEAP32[$1410>>2]|0;
    $1412 = ($1411|0)<(0);
    $1413 = $1412 << 31 >> 31;
    $1414 = (___muldi3(($1411|0),($1413|0),($1406|0),($1408|0))|0);
    $1415 = (getTempRet0() | 0);
    $1416 = (_i64Add(($1404|0),($1405|0),($1414|0),($1415|0))|0);
    $1417 = (getTempRet0() | 0);
    $1418 = HEAP32[$1076>>2]|0;
    $1419 = ($1418|0)<(0);
    $1420 = $1419 << 31 >> 31;
    $1421 = (($$12577613) + -7)|0;
    $1422 = (($5) + ($1421<<2)|0);
    $1423 = HEAP32[$1422>>2]|0;
    $1424 = ($1423|0)<(0);
    $1425 = $1424 << 31 >> 31;
    $1426 = (___muldi3(($1423|0),($1425|0),($1418|0),($1420|0))|0);
    $1427 = (getTempRet0() | 0);
    $1428 = (_i64Add(($1416|0),($1417|0),($1426|0),($1427|0))|0);
    $1429 = (getTempRet0() | 0);
    $1430 = HEAP32[$1077>>2]|0;
    $1431 = ($1430|0)<(0);
    $1432 = $1431 << 31 >> 31;
    $1433 = (($$12577613) + -6)|0;
    $1434 = (($5) + ($1433<<2)|0);
    $1435 = HEAP32[$1434>>2]|0;
    $1436 = ($1435|0)<(0);
    $1437 = $1436 << 31 >> 31;
    $1438 = (___muldi3(($1435|0),($1437|0),($1430|0),($1432|0))|0);
    $1439 = (getTempRet0() | 0);
    $1440 = (_i64Add(($1428|0),($1429|0),($1438|0),($1439|0))|0);
    $1441 = (getTempRet0() | 0);
    $1442 = HEAP32[$1078>>2]|0;
    $1443 = ($1442|0)<(0);
    $1444 = $1443 << 31 >> 31;
    $1445 = (($$12577613) + -5)|0;
    $1446 = (($5) + ($1445<<2)|0);
    $1447 = HEAP32[$1446>>2]|0;
    $1448 = ($1447|0)<(0);
    $1449 = $1448 << 31 >> 31;
    $1450 = (___muldi3(($1447|0),($1449|0),($1442|0),($1444|0))|0);
    $1451 = (getTempRet0() | 0);
    $1452 = (_i64Add(($1440|0),($1441|0),($1450|0),($1451|0))|0);
    $1453 = (getTempRet0() | 0);
    $1454 = HEAP32[$1079>>2]|0;
    $1455 = ($1454|0)<(0);
    $1456 = $1455 << 31 >> 31;
    $1457 = (($$12577613) + -4)|0;
    $1458 = (($5) + ($1457<<2)|0);
    $1459 = HEAP32[$1458>>2]|0;
    $1460 = ($1459|0)<(0);
    $1461 = $1460 << 31 >> 31;
    $1462 = (___muldi3(($1459|0),($1461|0),($1454|0),($1456|0))|0);
    $1463 = (getTempRet0() | 0);
    $1464 = (_i64Add(($1452|0),($1453|0),($1462|0),($1463|0))|0);
    $1465 = (getTempRet0() | 0);
    $1466 = HEAP32[$1080>>2]|0;
    $1467 = ($1466|0)<(0);
    $1468 = $1467 << 31 >> 31;
    $1469 = (($$12577613) + -3)|0;
    $1470 = (($5) + ($1469<<2)|0);
    $1471 = HEAP32[$1470>>2]|0;
    $1472 = ($1471|0)<(0);
    $1473 = $1472 << 31 >> 31;
    $1474 = (___muldi3(($1471|0),($1473|0),($1466|0),($1468|0))|0);
    $1475 = (getTempRet0() | 0);
    $1476 = (_i64Add(($1464|0),($1465|0),($1474|0),($1475|0))|0);
    $1477 = (getTempRet0() | 0);
    $1478 = HEAP32[$1081>>2]|0;
    $1479 = ($1478|0)<(0);
    $1480 = $1479 << 31 >> 31;
    $1481 = (($$12577613) + -2)|0;
    $1482 = (($5) + ($1481<<2)|0);
    $1483 = HEAP32[$1482>>2]|0;
    $1484 = ($1483|0)<(0);
    $1485 = $1484 << 31 >> 31;
    $1486 = (___muldi3(($1483|0),($1485|0),($1478|0),($1480|0))|0);
    $1487 = (getTempRet0() | 0);
    $1488 = (_i64Add(($1476|0),($1477|0),($1486|0),($1487|0))|0);
    $1489 = (getTempRet0() | 0);
    $1490 = HEAP32[$2>>2]|0;
    $1491 = ($1490|0)<(0);
    $1492 = $1491 << 31 >> 31;
    $1493 = (($$12577613) + -1)|0;
    $1494 = (($5) + ($1493<<2)|0);
    $1495 = HEAP32[$1494>>2]|0;
    $1496 = ($1495|0)<(0);
    $1497 = $1496 << 31 >> 31;
    $1498 = (___muldi3(($1495|0),($1497|0),($1490|0),($1492|0))|0);
    $1499 = (getTempRet0() | 0);
    $1500 = (_i64Add(($1488|0),($1489|0),($1498|0),($1499|0))|0);
    $1501 = (getTempRet0() | 0);
    $1504 = $1500;$1505 = $1501;
   }
   $1502 = (($0) + ($$12577613<<2)|0);
   $1503 = HEAP32[$1502>>2]|0;
   $1506 = (_bitshift64Ashr(($1504|0),($1505|0),($4|0))|0);
   $1507 = (getTempRet0() | 0);
   $1508 = (($1503) + ($1506))|0;
   $1509 = (($5) + ($$12577613<<2)|0);
   HEAP32[$1509>>2] = $1508;
   $1510 = (($$12577613) + 1)|0;
   $exitcond657 = ($1510|0)==($1|0);
   if ($exitcond657) {
    break;
   } else {
    $$12577613 = $1510;
   }
  }
  return;
 }
 $7 = ($3>>>0)>(8);
 if ($7) {
  $8 = ($3>>>0)>(10);
  if ($8) {
   $9 = ($3|0)==(12);
   $10 = ($1|0)>(0);
   if ($9) {
    if (!($10)) {
     return;
    }
    $11 = ((($2)) + 44|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)<(0);
    $14 = $13 << 31 >> 31;
    $15 = ((($2)) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)<(0);
    $18 = $17 << 31 >> 31;
    $19 = ((($2)) + 36|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)<(0);
    $22 = $21 << 31 >> 31;
    $23 = ((($2)) + 32|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)<(0);
    $26 = $25 << 31 >> 31;
    $27 = ((($2)) + 28|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($28|0)<(0);
    $30 = $29 << 31 >> 31;
    $31 = ((($2)) + 24|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ($32|0)<(0);
    $34 = $33 << 31 >> 31;
    $35 = ((($2)) + 20|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($36|0)<(0);
    $38 = $37 << 31 >> 31;
    $39 = ((($2)) + 16|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ($40|0)<(0);
    $42 = $41 << 31 >> 31;
    $43 = ((($2)) + 12|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ($44|0)<(0);
    $46 = $45 << 31 >> 31;
    $47 = ((($2)) + 8|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($48|0)<(0);
    $50 = $49 << 31 >> 31;
    $51 = ((($2)) + 4|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ($52|0)<(0);
    $54 = $53 << 31 >> 31;
    $55 = HEAP32[$2>>2]|0;
    $56 = ($55|0)<(0);
    $57 = $56 << 31 >> 31;
    $scevgep = ((($5)) + -4|0);
    $load_initial = HEAP32[$scevgep>>2]|0;
    $$0565590 = 0;$store_forwarded = $load_initial;
    while(1) {
     $58 = (($$0565590) + -12)|0;
     $59 = (($5) + ($58<<2)|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)<(0);
     $62 = $61 << 31 >> 31;
     $63 = (___muldi3(($60|0),($62|0),($12|0),($14|0))|0);
     $64 = (getTempRet0() | 0);
     $65 = (($$0565590) + -11)|0;
     $66 = (($5) + ($65<<2)|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ($67|0)<(0);
     $69 = $68 << 31 >> 31;
     $70 = (___muldi3(($67|0),($69|0),($16|0),($18|0))|0);
     $71 = (getTempRet0() | 0);
     $72 = (_i64Add(($70|0),($71|0),($63|0),($64|0))|0);
     $73 = (getTempRet0() | 0);
     $74 = (($$0565590) + -10)|0;
     $75 = (($5) + ($74<<2)|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = ($76|0)<(0);
     $78 = $77 << 31 >> 31;
     $79 = (___muldi3(($76|0),($78|0),($20|0),($22|0))|0);
     $80 = (getTempRet0() | 0);
     $81 = (_i64Add(($72|0),($73|0),($79|0),($80|0))|0);
     $82 = (getTempRet0() | 0);
     $83 = (($$0565590) + -9)|0;
     $84 = (($5) + ($83<<2)|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = (___muldi3(($85|0),($87|0),($24|0),($26|0))|0);
     $89 = (getTempRet0() | 0);
     $90 = (_i64Add(($81|0),($82|0),($88|0),($89|0))|0);
     $91 = (getTempRet0() | 0);
     $92 = (($$0565590) + -8)|0;
     $93 = (($5) + ($92<<2)|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = ($94|0)<(0);
     $96 = $95 << 31 >> 31;
     $97 = (___muldi3(($94|0),($96|0),($28|0),($30|0))|0);
     $98 = (getTempRet0() | 0);
     $99 = (_i64Add(($90|0),($91|0),($97|0),($98|0))|0);
     $100 = (getTempRet0() | 0);
     $101 = (($$0565590) + -7)|0;
     $102 = (($5) + ($101<<2)|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = ($103|0)<(0);
     $105 = $104 << 31 >> 31;
     $106 = (___muldi3(($103|0),($105|0),($32|0),($34|0))|0);
     $107 = (getTempRet0() | 0);
     $108 = (_i64Add(($99|0),($100|0),($106|0),($107|0))|0);
     $109 = (getTempRet0() | 0);
     $110 = (($$0565590) + -6)|0;
     $111 = (($5) + ($110<<2)|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112|0)<(0);
     $114 = $113 << 31 >> 31;
     $115 = (___muldi3(($112|0),($114|0),($36|0),($38|0))|0);
     $116 = (getTempRet0() | 0);
     $117 = (_i64Add(($108|0),($109|0),($115|0),($116|0))|0);
     $118 = (getTempRet0() | 0);
     $119 = (($$0565590) + -5)|0;
     $120 = (($5) + ($119<<2)|0);
     $121 = HEAP32[$120>>2]|0;
     $122 = ($121|0)<(0);
     $123 = $122 << 31 >> 31;
     $124 = (___muldi3(($121|0),($123|0),($40|0),($42|0))|0);
     $125 = (getTempRet0() | 0);
     $126 = (_i64Add(($117|0),($118|0),($124|0),($125|0))|0);
     $127 = (getTempRet0() | 0);
     $128 = (($$0565590) + -4)|0;
     $129 = (($5) + ($128<<2)|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($130|0)<(0);
     $132 = $131 << 31 >> 31;
     $133 = (___muldi3(($130|0),($132|0),($44|0),($46|0))|0);
     $134 = (getTempRet0() | 0);
     $135 = (_i64Add(($126|0),($127|0),($133|0),($134|0))|0);
     $136 = (getTempRet0() | 0);
     $137 = (($$0565590) + -3)|0;
     $138 = (($5) + ($137<<2)|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = ($139|0)<(0);
     $141 = $140 << 31 >> 31;
     $142 = (___muldi3(($139|0),($141|0),($48|0),($50|0))|0);
     $143 = (getTempRet0() | 0);
     $144 = (_i64Add(($135|0),($136|0),($142|0),($143|0))|0);
     $145 = (getTempRet0() | 0);
     $146 = (($$0565590) + -2)|0;
     $147 = (($5) + ($146<<2)|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)<(0);
     $150 = $149 << 31 >> 31;
     $151 = (___muldi3(($148|0),($150|0),($52|0),($54|0))|0);
     $152 = (getTempRet0() | 0);
     $153 = (_i64Add(($144|0),($145|0),($151|0),($152|0))|0);
     $154 = (getTempRet0() | 0);
     $155 = ($store_forwarded|0)<(0);
     $156 = $155 << 31 >> 31;
     $157 = (___muldi3(($store_forwarded|0),($156|0),($55|0),($57|0))|0);
     $158 = (getTempRet0() | 0);
     $159 = (_i64Add(($153|0),($154|0),($157|0),($158|0))|0);
     $160 = (getTempRet0() | 0);
     $161 = (($0) + ($$0565590<<2)|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = (_bitshift64Ashr(($159|0),($160|0),($4|0))|0);
     $164 = (getTempRet0() | 0);
     $165 = (($162) + ($163))|0;
     $166 = (($5) + ($$0565590<<2)|0);
     HEAP32[$166>>2] = $165;
     $167 = (($$0565590) + 1)|0;
     $exitcond = ($167|0)==($1|0);
     if ($exitcond) {
      break;
     } else {
      $$0565590 = $167;$store_forwarded = $165;
     }
    }
    return;
   } else {
    if (!($10)) {
     return;
    }
    $168 = ((($2)) + 40|0);
    $169 = HEAP32[$168>>2]|0;
    $170 = ($169|0)<(0);
    $171 = $170 << 31 >> 31;
    $172 = ((($2)) + 36|0);
    $173 = HEAP32[$172>>2]|0;
    $174 = ($173|0)<(0);
    $175 = $174 << 31 >> 31;
    $176 = ((($2)) + 32|0);
    $177 = HEAP32[$176>>2]|0;
    $178 = ($177|0)<(0);
    $179 = $178 << 31 >> 31;
    $180 = ((($2)) + 28|0);
    $181 = HEAP32[$180>>2]|0;
    $182 = ($181|0)<(0);
    $183 = $182 << 31 >> 31;
    $184 = ((($2)) + 24|0);
    $185 = HEAP32[$184>>2]|0;
    $186 = ($185|0)<(0);
    $187 = $186 << 31 >> 31;
    $188 = ((($2)) + 20|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = ($189|0)<(0);
    $191 = $190 << 31 >> 31;
    $192 = ((($2)) + 16|0);
    $193 = HEAP32[$192>>2]|0;
    $194 = ($193|0)<(0);
    $195 = $194 << 31 >> 31;
    $196 = ((($2)) + 12|0);
    $197 = HEAP32[$196>>2]|0;
    $198 = ($197|0)<(0);
    $199 = $198 << 31 >> 31;
    $200 = ((($2)) + 8|0);
    $201 = HEAP32[$200>>2]|0;
    $202 = ($201|0)<(0);
    $203 = $202 << 31 >> 31;
    $204 = ((($2)) + 4|0);
    $205 = HEAP32[$204>>2]|0;
    $206 = ($205|0)<(0);
    $207 = $206 << 31 >> 31;
    $208 = HEAP32[$2>>2]|0;
    $209 = ($208|0)<(0);
    $210 = $209 << 31 >> 31;
    $scevgep682 = ((($5)) + -4|0);
    $load_initial683 = HEAP32[$scevgep682>>2]|0;
    $$1566591 = 0;$store_forwarded684 = $load_initial683;
    while(1) {
     $211 = (($$1566591) + -11)|0;
     $212 = (($5) + ($211<<2)|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = ($213|0)<(0);
     $215 = $214 << 31 >> 31;
     $216 = (___muldi3(($213|0),($215|0),($169|0),($171|0))|0);
     $217 = (getTempRet0() | 0);
     $218 = (($$1566591) + -10)|0;
     $219 = (($5) + ($218<<2)|0);
     $220 = HEAP32[$219>>2]|0;
     $221 = ($220|0)<(0);
     $222 = $221 << 31 >> 31;
     $223 = (___muldi3(($220|0),($222|0),($173|0),($175|0))|0);
     $224 = (getTempRet0() | 0);
     $225 = (_i64Add(($223|0),($224|0),($216|0),($217|0))|0);
     $226 = (getTempRet0() | 0);
     $227 = (($$1566591) + -9)|0;
     $228 = (($5) + ($227<<2)|0);
     $229 = HEAP32[$228>>2]|0;
     $230 = ($229|0)<(0);
     $231 = $230 << 31 >> 31;
     $232 = (___muldi3(($229|0),($231|0),($177|0),($179|0))|0);
     $233 = (getTempRet0() | 0);
     $234 = (_i64Add(($225|0),($226|0),($232|0),($233|0))|0);
     $235 = (getTempRet0() | 0);
     $236 = (($$1566591) + -8)|0;
     $237 = (($5) + ($236<<2)|0);
     $238 = HEAP32[$237>>2]|0;
     $239 = ($238|0)<(0);
     $240 = $239 << 31 >> 31;
     $241 = (___muldi3(($238|0),($240|0),($181|0),($183|0))|0);
     $242 = (getTempRet0() | 0);
     $243 = (_i64Add(($234|0),($235|0),($241|0),($242|0))|0);
     $244 = (getTempRet0() | 0);
     $245 = (($$1566591) + -7)|0;
     $246 = (($5) + ($245<<2)|0);
     $247 = HEAP32[$246>>2]|0;
     $248 = ($247|0)<(0);
     $249 = $248 << 31 >> 31;
     $250 = (___muldi3(($247|0),($249|0),($185|0),($187|0))|0);
     $251 = (getTempRet0() | 0);
     $252 = (_i64Add(($243|0),($244|0),($250|0),($251|0))|0);
     $253 = (getTempRet0() | 0);
     $254 = (($$1566591) + -6)|0;
     $255 = (($5) + ($254<<2)|0);
     $256 = HEAP32[$255>>2]|0;
     $257 = ($256|0)<(0);
     $258 = $257 << 31 >> 31;
     $259 = (___muldi3(($256|0),($258|0),($189|0),($191|0))|0);
     $260 = (getTempRet0() | 0);
     $261 = (_i64Add(($252|0),($253|0),($259|0),($260|0))|0);
     $262 = (getTempRet0() | 0);
     $263 = (($$1566591) + -5)|0;
     $264 = (($5) + ($263<<2)|0);
     $265 = HEAP32[$264>>2]|0;
     $266 = ($265|0)<(0);
     $267 = $266 << 31 >> 31;
     $268 = (___muldi3(($265|0),($267|0),($193|0),($195|0))|0);
     $269 = (getTempRet0() | 0);
     $270 = (_i64Add(($261|0),($262|0),($268|0),($269|0))|0);
     $271 = (getTempRet0() | 0);
     $272 = (($$1566591) + -4)|0;
     $273 = (($5) + ($272<<2)|0);
     $274 = HEAP32[$273>>2]|0;
     $275 = ($274|0)<(0);
     $276 = $275 << 31 >> 31;
     $277 = (___muldi3(($274|0),($276|0),($197|0),($199|0))|0);
     $278 = (getTempRet0() | 0);
     $279 = (_i64Add(($270|0),($271|0),($277|0),($278|0))|0);
     $280 = (getTempRet0() | 0);
     $281 = (($$1566591) + -3)|0;
     $282 = (($5) + ($281<<2)|0);
     $283 = HEAP32[$282>>2]|0;
     $284 = ($283|0)<(0);
     $285 = $284 << 31 >> 31;
     $286 = (___muldi3(($283|0),($285|0),($201|0),($203|0))|0);
     $287 = (getTempRet0() | 0);
     $288 = (_i64Add(($279|0),($280|0),($286|0),($287|0))|0);
     $289 = (getTempRet0() | 0);
     $290 = (($$1566591) + -2)|0;
     $291 = (($5) + ($290<<2)|0);
     $292 = HEAP32[$291>>2]|0;
     $293 = ($292|0)<(0);
     $294 = $293 << 31 >> 31;
     $295 = (___muldi3(($292|0),($294|0),($205|0),($207|0))|0);
     $296 = (getTempRet0() | 0);
     $297 = (_i64Add(($288|0),($289|0),($295|0),($296|0))|0);
     $298 = (getTempRet0() | 0);
     $299 = ($store_forwarded684|0)<(0);
     $300 = $299 << 31 >> 31;
     $301 = (___muldi3(($store_forwarded684|0),($300|0),($208|0),($210|0))|0);
     $302 = (getTempRet0() | 0);
     $303 = (_i64Add(($297|0),($298|0),($301|0),($302|0))|0);
     $304 = (getTempRet0() | 0);
     $305 = (($0) + ($$1566591<<2)|0);
     $306 = HEAP32[$305>>2]|0;
     $307 = (_bitshift64Ashr(($303|0),($304|0),($4|0))|0);
     $308 = (getTempRet0() | 0);
     $309 = (($306) + ($307))|0;
     $310 = (($5) + ($$1566591<<2)|0);
     HEAP32[$310>>2] = $309;
     $311 = (($$1566591) + 1)|0;
     $exitcond646 = ($311|0)==($1|0);
     if ($exitcond646) {
      break;
     } else {
      $$1566591 = $311;$store_forwarded684 = $309;
     }
    }
    return;
   }
  } else {
   $312 = ($3|0)==(10);
   $313 = ($1|0)>(0);
   if ($312) {
    if (!($313)) {
     return;
    }
    $314 = ((($2)) + 36|0);
    $315 = HEAP32[$314>>2]|0;
    $316 = ($315|0)<(0);
    $317 = $316 << 31 >> 31;
    $318 = ((($2)) + 32|0);
    $319 = HEAP32[$318>>2]|0;
    $320 = ($319|0)<(0);
    $321 = $320 << 31 >> 31;
    $322 = ((($2)) + 28|0);
    $323 = HEAP32[$322>>2]|0;
    $324 = ($323|0)<(0);
    $325 = $324 << 31 >> 31;
    $326 = ((($2)) + 24|0);
    $327 = HEAP32[$326>>2]|0;
    $328 = ($327|0)<(0);
    $329 = $328 << 31 >> 31;
    $330 = ((($2)) + 20|0);
    $331 = HEAP32[$330>>2]|0;
    $332 = ($331|0)<(0);
    $333 = $332 << 31 >> 31;
    $334 = ((($2)) + 16|0);
    $335 = HEAP32[$334>>2]|0;
    $336 = ($335|0)<(0);
    $337 = $336 << 31 >> 31;
    $338 = ((($2)) + 12|0);
    $339 = HEAP32[$338>>2]|0;
    $340 = ($339|0)<(0);
    $341 = $340 << 31 >> 31;
    $342 = ((($2)) + 8|0);
    $343 = HEAP32[$342>>2]|0;
    $344 = ($343|0)<(0);
    $345 = $344 << 31 >> 31;
    $346 = ((($2)) + 4|0);
    $347 = HEAP32[$346>>2]|0;
    $348 = ($347|0)<(0);
    $349 = $348 << 31 >> 31;
    $350 = HEAP32[$2>>2]|0;
    $351 = ($350|0)<(0);
    $352 = $351 << 31 >> 31;
    $scevgep685 = ((($5)) + -4|0);
    $load_initial686 = HEAP32[$scevgep685>>2]|0;
    $$2567593 = 0;$store_forwarded687 = $load_initial686;
    while(1) {
     $353 = (($$2567593) + -10)|0;
     $354 = (($5) + ($353<<2)|0);
     $355 = HEAP32[$354>>2]|0;
     $356 = ($355|0)<(0);
     $357 = $356 << 31 >> 31;
     $358 = (___muldi3(($355|0),($357|0),($315|0),($317|0))|0);
     $359 = (getTempRet0() | 0);
     $360 = (($$2567593) + -9)|0;
     $361 = (($5) + ($360<<2)|0);
     $362 = HEAP32[$361>>2]|0;
     $363 = ($362|0)<(0);
     $364 = $363 << 31 >> 31;
     $365 = (___muldi3(($362|0),($364|0),($319|0),($321|0))|0);
     $366 = (getTempRet0() | 0);
     $367 = (_i64Add(($365|0),($366|0),($358|0),($359|0))|0);
     $368 = (getTempRet0() | 0);
     $369 = (($$2567593) + -8)|0;
     $370 = (($5) + ($369<<2)|0);
     $371 = HEAP32[$370>>2]|0;
     $372 = ($371|0)<(0);
     $373 = $372 << 31 >> 31;
     $374 = (___muldi3(($371|0),($373|0),($323|0),($325|0))|0);
     $375 = (getTempRet0() | 0);
     $376 = (_i64Add(($367|0),($368|0),($374|0),($375|0))|0);
     $377 = (getTempRet0() | 0);
     $378 = (($$2567593) + -7)|0;
     $379 = (($5) + ($378<<2)|0);
     $380 = HEAP32[$379>>2]|0;
     $381 = ($380|0)<(0);
     $382 = $381 << 31 >> 31;
     $383 = (___muldi3(($380|0),($382|0),($327|0),($329|0))|0);
     $384 = (getTempRet0() | 0);
     $385 = (_i64Add(($376|0),($377|0),($383|0),($384|0))|0);
     $386 = (getTempRet0() | 0);
     $387 = (($$2567593) + -6)|0;
     $388 = (($5) + ($387<<2)|0);
     $389 = HEAP32[$388>>2]|0;
     $390 = ($389|0)<(0);
     $391 = $390 << 31 >> 31;
     $392 = (___muldi3(($389|0),($391|0),($331|0),($333|0))|0);
     $393 = (getTempRet0() | 0);
     $394 = (_i64Add(($385|0),($386|0),($392|0),($393|0))|0);
     $395 = (getTempRet0() | 0);
     $396 = (($$2567593) + -5)|0;
     $397 = (($5) + ($396<<2)|0);
     $398 = HEAP32[$397>>2]|0;
     $399 = ($398|0)<(0);
     $400 = $399 << 31 >> 31;
     $401 = (___muldi3(($398|0),($400|0),($335|0),($337|0))|0);
     $402 = (getTempRet0() | 0);
     $403 = (_i64Add(($394|0),($395|0),($401|0),($402|0))|0);
     $404 = (getTempRet0() | 0);
     $405 = (($$2567593) + -4)|0;
     $406 = (($5) + ($405<<2)|0);
     $407 = HEAP32[$406>>2]|0;
     $408 = ($407|0)<(0);
     $409 = $408 << 31 >> 31;
     $410 = (___muldi3(($407|0),($409|0),($339|0),($341|0))|0);
     $411 = (getTempRet0() | 0);
     $412 = (_i64Add(($403|0),($404|0),($410|0),($411|0))|0);
     $413 = (getTempRet0() | 0);
     $414 = (($$2567593) + -3)|0;
     $415 = (($5) + ($414<<2)|0);
     $416 = HEAP32[$415>>2]|0;
     $417 = ($416|0)<(0);
     $418 = $417 << 31 >> 31;
     $419 = (___muldi3(($416|0),($418|0),($343|0),($345|0))|0);
     $420 = (getTempRet0() | 0);
     $421 = (_i64Add(($412|0),($413|0),($419|0),($420|0))|0);
     $422 = (getTempRet0() | 0);
     $423 = (($$2567593) + -2)|0;
     $424 = (($5) + ($423<<2)|0);
     $425 = HEAP32[$424>>2]|0;
     $426 = ($425|0)<(0);
     $427 = $426 << 31 >> 31;
     $428 = (___muldi3(($425|0),($427|0),($347|0),($349|0))|0);
     $429 = (getTempRet0() | 0);
     $430 = (_i64Add(($421|0),($422|0),($428|0),($429|0))|0);
     $431 = (getTempRet0() | 0);
     $432 = ($store_forwarded687|0)<(0);
     $433 = $432 << 31 >> 31;
     $434 = (___muldi3(($store_forwarded687|0),($433|0),($350|0),($352|0))|0);
     $435 = (getTempRet0() | 0);
     $436 = (_i64Add(($430|0),($431|0),($434|0),($435|0))|0);
     $437 = (getTempRet0() | 0);
     $438 = (($0) + ($$2567593<<2)|0);
     $439 = HEAP32[$438>>2]|0;
     $440 = (_bitshift64Ashr(($436|0),($437|0),($4|0))|0);
     $441 = (getTempRet0() | 0);
     $442 = (($439) + ($440))|0;
     $443 = (($5) + ($$2567593<<2)|0);
     HEAP32[$443>>2] = $442;
     $444 = (($$2567593) + 1)|0;
     $exitcond647 = ($444|0)==($1|0);
     if ($exitcond647) {
      break;
     } else {
      $$2567593 = $444;$store_forwarded687 = $442;
     }
    }
    return;
   } else {
    if (!($313)) {
     return;
    }
    $445 = ((($2)) + 32|0);
    $446 = HEAP32[$445>>2]|0;
    $447 = ($446|0)<(0);
    $448 = $447 << 31 >> 31;
    $449 = ((($2)) + 28|0);
    $450 = HEAP32[$449>>2]|0;
    $451 = ($450|0)<(0);
    $452 = $451 << 31 >> 31;
    $453 = ((($2)) + 24|0);
    $454 = HEAP32[$453>>2]|0;
    $455 = ($454|0)<(0);
    $456 = $455 << 31 >> 31;
    $457 = ((($2)) + 20|0);
    $458 = HEAP32[$457>>2]|0;
    $459 = ($458|0)<(0);
    $460 = $459 << 31 >> 31;
    $461 = ((($2)) + 16|0);
    $462 = HEAP32[$461>>2]|0;
    $463 = ($462|0)<(0);
    $464 = $463 << 31 >> 31;
    $465 = ((($2)) + 12|0);
    $466 = HEAP32[$465>>2]|0;
    $467 = ($466|0)<(0);
    $468 = $467 << 31 >> 31;
    $469 = ((($2)) + 8|0);
    $470 = HEAP32[$469>>2]|0;
    $471 = ($470|0)<(0);
    $472 = $471 << 31 >> 31;
    $473 = ((($2)) + 4|0);
    $474 = HEAP32[$473>>2]|0;
    $475 = ($474|0)<(0);
    $476 = $475 << 31 >> 31;
    $477 = HEAP32[$2>>2]|0;
    $478 = ($477|0)<(0);
    $479 = $478 << 31 >> 31;
    $scevgep688 = ((($5)) + -4|0);
    $load_initial689 = HEAP32[$scevgep688>>2]|0;
    $$3568595 = 0;$store_forwarded690 = $load_initial689;
    while(1) {
     $480 = (($$3568595) + -9)|0;
     $481 = (($5) + ($480<<2)|0);
     $482 = HEAP32[$481>>2]|0;
     $483 = ($482|0)<(0);
     $484 = $483 << 31 >> 31;
     $485 = (___muldi3(($482|0),($484|0),($446|0),($448|0))|0);
     $486 = (getTempRet0() | 0);
     $487 = (($$3568595) + -8)|0;
     $488 = (($5) + ($487<<2)|0);
     $489 = HEAP32[$488>>2]|0;
     $490 = ($489|0)<(0);
     $491 = $490 << 31 >> 31;
     $492 = (___muldi3(($489|0),($491|0),($450|0),($452|0))|0);
     $493 = (getTempRet0() | 0);
     $494 = (_i64Add(($492|0),($493|0),($485|0),($486|0))|0);
     $495 = (getTempRet0() | 0);
     $496 = (($$3568595) + -7)|0;
     $497 = (($5) + ($496<<2)|0);
     $498 = HEAP32[$497>>2]|0;
     $499 = ($498|0)<(0);
     $500 = $499 << 31 >> 31;
     $501 = (___muldi3(($498|0),($500|0),($454|0),($456|0))|0);
     $502 = (getTempRet0() | 0);
     $503 = (_i64Add(($494|0),($495|0),($501|0),($502|0))|0);
     $504 = (getTempRet0() | 0);
     $505 = (($$3568595) + -6)|0;
     $506 = (($5) + ($505<<2)|0);
     $507 = HEAP32[$506>>2]|0;
     $508 = ($507|0)<(0);
     $509 = $508 << 31 >> 31;
     $510 = (___muldi3(($507|0),($509|0),($458|0),($460|0))|0);
     $511 = (getTempRet0() | 0);
     $512 = (_i64Add(($503|0),($504|0),($510|0),($511|0))|0);
     $513 = (getTempRet0() | 0);
     $514 = (($$3568595) + -5)|0;
     $515 = (($5) + ($514<<2)|0);
     $516 = HEAP32[$515>>2]|0;
     $517 = ($516|0)<(0);
     $518 = $517 << 31 >> 31;
     $519 = (___muldi3(($516|0),($518|0),($462|0),($464|0))|0);
     $520 = (getTempRet0() | 0);
     $521 = (_i64Add(($512|0),($513|0),($519|0),($520|0))|0);
     $522 = (getTempRet0() | 0);
     $523 = (($$3568595) + -4)|0;
     $524 = (($5) + ($523<<2)|0);
     $525 = HEAP32[$524>>2]|0;
     $526 = ($525|0)<(0);
     $527 = $526 << 31 >> 31;
     $528 = (___muldi3(($525|0),($527|0),($466|0),($468|0))|0);
     $529 = (getTempRet0() | 0);
     $530 = (_i64Add(($521|0),($522|0),($528|0),($529|0))|0);
     $531 = (getTempRet0() | 0);
     $532 = (($$3568595) + -3)|0;
     $533 = (($5) + ($532<<2)|0);
     $534 = HEAP32[$533>>2]|0;
     $535 = ($534|0)<(0);
     $536 = $535 << 31 >> 31;
     $537 = (___muldi3(($534|0),($536|0),($470|0),($472|0))|0);
     $538 = (getTempRet0() | 0);
     $539 = (_i64Add(($530|0),($531|0),($537|0),($538|0))|0);
     $540 = (getTempRet0() | 0);
     $541 = (($$3568595) + -2)|0;
     $542 = (($5) + ($541<<2)|0);
     $543 = HEAP32[$542>>2]|0;
     $544 = ($543|0)<(0);
     $545 = $544 << 31 >> 31;
     $546 = (___muldi3(($543|0),($545|0),($474|0),($476|0))|0);
     $547 = (getTempRet0() | 0);
     $548 = (_i64Add(($539|0),($540|0),($546|0),($547|0))|0);
     $549 = (getTempRet0() | 0);
     $550 = ($store_forwarded690|0)<(0);
     $551 = $550 << 31 >> 31;
     $552 = (___muldi3(($store_forwarded690|0),($551|0),($477|0),($479|0))|0);
     $553 = (getTempRet0() | 0);
     $554 = (_i64Add(($548|0),($549|0),($552|0),($553|0))|0);
     $555 = (getTempRet0() | 0);
     $556 = (($0) + ($$3568595<<2)|0);
     $557 = HEAP32[$556>>2]|0;
     $558 = (_bitshift64Ashr(($554|0),($555|0),($4|0))|0);
     $559 = (getTempRet0() | 0);
     $560 = (($557) + ($558))|0;
     $561 = (($5) + ($$3568595<<2)|0);
     HEAP32[$561>>2] = $560;
     $562 = (($$3568595) + 1)|0;
     $exitcond648 = ($562|0)==($1|0);
     if ($exitcond648) {
      break;
     } else {
      $$3568595 = $562;$store_forwarded690 = $560;
     }
    }
    return;
   }
  }
 }
 $563 = ($3>>>0)>(4);
 if ($563) {
  $564 = ($3>>>0)>(6);
  if ($564) {
   $565 = ($3|0)==(8);
   $566 = ($1|0)>(0);
   if ($565) {
    if (!($566)) {
     return;
    }
    $567 = ((($2)) + 28|0);
    $568 = HEAP32[$567>>2]|0;
    $569 = ($568|0)<(0);
    $570 = $569 << 31 >> 31;
    $571 = ((($2)) + 24|0);
    $572 = HEAP32[$571>>2]|0;
    $573 = ($572|0)<(0);
    $574 = $573 << 31 >> 31;
    $575 = ((($2)) + 20|0);
    $576 = HEAP32[$575>>2]|0;
    $577 = ($576|0)<(0);
    $578 = $577 << 31 >> 31;
    $579 = ((($2)) + 16|0);
    $580 = HEAP32[$579>>2]|0;
    $581 = ($580|0)<(0);
    $582 = $581 << 31 >> 31;
    $583 = ((($2)) + 12|0);
    $584 = HEAP32[$583>>2]|0;
    $585 = ($584|0)<(0);
    $586 = $585 << 31 >> 31;
    $587 = ((($2)) + 8|0);
    $588 = HEAP32[$587>>2]|0;
    $589 = ($588|0)<(0);
    $590 = $589 << 31 >> 31;
    $591 = ((($2)) + 4|0);
    $592 = HEAP32[$591>>2]|0;
    $593 = ($592|0)<(0);
    $594 = $593 << 31 >> 31;
    $595 = HEAP32[$2>>2]|0;
    $596 = ($595|0)<(0);
    $597 = $596 << 31 >> 31;
    $scevgep691 = ((($5)) + -4|0);
    $load_initial692 = HEAP32[$scevgep691>>2]|0;
    $$4569597 = 0;$store_forwarded693 = $load_initial692;
    while(1) {
     $598 = (($$4569597) + -8)|0;
     $599 = (($5) + ($598<<2)|0);
     $600 = HEAP32[$599>>2]|0;
     $601 = ($600|0)<(0);
     $602 = $601 << 31 >> 31;
     $603 = (___muldi3(($600|0),($602|0),($568|0),($570|0))|0);
     $604 = (getTempRet0() | 0);
     $605 = (($$4569597) + -7)|0;
     $606 = (($5) + ($605<<2)|0);
     $607 = HEAP32[$606>>2]|0;
     $608 = ($607|0)<(0);
     $609 = $608 << 31 >> 31;
     $610 = (___muldi3(($607|0),($609|0),($572|0),($574|0))|0);
     $611 = (getTempRet0() | 0);
     $612 = (_i64Add(($610|0),($611|0),($603|0),($604|0))|0);
     $613 = (getTempRet0() | 0);
     $614 = (($$4569597) + -6)|0;
     $615 = (($5) + ($614<<2)|0);
     $616 = HEAP32[$615>>2]|0;
     $617 = ($616|0)<(0);
     $618 = $617 << 31 >> 31;
     $619 = (___muldi3(($616|0),($618|0),($576|0),($578|0))|0);
     $620 = (getTempRet0() | 0);
     $621 = (_i64Add(($612|0),($613|0),($619|0),($620|0))|0);
     $622 = (getTempRet0() | 0);
     $623 = (($$4569597) + -5)|0;
     $624 = (($5) + ($623<<2)|0);
     $625 = HEAP32[$624>>2]|0;
     $626 = ($625|0)<(0);
     $627 = $626 << 31 >> 31;
     $628 = (___muldi3(($625|0),($627|0),($580|0),($582|0))|0);
     $629 = (getTempRet0() | 0);
     $630 = (_i64Add(($621|0),($622|0),($628|0),($629|0))|0);
     $631 = (getTempRet0() | 0);
     $632 = (($$4569597) + -4)|0;
     $633 = (($5) + ($632<<2)|0);
     $634 = HEAP32[$633>>2]|0;
     $635 = ($634|0)<(0);
     $636 = $635 << 31 >> 31;
     $637 = (___muldi3(($634|0),($636|0),($584|0),($586|0))|0);
     $638 = (getTempRet0() | 0);
     $639 = (_i64Add(($630|0),($631|0),($637|0),($638|0))|0);
     $640 = (getTempRet0() | 0);
     $641 = (($$4569597) + -3)|0;
     $642 = (($5) + ($641<<2)|0);
     $643 = HEAP32[$642>>2]|0;
     $644 = ($643|0)<(0);
     $645 = $644 << 31 >> 31;
     $646 = (___muldi3(($643|0),($645|0),($588|0),($590|0))|0);
     $647 = (getTempRet0() | 0);
     $648 = (_i64Add(($639|0),($640|0),($646|0),($647|0))|0);
     $649 = (getTempRet0() | 0);
     $650 = (($$4569597) + -2)|0;
     $651 = (($5) + ($650<<2)|0);
     $652 = HEAP32[$651>>2]|0;
     $653 = ($652|0)<(0);
     $654 = $653 << 31 >> 31;
     $655 = (___muldi3(($652|0),($654|0),($592|0),($594|0))|0);
     $656 = (getTempRet0() | 0);
     $657 = (_i64Add(($648|0),($649|0),($655|0),($656|0))|0);
     $658 = (getTempRet0() | 0);
     $659 = ($store_forwarded693|0)<(0);
     $660 = $659 << 31 >> 31;
     $661 = (___muldi3(($store_forwarded693|0),($660|0),($595|0),($597|0))|0);
     $662 = (getTempRet0() | 0);
     $663 = (_i64Add(($657|0),($658|0),($661|0),($662|0))|0);
     $664 = (getTempRet0() | 0);
     $665 = (($0) + ($$4569597<<2)|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = (_bitshift64Ashr(($663|0),($664|0),($4|0))|0);
     $668 = (getTempRet0() | 0);
     $669 = (($666) + ($667))|0;
     $670 = (($5) + ($$4569597<<2)|0);
     HEAP32[$670>>2] = $669;
     $671 = (($$4569597) + 1)|0;
     $exitcond649 = ($671|0)==($1|0);
     if ($exitcond649) {
      break;
     } else {
      $$4569597 = $671;$store_forwarded693 = $669;
     }
    }
    return;
   } else {
    if (!($566)) {
     return;
    }
    $672 = ((($2)) + 24|0);
    $673 = HEAP32[$672>>2]|0;
    $674 = ($673|0)<(0);
    $675 = $674 << 31 >> 31;
    $676 = ((($2)) + 20|0);
    $677 = HEAP32[$676>>2]|0;
    $678 = ($677|0)<(0);
    $679 = $678 << 31 >> 31;
    $680 = ((($2)) + 16|0);
    $681 = HEAP32[$680>>2]|0;
    $682 = ($681|0)<(0);
    $683 = $682 << 31 >> 31;
    $684 = ((($2)) + 12|0);
    $685 = HEAP32[$684>>2]|0;
    $686 = ($685|0)<(0);
    $687 = $686 << 31 >> 31;
    $688 = ((($2)) + 8|0);
    $689 = HEAP32[$688>>2]|0;
    $690 = ($689|0)<(0);
    $691 = $690 << 31 >> 31;
    $692 = ((($2)) + 4|0);
    $693 = HEAP32[$692>>2]|0;
    $694 = ($693|0)<(0);
    $695 = $694 << 31 >> 31;
    $696 = HEAP32[$2>>2]|0;
    $697 = ($696|0)<(0);
    $698 = $697 << 31 >> 31;
    $scevgep694 = ((($5)) + -4|0);
    $load_initial695 = HEAP32[$scevgep694>>2]|0;
    $$5570599 = 0;$store_forwarded696 = $load_initial695;
    while(1) {
     $699 = (($$5570599) + -7)|0;
     $700 = (($5) + ($699<<2)|0);
     $701 = HEAP32[$700>>2]|0;
     $702 = ($701|0)<(0);
     $703 = $702 << 31 >> 31;
     $704 = (___muldi3(($701|0),($703|0),($673|0),($675|0))|0);
     $705 = (getTempRet0() | 0);
     $706 = (($$5570599) + -6)|0;
     $707 = (($5) + ($706<<2)|0);
     $708 = HEAP32[$707>>2]|0;
     $709 = ($708|0)<(0);
     $710 = $709 << 31 >> 31;
     $711 = (___muldi3(($708|0),($710|0),($677|0),($679|0))|0);
     $712 = (getTempRet0() | 0);
     $713 = (_i64Add(($711|0),($712|0),($704|0),($705|0))|0);
     $714 = (getTempRet0() | 0);
     $715 = (($$5570599) + -5)|0;
     $716 = (($5) + ($715<<2)|0);
     $717 = HEAP32[$716>>2]|0;
     $718 = ($717|0)<(0);
     $719 = $718 << 31 >> 31;
     $720 = (___muldi3(($717|0),($719|0),($681|0),($683|0))|0);
     $721 = (getTempRet0() | 0);
     $722 = (_i64Add(($713|0),($714|0),($720|0),($721|0))|0);
     $723 = (getTempRet0() | 0);
     $724 = (($$5570599) + -4)|0;
     $725 = (($5) + ($724<<2)|0);
     $726 = HEAP32[$725>>2]|0;
     $727 = ($726|0)<(0);
     $728 = $727 << 31 >> 31;
     $729 = (___muldi3(($726|0),($728|0),($685|0),($687|0))|0);
     $730 = (getTempRet0() | 0);
     $731 = (_i64Add(($722|0),($723|0),($729|0),($730|0))|0);
     $732 = (getTempRet0() | 0);
     $733 = (($$5570599) + -3)|0;
     $734 = (($5) + ($733<<2)|0);
     $735 = HEAP32[$734>>2]|0;
     $736 = ($735|0)<(0);
     $737 = $736 << 31 >> 31;
     $738 = (___muldi3(($735|0),($737|0),($689|0),($691|0))|0);
     $739 = (getTempRet0() | 0);
     $740 = (_i64Add(($731|0),($732|0),($738|0),($739|0))|0);
     $741 = (getTempRet0() | 0);
     $742 = (($$5570599) + -2)|0;
     $743 = (($5) + ($742<<2)|0);
     $744 = HEAP32[$743>>2]|0;
     $745 = ($744|0)<(0);
     $746 = $745 << 31 >> 31;
     $747 = (___muldi3(($744|0),($746|0),($693|0),($695|0))|0);
     $748 = (getTempRet0() | 0);
     $749 = (_i64Add(($740|0),($741|0),($747|0),($748|0))|0);
     $750 = (getTempRet0() | 0);
     $751 = ($store_forwarded696|0)<(0);
     $752 = $751 << 31 >> 31;
     $753 = (___muldi3(($store_forwarded696|0),($752|0),($696|0),($698|0))|0);
     $754 = (getTempRet0() | 0);
     $755 = (_i64Add(($749|0),($750|0),($753|0),($754|0))|0);
     $756 = (getTempRet0() | 0);
     $757 = (($0) + ($$5570599<<2)|0);
     $758 = HEAP32[$757>>2]|0;
     $759 = (_bitshift64Ashr(($755|0),($756|0),($4|0))|0);
     $760 = (getTempRet0() | 0);
     $761 = (($758) + ($759))|0;
     $762 = (($5) + ($$5570599<<2)|0);
     HEAP32[$762>>2] = $761;
     $763 = (($$5570599) + 1)|0;
     $exitcond650 = ($763|0)==($1|0);
     if ($exitcond650) {
      break;
     } else {
      $$5570599 = $763;$store_forwarded696 = $761;
     }
    }
    return;
   }
  } else {
   $764 = ($3|0)==(6);
   $765 = ($1|0)>(0);
   if ($764) {
    if (!($765)) {
     return;
    }
    $766 = ((($2)) + 20|0);
    $767 = HEAP32[$766>>2]|0;
    $768 = ($767|0)<(0);
    $769 = $768 << 31 >> 31;
    $770 = ((($2)) + 16|0);
    $771 = HEAP32[$770>>2]|0;
    $772 = ($771|0)<(0);
    $773 = $772 << 31 >> 31;
    $774 = ((($2)) + 12|0);
    $775 = HEAP32[$774>>2]|0;
    $776 = ($775|0)<(0);
    $777 = $776 << 31 >> 31;
    $778 = ((($2)) + 8|0);
    $779 = HEAP32[$778>>2]|0;
    $780 = ($779|0)<(0);
    $781 = $780 << 31 >> 31;
    $782 = ((($2)) + 4|0);
    $783 = HEAP32[$782>>2]|0;
    $784 = ($783|0)<(0);
    $785 = $784 << 31 >> 31;
    $786 = HEAP32[$2>>2]|0;
    $787 = ($786|0)<(0);
    $788 = $787 << 31 >> 31;
    $scevgep697 = ((($5)) + -4|0);
    $load_initial698 = HEAP32[$scevgep697>>2]|0;
    $$6571601 = 0;$store_forwarded699 = $load_initial698;
    while(1) {
     $789 = (($$6571601) + -6)|0;
     $790 = (($5) + ($789<<2)|0);
     $791 = HEAP32[$790>>2]|0;
     $792 = ($791|0)<(0);
     $793 = $792 << 31 >> 31;
     $794 = (___muldi3(($791|0),($793|0),($767|0),($769|0))|0);
     $795 = (getTempRet0() | 0);
     $796 = (($$6571601) + -5)|0;
     $797 = (($5) + ($796<<2)|0);
     $798 = HEAP32[$797>>2]|0;
     $799 = ($798|0)<(0);
     $800 = $799 << 31 >> 31;
     $801 = (___muldi3(($798|0),($800|0),($771|0),($773|0))|0);
     $802 = (getTempRet0() | 0);
     $803 = (_i64Add(($801|0),($802|0),($794|0),($795|0))|0);
     $804 = (getTempRet0() | 0);
     $805 = (($$6571601) + -4)|0;
     $806 = (($5) + ($805<<2)|0);
     $807 = HEAP32[$806>>2]|0;
     $808 = ($807|0)<(0);
     $809 = $808 << 31 >> 31;
     $810 = (___muldi3(($807|0),($809|0),($775|0),($777|0))|0);
     $811 = (getTempRet0() | 0);
     $812 = (_i64Add(($803|0),($804|0),($810|0),($811|0))|0);
     $813 = (getTempRet0() | 0);
     $814 = (($$6571601) + -3)|0;
     $815 = (($5) + ($814<<2)|0);
     $816 = HEAP32[$815>>2]|0;
     $817 = ($816|0)<(0);
     $818 = $817 << 31 >> 31;
     $819 = (___muldi3(($816|0),($818|0),($779|0),($781|0))|0);
     $820 = (getTempRet0() | 0);
     $821 = (_i64Add(($812|0),($813|0),($819|0),($820|0))|0);
     $822 = (getTempRet0() | 0);
     $823 = (($$6571601) + -2)|0;
     $824 = (($5) + ($823<<2)|0);
     $825 = HEAP32[$824>>2]|0;
     $826 = ($825|0)<(0);
     $827 = $826 << 31 >> 31;
     $828 = (___muldi3(($825|0),($827|0),($783|0),($785|0))|0);
     $829 = (getTempRet0() | 0);
     $830 = (_i64Add(($821|0),($822|0),($828|0),($829|0))|0);
     $831 = (getTempRet0() | 0);
     $832 = ($store_forwarded699|0)<(0);
     $833 = $832 << 31 >> 31;
     $834 = (___muldi3(($store_forwarded699|0),($833|0),($786|0),($788|0))|0);
     $835 = (getTempRet0() | 0);
     $836 = (_i64Add(($830|0),($831|0),($834|0),($835|0))|0);
     $837 = (getTempRet0() | 0);
     $838 = (($0) + ($$6571601<<2)|0);
     $839 = HEAP32[$838>>2]|0;
     $840 = (_bitshift64Ashr(($836|0),($837|0),($4|0))|0);
     $841 = (getTempRet0() | 0);
     $842 = (($839) + ($840))|0;
     $843 = (($5) + ($$6571601<<2)|0);
     HEAP32[$843>>2] = $842;
     $844 = (($$6571601) + 1)|0;
     $exitcond651 = ($844|0)==($1|0);
     if ($exitcond651) {
      break;
     } else {
      $$6571601 = $844;$store_forwarded699 = $842;
     }
    }
    return;
   } else {
    if (!($765)) {
     return;
    }
    $845 = ((($2)) + 16|0);
    $846 = HEAP32[$845>>2]|0;
    $847 = ($846|0)<(0);
    $848 = $847 << 31 >> 31;
    $849 = ((($2)) + 12|0);
    $850 = HEAP32[$849>>2]|0;
    $851 = ($850|0)<(0);
    $852 = $851 << 31 >> 31;
    $853 = ((($2)) + 8|0);
    $854 = HEAP32[$853>>2]|0;
    $855 = ($854|0)<(0);
    $856 = $855 << 31 >> 31;
    $857 = ((($2)) + 4|0);
    $858 = HEAP32[$857>>2]|0;
    $859 = ($858|0)<(0);
    $860 = $859 << 31 >> 31;
    $861 = HEAP32[$2>>2]|0;
    $862 = ($861|0)<(0);
    $863 = $862 << 31 >> 31;
    $scevgep700 = ((($5)) + -4|0);
    $load_initial701 = HEAP32[$scevgep700>>2]|0;
    $$7572603 = 0;$store_forwarded702 = $load_initial701;
    while(1) {
     $864 = (($$7572603) + -5)|0;
     $865 = (($5) + ($864<<2)|0);
     $866 = HEAP32[$865>>2]|0;
     $867 = ($866|0)<(0);
     $868 = $867 << 31 >> 31;
     $869 = (___muldi3(($866|0),($868|0),($846|0),($848|0))|0);
     $870 = (getTempRet0() | 0);
     $871 = (($$7572603) + -4)|0;
     $872 = (($5) + ($871<<2)|0);
     $873 = HEAP32[$872>>2]|0;
     $874 = ($873|0)<(0);
     $875 = $874 << 31 >> 31;
     $876 = (___muldi3(($873|0),($875|0),($850|0),($852|0))|0);
     $877 = (getTempRet0() | 0);
     $878 = (_i64Add(($876|0),($877|0),($869|0),($870|0))|0);
     $879 = (getTempRet0() | 0);
     $880 = (($$7572603) + -3)|0;
     $881 = (($5) + ($880<<2)|0);
     $882 = HEAP32[$881>>2]|0;
     $883 = ($882|0)<(0);
     $884 = $883 << 31 >> 31;
     $885 = (___muldi3(($882|0),($884|0),($854|0),($856|0))|0);
     $886 = (getTempRet0() | 0);
     $887 = (_i64Add(($878|0),($879|0),($885|0),($886|0))|0);
     $888 = (getTempRet0() | 0);
     $889 = (($$7572603) + -2)|0;
     $890 = (($5) + ($889<<2)|0);
     $891 = HEAP32[$890>>2]|0;
     $892 = ($891|0)<(0);
     $893 = $892 << 31 >> 31;
     $894 = (___muldi3(($891|0),($893|0),($858|0),($860|0))|0);
     $895 = (getTempRet0() | 0);
     $896 = (_i64Add(($887|0),($888|0),($894|0),($895|0))|0);
     $897 = (getTempRet0() | 0);
     $898 = ($store_forwarded702|0)<(0);
     $899 = $898 << 31 >> 31;
     $900 = (___muldi3(($store_forwarded702|0),($899|0),($861|0),($863|0))|0);
     $901 = (getTempRet0() | 0);
     $902 = (_i64Add(($896|0),($897|0),($900|0),($901|0))|0);
     $903 = (getTempRet0() | 0);
     $904 = (($0) + ($$7572603<<2)|0);
     $905 = HEAP32[$904>>2]|0;
     $906 = (_bitshift64Ashr(($902|0),($903|0),($4|0))|0);
     $907 = (getTempRet0() | 0);
     $908 = (($905) + ($906))|0;
     $909 = (($5) + ($$7572603<<2)|0);
     HEAP32[$909>>2] = $908;
     $910 = (($$7572603) + 1)|0;
     $exitcond652 = ($910|0)==($1|0);
     if ($exitcond652) {
      break;
     } else {
      $$7572603 = $910;$store_forwarded702 = $908;
     }
    }
    return;
   }
  }
 } else {
  $911 = ($3>>>0)>(2);
  if ($911) {
   $912 = ($3|0)==(4);
   $913 = ($1|0)>(0);
   if ($912) {
    if (!($913)) {
     return;
    }
    $914 = ((($2)) + 12|0);
    $915 = HEAP32[$914>>2]|0;
    $916 = ($915|0)<(0);
    $917 = $916 << 31 >> 31;
    $918 = ((($2)) + 8|0);
    $919 = HEAP32[$918>>2]|0;
    $920 = ($919|0)<(0);
    $921 = $920 << 31 >> 31;
    $922 = ((($2)) + 4|0);
    $923 = HEAP32[$922>>2]|0;
    $924 = ($923|0)<(0);
    $925 = $924 << 31 >> 31;
    $926 = HEAP32[$2>>2]|0;
    $927 = ($926|0)<(0);
    $928 = $927 << 31 >> 31;
    $scevgep703 = ((($5)) + -4|0);
    $load_initial704 = HEAP32[$scevgep703>>2]|0;
    $$8573605 = 0;$store_forwarded705 = $load_initial704;
    while(1) {
     $929 = (($$8573605) + -4)|0;
     $930 = (($5) + ($929<<2)|0);
     $931 = HEAP32[$930>>2]|0;
     $932 = ($931|0)<(0);
     $933 = $932 << 31 >> 31;
     $934 = (___muldi3(($931|0),($933|0),($915|0),($917|0))|0);
     $935 = (getTempRet0() | 0);
     $936 = (($$8573605) + -3)|0;
     $937 = (($5) + ($936<<2)|0);
     $938 = HEAP32[$937>>2]|0;
     $939 = ($938|0)<(0);
     $940 = $939 << 31 >> 31;
     $941 = (___muldi3(($938|0),($940|0),($919|0),($921|0))|0);
     $942 = (getTempRet0() | 0);
     $943 = (_i64Add(($941|0),($942|0),($934|0),($935|0))|0);
     $944 = (getTempRet0() | 0);
     $945 = (($$8573605) + -2)|0;
     $946 = (($5) + ($945<<2)|0);
     $947 = HEAP32[$946>>2]|0;
     $948 = ($947|0)<(0);
     $949 = $948 << 31 >> 31;
     $950 = (___muldi3(($947|0),($949|0),($923|0),($925|0))|0);
     $951 = (getTempRet0() | 0);
     $952 = (_i64Add(($943|0),($944|0),($950|0),($951|0))|0);
     $953 = (getTempRet0() | 0);
     $954 = ($store_forwarded705|0)<(0);
     $955 = $954 << 31 >> 31;
     $956 = (___muldi3(($store_forwarded705|0),($955|0),($926|0),($928|0))|0);
     $957 = (getTempRet0() | 0);
     $958 = (_i64Add(($952|0),($953|0),($956|0),($957|0))|0);
     $959 = (getTempRet0() | 0);
     $960 = (($0) + ($$8573605<<2)|0);
     $961 = HEAP32[$960>>2]|0;
     $962 = (_bitshift64Ashr(($958|0),($959|0),($4|0))|0);
     $963 = (getTempRet0() | 0);
     $964 = (($961) + ($962))|0;
     $965 = (($5) + ($$8573605<<2)|0);
     HEAP32[$965>>2] = $964;
     $966 = (($$8573605) + 1)|0;
     $exitcond653 = ($966|0)==($1|0);
     if ($exitcond653) {
      break;
     } else {
      $$8573605 = $966;$store_forwarded705 = $964;
     }
    }
    return;
   } else {
    if (!($913)) {
     return;
    }
    $967 = ((($2)) + 8|0);
    $968 = HEAP32[$967>>2]|0;
    $969 = ($968|0)<(0);
    $970 = $969 << 31 >> 31;
    $971 = ((($2)) + 4|0);
    $972 = HEAP32[$971>>2]|0;
    $973 = ($972|0)<(0);
    $974 = $973 << 31 >> 31;
    $975 = HEAP32[$2>>2]|0;
    $976 = ($975|0)<(0);
    $977 = $976 << 31 >> 31;
    $scevgep706 = ((($5)) + -4|0);
    $load_initial707 = HEAP32[$scevgep706>>2]|0;
    $$9574607 = 0;$store_forwarded708 = $load_initial707;
    while(1) {
     $978 = (($$9574607) + -3)|0;
     $979 = (($5) + ($978<<2)|0);
     $980 = HEAP32[$979>>2]|0;
     $981 = ($980|0)<(0);
     $982 = $981 << 31 >> 31;
     $983 = (___muldi3(($980|0),($982|0),($968|0),($970|0))|0);
     $984 = (getTempRet0() | 0);
     $985 = (($$9574607) + -2)|0;
     $986 = (($5) + ($985<<2)|0);
     $987 = HEAP32[$986>>2]|0;
     $988 = ($987|0)<(0);
     $989 = $988 << 31 >> 31;
     $990 = (___muldi3(($987|0),($989|0),($972|0),($974|0))|0);
     $991 = (getTempRet0() | 0);
     $992 = (_i64Add(($990|0),($991|0),($983|0),($984|0))|0);
     $993 = (getTempRet0() | 0);
     $994 = ($store_forwarded708|0)<(0);
     $995 = $994 << 31 >> 31;
     $996 = (___muldi3(($store_forwarded708|0),($995|0),($975|0),($977|0))|0);
     $997 = (getTempRet0() | 0);
     $998 = (_i64Add(($992|0),($993|0),($996|0),($997|0))|0);
     $999 = (getTempRet0() | 0);
     $1000 = (($0) + ($$9574607<<2)|0);
     $1001 = HEAP32[$1000>>2]|0;
     $1002 = (_bitshift64Ashr(($998|0),($999|0),($4|0))|0);
     $1003 = (getTempRet0() | 0);
     $1004 = (($1001) + ($1002))|0;
     $1005 = (($5) + ($$9574607<<2)|0);
     HEAP32[$1005>>2] = $1004;
     $1006 = (($$9574607) + 1)|0;
     $exitcond654 = ($1006|0)==($1|0);
     if ($exitcond654) {
      break;
     } else {
      $$9574607 = $1006;$store_forwarded708 = $1004;
     }
    }
    return;
   }
  } else {
   $1007 = ($3|0)==(2);
   $1008 = ($1|0)>(0);
   if ($1007) {
    if (!($1008)) {
     return;
    }
    $1009 = ((($2)) + 4|0);
    $1010 = HEAP32[$1009>>2]|0;
    $1011 = ($1010|0)<(0);
    $1012 = $1011 << 31 >> 31;
    $1013 = HEAP32[$2>>2]|0;
    $1014 = ($1013|0)<(0);
    $1015 = $1014 << 31 >> 31;
    $scevgep709 = ((($5)) + -4|0);
    $load_initial710 = HEAP32[$scevgep709>>2]|0;
    $$10575609 = 0;$store_forwarded711 = $load_initial710;
    while(1) {
     $1016 = (($$10575609) + -2)|0;
     $1017 = (($5) + ($1016<<2)|0);
     $1018 = HEAP32[$1017>>2]|0;
     $1019 = ($1018|0)<(0);
     $1020 = $1019 << 31 >> 31;
     $1021 = (___muldi3(($1018|0),($1020|0),($1010|0),($1012|0))|0);
     $1022 = (getTempRet0() | 0);
     $1023 = ($store_forwarded711|0)<(0);
     $1024 = $1023 << 31 >> 31;
     $1025 = (___muldi3(($store_forwarded711|0),($1024|0),($1013|0),($1015|0))|0);
     $1026 = (getTempRet0() | 0);
     $1027 = (_i64Add(($1025|0),($1026|0),($1021|0),($1022|0))|0);
     $1028 = (getTempRet0() | 0);
     $1029 = (($0) + ($$10575609<<2)|0);
     $1030 = HEAP32[$1029>>2]|0;
     $1031 = (_bitshift64Ashr(($1027|0),($1028|0),($4|0))|0);
     $1032 = (getTempRet0() | 0);
     $1033 = (($1030) + ($1031))|0;
     $1034 = (($5) + ($$10575609<<2)|0);
     HEAP32[$1034>>2] = $1033;
     $1035 = (($$10575609) + 1)|0;
     $exitcond655 = ($1035|0)==($1|0);
     if ($exitcond655) {
      break;
     } else {
      $$10575609 = $1035;$store_forwarded711 = $1033;
     }
    }
    return;
   } else {
    if (!($1008)) {
     return;
    }
    $1036 = HEAP32[$2>>2]|0;
    $1037 = ($1036|0)<(0);
    $1038 = $1037 << 31 >> 31;
    $scevgep712 = ((($5)) + -4|0);
    $load_initial713 = HEAP32[$scevgep712>>2]|0;
    $$11576611 = 0;$store_forwarded714 = $load_initial713;
    while(1) {
     $1039 = (($0) + ($$11576611<<2)|0);
     $1040 = HEAP32[$1039>>2]|0;
     $1041 = ($store_forwarded714|0)<(0);
     $1042 = $1041 << 31 >> 31;
     $1043 = (___muldi3(($store_forwarded714|0),($1042|0),($1036|0),($1038|0))|0);
     $1044 = (getTempRet0() | 0);
     $1045 = (_bitshift64Ashr(($1043|0),($1044|0),($4|0))|0);
     $1046 = (getTempRet0() | 0);
     $1047 = (($1040) + ($1045))|0;
     $1048 = (($5) + ($$11576611<<2)|0);
     HEAP32[$1048>>2] = $1047;
     $1049 = (($$11576611) + 1)|0;
     $exitcond656 = ($1049|0)==($1|0);
     if ($exitcond656) {
      break;
     } else {
      $$11576611 = $1049;$store_forwarded714 = $1047;
     }
    }
    return;
   }
  }
 }
}
function _FLAC__lpc_compute_expected_bits_per_residual_sample($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+($1>>>0));
 $3 = 0.5 / $2;
 $4 = (+_FLAC__lpc_compute_expected_bits_per_residual_sample_with_error_scale($0,$3));
 return (+$4);
}
function _FLAC__lpc_compute_expected_bits_per_residual_sample_with_error_scale($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$ = 0.0, $$1 = 0.0, $$8 = 0.0, $$inv = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $0 > 0.0;
 if ($2) {
  $3 = $0 * $1;
  $4 = (+Math_log((+$3)));
  $5 = $4 * 0.5;
  $6 = $5 / 0.69314718055994529;
  $$inv = $6 >= 0.0;
  $$ = $$inv ? $6 : 0.0;
  $$1 = $$;
  return (+$$1);
 } else {
  $7 = $0 < 0.0;
  $$8 = $7 ? 1.0000000000000001E+32 : 0.0;
  $$1 = $$8;
  return (+$$1);
 }
 return +(0.0);
}
function _FLAC__lpc_compute_best_order($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$02733 = 0.0, $$02832 = 0, $$029$lcssa = 0, $$02931 = 0, $$034 = 0, $$1 = 0.0, $$130 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0.0, $exitcond = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (+($2>>>0));
 $5 = 0.5 / $4;
 $6 = ($1|0)==(0);
 if ($6) {
  $$029$lcssa = 1;
  return ($$029$lcssa|0);
 }
 $$02733 = 4294967295.0;$$02832 = 0;$$02931 = 0;$$034 = 1;
 while(1) {
  $7 = (($0) + ($$02832<<3)|0);
  $8 = +HEAPF64[$7>>3];
  $9 = (+_FLAC__lpc_compute_expected_bits_per_residual_sample_with_error_scale($8,$5));
  $10 = (($2) - ($$034))|0;
  $11 = (+($10>>>0));
  $12 = $9 * $11;
  $13 = Math_imul($$034, $3)|0;
  $14 = (+($13>>>0));
  $15 = $12 + $14;
  $16 = $15 < $$02733;
  $$130 = $16 ? $$02832 : $$02931;
  $$1 = $16 ? $15 : $$02733;
  $17 = (($$02832) + 1)|0;
  $18 = (($$034) + 1)|0;
  $exitcond = ($17|0)==($1|0);
  if ($exitcond) {
   break;
  } else {
   $$02733 = $$1;$$02832 = $17;$$02931 = $$130;$$034 = $18;
  }
 }
 $phitmp = (($$130) + 1)|0;
 $$029$lcssa = $phitmp;
 return ($$029$lcssa|0);
}
function _FLAC__MD5Init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 64|0);
 HEAP32[$1>>2] = 1732584193;
 $2 = ((($0)) + 68|0);
 HEAP32[$2>>2] = -271733879;
 $3 = ((($0)) + 72|0);
 HEAP32[$3>>2] = -1732584194;
 $4 = ((($0)) + 76|0);
 HEAP32[$4>>2] = 271733878;
 $5 = ((($0)) + 80|0);
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;HEAP32[$5+12>>2]=0|0;
 return;
}
function _FLAC__MD5Final($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 80|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 63;
 $5 = (($1) + ($4)|0);
 $6 = ((($5)) + 1|0);
 HEAP8[$5>>0] = -128;
 $7 = (55 - ($4))|0;
 $8 = ($7|0)<(0);
 if ($8) {
  $9 = ((($1)) + 64|0);
  $10 = (($7) + 8)|0;
  _memset(($6|0),0,($10|0))|0;
  _FLAC__MD5Transform($9,$1);
  $$0 = $1;$$029 = 56;
 } else {
  $$0 = $6;$$029 = $7;
 }
 _memset(($$0|0),0,($$029|0))|0;
 $11 = HEAP32[$2>>2]|0;
 $12 = $11 << 3;
 $13 = ((($1)) + 56|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($1)) + 84|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 << 3;
 $17 = $11 >>> 29;
 $18 = $16 | $17;
 $19 = ((($1)) + 60|0);
 HEAP32[$19>>2] = $18;
 $20 = ((($1)) + 64|0);
 _FLAC__MD5Transform($20,$1);
 dest=$0; src=$20; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $21 = ((($1)) + 88|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0|0);
 if ($23) {
  dest=$1; stop=dest+96|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  return;
 }
 _free($22);
 HEAP32[$21>>2] = 0;
 $24 = ((($1)) + 92|0);
 HEAP32[$24>>2] = 0;
 dest=$1; stop=dest+96|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 return;
}
function _FLAC__MD5Transform($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
 var $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0;
 var $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 ^ $6;
 $10 = $9 & $4;
 $11 = $10 ^ $8;
 $12 = HEAP32[$1>>2]|0;
 $13 = (($2) + -680876936)|0;
 $14 = (($13) + ($12))|0;
 $15 = (($14) + ($11))|0;
 $16 = $15 << 7;
 $17 = $15 >>> 25;
 $18 = $16 | $17;
 $19 = (($18) + ($4))|0;
 $20 = $6 ^ $4;
 $21 = $19 & $20;
 $22 = $21 ^ $6;
 $23 = ((($1)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($8) + -389564586)|0;
 $26 = (($25) + ($24))|0;
 $27 = (($26) + ($22))|0;
 $28 = $27 << 12;
 $29 = $27 >>> 20;
 $30 = $28 | $29;
 $31 = (($30) + ($19))|0;
 $32 = $19 ^ $4;
 $33 = $31 & $32;
 $34 = $33 ^ $4;
 $35 = ((($1)) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($6) + 606105819)|0;
 $38 = (($37) + ($36))|0;
 $39 = (($38) + ($34))|0;
 $40 = $39 << 17;
 $41 = $39 >>> 15;
 $42 = $40 | $41;
 $43 = (($42) + ($31))|0;
 $44 = $31 ^ $19;
 $45 = $43 & $44;
 $46 = $45 ^ $19;
 $47 = ((($1)) + 12|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (($4) + -1044525330)|0;
 $50 = (($49) + ($48))|0;
 $51 = (($50) + ($46))|0;
 $52 = $51 << 22;
 $53 = $51 >>> 10;
 $54 = $52 | $53;
 $55 = (($54) + ($43))|0;
 $56 = $43 ^ $31;
 $57 = $55 & $56;
 $58 = $57 ^ $31;
 $59 = ((($1)) + 16|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (($60) + -176418897)|0;
 $62 = (($61) + ($19))|0;
 $63 = (($62) + ($58))|0;
 $64 = $63 << 7;
 $65 = $63 >>> 25;
 $66 = $64 | $65;
 $67 = (($66) + ($55))|0;
 $68 = $55 ^ $43;
 $69 = $67 & $68;
 $70 = $69 ^ $43;
 $71 = ((($1)) + 20|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = (($72) + 1200080426)|0;
 $74 = (($73) + ($31))|0;
 $75 = (($74) + ($70))|0;
 $76 = $75 << 12;
 $77 = $75 >>> 20;
 $78 = $76 | $77;
 $79 = (($78) + ($67))|0;
 $80 = $67 ^ $55;
 $81 = $79 & $80;
 $82 = $81 ^ $55;
 $83 = ((($1)) + 24|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = (($84) + -1473231341)|0;
 $86 = (($85) + ($43))|0;
 $87 = (($86) + ($82))|0;
 $88 = $87 << 17;
 $89 = $87 >>> 15;
 $90 = $88 | $89;
 $91 = (($90) + ($79))|0;
 $92 = $79 ^ $67;
 $93 = $91 & $92;
 $94 = $93 ^ $67;
 $95 = ((($1)) + 28|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = (($96) + -45705983)|0;
 $98 = (($97) + ($55))|0;
 $99 = (($98) + ($94))|0;
 $100 = $99 << 22;
 $101 = $99 >>> 10;
 $102 = $100 | $101;
 $103 = (($102) + ($91))|0;
 $104 = $91 ^ $79;
 $105 = $103 & $104;
 $106 = $105 ^ $79;
 $107 = ((($1)) + 32|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = (($108) + 1770035416)|0;
 $110 = (($109) + ($67))|0;
 $111 = (($110) + ($106))|0;
 $112 = $111 << 7;
 $113 = $111 >>> 25;
 $114 = $112 | $113;
 $115 = (($114) + ($103))|0;
 $116 = $103 ^ $91;
 $117 = $115 & $116;
 $118 = $117 ^ $91;
 $119 = ((($1)) + 36|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = (($120) + -1958414417)|0;
 $122 = (($121) + ($79))|0;
 $123 = (($122) + ($118))|0;
 $124 = $123 << 12;
 $125 = $123 >>> 20;
 $126 = $124 | $125;
 $127 = (($126) + ($115))|0;
 $128 = $115 ^ $103;
 $129 = $127 & $128;
 $130 = $129 ^ $103;
 $131 = ((($1)) + 40|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = (($132) + -42063)|0;
 $134 = (($133) + ($91))|0;
 $135 = (($134) + ($130))|0;
 $136 = $135 << 17;
 $137 = $135 >>> 15;
 $138 = $136 | $137;
 $139 = (($138) + ($127))|0;
 $140 = $127 ^ $115;
 $141 = $139 & $140;
 $142 = $141 ^ $115;
 $143 = ((($1)) + 44|0);
 $144 = HEAP32[$143>>2]|0;
 $145 = (($144) + -1990404162)|0;
 $146 = (($145) + ($103))|0;
 $147 = (($146) + ($142))|0;
 $148 = $147 << 22;
 $149 = $147 >>> 10;
 $150 = $148 | $149;
 $151 = (($150) + ($139))|0;
 $152 = $139 ^ $127;
 $153 = $151 & $152;
 $154 = $153 ^ $127;
 $155 = ((($1)) + 48|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = (($156) + 1804603682)|0;
 $158 = (($157) + ($115))|0;
 $159 = (($158) + ($154))|0;
 $160 = $159 << 7;
 $161 = $159 >>> 25;
 $162 = $160 | $161;
 $163 = (($162) + ($151))|0;
 $164 = $151 ^ $139;
 $165 = $163 & $164;
 $166 = $165 ^ $139;
 $167 = ((($1)) + 52|0);
 $168 = HEAP32[$167>>2]|0;
 $169 = (($168) + -40341101)|0;
 $170 = (($169) + ($127))|0;
 $171 = (($170) + ($166))|0;
 $172 = $171 << 12;
 $173 = $171 >>> 20;
 $174 = $172 | $173;
 $175 = (($174) + ($163))|0;
 $176 = $163 ^ $151;
 $177 = $175 & $176;
 $178 = $177 ^ $151;
 $179 = ((($1)) + 56|0);
 $180 = HEAP32[$179>>2]|0;
 $181 = (($180) + -1502002290)|0;
 $182 = (($181) + ($139))|0;
 $183 = (($182) + ($178))|0;
 $184 = $183 << 17;
 $185 = $183 >>> 15;
 $186 = $184 | $185;
 $187 = (($186) + ($175))|0;
 $188 = $175 ^ $163;
 $189 = $187 & $188;
 $190 = $189 ^ $163;
 $191 = ((($1)) + 60|0);
 $192 = HEAP32[$191>>2]|0;
 $193 = (($192) + 1236535329)|0;
 $194 = (($193) + ($151))|0;
 $195 = (($194) + ($190))|0;
 $196 = $195 << 22;
 $197 = $195 >>> 10;
 $198 = $196 | $197;
 $199 = (($198) + ($187))|0;
 $200 = $199 ^ $187;
 $201 = $200 & $175;
 $202 = $201 ^ $187;
 $203 = (($24) + -165796510)|0;
 $204 = (($203) + ($163))|0;
 $205 = (($204) + ($202))|0;
 $206 = $205 << 5;
 $207 = $205 >>> 27;
 $208 = $206 | $207;
 $209 = (($208) + ($199))|0;
 $210 = $209 ^ $199;
 $211 = $210 & $187;
 $212 = $211 ^ $199;
 $213 = (($84) + -1069501632)|0;
 $214 = (($213) + ($175))|0;
 $215 = (($214) + ($212))|0;
 $216 = $215 << 9;
 $217 = $215 >>> 23;
 $218 = $216 | $217;
 $219 = (($218) + ($209))|0;
 $220 = $219 ^ $209;
 $221 = $220 & $199;
 $222 = $221 ^ $209;
 $223 = (($144) + 643717713)|0;
 $224 = (($223) + ($187))|0;
 $225 = (($224) + ($222))|0;
 $226 = $225 << 14;
 $227 = $225 >>> 18;
 $228 = $226 | $227;
 $229 = (($228) + ($219))|0;
 $230 = $229 ^ $219;
 $231 = $230 & $209;
 $232 = $231 ^ $219;
 $233 = (($12) + -373897302)|0;
 $234 = (($233) + ($199))|0;
 $235 = (($234) + ($232))|0;
 $236 = $235 << 20;
 $237 = $235 >>> 12;
 $238 = $236 | $237;
 $239 = (($238) + ($229))|0;
 $240 = $239 ^ $229;
 $241 = $240 & $219;
 $242 = $241 ^ $229;
 $243 = (($72) + -701558691)|0;
 $244 = (($243) + ($209))|0;
 $245 = (($244) + ($242))|0;
 $246 = $245 << 5;
 $247 = $245 >>> 27;
 $248 = $246 | $247;
 $249 = (($248) + ($239))|0;
 $250 = $249 ^ $239;
 $251 = $250 & $229;
 $252 = $251 ^ $239;
 $253 = (($132) + 38016083)|0;
 $254 = (($253) + ($219))|0;
 $255 = (($254) + ($252))|0;
 $256 = $255 << 9;
 $257 = $255 >>> 23;
 $258 = $256 | $257;
 $259 = (($258) + ($249))|0;
 $260 = $259 ^ $249;
 $261 = $260 & $239;
 $262 = $261 ^ $249;
 $263 = (($192) + -660478335)|0;
 $264 = (($263) + ($229))|0;
 $265 = (($264) + ($262))|0;
 $266 = $265 << 14;
 $267 = $265 >>> 18;
 $268 = $266 | $267;
 $269 = (($268) + ($259))|0;
 $270 = $269 ^ $259;
 $271 = $270 & $249;
 $272 = $271 ^ $259;
 $273 = (($60) + -405537848)|0;
 $274 = (($273) + ($239))|0;
 $275 = (($274) + ($272))|0;
 $276 = $275 << 20;
 $277 = $275 >>> 12;
 $278 = $276 | $277;
 $279 = (($278) + ($269))|0;
 $280 = $279 ^ $269;
 $281 = $280 & $259;
 $282 = $281 ^ $269;
 $283 = (($120) + 568446438)|0;
 $284 = (($283) + ($249))|0;
 $285 = (($284) + ($282))|0;
 $286 = $285 << 5;
 $287 = $285 >>> 27;
 $288 = $286 | $287;
 $289 = (($288) + ($279))|0;
 $290 = $289 ^ $279;
 $291 = $290 & $269;
 $292 = $291 ^ $279;
 $293 = (($180) + -1019803690)|0;
 $294 = (($293) + ($259))|0;
 $295 = (($294) + ($292))|0;
 $296 = $295 << 9;
 $297 = $295 >>> 23;
 $298 = $296 | $297;
 $299 = (($298) + ($289))|0;
 $300 = $299 ^ $289;
 $301 = $300 & $279;
 $302 = $301 ^ $289;
 $303 = (($48) + -187363961)|0;
 $304 = (($303) + ($269))|0;
 $305 = (($304) + ($302))|0;
 $306 = $305 << 14;
 $307 = $305 >>> 18;
 $308 = $306 | $307;
 $309 = (($308) + ($299))|0;
 $310 = $309 ^ $299;
 $311 = $310 & $289;
 $312 = $311 ^ $299;
 $313 = (($108) + 1163531501)|0;
 $314 = (($313) + ($279))|0;
 $315 = (($314) + ($312))|0;
 $316 = $315 << 20;
 $317 = $315 >>> 12;
 $318 = $316 | $317;
 $319 = (($318) + ($309))|0;
 $320 = $319 ^ $309;
 $321 = $320 & $299;
 $322 = $321 ^ $309;
 $323 = (($168) + -1444681467)|0;
 $324 = (($323) + ($289))|0;
 $325 = (($324) + ($322))|0;
 $326 = $325 << 5;
 $327 = $325 >>> 27;
 $328 = $326 | $327;
 $329 = (($328) + ($319))|0;
 $330 = $329 ^ $319;
 $331 = $330 & $309;
 $332 = $331 ^ $319;
 $333 = (($36) + -51403784)|0;
 $334 = (($333) + ($299))|0;
 $335 = (($334) + ($332))|0;
 $336 = $335 << 9;
 $337 = $335 >>> 23;
 $338 = $336 | $337;
 $339 = (($338) + ($329))|0;
 $340 = $339 ^ $329;
 $341 = $340 & $319;
 $342 = $341 ^ $329;
 $343 = (($96) + 1735328473)|0;
 $344 = (($343) + ($309))|0;
 $345 = (($344) + ($342))|0;
 $346 = $345 << 14;
 $347 = $345 >>> 18;
 $348 = $346 | $347;
 $349 = (($348) + ($339))|0;
 $350 = $349 ^ $339;
 $351 = $350 & $329;
 $352 = $351 ^ $339;
 $353 = (($156) + -1926607734)|0;
 $354 = (($353) + ($319))|0;
 $355 = (($354) + ($352))|0;
 $356 = $355 << 20;
 $357 = $355 >>> 12;
 $358 = $356 | $357;
 $359 = (($358) + ($349))|0;
 $360 = $349 ^ $339;
 $361 = $360 ^ $359;
 $362 = (($72) + -378558)|0;
 $363 = (($362) + ($329))|0;
 $364 = (($363) + ($361))|0;
 $365 = $364 << 4;
 $366 = $364 >>> 28;
 $367 = $365 | $366;
 $368 = (($367) + ($359))|0;
 $369 = $359 ^ $349;
 $370 = $369 ^ $368;
 $371 = (($108) + -2022574463)|0;
 $372 = (($371) + ($339))|0;
 $373 = (($372) + ($370))|0;
 $374 = $373 << 11;
 $375 = $373 >>> 21;
 $376 = $374 | $375;
 $377 = (($376) + ($368))|0;
 $378 = $368 ^ $359;
 $379 = $378 ^ $377;
 $380 = (($144) + 1839030562)|0;
 $381 = (($380) + ($349))|0;
 $382 = (($381) + ($379))|0;
 $383 = $382 << 16;
 $384 = $382 >>> 16;
 $385 = $383 | $384;
 $386 = (($385) + ($377))|0;
 $387 = $377 ^ $368;
 $388 = $387 ^ $386;
 $389 = (($180) + -35309556)|0;
 $390 = (($389) + ($359))|0;
 $391 = (($390) + ($388))|0;
 $392 = $391 << 23;
 $393 = $391 >>> 9;
 $394 = $392 | $393;
 $395 = (($394) + ($386))|0;
 $396 = $386 ^ $377;
 $397 = $396 ^ $395;
 $398 = (($24) + -1530992060)|0;
 $399 = (($398) + ($368))|0;
 $400 = (($399) + ($397))|0;
 $401 = $400 << 4;
 $402 = $400 >>> 28;
 $403 = $401 | $402;
 $404 = (($403) + ($395))|0;
 $405 = $395 ^ $386;
 $406 = $405 ^ $404;
 $407 = (($60) + 1272893353)|0;
 $408 = (($407) + ($377))|0;
 $409 = (($408) + ($406))|0;
 $410 = $409 << 11;
 $411 = $409 >>> 21;
 $412 = $410 | $411;
 $413 = (($412) + ($404))|0;
 $414 = $404 ^ $395;
 $415 = $414 ^ $413;
 $416 = (($96) + -155497632)|0;
 $417 = (($416) + ($386))|0;
 $418 = (($417) + ($415))|0;
 $419 = $418 << 16;
 $420 = $418 >>> 16;
 $421 = $419 | $420;
 $422 = (($421) + ($413))|0;
 $423 = $413 ^ $404;
 $424 = $423 ^ $422;
 $425 = (($132) + -1094730640)|0;
 $426 = (($425) + ($395))|0;
 $427 = (($426) + ($424))|0;
 $428 = $427 << 23;
 $429 = $427 >>> 9;
 $430 = $428 | $429;
 $431 = (($430) + ($422))|0;
 $432 = $422 ^ $413;
 $433 = $432 ^ $431;
 $434 = (($168) + 681279174)|0;
 $435 = (($434) + ($404))|0;
 $436 = (($435) + ($433))|0;
 $437 = $436 << 4;
 $438 = $436 >>> 28;
 $439 = $437 | $438;
 $440 = (($439) + ($431))|0;
 $441 = $431 ^ $422;
 $442 = $441 ^ $440;
 $443 = (($12) + -358537222)|0;
 $444 = (($443) + ($413))|0;
 $445 = (($444) + ($442))|0;
 $446 = $445 << 11;
 $447 = $445 >>> 21;
 $448 = $446 | $447;
 $449 = (($448) + ($440))|0;
 $450 = $440 ^ $431;
 $451 = $450 ^ $449;
 $452 = (($48) + -722521979)|0;
 $453 = (($452) + ($422))|0;
 $454 = (($453) + ($451))|0;
 $455 = $454 << 16;
 $456 = $454 >>> 16;
 $457 = $455 | $456;
 $458 = (($457) + ($449))|0;
 $459 = $449 ^ $440;
 $460 = $459 ^ $458;
 $461 = (($84) + 76029189)|0;
 $462 = (($461) + ($431))|0;
 $463 = (($462) + ($460))|0;
 $464 = $463 << 23;
 $465 = $463 >>> 9;
 $466 = $464 | $465;
 $467 = (($466) + ($458))|0;
 $468 = $458 ^ $449;
 $469 = $468 ^ $467;
 $470 = (($120) + -640364487)|0;
 $471 = (($470) + ($440))|0;
 $472 = (($471) + ($469))|0;
 $473 = $472 << 4;
 $474 = $472 >>> 28;
 $475 = $473 | $474;
 $476 = (($475) + ($467))|0;
 $477 = $467 ^ $458;
 $478 = $477 ^ $476;
 $479 = (($156) + -421815835)|0;
 $480 = (($479) + ($449))|0;
 $481 = (($480) + ($478))|0;
 $482 = $481 << 11;
 $483 = $481 >>> 21;
 $484 = $482 | $483;
 $485 = (($484) + ($476))|0;
 $486 = $476 ^ $467;
 $487 = $486 ^ $485;
 $488 = (($192) + 530742520)|0;
 $489 = (($488) + ($458))|0;
 $490 = (($489) + ($487))|0;
 $491 = $490 << 16;
 $492 = $490 >>> 16;
 $493 = $491 | $492;
 $494 = (($493) + ($485))|0;
 $495 = $485 ^ $476;
 $496 = $495 ^ $494;
 $497 = (($36) + -995338651)|0;
 $498 = (($497) + ($467))|0;
 $499 = (($498) + ($496))|0;
 $500 = $499 << 23;
 $501 = $499 >>> 9;
 $502 = $500 | $501;
 $503 = (($502) + ($494))|0;
 $504 = $485 ^ -1;
 $505 = $503 | $504;
 $506 = $505 ^ $494;
 $507 = (($12) + -198630844)|0;
 $508 = (($507) + ($476))|0;
 $509 = (($508) + ($506))|0;
 $510 = $509 << 6;
 $511 = $509 >>> 26;
 $512 = $510 | $511;
 $513 = (($512) + ($503))|0;
 $514 = $494 ^ -1;
 $515 = $513 | $514;
 $516 = $515 ^ $503;
 $517 = (($96) + 1126891415)|0;
 $518 = (($517) + ($485))|0;
 $519 = (($518) + ($516))|0;
 $520 = $519 << 10;
 $521 = $519 >>> 22;
 $522 = $520 | $521;
 $523 = (($522) + ($513))|0;
 $524 = $503 ^ -1;
 $525 = $523 | $524;
 $526 = $525 ^ $513;
 $527 = (($180) + -1416354905)|0;
 $528 = (($527) + ($494))|0;
 $529 = (($528) + ($526))|0;
 $530 = $529 << 15;
 $531 = $529 >>> 17;
 $532 = $530 | $531;
 $533 = (($532) + ($523))|0;
 $534 = $513 ^ -1;
 $535 = $533 | $534;
 $536 = $535 ^ $523;
 $537 = (($72) + -57434055)|0;
 $538 = (($537) + ($503))|0;
 $539 = (($538) + ($536))|0;
 $540 = $539 << 21;
 $541 = $539 >>> 11;
 $542 = $540 | $541;
 $543 = (($542) + ($533))|0;
 $544 = $523 ^ -1;
 $545 = $543 | $544;
 $546 = $545 ^ $533;
 $547 = (($156) + 1700485571)|0;
 $548 = (($547) + ($513))|0;
 $549 = (($548) + ($546))|0;
 $550 = $549 << 6;
 $551 = $549 >>> 26;
 $552 = $550 | $551;
 $553 = (($552) + ($543))|0;
 $554 = $533 ^ -1;
 $555 = $553 | $554;
 $556 = $555 ^ $543;
 $557 = (($48) + -1894986606)|0;
 $558 = (($557) + ($523))|0;
 $559 = (($558) + ($556))|0;
 $560 = $559 << 10;
 $561 = $559 >>> 22;
 $562 = $560 | $561;
 $563 = (($562) + ($553))|0;
 $564 = $543 ^ -1;
 $565 = $563 | $564;
 $566 = $565 ^ $553;
 $567 = (($132) + -1051523)|0;
 $568 = (($567) + ($533))|0;
 $569 = (($568) + ($566))|0;
 $570 = $569 << 15;
 $571 = $569 >>> 17;
 $572 = $570 | $571;
 $573 = (($572) + ($563))|0;
 $574 = $553 ^ -1;
 $575 = $573 | $574;
 $576 = $575 ^ $563;
 $577 = (($24) + -2054922799)|0;
 $578 = (($577) + ($543))|0;
 $579 = (($578) + ($576))|0;
 $580 = $579 << 21;
 $581 = $579 >>> 11;
 $582 = $580 | $581;
 $583 = (($582) + ($573))|0;
 $584 = $563 ^ -1;
 $585 = $583 | $584;
 $586 = $585 ^ $573;
 $587 = (($108) + 1873313359)|0;
 $588 = (($587) + ($553))|0;
 $589 = (($588) + ($586))|0;
 $590 = $589 << 6;
 $591 = $589 >>> 26;
 $592 = $590 | $591;
 $593 = (($592) + ($583))|0;
 $594 = $573 ^ -1;
 $595 = $593 | $594;
 $596 = $595 ^ $583;
 $597 = (($192) + -30611744)|0;
 $598 = (($597) + ($563))|0;
 $599 = (($598) + ($596))|0;
 $600 = $599 << 10;
 $601 = $599 >>> 22;
 $602 = $600 | $601;
 $603 = (($602) + ($593))|0;
 $604 = $583 ^ -1;
 $605 = $603 | $604;
 $606 = $605 ^ $593;
 $607 = (($84) + -1560198380)|0;
 $608 = (($607) + ($573))|0;
 $609 = (($608) + ($606))|0;
 $610 = $609 << 15;
 $611 = $609 >>> 17;
 $612 = $610 | $611;
 $613 = (($612) + ($603))|0;
 $614 = $593 ^ -1;
 $615 = $613 | $614;
 $616 = $615 ^ $603;
 $617 = (($168) + 1309151649)|0;
 $618 = (($617) + ($583))|0;
 $619 = (($618) + ($616))|0;
 $620 = $619 << 21;
 $621 = $619 >>> 11;
 $622 = $620 | $621;
 $623 = (($622) + ($613))|0;
 $624 = $603 ^ -1;
 $625 = $623 | $624;
 $626 = $625 ^ $613;
 $627 = (($60) + -145523070)|0;
 $628 = (($627) + ($593))|0;
 $629 = (($628) + ($626))|0;
 $630 = $629 << 6;
 $631 = $629 >>> 26;
 $632 = $630 | $631;
 $633 = (($632) + ($623))|0;
 $634 = $613 ^ -1;
 $635 = $633 | $634;
 $636 = $635 ^ $623;
 $637 = (($144) + -1120210379)|0;
 $638 = (($637) + ($603))|0;
 $639 = (($638) + ($636))|0;
 $640 = $639 << 10;
 $641 = $639 >>> 22;
 $642 = $640 | $641;
 $643 = (($642) + ($633))|0;
 $644 = $623 ^ -1;
 $645 = $643 | $644;
 $646 = $645 ^ $633;
 $647 = (($36) + 718787259)|0;
 $648 = (($647) + ($613))|0;
 $649 = (($648) + ($646))|0;
 $650 = $649 << 15;
 $651 = $649 >>> 17;
 $652 = $650 | $651;
 $653 = (($652) + ($643))|0;
 $654 = $633 ^ -1;
 $655 = $653 | $654;
 $656 = $655 ^ $643;
 $657 = (($120) + -343485551)|0;
 $658 = (($657) + ($623))|0;
 $659 = (($658) + ($656))|0;
 $660 = $659 << 21;
 $661 = $659 >>> 11;
 $662 = $660 | $661;
 $663 = (($633) + ($2))|0;
 HEAP32[$0>>2] = $663;
 $664 = (($653) + ($4))|0;
 $665 = (($664) + ($662))|0;
 HEAP32[$3>>2] = $665;
 $666 = (($653) + ($6))|0;
 HEAP32[$5>>2] = $666;
 $667 = (($643) + ($8))|0;
 HEAP32[$7>>2] = $667;
 return;
}
function _FLAC__MD5Accumulate($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $5 = Math_imul($4, $2)|0;
 $6 = Math_imul($5, $3)|0;
 $7 = (4294967295 / ($4>>>0))&-1;
 $8 = ($7>>>0)<($2>>>0);
 if ($8) {
  $$0 = 0;
  return ($$0|0);
 }
 $9 = Math_imul($4, $2)|0;
 $10 = (4294967295 / ($3>>>0))&-1;
 $11 = ($9>>>0)>($10>>>0);
 if ($11) {
  $$0 = 0;
  return ($$0|0);
 }
 $12 = ((($0)) + 92|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13>>>0)<($6>>>0);
 if ($14) {
  $15 = ((($0)) + 88|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (_safe_realloc__20($16,$6)|0);
  HEAP32[$15>>2] = $17;
  $18 = ($17|0)==(0|0);
  if ($18) {
   $19 = (_safe_malloc_($6)|0);
   HEAP32[$15>>2] = $19;
   $20 = ($19|0)==(0|0);
   if ($20) {
    HEAP32[$12>>2] = 0;
    $$0 = 0;
    return ($$0|0);
   }
  }
  HEAP32[$12>>2] = $6;
 }
 $21 = ((($0)) + 88|0);
 _format_input_($21,$1,$2,$3,$4);
 $22 = HEAP32[$21>>2]|0;
 _FLAC__MD5Update($0,$22,$6);
 $$0 = 1;
 return ($$0|0);
}
function _safe_realloc__20($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_realloc($0,$1)|0);
 $3 = ($1|0)!=(0);
 $4 = ($2|0)==(0|0);
 $or$cond = $3 & $4;
 if (!($or$cond)) {
  return ($2|0);
 }
 _free($0);
 return ($2|0);
}
function _safe_malloc_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 $2 = $1&1;
 $spec$select = (($2) + ($0))|0;
 $3 = (_malloc($spec$select)|0);
 return ($3|0);
}
function _format_input_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0333384 = 0, $$0337467 = 0, $$0344439 = 0, $$0351419 = 0, $$0420 = 0, $$10361$lcssa = 0, $$10361399 = 0, $$10460 = 0, $$11464 = 0, $$12468 = 0, $$1334390 = 0, $$1338471 = 0, $$1345443 = 0, $$13472 = 0, $$1352423 = 0, $$1424 = 0, $$14476 = 0, $$15480 = 0, $$16484 = 0, $$17386 = 0;
 var $$18396 = 0, $$19406 = 0, $$20416 = 0, $$2335400 = 0, $$2339475 = 0, $$2346447 = 0, $$2353427 = 0, $$2428 = 0, $$3336410 = 0, $$3340479 = 0, $$3347451 = 0, $$3354431 = 0, $$3432 = 0, $$4341483 = 0, $$4348455 = 0, $$4355435 = 0, $$4436 = 0, $$5342415 = 0, $$5349395 = 0, $$5356459 = 0;
 var $$5440 = 0, $$6343$lcssa = 0, $$6343409 = 0, $$6350$lcssa = 0, $$6350389 = 0, $$6357463 = 0, $$6444 = 0, $$7358385 = 0, $$7448 = 0, $$8359$lcssa = 0, $$8359383 = 0, $$8452 = 0, $$9360405 = 0, $$9456 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond510 = 0, $exitcond512 = 0, $exitcond513 = 0, $exitcond515 = 0, $exitcond516 = 0, $exitcond518 = 0;
 var $exitcond519 = 0, $exitcond520 = 0, $exitcond521 = 0, $exitcond522 = 0, $exitcond523 = 0, $exitcond524 = 0, $exitcond525 = 0, $exitcond526 = 0, $exitcond527 = 0, $exitcond528 = 0, $exitcond529 = 0, $exitcond530 = 0, $exitcond531 = 0, $exitcond532 = 0, $exitcond533 = 0, $exitcond534 = 0, $exitcond535 = 0, $exitcond536 = 0, $scevgep = 0, $scevgep511 = 0;
 var $scevgep514 = 0, $scevgep517 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = HEAP32[$0>>2]|0;
 $6 = ($4*100)|0;
 $7 = (($6) + ($2))|0;
 do {
  switch ($7|0) {
  case 101:  {
   $8 = ($3|0)==(0);
   if ($8) {
    return;
   }
   $$0351419 = $5;$$0420 = 0;
   while(1) {
    $9 = HEAP32[$1>>2]|0;
    $10 = (($9) + ($$0420<<2)|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = $11&255;
    $13 = ((($$0351419)) + 1|0);
    HEAP8[$$0351419>>0] = $12;
    $14 = (($$0420) + 1)|0;
    $exitcond520 = ($14|0)==($3|0);
    if ($exitcond520) {
     break;
    } else {
     $$0351419 = $13;$$0420 = $14;
    }
   }
   return;
   break;
  }
  case 102:  {
   $15 = ($3|0)==(0);
   if ($15) {
    return;
   }
   $16 = ((($1)) + 4|0);
   $$1352423 = $5;$$1424 = 0;
   while(1) {
    $17 = HEAP32[$1>>2]|0;
    $18 = (($17) + ($$1424<<2)|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = $19&255;
    $21 = ((($$1352423)) + 1|0);
    HEAP8[$$1352423>>0] = $20;
    $22 = HEAP32[$16>>2]|0;
    $23 = (($22) + ($$1424<<2)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $24&255;
    $26 = ((($$1352423)) + 2|0);
    HEAP8[$21>>0] = $25;
    $27 = (($$1424) + 1)|0;
    $exitcond521 = ($27|0)==($3|0);
    if ($exitcond521) {
     break;
    } else {
     $$1352423 = $26;$$1424 = $27;
    }
   }
   return;
   break;
  }
  case 104:  {
   $28 = ($3|0)==(0);
   if ($28) {
    return;
   }
   $29 = ((($1)) + 4|0);
   $30 = ((($1)) + 8|0);
   $31 = ((($1)) + 12|0);
   $$2353427 = $5;$$2428 = 0;
   while(1) {
    $32 = HEAP32[$1>>2]|0;
    $33 = (($32) + ($$2428<<2)|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = $34&255;
    $36 = ((($$2353427)) + 1|0);
    HEAP8[$$2353427>>0] = $35;
    $37 = HEAP32[$29>>2]|0;
    $38 = (($37) + ($$2428<<2)|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = $39&255;
    $41 = ((($$2353427)) + 2|0);
    HEAP8[$36>>0] = $40;
    $42 = HEAP32[$30>>2]|0;
    $43 = (($42) + ($$2428<<2)|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = $44&255;
    $46 = ((($$2353427)) + 3|0);
    HEAP8[$41>>0] = $45;
    $47 = HEAP32[$31>>2]|0;
    $48 = (($47) + ($$2428<<2)|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = $49&255;
    $51 = ((($$2353427)) + 4|0);
    HEAP8[$46>>0] = $50;
    $52 = (($$2428) + 1)|0;
    $exitcond522 = ($52|0)==($3|0);
    if ($exitcond522) {
     break;
    } else {
     $$2353427 = $51;$$2428 = $52;
    }
   }
   return;
   break;
  }
  case 106:  {
   $53 = ($3|0)==(0);
   if ($53) {
    return;
   }
   $54 = ((($1)) + 4|0);
   $55 = ((($1)) + 8|0);
   $56 = ((($1)) + 12|0);
   $57 = ((($1)) + 16|0);
   $58 = ((($1)) + 20|0);
   $$3354431 = $5;$$3432 = 0;
   while(1) {
    $59 = HEAP32[$1>>2]|0;
    $60 = (($59) + ($$3432<<2)|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = $61&255;
    $63 = ((($$3354431)) + 1|0);
    HEAP8[$$3354431>>0] = $62;
    $64 = HEAP32[$54>>2]|0;
    $65 = (($64) + ($$3432<<2)|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = $66&255;
    $68 = ((($$3354431)) + 2|0);
    HEAP8[$63>>0] = $67;
    $69 = HEAP32[$55>>2]|0;
    $70 = (($69) + ($$3432<<2)|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = $71&255;
    $73 = ((($$3354431)) + 3|0);
    HEAP8[$68>>0] = $72;
    $74 = HEAP32[$56>>2]|0;
    $75 = (($74) + ($$3432<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $76&255;
    $78 = ((($$3354431)) + 4|0);
    HEAP8[$73>>0] = $77;
    $79 = HEAP32[$57>>2]|0;
    $80 = (($79) + ($$3432<<2)|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = $81&255;
    $83 = ((($$3354431)) + 5|0);
    HEAP8[$78>>0] = $82;
    $84 = HEAP32[$58>>2]|0;
    $85 = (($84) + ($$3432<<2)|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $86&255;
    $88 = ((($$3354431)) + 6|0);
    HEAP8[$83>>0] = $87;
    $89 = (($$3432) + 1)|0;
    $exitcond523 = ($89|0)==($3|0);
    if ($exitcond523) {
     break;
    } else {
     $$3354431 = $88;$$3432 = $89;
    }
   }
   return;
   break;
  }
  case 108:  {
   $90 = ($3|0)==(0);
   if ($90) {
    return;
   }
   $91 = ((($1)) + 4|0);
   $92 = ((($1)) + 8|0);
   $93 = ((($1)) + 12|0);
   $94 = ((($1)) + 16|0);
   $95 = ((($1)) + 20|0);
   $96 = ((($1)) + 24|0);
   $97 = ((($1)) + 28|0);
   $$4355435 = $5;$$4436 = 0;
   while(1) {
    $98 = HEAP32[$1>>2]|0;
    $99 = (($98) + ($$4436<<2)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100&255;
    $102 = ((($$4355435)) + 1|0);
    HEAP8[$$4355435>>0] = $101;
    $103 = HEAP32[$91>>2]|0;
    $104 = (($103) + ($$4436<<2)|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105&255;
    $107 = ((($$4355435)) + 2|0);
    HEAP8[$102>>0] = $106;
    $108 = HEAP32[$92>>2]|0;
    $109 = (($108) + ($$4436<<2)|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = $110&255;
    $112 = ((($$4355435)) + 3|0);
    HEAP8[$107>>0] = $111;
    $113 = HEAP32[$93>>2]|0;
    $114 = (($113) + ($$4436<<2)|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = $115&255;
    $117 = ((($$4355435)) + 4|0);
    HEAP8[$112>>0] = $116;
    $118 = HEAP32[$94>>2]|0;
    $119 = (($118) + ($$4436<<2)|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = $120&255;
    $122 = ((($$4355435)) + 5|0);
    HEAP8[$117>>0] = $121;
    $123 = HEAP32[$95>>2]|0;
    $124 = (($123) + ($$4436<<2)|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = $125&255;
    $127 = ((($$4355435)) + 6|0);
    HEAP8[$122>>0] = $126;
    $128 = HEAP32[$96>>2]|0;
    $129 = (($128) + ($$4436<<2)|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = $130&255;
    $132 = ((($$4355435)) + 7|0);
    HEAP8[$127>>0] = $131;
    $133 = HEAP32[$97>>2]|0;
    $134 = (($133) + ($$4436<<2)|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = $135&255;
    $137 = ((($$4355435)) + 8|0);
    HEAP8[$132>>0] = $136;
    $138 = (($$4436) + 1)|0;
    $exitcond524 = ($138|0)==($3|0);
    if ($exitcond524) {
     break;
    } else {
     $$4355435 = $137;$$4436 = $138;
    }
   }
   return;
   break;
  }
  case 201:  {
   $139 = ($3|0)==(0);
   if ($139) {
    return;
   }
   $140 = HEAP32[$1>>2]|0;
   $$0344439 = $5;$$5440 = 0;
   while(1) {
    $141 = (($140) + ($$5440<<2)|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = $142&65535;
    $144 = ((($$0344439)) + 2|0);
    HEAP16[$$0344439>>1] = $143;
    $145 = (($$5440) + 1)|0;
    $exitcond525 = ($145|0)==($3|0);
    if ($exitcond525) {
     break;
    } else {
     $$0344439 = $144;$$5440 = $145;
    }
   }
   return;
   break;
  }
  case 202:  {
   $146 = ($3|0)==(0);
   if ($146) {
    return;
   }
   $147 = HEAP32[$1>>2]|0;
   $148 = ((($1)) + 4|0);
   $149 = HEAP32[$148>>2]|0;
   $$1345443 = $5;$$6444 = 0;
   while(1) {
    $150 = (($147) + ($$6444<<2)|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = $151&65535;
    $153 = ((($$1345443)) + 2|0);
    HEAP16[$$1345443>>1] = $152;
    $154 = (($149) + ($$6444<<2)|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = $155&65535;
    $157 = ((($$1345443)) + 4|0);
    HEAP16[$153>>1] = $156;
    $158 = (($$6444) + 1)|0;
    $exitcond526 = ($158|0)==($3|0);
    if ($exitcond526) {
     break;
    } else {
     $$1345443 = $157;$$6444 = $158;
    }
   }
   return;
   break;
  }
  case 204:  {
   $159 = ($3|0)==(0);
   if ($159) {
    return;
   }
   $160 = HEAP32[$1>>2]|0;
   $161 = ((($1)) + 4|0);
   $162 = HEAP32[$161>>2]|0;
   $163 = ((($1)) + 8|0);
   $164 = HEAP32[$163>>2]|0;
   $165 = ((($1)) + 12|0);
   $166 = HEAP32[$165>>2]|0;
   $$2346447 = $5;$$7448 = 0;
   while(1) {
    $167 = (($160) + ($$7448<<2)|0);
    $168 = HEAP32[$167>>2]|0;
    $169 = $168&65535;
    $170 = ((($$2346447)) + 2|0);
    HEAP16[$$2346447>>1] = $169;
    $171 = (($162) + ($$7448<<2)|0);
    $172 = HEAP32[$171>>2]|0;
    $173 = $172&65535;
    $174 = ((($$2346447)) + 4|0);
    HEAP16[$170>>1] = $173;
    $175 = (($164) + ($$7448<<2)|0);
    $176 = HEAP32[$175>>2]|0;
    $177 = $176&65535;
    $178 = ((($$2346447)) + 6|0);
    HEAP16[$174>>1] = $177;
    $179 = (($166) + ($$7448<<2)|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = $180&65535;
    $182 = ((($$2346447)) + 8|0);
    HEAP16[$178>>1] = $181;
    $183 = (($$7448) + 1)|0;
    $exitcond527 = ($183|0)==($3|0);
    if ($exitcond527) {
     break;
    } else {
     $$2346447 = $182;$$7448 = $183;
    }
   }
   return;
   break;
  }
  case 206:  {
   $184 = ($3|0)==(0);
   if ($184) {
    return;
   }
   $185 = HEAP32[$1>>2]|0;
   $186 = ((($1)) + 4|0);
   $187 = HEAP32[$186>>2]|0;
   $188 = ((($1)) + 8|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = ((($1)) + 12|0);
   $191 = HEAP32[$190>>2]|0;
   $192 = ((($1)) + 16|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = ((($1)) + 20|0);
   $195 = HEAP32[$194>>2]|0;
   $$3347451 = $5;$$8452 = 0;
   while(1) {
    $196 = (($185) + ($$8452<<2)|0);
    $197 = HEAP32[$196>>2]|0;
    $198 = $197&65535;
    $199 = ((($$3347451)) + 2|0);
    HEAP16[$$3347451>>1] = $198;
    $200 = (($187) + ($$8452<<2)|0);
    $201 = HEAP32[$200>>2]|0;
    $202 = $201&65535;
    $203 = ((($$3347451)) + 4|0);
    HEAP16[$199>>1] = $202;
    $204 = (($189) + ($$8452<<2)|0);
    $205 = HEAP32[$204>>2]|0;
    $206 = $205&65535;
    $207 = ((($$3347451)) + 6|0);
    HEAP16[$203>>1] = $206;
    $208 = (($191) + ($$8452<<2)|0);
    $209 = HEAP32[$208>>2]|0;
    $210 = $209&65535;
    $211 = ((($$3347451)) + 8|0);
    HEAP16[$207>>1] = $210;
    $212 = (($193) + ($$8452<<2)|0);
    $213 = HEAP32[$212>>2]|0;
    $214 = $213&65535;
    $215 = ((($$3347451)) + 10|0);
    HEAP16[$211>>1] = $214;
    $216 = (($195) + ($$8452<<2)|0);
    $217 = HEAP32[$216>>2]|0;
    $218 = $217&65535;
    $219 = ((($$3347451)) + 12|0);
    HEAP16[$215>>1] = $218;
    $220 = (($$8452) + 1)|0;
    $exitcond528 = ($220|0)==($3|0);
    if ($exitcond528) {
     break;
    } else {
     $$3347451 = $219;$$8452 = $220;
    }
   }
   return;
   break;
  }
  case 208:  {
   $221 = ($3|0)==(0);
   if ($221) {
    return;
   }
   $222 = HEAP32[$1>>2]|0;
   $223 = ((($1)) + 4|0);
   $224 = HEAP32[$223>>2]|0;
   $225 = ((($1)) + 8|0);
   $226 = HEAP32[$225>>2]|0;
   $227 = ((($1)) + 12|0);
   $228 = HEAP32[$227>>2]|0;
   $229 = ((($1)) + 16|0);
   $230 = HEAP32[$229>>2]|0;
   $231 = ((($1)) + 20|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = ((($1)) + 24|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = ((($1)) + 28|0);
   $236 = HEAP32[$235>>2]|0;
   $$4348455 = $5;$$9456 = 0;
   while(1) {
    $237 = (($222) + ($$9456<<2)|0);
    $238 = HEAP32[$237>>2]|0;
    $239 = $238&65535;
    $240 = ((($$4348455)) + 2|0);
    HEAP16[$$4348455>>1] = $239;
    $241 = (($224) + ($$9456<<2)|0);
    $242 = HEAP32[$241>>2]|0;
    $243 = $242&65535;
    $244 = ((($$4348455)) + 4|0);
    HEAP16[$240>>1] = $243;
    $245 = (($226) + ($$9456<<2)|0);
    $246 = HEAP32[$245>>2]|0;
    $247 = $246&65535;
    $248 = ((($$4348455)) + 6|0);
    HEAP16[$244>>1] = $247;
    $249 = (($228) + ($$9456<<2)|0);
    $250 = HEAP32[$249>>2]|0;
    $251 = $250&65535;
    $252 = ((($$4348455)) + 8|0);
    HEAP16[$248>>1] = $251;
    $253 = (($230) + ($$9456<<2)|0);
    $254 = HEAP32[$253>>2]|0;
    $255 = $254&65535;
    $256 = ((($$4348455)) + 10|0);
    HEAP16[$252>>1] = $255;
    $257 = (($232) + ($$9456<<2)|0);
    $258 = HEAP32[$257>>2]|0;
    $259 = $258&65535;
    $260 = ((($$4348455)) + 12|0);
    HEAP16[$256>>1] = $259;
    $261 = (($234) + ($$9456<<2)|0);
    $262 = HEAP32[$261>>2]|0;
    $263 = $262&65535;
    $264 = ((($$4348455)) + 14|0);
    HEAP16[$260>>1] = $263;
    $265 = (($236) + ($$9456<<2)|0);
    $266 = HEAP32[$265>>2]|0;
    $267 = $266&65535;
    $268 = ((($$4348455)) + 16|0);
    HEAP16[$264>>1] = $267;
    $269 = (($$9456) + 1)|0;
    $exitcond529 = ($269|0)==($3|0);
    if ($exitcond529) {
     break;
    } else {
     $$4348455 = $268;$$9456 = $269;
    }
   }
   return;
   break;
  }
  case 301:  {
   $270 = ($3|0)==(0);
   if ($270) {
    return;
   }
   $$10460 = 0;$$5356459 = $5;
   while(1) {
    $271 = HEAP32[$1>>2]|0;
    $272 = (($271) + ($$10460<<2)|0);
    $273 = HEAP32[$272>>2]|0;
    $274 = $273&255;
    $275 = ((($$5356459)) + 1|0);
    HEAP8[$$5356459>>0] = $274;
    $276 = $273 >>> 8;
    $277 = $276&255;
    $278 = ((($$5356459)) + 2|0);
    HEAP8[$275>>0] = $277;
    $279 = $273 >>> 16;
    $280 = $279&255;
    $281 = ((($$5356459)) + 3|0);
    HEAP8[$278>>0] = $280;
    $282 = (($$10460) + 1)|0;
    $exitcond530 = ($282|0)==($3|0);
    if ($exitcond530) {
     break;
    } else {
     $$10460 = $282;$$5356459 = $281;
    }
   }
   return;
   break;
  }
  case 302:  {
   $283 = ($3|0)==(0);
   if ($283) {
    return;
   }
   $284 = ((($1)) + 4|0);
   $$11464 = 0;$$6357463 = $5;
   while(1) {
    $285 = HEAP32[$1>>2]|0;
    $286 = (($285) + ($$11464<<2)|0);
    $287 = HEAP32[$286>>2]|0;
    $288 = $287&255;
    $289 = ((($$6357463)) + 1|0);
    HEAP8[$$6357463>>0] = $288;
    $290 = $287 >>> 8;
    $291 = $290&255;
    $292 = ((($$6357463)) + 2|0);
    HEAP8[$289>>0] = $291;
    $293 = $287 >>> 16;
    $294 = $293&255;
    $295 = ((($$6357463)) + 3|0);
    HEAP8[$292>>0] = $294;
    $296 = HEAP32[$284>>2]|0;
    $297 = (($296) + ($$11464<<2)|0);
    $298 = HEAP32[$297>>2]|0;
    $299 = $298&255;
    $300 = ((($$6357463)) + 4|0);
    HEAP8[$295>>0] = $299;
    $301 = $298 >>> 8;
    $302 = $301&255;
    $303 = ((($$6357463)) + 5|0);
    HEAP8[$300>>0] = $302;
    $304 = $298 >>> 16;
    $305 = $304&255;
    $306 = ((($$6357463)) + 6|0);
    HEAP8[$303>>0] = $305;
    $307 = (($$11464) + 1)|0;
    $exitcond531 = ($307|0)==($3|0);
    if ($exitcond531) {
     break;
    } else {
     $$11464 = $307;$$6357463 = $306;
    }
   }
   return;
   break;
  }
  case 401:  {
   $308 = ($3|0)==(0);
   if ($308) {
    return;
   }
   $309 = HEAP32[$1>>2]|0;
   $$0337467 = $5;$$12468 = 0;
   while(1) {
    $310 = (($309) + ($$12468<<2)|0);
    $311 = HEAP32[$310>>2]|0;
    $312 = ((($$0337467)) + 4|0);
    HEAP32[$$0337467>>2] = $311;
    $313 = (($$12468) + 1)|0;
    $exitcond532 = ($313|0)==($3|0);
    if ($exitcond532) {
     break;
    } else {
     $$0337467 = $312;$$12468 = $313;
    }
   }
   return;
   break;
  }
  case 402:  {
   $314 = ($3|0)==(0);
   if ($314) {
    return;
   }
   $315 = HEAP32[$1>>2]|0;
   $316 = ((($1)) + 4|0);
   $317 = HEAP32[$316>>2]|0;
   $$1338471 = $5;$$13472 = 0;
   while(1) {
    $318 = (($315) + ($$13472<<2)|0);
    $319 = HEAP32[$318>>2]|0;
    $320 = ((($$1338471)) + 4|0);
    HEAP32[$$1338471>>2] = $319;
    $321 = (($317) + ($$13472<<2)|0);
    $322 = HEAP32[$321>>2]|0;
    $323 = ((($$1338471)) + 8|0);
    HEAP32[$320>>2] = $322;
    $324 = (($$13472) + 1)|0;
    $exitcond533 = ($324|0)==($3|0);
    if ($exitcond533) {
     break;
    } else {
     $$1338471 = $323;$$13472 = $324;
    }
   }
   return;
   break;
  }
  case 404:  {
   $325 = ($3|0)==(0);
   if ($325) {
    return;
   }
   $326 = HEAP32[$1>>2]|0;
   $327 = ((($1)) + 4|0);
   $328 = HEAP32[$327>>2]|0;
   $329 = ((($1)) + 8|0);
   $330 = HEAP32[$329>>2]|0;
   $331 = ((($1)) + 12|0);
   $332 = HEAP32[$331>>2]|0;
   $$14476 = 0;$$2339475 = $5;
   while(1) {
    $333 = (($326) + ($$14476<<2)|0);
    $334 = HEAP32[$333>>2]|0;
    $335 = ((($$2339475)) + 4|0);
    HEAP32[$$2339475>>2] = $334;
    $336 = (($328) + ($$14476<<2)|0);
    $337 = HEAP32[$336>>2]|0;
    $338 = ((($$2339475)) + 8|0);
    HEAP32[$335>>2] = $337;
    $339 = (($330) + ($$14476<<2)|0);
    $340 = HEAP32[$339>>2]|0;
    $341 = ((($$2339475)) + 12|0);
    HEAP32[$338>>2] = $340;
    $342 = (($332) + ($$14476<<2)|0);
    $343 = HEAP32[$342>>2]|0;
    $344 = ((($$2339475)) + 16|0);
    HEAP32[$341>>2] = $343;
    $345 = (($$14476) + 1)|0;
    $exitcond534 = ($345|0)==($3|0);
    if ($exitcond534) {
     break;
    } else {
     $$14476 = $345;$$2339475 = $344;
    }
   }
   return;
   break;
  }
  case 406:  {
   $346 = ($3|0)==(0);
   if ($346) {
    return;
   }
   $347 = HEAP32[$1>>2]|0;
   $348 = ((($1)) + 4|0);
   $349 = HEAP32[$348>>2]|0;
   $350 = ((($1)) + 8|0);
   $351 = HEAP32[$350>>2]|0;
   $352 = ((($1)) + 12|0);
   $353 = HEAP32[$352>>2]|0;
   $354 = ((($1)) + 16|0);
   $355 = HEAP32[$354>>2]|0;
   $356 = ((($1)) + 20|0);
   $357 = HEAP32[$356>>2]|0;
   $$15480 = 0;$$3340479 = $5;
   while(1) {
    $358 = (($347) + ($$15480<<2)|0);
    $359 = HEAP32[$358>>2]|0;
    $360 = ((($$3340479)) + 4|0);
    HEAP32[$$3340479>>2] = $359;
    $361 = (($349) + ($$15480<<2)|0);
    $362 = HEAP32[$361>>2]|0;
    $363 = ((($$3340479)) + 8|0);
    HEAP32[$360>>2] = $362;
    $364 = (($351) + ($$15480<<2)|0);
    $365 = HEAP32[$364>>2]|0;
    $366 = ((($$3340479)) + 12|0);
    HEAP32[$363>>2] = $365;
    $367 = (($353) + ($$15480<<2)|0);
    $368 = HEAP32[$367>>2]|0;
    $369 = ((($$3340479)) + 16|0);
    HEAP32[$366>>2] = $368;
    $370 = (($355) + ($$15480<<2)|0);
    $371 = HEAP32[$370>>2]|0;
    $372 = ((($$3340479)) + 20|0);
    HEAP32[$369>>2] = $371;
    $373 = (($357) + ($$15480<<2)|0);
    $374 = HEAP32[$373>>2]|0;
    $375 = ((($$3340479)) + 24|0);
    HEAP32[$372>>2] = $374;
    $376 = (($$15480) + 1)|0;
    $exitcond535 = ($376|0)==($3|0);
    if ($exitcond535) {
     break;
    } else {
     $$15480 = $376;$$3340479 = $375;
    }
   }
   return;
   break;
  }
  case 408:  {
   $377 = ($3|0)==(0);
   if ($377) {
    return;
   }
   $378 = HEAP32[$1>>2]|0;
   $379 = ((($1)) + 4|0);
   $380 = HEAP32[$379>>2]|0;
   $381 = ((($1)) + 8|0);
   $382 = HEAP32[$381>>2]|0;
   $383 = ((($1)) + 12|0);
   $384 = HEAP32[$383>>2]|0;
   $385 = ((($1)) + 16|0);
   $386 = HEAP32[$385>>2]|0;
   $387 = ((($1)) + 20|0);
   $388 = HEAP32[$387>>2]|0;
   $389 = ((($1)) + 24|0);
   $390 = HEAP32[$389>>2]|0;
   $391 = ((($1)) + 28|0);
   $392 = HEAP32[$391>>2]|0;
   $$16484 = 0;$$4341483 = $5;
   while(1) {
    $393 = (($378) + ($$16484<<2)|0);
    $394 = HEAP32[$393>>2]|0;
    $395 = ((($$4341483)) + 4|0);
    HEAP32[$$4341483>>2] = $394;
    $396 = (($380) + ($$16484<<2)|0);
    $397 = HEAP32[$396>>2]|0;
    $398 = ((($$4341483)) + 8|0);
    HEAP32[$395>>2] = $397;
    $399 = (($382) + ($$16484<<2)|0);
    $400 = HEAP32[$399>>2]|0;
    $401 = ((($$4341483)) + 12|0);
    HEAP32[$398>>2] = $400;
    $402 = (($384) + ($$16484<<2)|0);
    $403 = HEAP32[$402>>2]|0;
    $404 = ((($$4341483)) + 16|0);
    HEAP32[$401>>2] = $403;
    $405 = (($386) + ($$16484<<2)|0);
    $406 = HEAP32[$405>>2]|0;
    $407 = ((($$4341483)) + 20|0);
    HEAP32[$404>>2] = $406;
    $408 = (($388) + ($$16484<<2)|0);
    $409 = HEAP32[$408>>2]|0;
    $410 = ((($$4341483)) + 24|0);
    HEAP32[$407>>2] = $409;
    $411 = (($390) + ($$16484<<2)|0);
    $412 = HEAP32[$411>>2]|0;
    $413 = ((($$4341483)) + 28|0);
    HEAP32[$410>>2] = $412;
    $414 = (($392) + ($$16484<<2)|0);
    $415 = HEAP32[$414>>2]|0;
    $416 = ((($$4341483)) + 32|0);
    HEAP32[$413>>2] = $415;
    $417 = (($$16484) + 1)|0;
    $exitcond536 = ($417|0)==($3|0);
    if ($exitcond536) {
     break;
    } else {
     $$16484 = $417;$$4341483 = $416;
    }
   }
   return;
   break;
  }
  default: {
   switch ($4|0) {
   case 1:  {
    $418 = ($3|0)==(0);
    if ($418) {
     return;
    }
    $419 = ($2|0)==(0);
    $$17386 = 0;$$7358385 = $5;
    while(1) {
     if ($419) {
      $$8359$lcssa = $$7358385;
     } else {
      $$0333384 = 0;$$8359383 = $$7358385;
      while(1) {
       $420 = (($1) + ($$0333384<<2)|0);
       $421 = HEAP32[$420>>2]|0;
       $422 = (($421) + ($$17386<<2)|0);
       $423 = HEAP32[$422>>2]|0;
       $424 = $423&255;
       $425 = ((($$8359383)) + 1|0);
       HEAP8[$$8359383>>0] = $424;
       $426 = (($$0333384) + 1)|0;
       $exitcond = ($426|0)==($2|0);
       if ($exitcond) {
        break;
       } else {
        $$0333384 = $426;$$8359383 = $425;
       }
      }
      $scevgep = (($$7358385) + ($2)|0);
      $$8359$lcssa = $scevgep;
     }
     $427 = (($$17386) + 1)|0;
     $exitcond510 = ($427|0)==($3|0);
     if ($exitcond510) {
      break;
     } else {
      $$17386 = $427;$$7358385 = $$8359$lcssa;
     }
    }
    return;
    break;
   }
   case 2:  {
    $428 = ($3|0)==(0);
    if ($428) {
     return;
    }
    $429 = ($2|0)==(0);
    $$18396 = 0;$$5349395 = $5;
    while(1) {
     if ($429) {
      $$6350$lcssa = $$5349395;
     } else {
      $$1334390 = 0;$$6350389 = $$5349395;
      while(1) {
       $430 = (($1) + ($$1334390<<2)|0);
       $431 = HEAP32[$430>>2]|0;
       $432 = (($431) + ($$18396<<2)|0);
       $433 = HEAP32[$432>>2]|0;
       $434 = $433&65535;
       $435 = ((($$6350389)) + 2|0);
       HEAP16[$$6350389>>1] = $434;
       $436 = (($$1334390) + 1)|0;
       $exitcond512 = ($436|0)==($2|0);
       if ($exitcond512) {
        break;
       } else {
        $$1334390 = $436;$$6350389 = $435;
       }
      }
      $scevgep511 = (($$5349395) + ($2<<1)|0);
      $$6350$lcssa = $scevgep511;
     }
     $437 = (($$18396) + 1)|0;
     $exitcond513 = ($437|0)==($3|0);
     if ($exitcond513) {
      break;
     } else {
      $$18396 = $437;$$5349395 = $$6350$lcssa;
     }
    }
    return;
    break;
   }
   case 3:  {
    $438 = ($3|0)==(0);
    if ($438) {
     return;
    }
    $439 = ($2|0)==(0);
    $440 = ($2*3)|0;
    $$19406 = 0;$$9360405 = $5;
    while(1) {
     if ($439) {
      $$10361$lcssa = $$9360405;
     } else {
      $$10361399 = $$9360405;$$2335400 = 0;
      while(1) {
       $441 = (($1) + ($$2335400<<2)|0);
       $442 = HEAP32[$441>>2]|0;
       $443 = (($442) + ($$19406<<2)|0);
       $444 = HEAP32[$443>>2]|0;
       $445 = $444&255;
       $446 = ((($$10361399)) + 1|0);
       HEAP8[$$10361399>>0] = $445;
       $447 = $444 >>> 8;
       $448 = $447&255;
       $449 = ((($$10361399)) + 2|0);
       HEAP8[$446>>0] = $448;
       $450 = $444 >>> 16;
       $451 = $450&255;
       $452 = ((($$10361399)) + 3|0);
       HEAP8[$449>>0] = $451;
       $453 = (($$2335400) + 1)|0;
       $exitcond515 = ($453|0)==($2|0);
       if ($exitcond515) {
        break;
       } else {
        $$10361399 = $452;$$2335400 = $453;
       }
      }
      $scevgep514 = (($$9360405) + ($440)|0);
      $$10361$lcssa = $scevgep514;
     }
     $454 = (($$19406) + 1)|0;
     $exitcond516 = ($454|0)==($3|0);
     if ($exitcond516) {
      break;
     } else {
      $$19406 = $454;$$9360405 = $$10361$lcssa;
     }
    }
    return;
    break;
   }
   case 4:  {
    $455 = ($3|0)==(0);
    if ($455) {
     return;
    }
    $456 = ($2|0)==(0);
    $$20416 = 0;$$5342415 = $5;
    while(1) {
     if ($456) {
      $$6343$lcssa = $$5342415;
     } else {
      $$3336410 = 0;$$6343409 = $$5342415;
      while(1) {
       $457 = (($1) + ($$3336410<<2)|0);
       $458 = HEAP32[$457>>2]|0;
       $459 = (($458) + ($$20416<<2)|0);
       $460 = HEAP32[$459>>2]|0;
       $461 = ((($$6343409)) + 4|0);
       HEAP32[$$6343409>>2] = $460;
       $462 = (($$3336410) + 1)|0;
       $exitcond518 = ($462|0)==($2|0);
       if ($exitcond518) {
        break;
       } else {
        $$3336410 = $462;$$6343409 = $461;
       }
      }
      $scevgep517 = (($$5342415) + ($2<<2)|0);
      $$6343$lcssa = $scevgep517;
     }
     $463 = (($$20416) + 1)|0;
     $exitcond519 = ($463|0)==($3|0);
     if ($exitcond519) {
      break;
     } else {
      $$20416 = $463;$$5342415 = $$6343$lcssa;
     }
    }
    return;
    break;
   }
   default: {
    return;
   }
   }
  }
  }
 } while(0);
}
function _FLAC__MD5Update($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$028$lcssa = 0, $$02829 = 0, $$030 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 80|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($2))|0;
 HEAP32[$3>>2] = $5;
 $6 = ($5>>>0)<($4>>>0);
 if ($6) {
  $7 = ((($0)) + 84|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + 1)|0;
  HEAP32[$7>>2] = $9;
 }
 $10 = $4 & 63;
 $11 = (64 - ($10))|0;
 $12 = ($11>>>0)>($2>>>0);
 $13 = ((($0)) + 64|0);
 $14 = (0 - ($11))|0;
 $15 = (($13) + ($14)|0);
 if ($12) {
  _memcpy(($15|0),($1|0),($2|0))|0;
  return;
 }
 _memcpy(($15|0),($1|0),($11|0))|0;
 $16 = ((($0)) + 64|0);
 _FLAC__MD5Transform($16,$0);
 $17 = (($1) + ($11)|0);
 $18 = (($2) - ($11))|0;
 $19 = ($18>>>0)>(63);
 if ($19) {
  $20 = (($10) + ($2))|0;
  $21 = (($20) + -128)|0;
  $22 = $21 & -64;
  $23 = (($22) + 128)|0;
  $24 = (($23) - ($10))|0;
  $25 = (($10) + ($2))|0;
  $26 = (($25) + -128)|0;
  $$02829 = $17;$$030 = $18;
  while(1) {
   dest=$0; src=$$02829; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   _FLAC__MD5Transform($16,$0);
   $27 = ((($$02829)) + 64|0);
   $28 = (($$030) + -64)|0;
   $29 = ($28>>>0)>(63);
   if ($29) {
    $$02829 = $27;$$030 = $28;
   } else {
    break;
   }
  }
  $scevgep = (($1) + ($24)|0);
  $30 = (($26) - ($22))|0;
  $$0$lcssa = $30;$$028$lcssa = $scevgep;
 } else {
  $$0$lcssa = $18;$$028$lcssa = $17;
 }
 _memcpy(($0|0),($$028$lcssa|0),($$0$lcssa|0))|0;
 return;
}
function _FLAC__memory_alloc_aligned($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_safe_malloc__21($0)|0);
 HEAP32[$1>>2] = $2;
 return ($2|0);
}
function _safe_malloc__21($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 $2 = $1&1;
 $spec$select = (($2) + ($0))|0;
 $3 = (_malloc($spec$select)|0);
 return ($3|0);
}
function _FLAC__memory_alloc_aligned_int32_array($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 $4 = ($0>>>0)>(1073741823);
 if ($4) {
  $$0 = 0;
 } else {
  $5 = $0 << 2;
  $6 = (_FLAC__memory_alloc_aligned($5,$3)|0);
  $7 = ($6|0)==(0|0);
  if ($7) {
   $$0 = 0;
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = ($8|0)==(0|0);
   if (!($9)) {
    _free($8);
   }
   HEAP32[$1>>2] = $6;
   $10 = HEAP32[$3>>2]|0;
   HEAP32[$2>>2] = $10;
   $$0 = 1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _FLAC__memory_alloc_aligned_uint64_array($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 $4 = ($0>>>0)>(536870911);
 if ($4) {
  $$0 = 0;
 } else {
  $5 = $0 << 3;
  $6 = (_FLAC__memory_alloc_aligned($5,$3)|0);
  $7 = ($6|0)==(0|0);
  if ($7) {
   $$0 = 0;
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = ($8|0)==(0|0);
   if (!($9)) {
    _free($8);
   }
   HEAP32[$1>>2] = $6;
   $10 = HEAP32[$3>>2]|0;
   HEAP32[$2>>2] = $10;
   $$0 = 1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _FLAC__memory_alloc_aligned_unsigned_array($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 $4 = ($0>>>0)>(1073741823);
 if ($4) {
  $$0 = 0;
 } else {
  $5 = $0 << 2;
  $6 = (_FLAC__memory_alloc_aligned($5,$3)|0);
  $7 = ($6|0)==(0|0);
  if ($7) {
   $$0 = 0;
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = ($8|0)==(0|0);
   if (!($9)) {
    _free($8);
   }
   HEAP32[$1>>2] = $6;
   $10 = HEAP32[$3>>2]|0;
   HEAP32[$2>>2] = $10;
   $$0 = 1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _FLAC__memory_alloc_aligned_real_array($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 $4 = ($0>>>0)>(1073741823);
 if ($4) {
  $$0 = 0;
 } else {
  $5 = $0 << 2;
  $6 = (_FLAC__memory_alloc_aligned($5,$3)|0);
  $7 = ($6|0)==(0|0);
  if ($7) {
   $$0 = 0;
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = ($8|0)==(0|0);
   if (!($9)) {
    _free($8);
   }
   HEAP32[$1>>2] = $6;
   $10 = HEAP32[$3>>2]|0;
   HEAP32[$2>>2] = $10;
   $$0 = 1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _safe_malloc_mul_2op_p($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$sink = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)!=(0);
 $3 = ($1|0)!=(0);
 $or$cond = $2 & $3;
 do {
  if ($or$cond) {
   $4 = (4294967295 / ($1>>>0))&-1;
   $5 = ($4>>>0)<($0>>>0);
   if ($5) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $6 = Math_imul($1, $0)|0;
    $$sink = $6;
    break;
   }
  } else {
   $$sink = 1;
  }
 } while(0);
 $7 = (_malloc($$sink)|0);
 $$0 = $7;
 return ($$0|0);
}
function _FLAC__stream_decoder_new() {
 var $$039 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, $scevgep45 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (_calloc(1,8)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$039 = 0;
  return ($$039|0);
 }
 $2 = (_calloc(1,32)|0);
 HEAP32[$0>>2] = $2;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _free($0);
  $$039 = 0;
  return ($$039|0);
 }
 $4 = (_calloc(1,6184)|0);
 $5 = ((($0)) + 4|0);
 HEAP32[$5>>2] = $4;
 $6 = ($4|0)==(0|0);
 if ($6) {
  _free($2);
  _free($0);
  $$039 = 0;
  return ($$039|0);
 }
 $7 = (_FLAC__bitreader_new()|0);
 $8 = HEAP32[$5>>2]|0;
 $9 = ((($8)) + 56|0);
 HEAP32[$9>>2] = $7;
 $10 = ($7|0)==(0|0);
 if ($10) {
  _free($8);
  _free($2);
  _free($0);
  $$039 = 0;
  return ($$039|0);
 }
 $11 = ((($8)) + 1128|0);
 HEAP32[$11>>2] = 16;
 $12 = HEAP32[275]|0;
 $13 = $12 >>> 3;
 $14 = $13 << 4;
 $15 = (_malloc($14)|0);
 $16 = ((($8)) + 1120|0);
 HEAP32[$16>>2] = $15;
 $17 = ($15|0)==(0|0);
 if ($17) {
  $18 = HEAP32[$9>>2]|0;
  _FLAC__bitreader_delete($18);
  _free($4);
  _free($2);
  _free($0);
  $$039 = 0;
  return ($$039|0);
 } else {
  $scevgep = ((($8)) + 60|0);
  $scevgep45 = ((($8)) + 3616|0);
  ;HEAP32[$scevgep45>>2]=0|0;HEAP32[$scevgep45+4>>2]=0|0;HEAP32[$scevgep45+8>>2]=0|0;HEAP32[$scevgep45+12>>2]=0|0;HEAP32[$scevgep45+16>>2]=0|0;HEAP32[$scevgep45+20>>2]=0|0;HEAP32[$scevgep45+24>>2]=0|0;HEAP32[$scevgep45+28>>2]=0|0;
  dest=$scevgep; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $19 = ((($8)) + 220|0);
  HEAP32[$19>>2] = 0;
  $20 = ((($8)) + 224|0);
  HEAP32[$20>>2] = 0;
  $21 = ((($8)) + 252|0);
  HEAP32[$21>>2] = 0;
  $22 = ((($8)) + 124|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($22);
  $23 = ((($8)) + 136|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($23);
  $24 = ((($8)) + 148|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($24);
  $25 = ((($8)) + 160|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($25);
  $26 = ((($8)) + 172|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($26);
  $27 = ((($8)) + 184|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($27);
  $28 = ((($8)) + 196|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($28);
  $29 = ((($8)) + 208|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($29);
  $30 = ((($8)) + 52|0);
  HEAP32[$30>>2] = 0;
  _set_defaults_($0);
  $31 = HEAP32[$0>>2]|0;
  HEAP32[$31>>2] = 9;
  $$039 = $0;
  return ($$039|0);
 }
 return (0)|0;
}
function _set_defaults_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 48|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($2)) + 608|0);
 _memset(($4|0),0,512)|0;
 dest=$2; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $5 = HEAP32[$1>>2]|0;
 $6 = ((($5)) + 608|0);
 HEAP32[$6>>2] = 1;
 $7 = ((($5)) + 1124|0);
 HEAP32[$7>>2] = 0;
 $8 = HEAP32[$0>>2]|0;
 $9 = ((($8)) + 28|0);
 HEAP32[$9>>2] = 0;
 return;
}
function _FLAC__stream_decoder_delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 (_FLAC__stream_decoder_finish($0)|0);
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 1120|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  _free($5);
 }
 $7 = HEAP32[$2>>2]|0;
 $8 = ((($7)) + 56|0);
 $9 = HEAP32[$8>>2]|0;
 _FLAC__bitreader_delete($9);
 $10 = HEAP32[$2>>2]|0;
 $11 = ((($10)) + 124|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($11);
 $12 = HEAP32[$2>>2]|0;
 $13 = ((($12)) + 136|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($13);
 $14 = HEAP32[$2>>2]|0;
 $15 = ((($14)) + 148|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($15);
 $16 = HEAP32[$2>>2]|0;
 $17 = ((($16)) + 160|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($17);
 $18 = HEAP32[$2>>2]|0;
 $19 = ((($18)) + 172|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($19);
 $20 = HEAP32[$2>>2]|0;
 $21 = ((($20)) + 184|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($21);
 $22 = HEAP32[$2>>2]|0;
 $23 = ((($22)) + 196|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($23);
 $24 = HEAP32[$2>>2]|0;
 $25 = ((($24)) + 208|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($25);
 $26 = HEAP32[$2>>2]|0;
 _free($26);
 $27 = HEAP32[$0>>2]|0;
 _free($27);
 _free($0);
 return;
}
function _FLAC__stream_decoder_finish($0) {
 $0 = $0|0;
 var $$038 = 0, $$039 = 0, $$040 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(9);
 if ($3) {
  $$039 = 1;
  return ($$039|0);
 }
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 3756|0);
 $7 = ((($5)) + 3660|0);
 _FLAC__MD5Final($6,$7);
 $8 = HEAP32[$4>>2]|0;
 $9 = ((($8)) + 452|0);
 $10 = HEAP32[$9>>2]|0;
 _free($10);
 $11 = HEAP32[$4>>2]|0;
 $12 = ((($11)) + 452|0);
 HEAP32[$12>>2] = 0;
 $13 = HEAP32[$4>>2]|0;
 $14 = ((($13)) + 252|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($13)) + 56|0);
 $16 = HEAP32[$15>>2]|0;
 _FLAC__bitreader_free($16);
 $17 = HEAP32[$4>>2]|0;
 $$040 = 0;$19 = $17;
 while(1) {
  $18 = (((($19)) + 60|0) + ($$040<<2)|0);
  $20 = HEAP32[$18>>2]|0;
  $21 = ($20|0)==(0|0);
  if (!($21)) {
   $22 = ((($20)) + -16|0);
   _free($22);
   $23 = HEAP32[$4>>2]|0;
   $24 = (((($23)) + 60|0) + ($$040<<2)|0);
   HEAP32[$24>>2] = 0;
  }
  $25 = HEAP32[$4>>2]|0;
  $26 = (((($25)) + 3616|0) + ($$040<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==(0|0);
  if (!($28)) {
   _free($27);
   $29 = HEAP32[$4>>2]|0;
   $30 = (((($29)) + 92|0) + ($$040<<2)|0);
   HEAP32[$30>>2] = 0;
   $31 = HEAP32[$4>>2]|0;
   $32 = (((($31)) + 3616|0) + ($$040<<2)|0);
   HEAP32[$32>>2] = 0;
  }
  $33 = (($$040) + 1)|0;
  $34 = HEAP32[$4>>2]|0;
  $exitcond = ($33|0)==(8);
  if ($exitcond) {
   break;
  } else {
   $$040 = $33;$19 = $34;
  }
 }
 $35 = ((($34)) + 220|0);
 HEAP32[$35>>2] = 0;
 $36 = ((($34)) + 224|0);
 HEAP32[$36>>2] = 0;
 $37 = ((($34)) + 52|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)==(0|0);
 if (!($39)) {
  $40 = HEAP32[390]|0;
  $41 = ($38|0)==($40|0);
  if (!($41)) {
   (_fclose($38)|0);
  }
  $42 = HEAP32[$4>>2]|0;
  $43 = ((($42)) + 52|0);
  HEAP32[$43>>2] = 0;
 }
 $44 = HEAP32[$4>>2]|0;
 $45 = ((($44)) + 3648|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)==(0);
 if ($47) {
  $$038 = 1;
 } else {
  $48 = ((($44)) + 312|0);
  $49 = ((($44)) + 3756|0);
  $50 = (_memcmp($48,$49,16)|0);
  $51 = ($50|0)==(0);
  $spec$select = $51&1;
  $$038 = $spec$select;
 }
 $52 = ((($44)) + 3656|0);
 HEAP32[$52>>2] = 0;
 _set_defaults_($0);
 $53 = HEAP32[$0>>2]|0;
 HEAP32[$53>>2] = 9;
 $$039 = $$038;
 return ($$039|0);
}
function _FLAC__stream_decoder_init_stream($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $10 = (_init_stream_internal_($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,0)|0);
 return ($10|0);
}
function _init_stream_internal_($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$ = 0, $$0 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $11 = HEAP32[$0>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(9);
 if (!($13)) {
  $$0 = 5;
  return ($$0|0);
 }
 $14 = ($10|0)==(0);
 if (!($14)) {
  $$0 = 1;
  return ($$0|0);
 }
 $15 = ($1|0)==(0|0);
 $16 = ($6|0)==(0|0);
 $or$cond = $15 | $16;
 $17 = ($8|0)==(0|0);
 $or$cond3 = $or$cond | $17;
 if ($or$cond3) {
  $$0 = 2;
  return ($$0|0);
 }
 $18 = ($2|0)==(0|0);
 if (!($18)) {
  $19 = ($3|0)==(0|0);
  $20 = ($4|0)==(0|0);
  $or$cond5 = $19 | $20;
  $21 = ($5|0)==(0|0);
  $or$cond7 = $or$cond5 | $21;
  if ($or$cond7) {
   $$0 = 2;
   return ($$0|0);
  }
 }
 $22 = ((($0)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($23)) + 3524|0);
 _FLAC__cpu_info($24);
 $25 = HEAP32[$22>>2]|0;
 $26 = ((($25)) + 36|0);
 HEAP32[$26>>2] = 6;
 $27 = ((($25)) + 40|0);
 HEAP32[$27>>2] = 7;
 $28 = ((($25)) + 44|0);
 HEAP32[$28>>2] = 6;
 $29 = ((($25)) + 56|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (_FLAC__bitreader_init($30,9,$0)|0);
 $32 = ($31|0)==(0);
 if ($32) {
  $33 = HEAP32[$0>>2]|0;
  HEAP32[$33>>2] = 8;
  $$0 = 3;
  return ($$0|0);
 } else {
  $34 = HEAP32[$22>>2]|0;
  $35 = ((($34)) + 4|0);
  HEAP32[$35>>2] = $1;
  $36 = ((($34)) + 8|0);
  HEAP32[$36>>2] = $2;
  $37 = ((($34)) + 12|0);
  HEAP32[$37>>2] = $3;
  $38 = ((($34)) + 16|0);
  HEAP32[$38>>2] = $4;
  $39 = ((($34)) + 20|0);
  HEAP32[$39>>2] = $5;
  $40 = ((($34)) + 24|0);
  HEAP32[$40>>2] = $6;
  $41 = ((($34)) + 28|0);
  HEAP32[$41>>2] = $7;
  $42 = ((($34)) + 32|0);
  HEAP32[$42>>2] = $8;
  $43 = ((($34)) + 48|0);
  HEAP32[$43>>2] = $9;
  $44 = ((($34)) + 232|0);
  HEAP32[$44>>2] = 0;
  $45 = ((($34)) + 228|0);
  HEAP32[$45>>2] = 0;
  $46 = ((($34)) + 240|0);
  $47 = $46;
  $48 = $47;
  HEAP32[$48>>2] = 0;
  $49 = (($47) + 4)|0;
  $50 = $49;
  HEAP32[$50>>2] = 0;
  $51 = ((($34)) + 248|0);
  HEAP32[$51>>2] = 0;
  $52 = ((($34)) + 3520|0);
  HEAP32[$52>>2] = 0;
  $53 = HEAP32[$0>>2]|0;
  $54 = ((($53)) + 28|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ((($34)) + 3648|0);
  HEAP32[$56>>2] = $55;
  $57 = ((($34)) + 3656|0);
  HEAP32[$57>>2] = 0;
  $58 = ((($34)) + 3652|0);
  HEAP32[$58>>2] = 1;
  $59 = (_FLAC__stream_decoder_reset($0)|0);
  $60 = ($59|0)==(0);
  $$ = $60 ? 3 : 0;
  $$0 = $$;
  return ($$0|0);
 }
 return (0)|0;
}
function _read_callback_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $8 = ((($4)) + 48|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_iii[$6 & 7]($2,$9)|0);
  $11 = ($10|0)==(0);
  if (!($11)) {
   HEAP32[$1>>2] = 0;
   $12 = HEAP32[$2>>2]|0;
   HEAP32[$12>>2] = 4;
   $$1 = 0;
   return ($$1|0);
  }
 }
 $13 = HEAP32[$1>>2]|0;
 $14 = ($13|0)==(0);
 if ($14) {
  $42 = HEAP32[$2>>2]|0;
  HEAP32[$42>>2] = 7;
  $$1 = 0;
  return ($$1|0);
 }
 $15 = HEAP32[$3>>2]|0;
 $16 = ((($15)) + 3656|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0);
 if (!($18)) {
  $19 = ((($15)) + 6176|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20>>>0)>(20);
  if ($21) {
   $22 = HEAP32[$2>>2]|0;
   HEAP32[$22>>2] = 7;
   $$1 = 0;
   return ($$1|0);
  }
 }
 $23 = ((($15)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($15)) + 48|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (FUNCTION_TABLE_iiiii[$24 & 7]($2,$0,$1,$26)|0);
 $28 = ($27|0)==(2);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  HEAP32[$29>>2] = 7;
  $$1 = 0;
  return ($$1|0);
 }
 $30 = HEAP32[$1>>2]|0;
 $31 = ($30|0)==(0);
 if (!($31)) {
  $$1 = 1;
  return ($$1|0);
 }
 $32 = ($27|0)==(1);
 if (!($32)) {
  $33 = HEAP32[$3>>2]|0;
  $34 = ((($33)) + 20|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($35|0)==(0|0);
  if ($36) {
   $$1 = 1;
   return ($$1|0);
  }
  $37 = ((($33)) + 48|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (FUNCTION_TABLE_iii[$35 & 7]($2,$38)|0);
  $40 = ($39|0)==(0);
  if ($40) {
   $$1 = 1;
   return ($$1|0);
  }
 }
 $41 = HEAP32[$2>>2]|0;
 HEAP32[$41>>2] = 4;
 $$1 = 0;
 return ($$1|0);
}
function _FLAC__stream_decoder_reset($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_FLAC__stream_decoder_flush($0)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 3652|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($4)) + 52|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[390]|0;
  $11 = ($9|0)==($10|0);
  if ($11) {
   $$0 = 0;
   return ($$0|0);
  }
  $12 = ((($4)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0|0);
  if (!($14)) {
   $15 = ((($4)) + 48|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (FUNCTION_TABLE_iiiii[$13 & 7]($0,0,0,$16)|0);
   $18 = ($17|0)==(1);
   if ($18) {
    $$0 = 0;
    return ($$0|0);
   }
  }
 } else {
  HEAP32[$5>>2] = 0;
 }
 $19 = HEAP32[$0>>2]|0;
 HEAP32[$19>>2] = 0;
 $20 = HEAP32[$3>>2]|0;
 $21 = ((($20)) + 248|0);
 HEAP32[$21>>2] = 0;
 $22 = ((($20)) + 452|0);
 $23 = HEAP32[$22>>2]|0;
 _free($23);
 $24 = HEAP32[$3>>2]|0;
 $25 = ((($24)) + 452|0);
 HEAP32[$25>>2] = 0;
 $26 = HEAP32[$3>>2]|0;
 $27 = ((($26)) + 252|0);
 HEAP32[$27>>2] = 0;
 $28 = HEAP32[$0>>2]|0;
 $29 = ((($28)) + 28|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($26)) + 3648|0);
 HEAP32[$31>>2] = $30;
 $32 = ((($26)) + 232|0);
 HEAP32[$32>>2] = 0;
 $33 = ((($26)) + 228|0);
 HEAP32[$33>>2] = 0;
 $34 = ((($26)) + 3660|0);
 _FLAC__MD5Init($34);
 $35 = HEAP32[$3>>2]|0;
 $36 = ((($35)) + 6160|0);
 $37 = $36;
 $38 = $37;
 HEAP32[$38>>2] = 0;
 $39 = (($37) + 4)|0;
 $40 = $39;
 HEAP32[$40>>2] = 0;
 $41 = ((($35)) + 6176|0);
 HEAP32[$41>>2] = 0;
 $$0 = 1;
 return ($$0|0);
}
function _FLAC__stream_decoder_flush($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $$6 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 3652|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = HEAP32[$0>>2]|0;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(9);
  if ($8) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $9 = ((($2)) + 240|0);
 $10 = $9;
 $11 = $10;
 HEAP32[$11>>2] = 0;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = 0;
 $14 = ((($2)) + 3648|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($2)) + 56|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_FLAC__bitreader_clear($16)|0);
 $18 = ($17|0)==(0);
 $19 = HEAP32[$0>>2]|0;
 $$ = $18 ? 8 : 2;
 $not$ = $18 ^ 1;
 $$6 = $not$&1;
 HEAP32[$19>>2] = $$;
 $$0 = $$6;
 return ($$0|0);
}
function _FLAC__stream_decoder_set_md5_checking($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(9);
 if (!($4)) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ((($2)) + 28|0);
 HEAP32[$5>>2] = $1;
 $$0 = 1;
 return ($$0|0);
}
function _safe_realloc_mul_2op__167($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(0);
 if ($3) {
  $4 = (_realloc($0,0)|0);
  $$0 = $4;
  return ($$0|0);
 }
 $5 = (4294967295 / ($2>>>0))&-1;
 $6 = ($5>>>0)<($1>>>0);
 if ($6) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = Math_imul($2, $1)|0;
 $8 = (_safe_realloc__168($0,$7)|0);
 $$0 = $8;
 return ($$0|0);
}
function _safe_realloc__168($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_realloc($0,$1)|0);
 $3 = ($1|0)!=(0);
 $4 = ($2|0)==(0|0);
 $or$cond = $3 & $4;
 if (!($or$cond)) {
  return ($2|0);
 }
 _free($0);
 return ($2|0);
}
function _FLAC__stream_decoder_get_state($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _FLAC__stream_decoder_get_md5_checking($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 return ($3|0);
}
function _FLAC__stream_decoder_get_total_samples($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 248|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $13 = 0;$14 = 0;
  setTempRet0(($13) | 0);
  return ($14|0);
 }
 $6 = ((($2)) + 304|0);
 $7 = $6;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = $12;$14 = $9;
 setTempRet0(($13) | 0);
 return ($14|0);
}
function _FLAC__stream_decoder_get_decode_position($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = ((($3)) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_iiii[$5 & 15]($0,$1,$8)|0);
 $10 = ($9|0)==(0);
 if (!($10)) {
  $$0 = 0;
  return ($$0|0);
 }
 $11 = HEAP32[$2>>2]|0;
 $12 = ((($11)) + 56|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_FLAC__bitreader_is_consumed_byte_aligned($13)|0);
 $15 = ($14|0)==(0);
 if ($15) {
  $$0 = 0;
  return ($$0|0);
 }
 $16 = (_FLAC__stream_decoder_get_input_bytes_unconsumed($0)|0);
 $17 = $1;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) + 4)|0;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = (_i64Subtract(($19|0),($22|0),($16|0),0)|0);
 $24 = (getTempRet0() | 0);
 $25 = $1;
 $26 = $25;
 HEAP32[$26>>2] = $23;
 $27 = (($25) + 4)|0;
 $28 = $27;
 HEAP32[$28>>2] = $24;
 $$0 = 1;
 return ($$0|0);
}
function _FLAC__stream_decoder_get_input_bytes_unconsumed($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_FLAC__bitreader_get_input_bits_unconsumed($4)|0);
 $6 = $5 >>> 3;
 return ($6|0);
}
function _FLAC__stream_decoder_process_single($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $$0$ph = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 L1: while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = HEAP32[$2>>2]|0;
  switch ($3|0) {
  case 1:  {
   label = 5;
   break L1;
   break;
  }
  case 7: case 4:  {
   $$0$ph = 1;
   label = 9;
   break L1;
   break;
  }
  case 0:  {
   $4 = (_find_metadata_($0)|0);
   $5 = ($4|0)==(0);
   if ($5) {
    $$0$ph = 0;
    label = 9;
    break L1;
   }
   break;
  }
  case 2:  {
   $8 = (_frame_sync_($0)|0);
   $9 = ($8|0)==(0);
   if ($9) {
    $$0$ph = 1;
    label = 9;
    break L1;
   }
   break;
  }
  case 3:  {
   $10 = (_read_frame_($0,$1,1)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    $$0$ph = 0;
    label = 9;
    break L1;
   }
   $12 = HEAP32[$1>>2]|0;
   $13 = ($12|0)==(0);
   if (!($13)) {
    $$0$ph = 1;
    label = 9;
    break L1;
   }
   break;
  }
  default: {
   $$0 = 0;
   label = 10;
   break L1;
  }
  }
 }
 if ((label|0) == 5) {
  $6 = (_read_metadata_($0)|0);
  $7 = ($6|0)!=(0);
  $$ = $7&1;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 9) {
  $$0 = $$0$ph;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 10) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _find_metadata_($0) {
 $0 = $0|0;
 var $$0$ph$be = 0, $$0$ph39 = 0, $$02437 = 0, $$025$ph$be = 0, $$025$ph38 = 0, $$02536 = 0, $$026 = 0, $$mask = 0, $$pr = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = ((($0)) + 4|0);
 $3 = ((($0)) + 4|0);
 $$0$ph39 = 1;$$025$ph38 = 0;
 L1: while(1) {
  $$02437 = 0;$$02536 = $$025$ph38;
  while(1) {
   $4 = HEAP32[$2>>2]|0;
   $5 = ((($4)) + 3520|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0);
   if ($7) {
    $11 = ((($4)) + 56|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = (_FLAC__bitreader_read_raw_uint32($12,$1,8)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     $$026 = 0;
     label = 24;
     break L1;
    }
    $$pr = HEAP32[$1>>2]|0;
    $18 = $$pr;
   } else {
    $8 = ((($4)) + 3614|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = $9&255;
    HEAP32[$1>>2] = $10;
    HEAP32[$5>>2] = 0;
    $18 = $10;
   }
   $15 = (2361 + ($$02536)|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = $16&255;
   $19 = ($18|0)==($17|0);
   if ($19) {
    label = 8;
    break;
   }
   $22 = ($$02437>>>0)>(2);
   if ($22) {
    $$026 = 0;
    label = 24;
    break L1;
   }
   $23 = (3186 + ($$02437)|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = ($18|0)==($25|0);
   if (!($26)) {
    label = 15;
    break;
   }
   $27 = (($$02437) + 1)|0;
   $28 = ($27|0)==(3);
   if ($28) {
    $29 = (_skip_id3v2_tag_($0)|0);
    $30 = ($29|0)==(0);
    if ($30) {
     $$026 = 0;
     label = 24;
     break L1;
    }
   }
   $$02437 = $27;$$02536 = 0;
  }
  if ((label|0) == 8) {
   label = 0;
   $20 = (($$02536) + 1)|0;
   $$0$ph$be = 1;$$025$ph$be = $20;
  }
  else if ((label|0) == 15) {
   label = 0;
   $31 = ($18|0)==(255);
   do {
    if ($31) {
     $32 = $18&255;
     $33 = HEAP32[$3>>2]|0;
     $34 = ((($33)) + 3612|0);
     HEAP8[$34>>0] = $32;
     $35 = HEAP32[$3>>2]|0;
     $36 = ((($35)) + 56|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = (_FLAC__bitreader_read_raw_uint32($37,$1,8)|0);
     $39 = ($38|0)==(0);
     if ($39) {
      $$026 = 0;
      label = 24;
      break L1;
     }
     $40 = HEAP32[$1>>2]|0;
     $41 = ($40|0)==(255);
     if ($41) {
      $42 = $40&255;
      $43 = HEAP32[$3>>2]|0;
      $44 = ((($43)) + 3614|0);
      HEAP8[$44>>0] = $42;
      $45 = ((($43)) + 3520|0);
      HEAP32[$45>>2] = 1;
      break;
     } else {
      $$mask = $40 & -2;
      $46 = ($$mask|0)==(248);
      if ($46) {
       label = 20;
       break L1;
      } else {
       break;
      }
     }
    }
   } while(0);
   $51 = ($$0$ph39|0)==(0);
   if ($51) {
    $$0$ph$be = 0;$$025$ph$be = 0;
   } else {
    _send_error_to_client_($0,0);
    $$0$ph$be = 0;$$025$ph$be = 0;
   }
  }
  $21 = ($$025$ph$be>>>0)<(4);
  if ($21) {
   $$0$ph39 = $$0$ph$be;$$025$ph38 = $$025$ph$be;
  } else {
   label = 23;
   break;
  }
 }
 if ((label|0) == 20) {
  $47 = $40&255;
  $48 = HEAP32[$3>>2]|0;
  $49 = ((($48)) + 3613|0);
  HEAP8[$49>>0] = $47;
  $50 = HEAP32[$0>>2]|0;
  HEAP32[$50>>2] = 3;
  $$026 = 1;
  STACKTOP = sp;return ($$026|0);
 }
 else if ((label|0) == 23) {
  $52 = HEAP32[$0>>2]|0;
  HEAP32[$52>>2] = 1;
  $$026 = 1;
  STACKTOP = sp;return ($$026|0);
 }
 else if ((label|0) == 24) {
  STACKTOP = sp;return ($$026|0);
 }
 return (0)|0;
}
function _read_metadata_($0) {
 $0 = $0|0;
 var $$084 = 0, $$085 = 0, $$087102 = 0, $$097 = 0, $$188103 = 0, $$3 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $1 = sp + 184|0;
 $2 = sp + 180|0;
 $3 = sp + 176|0;
 $4 = sp;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 56|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[287]|0;
 $10 = (_FLAC__bitreader_read_raw_uint32($8,$1,$9)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $$3 = 0;
  STACKTOP = sp;return ($$3|0);
 }
 $12 = HEAP32[$1>>2]|0;
 $13 = ($12|0)!=(0);
 $14 = $13&1;
 $15 = HEAP32[$5>>2]|0;
 $16 = ((($15)) + 56|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[276]|0;
 $19 = (_FLAC__bitreader_read_raw_uint32($17,$2,$18)|0);
 $20 = ($19|0)==(0);
 if ($20) {
  $$3 = 0;
  STACKTOP = sp;return ($$3|0);
 }
 $21 = HEAP32[$5>>2]|0;
 $22 = ((($21)) + 56|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[277]|0;
 $25 = (_FLAC__bitreader_read_raw_uint32($23,$3,$24)|0);
 $26 = ($25|0)==(0);
 if ($26) {
  $$3 = 0;
  STACKTOP = sp;return ($$3|0);
 }
 $27 = HEAP32[$2>>2]|0;
 L10: do {
  switch ($27|0) {
  case 0:  {
   $28 = HEAP32[$3>>2]|0;
   $29 = (_read_metadata_streaminfo_($0,$14,$28)|0);
   $30 = ($29|0)==(0);
   if ($30) {
    $$3 = 0;
    STACKTOP = sp;return ($$3|0);
   }
   $31 = HEAP32[$5>>2]|0;
   $32 = ((($31)) + 248|0);
   HEAP32[$32>>2] = 1;
   $33 = ((($31)) + 312|0);
   $34 = (_memcmp($33,6148,16)|0);
   $35 = ($34|0)==(0);
   if ($35) {
    $36 = ((($31)) + 3648|0);
    HEAP32[$36>>2] = 0;
   }
   $37 = ((($31)) + 3656|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($38|0)==(0);
   if ($39) {
    $40 = ((($31)) + 608|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = ($41|0)==(0);
    if ($42) {
     label = 73;
    } else {
     $43 = ((($31)) + 28|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = ($44|0)==(0|0);
     if ($45) {
      label = 73;
     } else {
      $46 = ((($31)) + 256|0);
      $47 = ((($31)) + 48|0);
      $48 = HEAP32[$47>>2]|0;
      FUNCTION_TABLE_viii[$44 & 7]($0,$46,$48);
      label = 73;
     }
    }
   } else {
    label = 73;
   }
   break;
  }
  case 3:  {
   $49 = HEAP32[$5>>2]|0;
   $50 = ((($49)) + 252|0);
   HEAP32[$50>>2] = 0;
   $51 = HEAP32[$3>>2]|0;
   $52 = (_read_metadata_seektable_($0,$14,$51)|0);
   $53 = ($52|0)==(0);
   if ($53) {
    $$3 = 0;
    STACKTOP = sp;return ($$3|0);
   }
   $54 = HEAP32[$5>>2]|0;
   $55 = ((($54)) + 252|0);
   HEAP32[$55>>2] = 1;
   $56 = ((($54)) + 3656|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ($57|0)==(0);
   if ($58) {
    $59 = ((($54)) + 620|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = ($60|0)==(0);
    if ($61) {
     label = 73;
    } else {
     $62 = ((($54)) + 28|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = ($63|0)==(0|0);
     if ($64) {
      label = 73;
     } else {
      $65 = ((($54)) + 432|0);
      $66 = ((($54)) + 48|0);
      $67 = HEAP32[$66>>2]|0;
      FUNCTION_TABLE_viii[$63 & 7]($0,$65,$67);
      label = 73;
     }
    }
   } else {
    label = 73;
   }
   break;
  }
  default: {
   $68 = HEAP32[$5>>2]|0;
   $69 = (((($68)) + 608|0) + ($27<<2)|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ($70|0)!=(0);
   $72 = $71 ^ 1;
   $73 = $72&1;
   $74 = HEAP32[$3>>2]|0;
   _memset(($4|0),0,176)|0;
   $75 = ((($4)) + 4|0);
   HEAP32[$75>>2] = $14;
   HEAP32[$4>>2] = $27;
   $76 = ((($4)) + 8|0);
   HEAP32[$76>>2] = $74;
   $77 = ($27|0)==(2);
   do {
    if ($77) {
     $78 = ((($68)) + 56|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ((($4)) + 16|0);
     $81 = HEAP32[275]|0;
     $82 = $81 >>> 3;
     $83 = (_FLAC__bitreader_read_byte_block_aligned_no_crc($79,$80,$82)|0);
     $84 = ($83|0)==(0);
     if (!($84)) {
      $85 = ($74>>>0)<($82>>>0);
      if ($85) {
       $86 = HEAP32[$0>>2]|0;
       HEAP32[$86>>2] = 8;
       break;
      }
      $87 = (($74) - ($82))|0;
      $88 = HEAP32[$5>>2]|0;
      $89 = ((($88)) + 1124|0);
      $90 = HEAP32[$89>>2]|0;
      $91 = ($90|0)==(0);
      if ($91) {
       $$084 = $87;$$085 = $73;
       label = 23;
      } else {
       $92 = (_has_id_filtered_($0,$80)|0);
       $93 = ($92|0)==(0);
       $94 = $71&1;
       $spec$select = $93 ? $73 : $94;
       $$084 = $87;$$085 = $spec$select;
       label = 23;
      }
     }
    } else {
     $$084 = $74;$$085 = $73;
     label = 23;
    }
   } while(0);
   do {
    if ((label|0) == 23) {
     $95 = ($$085|0)==(0);
     if ($95) {
      $101 = HEAP32[$2>>2]|0;
      L23: do {
       switch ($101|0) {
       case 1:  {
        $102 = HEAP32[$5>>2]|0;
        $103 = ((($102)) + 56|0);
        $104 = HEAP32[$103>>2]|0;
        $105 = (_FLAC__bitreader_skip_byte_block_aligned_no_crc($104,$$084)|0);
        $106 = ($105|0)==(0);
        if ($106) {
         $$097 = 0;
        } else {
         label = 40;
        }
        break;
       }
       case 2:  {
        $107 = ($$084|0)==(0);
        if ($107) {
         $117 = ((($4)) + 20|0);
         HEAP32[$117>>2] = 0;
         label = 40;
         break L23;
        }
        $108 = (_malloc($$084)|0);
        $109 = ((($4)) + 20|0);
        HEAP32[$109>>2] = $108;
        $110 = ($108|0)==(0|0);
        if ($110) {
         $111 = HEAP32[$0>>2]|0;
         HEAP32[$111>>2] = 8;
         $$097 = 0;
         break L23;
        } else {
         $112 = HEAP32[$5>>2]|0;
         $113 = ((($112)) + 56|0);
         $114 = HEAP32[$113>>2]|0;
         $115 = (_FLAC__bitreader_read_byte_block_aligned_no_crc($114,$108,$$084)|0);
         $116 = ($115|0)==(0);
         if ($116) {
          $$097 = 0;
          break L23;
         } else {
          label = 40;
          break L23;
         }
        }
        break;
       }
       case 4:  {
        $118 = ((($4)) + 16|0);
        $119 = (_read_metadata_vorbiscomment_($0,$118,$$084)|0);
        $120 = ($119|0)==(0);
        if ($120) {
         $$097 = 0;
        } else {
         label = 40;
        }
        break;
       }
       case 5:  {
        $121 = ((($4)) + 16|0);
        $122 = (_read_metadata_cuesheet_($0,$121)|0);
        $123 = ($122|0)==(0);
        if ($123) {
         $$097 = 0;
        } else {
         label = 40;
        }
        break;
       }
       case 6:  {
        $124 = ((($4)) + 16|0);
        $125 = (_read_metadata_picture_($0,$124)|0);
        $126 = ($125|0)==(0);
        if ($126) {
         $$097 = 0;
        } else {
         label = 40;
        }
        break;
       }
       case 3: case 0:  {
        label = 40;
        break;
       }
       default: {
        $127 = ($$084|0)==(0);
        if ($127) {
         $132 = ((($4)) + 16|0);
         HEAP32[$132>>2] = 0;
         label = 40;
         break L23;
        }
        $128 = (_malloc($$084)|0);
        $129 = ((($4)) + 16|0);
        HEAP32[$129>>2] = $128;
        $130 = ($128|0)==(0|0);
        if ($130) {
         $131 = HEAP32[$0>>2]|0;
         HEAP32[$131>>2] = 8;
         $$097 = 0;
         break L23;
        } else {
         $133 = HEAP32[$5>>2]|0;
         $134 = ((($133)) + 56|0);
         $135 = HEAP32[$134>>2]|0;
         $136 = (_FLAC__bitreader_read_byte_block_aligned_no_crc($135,$128,$$084)|0);
         $137 = ($136|0)==(0);
         if ($137) {
          $$097 = 0;
          break L23;
         } else {
          label = 40;
          break L23;
         }
        }
       }
       }
      } while(0);
      if ((label|0) == 40) {
       $138 = HEAP32[$5>>2]|0;
       $139 = ((($138)) + 3656|0);
       $140 = HEAP32[$139>>2]|0;
       $141 = ($140|0)==(0);
       if ($141) {
        $142 = ((($138)) + 28|0);
        $143 = HEAP32[$142>>2]|0;
        $144 = ($143|0)==(0|0);
        if ($144) {
         $$097 = 1;
        } else {
         $145 = ((($138)) + 48|0);
         $146 = HEAP32[$145>>2]|0;
         FUNCTION_TABLE_viii[$143 & 7]($0,$4,$146);
         $$097 = 1;
        }
       } else {
        $$097 = 1;
       }
      }
      $147 = HEAP32[$2>>2]|0;
      switch ($147|0) {
      case 1:  {
       break;
      }
      case 2:  {
       $148 = ((($4)) + 20|0);
       $149 = HEAP32[$148>>2]|0;
       $150 = ($149|0)==(0|0);
       if (!($150)) {
        _free($149);
       }
       break;
      }
      case 4:  {
       $151 = ((($4)) + 20|0);
       $152 = HEAP32[$151>>2]|0;
       $153 = ($152|0)==(0|0);
       if (!($153)) {
        _free($152);
       }
       $154 = ((($4)) + 24|0);
       $155 = HEAP32[$154>>2]|0;
       $156 = ($155|0)==(0);
       if (!($156)) {
        $157 = ((($4)) + 28|0);
        $$087102 = 0;
        while(1) {
         $158 = HEAP32[$157>>2]|0;
         $159 = (((($158) + ($$087102<<3)|0)) + 4|0);
         $160 = HEAP32[$159>>2]|0;
         $161 = ($160|0)==(0|0);
         if (!($161)) {
          _free($160);
         }
         $162 = (($$087102) + 1)|0;
         $163 = HEAP32[$154>>2]|0;
         $164 = ($162>>>0)<($163>>>0);
         if ($164) {
          $$087102 = $162;
         } else {
          break;
         }
        }
       }
       $165 = ((($4)) + 28|0);
       $166 = HEAP32[$165>>2]|0;
       $167 = ($166|0)==(0|0);
       if (!($167)) {
        _free($166);
       }
       break;
      }
      case 5:  {
       $168 = ((($4)) + 164|0);
       $169 = HEAP32[$168>>2]|0;
       $170 = ($169|0)==(0);
       if (!($170)) {
        $171 = ((($4)) + 168|0);
        $$188103 = 0;
        while(1) {
         $172 = HEAP32[$171>>2]|0;
         $173 = (((($172) + ($$188103<<5)|0)) + 24|0);
         $174 = HEAP32[$173>>2]|0;
         $175 = ($174|0)==(0|0);
         if (!($175)) {
          _free($174);
         }
         $176 = (($$188103) + 1)|0;
         $177 = HEAP32[$168>>2]|0;
         $178 = ($176>>>0)<($177>>>0);
         if ($178) {
          $$188103 = $176;
         } else {
          break;
         }
        }
       }
       $179 = ((($4)) + 168|0);
       $180 = HEAP32[$179>>2]|0;
       $181 = ($180|0)==(0|0);
       if (!($181)) {
        _free($180);
       }
       break;
      }
      case 6:  {
       $182 = ((($4)) + 20|0);
       $183 = HEAP32[$182>>2]|0;
       $184 = ($183|0)==(0|0);
       if (!($184)) {
        _free($183);
       }
       $185 = ((($4)) + 24|0);
       $186 = HEAP32[$185>>2]|0;
       $187 = ($186|0)==(0|0);
       if (!($187)) {
        _free($186);
       }
       $188 = ((($4)) + 48|0);
       $189 = HEAP32[$188>>2]|0;
       $190 = ($189|0)==(0|0);
       if (!($190)) {
        _free($189);
       }
       break;
      }
      default: {
       $191 = ((($4)) + 16|0);
       $192 = HEAP32[$191>>2]|0;
       $193 = ($192|0)==(0|0);
       if (!($193)) {
        _free($192);
       }
      }
      }
      if (!($$097)) {
       break;
      }
     } else {
      $96 = HEAP32[$5>>2]|0;
      $97 = ((($96)) + 56|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = (_FLAC__bitreader_skip_byte_block_aligned_no_crc($98,$$084)|0);
      $100 = ($99|0)==(0);
      if ($100) {
       break;
      }
     }
     if ($13) {
      break L10;
     } else {
      $$3 = 1;
     }
     STACKTOP = sp;return ($$3|0);
    }
   } while(0);
   $$3 = 0;
   STACKTOP = sp;return ($$3|0);
  }
  }
 } while(0);
 if ((label|0) == 73) {
  if (!($13)) {
   $$3 = 1;
   STACKTOP = sp;return ($$3|0);
  }
 }
 $194 = HEAP32[$5>>2]|0;
 $195 = ((($194)) + 6160|0);
 $196 = (_FLAC__stream_decoder_get_decode_position($0,$195)|0);
 $197 = ($196|0)==(0);
 if ($197) {
  $198 = HEAP32[$5>>2]|0;
  $199 = ((($198)) + 6160|0);
  $200 = $199;
  $201 = $200;
  HEAP32[$201>>2] = 0;
  $202 = (($200) + 4)|0;
  $203 = $202;
  HEAP32[$203>>2] = 0;
 }
 $204 = HEAP32[$0>>2]|0;
 HEAP32[$204>>2] = 2;
 $$3 = 1;
 STACKTOP = sp;return ($$3|0);
}
function _frame_sync_($0) {
 $0 = $0|0;
 var $$0 = 0, $$019 = 0, $$mask = 0, $$pr = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = (_FLAC__stream_decoder_get_total_samples($0)|0);
 $3 = (getTempRet0() | 0);
 $4 = ($2|0)==(0);
 $5 = ($3|0)==(0);
 $6 = $4 & $5;
 if (!($6)) {
  $7 = ((($0)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 240|0);
  $10 = $9;
  $11 = $10;
  $12 = HEAP32[$11>>2]|0;
  $13 = (($10) + 4)|0;
  $14 = $13;
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15>>>0)<($3>>>0);
  $17 = ($12>>>0)<($2>>>0);
  $18 = ($15|0)==($3|0);
  $19 = $18 & $17;
  $20 = $16 | $19;
  if (!($20)) {
   $21 = HEAP32[$0>>2]|0;
   HEAP32[$21>>2] = 4;
   $$019 = 1;
   STACKTOP = sp;return ($$019|0);
  }
 }
 $22 = ((($0)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($23)) + 56|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (_FLAC__bitreader_is_consumed_byte_aligned($25)|0);
 $27 = ($26|0)==(0);
 if ($27) {
  $28 = HEAP32[$22>>2]|0;
  $29 = ((($28)) + 56|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (_FLAC__bitreader_bits_left_for_byte_alignment($30)|0);
  $32 = (_FLAC__bitreader_read_raw_uint32($30,$1,$31)|0);
  $33 = ($32|0)==(0);
  if ($33) {
   $$019 = 0;
   STACKTOP = sp;return ($$019|0);
  }
 }
 $$0 = 1;
 L10: while(1) {
  $34 = HEAP32[$22>>2]|0;
  $35 = ((($34)) + 3520|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)==(0);
  if ($37) {
   $41 = ((($34)) + 56|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (_FLAC__bitreader_read_raw_uint32($42,$1,8)|0);
   $44 = ($43|0)==(0);
   if ($44) {
    $$019 = 0;
    label = 20;
    break;
   }
   $$pr = HEAP32[$1>>2]|0;
   $45 = $$pr;
  } else {
   $38 = ((($34)) + 3614|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = $39&255;
   HEAP32[$1>>2] = $40;
   HEAP32[$35>>2] = 0;
   $45 = $40;
  }
  $46 = ($45|0)==(255);
  do {
   if ($46) {
    $47 = $45&255;
    $48 = HEAP32[$22>>2]|0;
    $49 = ((($48)) + 3612|0);
    HEAP8[$49>>0] = $47;
    $50 = HEAP32[$22>>2]|0;
    $51 = ((($50)) + 56|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = (_FLAC__bitreader_read_raw_uint32($52,$1,8)|0);
    $54 = ($53|0)==(0);
    if ($54) {
     $$019 = 0;
     label = 20;
     break L10;
    }
    $55 = HEAP32[$1>>2]|0;
    $56 = ($55|0)==(255);
    if ($56) {
     $57 = $55&255;
     $58 = HEAP32[$22>>2]|0;
     $59 = ((($58)) + 3614|0);
     HEAP8[$59>>0] = $57;
     $60 = ((($58)) + 3520|0);
     HEAP32[$60>>2] = 1;
     break;
    } else {
     $$mask = $55 & -2;
     $61 = ($$mask|0)==(248);
     if ($61) {
      label = 16;
      break L10;
     } else {
      break;
     }
    }
   }
  } while(0);
  $66 = ($$0|0)==(0);
  if (!($66)) {
   _send_error_to_client_($0,0);
  }
  $$0 = 0;
 }
 if ((label|0) == 16) {
  $62 = $55&255;
  $63 = HEAP32[$22>>2]|0;
  $64 = ((($63)) + 3613|0);
  HEAP8[$64>>0] = $62;
  $65 = HEAP32[$0>>2]|0;
  HEAP32[$65>>2] = 3;
  $$019 = 1;
  STACKTOP = sp;return ($$019|0);
 }
 else if ((label|0) == 20) {
  STACKTOP = sp;return ($$019|0);
 }
 return (0)|0;
}
function _read_frame_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0116133 = 0, $$0118127 = 0, $$1117131 = 0, $$1119129 = 0, $$2 = 0, $$2120126 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $spec$select = 0, $spec$select121 = 0, $spec$select122 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 HEAP32[$1>>2] = 0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 3612|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = (48 + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 << 8;
 $12 = $10 >>> 8;
 $13 = ((($5)) + 3613|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $12 ^ $15;
 $17 = (48 + ($16<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 ^ $11;
 $20 = ((($5)) + 56|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $19&65535;
 _FLAC__bitreader_reset_read_crc16($21,$22);
 $23 = (_read_frame_header_($0)|0);
 $24 = ($23|0)==(0);
 if ($24) {
  $$2 = 0;
  STACKTOP = sp;return ($$2|0);
 }
 $25 = HEAP32[$0>>2]|0;
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(2);
 if ($27) {
  $$2 = 1;
  STACKTOP = sp;return ($$2|0);
 }
 $28 = HEAP32[$4>>2]|0;
 $29 = ((($28)) + 1136|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($28)) + 1144|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (_allocate_output_($0,$30,$32)|0);
 $34 = ($33|0)==(0);
 if ($34) {
  $$2 = 0;
  STACKTOP = sp;return ($$2|0);
 }
 $35 = HEAP32[$4>>2]|0;
 $36 = ((($35)) + 1144|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(0);
 L10: do {
  if (!($38)) {
   $$0116133 = 0;$45 = $35;
   while(1) {
    $44 = ((($45)) + 1152|0);
    $46 = HEAP32[$44>>2]|0;
    $47 = ((($45)) + 1148|0);
    $48 = HEAP32[$47>>2]|0;
    switch ($48|0) {
    case 3:  {
     $53 = ($$0116133|0)==(1);
     $54 = $53&1;
     $spec$select122 = (($46) + ($54))|0;
     $$0 = $spec$select122;
     break;
    }
    case 1:  {
     $49 = ($$0116133|0)==(1);
     $50 = $49&1;
     $spec$select = (($46) + ($50))|0;
     $$0 = $spec$select;
     break;
    }
    case 2:  {
     $51 = ($$0116133|0)==(0);
     $52 = $51&1;
     $spec$select121 = (($46) + ($52))|0;
     $$0 = $spec$select121;
     break;
    }
    default: {
     $$0 = $46;
    }
    }
    $55 = (_read_subframe_($0,$$0116133,$$0,$2)|0);
    $56 = ($55|0)==(0);
    if ($56) {
     $$2 = 0;
     label = 38;
     break;
    }
    $57 = HEAP32[$0>>2]|0;
    $58 = HEAP32[$57>>2]|0;
    $59 = ($58|0)==(2);
    $42 = (($$0116133) + 1)|0;
    if ($59) {
     $$2 = 1;
     label = 38;
     break;
    }
    $39 = HEAP32[$4>>2]|0;
    $40 = ((($39)) + 1144|0);
    $41 = HEAP32[$40>>2]|0;
    $43 = ($42>>>0)<($41>>>0);
    if ($43) {
     $$0116133 = $42;$45 = $39;
    } else {
     break L10;
    }
   }
   if ((label|0) == 38) {
    STACKTOP = sp;return ($$2|0);
   }
  }
 } while(0);
 $60 = (_read_zero_padding_($0)|0);
 $61 = ($60|0)==(0);
 if ($61) {
  $$2 = 0;
  STACKTOP = sp;return ($$2|0);
 }
 $62 = HEAP32[$0>>2]|0;
 $63 = HEAP32[$62>>2]|0;
 $64 = ($63|0)==(2);
 if ($64) {
  $$2 = 1;
  STACKTOP = sp;return ($$2|0);
 }
 $65 = HEAP32[$4>>2]|0;
 $66 = ((($65)) + 56|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = (_FLAC__bitreader_get_read_crc16($67)|0);
 $69 = HEAP32[$4>>2]|0;
 $70 = ((($69)) + 56|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = HEAP32[289]|0;
 $73 = (_FLAC__bitreader_read_raw_uint32($71,$3,$72)|0);
 $74 = ($73|0)==(0);
 if ($74) {
  $$2 = 0;
  STACKTOP = sp;return ($$2|0);
 }
 $75 = $68&65535;
 $76 = HEAP32[$3>>2]|0;
 $77 = ($76|0)==($75|0);
 L34: do {
  if ($77) {
   $78 = ($2|0)==(0);
   if (!($78)) {
    $79 = HEAP32[$4>>2]|0;
    $80 = ((($79)) + 1148|0);
    $81 = HEAP32[$80>>2]|0;
    switch ($81|0) {
    case 3:  {
     $112 = ((($79)) + 1136|0);
     $113 = HEAP32[$112>>2]|0;
     $114 = ($113|0)==(0);
     if ($114) {
      break L34;
     }
     $115 = ((($79)) + 60|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ((($79)) + 64|0);
     $118 = HEAP32[$117>>2]|0;
     $$2120126 = 0;
     while(1) {
      $119 = (($116) + ($$2120126<<2)|0);
      $120 = HEAP32[$119>>2]|0;
      $121 = (($118) + ($$2120126<<2)|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = $120 << 1;
      $124 = $122 & 1;
      $125 = $124 | $123;
      $126 = (($125) + ($122))|0;
      $127 = $126 >> 1;
      HEAP32[$119>>2] = $127;
      $128 = (($125) - ($122))|0;
      $129 = $128 >> 1;
      HEAP32[$121>>2] = $129;
      $130 = (($$2120126) + 1)|0;
      $131 = HEAP32[$112>>2]|0;
      $132 = ($130>>>0)<($131>>>0);
      if ($132) {
       $$2120126 = $130;
      } else {
       break;
      }
     }
     break;
    }
    case 1:  {
     $82 = ((($79)) + 1136|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==(0);
     if ($84) {
      break L34;
     }
     $85 = ((($79)) + 60|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = ((($79)) + 64|0);
     $88 = HEAP32[$87>>2]|0;
     $$0118127 = 0;
     while(1) {
      $89 = (($86) + ($$0118127<<2)|0);
      $90 = HEAP32[$89>>2]|0;
      $91 = (($88) + ($$0118127<<2)|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = (($90) - ($92))|0;
      HEAP32[$91>>2] = $93;
      $94 = (($$0118127) + 1)|0;
      $95 = HEAP32[$82>>2]|0;
      $96 = ($94>>>0)<($95>>>0);
      if ($96) {
       $$0118127 = $94;
      } else {
       break;
      }
     }
     break;
    }
    case 2:  {
     $97 = ((($79)) + 1136|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = ($98|0)==(0);
     if ($99) {
      break L34;
     }
     $100 = ((($79)) + 64|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ((($79)) + 60|0);
     $103 = HEAP32[$102>>2]|0;
     $$1119129 = 0;
     while(1) {
      $104 = (($101) + ($$1119129<<2)|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = (($103) + ($$1119129<<2)|0);
      $107 = HEAP32[$106>>2]|0;
      $108 = (($107) + ($105))|0;
      HEAP32[$106>>2] = $108;
      $109 = (($$1119129) + 1)|0;
      $110 = HEAP32[$97>>2]|0;
      $111 = ($109>>>0)<($110>>>0);
      if ($111) {
       $$1119129 = $109;
      } else {
       break;
      }
     }
     break;
    }
    default: {
     break L34;
    }
    }
   }
  } else {
   _send_error_to_client_($0,2);
   $133 = ($2|0)==(0);
   if (!($133)) {
    $134 = HEAP32[$4>>2]|0;
    $135 = ((($134)) + 1144|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = ($136|0)==(0);
    if (!($137)) {
     $$1117131 = 0;$139 = $134;
     while(1) {
      $138 = (((($139)) + 60|0) + ($$1117131<<2)|0);
      $140 = HEAP32[$138>>2]|0;
      $141 = ((($139)) + 1136|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = $142 << 2;
      _memset(($140|0),0,($143|0))|0;
      $144 = (($$1117131) + 1)|0;
      $145 = HEAP32[$4>>2]|0;
      $146 = ((($145)) + 1144|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ($144>>>0)<($147>>>0);
      if ($148) {
       $$1117131 = $144;$139 = $145;
      } else {
       break;
      }
     }
    }
   }
  }
 } while(0);
 HEAP32[$1>>2] = 1;
 $149 = HEAP32[$4>>2]|0;
 $150 = ((($149)) + 232|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = ($151|0)==(0);
 if (!($152)) {
  $153 = ((($149)) + 228|0);
  HEAP32[$153>>2] = $151;
 }
 $154 = ((($149)) + 1144|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = HEAP32[$0>>2]|0;
 $157 = ((($156)) + 8|0);
 HEAP32[$157>>2] = $155;
 $158 = ((($149)) + 1148|0);
 $159 = HEAP32[$158>>2]|0;
 $160 = ((($156)) + 12|0);
 HEAP32[$160>>2] = $159;
 $161 = ((($149)) + 1152|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = ((($156)) + 16|0);
 HEAP32[$163>>2] = $162;
 $164 = ((($149)) + 1140|0);
 $165 = HEAP32[$164>>2]|0;
 $166 = ((($156)) + 20|0);
 HEAP32[$166>>2] = $165;
 $167 = ((($149)) + 1136|0);
 $168 = HEAP32[$167>>2]|0;
 $169 = ((($156)) + 24|0);
 HEAP32[$169>>2] = $168;
 $170 = ((($149)) + 1160|0);
 $171 = $170;
 $172 = $171;
 $173 = HEAP32[$172>>2]|0;
 $174 = (($171) + 4)|0;
 $175 = $174;
 $176 = HEAP32[$175>>2]|0;
 $177 = (_i64Add(($173|0),($176|0),($168|0),0)|0);
 $178 = (getTempRet0() | 0);
 $179 = ((($149)) + 240|0);
 $180 = $179;
 $181 = $180;
 HEAP32[$181>>2] = $177;
 $182 = (($180) + 4)|0;
 $183 = $182;
 HEAP32[$183>>2] = $178;
 $184 = ($2|0)==(0);
 if (!($184)) {
  $185 = ((($149)) + 1136|0);
  $186 = ((($149)) + 60|0);
  $187 = (_write_audio_frame_to_client_($0,$185,$186)|0);
  $188 = ($187|0)==(0);
  if (!($188)) {
   $189 = HEAP32[$0>>2]|0;
   HEAP32[$189>>2] = 7;
   $$2 = 0;
   STACKTOP = sp;return ($$2|0);
  }
 }
 $190 = HEAP32[$0>>2]|0;
 HEAP32[$190>>2] = 2;
 $$2 = 1;
 STACKTOP = sp;return ($$2|0);
}
function _read_frame_header_($0) {
 $0 = $0|0;
 var $$0113 = 0, $$0114 = 0, $$1107 = 0, $$2 = 0, $$3 = 0, $$4 = 0, $$4112 = 0, $$lobit = 0, $$sink = 0, $$sink124 = 0, $$sink126 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $spec$select = 0, $trunc = 0, $trunc$clear = 0;
 var $trunc116 = 0, $trunc116$clear = 0, $trunc117 = 0, $trunc117$clear = 0, $trunc118 = 0, $trunc118$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $1 = sp + 16|0;
 $2 = sp;
 $3 = sp + 24|0;
 $4 = sp + 12|0;
 $5 = sp + 8|0;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 3612|0);
 $9 = HEAP8[$8>>0]|0;
 HEAP8[$3>>0] = $9;
 $10 = ((($7)) + 3613|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ((($3)) + 1|0);
 HEAP8[$12>>0] = $11;
 HEAP32[$4>>2] = 2;
 $13 = ($11&255) >>> 1;
 $$lobit = $13 & 1;
 $14 = $$lobit&255;
 $15 = HEAP32[$6>>2]|0;
 $16 = ((($15)) + 56|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (_FLAC__bitreader_read_raw_uint32($17,$1,8)|0);
 $19 = ($18|0)==(0);
 if ($19) {
  $$4112 = 0;
  STACKTOP = sp;return ($$4112|0);
 }
 $20 = HEAP32[$1>>2]|0;
 $21 = ($20|0)==(255);
 if (!($21)) {
  $26 = $20&255;
  $27 = HEAP32[$4>>2]|0;
  $28 = (($27) + 1)|0;
  HEAP32[$4>>2] = $28;
  $29 = (($3) + ($27)|0);
  HEAP8[$29>>0] = $26;
  $30 = HEAP32[$6>>2]|0;
  $31 = ((($30)) + 56|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (_FLAC__bitreader_read_raw_uint32($32,$1,8)|0);
  $34 = ($33|0)==(0);
  if ($34) {
   $$4112 = 0;
   STACKTOP = sp;return ($$4112|0);
  }
  $298 = HEAP32[$1>>2]|0;
  $299 = ($298|0)==(255);
  if (!($299)) {
   $300 = $298&255;
   $301 = HEAP32[$4>>2]|0;
   $302 = (($301) + 1)|0;
   HEAP32[$4>>2] = $302;
   $303 = (($3) + ($301)|0);
   HEAP8[$303>>0] = $300;
   $304 = ((($3)) + 2|0);
   $trunc116 = HEAP8[$304>>0]|0;
   $305 = $trunc116&255;
   $38 = $305 >>> 4;
   HEAP32[$1>>2] = $38;
   $trunc = $38&255;
   $trunc$clear = $trunc & 15;
   switch ($trunc$clear<<24>>24) {
   case 0:  {
    $$0114 = 0;$$1107 = 1;
    break;
   }
   case 1:  {
    $35 = HEAP32[$6>>2]|0;
    $36 = ((($35)) + 1136|0);
    HEAP32[$36>>2] = 192;
    $$0114 = 0;$$1107 = $14;
    break;
   }
   case 5: case 4: case 3: case 2:  {
    $37 = (($38) + -2)|0;
    $39 = 576 << $37;
    $40 = HEAP32[$6>>2]|0;
    $41 = ((($40)) + 1136|0);
    HEAP32[$41>>2] = $39;
    $$0114 = 0;$$1107 = $14;
    break;
   }
   case 7: case 6:  {
    $$0114 = $38;$$1107 = $14;
    break;
   }
   case 15: case 14: case 13: case 12: case 11: case 10: case 9: case 8:  {
    $42 = (($38) + -8)|0;
    $43 = 256 << $42;
    $44 = HEAP32[$6>>2]|0;
    $45 = ((($44)) + 1136|0);
    HEAP32[$45>>2] = $43;
    $$0114 = 0;$$1107 = $14;
    break;
   }
   default: {
    // unreachable;
   }
   }
   $46 = $trunc116 & 15;
   $47 = $46&255;
   HEAP32[$1>>2] = $47;
   $trunc116$clear = $trunc116 & 15;
   do {
    switch ($trunc116$clear<<24>>24) {
    case 0:  {
     $48 = HEAP32[$6>>2]|0;
     $49 = ((($48)) + 248|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50|0)==(0);
     if ($51) {
      $$0113 = 0;$$2 = 1;
     } else {
      $52 = ((($48)) + 288|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = ((($48)) + 1140|0);
      HEAP32[$54>>2] = $53;
      $$0113 = 0;$$2 = $$1107;
     }
     break;
    }
    case 1:  {
     $55 = HEAP32[$6>>2]|0;
     $56 = ((($55)) + 1140|0);
     HEAP32[$56>>2] = 88200;
     $$0113 = 0;$$2 = $$1107;
     break;
    }
    case 2:  {
     $57 = HEAP32[$6>>2]|0;
     $58 = ((($57)) + 1140|0);
     HEAP32[$58>>2] = 176400;
     $$0113 = 0;$$2 = $$1107;
     break;
    }
    case 3:  {
     $59 = HEAP32[$6>>2]|0;
     $60 = ((($59)) + 1140|0);
     HEAP32[$60>>2] = 192000;
     $$0113 = 0;$$2 = $$1107;
     break;
    }
    case 4:  {
     $61 = HEAP32[$6>>2]|0;
     $62 = ((($61)) + 1140|0);
     HEAP32[$62>>2] = 8000;
     $$0113 = 0;$$2 = $$1107;
     break;
    }
    case 5:  {
     $63 = HEAP32[$6>>2]|0;
     $64 = ((($63)) + 1140|0);
     HEAP32[$64>>2] = 16000;
     $$0113 = 0;$$2 = $$1107;
     break;
    }
    case 6:  {
     $65 = HEAP32[$6>>2]|0;
     $66 = ((($65)) + 1140|0);
     HEAP32[$66>>2] = 22050;
     $$0113 = 0;$$2 = $$1107;
     break;
    }
    case 7:  {
     $67 = HEAP32[$6>>2]|0;
     $68 = ((($67)) + 1140|0);
     HEAP32[$68>>2] = 24000;
     $$0113 = 0;$$2 = $$1107;
     break;
    }
    case 8:  {
     $69 = HEAP32[$6>>2]|0;
     $70 = ((($69)) + 1140|0);
     HEAP32[$70>>2] = 32000;
     $$0113 = 0;$$2 = $$1107;
     break;
    }
    case 9:  {
     $71 = HEAP32[$6>>2]|0;
     $72 = ((($71)) + 1140|0);
     HEAP32[$72>>2] = 44100;
     $$0113 = 0;$$2 = $$1107;
     break;
    }
    case 10:  {
     $73 = HEAP32[$6>>2]|0;
     $74 = ((($73)) + 1140|0);
     HEAP32[$74>>2] = 48000;
     $$0113 = 0;$$2 = $$1107;
     break;
    }
    case 11:  {
     $75 = HEAP32[$6>>2]|0;
     $76 = ((($75)) + 1140|0);
     HEAP32[$76>>2] = 96000;
     $$0113 = 0;$$2 = $$1107;
     break;
    }
    case 14: case 13: case 12:  {
     $$0113 = $47;$$2 = $$1107;
     break;
    }
    case 15:  {
     _send_error_to_client_($0,1);
     $77 = HEAP32[$0>>2]|0;
     HEAP32[$77>>2] = 2;
     $$4112 = 1;
     STACKTOP = sp;return ($$4112|0);
     break;
    }
    default: {
     // unreachable;
    }
    }
   } while(0);
   $78 = ((($3)) + 3|0);
   $79 = HEAP8[$78>>0]|0;
   $80 = $79&255;
   $81 = $80 >>> 4;
   HEAP32[$1>>2] = $81;
   $82 = $80 & 128;
   $83 = ($82|0)==(0);
   L35: do {
    if ($83) {
     $86 = (($81) + 1)|0;
     $87 = HEAP32[$6>>2]|0;
     $88 = ((($87)) + 1144|0);
     HEAP32[$88>>2] = $86;
     $$sink = 0;$$sink124 = $87;
     label = 31;
    } else {
     $84 = HEAP32[$6>>2]|0;
     $85 = ((($84)) + 1144|0);
     HEAP32[$85>>2] = 2;
     $trunc118 = $81&255;
     $trunc118$clear = $trunc118 & 7;
     switch ($trunc118$clear<<24>>24) {
     case 0:  {
      $$sink = 1;$$sink124 = $84;
      label = 31;
      break L35;
      break;
     }
     case 1:  {
      $$sink = 2;$$sink124 = $84;
      label = 31;
      break L35;
      break;
     }
     case 2:  {
      $$sink = 3;$$sink124 = $84;
      label = 31;
      break L35;
      break;
     }
     default: {
      $$3 = 1;
      break L35;
     }
     }
    }
   } while(0);
   if ((label|0) == 31) {
    $89 = ((($$sink124)) + 1148|0);
    HEAP32[$89>>2] = $$sink;
    $$3 = $$2;
   }
   $90 = $79 & 14;
   $91 = $90&255;
   $92 = $91 >>> 1;
   HEAP32[$1>>2] = $92;
   $trunc117 = $92&255;
   $trunc117$clear = $trunc117 & 7;
   switch ($trunc117$clear<<24>>24) {
   case 0:  {
    $93 = HEAP32[$6>>2]|0;
    $94 = ((($93)) + 248|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($95|0)==(0);
    if ($96) {
     $$4 = 1;
    } else {
     $97 = ((($93)) + 296|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = ((($93)) + 1152|0);
     HEAP32[$99>>2] = $98;
     $$4 = $$3;
    }
    break;
   }
   case 1:  {
    $100 = HEAP32[$6>>2]|0;
    $101 = ((($100)) + 1152|0);
    HEAP32[$101>>2] = 8;
    $$4 = $$3;
    break;
   }
   case 2:  {
    $102 = HEAP32[$6>>2]|0;
    $103 = ((($102)) + 1152|0);
    HEAP32[$103>>2] = 12;
    $$4 = $$3;
    break;
   }
   case 4:  {
    $104 = HEAP32[$6>>2]|0;
    $105 = ((($104)) + 1152|0);
    HEAP32[$105>>2] = 16;
    $$4 = $$3;
    break;
   }
   case 5:  {
    $106 = HEAP32[$6>>2]|0;
    $107 = ((($106)) + 1152|0);
    HEAP32[$107>>2] = 20;
    $$4 = $$3;
    break;
   }
   case 6:  {
    $108 = HEAP32[$6>>2]|0;
    $109 = ((($108)) + 1152|0);
    HEAP32[$109>>2] = 24;
    $$4 = $$3;
    break;
   }
   case 7: case 3:  {
    $$4 = 1;
    break;
   }
   default: {
    // unreachable;
   }
   }
   $110 = $79 & 1;
   $111 = ($110<<24>>24)==(0);
   $112 = HEAP8[$12>>0]|0;
   $113 = $112 & 1;
   $114 = ($113<<24>>24)==(0);
   do {
    if ($114) {
     $115 = HEAP32[$6>>2]|0;
     $116 = ((($115)) + 248|0);
     $117 = HEAP32[$116>>2]|0;
     $118 = ($117|0)==(0);
     if (!($118)) {
      $119 = ((($115)) + 272|0);
      $120 = HEAP32[$119>>2]|0;
      $121 = ((($115)) + 276|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = ($120|0)==($122|0);
      if (!($123)) {
       label = 44;
       break;
      }
     }
     $153 = ((($115)) + 56|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (_FLAC__bitreader_read_utf8_uint32($154,$1,$3,$4)|0);
     $156 = ($155|0)==(0);
     if ($156) {
      $$4112 = 0;
      STACKTOP = sp;return ($$4112|0);
     }
     $157 = HEAP32[$1>>2]|0;
     $158 = ($157|0)==(-1);
     if (!($158)) {
      $167 = HEAP32[$6>>2]|0;
      $168 = ((($167)) + 1156|0);
      HEAP32[$168>>2] = 0;
      $169 = ((($167)) + 1160|0);
      HEAP32[$169>>2] = $157;
      break;
     }
     $159 = HEAP32[$4>>2]|0;
     $160 = (($159) + -1)|0;
     $161 = (($3) + ($160)|0);
     $162 = HEAP8[$161>>0]|0;
     $163 = HEAP32[$6>>2]|0;
     $164 = ((($163)) + 3614|0);
     HEAP8[$164>>0] = $162;
     $165 = ((($163)) + 3520|0);
     HEAP32[$165>>2] = 1;
     _send_error_to_client_($0,1);
     $166 = HEAP32[$0>>2]|0;
     HEAP32[$166>>2] = 2;
     $$4112 = 1;
     STACKTOP = sp;return ($$4112|0);
    } else {
     label = 44;
    }
   } while(0);
   do {
    if ((label|0) == 44) {
     $124 = HEAP32[$6>>2]|0;
     $125 = ((($124)) + 56|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = (_FLAC__bitreader_read_utf8_uint64($126,$2,$3,$4)|0);
     $128 = ($127|0)==(0);
     if ($128) {
      $$4112 = 0;
      STACKTOP = sp;return ($$4112|0);
     }
     $129 = $2;
     $130 = $129;
     $131 = HEAP32[$130>>2]|0;
     $132 = (($129) + 4)|0;
     $133 = $132;
     $134 = HEAP32[$133>>2]|0;
     $135 = ($131|0)==(-1);
     $136 = ($134|0)==(-1);
     $137 = $135 & $136;
     if (!($137)) {
      $146 = HEAP32[$6>>2]|0;
      $147 = ((($146)) + 1156|0);
      HEAP32[$147>>2] = 1;
      $148 = ((($146)) + 1160|0);
      $149 = $148;
      $150 = $149;
      HEAP32[$150>>2] = $131;
      $151 = (($149) + 4)|0;
      $152 = $151;
      HEAP32[$152>>2] = $134;
      break;
     }
     $138 = HEAP32[$4>>2]|0;
     $139 = (($138) + -1)|0;
     $140 = (($3) + ($139)|0);
     $141 = HEAP8[$140>>0]|0;
     $142 = HEAP32[$6>>2]|0;
     $143 = ((($142)) + 3614|0);
     HEAP8[$143>>0] = $141;
     $144 = ((($142)) + 3520|0);
     HEAP32[$144>>2] = 1;
     _send_error_to_client_($0,1);
     $145 = HEAP32[$0>>2]|0;
     HEAP32[$145>>2] = 2;
     $$4112 = 1;
     STACKTOP = sp;return ($$4112|0);
    }
   } while(0);
   $170 = ($$0114|0)==(0);
   if (!($170)) {
    $171 = HEAP32[$6>>2]|0;
    $172 = ((($171)) + 56|0);
    $173 = HEAP32[$172>>2]|0;
    $174 = (_FLAC__bitreader_read_raw_uint32($173,$1,8)|0);
    $175 = ($174|0)==(0);
    if ($175) {
     $$4112 = 0;
     STACKTOP = sp;return ($$4112|0);
    }
    $176 = HEAP32[$1>>2]|0;
    $177 = $176&255;
    $178 = HEAP32[$4>>2]|0;
    $179 = (($178) + 1)|0;
    HEAP32[$4>>2] = $179;
    $180 = (($3) + ($178)|0);
    HEAP8[$180>>0] = $177;
    $181 = ($$0114|0)==(7);
    do {
     if ($181) {
      $182 = HEAP32[$6>>2]|0;
      $183 = ((($182)) + 56|0);
      $184 = HEAP32[$183>>2]|0;
      $185 = (_FLAC__bitreader_read_raw_uint32($184,$5,8)|0);
      $186 = ($185|0)==(0);
      if (!($186)) {
       $187 = HEAP32[$5>>2]|0;
       $188 = $187&255;
       $189 = HEAP32[$4>>2]|0;
       $190 = (($189) + 1)|0;
       HEAP32[$4>>2] = $190;
       $191 = (($3) + ($189)|0);
       HEAP8[$191>>0] = $188;
       $192 = HEAP32[$1>>2]|0;
       $193 = $192 << 8;
       $194 = $193 | $187;
       HEAP32[$1>>2] = $194;
       break;
      }
      $$4112 = 0;
      STACKTOP = sp;return ($$4112|0);
     }
    } while(0);
    $195 = HEAP32[$1>>2]|0;
    $196 = (($195) + 1)|0;
    $197 = HEAP32[$6>>2]|0;
    $198 = ((($197)) + 1136|0);
    HEAP32[$198>>2] = $196;
   }
   $199 = ($$0113|0)==(0);
   if (!($199)) {
    $200 = HEAP32[$6>>2]|0;
    $201 = ((($200)) + 56|0);
    $202 = HEAP32[$201>>2]|0;
    $203 = (_FLAC__bitreader_read_raw_uint32($202,$1,8)|0);
    $204 = ($203|0)==(0);
    if ($204) {
     $$4112 = 0;
     STACKTOP = sp;return ($$4112|0);
    }
    $205 = HEAP32[$1>>2]|0;
    $206 = $205&255;
    $207 = HEAP32[$4>>2]|0;
    $208 = (($207) + 1)|0;
    HEAP32[$4>>2] = $208;
    $209 = (($3) + ($207)|0);
    HEAP8[$209>>0] = $206;
    $cond = ($$0113|0)==(12);
    do {
     if ($cond) {
      $215 = HEAP32[$1>>2]|0;
      $216 = ($215*1000)|0;
      $$sink126 = $216;
     } else {
      $210 = HEAP32[$6>>2]|0;
      $211 = ((($210)) + 56|0);
      $212 = HEAP32[$211>>2]|0;
      $213 = (_FLAC__bitreader_read_raw_uint32($212,$5,8)|0);
      $214 = ($213|0)==(0);
      if (!($214)) {
       $217 = HEAP32[$5>>2]|0;
       $218 = $217&255;
       $219 = HEAP32[$4>>2]|0;
       $220 = (($219) + 1)|0;
       HEAP32[$4>>2] = $220;
       $221 = (($3) + ($219)|0);
       HEAP8[$221>>0] = $218;
       $222 = HEAP32[$1>>2]|0;
       $223 = $222 << 8;
       $224 = $223 | $217;
       HEAP32[$1>>2] = $224;
       $225 = ($$0113|0)==(13);
       $226 = ($224*10)|0;
       $spec$select = $225 ? $224 : $226;
       $$sink126 = $spec$select;
       break;
      }
      $$4112 = 0;
      STACKTOP = sp;return ($$4112|0);
     }
    } while(0);
    $227 = HEAP32[$6>>2]|0;
    $228 = ((($227)) + 1140|0);
    HEAP32[$228>>2] = $$sink126;
   }
   $229 = HEAP32[$6>>2]|0;
   $230 = ((($229)) + 56|0);
   $231 = HEAP32[$230>>2]|0;
   $232 = (_FLAC__bitreader_read_raw_uint32($231,$1,8)|0);
   $233 = ($232|0)==(0);
   if ($233) {
    $$4112 = 0;
    STACKTOP = sp;return ($$4112|0);
   }
   $234 = HEAP32[$1>>2]|0;
   $235 = HEAP32[$4>>2]|0;
   $236 = (_FLAC__crc8($3,$235)|0);
   $237 = $234&255;
   $238 = ($236<<24>>24)==($237<<24>>24);
   if (!($238)) {
    _send_error_to_client_($0,1);
    $239 = HEAP32[$0>>2]|0;
    HEAP32[$239>>2] = 2;
    $$4112 = 1;
    STACKTOP = sp;return ($$4112|0);
   }
   $240 = HEAP32[$6>>2]|0;
   $241 = ((($240)) + 232|0);
   HEAP32[$241>>2] = 0;
   $242 = ((($240)) + 1156|0);
   $243 = HEAP32[$242>>2]|0;
   $244 = ($243|0)==(0);
   do {
    if ($244) {
     $245 = ((($240)) + 1160|0);
     $246 = HEAP32[$245>>2]|0;
     HEAP32[$1>>2] = $246;
     HEAP32[$242>>2] = 1;
     $247 = ((($240)) + 228|0);
     $248 = HEAP32[$247>>2]|0;
     $249 = ($248|0)==(0);
     if (!($249)) {
      $250 = (___muldi3(($248|0),0,($246|0),0)|0);
      $251 = (getTempRet0() | 0);
      $252 = ((($240)) + 1160|0);
      $253 = $252;
      $254 = $253;
      HEAP32[$254>>2] = $250;
      $255 = (($253) + 4)|0;
      $256 = $255;
      HEAP32[$256>>2] = $251;
      label = 79;
      break;
     }
     $257 = ((($240)) + 248|0);
     $258 = HEAP32[$257>>2]|0;
     $259 = ($258|0)==(0);
     if (!($259)) {
      $260 = ((($240)) + 272|0);
      $261 = HEAP32[$260>>2]|0;
      $262 = ((($240)) + 276|0);
      $263 = HEAP32[$262>>2]|0;
      $264 = ($261|0)==($263|0);
      if (!($264)) {
       break;
      }
      $265 = (___muldi3(($261|0),0,($246|0),0)|0);
      $266 = (getTempRet0() | 0);
      $267 = ((($240)) + 1160|0);
      $268 = $267;
      $269 = $268;
      HEAP32[$269>>2] = $265;
      $270 = (($268) + 4)|0;
      $271 = $270;
      HEAP32[$271>>2] = $266;
      $272 = HEAP32[$6>>2]|0;
      $273 = ((($272)) + 276|0);
      $274 = HEAP32[$273>>2]|0;
      $275 = ((($272)) + 232|0);
      HEAP32[$275>>2] = $274;
      label = 79;
      break;
     }
     $276 = ($246|0)==(0);
     if ($276) {
      $277 = ((($240)) + 1160|0);
      $278 = $277;
      $279 = $278;
      HEAP32[$279>>2] = 0;
      $280 = (($278) + 4)|0;
      $281 = $280;
      HEAP32[$281>>2] = 0;
      $282 = HEAP32[$6>>2]|0;
      $283 = ((($282)) + 1136|0);
      $284 = HEAP32[$283>>2]|0;
      $285 = ((($282)) + 232|0);
      HEAP32[$285>>2] = $284;
      label = 79;
      break;
     } else {
      $286 = ((($240)) + 1136|0);
      $287 = HEAP32[$286>>2]|0;
      $288 = (___muldi3(($287|0),0,($246|0),0)|0);
      $289 = (getTempRet0() | 0);
      $290 = ((($240)) + 1160|0);
      $291 = $290;
      $292 = $291;
      HEAP32[$292>>2] = $288;
      $293 = (($291) + 4)|0;
      $294 = $293;
      HEAP32[$294>>2] = $289;
      label = 79;
      break;
     }
    } else {
     label = 79;
    }
   } while(0);
   if ((label|0) == 79) {
    $295 = ($$4|0)==(0);
    $296 = $111 & $295;
    if ($296) {
     $$4112 = 1;
     STACKTOP = sp;return ($$4112|0);
    }
   }
   _send_error_to_client_($0,3);
   $297 = HEAP32[$0>>2]|0;
   HEAP32[$297>>2] = 2;
   $$4112 = 1;
   STACKTOP = sp;return ($$4112|0);
  }
 }
 $22 = HEAP32[$6>>2]|0;
 $23 = ((($22)) + 3614|0);
 HEAP8[$23>>0] = -1;
 $24 = ((($22)) + 3520|0);
 HEAP32[$24>>2] = 1;
 _send_error_to_client_($0,1);
 $25 = HEAP32[$0>>2]|0;
 HEAP32[$25>>2] = 2;
 $$4112 = 1;
 STACKTOP = sp;return ($$4112|0);
}
function _allocate_output_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04244 = 0, $$143 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 220|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6>>>0)<($1>>>0);
 if (!($7)) {
  $8 = ((($4)) + 224|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9>>>0)<($2>>>0);
  if (!($10)) {
   $$0 = 1;
   return ($$0|0);
  }
 }
 $$04244 = 0;
 while(1) {
  $11 = HEAP32[$3>>2]|0;
  $12 = (((($11)) + 60|0) + ($$04244<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0|0);
  if (!($14)) {
   $15 = ((($13)) + -16|0);
   _free($15);
   $16 = HEAP32[$3>>2]|0;
   $17 = (((($16)) + 60|0) + ($$04244<<2)|0);
   HEAP32[$17>>2] = 0;
  }
  $18 = HEAP32[$3>>2]|0;
  $19 = (((($18)) + 3616|0) + ($$04244<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0|0);
  if (!($21)) {
   _free($20);
   $22 = HEAP32[$3>>2]|0;
   $23 = (((($22)) + 92|0) + ($$04244<<2)|0);
   HEAP32[$23>>2] = 0;
   $24 = HEAP32[$3>>2]|0;
   $25 = (((($24)) + 3616|0) + ($$04244<<2)|0);
   HEAP32[$25>>2] = 0;
  }
  $26 = (($$04244) + 1)|0;
  $exitcond = ($26|0)==(8);
  if ($exitcond) {
   break;
  } else {
   $$04244 = $26;
  }
 }
 $27 = ($2|0)==(0);
 L14: do {
  if (!($27)) {
   $$143 = 0;
   while(1) {
    $30 = (_safe_malloc_muladd2_($1)|0);
    $31 = ($30|0)==(0|0);
    if ($31) {
     label = 13;
     break;
    }
    ;HEAP32[$30>>2]=0|0;HEAP32[$30+4>>2]=0|0;HEAP32[$30+8>>2]=0|0;HEAP32[$30+12>>2]=0|0;
    $33 = ((($30)) + 16|0);
    $34 = HEAP32[$3>>2]|0;
    $35 = (((($34)) + 60|0) + ($$143<<2)|0);
    HEAP32[$35>>2] = $33;
    $36 = HEAP32[$3>>2]|0;
    $37 = (((($36)) + 3616|0) + ($$143<<2)|0);
    $38 = (((($36)) + 92|0) + ($$143<<2)|0);
    $39 = (_FLAC__memory_alloc_aligned_int32_array($1,$37,$38)|0);
    $40 = ($39|0)==(0);
    $28 = (($$143) + 1)|0;
    if ($40) {
     label = 15;
     break;
    }
    $29 = ($28>>>0)<($2>>>0);
    if ($29) {
     $$143 = $28;
    } else {
     break L14;
    }
   }
   if ((label|0) == 13) {
    $32 = HEAP32[$0>>2]|0;
    HEAP32[$32>>2] = 8;
    $$0 = 0;
    return ($$0|0);
   }
   else if ((label|0) == 15) {
    $41 = HEAP32[$0>>2]|0;
    HEAP32[$41>>2] = 8;
    $$0 = 0;
    return ($$0|0);
   }
  }
 } while(0);
 $42 = HEAP32[$3>>2]|0;
 $43 = ((($42)) + 220|0);
 HEAP32[$43>>2] = $1;
 $44 = ((($42)) + 224|0);
 HEAP32[$44>>2] = $2;
 $$0 = 1;
 return ($$0|0);
}
function _read_subframe_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05865 = 0, $$1 = 0, $$160 = 0, $$old = 0, $$old63 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond$old = 0, $or$cond$old$old = 0, $or$cond62 = 0, $or$cond64 = 0, $spec$select = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp + 4|0;
 $5 = sp;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 56|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_FLAC__bitreader_read_raw_uint32($9,$4,8)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $12 = HEAP32[$4>>2]|0;
 $13 = $12 & 1;
 $14 = $12 & 254;
 HEAP32[$4>>2] = $14;
 $15 = ($13|0)!=(0);
 do {
  if ($15) {
   $16 = HEAP32[$6>>2]|0;
   $17 = ((($16)) + 56|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (_FLAC__bitreader_read_unary_unsigned($18,$5)|0);
   $20 = ($19|0)==(0);
   if ($20) {
    $$1 = 0;
    STACKTOP = sp;return ($$1|0);
   } else {
    $21 = HEAP32[$5>>2]|0;
    $22 = (($21) + 1)|0;
    $23 = HEAP32[$6>>2]|0;
    $24 = (((((($23)) + 1176|0) + (($1*292)|0)|0)) + 288|0);
    HEAP32[$24>>2] = $22;
    $25 = ($22>>>0)<($2>>>0);
    $26 = $25 ? $22 : 0;
    $spec$select = (($2) - ($26))|0;
    if ($25) {
     $$160 = $spec$select;
     break;
    } else {
     $$1 = 0;
    }
    STACKTOP = sp;return ($$1|0);
   }
  } else {
   $27 = HEAP32[$6>>2]|0;
   $28 = (((((($27)) + 1176|0) + (($1*292)|0)|0)) + 288|0);
   HEAP32[$28>>2] = 0;
   $$160 = $2;
  }
 } while(0);
 $29 = HEAP32[$4>>2]|0;
 $30 = $29 & 128;
 $31 = ($30|0)==(0);
 if (!($31)) {
  _send_error_to_client_($0,0);
  $32 = HEAP32[$0>>2]|0;
  HEAP32[$32>>2] = 2;
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 L17: do {
  switch ($29|0) {
  case 0:  {
   $33 = (_read_subframe_constant_($0,$1,$$160,$3)|0);
   $34 = ($33|0)==(0);
   if ($34) {
    $$1 = 0;
    STACKTOP = sp;return ($$1|0);
   } else {
    label = 21;
   }
   break;
  }
  case 2:  {
   $35 = (_read_subframe_verbatim_($0,$1,$$160,$3)|0);
   $36 = ($35|0)==(0);
   if ($36) {
    $$1 = 0;
    STACKTOP = sp;return ($$1|0);
   } else {
    label = 21;
   }
   break;
  }
  default: {
   $37 = ($29>>>0)<(16);
   if ($37) {
    _send_error_to_client_($0,3);
    $38 = HEAP32[$0>>2]|0;
    HEAP32[$38>>2] = 2;
    $$1 = 1;
    STACKTOP = sp;return ($$1|0);
   }
   $39 = ($29>>>0)<(25);
   if ($39) {
    $40 = $29 >>> 1;
    $41 = $40 & 7;
    $42 = (_read_subframe_fixed_($0,$1,$$160,$41,$3)|0);
    $43 = ($42|0)==(0);
    if ($43) {
     $$1 = 0;
     STACKTOP = sp;return ($$1|0);
    }
    $44 = HEAP32[$0>>2]|0;
    $45 = HEAP32[$44>>2]|0;
    $46 = ($45|0)!=(2);
    $$old = ($3|0)!=(0);
    $or$cond$old = $$old & $15;
    $or$cond64 = $or$cond$old & $46;
    if ($or$cond64) {
     break L17;
    } else {
     $$1 = 1;
    }
    STACKTOP = sp;return ($$1|0);
   }
   $47 = ($29>>>0)<(64);
   if ($47) {
    _send_error_to_client_($0,3);
    $48 = HEAP32[$0>>2]|0;
    HEAP32[$48>>2] = 2;
    $$1 = 1;
    STACKTOP = sp;return ($$1|0);
   }
   $49 = $29 >>> 1;
   $50 = $49 & 31;
   $51 = (($50) + 1)|0;
   $52 = (_read_subframe_lpc_($0,$1,$$160,$51,$3)|0);
   $53 = ($52|0)==(0);
   if ($53) {
    $$1 = 0;
    STACKTOP = sp;return ($$1|0);
   }
   $54 = HEAP32[$0>>2]|0;
   $55 = HEAP32[$54>>2]|0;
   $56 = ($55|0)!=(2);
   $57 = ($3|0)!=(0);
   $or$cond = $57 & $15;
   $or$cond62 = $or$cond & $56;
   if (!($or$cond62)) {
    $$1 = 1;
    STACKTOP = sp;return ($$1|0);
   }
  }
  }
 } while(0);
 if ((label|0) == 21) {
  $$old63 = ($3|0)!=(0);
  $or$cond$old$old = $$old63 & $15;
  if (!($or$cond$old$old)) {
   $$1 = 1;
   STACKTOP = sp;return ($$1|0);
  }
 }
 $58 = HEAP32[$6>>2]|0;
 $59 = (((((($58)) + 1176|0) + (($1*292)|0)|0)) + 288|0);
 $60 = HEAP32[$59>>2]|0;
 HEAP32[$4>>2] = $60;
 $61 = ((($58)) + 1136|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ($62|0)==(0);
 if ($63) {
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 $64 = (((($58)) + 60|0) + ($1<<2)|0);
 $65 = HEAP32[$64>>2]|0;
 $$05865 = 0;
 while(1) {
  $66 = (($65) + ($$05865<<2)|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = HEAP32[$4>>2]|0;
  $69 = $67 << $68;
  HEAP32[$66>>2] = $69;
  $70 = (($$05865) + 1)|0;
  $71 = HEAP32[$61>>2]|0;
  $72 = ($70>>>0)<($71>>>0);
  if ($72) {
   $$05865 = $70;
  } else {
   $$1 = 1;
   break;
  }
 }
 STACKTOP = sp;return ($$1|0);
}
function _read_zero_padding_($0) {
 $0 = $0|0;
 var $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 56|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_FLAC__bitreader_is_consumed_byte_aligned($5)|0);
 $7 = ($6|0)==(0);
 if (!($7)) {
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 HEAP32[$1>>2] = 0;
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($8)) + 56|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_FLAC__bitreader_bits_left_for_byte_alignment($10)|0);
 $12 = (_FLAC__bitreader_read_raw_uint32($10,$1,$11)|0);
 $13 = ($12|0)==(0);
 if ($13) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $14 = HEAP32[$1>>2]|0;
 $15 = ($14|0)==(0);
 if (!($15)) {
  _send_error_to_client_($0,0);
  $16 = HEAP32[$0>>2]|0;
  HEAP32[$16>>2] = 2;
 }
 $$1 = 1;
 STACKTOP = sp;return ($$1|0);
}
function _send_error_to_client_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 3656|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = ((($3)) + 32|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($3)) + 48|0);
  $10 = HEAP32[$9>>2]|0;
  FUNCTION_TABLE_viii[$8 & 7]($0,$1,$10);
  return;
 }
 $11 = ($1|0)==(3);
 if (!($11)) {
  return;
 }
 $12 = ((($3)) + 6176|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 1)|0;
 HEAP32[$12>>2] = $14;
 return;
}
function _write_audio_frame_to_client_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$058 = 0, $$2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $3 = sp;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 3656|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  $80 = ((($5)) + 248|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = ($81|0)==(0);
  if ($82) {
   $83 = ((($5)) + 3648|0);
   HEAP32[$83>>2] = 0;
  }
  $84 = ((($5)) + 3648|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = ($85|0)==(0);
  if (!($86)) {
   $87 = ((($5)) + 3660|0);
   $88 = ((($1)) + 8|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = HEAP32[$1>>2]|0;
   $91 = ((($1)) + 16|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = (($92) + 7)|0;
   $94 = $93 >>> 3;
   $95 = (_FLAC__MD5Accumulate($87,$2,$89,$90,$94)|0);
   $96 = ($95|0)==(0);
   if ($96) {
    $$2 = 1;
    STACKTOP = sp;return ($$2|0);
   }
  }
  $97 = HEAP32[$4>>2]|0;
  $98 = ((($97)) + 24|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = ((($97)) + 48|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (FUNCTION_TABLE_iiiii[$99 & 7]($0,$1,$2,$101)|0);
  $$2 = $102;
  STACKTOP = sp;return ($$2|0);
 }
 $9 = ((($1)) + 24|0);
 $10 = $9;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$1>>2]|0;
 $17 = ((($5)) + 6168|0);
 $18 = $17;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($5)) + 3776|0);
 _memcpy(($24|0),($1|0),2384)|0;
 $25 = ($23>>>0)<($15>>>0);
 $26 = ($20>>>0)<($12>>>0);
 $27 = ($23|0)==($15|0);
 $28 = $27 & $26;
 $29 = $25 | $28;
 if ($29) {
  $$2 = 0;
  STACKTOP = sp;return ($$2|0);
 }
 $30 = (_i64Add(($12|0),($15|0),($16|0),0)|0);
 $31 = (getTempRet0() | 0);
 $32 = ($23>>>0)<($31>>>0);
 $33 = ($20>>>0)<($30>>>0);
 $34 = ($23|0)==($31|0);
 $35 = $34 & $33;
 $36 = $32 | $35;
 if (!($36)) {
  $$2 = 0;
  STACKTOP = sp;return ($$2|0);
 }
 $37 = (_i64Subtract(($20|0),($23|0),($12|0),($15|0))|0);
 $38 = (getTempRet0() | 0);
 $39 = HEAP32[$4>>2]|0;
 $40 = ((($39)) + 3656|0);
 HEAP32[$40>>2] = 0;
 $41 = ($37|0)==(0);
 if ($41) {
  $75 = ((($39)) + 24|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ((($39)) + 48|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (FUNCTION_TABLE_iiiii[$76 & 7]($0,$1,$2,$78)|0);
  $$2 = $79;
  STACKTOP = sp;return ($$2|0);
 }
 $42 = ((($1)) + 8|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)==(0);
 if (!($44)) {
  $45 = HEAP32[$42>>2]|0;
  $$058 = 0;
  while(1) {
   $46 = (($2) + ($$058<<2)|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (($47) + ($37<<2)|0);
   $49 = (($3) + ($$058<<2)|0);
   HEAP32[$49>>2] = $48;
   $50 = (($$058) + 1)|0;
   $51 = ($50>>>0)<($45>>>0);
   if ($51) {
    $$058 = $50;
   } else {
    break;
   }
  }
 }
 $52 = ((($39)) + 3776|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (($53) - ($37))|0;
 HEAP32[$52>>2] = $54;
 $55 = ((($39)) + 3800|0);
 $56 = $55;
 $57 = $56;
 $58 = HEAP32[$57>>2]|0;
 $59 = (($56) + 4)|0;
 $60 = $59;
 $61 = HEAP32[$60>>2]|0;
 $62 = (_i64Add(($58|0),($61|0),($37|0),0)|0);
 $63 = (getTempRet0() | 0);
 $64 = $55;
 $65 = $64;
 HEAP32[$65>>2] = $62;
 $66 = (($64) + 4)|0;
 $67 = $66;
 HEAP32[$67>>2] = $63;
 $68 = HEAP32[$4>>2]|0;
 $69 = ((($68)) + 24|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = ((($68)) + 3776|0);
 $72 = ((($68)) + 48|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = (FUNCTION_TABLE_iiiii[$70 & 7]($0,$71,$3,$73)|0);
 $$2 = $74;
 STACKTOP = sp;return ($$2|0);
}
function _read_subframe_constant_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$02021 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (((($6)) + 60|0) + ($1<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (((($6)) + 1176|0) + (($1*292)|0)|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($6)) + 56|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_FLAC__bitreader_read_raw_int32($11,$4,$2)|0);
 $13 = ($12|0)==(0);
 if ($13) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = HEAP32[$4>>2]|0;
 $15 = (((((($6)) + 1176|0) + (($1*292)|0)|0)) + 4|0);
 HEAP32[$15>>2] = $14;
 $16 = ($3|0)==(0);
 if ($16) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = HEAP32[$5>>2]|0;
 $18 = ((($17)) + 1136|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0);
 if ($20) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = HEAP32[$5>>2]|0;
 $22 = ((($21)) + 1136|0);
 $$02021 = 0;
 while(1) {
  $23 = HEAP32[$4>>2]|0;
  $24 = (($8) + ($$02021<<2)|0);
  HEAP32[$24>>2] = $23;
  $25 = (($$02021) + 1)|0;
  $26 = HEAP32[$22>>2]|0;
  $27 = ($25>>>0)<($26>>>0);
  if ($27) {
   $$02021 = $25;
  } else {
   $$0 = 1;
   break;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _read_subframe_verbatim_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$025 = 0, $$029 = 0, $$lcssa = 0, $$lcssa27 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (((((($6)) + 1176|0) + (($1*292)|0)|0)) + 4|0);
 $8 = (((($6)) + 92|0) + ($1<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (((($6)) + 1176|0) + (($1*292)|0)|0);
 HEAP32[$10>>2] = 1;
 HEAP32[$7>>2] = $9;
 $11 = HEAP32[$5>>2]|0;
 $12 = ((($11)) + 1136|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0);
 do {
  if ($14) {
   $$lcssa = 0;$$lcssa27 = $11;
  } else {
   $$029 = 0;$16 = $11;
   while(1) {
    $15 = ((($16)) + 56|0);
    $17 = HEAP32[$15>>2]|0;
    $18 = (_FLAC__bitreader_read_raw_int32($17,$4,$2)|0);
    $19 = ($18|0)==(0);
    if ($19) {
     $$025 = 0;
     label = 8;
     break;
    }
    $20 = HEAP32[$4>>2]|0;
    $21 = (($9) + ($$029<<2)|0);
    HEAP32[$21>>2] = $20;
    $22 = (($$029) + 1)|0;
    $23 = HEAP32[$5>>2]|0;
    $24 = ((($23)) + 1136|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($22>>>0)<($25>>>0);
    if ($26) {
     $$029 = $22;$16 = $23;
    } else {
     label = 5;
     break;
    }
   }
   if ((label|0) == 5) {
    $phitmp = $25 << 2;
    $$lcssa = $phitmp;$$lcssa27 = $23;
    break;
   }
   else if ((label|0) == 8) {
    STACKTOP = sp;return ($$025|0);
   }
  }
 } while(0);
 $27 = ($3|0)==(0);
 if ($27) {
  $$025 = 1;
  STACKTOP = sp;return ($$025|0);
 }
 $28 = (((($$lcssa27)) + 60|0) + ($1<<2)|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$7>>2]|0;
 _memcpy(($29|0),($30|0),($$lcssa|0))|0;
 $$025 = 1;
 STACKTOP = sp;return ($$025|0);
}
function _read_subframe_fixed_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$054 = 0, $$056 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $switch = 0, $switch1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $5 = sp + 4|0;
 $6 = sp;
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (((($8)) + 1176|0) + (($1*292)|0)|0);
 HEAP32[$9>>2] = 2;
 $10 = (((($8)) + 92|0) + ($1<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (((((($8)) + 1176|0) + (($1*292)|0)|0)) + 36|0);
 HEAP32[$12>>2] = $11;
 $13 = (((((($8)) + 1176|0) + (($1*292)|0)|0)) + 16|0);
 HEAP32[$13>>2] = $3;
 $14 = ($3|0)==(0);
 $15 = HEAP32[$7>>2]|0;
 $16 = ((($15)) + 56|0);
 $17 = HEAP32[$16>>2]|0;
 L1: do {
  if ($14) {
   $$lcssa = $17;
  } else {
   $18 = (((((($8)) + 1176|0) + (($1*292)|0)|0)) + 20|0);
   $$056 = 0;$19 = $17;
   while(1) {
    $20 = (_FLAC__bitreader_read_raw_int32($19,$5,$2)|0);
    $21 = ($20|0)==(0);
    if ($21) {
     $$054 = 0;
     break;
    }
    $22 = HEAP32[$5>>2]|0;
    $23 = (($18) + ($$056<<2)|0);
    HEAP32[$23>>2] = $22;
    $24 = (($$056) + 1)|0;
    $25 = ($24>>>0)<($3>>>0);
    $26 = HEAP32[$7>>2]|0;
    $27 = ((($26)) + 56|0);
    $28 = HEAP32[$27>>2]|0;
    if ($25) {
     $$056 = $24;$19 = $28;
    } else {
     $$lcssa = $28;
     break L1;
    }
   }
   STACKTOP = sp;return ($$054|0);
  }
 } while(0);
 $29 = HEAP32[288]|0;
 $30 = (_FLAC__bitreader_read_raw_uint32($$lcssa,$6,$29)|0);
 $31 = ($30|0)==(0);
 if ($31) {
  $$054 = 0;
  STACKTOP = sp;return ($$054|0);
 }
 $32 = HEAP32[$6>>2]|0;
 $33 = (((((($8)) + 1176|0) + (($1*292)|0)|0)) + 4|0);
 HEAP32[$33>>2] = $32;
 $switch = ($32>>>0)<(2);
 if (!($switch)) {
  _send_error_to_client_($0,3);
  $52 = HEAP32[$0>>2]|0;
  HEAP32[$52>>2] = 2;
  $$054 = 1;
  STACKTOP = sp;return ($$054|0);
 }
 $34 = HEAP32[$7>>2]|0;
 $35 = ((($34)) + 56|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = HEAP32[284]|0;
 $38 = (_FLAC__bitreader_read_raw_uint32($36,$6,$37)|0);
 $39 = ($38|0)==(0);
 if ($39) {
  $$054 = 0;
  STACKTOP = sp;return ($$054|0);
 }
 $40 = HEAP32[$7>>2]|0;
 $41 = ((($40)) + 1136|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = HEAP32[$6>>2]|0;
 $44 = $42 >>> $43;
 $45 = ($44>>>0)<($3>>>0);
 if ($45) {
  _send_error_to_client_($0,0);
  $46 = HEAP32[$0>>2]|0;
  HEAP32[$46>>2] = 2;
  $$054 = 1;
  STACKTOP = sp;return ($$054|0);
 }
 $47 = (((((($8)) + 1176|0) + (($1*292)|0)|0)) + 8|0);
 HEAP32[$47>>2] = $43;
 $48 = HEAP32[$7>>2]|0;
 $49 = (((($48)) + 124|0) + (($1*12)|0)|0);
 $50 = (((((($8)) + 1176|0) + (($1*292)|0)|0)) + 12|0);
 HEAP32[$50>>2] = $49;
 $51 = HEAP32[$33>>2]|0;
 $switch1 = ($51>>>0)<(2);
 if ($switch1) {
  $53 = HEAP32[$7>>2]|0;
  $54 = (((($53)) + 124|0) + (($1*12)|0)|0);
  $55 = (((($53)) + 92|0) + ($1<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($51|0)==(1);
  $58 = $57&1;
  $59 = (_read_residual_partitioned_rice_($0,$3,$43,$54,$56,$58)|0);
  $60 = ($59|0)==(0);
  if ($60) {
   $$054 = 0;
   STACKTOP = sp;return ($$054|0);
  }
 }
 $61 = ($4|0)==(0);
 if ($61) {
  $$054 = 1;
  STACKTOP = sp;return ($$054|0);
 }
 $62 = HEAP32[$7>>2]|0;
 $63 = (((($62)) + 60|0) + ($1<<2)|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (((((($8)) + 1176|0) + (($1*292)|0)|0)) + 20|0);
 $66 = $3 << 2;
 _memcpy(($64|0),($65|0),($66|0))|0;
 $67 = HEAP32[$7>>2]|0;
 $68 = (((($67)) + 92|0) + ($1<<2)|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ((($67)) + 1136|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = (($71) - ($3))|0;
 $73 = (((($67)) + 60|0) + ($1<<2)|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = (($74) + ($3<<2)|0);
 _FLAC__fixed_restore_signal($69,$72,$3,$75);
 $$054 = 1;
 STACKTOP = sp;return ($$054|0);
}
function _read_subframe_lpc_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0104 = 0, $$098 = 0, $$1103 = 0, $$lcssa = 0, $$lcssa101 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $switch = 0, $switch1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $5 = sp + 4|0;
 $6 = sp;
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (((($8)) + 1176|0) + (($1*292)|0)|0);
 HEAP32[$9>>2] = 3;
 $10 = (((($8)) + 92|0) + ($1<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (((((($8)) + 1176|0) + (($1*292)|0)|0)) + 284|0);
 HEAP32[$12>>2] = $11;
 $13 = (((((($8)) + 1176|0) + (($1*292)|0)|0)) + 16|0);
 HEAP32[$13>>2] = $3;
 $14 = ($3|0)==(0);
 $15 = HEAP32[$7>>2]|0;
 $16 = ((($15)) + 56|0);
 $17 = HEAP32[$16>>2]|0;
 L1: do {
  if ($14) {
   $$lcssa101 = $17;
  } else {
   $$0104 = 0;$18 = $17;
   while(1) {
    $19 = (_FLAC__bitreader_read_raw_int32($18,$5,$2)|0);
    $20 = ($19|0)==(0);
    if ($20) {
     $$098 = 0;
     break;
    }
    $21 = HEAP32[$5>>2]|0;
    $22 = ((((((($8)) + 1176|0) + (($1*292)|0)|0)) + 156|0) + ($$0104<<2)|0);
    HEAP32[$22>>2] = $21;
    $23 = (($$0104) + 1)|0;
    $24 = ($23>>>0)<($3>>>0);
    $25 = HEAP32[$7>>2]|0;
    $26 = ((($25)) + 56|0);
    $27 = HEAP32[$26>>2]|0;
    if ($24) {
     $$0104 = $23;$18 = $27;
    } else {
     $$lcssa101 = $27;
     break L1;
    }
   }
   STACKTOP = sp;return ($$098|0);
  }
 } while(0);
 $28 = HEAP32[284]|0;
 $29 = (_FLAC__bitreader_read_raw_uint32($$lcssa101,$6,$28)|0);
 $30 = ($29|0)==(0);
 if ($30) {
  $$098 = 0;
  STACKTOP = sp;return ($$098|0);
 }
 $31 = HEAP32[$6>>2]|0;
 $32 = 1 << $28;
 $33 = (($32) + -1)|0;
 $34 = ($31|0)==($33|0);
 if ($34) {
  _send_error_to_client_($0,0);
  $35 = HEAP32[$0>>2]|0;
  HEAP32[$35>>2] = 2;
  $$098 = 1;
  STACKTOP = sp;return ($$098|0);
 }
 $36 = (($31) + 1)|0;
 $37 = (((((($8)) + 1176|0) + (($1*292)|0)|0)) + 20|0);
 HEAP32[$37>>2] = $36;
 $38 = HEAP32[$7>>2]|0;
 $39 = ((($38)) + 56|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = HEAP32[285]|0;
 $42 = (_FLAC__bitreader_read_raw_int32($40,$5,$41)|0);
 $43 = ($42|0)==(0);
 if ($43) {
  $$098 = 0;
  STACKTOP = sp;return ($$098|0);
 }
 $44 = HEAP32[$5>>2]|0;
 $45 = ($44|0)<(0);
 if ($45) {
  _send_error_to_client_($0,0);
  $46 = HEAP32[$0>>2]|0;
  HEAP32[$46>>2] = 2;
  $$098 = 1;
  STACKTOP = sp;return ($$098|0);
 }
 $47 = (((((($8)) + 1176|0) + (($1*292)|0)|0)) + 24|0);
 HEAP32[$47>>2] = $44;
 $48 = ($3|0)==(0);
 $49 = HEAP32[$7>>2]|0;
 $50 = ((($49)) + 56|0);
 $51 = HEAP32[$50>>2]|0;
 L22: do {
  if ($48) {
   $$lcssa = $51;
  } else {
   $$1103 = 0;$53 = $51;
   while(1) {
    $52 = HEAP32[$37>>2]|0;
    $54 = (_FLAC__bitreader_read_raw_int32($53,$5,$52)|0);
    $55 = ($54|0)==(0);
    if ($55) {
     $$098 = 0;
     break;
    }
    $56 = HEAP32[$5>>2]|0;
    $57 = ((((((($8)) + 1176|0) + (($1*292)|0)|0)) + 28|0) + ($$1103<<2)|0);
    HEAP32[$57>>2] = $56;
    $58 = (($$1103) + 1)|0;
    $59 = ($58>>>0)<($3>>>0);
    $60 = HEAP32[$7>>2]|0;
    $61 = ((($60)) + 56|0);
    $62 = HEAP32[$61>>2]|0;
    if ($59) {
     $$1103 = $58;$53 = $62;
    } else {
     $$lcssa = $62;
     break L22;
    }
   }
   STACKTOP = sp;return ($$098|0);
  }
 } while(0);
 $63 = HEAP32[288]|0;
 $64 = (_FLAC__bitreader_read_raw_uint32($$lcssa,$6,$63)|0);
 $65 = ($64|0)==(0);
 if ($65) {
  $$098 = 0;
  STACKTOP = sp;return ($$098|0);
 }
 $66 = HEAP32[$6>>2]|0;
 $67 = (((((($8)) + 1176|0) + (($1*292)|0)|0)) + 4|0);
 HEAP32[$67>>2] = $66;
 $switch = ($66>>>0)<(2);
 if (!($switch)) {
  _send_error_to_client_($0,3);
  $86 = HEAP32[$0>>2]|0;
  HEAP32[$86>>2] = 2;
  $$098 = 1;
  STACKTOP = sp;return ($$098|0);
 }
 $68 = HEAP32[$7>>2]|0;
 $69 = ((($68)) + 56|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = HEAP32[284]|0;
 $72 = (_FLAC__bitreader_read_raw_uint32($70,$6,$71)|0);
 $73 = ($72|0)==(0);
 if ($73) {
  $$098 = 0;
  STACKTOP = sp;return ($$098|0);
 }
 $74 = HEAP32[$7>>2]|0;
 $75 = ((($74)) + 1136|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = HEAP32[$6>>2]|0;
 $78 = $76 >>> $77;
 $79 = ($78>>>0)<($3>>>0);
 if ($79) {
  _send_error_to_client_($0,0);
  $80 = HEAP32[$0>>2]|0;
  HEAP32[$80>>2] = 2;
  $$098 = 1;
  STACKTOP = sp;return ($$098|0);
 }
 $81 = (((((($8)) + 1176|0) + (($1*292)|0)|0)) + 8|0);
 HEAP32[$81>>2] = $77;
 $82 = HEAP32[$7>>2]|0;
 $83 = (((($82)) + 124|0) + (($1*12)|0)|0);
 $84 = (((((($8)) + 1176|0) + (($1*292)|0)|0)) + 12|0);
 HEAP32[$84>>2] = $83;
 $85 = HEAP32[$67>>2]|0;
 $switch1 = ($85>>>0)<(2);
 if ($switch1) {
  $87 = HEAP32[$7>>2]|0;
  $88 = (((($87)) + 124|0) + (($1*12)|0)|0);
  $89 = (((($87)) + 92|0) + ($1<<2)|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = ($85|0)==(1);
  $92 = $91&1;
  $93 = (_read_residual_partitioned_rice_($0,$3,$77,$88,$90,$92)|0);
  $94 = ($93|0)==(0);
  if ($94) {
   $$098 = 0;
   STACKTOP = sp;return ($$098|0);
  }
 }
 $95 = ($4|0)==(0);
 if ($95) {
  $$098 = 1;
  STACKTOP = sp;return ($$098|0);
 }
 $96 = HEAP32[$7>>2]|0;
 $97 = (((($96)) + 60|0) + ($1<<2)|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = (((((($8)) + 1176|0) + (($1*292)|0)|0)) + 156|0);
 $100 = $3 << 2;
 _memcpy(($98|0),($99|0),($100|0))|0;
 $101 = HEAP32[$37>>2]|0;
 $102 = (($101) + ($2))|0;
 $103 = (_FLAC__bitmath_ilog2($3)|0);
 $104 = (($102) + ($103))|0;
 $105 = ($104>>>0)<(33);
 if (!($105)) {
  $133 = HEAP32[$7>>2]|0;
  $134 = ((($133)) + 40|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = (((($133)) + 92|0) + ($1<<2)|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = ((($133)) + 1136|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = (($139) - ($3))|0;
  $141 = (((((($8)) + 1176|0) + (($1*292)|0)|0)) + 28|0);
  $142 = HEAP32[$47>>2]|0;
  $143 = (((($133)) + 60|0) + ($1<<2)|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = (($144) + ($3<<2)|0);
  FUNCTION_TABLE_viiiiii[$135 & 15]($137,$140,$141,$3,$142,$145);
  $$098 = 1;
  STACKTOP = sp;return ($$098|0);
 }
 $106 = ($2>>>0)<(17);
 $107 = ($101>>>0)<(17);
 $or$cond = $106 & $107;
 $108 = HEAP32[$7>>2]|0;
 if ($or$cond) {
  $109 = ((($108)) + 44|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = (((($108)) + 92|0) + ($1<<2)|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = ((($108)) + 1136|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = (($114) - ($3))|0;
  $116 = (((((($8)) + 1176|0) + (($1*292)|0)|0)) + 28|0);
  $117 = HEAP32[$47>>2]|0;
  $118 = (((($108)) + 60|0) + ($1<<2)|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = (($119) + ($3<<2)|0);
  FUNCTION_TABLE_viiiiii[$110 & 15]($112,$115,$116,$3,$117,$120);
  $$098 = 1;
  STACKTOP = sp;return ($$098|0);
 } else {
  $121 = ((($108)) + 36|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (((($108)) + 92|0) + ($1<<2)|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = ((($108)) + 1136|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = (($126) - ($3))|0;
  $128 = (((((($8)) + 1176|0) + (($1*292)|0)|0)) + 28|0);
  $129 = HEAP32[$47>>2]|0;
  $130 = (((($108)) + 60|0) + ($1<<2)|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = (($131) + ($3<<2)|0);
  FUNCTION_TABLE_viiiiii[$122 & 15]($124,$127,$128,$3,$129,$132);
  $$098 = 1;
  STACKTOP = sp;return ($$098|0);
 }
 return (0)|0;
}
function _read_residual_partitioned_rice_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$06069 = 0, $$06168 = 0, $$06266 = 0, $$167 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = 1 << $2;
 $9 = ($2|0)==(0);
 $10 = ((($0)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 1136|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 >>> $2;
 $15 = (($13) - ($1))|0;
 $16 = $9 ? $15 : $14;
 $17 = ($5|0)!=(0);
 $18 = HEAP32[285]|0;
 $19 = HEAP32[284]|0;
 $20 = $17 ? $18 : $19;
 $21 = HEAP32[283]|0;
 $22 = HEAP32[282]|0;
 $23 = $17 ? $21 : $22;
 $24 = ($2>>>0)>(6);
 $25 = $24 ? $2 : 6;
 $26 = (_FLAC__format_entropy_coding_method_partitioned_rice_contents_ensure_size($3,$25)|0);
 $27 = ($26|0)==(0);
 if ($27) {
  $28 = HEAP32[$0>>2]|0;
  HEAP32[$28>>2] = 8;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $29 = ((($3)) + 4|0);
 $30 = HEAP32[285]|0;
 $31 = ((($3)) + 4|0);
 $$06069 = 0;$$06168 = 0;
 L5: while(1) {
  $32 = HEAP32[$10>>2]|0;
  $33 = ((($32)) + 56|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (_FLAC__bitreader_read_raw_uint32($34,$6,$20)|0);
  $36 = ($35|0)==(0);
  if ($36) {
   $$0 = 0;
   label = 14;
   break;
  }
  $37 = HEAP32[$6>>2]|0;
  $38 = HEAP32[$3>>2]|0;
  $39 = (($38) + ($$06069<<2)|0);
  HEAP32[$39>>2] = $37;
  $40 = HEAP32[$6>>2]|0;
  $41 = ($40>>>0)<($23>>>0);
  if ($41) {
   $42 = HEAP32[$29>>2]|0;
   $43 = (($42) + ($$06069<<2)|0);
   HEAP32[$43>>2] = 0;
   $44 = ($$06069|0)!=(0);
   $or$cond = $9 | $44;
   $45 = $or$cond ? 0 : $1;
   $46 = (($16) - ($45))|0;
   $47 = HEAP32[$10>>2]|0;
   $48 = ((($47)) + 56|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (($4) + ($$06168<<2)|0);
   $51 = HEAP32[$6>>2]|0;
   $52 = (_FLAC__bitreader_read_rice_signed_block($49,$50,$46,$51)|0);
   $53 = ($52|0)==(0);
   if ($53) {
    $$0 = 0;
    label = 14;
    break;
   }
   $54 = (($46) + ($$06168))|0;
   $$2 = $54;
  } else {
   $55 = HEAP32[$10>>2]|0;
   $56 = ((($55)) + 56|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (_FLAC__bitreader_read_raw_uint32($57,$6,$30)|0);
   $59 = ($58|0)==(0);
   if ($59) {
    $$0 = 0;
    label = 14;
    break;
   }
   $60 = HEAP32[$6>>2]|0;
   $61 = HEAP32[$31>>2]|0;
   $62 = (($61) + ($$06069<<2)|0);
   HEAP32[$62>>2] = $60;
   $63 = ($$06069|0)!=(0);
   $or$cond3 = $9 | $63;
   $64 = $or$cond3 ? 0 : $1;
   $65 = ($64>>>0)<($16>>>0);
   if ($65) {
    $$06266 = $64;$$167 = $$06168;
    while(1) {
     $66 = HEAP32[$10>>2]|0;
     $67 = ((($66)) + 56|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = HEAP32[$6>>2]|0;
     $70 = (_FLAC__bitreader_read_raw_int32($68,$7,$69)|0);
     $71 = ($70|0)==(0);
     if ($71) {
      $$0 = 0;
      label = 14;
      break L5;
     }
     $72 = HEAP32[$7>>2]|0;
     $73 = (($4) + ($$167<<2)|0);
     HEAP32[$73>>2] = $72;
     $74 = (($$06266) + 1)|0;
     $75 = (($$167) + 1)|0;
     $76 = ($74>>>0)<($16>>>0);
     if ($76) {
      $$06266 = $74;$$167 = $75;
     } else {
      $$2 = $75;
      break;
     }
    }
   } else {
    $$2 = $$06168;
   }
  }
  $77 = (($$06069) + 1)|0;
  $78 = ($77>>>0)<($8>>>0);
  if ($78) {
   $$06069 = $77;$$06168 = $$2;
  } else {
   $$0 = 1;
   label = 14;
   break;
  }
 }
 if ((label|0) == 14) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _FLAC__bitmath_ilog2($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_FLAC__clz_uint32_173($0)|0);
 $2 = $1 ^ 31;
 return ($2|0);
}
function _FLAC__clz_uint32_173($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (Math_clz32(($0|0))|0);
 return ($1|0);
}
function _safe_malloc_muladd2_($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + 4)|0;
 $2 = ($0>>>0)>(4294967291);
 $3 = ($1>>>0)>(1073741823);
 $or$cond = $2 | $3;
 if ($or$cond) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = $1 << 2;
 $5 = (_malloc($4)|0);
 $$0 = $5;
 return ($$0|0);
}
function _read_metadata_streaminfo_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 256|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($5)) + 260|0);
 HEAP32[$7>>2] = $1;
 $8 = ((($5)) + 264|0);
 HEAP32[$8>>2] = $2;
 $9 = HEAP32[289]|0;
 $10 = ((($5)) + 56|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_FLAC__bitreader_read_raw_uint32($11,$3,$9)|0);
 $13 = ($12|0)==(0);
 if ($13) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = HEAP32[$3>>2]|0;
 $15 = HEAP32[$4>>2]|0;
 $16 = ((($15)) + 272|0);
 HEAP32[$16>>2] = $14;
 $17 = HEAP32[289]|0;
 $18 = HEAP32[$4>>2]|0;
 $19 = ((($18)) + 56|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (_FLAC__bitreader_read_raw_uint32($20,$3,$17)|0);
 $22 = ($21|0)==(0);
 if ($22) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $23 = HEAP32[$3>>2]|0;
 $24 = HEAP32[$4>>2]|0;
 $25 = ((($24)) + 276|0);
 HEAP32[$25>>2] = $23;
 $26 = HEAP32[277]|0;
 $27 = HEAP32[$4>>2]|0;
 $28 = ((($27)) + 56|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (_FLAC__bitreader_read_raw_uint32($29,$3,$26)|0);
 $31 = ($30|0)==(0);
 if ($31) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $32 = HEAP32[$3>>2]|0;
 $33 = HEAP32[$4>>2]|0;
 $34 = ((($33)) + 280|0);
 HEAP32[$34>>2] = $32;
 $35 = HEAP32[277]|0;
 $36 = HEAP32[$4>>2]|0;
 $37 = ((($36)) + 56|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (_FLAC__bitreader_read_raw_uint32($38,$3,$35)|0);
 $40 = ($39|0)==(0);
 if ($40) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $41 = HEAP32[$3>>2]|0;
 $42 = HEAP32[$4>>2]|0;
 $43 = ((($42)) + 284|0);
 HEAP32[$43>>2] = $41;
 $44 = HEAP32[269]|0;
 $45 = HEAP32[$4>>2]|0;
 $46 = ((($45)) + 56|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (_FLAC__bitreader_read_raw_uint32($47,$3,$44)|0);
 $49 = ($48|0)==(0);
 if ($49) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $50 = HEAP32[$3>>2]|0;
 $51 = HEAP32[$4>>2]|0;
 $52 = ((($51)) + 288|0);
 HEAP32[$52>>2] = $50;
 $53 = HEAP32[280]|0;
 $54 = HEAP32[$4>>2]|0;
 $55 = ((($54)) + 56|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (_FLAC__bitreader_read_raw_uint32($56,$3,$53)|0);
 $58 = ($57|0)==(0);
 if ($58) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $59 = HEAP32[$3>>2]|0;
 $60 = (($59) + 1)|0;
 $61 = HEAP32[$4>>2]|0;
 $62 = ((($61)) + 292|0);
 HEAP32[$62>>2] = $60;
 $63 = HEAP32[285]|0;
 $64 = HEAP32[$4>>2]|0;
 $65 = ((($64)) + 56|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = (_FLAC__bitreader_read_raw_uint32($66,$3,$63)|0);
 $68 = ($67|0)==(0);
 if ($68) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $69 = HEAP32[$3>>2]|0;
 $70 = (($69) + 1)|0;
 $71 = HEAP32[$4>>2]|0;
 $72 = ((($71)) + 296|0);
 HEAP32[$72>>2] = $70;
 $73 = HEAP32[270]|0;
 $74 = HEAP32[$4>>2]|0;
 $75 = ((($74)) + 56|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = ((($74)) + 304|0);
 $78 = (_FLAC__bitreader_read_raw_uint64($76,$77,$73)|0);
 $79 = ($78|0)==(0);
 if ($79) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $80 = HEAP32[$4>>2]|0;
 $81 = ((($80)) + 56|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = ((($80)) + 312|0);
 $84 = (_FLAC__bitreader_read_byte_block_aligned_no_crc($82,$83,16)|0);
 $85 = ($84|0)==(0);
 if ($85) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $86 = (($9) + 128)|0;
 $87 = (($86) + ($17))|0;
 $88 = (($87) + ($26))|0;
 $89 = (($88) + ($35))|0;
 $90 = (($89) + ($44))|0;
 $91 = (($90) + ($53))|0;
 $92 = (($91) + ($63))|0;
 $93 = (($92) + ($73))|0;
 $94 = $93 >>> 3;
 $95 = (($2) - ($94))|0;
 $96 = HEAP32[$4>>2]|0;
 $97 = ((($96)) + 56|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = (_FLAC__bitreader_skip_byte_block_aligned_no_crc($98,$95)|0);
 $100 = ($99|0)!=(0);
 $$ = $100&1;
 $$0 = $$;
 STACKTOP = sp;return ($$0|0);
}
function _read_metadata_seektable_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$028 = 0, $$032 = 0, $$lcssa = 0, $$lcssa30 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp + 8|0;
 $4 = sp;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 432|0);
 HEAP32[$7>>2] = 3;
 $8 = ((($6)) + 436|0);
 HEAP32[$8>>2] = $1;
 $9 = ((($6)) + 440|0);
 HEAP32[$9>>2] = $2;
 $10 = (($2>>>0) / 18)&-1;
 $11 = ((($6)) + 448|0);
 HEAP32[$11>>2] = $10;
 $12 = HEAP32[$5>>2]|0;
 $13 = ((($12)) + 448|0);
 $14 = ((($12)) + 452|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$13>>2]|0;
 $17 = (_safe_realloc_mul_2op__167($15,$16,24)|0);
 $18 = HEAP32[$5>>2]|0;
 $19 = ((($18)) + 452|0);
 HEAP32[$19>>2] = $17;
 $20 = ($17|0)==(0|0);
 if ($20) {
  $21 = HEAP32[$0>>2]|0;
  HEAP32[$21>>2] = 8;
  $$028 = 0;
  STACKTOP = sp;return ($$028|0);
 }
 $22 = HEAP32[$5>>2]|0;
 $23 = ((($22)) + 448|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0);
 do {
  if ($25) {
   $$lcssa = 0;$$lcssa30 = $22;
  } else {
   $26 = HEAP32[290]|0;
   $27 = HEAP32[290]|0;
   $28 = HEAP32[289]|0;
   $$032 = 0;$30 = $22;
   while(1) {
    $29 = ((($30)) + 56|0);
    $31 = HEAP32[$29>>2]|0;
    $32 = (_FLAC__bitreader_read_raw_uint64($31,$4,$26)|0);
    $33 = ($32|0)==(0);
    if ($33) {
     $$028 = 0;
     label = 13;
     break;
    }
    $34 = $4;
    $35 = $34;
    $36 = HEAP32[$35>>2]|0;
    $37 = (($34) + 4)|0;
    $38 = $37;
    $39 = HEAP32[$38>>2]|0;
    $40 = HEAP32[$5>>2]|0;
    $41 = ((($40)) + 452|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = (($42) + (($$032*24)|0)|0);
    $44 = $43;
    $45 = $44;
    HEAP32[$45>>2] = $36;
    $46 = (($44) + 4)|0;
    $47 = $46;
    HEAP32[$47>>2] = $39;
    $48 = ((($40)) + 56|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = (_FLAC__bitreader_read_raw_uint64($49,$4,$27)|0);
    $51 = ($50|0)==(0);
    if ($51) {
     $$028 = 0;
     label = 13;
     break;
    }
    $52 = $4;
    $53 = $52;
    $54 = HEAP32[$53>>2]|0;
    $55 = (($52) + 4)|0;
    $56 = $55;
    $57 = HEAP32[$56>>2]|0;
    $58 = HEAP32[$5>>2]|0;
    $59 = ((($58)) + 452|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (((($60) + (($$032*24)|0)|0)) + 8|0);
    $62 = $61;
    $63 = $62;
    HEAP32[$63>>2] = $54;
    $64 = (($62) + 4)|0;
    $65 = $64;
    HEAP32[$65>>2] = $57;
    $66 = ((($58)) + 56|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = (_FLAC__bitreader_read_raw_uint32($67,$3,$28)|0);
    $69 = ($68|0)==(0);
    if ($69) {
     $$028 = 0;
     label = 13;
     break;
    }
    $70 = HEAP32[$3>>2]|0;
    $71 = HEAP32[$5>>2]|0;
    $72 = ((($71)) + 452|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = (((($73) + (($$032*24)|0)|0)) + 16|0);
    HEAP32[$74>>2] = $70;
    $75 = (($$032) + 1)|0;
    $76 = HEAP32[$5>>2]|0;
    $77 = ((($76)) + 448|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = ($75>>>0)<($78>>>0);
    if ($79) {
     $$032 = $75;$30 = $76;
    } else {
     label = 9;
     break;
    }
   }
   if ((label|0) == 9) {
    $phitmp = Math_imul($78, -18)|0;
    $$lcssa = $phitmp;$$lcssa30 = $76;
    break;
   }
   else if ((label|0) == 13) {
    STACKTOP = sp;return ($$028|0);
   }
  }
 } while(0);
 $80 = (($$lcssa) + ($2))|0;
 $81 = ($80|0)==(0);
 if (!($81)) {
  $82 = ((($$lcssa30)) + 56|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (_FLAC__bitreader_skip_byte_block_aligned_no_crc($83,$80)|0);
  $85 = ($84|0)==(0);
  if ($85) {
   $$028 = 0;
   STACKTOP = sp;return ($$028|0);
  }
 }
 $$028 = 1;
 STACKTOP = sp;return ($$028|0);
}
function _has_id_filtered_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$07 = 0, $$08 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 1124|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $$07 = 0;
  return ($$07|0);
 }
 $7 = HEAP32[275]|0;
 $8 = $7 >>> 3;
 $$08 = 0;$15 = $3;
 while(1) {
  $14 = ((($15)) + 1120|0);
  $16 = HEAP32[$14>>2]|0;
  $17 = Math_imul($8, $$08)|0;
  $18 = (($16) + ($17)|0);
  $19 = (_memcmp($18,$1,$8)|0);
  $20 = ($19|0)==(0);
  $12 = (($$08) + 1)|0;
  if ($20) {
   $$07 = 1;
   label = 5;
   break;
  }
  $9 = HEAP32[$2>>2]|0;
  $10 = ((($9)) + 1124|0);
  $11 = HEAP32[$10>>2]|0;
  $13 = ($12>>>0)<($11>>>0);
  if ($13) {
   $$08 = $12;$15 = $9;
  } else {
   $$07 = 0;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  return ($$07|0);
 }
 return (0)|0;
}
function _read_metadata_vorbiscomment_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0101 = 0, $$083 = 0, $$084 = 0, $$1100 = 0, $$2 = 0, $$3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2>>>0)>(7);
 L1: do {
  if ($3) {
   $4 = (($2) + -8)|0;
   $5 = ((($0)) + 4|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ((($6)) + 56|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (_FLAC__bitreader_read_uint32_little_endian($8,$1)|0);
   $10 = ($9|0)==(0);
   if ($10) {
    $$084 = 0;
    return ($$084|0);
   }
   $11 = HEAP32[$1>>2]|0;
   $12 = ($11|0)==(0);
   do {
    if ($12) {
     $29 = ((($1)) + 4|0);
     HEAP32[$29>>2] = 0;
     $$083 = $4;
    } else {
     $13 = ($4>>>0)<($11>>>0);
     if ($13) {
      HEAP32[$1>>2] = 0;
      $14 = ((($1)) + 4|0);
      HEAP32[$14>>2] = 0;
      $$3 = $4;
      break L1;
     }
     $15 = (($4) - ($11))|0;
     $16 = (_safe_malloc_add_2op__175($11)|0);
     $17 = ((($1)) + 4|0);
     HEAP32[$17>>2] = $16;
     $18 = ($16|0)==(0|0);
     if ($18) {
      $19 = HEAP32[$0>>2]|0;
      HEAP32[$19>>2] = 8;
      $$084 = 0;
      return ($$084|0);
     }
     $20 = HEAP32[$5>>2]|0;
     $21 = ((($20)) + 56|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = HEAP32[$1>>2]|0;
     $24 = (_FLAC__bitreader_read_byte_block_aligned_no_crc($22,$16,$23)|0);
     $25 = ($24|0)==(0);
     if ($25) {
      $$084 = 0;
      return ($$084|0);
     } else {
      $26 = HEAP32[$17>>2]|0;
      $27 = HEAP32[$1>>2]|0;
      $28 = (($26) + ($27)|0);
      HEAP8[$28>>0] = 0;
      $$083 = $15;
      break;
     }
    }
   } while(0);
   $30 = HEAP32[$5>>2]|0;
   $31 = ((($30)) + 56|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ((($1)) + 8|0);
   $34 = (_FLAC__bitreader_read_uint32_little_endian($32,$33)|0);
   $35 = ($34|0)==(0);
   if ($35) {
    $$084 = 0;
    return ($$084|0);
   }
   $36 = HEAP32[$33>>2]|0;
   $37 = ($36>>>0)>(100000);
   if ($37) {
    HEAP32[$33>>2] = 0;
    $$084 = 0;
    return ($$084|0);
   }
   $38 = ($36|0)==(0);
   if ($38) {
    $$3 = $$083;
   } else {
    $39 = (_safe_malloc_mul_2op_p($36,8)|0);
    $40 = ((($1)) + 12|0);
    HEAP32[$40>>2] = $39;
    $41 = ($39|0)==(0|0);
    if ($41) {
     HEAP32[$33>>2] = 0;
     $42 = HEAP32[$0>>2]|0;
     HEAP32[$42>>2] = 8;
     $$084 = 0;
     return ($$084|0);
    }
    $43 = HEAP32[$33>>2]|0;
    $44 = ($43|0)==(0);
    if ($44) {
     $$3 = $$083;
    } else {
     $$0101 = 0;$$1100 = $$083;
     while(1) {
      $45 = HEAP32[$40>>2]|0;
      $46 = (($45) + ($$0101<<3)|0);
      HEAP32[$46>>2] = 0;
      $47 = (((($45) + ($$0101<<3)|0)) + 4|0);
      HEAP32[$47>>2] = 0;
      $48 = ($$1100>>>0)<(4);
      if ($48) {
       label = 20;
       break;
      }
      $49 = (($$1100) + -4)|0;
      $50 = HEAP32[$5>>2]|0;
      $51 = ((($50)) + 56|0);
      $52 = HEAP32[$51>>2]|0;
      $53 = (_FLAC__bitreader_read_uint32_little_endian($52,$46)|0);
      $54 = ($53|0)==(0);
      if ($54) {
       label = 22;
       break;
      }
      $55 = HEAP32[$40>>2]|0;
      $56 = (($55) + ($$0101<<3)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0);
      if ($58) {
       $84 = (((($55) + ($$0101<<3)|0)) + 4|0);
       HEAP32[$84>>2] = 0;
       $$2 = $49;
      } else {
       $59 = ($49>>>0)<($57>>>0);
       if ($59) {
        label = 25;
        break;
       }
       $60 = (($49) - ($57))|0;
       $61 = (_safe_malloc_add_2op__175($57)|0);
       $62 = HEAP32[$40>>2]|0;
       $63 = (((($62) + ($$0101<<3)|0)) + 4|0);
       HEAP32[$63>>2] = $61;
       $64 = ($61|0)==(0|0);
       if ($64) {
        label = 27;
        break;
       }
       $66 = (($62) + ($$0101<<3)|0);
       $67 = HEAP32[$66>>2]|0;
       _memset(($61|0),0,($67|0))|0;
       $68 = HEAP32[$5>>2]|0;
       $69 = ((($68)) + 56|0);
       $70 = HEAP32[$69>>2]|0;
       $71 = HEAP32[$40>>2]|0;
       $72 = (((($71) + ($$0101<<3)|0)) + 4|0);
       $73 = HEAP32[$72>>2]|0;
       $74 = (($71) + ($$0101<<3)|0);
       $75 = HEAP32[$74>>2]|0;
       $76 = (_FLAC__bitreader_read_byte_block_aligned_no_crc($70,$73,$75)|0);
       $77 = ($76|0)==(0);
       if ($77) {
        label = 29;
        break;
       }
       $78 = HEAP32[$40>>2]|0;
       $79 = (((($78) + ($$0101<<3)|0)) + 4|0);
       $80 = HEAP32[$79>>2]|0;
       $81 = (($78) + ($$0101<<3)|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = (($80) + ($82)|0);
       HEAP8[$83>>0] = 0;
       $$2 = $60;
      }
      $85 = (($$0101) + 1)|0;
      $86 = HEAP32[$33>>2]|0;
      $87 = ($85>>>0)<($86>>>0);
      if ($87) {
       $$0101 = $85;$$1100 = $$2;
      } else {
       $$3 = $$2;
       break L1;
      }
     }
     if ((label|0) == 20) {
      HEAP32[$33>>2] = $$0101;
      $$3 = $$1100;
      break;
     }
     else if ((label|0) == 22) {
      HEAP32[$33>>2] = $$0101;
      $$084 = 0;
      return ($$084|0);
     }
     else if ((label|0) == 25) {
      HEAP32[$33>>2] = $$0101;
      $$3 = $49;
      break;
     }
     else if ((label|0) == 27) {
      $65 = HEAP32[$0>>2]|0;
      HEAP32[$65>>2] = 8;
      HEAP32[$33>>2] = $$0101;
      $$084 = 0;
      return ($$084|0);
     }
     else if ((label|0) == 29) {
      HEAP32[$33>>2] = $$0101;
      $$3 = $60;
      break;
     }
    }
   }
  } else {
   $$3 = $2;
  }
 } while(0);
 $88 = ($$3|0)==(0);
 if (!($88)) {
  $89 = ((($1)) + 8|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = ($90|0)==(0);
  if ($91) {
   $92 = ((($1)) + 12|0);
   $93 = HEAP32[$92>>2]|0;
   _free($93);
   HEAP32[$92>>2] = 0;
  }
  $94 = ((($0)) + 4|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = ((($95)) + 56|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = (_FLAC__bitreader_skip_byte_block_aligned_no_crc($97,$$3)|0);
  $99 = ($98|0)==(0);
  if ($99) {
   $$084 = 0;
   return ($$084|0);
  }
 }
 $$084 = 1;
 return ($$084|0);
}
function _read_metadata_cuesheet_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$05666 = 0, $$05965 = 0, $$5 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 _memset(($1|0),0,160)|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 56|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[273]|0;
 $8 = $7 >>> 3;
 $9 = (_FLAC__bitreader_read_byte_block_aligned_no_crc($6,$1,$8)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $$5 = 0;
  STACKTOP = sp;return ($$5|0);
 }
 $11 = HEAP32[$3>>2]|0;
 $12 = ((($11)) + 56|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($1)) + 136|0);
 $15 = HEAP32[290]|0;
 $16 = (_FLAC__bitreader_read_raw_uint64($13,$14,$15)|0);
 $17 = ($16|0)==(0);
 if ($17) {
  $$5 = 0;
  STACKTOP = sp;return ($$5|0);
 }
 $18 = HEAP32[$3>>2]|0;
 $19 = ((($18)) + 56|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = HEAP32[287]|0;
 $22 = (_FLAC__bitreader_read_raw_uint32($20,$2,$21)|0);
 $23 = ($22|0)==(0);
 if ($23) {
  $$5 = 0;
  STACKTOP = sp;return ($$5|0);
 }
 $24 = HEAP32[$2>>2]|0;
 $25 = ($24|0)!=(0);
 $26 = $25&1;
 $27 = ((($1)) + 144|0);
 HEAP32[$27>>2] = $26;
 $28 = HEAP32[$3>>2]|0;
 $29 = ((($28)) + 56|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = HEAP32[274]|0;
 $32 = (_FLAC__bitreader_skip_bits_no_crc($30,$31)|0);
 $33 = ($32|0)==(0);
 if ($33) {
  $$5 = 0;
  STACKTOP = sp;return ($$5|0);
 }
 $34 = HEAP32[$3>>2]|0;
 $35 = ((($34)) + 56|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = HEAP32[281]|0;
 $38 = (_FLAC__bitreader_read_raw_uint32($36,$2,$37)|0);
 $39 = ($38|0)==(0);
 if ($39) {
  $$5 = 0;
  STACKTOP = sp;return ($$5|0);
 }
 $40 = HEAP32[$2>>2]|0;
 $41 = ((($1)) + 148|0);
 HEAP32[$41>>2] = $40;
 $42 = ($40|0)==(0);
 if ($42) {
  $$5 = 1;
  STACKTOP = sp;return ($$5|0);
 }
 $43 = (_safe_calloc__177($40,32)|0);
 $44 = ((($1)) + 152|0);
 HEAP32[$44>>2] = $43;
 $45 = ($43|0)==(0|0);
 if ($45) {
  $46 = HEAP32[$0>>2]|0;
  HEAP32[$46>>2] = 8;
  $$5 = 0;
  STACKTOP = sp;return ($$5|0);
 }
 $47 = HEAP32[$41>>2]|0;
 $48 = ($47|0)==(0);
 if ($48) {
  $$5 = 1;
  STACKTOP = sp;return ($$5|0);
 }
 $49 = HEAP32[290]|0;
 $50 = HEAP32[281]|0;
 $51 = HEAP32[271]|0;
 $52 = $51 >>> 3;
 $53 = HEAP32[287]|0;
 $54 = HEAP32[287]|0;
 $55 = HEAP32[272]|0;
 $56 = HEAP32[281]|0;
 $57 = HEAP32[290]|0;
 $58 = HEAP32[281]|0;
 $59 = HEAP32[277]|0;
 $$05666 = 0;
 L26: while(1) {
  $60 = HEAP32[$44>>2]|0;
  $61 = HEAP32[$3>>2]|0;
  $62 = ((($61)) + 56|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($60) + ($$05666<<5)|0);
  $65 = (_FLAC__bitreader_read_raw_uint64($63,$64,$49)|0);
  $66 = ($65|0)==(0);
  if ($66) {
   $$5 = 0;
   label = 28;
   break;
  }
  $67 = HEAP32[$3>>2]|0;
  $68 = ((($67)) + 56|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (_FLAC__bitreader_read_raw_uint32($69,$2,$50)|0);
  $71 = ($70|0)==(0);
  if ($71) {
   $$5 = 0;
   label = 28;
   break;
  }
  $72 = HEAP32[$2>>2]|0;
  $73 = $72&255;
  $74 = (((($60) + ($$05666<<5)|0)) + 8|0);
  HEAP8[$74>>0] = $73;
  $75 = HEAP32[$3>>2]|0;
  $76 = ((($75)) + 56|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (((($60) + ($$05666<<5)|0)) + 9|0);
  $79 = (_FLAC__bitreader_read_byte_block_aligned_no_crc($77,$78,$52)|0);
  $80 = ($79|0)==(0);
  if ($80) {
   $$5 = 0;
   label = 28;
   break;
  }
  $81 = HEAP32[$3>>2]|0;
  $82 = ((($81)) + 56|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (_FLAC__bitreader_read_raw_uint32($83,$2,$53)|0);
  $85 = ($84|0)==(0);
  if ($85) {
   $$5 = 0;
   label = 28;
   break;
  }
  $86 = HEAP32[$2>>2]|0;
  $87 = (((($60) + ($$05666<<5)|0)) + 22|0);
  $88 = $86&255;
  $89 = HEAP8[$87>>0]|0;
  $90 = $88 & 1;
  $91 = $89 & -2;
  $92 = $91 | $90;
  HEAP8[$87>>0] = $92;
  $93 = HEAP32[$3>>2]|0;
  $94 = ((($93)) + 56|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = (_FLAC__bitreader_read_raw_uint32($95,$2,$54)|0);
  $97 = ($96|0)==(0);
  if ($97) {
   $$5 = 0;
   label = 28;
   break;
  }
  $98 = HEAP32[$2>>2]|0;
  $99 = $98&255;
  $100 = HEAP8[$87>>0]|0;
  $101 = ($99 << 1)&255;
  $102 = $101 & 2;
  $103 = $100 & -3;
  $104 = $102 | $103;
  HEAP8[$87>>0] = $104;
  $105 = HEAP32[$3>>2]|0;
  $106 = ((($105)) + 56|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = (_FLAC__bitreader_skip_bits_no_crc($107,$55)|0);
  $109 = ($108|0)==(0);
  if ($109) {
   $$5 = 0;
   label = 28;
   break;
  }
  $110 = HEAP32[$3>>2]|0;
  $111 = ((($110)) + 56|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = (_FLAC__bitreader_read_raw_uint32($112,$2,$56)|0);
  $114 = ($113|0)==(0);
  if ($114) {
   $$5 = 0;
   label = 28;
   break;
  }
  $115 = HEAP32[$2>>2]|0;
  $116 = $115&255;
  $117 = (((($60) + ($$05666<<5)|0)) + 23|0);
  HEAP8[$117>>0] = $116;
  $118 = $115 & 255;
  $119 = ($118|0)==(0);
  if (!($119)) {
   $120 = (_safe_calloc__177($118,16)|0);
   $121 = (((($60) + ($$05666<<5)|0)) + 24|0);
   HEAP32[$121>>2] = $120;
   $122 = ($120|0)==(0|0);
   if ($122) {
    label = 20;
    break;
   }
   $124 = HEAP8[$117>>0]|0;
   $125 = ($124<<24>>24)==(0);
   if (!($125)) {
    $$05965 = 0;
    while(1) {
     $130 = HEAP32[$121>>2]|0;
     $131 = HEAP32[$3>>2]|0;
     $132 = ((($131)) + 56|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = (($130) + ($$05965<<4)|0);
     $135 = (_FLAC__bitreader_read_raw_uint64($133,$134,$57)|0);
     $136 = ($135|0)==(0);
     if ($136) {
      $$5 = 0;
      label = 28;
      break L26;
     }
     $137 = HEAP32[$3>>2]|0;
     $138 = ((($137)) + 56|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = (_FLAC__bitreader_read_raw_uint32($139,$2,$58)|0);
     $141 = ($140|0)==(0);
     if ($141) {
      $$5 = 0;
      label = 28;
      break L26;
     }
     $142 = HEAP32[$2>>2]|0;
     $143 = $142&255;
     $144 = (((($130) + ($$05965<<4)|0)) + 8|0);
     HEAP8[$144>>0] = $143;
     $145 = HEAP32[$3>>2]|0;
     $146 = ((($145)) + 56|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = (_FLAC__bitreader_skip_bits_no_crc($147,$59)|0);
     $149 = ($148|0)==(0);
     $128 = (($$05965) + 1)|0;
     if ($149) {
      $$5 = 0;
      label = 28;
      break L26;
     }
     $126 = HEAP8[$117>>0]|0;
     $127 = $126&255;
     $129 = ($128>>>0)<($127>>>0);
     if ($129) {
      $$05965 = $128;
     } else {
      break;
     }
    }
   }
  }
  $150 = (($$05666) + 1)|0;
  $151 = HEAP32[$41>>2]|0;
  $152 = ($150>>>0)<($151>>>0);
  if ($152) {
   $$05666 = $150;
  } else {
   $$5 = 1;
   label = 28;
   break;
  }
 }
 if ((label|0) == 20) {
  $123 = HEAP32[$0>>2]|0;
  HEAP32[$123>>2] = 8;
  $$5 = 0;
  STACKTOP = sp;return ($$5|0);
 }
 else if ((label|0) == 28) {
  STACKTOP = sp;return ($$5|0);
 }
 return (0)|0;
}
function _read_metadata_picture_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 56|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[275]|0;
 $8 = (_FLAC__bitreader_read_raw_uint32($6,$2,$7)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = HEAP32[$2>>2]|0;
 HEAP32[$1>>2] = $10;
 $11 = HEAP32[$3>>2]|0;
 $12 = ((($11)) + 56|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[275]|0;
 $15 = (_FLAC__bitreader_read_raw_uint32($13,$2,$14)|0);
 $16 = ($15|0)==(0);
 if ($16) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = HEAP32[$2>>2]|0;
 $18 = (_safe_malloc_add_2op__175($17)|0);
 $19 = ((($1)) + 4|0);
 HEAP32[$19>>2] = $18;
 $20 = ($18|0)==(0|0);
 if ($20) {
  $21 = HEAP32[$0>>2]|0;
  HEAP32[$21>>2] = 8;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $22 = HEAP32[$2>>2]|0;
 $23 = ($22|0)==(0);
 if (!($23)) {
  $24 = HEAP32[$3>>2]|0;
  $25 = ((($24)) + 56|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (_FLAC__bitreader_read_byte_block_aligned_no_crc($26,$18,$22)|0);
  $28 = ($27|0)==(0);
  if ($28) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $29 = HEAP32[$19>>2]|0;
 $30 = HEAP32[$2>>2]|0;
 $31 = (($29) + ($30)|0);
 HEAP8[$31>>0] = 0;
 $32 = HEAP32[$3>>2]|0;
 $33 = ((($32)) + 56|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = HEAP32[275]|0;
 $36 = (_FLAC__bitreader_read_raw_uint32($34,$2,$35)|0);
 $37 = ($36|0)==(0);
 if ($37) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $38 = HEAP32[$2>>2]|0;
 $39 = (_safe_malloc_add_2op__175($38)|0);
 $40 = ((($1)) + 8|0);
 HEAP32[$40>>2] = $39;
 $41 = ($39|0)==(0|0);
 if ($41) {
  $42 = HEAP32[$0>>2]|0;
  HEAP32[$42>>2] = 8;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $43 = HEAP32[$2>>2]|0;
 $44 = ($43|0)==(0);
 if (!($44)) {
  $45 = HEAP32[$3>>2]|0;
  $46 = ((($45)) + 56|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (_FLAC__bitreader_read_byte_block_aligned_no_crc($47,$39,$43)|0);
  $49 = ($48|0)==(0);
  if ($49) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $50 = HEAP32[$40>>2]|0;
 $51 = HEAP32[$2>>2]|0;
 $52 = (($50) + ($51)|0);
 HEAP8[$52>>0] = 0;
 $53 = HEAP32[$3>>2]|0;
 $54 = ((($53)) + 56|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ((($1)) + 12|0);
 $57 = HEAP32[275]|0;
 $58 = (_FLAC__bitreader_read_raw_uint32($55,$56,$57)|0);
 $59 = ($58|0)==(0);
 if ($59) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $60 = HEAP32[$3>>2]|0;
 $61 = ((($60)) + 56|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ((($1)) + 16|0);
 $64 = HEAP32[275]|0;
 $65 = (_FLAC__bitreader_read_raw_uint32($62,$63,$64)|0);
 $66 = ($65|0)==(0);
 if ($66) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $67 = HEAP32[$3>>2]|0;
 $68 = ((($67)) + 56|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ((($1)) + 20|0);
 $71 = HEAP32[275]|0;
 $72 = (_FLAC__bitreader_read_raw_uint32($69,$70,$71)|0);
 $73 = ($72|0)==(0);
 if ($73) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $74 = HEAP32[$3>>2]|0;
 $75 = ((($74)) + 56|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = ((($1)) + 24|0);
 $78 = HEAP32[275]|0;
 $79 = (_FLAC__bitreader_read_raw_uint32($76,$77,$78)|0);
 $80 = ($79|0)==(0);
 if ($80) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $81 = HEAP32[$3>>2]|0;
 $82 = ((($81)) + 56|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = ((($1)) + 28|0);
 $85 = HEAP32[275]|0;
 $86 = (_FLAC__bitreader_read_raw_uint32($83,$84,$85)|0);
 $87 = ($86|0)==(0);
 if ($87) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $88 = HEAP32[$84>>2]|0;
 $89 = (_safe_malloc__176($88)|0);
 $90 = ((($1)) + 32|0);
 HEAP32[$90>>2] = $89;
 $91 = ($89|0)==(0|0);
 if ($91) {
  $92 = HEAP32[$0>>2]|0;
  HEAP32[$92>>2] = 8;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $93 = HEAP32[$84>>2]|0;
 $94 = ($93|0)==(0);
 if (!($94)) {
  $95 = HEAP32[$3>>2]|0;
  $96 = ((($95)) + 56|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = (_FLAC__bitreader_read_byte_block_aligned_no_crc($97,$89,$93)|0);
  $99 = ($98|0)==(0);
  if ($99) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _safe_malloc_add_2op__175($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(-1);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = (($0) + 1)|0;
 $3 = (_safe_malloc__176($2)|0);
 $$0 = $3;
 return ($$0|0);
}
function _safe_malloc__176($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 $2 = $1&1;
 $spec$select = (($2) + ($0))|0;
 $3 = (_malloc($spec$select)|0);
 return ($3|0);
}
function _safe_calloc__177($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 if ($2) {
  $3 = (_malloc(1)|0);
  $$0 = $3;
  return ($$0|0);
 } else {
  $4 = (_calloc($0,$1)|0);
  $$0 = $4;
  return ($$0|0);
 }
 return (0)|0;
}
function _skip_id3v2_tag_($0) {
 $0 = $0|0;
 var $$ = 0, $$011 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 56|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_FLAC__bitreader_read_raw_uint32($5,$1,24)|0);
 $7 = ($6|0)==(0);
 if ($7) {
  $$011 = 0;
  STACKTOP = sp;return ($$011|0);
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($8)) + 56|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_FLAC__bitreader_read_raw_uint32($10,$1,8)|0);
 $12 = ($11|0)==(0);
 if ($12) {
  $$011 = 0;
  STACKTOP = sp;return ($$011|0);
 }
 $13 = HEAP32[$1>>2]|0;
 $14 = HEAP32[$2>>2]|0;
 $15 = ((($14)) + 56|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_FLAC__bitreader_read_raw_uint32($16,$1,8)|0);
 $18 = ($17|0)==(0);
 if ($18) {
  $$011 = 0;
  STACKTOP = sp;return ($$011|0);
 }
 $19 = HEAP32[$1>>2]|0;
 $20 = HEAP32[$2>>2]|0;
 $21 = ((($20)) + 56|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (_FLAC__bitreader_read_raw_uint32($22,$1,8)|0);
 $24 = ($23|0)==(0);
 if ($24) {
  $$011 = 0;
  STACKTOP = sp;return ($$011|0);
 }
 $25 = HEAP32[$1>>2]|0;
 $26 = HEAP32[$2>>2]|0;
 $27 = ((($26)) + 56|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (_FLAC__bitreader_read_raw_uint32($28,$1,8)|0);
 $30 = ($29|0)==(0);
 if ($30) {
  $$011 = 0;
  STACKTOP = sp;return ($$011|0);
 }
 $31 = $25 & 127;
 $32 = $19 & 127;
 $33 = $13 << 7;
 $34 = $33 & 16256;
 $35 = $32 | $34;
 $36 = $35 << 7;
 $37 = $31 | $36;
 $38 = $37 << 7;
 $39 = HEAP32[$1>>2]|0;
 $40 = $39 & 127;
 $41 = $40 | $38;
 $42 = HEAP32[$2>>2]|0;
 $43 = ((($42)) + 56|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (_FLAC__bitreader_skip_byte_block_aligned_no_crc($44,$41)|0);
 $46 = ($45|0)!=(0);
 $$ = $46&1;
 $$011 = $$;
 STACKTOP = sp;return ($$011|0);
}
function _FLAC__stream_decoder_process_until_end_of_metadata($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$ph = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1: while(1) {
  $1 = HEAP32[$0>>2]|0;
  $2 = HEAP32[$1>>2]|0;
  switch ($2|0) {
  case 7: case 4: case 3: case 2:  {
   $$0$ph = 1;
   break L1;
   break;
  }
  case 0:  {
   $3 = (_find_metadata_($0)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$0$ph = 0;
    break L1;
   }
   break;
  }
  case 1:  {
   $5 = (_read_metadata_($0)|0);
   $6 = ($5|0)==(0);
   if ($6) {
    $$0$ph = 0;
    break L1;
   }
   break;
  }
  default: {
   $$0 = 0;
   label = 7;
   break L1;
  }
  }
 }
 if ((label|0) == 7) {
  return ($$0|0);
 }
 $$0 = $$0$ph;
 return ($$0|0);
}
function _FLAC__stream_decoder_process_until_end_of_stream($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$ph = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 L1: while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = HEAP32[$2>>2]|0;
  switch ($3|0) {
  case 7: case 4:  {
   $$0$ph = 1;
   break L1;
   break;
  }
  case 0:  {
   $4 = (_find_metadata_($0)|0);
   $5 = ($4|0)==(0);
   if ($5) {
    $$0$ph = 0;
    break L1;
   }
   break;
  }
  case 1:  {
   $6 = (_read_metadata_($0)|0);
   $7 = ($6|0)==(0);
   if ($7) {
    $$0$ph = 0;
    break L1;
   }
   break;
  }
  case 2:  {
   $8 = (_frame_sync_($0)|0);
   $9 = ($8|0)==(0);
   if ($9) {
    $$0$ph = 1;
    break L1;
   }
   break;
  }
  case 3:  {
   $10 = (_read_frame_($0,$1,1)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    $$0$ph = 0;
    break L1;
   }
   break;
  }
  default: {
   $$0 = 0;
   label = 9;
   break L1;
  }
  }
 }
 if ((label|0) == 9) {
  STACKTOP = sp;return ($$0|0);
 }
 $$0 = $$0$ph;
 STACKTOP = sp;return ($$0|0);
}
function _FLAC__stream_encoder_new() {
 var $$075 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_calloc(1,8)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$075 = 0;
  return ($$075|0);
 }
 $2 = (_calloc(1,632)|0);
 HEAP32[$0>>2] = $2;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _free($0);
  $$075 = 0;
  return ($$075|0);
 }
 $4 = (_calloc(1,11880)|0);
 $5 = ((($0)) + 4|0);
 HEAP32[$5>>2] = $4;
 $6 = ($4|0)==(0|0);
 if ($6) {
  _free($2);
  _free($0);
  $$075 = 0;
  return ($$075|0);
 }
 $7 = (_FLAC__bitwriter_new()|0);
 $8 = HEAP32[$5>>2]|0;
 $9 = ((($8)) + 6856|0);
 HEAP32[$9>>2] = $7;
 $10 = ($7|0)==(0|0);
 if ($10) {
  _free($8);
  $11 = HEAP32[$0>>2]|0;
  _free($11);
  _free($0);
  $$075 = 0;
  return ($$075|0);
 } else {
  $12 = ((($8)) + 7320|0);
  HEAP32[$12>>2] = 0;
  _set_defaults__215($0);
  $13 = HEAP32[$5>>2]|0;
  $14 = ((($13)) + 11872|0);
  HEAP32[$14>>2] = 0;
  $15 = HEAP32[$5>>2]|0;
  $16 = ((($15)) + 336|0);
  $17 = ((($15)) + 6176|0);
  HEAP32[$17>>2] = $16;
  $18 = HEAP32[$5>>2]|0;
  $19 = ((($18)) + 628|0);
  $20 = ((($18)) + 6180|0);
  HEAP32[$20>>2] = $19;
  $21 = HEAP32[$5>>2]|0;
  $22 = ((($21)) + 920|0);
  $23 = ((($21)) + 6184|0);
  HEAP32[$23>>2] = $22;
  $24 = HEAP32[$5>>2]|0;
  $25 = ((($24)) + 1212|0);
  $26 = ((($24)) + 6188|0);
  HEAP32[$26>>2] = $25;
  $27 = HEAP32[$5>>2]|0;
  $28 = ((($27)) + 1504|0);
  $29 = ((($27)) + 6192|0);
  HEAP32[$29>>2] = $28;
  $30 = HEAP32[$5>>2]|0;
  $31 = ((($30)) + 1796|0);
  $32 = ((($30)) + 6196|0);
  HEAP32[$32>>2] = $31;
  $33 = HEAP32[$5>>2]|0;
  $34 = ((($33)) + 2088|0);
  $35 = ((($33)) + 6200|0);
  HEAP32[$35>>2] = $34;
  $36 = HEAP32[$5>>2]|0;
  $37 = ((($36)) + 2380|0);
  $38 = ((($36)) + 6204|0);
  HEAP32[$38>>2] = $37;
  $39 = HEAP32[$5>>2]|0;
  $40 = ((($39)) + 2672|0);
  $41 = ((($39)) + 6208|0);
  HEAP32[$41>>2] = $40;
  $42 = HEAP32[$5>>2]|0;
  $43 = ((($42)) + 2964|0);
  $44 = ((($42)) + 6212|0);
  HEAP32[$44>>2] = $43;
  $45 = HEAP32[$5>>2]|0;
  $46 = ((($45)) + 3256|0);
  $47 = ((($45)) + 6216|0);
  HEAP32[$47>>2] = $46;
  $48 = HEAP32[$5>>2]|0;
  $49 = ((($48)) + 3548|0);
  $50 = ((($48)) + 6220|0);
  HEAP32[$50>>2] = $49;
  $51 = HEAP32[$5>>2]|0;
  $52 = ((($51)) + 3840|0);
  $53 = ((($51)) + 6224|0);
  HEAP32[$53>>2] = $52;
  $54 = HEAP32[$5>>2]|0;
  $55 = ((($54)) + 4132|0);
  $56 = ((($54)) + 6228|0);
  HEAP32[$56>>2] = $55;
  $57 = HEAP32[$5>>2]|0;
  $58 = ((($57)) + 4424|0);
  $59 = ((($57)) + 6232|0);
  HEAP32[$59>>2] = $58;
  $60 = HEAP32[$5>>2]|0;
  $61 = ((($60)) + 4716|0);
  $62 = ((($60)) + 6236|0);
  HEAP32[$62>>2] = $61;
  $63 = HEAP32[$5>>2]|0;
  $64 = ((($63)) + 5008|0);
  $65 = ((($63)) + 6240|0);
  HEAP32[$65>>2] = $64;
  $66 = HEAP32[$5>>2]|0;
  $67 = ((($66)) + 5300|0);
  $68 = ((($66)) + 6244|0);
  HEAP32[$68>>2] = $67;
  $69 = HEAP32[$5>>2]|0;
  $70 = ((($69)) + 5592|0);
  $71 = ((($69)) + 6248|0);
  HEAP32[$71>>2] = $70;
  $72 = HEAP32[$5>>2]|0;
  $73 = ((($72)) + 5884|0);
  $74 = ((($72)) + 6252|0);
  HEAP32[$74>>2] = $73;
  $75 = HEAP32[$5>>2]|0;
  $76 = ((($75)) + 6256|0);
  $77 = ((($75)) + 6640|0);
  HEAP32[$77>>2] = $76;
  $78 = HEAP32[$5>>2]|0;
  $79 = ((($78)) + 6268|0);
  $80 = ((($78)) + 6644|0);
  HEAP32[$80>>2] = $79;
  $81 = HEAP32[$5>>2]|0;
  $82 = ((($81)) + 6280|0);
  $83 = ((($81)) + 6648|0);
  HEAP32[$83>>2] = $82;
  $84 = HEAP32[$5>>2]|0;
  $85 = ((($84)) + 6292|0);
  $86 = ((($84)) + 6652|0);
  HEAP32[$86>>2] = $85;
  $87 = HEAP32[$5>>2]|0;
  $88 = ((($87)) + 6304|0);
  $89 = ((($87)) + 6656|0);
  HEAP32[$89>>2] = $88;
  $90 = HEAP32[$5>>2]|0;
  $91 = ((($90)) + 6316|0);
  $92 = ((($90)) + 6660|0);
  HEAP32[$92>>2] = $91;
  $93 = HEAP32[$5>>2]|0;
  $94 = ((($93)) + 6328|0);
  $95 = ((($93)) + 6664|0);
  HEAP32[$95>>2] = $94;
  $96 = HEAP32[$5>>2]|0;
  $97 = ((($96)) + 6340|0);
  $98 = ((($96)) + 6668|0);
  HEAP32[$98>>2] = $97;
  $99 = HEAP32[$5>>2]|0;
  $100 = ((($99)) + 6352|0);
  $101 = ((($99)) + 6672|0);
  HEAP32[$101>>2] = $100;
  $102 = HEAP32[$5>>2]|0;
  $103 = ((($102)) + 6364|0);
  $104 = ((($102)) + 6676|0);
  HEAP32[$104>>2] = $103;
  $105 = HEAP32[$5>>2]|0;
  $106 = ((($105)) + 6376|0);
  $107 = ((($105)) + 6680|0);
  HEAP32[$107>>2] = $106;
  $108 = HEAP32[$5>>2]|0;
  $109 = ((($108)) + 6388|0);
  $110 = ((($108)) + 6684|0);
  HEAP32[$110>>2] = $109;
  $111 = HEAP32[$5>>2]|0;
  $112 = ((($111)) + 6400|0);
  $113 = ((($111)) + 6688|0);
  HEAP32[$113>>2] = $112;
  $114 = HEAP32[$5>>2]|0;
  $115 = ((($114)) + 6412|0);
  $116 = ((($114)) + 6692|0);
  HEAP32[$116>>2] = $115;
  $117 = HEAP32[$5>>2]|0;
  $118 = ((($117)) + 6424|0);
  $119 = ((($117)) + 6696|0);
  HEAP32[$119>>2] = $118;
  $120 = HEAP32[$5>>2]|0;
  $121 = ((($120)) + 6436|0);
  $122 = ((($120)) + 6700|0);
  HEAP32[$122>>2] = $121;
  $123 = HEAP32[$5>>2]|0;
  $124 = ((($123)) + 6448|0);
  $125 = ((($123)) + 6704|0);
  HEAP32[$125>>2] = $124;
  $126 = HEAP32[$5>>2]|0;
  $127 = ((($126)) + 6460|0);
  $128 = ((($126)) + 6708|0);
  HEAP32[$128>>2] = $127;
  $129 = HEAP32[$5>>2]|0;
  $130 = ((($129)) + 6472|0);
  $131 = ((($129)) + 6712|0);
  HEAP32[$131>>2] = $130;
  $132 = HEAP32[$5>>2]|0;
  $133 = ((($132)) + 6484|0);
  $134 = ((($132)) + 6716|0);
  HEAP32[$134>>2] = $133;
  $135 = HEAP32[$5>>2]|0;
  $136 = ((($135)) + 6256|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($136);
  $137 = HEAP32[$5>>2]|0;
  $138 = ((($137)) + 6268|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($138);
  $139 = HEAP32[$5>>2]|0;
  $140 = ((($139)) + 6280|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($140);
  $141 = HEAP32[$5>>2]|0;
  $142 = ((($141)) + 6292|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($142);
  $143 = HEAP32[$5>>2]|0;
  $144 = ((($143)) + 6304|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($144);
  $145 = HEAP32[$5>>2]|0;
  $146 = ((($145)) + 6316|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($146);
  $147 = HEAP32[$5>>2]|0;
  $148 = ((($147)) + 6328|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($148);
  $149 = HEAP32[$5>>2]|0;
  $150 = ((($149)) + 6340|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($150);
  $151 = HEAP32[$5>>2]|0;
  $152 = ((($151)) + 6352|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($152);
  $153 = HEAP32[$5>>2]|0;
  $154 = ((($153)) + 6364|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($154);
  $155 = HEAP32[$5>>2]|0;
  $156 = ((($155)) + 6376|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($156);
  $157 = HEAP32[$5>>2]|0;
  $158 = ((($157)) + 6388|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($158);
  $159 = HEAP32[$5>>2]|0;
  $160 = ((($159)) + 6400|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($160);
  $161 = HEAP32[$5>>2]|0;
  $162 = ((($161)) + 6412|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($162);
  $163 = HEAP32[$5>>2]|0;
  $164 = ((($163)) + 6424|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($164);
  $165 = HEAP32[$5>>2]|0;
  $166 = ((($165)) + 6436|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($166);
  $167 = HEAP32[$5>>2]|0;
  $168 = ((($167)) + 6448|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($168);
  $169 = HEAP32[$5>>2]|0;
  $170 = ((($169)) + 6460|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($170);
  $171 = HEAP32[$5>>2]|0;
  $172 = ((($171)) + 6472|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($172);
  $173 = HEAP32[$5>>2]|0;
  $174 = ((($173)) + 6484|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($174);
  $175 = HEAP32[$5>>2]|0;
  $176 = ((($175)) + 11748|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($176);
  $177 = HEAP32[$5>>2]|0;
  $178 = ((($177)) + 11760|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($178);
  $179 = HEAP32[$0>>2]|0;
  HEAP32[$179>>2] = 1;
  $$075 = $0;
  return ($$075|0);
 }
 return (0)|0;
}
function _set_defaults__215($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 1;
 $4 = ((($1)) + 12|0);
 HEAP32[$4>>2] = 1;
 $5 = ((($1)) + 16|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($1)) + 20|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($1)) + 24|0);
 HEAP32[$7>>2] = 2;
 $8 = ((($1)) + 28|0);
 HEAP32[$8>>2] = 16;
 $9 = ((($1)) + 32|0);
 HEAP32[$9>>2] = 44100;
 $10 = ((($1)) + 36|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($1)) + 40|0);
 HEAP32[$11>>2] = 1;
 $12 = ((($1)) + 44|0);
 HEAP32[$12>>2] = 13;
 $13 = ((($1)) + 48|0);
 HEAPF32[$13>>2] = 0.5;
 $14 = HEAP32[$0>>2]|0;
 $15 = ((($14)) + 556|0);
 $16 = ((($14)) + 592|0);
 $17 = ((($0)) + 4|0);
 ;HEAP32[$15>>2]=0|0;HEAP32[$15+4>>2]=0|0;HEAP32[$15+8>>2]=0|0;HEAP32[$15+12>>2]=0|0;HEAP32[$15+16>>2]=0|0;HEAP32[$15+20>>2]=0|0;HEAP32[$15+24>>2]=0|0;HEAP32[$15+28>>2]=0|0;
 ;HEAP32[$16>>2]=0|0;HEAP32[$16+4>>2]=0|0;HEAP32[$16+8>>2]=0|0;HEAP32[$16+12>>2]=0|0;
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($18)) + 7048|0);
 HEAP32[$19>>2] = 0;
 $20 = ((($18)) + 7272|0);
 dest=$20; stop=dest+44|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 (_FLAC__stream_encoder_set_compression_level($0,5)|0);
 return;
}
function _FLAC__stream_encoder_set_compression_level($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$037 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(1);
 if (!($4)) {
  $$037 = 0;
  return ($$037|0);
 }
 $5 = ($1>>>0)<(8);
 $spec$select = $5 ? $1 : 8;
 $6 = (1164 + (($spec$select*44)|0)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_FLAC__stream_encoder_set_do_mid_side_stereo($0,$7)|0);
 $9 = $8 & 1;
 $10 = (((1164 + (($spec$select*44)|0)|0)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_FLAC__stream_encoder_set_loose_mid_side_stereo($0,$11)|0);
 $13 = $9 & $12;
 $14 = (((1164 + (($spec$select*44)|0)|0)) + 40|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_FLAC__stream_encoder_set_apodization($0,$15)|0);
 $17 = $13 & $16;
 $18 = (((1164 + (($spec$select*44)|0)|0)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (_FLAC__stream_encoder_set_max_lpc_order($0,$19)|0);
 $21 = $17 & $20;
 $22 = (((1164 + (($spec$select*44)|0)|0)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (_FLAC__stream_encoder_set_qlp_coeff_precision($0,$23)|0);
 $25 = $21 & $24;
 $26 = (((1164 + (($spec$select*44)|0)|0)) + 16|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (_FLAC__stream_encoder_set_do_qlp_coeff_prec_search($0,$27)|0);
 $29 = $25 & $28;
 $30 = (_FLAC__stream_encoder_set_do_escape_coding($0,0)|0);
 $31 = $29 & $30;
 $32 = (((1164 + (($spec$select*44)|0)|0)) + 24|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (_FLAC__stream_encoder_set_do_exhaustive_model_search($0,$33)|0);
 $35 = $31 & $34;
 $36 = (((1164 + (($spec$select*44)|0)|0)) + 28|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (_FLAC__stream_encoder_set_min_residual_partition_order($0,$37)|0);
 $39 = $35 & $38;
 $40 = (((1164 + (($spec$select*44)|0)|0)) + 32|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (_FLAC__stream_encoder_set_max_residual_partition_order($0,$41)|0);
 $43 = $39 & $42;
 $44 = (_FLAC__stream_encoder_set_rice_parameter_search_dist($0,0)|0);
 $45 = $43 & $44;
 $$037 = $45;
 return ($$037|0);
}
function _FLAC__stream_encoder_set_do_mid_side_stereo($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(1);
 if (!($4)) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ((($2)) + 16|0);
 HEAP32[$5>>2] = $1;
 $$0 = 1;
 return ($$0|0);
}
function _FLAC__stream_encoder_set_loose_mid_side_stereo($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(1);
 if (!($4)) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ((($2)) + 20|0);
 HEAP32[$5>>2] = $1;
 $$0 = 1;
 return ($$0|0);
}
function _FLAC__stream_encoder_set_apodization($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0215232 = 0, $$0216 = 0, $$0217 = 0, $$0218233 = 0, $$1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0;
 var $149 = 0.0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0;
 var $185 = 0.0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0.0, $205 = 0.0, $206 = 0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0.0, $219 = 0.0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0.0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0.0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0;
 var $exitcond240 = 0, $not$ = 0, $or$cond = 0, $or$cond219 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(1);
 if (!($4)) {
  $$0216 = 0;
  return ($$0216|0);
 }
 $5 = ((($2)) + 40|0);
 HEAP32[$5>>2] = 0;
 $$0217 = $1;
 while(1) {
  $6 = (_strchr($$0217,59)|0);
  $7 = ($6|0)!=(0|0);
  if ($7) {
   $8 = $6;
   $9 = $$0217;
   $10 = (($8) - ($9))|0;
   $12 = $10;
  } else {
   $11 = (_strlen($$0217)|0);
   $12 = $11;
  }
  $13 = ($12|0)==(8);
  L10: do {
   if ($13) {
    $14 = (_strncmp(3189,$$0217,$12)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     $16 = HEAP32[$0>>2]|0;
     $17 = ((($16)) + 40|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($18) + 1)|0;
     HEAP32[$17>>2] = $19;
     $20 = (((($16)) + 44|0) + ($18<<4)|0);
     HEAP32[$20>>2] = 0;
     break;
    }
    $28 = (_strncmp(3212,$$0217,$12)|0);
    $29 = ($28|0)==(0);
    if ($29) {
     $30 = HEAP32[$0>>2]|0;
     $31 = ((($30)) + 40|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = (($32) + 1)|0;
     HEAP32[$31>>2] = $33;
     $34 = (((($30)) + 44|0) + ($32<<4)|0);
     HEAP32[$34>>2] = 2;
    } else {
     $274 = 0;
     label = 21;
    }
   } else {
    switch ($12|0) {
    case 13:  {
     $21 = (_strncmp(3198,$$0217,$12)|0);
     $22 = ($21|0)==(0);
     if (!($22)) {
      $274 = 1;
      label = 21;
      break L10;
     }
     $23 = HEAP32[$0>>2]|0;
     $24 = ((($23)) + 40|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = (($25) + 1)|0;
     HEAP32[$24>>2] = $26;
     $27 = (((($23)) + 44|0) + ($25<<4)|0);
     HEAP32[$27>>2] = 1;
     break L10;
     break;
    }
    case 26:  {
     $35 = (_strncmp(3221,$$0217,$12)|0);
     $36 = ($35|0)==(0);
     if (!($36)) {
      $274 = 0;
      label = 21;
      break L10;
     }
     $37 = HEAP32[$0>>2]|0;
     $38 = ((($37)) + 40|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = (($39) + 1)|0;
     HEAP32[$38>>2] = $40;
     $41 = (((($37)) + 44|0) + ($39<<4)|0);
     HEAP32[$41>>2] = 3;
     break L10;
     break;
    }
    case 6:  {
     $42 = (_strncmp(3248,$$0217,$12)|0);
     $43 = ($42|0)==(0);
     if (!($43)) {
      break L10;
     }
     $44 = HEAP32[$0>>2]|0;
     $45 = ((($44)) + 40|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = (($46) + 1)|0;
     HEAP32[$45>>2] = $47;
     $48 = (((($44)) + 44|0) + ($46<<4)|0);
     HEAP32[$48>>2] = 4;
     break L10;
     break;
    }
    case 7:  {
     $49 = (_strncmp(3255,$$0217,$12)|0);
     $50 = ($49|0)==(0);
     if ($50) {
      $51 = HEAP32[$0>>2]|0;
      $52 = ((($51)) + 40|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = (($53) + 1)|0;
      HEAP32[$52>>2] = $54;
      $55 = (((($51)) + 44|0) + ($53<<4)|0);
      HEAP32[$55>>2] = 5;
      break L10;
     }
     $73 = (_strncmp(3270,$$0217,$12)|0);
     $74 = ($73|0)==(0);
     if ($74) {
      $75 = HEAP32[$0>>2]|0;
      $76 = ((($75)) + 40|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = (($77) + 1)|0;
      HEAP32[$76>>2] = $78;
      $79 = (((($75)) + 44|0) + ($77<<4)|0);
      HEAP32[$79>>2] = 7;
      break L10;
     }
     $94 = (_strncmp(3297,$$0217,$12)|0);
     $95 = ($94|0)==(0);
     if (!($95)) {
      break L10;
     }
     $96 = HEAP32[$0>>2]|0;
     $97 = ((($96)) + 40|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = (($98) + 1)|0;
     HEAP32[$97>>2] = $99;
     $100 = (((($96)) + 44|0) + ($98<<4)|0);
     HEAP32[$100>>2] = 10;
     break L10;
     break;
    }
    default: {
     $56 = ($12>>>0)>(7);
     if ($56) {
      $274 = 0;
      label = 21;
      break L10;
     }
     switch ($12|0) {
     case 4:  {
      $80 = (_strncmp(3278,$$0217,$12)|0);
      $81 = ($80|0)==(0);
      if (!($81)) {
       break L10;
      }
      $82 = HEAP32[$0>>2]|0;
      $83 = ((($82)) + 40|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = (($84) + 1)|0;
      HEAP32[$83>>2] = $85;
      $86 = (((($82)) + 44|0) + ($84<<4)|0);
      HEAP32[$86>>2] = 8;
      break L10;
      break;
     }
     case 5:  {
      $258 = (_strncmp(3362,$$0217,$12)|0);
      $259 = ($258|0)==(0);
      if (!($259)) {
       break L10;
      }
      $260 = HEAP32[$0>>2]|0;
      $261 = ((($260)) + 40|0);
      $262 = HEAP32[$261>>2]|0;
      $263 = (($262) + 1)|0;
      HEAP32[$261>>2] = $263;
      $264 = (((($260)) + 44|0) + ($262<<4)|0);
      HEAP32[$264>>2] = 16;
      break L10;
      break;
     }
     default: {
      break L10;
     }
     }
    }
    }
   }
  } while(0);
  L39: do {
   if ((label|0) == 21) {
    label = 0;
    $57 = (_strncmp(3263,$$0217,6)|0);
    $58 = ($57|0)==(0);
    if ($58) {
     $59 = ((($$0217)) + 6|0);
     $60 = (+_strtod($59,0));
     $61 = $60;
     $62 = !($61 > 0.0);
     $63 = !($61 <= 0.5);
     $or$cond = $62 | $63;
     if ($or$cond) {
      break;
     }
     $64 = HEAP32[$0>>2]|0;
     $65 = ((($64)) + 40|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = (((((($64)) + 44|0) + ($66<<4)|0)) + 4|0);
     HEAPF32[$67>>2] = $61;
     $68 = HEAP32[$0>>2]|0;
     $69 = ((($68)) + 40|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = (($70) + 1)|0;
     HEAP32[$69>>2] = $71;
     $72 = (((($68)) + 44|0) + ($70<<4)|0);
     HEAP32[$72>>2] = 6;
     break;
    }
    if ($274) {
     $87 = (_strncmp(3283,$$0217,$12)|0);
     $88 = ($87|0)==(0);
     if ($88) {
      $89 = HEAP32[$0>>2]|0;
      $90 = ((($89)) + 40|0);
      $91 = HEAP32[$90>>2]|0;
      $92 = (($91) + 1)|0;
      HEAP32[$90>>2] = $92;
      $93 = (((($89)) + 44|0) + ($91<<4)|0);
      HEAP32[$93>>2] = 9;
      break;
     }
    }
    $101 = ($12|0)==(9);
    if ($101) {
     $102 = (_strncmp(3305,$$0217,$12)|0);
     $103 = ($102|0)==(0);
     if ($103) {
      $104 = HEAP32[$0>>2]|0;
      $105 = ((($104)) + 40|0);
      $106 = HEAP32[$105>>2]|0;
      $107 = (($106) + 1)|0;
      HEAP32[$105>>2] = $107;
      $108 = (((($104)) + 44|0) + ($106<<4)|0);
      HEAP32[$108>>2] = 11;
      break;
     }
    }
    if ($13) {
     $109 = (_strncmp(3315,$$0217,$12)|0);
     $110 = ($109|0)==(0);
     if ($110) {
      $111 = HEAP32[$0>>2]|0;
      $112 = ((($111)) + 40|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = (($113) + 1)|0;
      HEAP32[$112>>2] = $114;
      $115 = (((($111)) + 44|0) + ($113<<4)|0);
      HEAP32[$115>>2] = 12;
      break;
     }
    }
    $116 = (_strncmp(3324,$$0217,6)|0);
    $117 = ($116|0)==(0);
    if ($117) {
     $118 = ((($$0217)) + 6|0);
     $119 = (+_strtod($118,0));
     $120 = $119;
     $121 = !($120 >= 0.0);
     $122 = !($120 <= 1.0);
     $or$cond219 = $121 | $122;
     if ($or$cond219) {
      break;
     }
     $123 = HEAP32[$0>>2]|0;
     $124 = ((($123)) + 40|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = (((((($123)) + 44|0) + ($125<<4)|0)) + 4|0);
     HEAPF32[$126>>2] = $120;
     $127 = HEAP32[$0>>2]|0;
     $128 = ((($127)) + 40|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = (($129) + 1)|0;
     HEAP32[$128>>2] = $130;
     $131 = (((($127)) + 44|0) + ($129<<4)|0);
     HEAP32[$131>>2] = 13;
     break;
    }
    $132 = ($12>>>0)>(15);
    if ($132) {
     $133 = (_strncmp(3331,$$0217,14)|0);
     $134 = ($133|0)==(0);
     if ($134) {
      $135 = ((($$0217)) + 14|0);
      $136 = (+_strtod($135,0));
      $137 = (~~(($136)));
      $138 = (_strchr($$0217,47)|0);
      $139 = ($138|0)!=(0|0);
      if ($139) {
       $140 = ((($138)) + 1|0);
       $141 = (+_strtod($140,0));
       $142 = $141;
       $143 = $142 < 0.99000000953674316;
       if ($143) {
        $144 = (+_strtod($140,0));
        $145 = $144;
        $147 = $145;
       } else {
        $147 = 0.99000000953674316;
       }
      } else {
       $147 = 0.10000000149011612;
      }
      $146 = 1.0 - $147;
      $148 = 1.0 / $146;
      $149 = $148 + -1.0;
      $150 = ((($138)) + 1|0);
      $151 = $139 ? $150 : $$0217;
      $152 = (_strchr($151,47)|0);
      $153 = ($152|0)==(0|0);
      if ($153) {
       $162 = 0.20000000298023224;
      } else {
       $154 = ((($152)) + 1|0);
       $155 = (+_strtod($154,0));
       $156 = $155;
       $162 = $156;
      }
      $157 = ($137|0)<(2);
      $158 = HEAP32[$0>>2]|0;
      $159 = ((($158)) + 40|0);
      $160 = HEAP32[$159>>2]|0;
      if ($157) {
       $161 = (((((($158)) + 44|0) + ($160<<4)|0)) + 4|0);
       HEAPF32[$161>>2] = $162;
       $163 = HEAP32[$0>>2]|0;
       $164 = ((($163)) + 40|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = (($165) + 1)|0;
       HEAP32[$164>>2] = $166;
       $167 = (((($163)) + 44|0) + ($165<<4)|0);
       HEAP32[$167>>2] = 13;
       break;
      }
      $168 = (($160) + ($137))|0;
      $169 = ($168>>>0)<(32);
      if (!($169)) {
       break;
      }
      $170 = (+($137|0));
      $171 = $149 + $170;
      $$0218233 = 0;
      while(1) {
       $172 = HEAP32[$0>>2]|0;
       $173 = ((($172)) + 40|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = (((((($172)) + 44|0) + ($174<<4)|0)) + 4|0);
       HEAPF32[$175>>2] = $162;
       $176 = (+($$0218233|0));
       $177 = $176 / $171;
       $178 = HEAP32[$0>>2]|0;
       $179 = ((($178)) + 40|0);
       $180 = HEAP32[$179>>2]|0;
       $181 = (((((($178)) + 44|0) + ($180<<4)|0)) + 8|0);
       HEAPF32[$181>>2] = $177;
       $182 = (($$0218233) + 1)|0;
       $183 = (+($182|0));
       $184 = $149 + $183;
       $185 = $184 / $171;
       $186 = HEAP32[$0>>2]|0;
       $187 = ((($186)) + 40|0);
       $188 = HEAP32[$187>>2]|0;
       $189 = (((((($186)) + 44|0) + ($188<<4)|0)) + 12|0);
       HEAPF32[$189>>2] = $185;
       $190 = HEAP32[$0>>2]|0;
       $191 = ((($190)) + 40|0);
       $192 = HEAP32[$191>>2]|0;
       $193 = (($192) + 1)|0;
       HEAP32[$191>>2] = $193;
       $194 = (((($190)) + 44|0) + ($192<<4)|0);
       HEAP32[$194>>2] = 14;
       $exitcond240 = ($182|0)==($137|0);
       if ($exitcond240) {
        break L39;
       } else {
        $$0218233 = $182;
       }
      }
     }
     $195 = ($12>>>0)>(16);
     if ($195) {
      $196 = (_strncmp(3346,$$0217,15)|0);
      $197 = ($196|0)==(0);
      if ($197) {
       $198 = ((($$0217)) + 15|0);
       $199 = (+_strtod($198,0));
       $200 = (~~(($199)));
       $201 = (_strchr($$0217,47)|0);
       $202 = ($201|0)!=(0|0);
       if ($202) {
        $203 = ((($201)) + 1|0);
        $204 = (+_strtod($203,0));
        $205 = $204;
        $206 = $205 < 0.99000000953674316;
        if ($206) {
         $207 = (+_strtod($203,0));
         $208 = $207;
         $210 = $208;
        } else {
         $210 = 0.99000000953674316;
        }
       } else {
        $210 = 0.20000000298023224;
       }
       $209 = 1.0 - $210;
       $211 = 1.0 / $209;
       $212 = $211 + -1.0;
       $213 = ((($201)) + 1|0);
       $214 = $202 ? $213 : $$0217;
       $215 = (_strchr($214,47)|0);
       $216 = ($215|0)==(0|0);
       if ($216) {
        $225 = 0.20000000298023224;
       } else {
        $217 = ((($215)) + 1|0);
        $218 = (+_strtod($217,0));
        $219 = $218;
        $225 = $219;
       }
       $220 = ($200|0)<(2);
       $221 = HEAP32[$0>>2]|0;
       $222 = ((($221)) + 40|0);
       $223 = HEAP32[$222>>2]|0;
       if ($220) {
        $224 = (((((($221)) + 44|0) + ($223<<4)|0)) + 4|0);
        HEAPF32[$224>>2] = $225;
        $226 = HEAP32[$0>>2]|0;
        $227 = ((($226)) + 40|0);
        $228 = HEAP32[$227>>2]|0;
        $229 = (($228) + 1)|0;
        HEAP32[$227>>2] = $229;
        $230 = (((($226)) + 44|0) + ($228<<4)|0);
        HEAP32[$230>>2] = 13;
        break;
       }
       $231 = (($223) + ($200))|0;
       $232 = ($231>>>0)<(32);
       if ($232) {
        $233 = (+($200|0));
        $234 = $212 + $233;
        $$0215232 = 0;
        while(1) {
         $235 = HEAP32[$0>>2]|0;
         $236 = ((($235)) + 40|0);
         $237 = HEAP32[$236>>2]|0;
         $238 = (((((($235)) + 44|0) + ($237<<4)|0)) + 4|0);
         HEAPF32[$238>>2] = $225;
         $239 = (+($$0215232|0));
         $240 = $239 / $234;
         $241 = HEAP32[$0>>2]|0;
         $242 = ((($241)) + 40|0);
         $243 = HEAP32[$242>>2]|0;
         $244 = (((((($241)) + 44|0) + ($243<<4)|0)) + 8|0);
         HEAPF32[$244>>2] = $240;
         $245 = (($$0215232) + 1)|0;
         $246 = (+($245|0));
         $247 = $212 + $246;
         $248 = $247 / $234;
         $249 = HEAP32[$0>>2]|0;
         $250 = ((($249)) + 40|0);
         $251 = HEAP32[$250>>2]|0;
         $252 = (((((($249)) + 44|0) + ($251<<4)|0)) + 12|0);
         HEAPF32[$252>>2] = $248;
         $253 = HEAP32[$0>>2]|0;
         $254 = ((($253)) + 40|0);
         $255 = HEAP32[$254>>2]|0;
         $256 = (($255) + 1)|0;
         HEAP32[$254>>2] = $256;
         $257 = (((($253)) + 44|0) + ($255<<4)|0);
         HEAP32[$257>>2] = 15;
         $exitcond = ($245|0)==($200|0);
         if ($exitcond) {
          break;
         } else {
          $$0215232 = $245;
         }
        }
       }
      }
     }
    }
   }
  } while(0);
  $265 = HEAP32[$0>>2]|0;
  $266 = ((($265)) + 40|0);
  $267 = HEAP32[$266>>2]|0;
  $268 = ($267|0)==(32);
  $not$ = $268 ^ 1;
  $$0 = $7 & $not$;
  if (!($$0)) {
   break;
  }
  $269 = ((($6)) + 1|0);
  $$1 = $268 ? $$0217 : $269;
  $$0217 = $$1;
 }
 $270 = ($267|0)==(0);
 if (!($270)) {
  $$0216 = 1;
  return ($$0216|0);
 }
 $271 = ((($265)) + 40|0);
 HEAP32[$271>>2] = 1;
 $272 = ((($265)) + 44|0);
 HEAP32[$272>>2] = 13;
 $273 = ((($265)) + 48|0);
 HEAPF32[$273>>2] = 0.5;
 $$0216 = 1;
 return ($$0216|0);
}
function _FLAC__stream_encoder_set_max_lpc_order($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(1);
 if (!($4)) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ((($2)) + 556|0);
 HEAP32[$5>>2] = $1;
 $$0 = 1;
 return ($$0|0);
}
function _FLAC__stream_encoder_set_qlp_coeff_precision($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(1);
 if (!($4)) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ((($2)) + 560|0);
 HEAP32[$5>>2] = $1;
 $$0 = 1;
 return ($$0|0);
}
function _FLAC__stream_encoder_set_do_qlp_coeff_prec_search($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(1);
 if (!($4)) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ((($2)) + 564|0);
 HEAP32[$5>>2] = $1;
 $$0 = 1;
 return ($$0|0);
}
function _FLAC__stream_encoder_set_do_escape_coding($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(1);
 $$ = $4&1;
 return ($$|0);
}
function _FLAC__stream_encoder_set_do_exhaustive_model_search($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(1);
 if (!($4)) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ((($2)) + 568|0);
 HEAP32[$5>>2] = $1;
 $$0 = 1;
 return ($$0|0);
}
function _FLAC__stream_encoder_set_min_residual_partition_order($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(1);
 if (!($4)) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ((($2)) + 576|0);
 HEAP32[$5>>2] = $1;
 $$0 = 1;
 return ($$0|0);
}
function _FLAC__stream_encoder_set_max_residual_partition_order($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(1);
 if (!($4)) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ((($2)) + 580|0);
 HEAP32[$5>>2] = $1;
 $$0 = 1;
 return ($$0|0);
}
function _FLAC__stream_encoder_set_rice_parameter_search_dist($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(1);
 $$ = $4&1;
 return ($$|0);
}
function _FLAC__stream_encoder_delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 11872|0);
 HEAP32[$4>>2] = 1;
 (_FLAC__stream_encoder_finish($0)|0);
 $5 = HEAP32[$2>>2]|0;
 $6 = ((($5)) + 11776|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  _FLAC__stream_decoder_delete($7);
 }
 $9 = HEAP32[$2>>2]|0;
 $10 = ((($9)) + 6256|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($10);
 $11 = HEAP32[$2>>2]|0;
 $12 = ((($11)) + 6268|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($12);
 $13 = HEAP32[$2>>2]|0;
 $14 = ((($13)) + 6280|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($14);
 $15 = HEAP32[$2>>2]|0;
 $16 = ((($15)) + 6292|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($16);
 $17 = HEAP32[$2>>2]|0;
 $18 = ((($17)) + 6304|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($18);
 $19 = HEAP32[$2>>2]|0;
 $20 = ((($19)) + 6316|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($20);
 $21 = HEAP32[$2>>2]|0;
 $22 = ((($21)) + 6328|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($22);
 $23 = HEAP32[$2>>2]|0;
 $24 = ((($23)) + 6340|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($24);
 $25 = HEAP32[$2>>2]|0;
 $26 = ((($25)) + 6352|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($26);
 $27 = HEAP32[$2>>2]|0;
 $28 = ((($27)) + 6364|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($28);
 $29 = HEAP32[$2>>2]|0;
 $30 = ((($29)) + 6376|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($30);
 $31 = HEAP32[$2>>2]|0;
 $32 = ((($31)) + 6388|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($32);
 $33 = HEAP32[$2>>2]|0;
 $34 = ((($33)) + 6400|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($34);
 $35 = HEAP32[$2>>2]|0;
 $36 = ((($35)) + 6412|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($36);
 $37 = HEAP32[$2>>2]|0;
 $38 = ((($37)) + 6424|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($38);
 $39 = HEAP32[$2>>2]|0;
 $40 = ((($39)) + 6436|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($40);
 $41 = HEAP32[$2>>2]|0;
 $42 = ((($41)) + 6448|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($42);
 $43 = HEAP32[$2>>2]|0;
 $44 = ((($43)) + 6460|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($44);
 $45 = HEAP32[$2>>2]|0;
 $46 = ((($45)) + 6472|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($46);
 $47 = HEAP32[$2>>2]|0;
 $48 = ((($47)) + 6484|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($48);
 $49 = HEAP32[$2>>2]|0;
 $50 = ((($49)) + 11748|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($50);
 $51 = HEAP32[$2>>2]|0;
 $52 = ((($51)) + 11760|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($52);
 $53 = HEAP32[$2>>2]|0;
 $54 = ((($53)) + 6856|0);
 $55 = HEAP32[$54>>2]|0;
 _FLAC__bitwriter_delete($55);
 $56 = HEAP32[$2>>2]|0;
 _free($56);
 $57 = HEAP32[$0>>2]|0;
 _free($57);
 _free($0);
 return;
}
function _FLAC__stream_encoder_finish($0) {
 $0 = $0|0;
 var $$0 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, $spec$select41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 switch ($2|0) {
 case 0:  {
  label = 2;
  break;
 }
 case 1:  {
  $$0 = $2;
  return ($$0|0);
  break;
 }
 default: {
  $$1 = 0;
 }
 }
 if ((label|0) == 2) {
  $3 = ((($0)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($4)) + 11872|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0);
  if ($7) {
   $8 = ((($4)) + 7052|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0);
   if ($10) {
    $$1 = 0;
   } else {
    $11 = ((($1)) + 36|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)!=($9|0);
    $14 = $13&1;
    HEAP32[$11>>2] = $9;
    $15 = (_process_frame_($0,$14)|0);
    $16 = ($15|0)==(0);
    $spec$select = $16&1;
    $$1 = $spec$select;
   }
  } else {
   $$1 = 0;
  }
 }
 $17 = HEAP32[$0>>2]|0;
 $18 = ((($17)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0);
 if (!($20)) {
  $21 = ((($0)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 6928|0);
  $24 = ((($22)) + 7060|0);
  _FLAC__MD5Final($23,$24);
 }
 $25 = ((($0)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($26)) + 11872|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0);
 if ($29) {
  $30 = HEAP32[$0>>2]|0;
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)==(0);
  if ($32) {
   $33 = ((($26)) + 7292|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($34|0)==(0|0);
   if ($35) {
    $$2 = $$1;
   } else {
    _update_metadata_($0);
    $36 = HEAP32[$0>>2]|0;
    $37 = HEAP32[$36>>2]|0;
    $38 = ($37|0)==(0);
    $spec$select41 = $38 ? $$1 : 1;
    $$2 = $spec$select41;
   }
   $39 = HEAP32[$25>>2]|0;
   $40 = ((($39)) + 7304|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($41|0)==(0|0);
   if ($42) {
    $$3 = $$2;
   } else {
    $43 = ((($39)) + 6872|0);
    $44 = ((($39)) + 7312|0);
    $45 = HEAP32[$44>>2]|0;
    FUNCTION_TABLE_viii[$41 & 7]($0,$43,$45);
    $$3 = $$2;
   }
  } else {
   $$3 = $$1;
  }
  $46 = HEAP32[$0>>2]|0;
  $47 = ((($46)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($48|0)==(0);
  if ($49) {
   $$4 = $$3;
  } else {
   $50 = HEAP32[$25>>2]|0;
   $51 = ((($50)) + 11776|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($52|0)==(0|0);
   if ($53) {
    $$4 = $$3;
   } else {
    $54 = (_FLAC__stream_decoder_finish($52)|0);
    $55 = ($54|0)==(0);
    if ($55) {
     $56 = ($$3|0)==(0);
     if ($56) {
      $57 = HEAP32[$0>>2]|0;
      HEAP32[$57>>2] = 4;
      $$4 = 1;
     } else {
      $$4 = 1;
     }
    } else {
     $$4 = $$3;
    }
   }
  }
 } else {
  $$4 = $$1;
 }
 $58 = HEAP32[$25>>2]|0;
 $59 = ((($58)) + 7320|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ($60|0)==(0|0);
 if (!($61)) {
  $62 = HEAP32[422]|0;
  $63 = ($60|0)==($62|0);
  if (!($63)) {
   (_fclose($60)|0);
  }
  $64 = HEAP32[$25>>2]|0;
  $65 = ((($64)) + 7320|0);
  HEAP32[$65>>2] = 0;
 }
 _free_($0);
 _set_defaults__215($0);
 $66 = ($$4|0)!=(0);
 if (!($66)) {
  $67 = HEAP32[$0>>2]|0;
  HEAP32[$67>>2] = 1;
 }
 $68 = $66 ^ 1;
 $69 = $68&1;
 $$0 = $69;
 return ($$0|0);
}
function _process_frame_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $7 = ((($0)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 7060|0);
  $10 = ((($8)) + 4|0);
  $11 = ((($3)) + 24|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($3)) + 36|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($3)) + 28|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + 7)|0;
  $18 = $17 >>> 3;
  $19 = (_FLAC__MD5Accumulate($9,$10,$12,$14,$18)|0);
  $20 = ($19|0)==(0);
  if ($20) {
   $21 = HEAP32[$0>>2]|0;
   HEAP32[$21>>2] = 8;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $22 = (_process_subframes_($0,$1)|0);
 $23 = ($22|0)==(0);
 if ($23) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $24 = ((($0)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($25)) + 6856|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (_FLAC__bitwriter_zero_pad_to_byte_boundary($27)|0);
 $29 = ($28|0)==(0);
 if ($29) {
  $30 = HEAP32[$0>>2]|0;
  HEAP32[$30>>2] = 8;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $31 = HEAP32[$24>>2]|0;
 $32 = ((($31)) + 6856|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (_FLAC__bitwriter_get_write_crc16($33,$2)|0);
 $35 = ($34|0)==(0);
 if (!($35)) {
  $36 = HEAP32[$24>>2]|0;
  $37 = ((($36)) + 6856|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = HEAP16[$2>>1]|0;
  $40 = $39&65535;
  $41 = HEAP32[289]|0;
  $42 = (_FLAC__bitwriter_write_raw_uint32($38,$40,$41)|0);
  $43 = ($42|0)==(0);
  if (!($43)) {
   $45 = HEAP32[$0>>2]|0;
   $46 = ((($45)) + 36|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (_write_bitbuffer_($0,$47)|0);
   $49 = ($48|0)==(0);
   if ($49) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $50 = HEAP32[$24>>2]|0;
   $51 = ((($50)) + 7052|0);
   HEAP32[$51>>2] = 0;
   $52 = ((($50)) + 7056|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (($53) + 1)|0;
   HEAP32[$52>>2] = $54;
   $55 = HEAP32[$0>>2]|0;
   $56 = ((($55)) + 36|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ((($50)) + 6920|0);
   $59 = $58;
   $60 = $59;
   $61 = HEAP32[$60>>2]|0;
   $62 = (($59) + 4)|0;
   $63 = $62;
   $64 = HEAP32[$63>>2]|0;
   $65 = (_i64Add(($61|0),($64|0),($57|0),0)|0);
   $66 = (getTempRet0() | 0);
   $67 = $58;
   $68 = $67;
   HEAP32[$68>>2] = $65;
   $69 = (($67) + 4)|0;
   $70 = $69;
   HEAP32[$70>>2] = $66;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $44 = HEAP32[$0>>2]|0;
 HEAP32[$44>>2] = 8;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _update_metadata_($0) {
 $0 = $0|0;
 var $$0141151 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = sp;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 6920|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($3)) + 6896|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($3)) + 6900|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($3)) + 6912|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[289]|0;
 $18 = HEAP32[289]|0;
 $19 = (($18) + ($17))|0;
 $20 = HEAP32[277]|0;
 $21 = (($19) + ($20))|0;
 $22 = HEAP32[277]|0;
 $23 = (($21) + ($22))|0;
 $24 = HEAP32[269]|0;
 $25 = (($23) + ($24))|0;
 $26 = HEAP32[280]|0;
 $27 = (($25) + ($26))|0;
 $28 = HEAP32[285]|0;
 $29 = (($27) + ($28))|0;
 $30 = HEAP32[270]|0;
 $31 = (($29) + ($30))|0;
 $32 = $31 >>> 3;
 $33 = (($32) + 4)|0;
 $34 = ((($3)) + 7292|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP32[$0>>2]|0;
 $37 = ((($36)) + 608|0);
 $38 = $37;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 $41 = (($38) + 4)|0;
 $42 = $41;
 $43 = HEAP32[$42>>2]|0;
 $44 = (_i64Add(($40|0),($43|0),($33|0),0)|0);
 $45 = (getTempRet0() | 0);
 $46 = ((($3)) + 7312|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (FUNCTION_TABLE_iiiii[$35 & 7]($0,$44,$45,$47)|0);
 switch ($48|0) {
 case 0:  {
  $50 = HEAP32[$2>>2]|0;
  $51 = ((($50)) + 7300|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($3)) + 6928|0);
  $54 = ((($50)) + 7312|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (FUNCTION_TABLE_iiiiiii[$52 & 7]($0,$53,16,0,0,$55)|0);
  $57 = ($56|0)==(0);
  if (!($57)) {
   $58 = HEAP32[$0>>2]|0;
   HEAP32[$58>>2] = 5;
   STACKTOP = sp;return;
  }
  $59 = (($29) + -4)|0;
  $60 = $59 >>> 3;
  $61 = (($60) + 4)|0;
  $62 = $16 << 4;
  $63 = (($62) + 240)|0;
  $64 = $10 & 15;
  $65 = $63 | $64;
  $66 = $65&255;
  HEAP8[$1>>0] = $66;
  $67 = (_bitshift64Lshr(($7|0),($10|0),24)|0);
  $68 = (getTempRet0() | 0);
  $69 = $67&255;
  $70 = ((($1)) + 1|0);
  HEAP8[$70>>0] = $69;
  $71 = (_bitshift64Lshr(($7|0),($10|0),16)|0);
  $72 = (getTempRet0() | 0);
  $73 = $71&255;
  $74 = ((($1)) + 2|0);
  HEAP8[$74>>0] = $73;
  $75 = (_bitshift64Lshr(($7|0),($10|0),8)|0);
  $76 = (getTempRet0() | 0);
  $77 = $75&255;
  $78 = ((($1)) + 3|0);
  HEAP8[$78>>0] = $77;
  $79 = $7&255;
  $80 = ((($1)) + 4|0);
  HEAP8[$80>>0] = $79;
  $81 = HEAP32[$2>>2]|0;
  $82 = ((($81)) + 7292|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = HEAP32[$0>>2]|0;
  $85 = ((($84)) + 608|0);
  $86 = $85;
  $87 = $86;
  $88 = HEAP32[$87>>2]|0;
  $89 = (($86) + 4)|0;
  $90 = $89;
  $91 = HEAP32[$90>>2]|0;
  $92 = (_i64Add(($88|0),($91|0),($61|0),0)|0);
  $93 = (getTempRet0() | 0);
  $94 = ((($81)) + 7312|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = (FUNCTION_TABLE_iiiii[$83 & 7]($0,$92,$93,$95)|0);
  switch ($96|0) {
  case 0:  {
   $98 = HEAP32[$2>>2]|0;
   $99 = ((($98)) + 7300|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ((($98)) + 7312|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = (FUNCTION_TABLE_iiiiiii[$100 & 7]($0,$1,5,0,0,$102)|0);
   $104 = ($103|0)==(0);
   if (!($104)) {
    $105 = HEAP32[$0>>2]|0;
    HEAP32[$105>>2] = 5;
    STACKTOP = sp;return;
   }
   $106 = $19 >>> 3;
   $107 = (($106) + 4)|0;
   $108 = $12 >>> 16;
   $109 = $108&255;
   HEAP8[$1>>0] = $109;
   $110 = $12 >>> 8;
   $111 = $110&255;
   HEAP8[$70>>0] = $111;
   $112 = $12&255;
   HEAP8[$74>>0] = $112;
   $113 = $14 >>> 16;
   $114 = $113&255;
   HEAP8[$78>>0] = $114;
   $115 = $14 >>> 8;
   $116 = $115&255;
   HEAP8[$80>>0] = $116;
   $117 = $14&255;
   $118 = ((($1)) + 5|0);
   HEAP8[$118>>0] = $117;
   $119 = HEAP32[$2>>2]|0;
   $120 = ((($119)) + 7292|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = HEAP32[$0>>2]|0;
   $123 = ((($122)) + 608|0);
   $124 = $123;
   $125 = $124;
   $126 = HEAP32[$125>>2]|0;
   $127 = (($124) + 4)|0;
   $128 = $127;
   $129 = HEAP32[$128>>2]|0;
   $130 = (_i64Add(($126|0),($129|0),($107|0),0)|0);
   $131 = (getTempRet0() | 0);
   $132 = ((($119)) + 7312|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = (FUNCTION_TABLE_iiiii[$121 & 7]($0,$130,$131,$133)|0);
   switch ($134|0) {
   case 0:  {
    $136 = HEAP32[$2>>2]|0;
    $137 = ((($136)) + 7300|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = ((($136)) + 7312|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = (FUNCTION_TABLE_iiiiiii[$138 & 7]($0,$1,6,0,0,$140)|0);
    $142 = ($141|0)==(0);
    if (!($142)) {
     $143 = HEAP32[$0>>2]|0;
     HEAP32[$143>>2] = 5;
     STACKTOP = sp;return;
    }
    $144 = HEAP32[$2>>2]|0;
    $145 = ((($144)) + 7048|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = ($146|0)==(0|0);
    if ($147) {
     STACKTOP = sp;return;
    }
    $148 = HEAP32[$146>>2]|0;
    $149 = ($148|0)==(0);
    if ($149) {
     STACKTOP = sp;return;
    }
    $150 = HEAP32[$0>>2]|0;
    $151 = ((($150)) + 616|0);
    $152 = $151;
    $153 = $152;
    $154 = HEAP32[$153>>2]|0;
    $155 = (($152) + 4)|0;
    $156 = $155;
    $157 = HEAP32[$156>>2]|0;
    $158 = ($154|0)==(0);
    $159 = ($157|0)==(0);
    $160 = $158 & $159;
    if ($160) {
     STACKTOP = sp;return;
    }
    (_FLAC__format_seektable_sort($146)|0);
    $161 = HEAP32[$2>>2]|0;
    $162 = ((($161)) + 7292|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = HEAP32[$0>>2]|0;
    $165 = ((($164)) + 616|0);
    $166 = $165;
    $167 = $166;
    $168 = HEAP32[$167>>2]|0;
    $169 = (($166) + 4)|0;
    $170 = $169;
    $171 = HEAP32[$170>>2]|0;
    $172 = (_i64Add(($168|0),($171|0),4,0)|0);
    $173 = (getTempRet0() | 0);
    $174 = ((($161)) + 7312|0);
    $175 = HEAP32[$174>>2]|0;
    $176 = (FUNCTION_TABLE_iiiii[$163 & 7]($0,$172,$173,$175)|0);
    switch ($176|0) {
    case 0:  {
     $178 = HEAP32[$2>>2]|0;
     $179 = ((($178)) + 7048|0);
     $180 = HEAP32[$179>>2]|0;
     $181 = HEAP32[$180>>2]|0;
     $182 = ($181|0)==(0);
     if ($182) {
      STACKTOP = sp;return;
     }
     $183 = ((($1)) + 7|0);
     $184 = ((($1)) + 6|0);
     $185 = ((($1)) + 15|0);
     $186 = ((($1)) + 14|0);
     $187 = ((($1)) + 13|0);
     $188 = ((($1)) + 12|0);
     $189 = ((($1)) + 11|0);
     $190 = ((($1)) + 10|0);
     $191 = ((($1)) + 9|0);
     $192 = ((($1)) + 8|0);
     $193 = ((($1)) + 17|0);
     $194 = ((($1)) + 16|0);
     $$0141151 = 0;$202 = $180;$266 = $178;
     while(1) {
      $201 = ((($202)) + 4|0);
      $203 = HEAP32[$201>>2]|0;
      $204 = (($203) + (($$0141151*24)|0)|0);
      $205 = $204;
      $206 = $205;
      $207 = HEAP32[$206>>2]|0;
      $208 = (($205) + 4)|0;
      $209 = $208;
      $210 = HEAP32[$209>>2]|0;
      $211 = $207&255;
      HEAP8[$183>>0] = $211;
      $212 = (_bitshift64Lshr(($207|0),($210|0),8)|0);
      $213 = (getTempRet0() | 0);
      $214 = $212&255;
      HEAP8[$184>>0] = $214;
      $215 = (_bitshift64Lshr(($207|0),($210|0),16)|0);
      $216 = (getTempRet0() | 0);
      $217 = $215&255;
      HEAP8[$118>>0] = $217;
      $218 = (_bitshift64Lshr(($207|0),($210|0),24)|0);
      $219 = (getTempRet0() | 0);
      $220 = $218&255;
      HEAP8[$80>>0] = $220;
      $221 = $210&255;
      HEAP8[$78>>0] = $221;
      $222 = (_bitshift64Lshr(($207|0),($210|0),40)|0);
      $223 = (getTempRet0() | 0);
      $224 = $222&255;
      HEAP8[$74>>0] = $224;
      $225 = (_bitshift64Lshr(($207|0),($210|0),48)|0);
      $226 = (getTempRet0() | 0);
      $227 = $225&255;
      HEAP8[$70>>0] = $227;
      $228 = (_bitshift64Lshr(($207|0),($210|0),56)|0);
      $229 = (getTempRet0() | 0);
      $230 = $228&255;
      HEAP8[$1>>0] = $230;
      $231 = HEAP32[$201>>2]|0;
      $232 = (((($231) + (($$0141151*24)|0)|0)) + 8|0);
      $233 = $232;
      $234 = $233;
      $235 = HEAP32[$234>>2]|0;
      $236 = (($233) + 4)|0;
      $237 = $236;
      $238 = HEAP32[$237>>2]|0;
      $239 = $235&255;
      HEAP8[$185>>0] = $239;
      $240 = (_bitshift64Lshr(($235|0),($238|0),8)|0);
      $241 = (getTempRet0() | 0);
      $242 = $240&255;
      HEAP8[$186>>0] = $242;
      $243 = (_bitshift64Lshr(($235|0),($238|0),16)|0);
      $244 = (getTempRet0() | 0);
      $245 = $243&255;
      HEAP8[$187>>0] = $245;
      $246 = (_bitshift64Lshr(($235|0),($238|0),24)|0);
      $247 = (getTempRet0() | 0);
      $248 = $246&255;
      HEAP8[$188>>0] = $248;
      $249 = $238&255;
      HEAP8[$189>>0] = $249;
      $250 = (_bitshift64Lshr(($235|0),($238|0),40)|0);
      $251 = (getTempRet0() | 0);
      $252 = $250&255;
      HEAP8[$190>>0] = $252;
      $253 = (_bitshift64Lshr(($235|0),($238|0),48)|0);
      $254 = (getTempRet0() | 0);
      $255 = $253&255;
      HEAP8[$191>>0] = $255;
      $256 = (_bitshift64Lshr(($235|0),($238|0),56)|0);
      $257 = (getTempRet0() | 0);
      $258 = $256&255;
      HEAP8[$192>>0] = $258;
      $259 = HEAP32[$201>>2]|0;
      $260 = (((($259) + (($$0141151*24)|0)|0)) + 16|0);
      $261 = HEAP32[$260>>2]|0;
      $262 = $261&255;
      HEAP8[$193>>0] = $262;
      $263 = $261 >>> 8;
      $264 = $263&255;
      HEAP8[$194>>0] = $264;
      $265 = ((($266)) + 7300|0);
      $267 = HEAP32[$265>>2]|0;
      $268 = ((($266)) + 7312|0);
      $269 = HEAP32[$268>>2]|0;
      $270 = (FUNCTION_TABLE_iiiiiii[$267 & 7]($0,$1,18,0,0,$269)|0);
      $271 = ($270|0)==(0);
      $199 = (($$0141151) + 1)|0;
      if (!($271)) {
       break;
      }
      $195 = HEAP32[$2>>2]|0;
      $196 = ((($195)) + 7048|0);
      $197 = HEAP32[$196>>2]|0;
      $198 = HEAP32[$197>>2]|0;
      $200 = ($199>>>0)<($198>>>0);
      if ($200) {
       $$0141151 = $199;$202 = $197;$266 = $195;
      } else {
       label = 23;
       break;
      }
     }
     if ((label|0) == 23) {
      STACKTOP = sp;return;
     }
     $272 = HEAP32[$0>>2]|0;
     HEAP32[$272>>2] = 5;
     STACKTOP = sp;return;
     break;
    }
    case 1:  {
     $177 = HEAP32[$0>>2]|0;
     HEAP32[$177>>2] = 5;
     STACKTOP = sp;return;
     break;
    }
    default: {
     STACKTOP = sp;return;
    }
    }
    break;
   }
   case 1:  {
    $135 = HEAP32[$0>>2]|0;
    HEAP32[$135>>2] = 5;
    STACKTOP = sp;return;
    break;
   }
   default: {
    STACKTOP = sp;return;
   }
   }
   break;
  }
  case 1:  {
   $97 = HEAP32[$0>>2]|0;
   HEAP32[$97>>2] = 5;
   STACKTOP = sp;return;
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
  break;
 }
 case 1:  {
  $49 = HEAP32[$0>>2]|0;
  HEAP32[$49>>2] = 5;
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _free_($0) {
 $0 = $0|0;
 var $$090105 = 0, $$097 = 0, $$299 = 0, $$593 = 0, $$lcssa = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 600|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  _free($3);
  $5 = HEAP32[$0>>2]|0;
  $6 = ((($5)) + 600|0);
  HEAP32[$6>>2] = 0;
  $7 = ((($5)) + 604|0);
  HEAP32[$7>>2] = 0;
 }
 $8 = HEAP32[$0>>2]|0;
 $9 = ((($8)) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 if (!($11)) {
  $12 = ((($0)) + 4|0);
  $$090105 = 0;
  while(1) {
   $13 = HEAP32[$12>>2]|0;
   $14 = (((($13)) + 7352|0) + ($$090105<<2)|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0|0);
   if (!($16)) {
    _free($15);
    $17 = HEAP32[$12>>2]|0;
    $18 = (((($17)) + 7352|0) + ($$090105<<2)|0);
    HEAP32[$18>>2] = 0;
   }
   $19 = HEAP32[$12>>2]|0;
   $20 = (((($19)) + 7392|0) + ($$090105<<2)|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(0|0);
   if (!($22)) {
    _free($21);
    $23 = HEAP32[$12>>2]|0;
    $24 = (((($23)) + 7392|0) + ($$090105<<2)|0);
    HEAP32[$24>>2] = 0;
   }
   $25 = (($$090105) + 1)|0;
   $26 = HEAP32[$0>>2]|0;
   $27 = ((($26)) + 24|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($25>>>0)<($28>>>0);
   if ($29) {
    $$090105 = $25;
   } else {
    break;
   }
  }
 }
 $30 = ((($0)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($31)) + 7384|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(0|0);
 if (!($34)) {
  _free($33);
  $35 = HEAP32[$30>>2]|0;
  $36 = ((($35)) + 7384|0);
  HEAP32[$36>>2] = 0;
 }
 $37 = HEAP32[$30>>2]|0;
 $38 = ((($37)) + 7424|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)==(0|0);
 if (!($40)) {
  _free($39);
  $41 = HEAP32[$30>>2]|0;
  $42 = ((($41)) + 7424|0);
  HEAP32[$42>>2] = 0;
 }
 $43 = HEAP32[$30>>2]|0;
 $44 = ((($43)) + 7388|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)==(0|0);
 if (!($46)) {
  _free($45);
  $144 = HEAP32[$30>>2]|0;
  $145 = ((($144)) + 7388|0);
  HEAP32[$145>>2] = 0;
 }
 $146 = HEAP32[$30>>2]|0;
 $147 = ((($146)) + 7428|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = ($148|0)==(0|0);
 if (!($149)) {
  _free($148);
  $150 = HEAP32[$30>>2]|0;
  $151 = ((($150)) + 7428|0);
  HEAP32[$151>>2] = 0;
 }
 $152 = HEAP32[$0>>2]|0;
 $153 = ((($152)) + 40|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = ($154|0)==(0);
 $52 = ((($0)) + 4|0);
 $156 = HEAP32[$52>>2]|0;
 if ($155) {
  $$lcssa = $156;
 } else {
  $$299 = 0;$48 = $156;
  while(1) {
   $47 = (((($48)) + 7432|0) + ($$299<<2)|0);
   $49 = HEAP32[$47>>2]|0;
   $50 = ($49|0)==(0|0);
   if (!($50)) {
    _free($49);
    $51 = HEAP32[$52>>2]|0;
    $53 = (((($51)) + 7432|0) + ($$299<<2)|0);
    HEAP32[$53>>2] = 0;
   }
   $54 = (($$299) + 1)|0;
   $55 = HEAP32[$0>>2]|0;
   $56 = ((($55)) + 40|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ($54>>>0)<($57>>>0);
   $59 = HEAP32[$52>>2]|0;
   if ($58) {
    $$299 = $54;$48 = $59;
   } else {
    $$lcssa = $59;
    break;
   }
  }
 }
 $60 = ((($$lcssa)) + 7560|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ($61|0)==(0|0);
 if (!($62)) {
  _free($61);
  $63 = HEAP32[$52>>2]|0;
  $64 = ((($63)) + 7560|0);
  HEAP32[$64>>2] = 0;
 }
 $65 = HEAP32[$0>>2]|0;
 $66 = ((($65)) + 24|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ($67|0)==(0);
 if (!($68)) {
  $$097 = 0;
  while(1) {
   $69 = HEAP32[$52>>2]|0;
   $70 = (((($69)) + 7564|0) + ($$097<<3)|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = ($71|0)==(0|0);
   if (!($72)) {
    _free($71);
    $73 = HEAP32[$52>>2]|0;
    $74 = (((($73)) + 7564|0) + ($$097<<3)|0);
    HEAP32[$74>>2] = 0;
   }
   $75 = HEAP32[$52>>2]|0;
   $76 = (((((($75)) + 7564|0) + ($$097<<3)|0)) + 4|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ($77|0)==(0|0);
   if (!($78)) {
    _free($77);
    $137 = HEAP32[$52>>2]|0;
    $138 = (((((($137)) + 7564|0) + ($$097<<3)|0)) + 4|0);
    HEAP32[$138>>2] = 0;
   }
   $139 = (($$097) + 1)|0;
   $140 = HEAP32[$0>>2]|0;
   $141 = ((($140)) + 24|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = ($139>>>0)<($142>>>0);
   if ($143) {
    $$097 = $139;
   } else {
    break;
   }
  }
 }
 $79 = HEAP32[$52>>2]|0;
 $80 = ((($79)) + 7628|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = ($81|0)==(0|0);
 if (!($82)) {
  _free($81);
  $83 = HEAP32[$52>>2]|0;
  $84 = ((($83)) + 7628|0);
  HEAP32[$84>>2] = 0;
 }
 $85 = HEAP32[$52>>2]|0;
 $86 = ((($85)) + 7632|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ($87|0)==(0|0);
 if (!($88)) {
  _free($87);
  $120 = HEAP32[$52>>2]|0;
  $121 = ((($120)) + 7632|0);
  HEAP32[$121>>2] = 0;
 }
 $122 = HEAP32[$52>>2]|0;
 $123 = ((($122)) + 7636|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = ($124|0)==(0|0);
 if (!($125)) {
  _free($124);
  $126 = HEAP32[$52>>2]|0;
  $127 = ((($126)) + 7636|0);
  HEAP32[$127>>2] = 0;
 }
 $128 = HEAP32[$52>>2]|0;
 $129 = ((($128)) + 7640|0);
 $130 = HEAP32[$129>>2]|0;
 $131 = ($130|0)==(0|0);
 if (!($131)) {
  _free($130);
  $132 = HEAP32[$52>>2]|0;
  $133 = ((($132)) + 7640|0);
  HEAP32[$133>>2] = 0;
 }
 $134 = HEAP32[$52>>2]|0;
 $135 = ((($134)) + 7644|0);
 $89 = HEAP32[$135>>2]|0;
 $136 = ($89|0)==(0|0);
 if (!($136)) {
  _free($89);
  $90 = HEAP32[$52>>2]|0;
  $91 = ((($90)) + 7644|0);
  HEAP32[$91>>2] = 0;
 }
 $92 = HEAP32[$52>>2]|0;
 $93 = ((($92)) + 7648|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = ($94|0)==(0|0);
 if (!($95)) {
  _free($94);
  $96 = HEAP32[$52>>2]|0;
  $97 = ((($96)) + 7648|0);
  HEAP32[$97>>2] = 0;
 }
 $98 = HEAP32[$0>>2]|0;
 $99 = ((($98)) + 4|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = ($100|0)==(0);
 if ($101) {
  $117 = HEAP32[$52>>2]|0;
  $118 = ((($117)) + 6856|0);
  $119 = HEAP32[$118>>2]|0;
  _FLAC__bitwriter_free($119);
  return;
 }
 $102 = HEAP32[$0>>2]|0;
 $103 = ((($102)) + 24|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = ($104|0)==(0);
 if ($105) {
  $117 = HEAP32[$52>>2]|0;
  $118 = ((($117)) + 6856|0);
  $119 = HEAP32[$118>>2]|0;
  _FLAC__bitwriter_free($119);
  return;
 }
 $$593 = 0;
 while(1) {
  $106 = HEAP32[$52>>2]|0;
  $107 = (((($106)) + 11788|0) + ($$593<<2)|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = ($108|0)==(0|0);
  if (!($109)) {
   _free($108);
   $110 = HEAP32[$52>>2]|0;
   $111 = (((($110)) + 11788|0) + ($$593<<2)|0);
   HEAP32[$111>>2] = 0;
  }
  $112 = (($$593) + 1)|0;
  $113 = HEAP32[$0>>2]|0;
  $114 = ((($113)) + 24|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = ($112>>>0)<($115>>>0);
  if ($116) {
   $$593 = $112;
  } else {
   break;
  }
 }
 $117 = HEAP32[$52>>2]|0;
 $118 = ((($117)) + 6856|0);
 $119 = HEAP32[$118>>2]|0;
 _FLAC__bitwriter_free($119);
 return;
}
function _process_subframes_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0206233 = 0, $$0206233$ph = 0, $$0207231 = 0, $$0207231$ph = 0, $$0208 = 0, $$0209 = 0, $$0209$ph = 0, $$0209$ph$in = 0, $$0213227 = 0, $$0213228 = 0, $$0215 = 0, $$0216254 = 0, $$1220 = 0, $$2 = 0, $$2218251 = 0, $$4250 = 0, $$sink = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $spec$select = 0;
 var $spec$select221 = 0, $spec$select221$1 = 0, $spec$select222 = 0, $spec$select222$1 = 0, $spec$select222$2 = 0, $spec$select223 = 0, $spec$select223$1 = 0, $spec$store$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $2 = sp;
 $3 = sp + 40|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($4)) + 576|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($1|0)==(0);
 if ($7) {
  $8 = ((($4)) + 36|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (_FLAC__format_get_max_rice_partition_order_from_blocksize($9)|0);
  $11 = HEAP32[$0>>2]|0;
  $12 = ((($11)) + 580|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($10>>>0)<($13>>>0);
  $$ = $14 ? $10 : $13;
  $$0215 = $$;
 } else {
  $$0215 = 0;
 }
 $15 = ($6>>>0)<($$0215>>>0);
 $16 = $15 ? $6 : $$0215;
 $17 = HEAP32[$0>>2]|0;
 $18 = ((($17)) + 36|0);
 $19 = HEAP32[$18>>2]|0;
 HEAP32[$2>>2] = $19;
 $20 = ((($17)) + 32|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($2)) + 4|0);
 HEAP32[$22>>2] = $21;
 $23 = ((($17)) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($2)) + 8|0);
 HEAP32[$25>>2] = $24;
 $26 = ((($2)) + 12|0);
 HEAP32[$26>>2] = 0;
 $27 = ((($17)) + 28|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($2)) + 16|0);
 HEAP32[$29>>2] = $28;
 $30 = ((($2)) + 20|0);
 HEAP32[$30>>2] = 0;
 $31 = ((($0)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($32)) + 7056|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($2)) + 24|0);
 HEAP32[$35>>2] = $34;
 $36 = ((($17)) + 16|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(0);
 if ($38) {
  $$0213228 = 0;
  label = 7;
 } else {
  $39 = ((($17)) + 20|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)==(0);
  if ($41) {
   $$0213228 = 1;
   label = 7;
  } else {
   $42 = ((($32)) + 6864|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($43|0)==(0);
   if ($44) {
    $$0213228 = 1;
    label = 7;
   } else {
    $45 = ((($32)) + 6868|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ($46|0)==(0);
    $48 = $47 ^ 1;
    $49 = $48&1;
    if ($47) {
     $$0213228 = $49;
     label = 7;
    } else {
     $$0213227 = $49;$282 = 0;
    }
   }
  }
 }
 if ((label|0) == 7) {
  $50 = HEAP32[$0>>2]|0;
  $51 = ((($50)) + 24|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ($52|0)==(0);
  if ($53) {
   $$0213227 = $$0213228;$282 = 1;
  } else {
   $$0216254 = 0;$58 = $50;
   while(1) {
    $54 = HEAP32[$31>>2]|0;
    $55 = (((($54)) + 4|0) + ($$0216254<<2)|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ((($58)) + 36|0);
    $59 = HEAP32[$57>>2]|0;
    $60 = (_get_wasted_bits_($56,$59)|0);
    $61 = HEAP32[$0>>2]|0;
    $62 = ((($61)) + 28|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ($60>>>0)>($63>>>0);
    $spec$select = $64 ? $63 : $60;
    $65 = HEAP32[$31>>2]|0;
    $66 = (((((($65)) + 336|0) + (($$0216254*584)|0)|0)) + 580|0);
    HEAP32[$66>>2] = $spec$select;
    $67 = (((((($65)) + 336|0) + (($$0216254*584)|0)|0)) + 288|0);
    HEAP32[$67>>2] = $spec$select;
    $68 = (($63) - ($spec$select))|0;
    $69 = (((($65)) + 216|0) + ($$0216254<<2)|0);
    HEAP32[$69>>2] = $68;
    $70 = (($$0216254) + 1)|0;
    $71 = HEAP32[$0>>2]|0;
    $72 = ((($71)) + 24|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = ($70>>>0)<($73>>>0);
    if ($74) {
     $$0216254 = $70;$58 = $71;
    } else {
     $$0213227 = $$0213228;$282 = 1;
     break;
    }
   }
  }
 }
 $75 = ($$0213227|0)!=(0);
 if ($75) {
  $76 = HEAP32[$31>>2]|0;
  $77 = ((($76)) + 36|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = HEAP32[$0>>2]|0;
  $80 = ((($79)) + 36|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (_get_wasted_bits_($78,$81)|0);
  $83 = HEAP32[$0>>2]|0;
  $84 = ((($83)) + 28|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = ($82>>>0)>($85>>>0);
  $spec$select221 = $86 ? $85 : $82;
  $87 = HEAP32[$31>>2]|0;
  $88 = ((($87)) + 5588|0);
  HEAP32[$88>>2] = $spec$select221;
  $89 = ((($87)) + 5296|0);
  HEAP32[$89>>2] = $spec$select221;
  $90 = (($85) - ($spec$select221))|0;
  $91 = ((($87)) + 248|0);
  HEAP32[$91>>2] = $90;
  $92 = HEAP32[$31>>2]|0;
  $93 = ((($92)) + 40|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = HEAP32[$0>>2]|0;
  $96 = ((($95)) + 36|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = (_get_wasted_bits_($94,$97)|0);
  $99 = HEAP32[$0>>2]|0;
  $100 = ((($99)) + 28|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = ($98>>>0)>($101>>>0);
  $spec$select221$1 = $102 ? $101 : $98;
  $103 = HEAP32[$31>>2]|0;
  $104 = ((($103)) + 6172|0);
  HEAP32[$104>>2] = $spec$select221$1;
  $105 = ((($103)) + 5880|0);
  HEAP32[$105>>2] = $spec$select221$1;
  $106 = (($101) + 1)|0;
  $107 = (($106) - ($spec$select221$1))|0;
  $108 = ((($103)) + 252|0);
  HEAP32[$108>>2] = $107;
 }
 if ($282) {
  $109 = HEAP32[$0>>2]|0;
  $110 = ((($109)) + 24|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = ($111|0)==(0);
  if (!($112)) {
   $$2218251 = 0;
   while(1) {
    $113 = HEAP32[$31>>2]|0;
    $114 = (((($113)) + 216|0) + ($$2218251<<2)|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = (((($113)) + 4|0) + ($$2218251<<2)|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = (((($113)) + 6176|0) + ($$2218251<<3)|0);
    $119 = (((($113)) + 6640|0) + ($$2218251<<3)|0);
    $120 = (((($113)) + 256|0) + ($$2218251<<3)|0);
    $121 = (((($113)) + 6768|0) + ($$2218251<<2)|0);
    $122 = (((($113)) + 6808|0) + ($$2218251<<2)|0);
    _process_subframe_($0,$16,$$0215,$2,$115,$117,$118,$119,$120,$121,$122);
    $123 = (($$2218251) + 1)|0;
    $124 = HEAP32[$0>>2]|0;
    $125 = ((($124)) + 24|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($123>>>0)<($126>>>0);
    if ($127) {
     $$2218251 = $123;
    } else {
     break;
    }
   }
  }
 }
 $128 = HEAP32[$31>>2]|0;
 L23: do {
  if ($75) {
   $129 = ((($128)) + 248|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = ((($128)) + 36|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = ((($128)) + 6240|0);
   $134 = ((($128)) + 6704|0);
   $135 = ((($128)) + 320|0);
   $136 = ((($128)) + 6800|0);
   $137 = ((($128)) + 6840|0);
   _process_subframe_($0,$16,$$0215,$2,$130,$132,$133,$134,$135,$136,$137);
   $138 = HEAP32[$31>>2]|0;
   $139 = ((($138)) + 252|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = ((($138)) + 40|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = ((($138)) + 6248|0);
   $144 = ((($138)) + 6712|0);
   $145 = ((($138)) + 328|0);
   $146 = ((($138)) + 6804|0);
   $147 = ((($138)) + 6844|0);
   _process_subframe_($0,$16,$$0215,$2,$140,$142,$143,$144,$145,$146,$147);
   $148 = HEAP32[$0>>2]|0;
   $149 = ((($148)) + 20|0);
   $150 = HEAP32[$149>>2]|0;
   $151 = ($150|0)==(0);
   if ($151) {
    label = 20;
   } else {
    $152 = HEAP32[$31>>2]|0;
    $153 = ((($152)) + 6864|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = ($154|0)==(0);
    if ($155) {
     label = 20;
    } else {
     $156 = ((($152)) + 6868|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==(0);
     $159 = $158 ? 0 : 3;
     $$2 = $159;
    }
   }
   if ((label|0) == 20) {
    $160 = HEAP32[$31>>2]|0;
    $161 = ((($160)) + 6808|0);
    $162 = HEAP32[$161>>2]|0;
    $163 = ((($160)) + 6812|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = (($164) + ($162))|0;
    HEAP32[$3>>2] = $165;
    $166 = ((($160)) + 6844|0);
    $167 = HEAP32[$166>>2]|0;
    $168 = (($167) + ($162))|0;
    $169 = ((($3)) + 4|0);
    HEAP32[$169>>2] = $168;
    $170 = (($167) + ($164))|0;
    $171 = ((($3)) + 8|0);
    HEAP32[$171>>2] = $170;
    $172 = ((($160)) + 6840|0);
    $173 = HEAP32[$172>>2]|0;
    $174 = (($173) + ($167))|0;
    $175 = ((($3)) + 12|0);
    HEAP32[$175>>2] = $174;
    $176 = ((($3)) + 4|0);
    $177 = HEAP32[$176>>2]|0;
    $178 = ($177>>>0)<($165>>>0);
    $spec$select222 = $178&1;
    $spec$select223 = $178 ? $177 : $165;
    $179 = ((($3)) + 8|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = ($180>>>0)<($spec$select223>>>0);
    $spec$select222$1 = $181 ? 2 : $spec$select222;
    $spec$select223$1 = $181 ? $180 : $spec$select223;
    $182 = ((($3)) + 12|0);
    $183 = HEAP32[$182>>2]|0;
    $184 = ($183>>>0)<($spec$select223$1>>>0);
    $spec$select222$2 = $184 ? 3 : $spec$select222$1;
    $$2 = $spec$select222$2;
   }
   HEAP32[$26>>2] = $$2;
   $185 = HEAP32[$31>>2]|0;
   $186 = ((($185)) + 6856|0);
   $187 = HEAP32[$186>>2]|0;
   $188 = (_FLAC__frame_add_header($2,$187)|0);
   $189 = ($188|0)==(0);
   if ($189) {
    $190 = HEAP32[$0>>2]|0;
    HEAP32[$190>>2] = 7;
    $$1220 = 0;
    STACKTOP = sp;return ($$1220|0);
   }
   switch ($$2|0) {
   case 0:  {
    $191 = HEAP32[$31>>2]|0;
    $192 = ((($191)) + 6768|0);
    $193 = HEAP32[$192>>2]|0;
    $194 = (((($191)) + 336|0) + (($193*292)|0)|0);
    $195 = ((($191)) + 6772|0);
    $196 = HEAP32[$195>>2]|0;
    $197 = (((($191)) + 920|0) + (($196*292)|0)|0);
    $198 = HEAP32[$31>>2]|0;
    $199 = ((($198)) + 216|0);
    $200 = ((($198)) + 220|0);
    $$0206233$ph = $197;$$0207231$ph = $194;$$0209$ph$in = $199;$$sink = $200;
    label = 28;
    break;
   }
   case 1:  {
    $201 = HEAP32[$31>>2]|0;
    $202 = ((($201)) + 6768|0);
    $203 = HEAP32[$202>>2]|0;
    $204 = (((($201)) + 336|0) + (($203*292)|0)|0);
    $205 = ((($201)) + 6804|0);
    $206 = HEAP32[$205>>2]|0;
    $207 = (((($201)) + 5592|0) + (($206*292)|0)|0);
    $208 = HEAP32[$31>>2]|0;
    $209 = ((($208)) + 216|0);
    $210 = ((($208)) + 252|0);
    $$0206233$ph = $207;$$0207231$ph = $204;$$0209$ph$in = $209;$$sink = $210;
    label = 28;
    break;
   }
   case 2:  {
    $211 = HEAP32[$31>>2]|0;
    $212 = ((($211)) + 6804|0);
    $213 = HEAP32[$212>>2]|0;
    $214 = (((($211)) + 5592|0) + (($213*292)|0)|0);
    $215 = ((($211)) + 6772|0);
    $216 = HEAP32[$215>>2]|0;
    $217 = (((($211)) + 920|0) + (($216*292)|0)|0);
    $218 = HEAP32[$31>>2]|0;
    $219 = ((($218)) + 252|0);
    $220 = ((($218)) + 220|0);
    $$0206233$ph = $217;$$0207231$ph = $214;$$0209$ph$in = $219;$$sink = $220;
    label = 28;
    break;
   }
   case 3:  {
    $221 = HEAP32[$31>>2]|0;
    $222 = ((($221)) + 6800|0);
    $223 = HEAP32[$222>>2]|0;
    $224 = (((($221)) + 5008|0) + (($223*292)|0)|0);
    $225 = ((($221)) + 6804|0);
    $226 = HEAP32[$225>>2]|0;
    $227 = (((($221)) + 5592|0) + (($226*292)|0)|0);
    $228 = HEAP32[$31>>2]|0;
    $229 = ((($228)) + 248|0);
    $230 = ((($228)) + 252|0);
    $$0206233$ph = $227;$$0207231$ph = $224;$$0209$ph$in = $229;$$sink = $230;
    label = 28;
    break;
   }
   default: {
    $$0206233 = 0;$$0207231 = 0;$$0208 = 0;$$0209 = 0;
   }
   }
   if ((label|0) == 28) {
    $$0209$ph = HEAP32[$$0209$ph$in>>2]|0;
    $231 = HEAP32[$$sink>>2]|0;
    $$0206233 = $$0206233$ph;$$0207231 = $$0207231$ph;$$0208 = $231;$$0209 = $$0209$ph;
   }
   $232 = HEAP32[$2>>2]|0;
   $233 = HEAP32[$31>>2]|0;
   $234 = ((($233)) + 6856|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = (_add_subframe_($0,$232,$$0209,$$0207231,$235)|0);
   $237 = ($236|0)==(0);
   if ($237) {
    $$1220 = 0;
    STACKTOP = sp;return ($$1220|0);
   }
   $238 = HEAP32[$2>>2]|0;
   $239 = HEAP32[$31>>2]|0;
   $240 = ((($239)) + 6856|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = (_add_subframe_($0,$238,$$0208,$$0206233,$241)|0);
   $243 = ($242|0)==(0);
   if ($243) {
    $$1220 = 0;
    STACKTOP = sp;return ($$1220|0);
   }
  } else {
   $244 = ((($128)) + 6856|0);
   $245 = HEAP32[$244>>2]|0;
   $246 = (_FLAC__frame_add_header($2,$245)|0);
   $247 = ($246|0)==(0);
   $248 = HEAP32[$0>>2]|0;
   if ($247) {
    HEAP32[$248>>2] = 7;
    $$1220 = 0;
    STACKTOP = sp;return ($$1220|0);
   }
   $249 = ((($248)) + 24|0);
   $250 = HEAP32[$249>>2]|0;
   $251 = ($250|0)==(0);
   if (!($251)) {
    $$4250 = 0;
    while(1) {
     $257 = HEAP32[$2>>2]|0;
     $258 = HEAP32[$31>>2]|0;
     $259 = (((($258)) + 216|0) + ($$4250<<2)|0);
     $260 = HEAP32[$259>>2]|0;
     $261 = (((($258)) + 6768|0) + ($$4250<<2)|0);
     $262 = HEAP32[$261>>2]|0;
     $263 = ((((($258)) + 336|0) + (($$4250*584)|0)|0) + (($262*292)|0)|0);
     $264 = ((($258)) + 6856|0);
     $265 = HEAP32[$264>>2]|0;
     $266 = (_add_subframe_($0,$257,$260,$263,$265)|0);
     $267 = ($266|0)==(0);
     $255 = (($$4250) + 1)|0;
     if ($267) {
      $$1220 = 0;
      break;
     }
     $252 = HEAP32[$0>>2]|0;
     $253 = ((($252)) + 24|0);
     $254 = HEAP32[$253>>2]|0;
     $256 = ($255>>>0)<($254>>>0);
     if ($256) {
      $$4250 = $255;
     } else {
      break L23;
     }
    }
    STACKTOP = sp;return ($$1220|0);
   }
  }
 } while(0);
 $268 = HEAP32[$0>>2]|0;
 $269 = ((($268)) + 20|0);
 $270 = HEAP32[$269>>2]|0;
 $271 = ($270|0)==(0);
 if (!($271)) {
  $272 = HEAP32[$31>>2]|0;
  $273 = ((($272)) + 6864|0);
  $274 = HEAP32[$273>>2]|0;
  $275 = (($274) + 1)|0;
  $276 = ((($272)) + 6860|0);
  $277 = HEAP32[$276>>2]|0;
  $278 = ($275>>>0)<($277>>>0);
  $spec$store$select = $278 ? $275 : 0;
  HEAP32[$273>>2] = $spec$store$select;
 }
 $279 = HEAP32[$26>>2]|0;
 $280 = HEAP32[$31>>2]|0;
 $281 = ((($280)) + 6868|0);
 HEAP32[$281>>2] = $279;
 $$1220 = 1;
 STACKTOP = sp;return ($$1220|0);
}
function _write_bitbuffer_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp + 4|0;
 $3 = sp;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 6856|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_FLAC__bitwriter_get_buffer($7,$2,$3)|0);
 $9 = ($8|0)==(0);
 $10 = HEAP32[$0>>2]|0;
 if ($9) {
  HEAP32[$10>>2] = 8;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0);
 do {
  if (!($13)) {
   $14 = HEAP32[$2>>2]|0;
   $15 = HEAP32[$4>>2]|0;
   $16 = ((($15)) + 11828|0);
   HEAP32[$16>>2] = $14;
   $17 = HEAP32[$3>>2]|0;
   $18 = ((($15)) + 11836|0);
   HEAP32[$18>>2] = $17;
   $19 = ((($15)) + 11780|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(0);
   if ($21) {
    $22 = ((($15)) + 11784|0);
    HEAP32[$22>>2] = 1;
    break;
   }
   $23 = ((($15)) + 11776|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (_FLAC__stream_decoder_process_single($24)|0);
   $26 = ($25|0)==(0);
   if ($26) {
    $27 = HEAP32[$4>>2]|0;
    $28 = ((($27)) + 6856|0);
    $29 = HEAP32[$28>>2]|0;
    _FLAC__bitwriter_clear($29);
    $30 = HEAP32[$0>>2]|0;
    $31 = HEAP32[$30>>2]|0;
    $32 = ($31|0)==(4);
    if ($32) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
    HEAP32[$30>>2] = 3;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $33 = HEAP32[$2>>2]|0;
 $34 = HEAP32[$3>>2]|0;
 $35 = (_write_frame_($0,$33,$34,$1)|0);
 $36 = ($35|0)==(0);
 $37 = HEAP32[$4>>2]|0;
 $38 = ((($37)) + 6856|0);
 $39 = HEAP32[$38>>2]|0;
 _FLAC__bitwriter_clear($39);
 if (!($36)) {
  $40 = HEAP32[$0>>2]|0;
  HEAP32[$40>>2] = 5;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $41 = ($1|0)==(0);
 if ($41) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $42 = HEAP32[$3>>2]|0;
 $43 = HEAP32[$4>>2]|0;
 $44 = ((($43)) + 6896|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($42>>>0)<($45>>>0);
 $$ = $46 ? $42 : $45;
 HEAP32[$44>>2] = $$;
 $47 = HEAP32[$4>>2]|0;
 $48 = ((($47)) + 6900|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($42>>>0)>($49>>>0);
 $51 = $50 ? $42 : $49;
 HEAP32[$48>>2] = $51;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _write_frame_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$01 = 0, $$072 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, $storemerge$in = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp;
 $5 = $4;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = 0;
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 7296|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if (!($13)) {
  $14 = ((($10)) + 7312|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (FUNCTION_TABLE_iiii[$12 & 15]($0,$4,$15)|0);
  $17 = ($16|0)==(1);
  if ($17) {
   $18 = HEAP32[$0>>2]|0;
   HEAP32[$18>>2] = 5;
   $$072 = 1;
   STACKTOP = sp;return ($$072|0);
  }
 }
 $19 = ($3|0)==(0);
 L6: do {
  if ($19) {
   $trunc = HEAP8[$1>>0]|0;
   $trunc$clear = $trunc & 127;
   switch ($trunc$clear<<24>>24) {
   case 0:  {
    $20 = $4;
    $21 = $20;
    $22 = HEAP32[$21>>2]|0;
    $23 = (($20) + 4)|0;
    $24 = $23;
    $25 = HEAP32[$24>>2]|0;
    $26 = HEAP32[$0>>2]|0;
    $27 = ((($26)) + 608|0);
    $28 = $27;
    $29 = $28;
    HEAP32[$29>>2] = $22;
    $30 = (($28) + 4)|0;
    $31 = $30;
    HEAP32[$31>>2] = $25;
    break L6;
    break;
   }
   case 3:  {
    break;
   }
   default: {
    break L6;
   }
   }
   $32 = HEAP32[$0>>2]|0;
   $33 = ((($32)) + 616|0);
   $34 = $33;
   $35 = $34;
   $36 = HEAP32[$35>>2]|0;
   $37 = (($34) + 4)|0;
   $38 = $37;
   $39 = HEAP32[$38>>2]|0;
   $40 = ($36|0)==(0);
   $41 = ($39|0)==(0);
   $42 = $40 & $41;
   if ($42) {
    $43 = $4;
    $44 = $43;
    $45 = HEAP32[$44>>2]|0;
    $46 = (($43) + 4)|0;
    $47 = $46;
    $48 = HEAP32[$47>>2]|0;
    $49 = $33;
    $50 = $49;
    HEAP32[$50>>2] = $45;
    $51 = (($49) + 4)|0;
    $52 = $51;
    HEAP32[$52>>2] = $48;
   }
  }
 } while(0);
 $53 = HEAP32[$9>>2]|0;
 $54 = ((($53)) + 7048|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)==(0|0);
 L13: do {
  if (!($56)) {
   $57 = HEAP32[$0>>2]|0;
   $58 = ((($57)) + 624|0);
   $59 = $58;
   $60 = $59;
   $61 = HEAP32[$60>>2]|0;
   $62 = (($59) + 4)|0;
   $63 = $62;
   $64 = HEAP32[$63>>2]|0;
   $65 = ($61|0)==(0);
   $66 = ($64|0)==(0);
   $67 = $65 & $66;
   if (!($67)) {
    $68 = HEAP32[$55>>2]|0;
    $69 = ($68|0)==(0);
    if (!($69)) {
     $70 = (_FLAC__stream_encoder_get_blocksize($0)|0);
     $71 = ((($53)) + 7336|0);
     $72 = $71;
     $73 = $72;
     $74 = HEAP32[$73>>2]|0;
     $75 = (($72) + 4)|0;
     $76 = $75;
     $77 = HEAP32[$76>>2]|0;
     $78 = (_i64Add(($70|0),0,-1,-1)|0);
     $79 = (getTempRet0() | 0);
     $80 = (_i64Add(($78|0),($79|0),($74|0),($77|0))|0);
     $81 = (getTempRet0() | 0);
     $82 = ((($53)) + 7316|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83>>>0)<($68>>>0);
     if ($84) {
      $85 = ((($55)) + 4|0);
      $86 = HEAP32[$85>>2]|0;
      $$01 = $83;
      while(1) {
       $87 = (($86) + (($$01*24)|0)|0);
       $88 = $87;
       $89 = $88;
       $90 = HEAP32[$89>>2]|0;
       $91 = (($88) + 4)|0;
       $92 = $91;
       $93 = HEAP32[$92>>2]|0;
       $94 = ($93>>>0)>($81>>>0);
       $95 = ($90>>>0)>($80>>>0);
       $96 = ($93|0)==($81|0);
       $97 = $96 & $95;
       $98 = $94 | $97;
       if ($98) {
        break L13;
       }
       $99 = ($93>>>0)<($77>>>0);
       $100 = ($90>>>0)<($74>>>0);
       $101 = ($93|0)==($77|0);
       $102 = $101 & $100;
       $103 = $99 | $102;
       if (!($103)) {
        $104 = $87;
        $105 = $104;
        HEAP32[$105>>2] = $74;
        $106 = (($104) + 4)|0;
        $107 = $106;
        HEAP32[$107>>2] = $77;
        $108 = $4;
        $109 = $108;
        $110 = HEAP32[$109>>2]|0;
        $111 = (($108) + 4)|0;
        $112 = $111;
        $113 = HEAP32[$112>>2]|0;
        $114 = (_i64Subtract(($110|0),($113|0),($61|0),($64|0))|0);
        $115 = (getTempRet0() | 0);
        $116 = (((($86) + (($$01*24)|0)|0)) + 8|0);
        $117 = $116;
        $118 = $117;
        HEAP32[$118>>2] = $114;
        $119 = (($117) + 4)|0;
        $120 = $119;
        HEAP32[$120>>2] = $115;
        $121 = (((($86) + (($$01*24)|0)|0)) + 16|0);
        HEAP32[$121>>2] = $70;
       }
       $storemerge$in = HEAP32[$82>>2]|0;
       $storemerge = (($storemerge$in) + 1)|0;
       HEAP32[$82>>2] = $storemerge;
       $122 = (($$01) + 1)|0;
       $123 = ($122>>>0)<($68>>>0);
       if ($123) {
        $$01 = $122;
       } else {
        break;
       }
      }
     }
    }
   }
  }
 } while(0);
 $124 = ((($53)) + 7300|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = ((($53)) + 7056|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = ((($53)) + 7312|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = (FUNCTION_TABLE_iiiiiii[$125 & 7]($0,$1,$2,$3,$127,$129)|0);
 $131 = ($130|0)==(0);
 if ($131) {
  $132 = HEAP32[$9>>2]|0;
  $133 = ((($132)) + 7328|0);
  $134 = $133;
  $135 = $134;
  $136 = HEAP32[$135>>2]|0;
  $137 = (($134) + 4)|0;
  $138 = $137;
  $139 = HEAP32[$138>>2]|0;
  $140 = (_i64Add(($136|0),($139|0),($2|0),0)|0);
  $141 = (getTempRet0() | 0);
  $142 = $133;
  $143 = $142;
  HEAP32[$143>>2] = $140;
  $144 = (($142) + 4)|0;
  $145 = $144;
  HEAP32[$145>>2] = $141;
  $146 = ((($132)) + 7336|0);
  $147 = $146;
  $148 = $147;
  $149 = HEAP32[$148>>2]|0;
  $150 = (($147) + 4)|0;
  $151 = $150;
  $152 = HEAP32[$151>>2]|0;
  $153 = (_i64Add(($149|0),($152|0),($3|0),0)|0);
  $154 = (getTempRet0() | 0);
  $155 = $146;
  $156 = $155;
  HEAP32[$156>>2] = $153;
  $157 = (($155) + 4)|0;
  $158 = $157;
  HEAP32[$158>>2] = $154;
  $159 = ((($132)) + 7344|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = ((($132)) + 7056|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = (($162) + 1)|0;
  $164 = ($160>>>0)>($163>>>0);
  $$ = $164 ? $160 : $163;
  HEAP32[$159>>2] = $$;
  $$072 = 0;
  STACKTOP = sp;return ($$072|0);
 } else {
  $165 = HEAP32[$0>>2]|0;
  HEAP32[$165>>2] = 5;
  $$072 = $130;
  STACKTOP = sp;return ($$072|0);
 }
 return (0)|0;
}
function _FLAC__stream_encoder_get_blocksize($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 return ($3|0);
}
function _get_wasted_bits_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$02330 = 0, $$02533 = 0, $$034 = 0, $$12428 = 0, $$12629 = 0, $$131 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $or$cond = 0, $or$cond41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 if ($2) {
  $$12428 = 0;
  return ($$12428|0);
 }
 $$02533 = 0;$$034 = 0;
 while(1) {
  $3 = (($0) + ($$02533<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $4 | $$034;
  $6 = (($$02533) + 1)|0;
  $7 = ($6>>>0)<($1>>>0);
  $8 = $5 & 1;
  $9 = ($8|0)==(0);
  $or$cond = $7 & $9;
  if ($or$cond) {
   $$02533 = $6;$$034 = $5;
  } else {
   break;
  }
 }
 $10 = ($5|0)!=(0);
 $11 = $5 & 1;
 $12 = ($11|0)==(0);
 $or$cond41 = $10 & $12;
 if (!($or$cond41)) {
  $$12428 = 0;
  return ($$12428|0);
 }
 $$02330 = 0;$$131 = $5;
 while(1) {
  $13 = $$131 >> 1;
  $14 = (($$02330) + 1)|0;
  $15 = $$131 & 2;
  $16 = ($15|0)==(0);
  if ($16) {
   $$02330 = $14;$$131 = $13;
  } else {
   break;
  }
 }
 $17 = ($14|0)==(0);
 if ($17) {
  $$12428 = 0;
  return ($$12428|0);
 }
 $18 = ($1|0)==(0);
 if ($18) {
  $$12428 = $14;
  return ($$12428|0);
 }
 $$12629 = 0;
 while(1) {
  $19 = (($0) + ($$12629<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $20 >> $14;
  HEAP32[$19>>2] = $21;
  $22 = (($$12629) + 1)|0;
  $exitcond = ($22|0)==($1|0);
  if ($exitcond) {
   $$12428 = $14;
   break;
  } else {
   $$12629 = $22;
  }
 }
 return ($$12428|0);
}
function _process_subframe_($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$0 = 0, $$020628 = 0, $$020738 = 0, $$020920 = 0, $$021034 = 0, $$0212 = 0, $$022532 = 0, $$0226 = 0, $$0226$ = 0, $$0226$2 = 0, $$023014 = 0, $$023144 = 0, $$023243 = 0, $$10 = 0, $$11 = 0, $$12 = 0, $$1211 = 0, $$121333 = 0, $$1228 = 0, $$2 = 0;
 var $$2214 = 0, $$3215 = 0, $$327 = 0, $$419 = 0, $$421626 = 0, $$516 = 0, $$521718 = 0, $$6 = 0, $$621815 = 0, $$7 = 0, $$7219 = 0, $$8 = 0, $$8220 = 0, $$9221 = 0, $$lcssa = 0, $$op = 0, $$op8 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0.0, $174 = 0, $175 = 0;
 var $176 = 0.0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond5 = 0, $spec$select = 0;
 var $spec$select1 = 0, $spec$select3 = 0, $spec$select4 = 0, $spec$select6 = 0, $spec$select7 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0;
 $11 = sp + 392|0;
 $12 = sp + 260|0;
 $13 = sp;
 $14 = sp + 256|0;
 $15 = (_FLAC__stream_encoder_get_bits_per_sample($0)|0);
 $16 = ($15>>>0)>(16);
 $17 = HEAP32[283]|0;
 $18 = HEAP32[282]|0;
 $19 = $16 ? $17 : $18;
 $20 = ((($0)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 7280|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0);
 if ($24) {
  label = 3;
 } else {
  $25 = HEAP32[$3>>2]|0;
  $26 = ($25>>>0)>(3);
  if ($26) {
   $$0212 = -1;
  } else {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $27 = HEAP32[$3>>2]|0;
  $28 = HEAP32[$6>>2]|0;
  $29 = (_evaluate_verbatim_subframe_($5,$27,$4,$28)|0);
  $$0212 = $29;
 }
 $30 = HEAP32[$3>>2]|0;
 $31 = ($30>>>0)>(3);
 L6: do {
  if ($31) {
   $32 = (($4) + 4)|0;
   $33 = (($30) + -4)|0;
   $34 = $33 | 1;
   $35 = (_FLAC__bitmath_ilog2_235($34)|0);
   $36 = (($32) + ($35))|0;
   $37 = ($36>>>0)<(33);
   $38 = HEAP32[$20>>2]|0;
   if ($37) {
    $39 = ((($38)) + 7248|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ((($5)) + 16|0);
    $42 = (FUNCTION_TABLE_iiii[$40 & 15]($41,$33,$11)|0);
    $$0226 = $42;
   } else {
    $43 = ((($38)) + 7252|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ((($5)) + 16|0);
    $46 = (FUNCTION_TABLE_iiii[$44 & 15]($45,$33,$11)|0);
    $$0226 = $46;
   }
   $47 = HEAP32[$20>>2]|0;
   $48 = ((($47)) + 7272|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ($49|0)==(0);
   L12: do {
    if ($50) {
     $51 = ((($11)) + 4|0);
     $52 = +HEAPF32[$51>>2];
     $53 = $52 == 0.0;
     if ($53) {
      $54 = HEAP32[$3>>2]|0;
      $55 = ($54>>>0)>(1);
      $56 = HEAP32[$5>>2]|0;
      if ($55) {
       $$020738 = 1;$63 = $56;
       while(1) {
        $61 = (($5) + ($$020738<<2)|0);
        $62 = HEAP32[$61>>2]|0;
        $64 = ($63|0)==($62|0);
        $58 = (($$020738) + 1)|0;
        if (!($64)) {
         break L12;
        }
        $57 = HEAP32[$3>>2]|0;
        $59 = ($58>>>0)<($57>>>0);
        $60 = HEAP32[$5>>2]|0;
        if ($59) {
         $$020738 = $58;$63 = $60;
        } else {
         $$lcssa = $60;
         break;
        }
       }
      } else {
       $$lcssa = $56;
      }
      $65 = ((($6)) + 4|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = (_evaluate_constant_subframe_($$lcssa,$4,$66)|0);
      $68 = ($67>>>0)<($$0212>>>0);
      $spec$select = $68 ? $67 : $$0212;
      $spec$select1 = $68&1;
      $$10 = $spec$select1;$$11 = $spec$select;
      break L6;
     }
    }
   } while(0);
   $69 = ((($47)) + 7276|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ($70|0)==(0);
   if ($71) {
    label = 17;
   } else {
    $72 = HEAP32[$0>>2]|0;
    $73 = ((($72)) + 556|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($74|0)==(0);
    $76 = ($$0212|0)==(-1);
    $or$cond = $76 & $75;
    if ($or$cond) {
     label = 17;
    } else {
     $$2 = 0;$$3215 = $$0212;
    }
   }
   if ((label|0) == 17) {
    $77 = HEAP32[$0>>2]|0;
    $78 = ((($77)) + 568|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = ($79|0)==(0);
    $$0226$ = $80 ? $$0226 : 0;
    $$0226$2 = $80 ? $$0226 : 4;
    $81 = HEAP32[$3>>2]|0;
    $82 = ($$0226$2>>>0)<($81>>>0);
    $83 = (($81) + -1)|0;
    $$1228 = $82 ? $$0226$2 : $83;
    $84 = ($$0226$>>>0)>($$1228>>>0);
    if ($84) {
     $$2 = 0;$$3215 = $$0212;
    } else {
     $85 = (+($4>>>0));
     $86 = (($19) + -1)|0;
     $$021034 = 0;$$022532 = $$0226$;$$121333 = $$0212;
     while(1) {
      $87 = (($11) + ($$022532<<2)|0);
      $88 = +HEAPF32[$87>>2];
      $89 = !($88 >= $85);
      if ($89) {
       $90 = $88 > 0.0;
       $91 = $88;
       $92 = $91 + 0.5;
       $93 = (~~(($92))>>>0);
       $$op8 = (($93) + 1)|0;
       $94 = $90 ? $$op8 : 1;
       $95 = ($94>>>0)<($19>>>0);
       $spec$select3 = $95 ? $94 : $86;
       $96 = ($$021034|0)==(0);
       $97 = $96&1;
       $98 = (($8) + ($97<<2)|0);
       $99 = HEAP32[$98>>2]|0;
       $100 = HEAP32[$20>>2]|0;
       $101 = ((($100)) + 6848|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = ((($100)) + 6852|0);
       $104 = HEAP32[$103>>2]|0;
       $105 = HEAP32[$3>>2]|0;
       $106 = HEAP32[$0>>2]|0;
       $107 = ((($106)) + 572|0);
       $108 = HEAP32[$107>>2]|0;
       $109 = (($6) + ($97<<2)|0);
       $110 = HEAP32[$109>>2]|0;
       $111 = (($7) + ($97<<2)|0);
       $112 = HEAP32[$111>>2]|0;
       $113 = (_evaluate_fixed_subframe_($0,$5,$99,$102,$104,$105,$4,$$022532,$spec$select3,$19,$1,$2,$108,$110,$112)|0);
       $114 = ($113>>>0)<($$121333>>>0);
       $spec$select6 = $114 ? $113 : $$121333;
       $spec$select7 = $114 ? $97 : $$021034;
       $$1211 = $spec$select7;$$2214 = $spec$select6;
      } else {
       $$1211 = $$021034;$$2214 = $$121333;
      }
      $115 = (($$022532) + 1)|0;
      $116 = ($115>>>0)>($$1228>>>0);
      if ($116) {
       $$2 = $$1211;$$3215 = $$2214;
       break;
      } else {
       $$021034 = $$1211;$$022532 = $115;$$121333 = $$2214;
      }
     }
    }
   }
   $117 = HEAP32[$0>>2]|0;
   $118 = ((($117)) + 556|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = ($119|0)==(0);
   if ($120) {
    $$10 = $$2;$$11 = $$3215;
   } else {
    $121 = HEAP32[$3>>2]|0;
    $122 = ($119>>>0)<($121>>>0);
    $123 = (($121) + -1)|0;
    $storemerge = $122 ? $119 : $123;
    HEAP32[$14>>2] = $storemerge;
    $124 = ($storemerge|0)==(0);
    if ($124) {
     $$10 = $$2;$$11 = $$3215;
    } else {
     $125 = HEAP32[$0>>2]|0;
     $126 = ((($125)) + 40|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = ($127|0)==(0);
     if ($128) {
      $$10 = $$2;$$11 = $$3215;
     } else {
      $129 = (+($4>>>0));
      $130 = (($19) + -1)|0;
      $131 = ($4>>>0)<(18);
      $132 = (32 - ($4))|0;
      $$020628 = 0;$$327 = $$2;$$421626 = $$3215;
      while(1) {
       $133 = HEAP32[$20>>2]|0;
       $134 = (((($133)) + 84|0) + ($$020628<<2)|0);
       $135 = HEAP32[$134>>2]|0;
       $136 = ((($133)) + 212|0);
       $137 = HEAP32[$136>>2]|0;
       $138 = HEAP32[$3>>2]|0;
       _FLAC__lpc_window_data($5,$135,$137,$138);
       $139 = HEAP32[$20>>2]|0;
       $140 = ((($139)) + 7256|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ((($139)) + 212|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = HEAP32[$3>>2]|0;
       $145 = HEAP32[$14>>2]|0;
       $146 = (($145) + 1)|0;
       FUNCTION_TABLE_viiii[$141 & 7]($143,$144,$146,$12);
       $147 = +HEAPF32[$12>>2];
       $148 = $147 != 0.0;
       if ($148) {
        $149 = HEAP32[$20>>2]|0;
        $150 = ((($149)) + 7652|0);
        _FLAC__lpc_compute_lp_coefficients($12,$14,$150,$13);
        $151 = HEAP32[$0>>2]|0;
        $152 = ((($151)) + 568|0);
        $153 = HEAP32[$152>>2]|0;
        $154 = ($153|0)==(0);
        if ($154) {
         $155 = HEAP32[$14>>2]|0;
         $156 = HEAP32[$3>>2]|0;
         $157 = ((($151)) + 564|0);
         $158 = HEAP32[$157>>2]|0;
         $159 = ($158|0)==(0);
         if ($159) {
          $160 = ((($151)) + 560|0);
          $161 = HEAP32[$160>>2]|0;
          $163 = $161;
         } else {
          $163 = 5;
         }
         $162 = (($163) + ($4))|0;
         $164 = (_FLAC__lpc_compute_best_order($13,$155,$156,$162)|0);
         HEAP32[$14>>2] = $164;
         $$0 = $164;
        } else {
         $$0 = 1;
        }
        $165 = HEAP32[$14>>2]|0;
        $166 = HEAP32[$3>>2]|0;
        $167 = ($165>>>0)<($166>>>0);
        if (!($167)) {
         $168 = (($166) + -1)|0;
         HEAP32[$14>>2] = $168;
        }
        $169 = HEAP32[$14>>2]|0;
        $170 = ($$0>>>0)>($169>>>0);
        if ($170) {
         $$8 = $$327;$$9221 = $$421626;
        } else {
         $$020920 = $$0;$$419 = $$327;$$521718 = $$421626;
         while(1) {
          $171 = (($$020920) + -1)|0;
          $172 = (($13) + ($171<<3)|0);
          $173 = +HEAPF64[$172>>3];
          $174 = HEAP32[$3>>2]|0;
          $175 = (($174) - ($$020920))|0;
          $176 = (+_FLAC__lpc_compute_expected_bits_per_residual_sample($173,$175));
          $177 = !($176 >= $129);
          L52: do {
           if ($177) {
            $178 = $176 > 0.0;
            $179 = $176 + 0.5;
            $180 = (~~(($179))>>>0);
            $$op = (($180) + 1)|0;
            $181 = $178 ? $$op : 1;
            $182 = ($181>>>0)<($19>>>0);
            $spec$select4 = $182 ? $181 : $130;
            $183 = HEAP32[$0>>2]|0;
            $184 = ((($183)) + 564|0);
            $185 = HEAP32[$184>>2]|0;
            $186 = ($185|0)==(0);
            do {
             if ($186) {
              $191 = ((($183)) + 560|0);
              $192 = HEAP32[$191>>2]|0;
              $$023144 = $192;$$023243 = $192;
             } else {
              if (!($131)) {
               $$023144 = 15;$$023243 = 5;
               break;
              }
              $187 = (_FLAC__bitmath_ilog2_235($$020920)|0);
              $188 = (($132) - ($187))|0;
              $189 = ($188>>>0)<(15);
              if ($189) {
               $190 = ($188>>>0)>(5);
               if ($190) {
                $193 = $188;
               } else {
                $$023144 = 5;$$023243 = 5;
                break;
               }
              } else {
               $193 = 15;
              }
              $194 = ($193>>>0)<(5);
              if ($194) {
               $$7 = $$419;$$8220 = $$521718;
               break L52;
              } else {
               $$023144 = $193;$$023243 = 5;
              }
             }
            } while(0);
            $$023014 = $$023243;$$516 = $$419;$$621815 = $$521718;
            while(1) {
             $195 = ($$516|0)==(0);
             $196 = $195&1;
             $197 = (($8) + ($196<<2)|0);
             $198 = HEAP32[$197>>2]|0;
             $199 = HEAP32[$20>>2]|0;
             $200 = ((($199)) + 6848|0);
             $201 = HEAP32[$200>>2]|0;
             $202 = ((($199)) + 6852|0);
             $203 = HEAP32[$202>>2]|0;
             $204 = (((($199)) + 7652|0) + ($171<<7)|0);
             $205 = HEAP32[$3>>2]|0;
             $206 = HEAP32[$0>>2]|0;
             $207 = ((($206)) + 572|0);
             $208 = HEAP32[$207>>2]|0;
             $209 = (($6) + ($196<<2)|0);
             $210 = HEAP32[$209>>2]|0;
             $211 = (($7) + ($196<<2)|0);
             $212 = HEAP32[$211>>2]|0;
             $213 = (_evaluate_lpc_subframe_($0,$5,$198,$201,$203,$204,$205,$4,$$020920,$$023014,$spec$select4,$19,$1,$2,$208,$210,$212)|0);
             $214 = ($213|0)!=(0);
             $215 = ($213>>>0)<($$621815>>>0);
             $or$cond5 = $214 & $215;
             $$7219 = $or$cond5 ? $213 : $$621815;
             $$6 = $or$cond5 ? $196 : $$516;
             $216 = (($$023014) + 1)|0;
             $217 = ($216>>>0)>($$023144>>>0);
             if ($217) {
              $$7 = $$6;$$8220 = $$7219;
              break;
             } else {
              $$023014 = $216;$$516 = $$6;$$621815 = $$7219;
             }
            }
           } else {
            $$7 = $$419;$$8220 = $$521718;
           }
          } while(0);
          $218 = (($$020920) + 1)|0;
          $219 = HEAP32[$14>>2]|0;
          $220 = ($218>>>0)>($219>>>0);
          if ($220) {
           $$8 = $$7;$$9221 = $$8220;
           break;
          } else {
           $$020920 = $218;$$419 = $$7;$$521718 = $$8220;
          }
         }
        }
       } else {
        $$8 = $$327;$$9221 = $$421626;
       }
       $221 = (($$020628) + 1)|0;
       $222 = HEAP32[$0>>2]|0;
       $223 = ((($222)) + 40|0);
       $224 = HEAP32[$223>>2]|0;
       $225 = ($221>>>0)<($224>>>0);
       if ($225) {
        $$020628 = $221;$$327 = $$8;$$421626 = $$9221;
       } else {
        $$10 = $$8;$$11 = $$9221;
        break;
       }
      }
     }
    }
   }
  } else {
   $$10 = 0;$$11 = $$0212;
  }
 } while(0);
 $226 = ($$11|0)==(-1);
 if (!($226)) {
  $$12 = $$11;
  HEAP32[$9>>2] = $$10;
  HEAP32[$10>>2] = $$12;
  STACKTOP = sp;return;
 }
 $227 = (($6) + ($$10<<2)|0);
 $228 = HEAP32[$3>>2]|0;
 $229 = HEAP32[$227>>2]|0;
 $230 = (_evaluate_verbatim_subframe_($5,$228,$4,$229)|0);
 $$12 = $230;
 HEAP32[$9>>2] = $$10;
 HEAP32[$10>>2] = $$12;
 STACKTOP = sp;return;
}
function _add_subframe_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = HEAP32[$3>>2]|0;
 switch ($5|0) {
 case 0:  {
  $6 = ((($3)) + 4|0);
  $7 = ((($3)) + 288|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_FLAC__subframe_add_constant($6,$2,$8,$4)|0);
  $10 = ($9|0)==(0);
  if (!($10)) {
   $$0 = 1;
   return ($$0|0);
  }
  $11 = HEAP32[$0>>2]|0;
  HEAP32[$11>>2] = 7;
  $$0 = 0;
  return ($$0|0);
  break;
 }
 case 2:  {
  $12 = ((($3)) + 4|0);
  $13 = ((($3)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($1) - ($14))|0;
  $16 = ((($3)) + 288|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (_FLAC__subframe_add_fixed($12,$15,$2,$17,$4)|0);
  $19 = ($18|0)==(0);
  if (!($19)) {
   $$0 = 1;
   return ($$0|0);
  }
  $20 = HEAP32[$0>>2]|0;
  HEAP32[$20>>2] = 7;
  $$0 = 0;
  return ($$0|0);
  break;
 }
 case 3:  {
  $21 = ((($3)) + 4|0);
  $22 = ((($3)) + 16|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($1) - ($23))|0;
  $25 = ((($3)) + 288|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (_FLAC__subframe_add_lpc($21,$24,$2,$26,$4)|0);
  $28 = ($27|0)==(0);
  if (!($28)) {
   $$0 = 1;
   return ($$0|0);
  }
  $29 = HEAP32[$0>>2]|0;
  HEAP32[$29>>2] = 7;
  $$0 = 0;
  return ($$0|0);
  break;
 }
 case 1:  {
  $30 = ((($3)) + 4|0);
  $31 = ((($3)) + 288|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (_FLAC__subframe_add_verbatim($30,$1,$2,$32,$4)|0);
  $34 = ($33|0)==(0);
  if (!($34)) {
   $$0 = 1;
   return ($$0|0);
  }
  $35 = HEAP32[$0>>2]|0;
  HEAP32[$35>>2] = 7;
  $$0 = 0;
  return ($$0|0);
  break;
 }
 default: {
  $$0 = 1;
  return ($$0|0);
 }
 }
 return (0)|0;
}
function _FLAC__stream_encoder_get_bits_per_sample($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 return ($3|0);
}
function _evaluate_verbatim_subframe_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$3>>2] = 1;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = $0;
 $5 = HEAP32[287]|0;
 $6 = HEAP32[286]|0;
 $7 = HEAP32[287]|0;
 $8 = ((($3)) + 288|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = Math_imul($2, $1)|0;
 $11 = (($5) + ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = (($12) + ($7))|0;
 $14 = (($13) + ($9))|0;
 return ($14|0);
}
function _FLAC__bitmath_ilog2_235($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_FLAC__clz_uint32_236($0)|0);
 $2 = $1 ^ 31;
 return ($2|0);
}
function _evaluate_constant_subframe_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = 0;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = $0;
 $4 = HEAP32[287]|0;
 $5 = HEAP32[286]|0;
 $6 = HEAP32[287]|0;
 $7 = ((($2)) + 288|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($4) + ($1))|0;
 $10 = (($9) + ($5))|0;
 $11 = (($10) + ($6))|0;
 $12 = (($11) + ($8))|0;
 return ($12|0);
}
function _evaluate_fixed_subframe_($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 var $$01 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $15 = (($5) - ($7))|0;
 $16 = (($1) + ($7<<2)|0);
 _FLAC__fixed_compute_residual($16,$15,$7,$2);
 HEAP32[$13>>2] = 2;
 $17 = ((($13)) + 4|0);
 HEAP32[$17>>2] = 0;
 $18 = ((($13)) + 12|0);
 HEAP32[$18>>2] = $14;
 $19 = ((($13)) + 36|0);
 HEAP32[$19>>2] = $2;
 $20 = ((($0)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (_find_best_partition_order_($21,$2,$3,$4,$15,$7,$8,$9,$10,$11,$6,$12,$17)|0);
 $23 = ((($13)) + 16|0);
 HEAP32[$23>>2] = $7;
 $24 = ($7|0)==(0);
 if (!($24)) {
  $25 = ((($13)) + 20|0);
  $$01 = 0;
  while(1) {
   $26 = (($1) + ($$01<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($25) + ($$01<<2)|0);
   HEAP32[$28>>2] = $27;
   $29 = (($$01) + 1)|0;
   $exitcond = ($29|0)==($7|0);
   if ($exitcond) {
    break;
   } else {
    $$01 = $29;
   }
  }
 }
 $30 = HEAP32[287]|0;
 $31 = HEAP32[286]|0;
 $32 = HEAP32[287]|0;
 $33 = ((($13)) + 288|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = Math_imul($7, $6)|0;
 $36 = (($22) + ($35))|0;
 $37 = (($36) + ($30))|0;
 $38 = (($37) + ($31))|0;
 $39 = (($38) + ($32))|0;
 $40 = (($39) + ($34))|0;
 return ($40|0);
}
function _evaluate_lpc_subframe_($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 $15 = $15|0;
 $16 = $16|0;
 var $$0 = 0, $$084 = 0, $$0851 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $exitcond = 0, $or$cond = 0, $spec$select = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $17 = sp + 8|0;
 $18 = sp;
 $19 = (($6) - ($8))|0;
 $20 = ($7>>>0)<(18);
 if ($20) {
  $21 = (32 - ($7))|0;
  $22 = (_FLAC__bitmath_ilog2_235($8)|0);
  $23 = (($21) - ($22))|0;
  $24 = ($23>>>0)>($9>>>0);
  $spec$select = $24 ? $9 : $23;
  $$084 = $spec$select;
 } else {
  $$084 = $9;
 }
 $25 = (_FLAC__lpc_quantize_coefficients($5,$8,$$084,$17,$18)|0);
 $26 = ($25|0)==(0);
 if (!($26)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = (($$084) + ($7))|0;
 $28 = (_FLAC__bitmath_ilog2_235($8)|0);
 $29 = (($28) + ($27))|0;
 $30 = ($29>>>0)<(33);
 do {
  if ($30) {
   $31 = ($7>>>0)<(17);
   $32 = ($$084>>>0)<(17);
   $or$cond = $31 & $32;
   $33 = ((($0)) + 4|0);
   $34 = HEAP32[$33>>2]|0;
   if ($or$cond) {
    $35 = ((($34)) + 7268|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (($1) + ($8<<2)|0);
    $38 = HEAP32[$18>>2]|0;
    FUNCTION_TABLE_viiiiii[$36 & 15]($37,$19,$17,$8,$38,$2);
    break;
   } else {
    $39 = ((($34)) + 7260|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (($1) + ($8<<2)|0);
    $42 = HEAP32[$18>>2]|0;
    FUNCTION_TABLE_viiiiii[$40 & 15]($41,$19,$17,$8,$42,$2);
    break;
   }
  } else {
   $43 = ((($0)) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ((($44)) + 7264|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (($1) + ($8<<2)|0);
   $48 = HEAP32[$18>>2]|0;
   FUNCTION_TABLE_viiiiii[$46 & 15]($47,$19,$17,$8,$48,$2);
  }
 } while(0);
 HEAP32[$15>>2] = 3;
 $49 = ((($15)) + 4|0);
 HEAP32[$49>>2] = 0;
 $50 = ((($15)) + 12|0);
 HEAP32[$50>>2] = $16;
 $51 = ((($15)) + 284|0);
 HEAP32[$51>>2] = $2;
 $52 = ((($0)) + 4|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (_find_best_partition_order_($53,$2,$3,$4,$19,$8,$10,$11,$12,$13,$7,$14,$49)|0);
 $55 = ((($15)) + 16|0);
 HEAP32[$55>>2] = $8;
 $56 = ((($15)) + 20|0);
 HEAP32[$56>>2] = $$084;
 $57 = HEAP32[$18>>2]|0;
 $58 = ((($15)) + 24|0);
 HEAP32[$58>>2] = $57;
 $59 = ((($15)) + 28|0);
 dest=$59; src=$17; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $60 = ($8|0)==(0);
 if (!($60)) {
  $$0851 = 0;
  while(1) {
   $61 = (($1) + ($$0851<<2)|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = (((($15)) + 156|0) + ($$0851<<2)|0);
   HEAP32[$63>>2] = $62;
   $64 = (($$0851) + 1)|0;
   $exitcond = ($64|0)==($8|0);
   if ($exitcond) {
    break;
   } else {
    $$0851 = $64;
   }
  }
 }
 $65 = HEAP32[287]|0;
 $66 = HEAP32[286]|0;
 $67 = HEAP32[287]|0;
 $68 = ((($15)) + 288|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[284]|0;
 $71 = HEAP32[285]|0;
 $72 = Math_imul($27, $8)|0;
 $73 = (($54) + ($72))|0;
 $74 = (($73) + ($65))|0;
 $75 = (($74) + ($66))|0;
 $76 = (($75) + ($67))|0;
 $77 = (($76) + ($69))|0;
 $78 = (($77) + ($70))|0;
 $79 = (($78) + ($71))|0;
 $$0 = $79;
 STACKTOP = sp;return ($$0|0);
}
function _find_best_partition_order_($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 var $$02 = 0, $$0837 = 0, $$0846 = 0, $$085$lcssa = 0, $$085$lcssa16 = 0, $$0855 = 0, $$086$lcssa = 0, $$086$lcssa15 = 0, $$0864 = 0, $$088$lcssa = 0, $$088$lcssa14 = 0, $$0883 = 0, $$1 = 0, $$187 = 0, $$189 = 0, $$in = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $13 = sp;
 $14 = (($5) + ($4))|0;
 $15 = (_FLAC__format_get_max_rice_partition_order_from_blocksize_limited_max_and_predictor_order($9,$14,$5)|0);
 $16 = ($15>>>0)>($8>>>0);
 $17 = $16 ? $8 : $15;
 $18 = ((($0)) + 7244|0);
 $19 = HEAP32[$18>>2]|0;
 FUNCTION_TABLE_viiiiiii[$19 & 7]($1,$2,$4,$5,$17,$15,$10);
 $20 = ($11|0)!=(0);
 if ($20) {
  _precompute_partition_info_escapes_($1,$3,$4,$5,$17,$15);
 }
 $21 = ($15|0)<($17|0);
 if ($21) {
  $22 = ((($12)) + 4|0);
  HEAP32[$22>>2] = 0;
  $$085$lcssa16 = 0;$$086$lcssa15 = 0;$$088$lcssa14 = 0;$40 = 6;
 } else {
  $$0837 = 0;$$0846 = $15;$$0855 = 0;$$0864 = 0;$$0883 = 0;
  while(1) {
   $23 = (($2) + ($$0837<<3)|0);
   $24 = (($3) + ($$0837<<2)|0);
   $25 = ($$0864|0)==(0);
   $26 = $25&1;
   $27 = (((($0)) + 11748|0) + (($26*12)|0)|0);
   $28 = (_set_partitioned_rice_($23,$24,$4,$5,$6,$7,$$0846,$11,$27,$13)|0);
   $29 = ($28|0)==(0);
   if ($29) {
    $$085$lcssa = $$0855;$$086$lcssa = $$0864;$$088$lcssa = $$0883;
    break;
   }
   $30 = 1 << $$0846;
   $31 = (($$0837) + ($30))|0;
   $32 = HEAP32[$13>>2]|0;
   $33 = (($$0883) + -1)|0;
   $34 = ($33>>>0)>=($32>>>0);
   $$189 = $34 ? $32 : $$0883;
   $$187 = $34 ? $26 : $$0864;
   $$1 = $34 ? $$0846 : $$0855;
   $35 = (($$0846) + -1)|0;
   $36 = ($$0846|0)>($17|0);
   if ($36) {
    $$0837 = $31;$$0846 = $35;$$0855 = $$1;$$0864 = $$187;$$0883 = $$189;
   } else {
    $$085$lcssa = $$1;$$086$lcssa = $$187;$$088$lcssa = $$189;
    break;
   }
  }
  $37 = ((($12)) + 4|0);
  HEAP32[$37>>2] = $$085$lcssa;
  $38 = ($$085$lcssa>>>0)>(6);
  $spec$select = $38 ? $$085$lcssa : 6;
  $$085$lcssa16 = $$085$lcssa;$$086$lcssa15 = $$086$lcssa;$$088$lcssa14 = $$088$lcssa;$40 = $spec$select;
 }
 $$in = ((($12)) + 8|0);
 $39 = HEAP32[$$in>>2]|0;
 (_FLAC__format_entropy_coding_method_partitioned_rice_contents_ensure_size($39,$40)|0);
 $41 = HEAP32[$39>>2]|0;
 $42 = (((($0)) + 11748|0) + (($$086$lcssa15*12)|0)|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = 1 << $$085$lcssa16;
 $45 = $44 << 2;
 _memcpy(($41|0),($43|0),($45|0))|0;
 if ($20) {
  $46 = (((((($0)) + 11748|0) + (($$086$lcssa15*12)|0)|0)) + 4|0);
  $47 = ((($39)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = HEAP32[$46>>2]|0;
  _memcpy(($48|0),($49|0),($45|0))|0;
 }
 $50 = HEAP32[$39>>2]|0;
 $51 = HEAP32[282]|0;
 $$02 = 0;
 while(1) {
  $54 = (($50) + ($$02<<2)|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($55>>>0)<($51>>>0);
  $52 = (($$02) + 1)|0;
  if (!($56)) {
   break;
  }
  $53 = ($52>>>0)<($44>>>0);
  if ($53) {
   $$02 = $52;
  } else {
   label = 15;
   break;
  }
 }
 if ((label|0) == 15) {
  STACKTOP = sp;return ($$088$lcssa14|0);
 }
 HEAP32[$12>>2] = 1;
 STACKTOP = sp;return ($$088$lcssa14|0);
}
function _precompute_partition_info_escapes_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$07790 = 0, $$07893 = 0, $$079 = 0, $$08197 = 0, $$083103 = 0, $$08695 = 0, $$087102 = 0, $$094 = 0, $$094$in = 0, $$18092 = 0, $$182 = 0, $$184$lcssa106 = 0, $$18496 = 0, $$189 = 0, $$288 = 0, $$lobit = 0, $$pn = 0, $10 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ($5|0)>(-1);
 if ($6) {
  $7 = (($3) + ($2))|0;
  $8 = 1 << $5;
  $9 = $7 >>> $5;
  $$083103 = 0;$$087102 = 0;
  while(1) {
   $10 = ($$087102|0)==(0);
   $11 = $10 ? $3 : 0;
   $spec$select = (($9) - ($11))|0;
   $12 = ($spec$select|0)==(0);
   if ($12) {
    $$184$lcssa106 = $$083103;$23 = 1;
   } else {
    $13 = (($9) + ($$083103))|0;
    $$08197 = 0;$$08695 = 0;$$18496 = $$083103;
    while(1) {
     $14 = (($$18496) + 1)|0;
     $15 = (($0) + ($$18496<<2)|0);
     $16 = HEAP32[$15>>2]|0;
     $$lobit = $16 >> 31;
     $$pn = $$lobit ^ $16;
     $$182 = $$pn | $$08197;
     $17 = (($$08695) + 1)|0;
     $exitcond = ($17|0)==($spec$select|0);
     if ($exitcond) {
      break;
     } else {
      $$08197 = $$182;$$08695 = $17;$$18496 = $14;
     }
    }
    $18 = (($13) - ($11))|0;
    $19 = ($$182|0)==(0);
    if ($19) {
     $$184$lcssa106 = $18;$23 = 1;
    } else {
     $20 = (_FLAC__bitmath_ilog2_235($$182)|0);
     $21 = (($20) + 2)|0;
     $$184$lcssa106 = $18;$23 = $21;
    }
   }
   $22 = (($1) + ($$087102<<2)|0);
   HEAP32[$22>>2] = $23;
   $24 = (($$087102) + 1)|0;
   $25 = ($24>>>0)<($8>>>0);
   if ($25) {
    $$083103 = $$184$lcssa106;$$087102 = $24;
   } else {
    $$079 = $8;
    break;
   }
  }
 } else {
  $$079 = 0;
 }
 $26 = ($5|0)>($4|0);
 if (!($26)) {
  return;
 }
 $$07893 = 0;$$094$in = $5;$$18092 = $$079;
 while(1) {
  $$094 = (($$094$in) + -1)|0;
  $27 = 1 << $$094;
  $$07790 = 0;$$189 = $$07893;$$288 = $$18092;
  while(1) {
   $28 = (($1) + ($$189<<2)|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($$189) + 1)|0;
   $31 = (($1) + ($30<<2)|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($29>>>0)>($32>>>0);
   $$ = $33 ? $29 : $32;
   $34 = (($1) + ($$288<<2)|0);
   HEAP32[$34>>2] = $$;
   $35 = (($$189) + 2)|0;
   $36 = (($$288) + 1)|0;
   $37 = (($$07790) + 1)|0;
   $38 = ($37>>>0)<($27>>>0);
   if ($38) {
    $$07790 = $37;$$189 = $35;$$288 = $36;
   } else {
    break;
   }
  }
  $39 = ($$094|0)>($4|0);
  if ($39) {
   $$07893 = $35;$$094$in = $$094;$$18092 = $36;
  } else {
   break;
  }
 }
 return;
}
function _set_partitioned_rice_($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$ = 0, $$0126$lcssa = 0, $$012615 = 0, $$0129$lcssa = 0, $$012914 = 0, $$013626 = 0, $$014624 = 0, $$1 = 0, $$112720 = 0, $$113019 = 0, $$1138 = 0, $$1142 = 0, $$1147 = 0, $$214325 = 0, $$28 = 0, $$3 = 0, $$3140 = 0, $$3144 = 0, $$3144$ = 0, $$411 = 0;
 var $$4145 = 0, $$5 = 0, $$51 = 0, $$52 = 0, $$53 = 0, $$mux = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0;
 var $or$cond = 0, $spec$select = 0, $spec$select$ = 0, $spec$select2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $10 = HEAP32[288]|0;
 $11 = HEAP32[284]|0;
 $12 = (($11) + ($10))|0;
 $13 = ($6>>>0)>(6);
 $14 = $13 ? $6 : 6;
 (_FLAC__format_entropy_coding_method_partitioned_rice_contents_ensure_size($8,$14)|0);
 $15 = HEAP32[$8>>2]|0;
 $16 = ((($8)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($6|0)==(0);
 L1: do {
  if ($18) {
   $19 = $0;
   $20 = $19;
   $21 = HEAP32[$20>>2]|0;
   $22 = (($19) + 4)|0;
   $23 = $22;
   $24 = HEAP32[$23>>2]|0;
   $25 = (_count_rice_bits_in_partition_($4,$2,$21,$24)|0);
   $26 = ($25|0)==(-1);
   $spec$select = $26 ? 0 : $4;
   $27 = ($7|0)==(0);
   if ($27) {
    $$1138 = $25;$$1142 = $spec$select;
   } else {
    $28 = HEAP32[285]|0;
    $29 = HEAP32[285]|0;
    $30 = (($29) + ($28))|0;
    $31 = HEAP32[$1>>2]|0;
    $32 = Math_imul($31, $2)|0;
    $33 = (($30) + ($32))|0;
    $34 = ($33>>>0)>($25>>>0);
    $$ = $34 ? 0 : $31;
    $spec$select$ = $34 ? $spec$select : 0;
    $$51 = $34 ? $25 : $33;
    HEAP32[$17>>2] = $$;
    $$1138 = $$51;$$1142 = $spec$select$;
   }
   HEAP32[$15>>2] = $$1142;
   $35 = (($$1138) + ($12))|0;
   $$1147 = $35;
  } else {
   $36 = 1 << $6;
   $37 = (($3) + ($2))|0;
   $38 = $37 >>> $6;
   $39 = ($38>>>0)>($3>>>0);
   $40 = (($5) + -1)|0;
   $41 = ($7|0)==(0);
   $42 = HEAP32[285]|0;
   $43 = HEAP32[285]|0;
   $44 = (($43) + ($42))|0;
   $$013626 = 0;$$014624 = $12;$$214325 = 0;
   while(1) {
    $45 = ($$013626|0)!=(0);
    $brmerge = $45 | $39;
    $46 = $45 ? 0 : $3;
    $$mux = (($38) - ($46))|0;
    if (!($brmerge)) {
     $$1 = 0;
     break;
    }
    $47 = (($0) + ($$013626<<3)|0);
    $48 = $47;
    $49 = $48;
    $50 = HEAP32[$49>>2]|0;
    $51 = (($48) + 4)|0;
    $52 = $51;
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53>>>0)<(0);
    $55 = ($50>>>0)<(268435457);
    $56 = ($53|0)==(0);
    $57 = $56 & $55;
    $58 = $54 | $57;
    if ($58) {
     $59 = $$mux << 3;
     $60 = ($59>>>0)<($50>>>0);
     if ($60) {
      $$012615 = $$mux;$$012914 = 0;
      while(1) {
       $61 = (($$012914) + 4)|0;
       $62 = $$012615 << 4;
       $63 = $$012615 << 7;
       $64 = ($63>>>0)<($50>>>0);
       if ($64) {
        $$012615 = $62;$$012914 = $61;
       } else {
        $$0126$lcssa = $62;$$0129$lcssa = $61;
        break;
       }
      }
     } else {
      $$0126$lcssa = $$mux;$$0129$lcssa = 0;
     }
     $65 = ($$0126$lcssa>>>0)<($50>>>0);
     if ($65) {
      $$112720 = $$0126$lcssa;$$113019 = $$0129$lcssa;
      while(1) {
       $66 = (($$113019) + 1)|0;
       $67 = $$112720 << 1;
       $68 = ($67>>>0)<($50>>>0);
       if ($68) {
        $$112720 = $67;$$113019 = $66;
       } else {
        $$5 = $66;
        break;
       }
      }
     } else {
      $$5 = $$0129$lcssa;
     }
    } else {
     $69 = ($53>>>0)<(16777216);
     $70 = ($50>>>0)<(1);
     $71 = ($53|0)==(16777216);
     $72 = $71 & $70;
     $73 = $69 | $72;
     $74 = (_bitshift64Shl(($$mux|0),0,7)|0);
     $75 = (getTempRet0() | 0);
     $76 = ($75>>>0)<($53>>>0);
     $77 = ($74>>>0)<($50>>>0);
     $78 = ($75|0)==($53|0);
     $79 = $78 & $77;
     $80 = $76 | $79;
     $or$cond = $73 & $80;
     if ($or$cond) {
      $$28 = 0;$82 = $$mux;$83 = 0;
      while(1) {
       $81 = (($$28) + 8)|0;
       $84 = (_bitshift64Shl(($82|0),($83|0),8)|0);
       $85 = (getTempRet0() | 0);
       $86 = (_bitshift64Shl(($82|0),($83|0),15)|0);
       $87 = (getTempRet0() | 0);
       $88 = ($87>>>0)<($53>>>0);
       $89 = ($86>>>0)<($50>>>0);
       $90 = ($87|0)==($53|0);
       $91 = $90 & $89;
       $92 = $88 | $91;
       if ($92) {
        $$28 = $81;$82 = $84;$83 = $85;
       } else {
        $$3 = $81;$93 = $85;$95 = $84;
        break;
       }
      }
     } else {
      $$3 = 0;$93 = 0;$95 = $$mux;
     }
     $94 = ($93>>>0)<($53>>>0);
     $96 = ($95>>>0)<($50>>>0);
     $97 = ($93|0)==($53|0);
     $98 = $97 & $96;
     $99 = $94 | $98;
     if ($99) {
      $$411 = $$3;$101 = $95;$102 = $93;
      while(1) {
       $100 = (($$411) + 1)|0;
       $103 = (_bitshift64Shl(($101|0),($102|0),1)|0);
       $104 = (getTempRet0() | 0);
       $105 = ($104>>>0)<($53>>>0);
       $106 = ($103>>>0)<($50>>>0);
       $107 = ($104|0)==($53|0);
       $108 = $107 & $106;
       $109 = $105 | $108;
       if ($109) {
        $$411 = $100;$101 = $103;$102 = $104;
       } else {
        $$5 = $100;
        break;
       }
      }
     } else {
      $$5 = $$3;
     }
    }
    $110 = ($$5>>>0)<($5>>>0);
    $spec$select2 = $110 ? $$5 : $40;
    $111 = (_count_rice_bits_in_partition_($spec$select2,$$mux,$50,$53)|0);
    $112 = ($111|0)==(-1);
    $$3144 = $112 ? $$214325 : $spec$select2;
    if ($41) {
     $$3140 = $111;$$4145 = $$3144;
    } else {
     $113 = (($1) + ($$013626<<2)|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = Math_imul($114, $$mux)|0;
     $116 = (($44) + ($115))|0;
     $117 = ($116>>>0)>($111>>>0);
     $118 = (($17) + ($$013626<<2)|0);
     $$52 = $117 ? 0 : $114;
     $$3144$ = $117 ? $$3144 : 0;
     $$53 = $117 ? $111 : $116;
     HEAP32[$118>>2] = $$52;
     $$3140 = $$53;$$4145 = $$3144$;
    }
    $119 = (($15) + ($$013626<<2)|0);
    HEAP32[$119>>2] = $$4145;
    $120 = (($$3140) + ($$014624))|0;
    $121 = (($$013626) + 1)|0;
    $122 = ($121>>>0)<($36>>>0);
    if ($122) {
     $$013626 = $121;$$014624 = $120;$$214325 = $$4145;
    } else {
     $$1147 = $120;
     break L1;
    }
   }
   return ($$1|0);
  }
 } while(0);
 HEAP32[$9>>2] = $$1147;
 $$1 = 1;
 return ($$1|0);
}
function _count_rice_bits_in_partition_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[284]|0;
 $5 = (($0) + 1)|0;
 $6 = Math_imul($5, $1)|0;
 $7 = ($0|0)==(0);
 if ($7) {
  $11 = $2 << 1;
  $16 = $11;
 } else {
  $8 = (($0) + -1)|0;
  $9 = (_bitshift64Lshr(($2|0),($3|0),($8|0))|0);
  $10 = (getTempRet0() | 0);
  $16 = $9;
 }
 $12 = $1 >>> 1;
 $13 = (($6) - ($12))|0;
 $14 = (($13) + ($4))|0;
 $15 = (($14) + ($16))|0;
 return ($15|0);
}
function _FLAC__clz_uint32_236($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (Math_clz32(($0|0))|0);
 return ($1|0);
}
function _FLAC__stream_encoder_init_stream($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = (_init_stream_internal__237($0,0,$1,$2,$3,$4,$5,0)|0);
 return ($6|0);
}
function _init_stream_internal__237($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$ = 0, $$0286355 = 0, $$0289350 = 0, $$0292349 = 0, $$0295$lcssa = 0, $$0295348 = 0, $$0298347 = 0, $$0301346 = 0, $$1290 = 0, $$1293 = 0, $$1296 = 0, $$1299 = 0, $$1302342 = 0, $$3 = 0, $$3304336 = 0, $$383 = 0, $$384 = 0, $$4332 = 0, $$6326 = 0, $$7325 = 0;
 var $$lcssa = 0, $$lcssa319 = 0, $$lcssa322 = 0, $$off = 0, $$off314 = 0, $$off315 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0.0, $267 = 0.0, $268 = 0, $269 = 0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $spec$select = 0, $spec$select$sink = 0, $spec$store$select = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $8 = sp;
 $9 = HEAP32[$0>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(1);
 if (!($11)) {
  $$3 = 13;
  STACKTOP = sp;return ($$3|0);
 }
 $12 = ($7|0)==(0);
 if (!($12)) {
  $$3 = 2;
  STACKTOP = sp;return ($$3|0);
 }
 $13 = ($2|0)==(0|0);
 if ($13) {
  $$3 = 3;
  STACKTOP = sp;return ($$3|0);
 }
 $14 = ($3|0)!=(0|0);
 $15 = ($4|0)==(0|0);
 $or$cond = $14 & $15;
 if ($or$cond) {
  $$3 = 3;
  STACKTOP = sp;return ($$3|0);
 }
 $16 = ((($9)) + 24|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + -1)|0;
 $19 = ($18>>>0)>(7);
 if ($19) {
  $$3 = 4;
  STACKTOP = sp;return ($$3|0);
 }
 $20 = ($17|0)==(2);
 $21 = ((($9)) + 16|0);
 if ($20) {
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(0);
  if ($23) {
   label = 9;
  }
 } else {
  HEAP32[$21>>2] = 0;
  label = 9;
 }
 if ((label|0) == 9) {
  $24 = ((($9)) + 20|0);
  HEAP32[$24>>2] = 0;
 }
 $25 = ((($9)) + 28|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26>>>0)>(31);
 if ($27) {
  HEAP32[$21>>2] = 0;
  $$3 = 5;
  STACKTOP = sp;return ($$3|0);
 }
 $$off = (($26) + -4)|0;
 $28 = ($$off>>>0)>(20);
 if ($28) {
  $$3 = 5;
  STACKTOP = sp;return ($$3|0);
 }
 $29 = ((($9)) + 32|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (_FLAC__format_sample_rate_is_valid($30)|0);
 $32 = ($31|0)==(0);
 if ($32) {
  $$3 = 6;
  STACKTOP = sp;return ($$3|0);
 }
 $33 = HEAP32[$0>>2]|0;
 $34 = ((($33)) + 36|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)==(0);
 if ($36) {
  $37 = ((($33)) + 556|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)==(0);
  $$ = $39 ? 1152 : 4096;
  HEAP32[$34>>2] = $$;
  $44 = $$;
 } else {
  $$off314 = (($35) + -16)|0;
  $40 = ($$off314>>>0)>(65519);
  if ($40) {
   $$3 = 7;
   STACKTOP = sp;return ($$3|0);
  } else {
   $44 = $35;
  }
 }
 $41 = ((($33)) + 556|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42>>>0)>(32);
 if ($43) {
  $$3 = 8;
  STACKTOP = sp;return ($$3|0);
 }
 $45 = ($44>>>0)<($42>>>0);
 if ($45) {
  $$3 = 10;
  STACKTOP = sp;return ($$3|0);
 }
 $46 = ((($33)) + 560|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)==(0);
 if ($48) {
  $49 = ((($33)) + 28|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($50>>>0)<(16);
  do {
   if ($51) {
    $52 = $50 >>> 1;
    $53 = (($52) + 2)|0;
    $54 = ($53>>>0)>(5);
    $spec$select = $54 ? $53 : 5;
    $spec$select$sink = $spec$select;
   } else {
    $55 = ($50|0)==(16);
    if (!($55)) {
     $62 = ($44>>>0)<(385);
     if ($62) {
      $spec$select$sink = 13;
      break;
     }
     $63 = ($44>>>0)<(1153);
     $$384 = $63 ? 14 : 15;
     $spec$select$sink = $$384;
     break;
    }
    $56 = ($44>>>0)<(193);
    if ($56) {
     $spec$select$sink = 7;
    } else {
     $57 = ($44>>>0)<(385);
     if ($57) {
      $spec$select$sink = 8;
     } else {
      $58 = ($44>>>0)<(577);
      if ($58) {
       $spec$select$sink = 9;
      } else {
       $59 = ($44>>>0)<(1153);
       if ($59) {
        $spec$select$sink = 10;
        break;
       }
       $60 = ($44>>>0)<(2305);
       if ($60) {
        $spec$select$sink = 11;
        break;
       }
       $61 = ($44>>>0)<(4609);
       $$383 = $61 ? 12 : 13;
       $spec$select$sink = $$383;
      }
     }
    }
   }
  } while(0);
  HEAP32[$46>>2] = $spec$select$sink;
 } else {
  $$off315 = (($47) + -5)|0;
  $64 = ($$off315>>>0)>(10);
  if ($64) {
   $$3 = 9;
   STACKTOP = sp;return ($$3|0);
  }
 }
 $65 = ((($33)) + 8|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ($66|0)==(0);
 do {
  if (!($67)) {
   $68 = ((($33)) + 32|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = (_FLAC__format_blocksize_is_subset($44,$69)|0);
   $71 = ($70|0)==(0);
   if ($71) {
    $$3 = 11;
    STACKTOP = sp;return ($$3|0);
   }
   $72 = HEAP32[$0>>2]|0;
   $73 = ((($72)) + 32|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = (_FLAC__format_sample_rate_is_subset($74)|0);
   $76 = ($75|0)==(0);
   if ($76) {
    $$3 = 11;
    STACKTOP = sp;return ($$3|0);
   }
   $77 = HEAP32[$0>>2]|0;
   $78 = ((($77)) + 28|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = (($79) + -8)|0;
   $81 = $80 >>> 2;
   $82 = $80 << 30;
   $83 = $81 | $82;
   $switch = ($83>>>0)<(5);
   if (!($switch)) {
    $$3 = 11;
    STACKTOP = sp;return ($$3|0);
   }
   $84 = ((($77)) + 580|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ($85>>>0)>(8);
   if ($86) {
    $$3 = 11;
    STACKTOP = sp;return ($$3|0);
   }
   $87 = ((($77)) + 32|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = ($88>>>0)<(48001);
   if ($89) {
    $90 = ((($77)) + 36|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91>>>0)>(4608);
    if ($92) {
     $$3 = 11;
     STACKTOP = sp;return ($$3|0);
    }
    $93 = ((($77)) + 556|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94>>>0)>(12);
    if ($95) {
     $$3 = 11;
    } else {
     break;
    }
    STACKTOP = sp;return ($$3|0);
   }
  }
 } while(0);
 $96 = HEAP32[$0>>2]|0;
 $97 = ((($96)) + 580|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = HEAP32[284]|0;
 $100 = 1 << $99;
 $101 = ($98>>>0)<($100>>>0);
 if (!($101)) {
  $102 = (($100) + -1)|0;
  HEAP32[$97>>2] = $102;
 }
 $103 = ((($96)) + 576|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = HEAP32[$97>>2]|0;
 $106 = ($104>>>0)<($105>>>0);
 if (!($106)) {
  HEAP32[$103>>2] = $105;
 }
 $107 = ((($96)) + 600|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = ($108|0)==(0|0);
 $110 = ((($96)) + 604|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = ($111|0)==(0);
 L87: do {
  if ($109) {
   if (!($112)) {
    $$3 = 12;
    STACKTOP = sp;return ($$3|0);
   }
  } else {
   if (!($112)) {
    $$0286355 = 0;
    while(1) {
     $113 = (($108) + ($$0286355<<2)|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = ($114|0)==(0|0);
     if (!($115)) {
      $116 = HEAP32[$114>>2]|0;
      $117 = ($116|0)==(3);
      if ($117) {
       break;
      }
     }
     $122 = (($$0286355) + 1)|0;
     $123 = ($122>>>0)<($111>>>0);
     if ($123) {
      $$0286355 = $122;
     } else {
      break L87;
     }
    }
    $118 = ((($114)) + 16|0);
    $119 = ((($0)) + 4|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = ((($120)) + 7048|0);
    HEAP32[$121>>2] = $118;
   }
  }
 } while(0);
 $124 = HEAP32[$0>>2]|0;
 $125 = ((($124)) + 604|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = ($126|0)==(0);
 L99: do {
  if ($127) {
   $$0295$lcssa = 0;
  } else {
   $$0289350 = 0;$$0292349 = 0;$$0295348 = 0;$$0298347 = 0;$$0301346 = 0;$129 = $124;
   L101: while(1) {
    $128 = ((($129)) + 600|0);
    $130 = HEAP32[$128>>2]|0;
    $131 = (($130) + ($$0301346<<2)|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = HEAP32[$132>>2]|0;
    L103: do {
     switch ($133|0) {
     case 0:  {
      $$3 = 12;
      label = 119;
      break L101;
      break;
     }
     case 3:  {
      $134 = ($$0298347|0)==(0);
      if (!($134)) {
       $$3 = 12;
       label = 119;
       break L101;
      }
      $135 = ((($132)) + 16|0);
      $136 = (_FLAC__format_seektable_is_legal($135)|0);
      $137 = ($136|0)==(0);
      if ($137) {
       $$3 = 12;
       label = 119;
       break L101;
      } else {
       $$1290 = $$0289350;$$1293 = $$0292349;$$1296 = $$0295348;$$1299 = 1;
      }
      break;
     }
     case 4:  {
      $138 = ($$0295348|0)==(0);
      if ($138) {
       $$1290 = $$0289350;$$1293 = $$0292349;$$1296 = 1;$$1299 = $$0298347;
      } else {
       $$3 = 12;
       label = 119;
       break L101;
      }
      break;
     }
     case 5:  {
      $139 = ((($132)) + 16|0);
      $140 = ((($132)) + 160|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = (_FLAC__format_cuesheet_is_legal($139,$141,0)|0);
      $143 = ($142|0)==(0);
      if ($143) {
       $$3 = 12;
       label = 119;
       break L101;
      } else {
       $$1290 = $$0289350;$$1293 = $$0292349;$$1296 = $$0295348;$$1299 = $$0298347;
      }
      break;
     }
     case 6:  {
      $144 = ((($132)) + 16|0);
      $145 = (_FLAC__format_picture_is_legal($144,0)|0);
      $146 = ($145|0)==(0);
      if ($146) {
       $$3 = 12;
       label = 119;
       break L101;
      }
      $147 = HEAP32[$144>>2]|0;
      switch ($147|0) {
      case 1:  {
       break;
      }
      case 2:  {
       $161 = ($$0289350|0)==(0);
       if ($161) {
        $$1290 = 1;$$1293 = $$0292349;$$1296 = $$0295348;$$1299 = $$0298347;
        break L103;
       } else {
        $$3 = 12;
        label = 119;
        break L101;
       }
       break;
      }
      default: {
       $$1290 = $$0289350;$$1293 = $$0292349;$$1296 = $$0295348;$$1299 = $$0298347;
       break L103;
      }
      }
      $148 = ($$0292349|0)==(0);
      if (!($148)) {
       $$3 = 12;
       label = 119;
       break L101;
      }
      $149 = ((($132)) + 20|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = (_strcmp($150,3456)|0);
      $152 = ($151|0)==(0);
      if (!($152)) {
       $153 = (_strcmp($150,3466)|0);
       $154 = ($153|0)==(0);
       if (!($154)) {
        $$3 = 12;
        label = 119;
        break L101;
       }
      }
      $155 = ((($132)) + 28|0);
      $156 = HEAP32[$155>>2]|0;
      $157 = ($156|0)==(32);
      if (!($157)) {
       $$3 = 12;
       label = 119;
       break L101;
      }
      $158 = ((($132)) + 32|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159|0)==(32);
      if ($160) {
       $$1290 = $$0289350;$$1293 = 1;$$1296 = $$0295348;$$1299 = $$0298347;
      } else {
       $$3 = 12;
       label = 119;
       break L101;
      }
      break;
     }
     default: {
      $$1290 = $$0289350;$$1293 = $$0292349;$$1296 = $$0295348;$$1299 = $$0298347;
     }
     }
    } while(0);
    $162 = (($$0301346) + 1)|0;
    $163 = HEAP32[$0>>2]|0;
    $164 = ((($163)) + 604|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($162>>>0)<($165>>>0);
    if ($166) {
     $$0289350 = $$1290;$$0292349 = $$1293;$$0295348 = $$1296;$$0298347 = $$1299;$$0301346 = $162;$129 = $163;
    } else {
     $$0295$lcssa = $$1296;
     break L99;
    }
   }
   if ((label|0) == 119) {
    STACKTOP = sp;return ($$3|0);
   }
  }
 } while(0);
 $167 = ((($0)) + 4|0);
 $168 = HEAP32[$167>>2]|0;
 HEAP32[$168>>2] = 0;
 $169 = HEAP32[$0>>2]|0;
 $170 = ((($169)) + 24|0);
 $171 = HEAP32[$170>>2]|0;
 $172 = ($171|0)==(0);
 if (!($172)) {
  $$1302342 = 0;
  while(1) {
   $173 = HEAP32[$167>>2]|0;
   $174 = (((($173)) + 4|0) + ($$1302342<<2)|0);
   HEAP32[$174>>2] = 0;
   $175 = HEAP32[$167>>2]|0;
   $176 = (((($175)) + 7352|0) + ($$1302342<<2)|0);
   HEAP32[$176>>2] = 0;
   $177 = HEAP32[$167>>2]|0;
   $178 = (((($177)) + 44|0) + ($$1302342<<2)|0);
   HEAP32[$178>>2] = 0;
   $179 = HEAP32[$167>>2]|0;
   $180 = (((($179)) + 7392|0) + ($$1302342<<2)|0);
   HEAP32[$180>>2] = 0;
   $181 = (($$1302342) + 1)|0;
   $182 = HEAP32[$0>>2]|0;
   $183 = ((($182)) + 24|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = ($181>>>0)<($184>>>0);
   if ($185) {
    $$1302342 = $181;
   } else {
    break;
   }
  }
 }
 $186 = HEAP32[$167>>2]|0;
 $187 = ((($186)) + 36|0);
 HEAP32[$187>>2] = 0;
 $188 = HEAP32[$167>>2]|0;
 $189 = ((($188)) + 7384|0);
 HEAP32[$189>>2] = 0;
 $190 = HEAP32[$167>>2]|0;
 $191 = ((($190)) + 76|0);
 HEAP32[$191>>2] = 0;
 $192 = HEAP32[$167>>2]|0;
 $193 = ((($192)) + 7424|0);
 HEAP32[$193>>2] = 0;
 $194 = HEAP32[$167>>2]|0;
 $195 = ((($194)) + 40|0);
 HEAP32[$195>>2] = 0;
 $196 = HEAP32[$167>>2]|0;
 $197 = ((($196)) + 7388|0);
 HEAP32[$197>>2] = 0;
 $198 = HEAP32[$167>>2]|0;
 $199 = ((($198)) + 80|0);
 HEAP32[$199>>2] = 0;
 $200 = HEAP32[$167>>2]|0;
 $201 = ((($200)) + 7428|0);
 HEAP32[$201>>2] = 0;
 $202 = HEAP32[$0>>2]|0;
 $203 = ((($202)) + 40|0);
 $204 = HEAP32[$203>>2]|0;
 $205 = ($204|0)==(0);
 $206 = HEAP32[$167>>2]|0;
 if ($205) {
  $$lcssa322 = $206;
 } else {
  $$3304336 = 0;$208 = $206;
  while(1) {
   $207 = (((($208)) + 84|0) + ($$3304336<<2)|0);
   HEAP32[$207>>2] = 0;
   $209 = HEAP32[$167>>2]|0;
   $210 = (((($209)) + 7432|0) + ($$3304336<<2)|0);
   HEAP32[$210>>2] = 0;
   $211 = (($$3304336) + 1)|0;
   $212 = HEAP32[$0>>2]|0;
   $213 = ((($212)) + 40|0);
   $214 = HEAP32[$213>>2]|0;
   $215 = ($211>>>0)<($214>>>0);
   $216 = HEAP32[$167>>2]|0;
   if ($215) {
    $$3304336 = $211;$208 = $216;
   } else {
    $$lcssa322 = $216;
    break;
   }
  }
 }
 $217 = ((($$lcssa322)) + 212|0);
 HEAP32[$217>>2] = 0;
 $218 = ((($$lcssa322)) + 7560|0);
 HEAP32[$218>>2] = 0;
 $219 = HEAP32[$0>>2]|0;
 $220 = ((($219)) + 24|0);
 $221 = HEAP32[$220>>2]|0;
 $222 = ($221|0)==(0);
 if (!($222)) {
  $$4332 = 0;
  while(1) {
   $223 = HEAP32[$167>>2]|0;
   $224 = (((($223)) + 256|0) + ($$4332<<3)|0);
   HEAP32[$224>>2] = 0;
   $225 = HEAP32[$167>>2]|0;
   $226 = (((($225)) + 7564|0) + ($$4332<<3)|0);
   HEAP32[$226>>2] = 0;
   $227 = HEAP32[$167>>2]|0;
   $228 = (((((($227)) + 256|0) + ($$4332<<3)|0)) + 4|0);
   HEAP32[$228>>2] = 0;
   $229 = HEAP32[$167>>2]|0;
   $230 = (((((($229)) + 7564|0) + ($$4332<<3)|0)) + 4|0);
   HEAP32[$230>>2] = 0;
   $231 = HEAP32[$167>>2]|0;
   $232 = (((($231)) + 6768|0) + ($$4332<<2)|0);
   HEAP32[$232>>2] = 0;
   $233 = (($$4332) + 1)|0;
   $234 = HEAP32[$0>>2]|0;
   $235 = ((($234)) + 24|0);
   $236 = HEAP32[$235>>2]|0;
   $237 = ($233>>>0)<($236>>>0);
   if ($237) {
    $$4332 = $233;
   } else {
    break;
   }
  }
 }
 $238 = HEAP32[$167>>2]|0;
 $239 = ((($238)) + 320|0);
 HEAP32[$239>>2] = 0;
 $240 = HEAP32[$167>>2]|0;
 $241 = ((($240)) + 7628|0);
 HEAP32[$241>>2] = 0;
 $242 = HEAP32[$167>>2]|0;
 $243 = ((($242)) + 324|0);
 HEAP32[$243>>2] = 0;
 $244 = HEAP32[$167>>2]|0;
 $245 = ((($244)) + 7632|0);
 HEAP32[$245>>2] = 0;
 $246 = HEAP32[$167>>2]|0;
 $247 = ((($246)) + 6800|0);
 HEAP32[$247>>2] = 0;
 $248 = HEAP32[$167>>2]|0;
 $249 = ((($248)) + 328|0);
 HEAP32[$249>>2] = 0;
 $250 = HEAP32[$167>>2]|0;
 $251 = ((($250)) + 7636|0);
 HEAP32[$251>>2] = 0;
 $252 = HEAP32[$167>>2]|0;
 $253 = ((($252)) + 332|0);
 HEAP32[$253>>2] = 0;
 $254 = HEAP32[$167>>2]|0;
 $255 = ((($254)) + 7640|0);
 HEAP32[$255>>2] = 0;
 $256 = HEAP32[$167>>2]|0;
 $257 = ((($256)) + 6804|0);
 HEAP32[$257>>2] = 0;
 $258 = HEAP32[$167>>2]|0;
 $259 = ((($258)) + 6848|0);
 HEAP32[$259>>2] = 0;
 $260 = ((($258)) + 7644|0);
 HEAP32[$260>>2] = 0;
 $261 = ((($258)) + 6852|0);
 HEAP32[$261>>2] = 0;
 $262 = ((($258)) + 7648|0);
 HEAP32[$262>>2] = 0;
 $263 = HEAP32[$0>>2]|0;
 $264 = ((($263)) + 32|0);
 $265 = HEAP32[$264>>2]|0;
 $266 = (+($265>>>0));
 $267 = $266 * 0.40000000000000002;
 $268 = ((($263)) + 36|0);
 $269 = HEAP32[$268>>2]|0;
 $270 = (+($269>>>0));
 $271 = $267 / $270;
 $272 = $271 + 0.5;
 $273 = (~~(($272))>>>0);
 $274 = ((($258)) + 6860|0);
 $275 = ($273|0)==(0);
 $spec$store$select = $275 ? 1 : $273;
 HEAP32[$274>>2] = $spec$store$select;
 $276 = ((($258)) + 6864|0);
 HEAP32[$276>>2] = 0;
 $277 = ((($258)) + 7052|0);
 HEAP32[$277>>2] = 0;
 $278 = ((($258)) + 7056|0);
 HEAP32[$278>>2] = 0;
 $279 = ((($258)) + 7156|0);
 _FLAC__cpu_info($279);
 $280 = HEAP32[$167>>2]|0;
 $281 = ((($280)) + 7256|0);
 HEAP32[$281>>2] = 6;
 $282 = ((($280)) + 7244|0);
 HEAP32[$282>>2] = 6;
 $283 = ((($280)) + 7248|0);
 HEAP32[$283>>2] = 10;
 $284 = ((($280)) + 7252|0);
 HEAP32[$284>>2] = 11;
 $285 = ((($280)) + 7260|0);
 HEAP32[$285>>2] = 8;
 $286 = ((($280)) + 7264|0);
 HEAP32[$286>>2] = 9;
 $287 = ((($280)) + 7268|0);
 HEAP32[$287>>2] = 8;
 $288 = HEAP32[$0>>2]|0;
 HEAP32[$288>>2] = 0;
 $289 = ((($280)) + 7288|0);
 HEAP32[$289>>2] = $1;
 $290 = ((($280)) + 7300|0);
 HEAP32[$290>>2] = $2;
 $291 = ((($280)) + 7292|0);
 HEAP32[$291>>2] = $3;
 $292 = ((($280)) + 7296|0);
 HEAP32[$292>>2] = $4;
 $293 = ((($280)) + 7304|0);
 HEAP32[$293>>2] = $5;
 $294 = ((($280)) + 7312|0);
 HEAP32[$294>>2] = $6;
 $295 = ((($288)) + 36|0);
 $296 = HEAP32[$295>>2]|0;
 $297 = (_resize_buffers_($0,$296)|0);
 $298 = ($297|0)==(0);
 if ($298) {
  $$3 = 1;
  STACKTOP = sp;return ($$3|0);
 }
 $299 = HEAP32[$167>>2]|0;
 $300 = ((($299)) + 6856|0);
 $301 = HEAP32[$300>>2]|0;
 $302 = (_FLAC__bitwriter_init($301)|0);
 $303 = ($302|0)==(0);
 $304 = HEAP32[$0>>2]|0;
 if ($303) {
  HEAP32[$304>>2] = 8;
  $$3 = 1;
  STACKTOP = sp;return ($$3|0);
 }
 $305 = ((($304)) + 4|0);
 $306 = HEAP32[$305>>2]|0;
 $307 = ($306|0)==(0);
 do {
  if (!($307)) {
   $308 = ((($304)) + 36|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = (($309) + 1)|0;
   $311 = HEAP32[$167>>2]|0;
   $312 = ((($311)) + 11820|0);
   HEAP32[$312>>2] = $310;
   $313 = HEAP32[$0>>2]|0;
   $314 = ((($313)) + 24|0);
   $315 = HEAP32[$314>>2]|0;
   $316 = ($315|0)==(0);
   $317 = HEAP32[$167>>2]|0;
   L156: do {
    if ($316) {
     $$lcssa319 = $317;
    } else {
     $$6326 = 0;$325 = $317;
     while(1) {
      $324 = ((($325)) + 11820|0);
      $326 = HEAP32[$324>>2]|0;
      $327 = (_safe_malloc_mul_2op_p(4,$326)|0);
      $328 = HEAP32[$167>>2]|0;
      $329 = (((($328)) + 11788|0) + ($$6326<<2)|0);
      HEAP32[$329>>2] = $327;
      $330 = ($327|0)==(0|0);
      $321 = (($$6326) + 1)|0;
      $319 = HEAP32[$0>>2]|0;
      if ($330) {
       break;
      }
      $318 = ((($319)) + 24|0);
      $320 = HEAP32[$318>>2]|0;
      $322 = ($321>>>0)<($320>>>0);
      $323 = HEAP32[$167>>2]|0;
      if ($322) {
       $$6326 = $321;$325 = $323;
      } else {
       $$lcssa319 = $323;
       break L156;
      }
     }
     HEAP32[$319>>2] = 8;
     $$3 = 1;
     STACKTOP = sp;return ($$3|0);
    }
   } while(0);
   $331 = ((($$lcssa319)) + 11824|0);
   HEAP32[$331>>2] = 0;
   $332 = ((($$lcssa319)) + 11776|0);
   $333 = HEAP32[$332>>2]|0;
   $334 = ($333|0)==(0|0);
   do {
    if ($334) {
     $335 = (_FLAC__stream_decoder_new()|0);
     $336 = HEAP32[$167>>2]|0;
     $337 = ((($336)) + 11776|0);
     HEAP32[$337>>2] = $335;
     $338 = ($335|0)==(0|0);
     if (!($338)) {
      break;
     }
     $339 = HEAP32[$0>>2]|0;
     HEAP32[$339>>2] = 3;
     $$3 = 1;
     STACKTOP = sp;return ($$3|0);
    }
   } while(0);
   $340 = HEAP32[$167>>2]|0;
   $341 = ((($340)) + 11776|0);
   $342 = HEAP32[$341>>2]|0;
   $343 = (_FLAC__stream_decoder_init_stream($342,6,0,0,0,0,7,6,7,$0)|0);
   $344 = ($343|0)==(0);
   if ($344) {
    break;
   }
   $345 = HEAP32[$0>>2]|0;
   HEAP32[$345>>2] = 3;
   $$3 = 1;
   STACKTOP = sp;return ($$3|0);
  }
 } while(0);
 $346 = HEAP32[$167>>2]|0;
 $347 = ((($346)) + 11840|0);
 $348 = ((($346)) + 7316|0);
 HEAP32[$348>>2] = 0;
 $349 = ((($346)) + 7336|0);
 $350 = $349;
 $351 = $350;
 HEAP32[$351>>2] = 0;
 $352 = (($350) + 4)|0;
 $353 = $352;
 HEAP32[$353>>2] = 0;
 ;HEAP32[$347>>2]=0|0;HEAP32[$347+4>>2]=0|0;HEAP32[$347+8>>2]=0|0;HEAP32[$347+12>>2]=0|0;HEAP32[$347+16>>2]=0|0;HEAP32[$347+20>>2]=0|0;HEAP32[$347+24>>2]=0|0;
 $354 = HEAP32[$0>>2]|0;
 $355 = ((($354)) + 608|0);
 $356 = ((($354)) + 4|0);
 ;HEAP32[$355>>2]=0|0;HEAP32[$355+4>>2]=0|0;HEAP32[$355+8>>2]=0|0;HEAP32[$355+12>>2]=0|0;HEAP32[$355+16>>2]=0|0;HEAP32[$355+20>>2]=0|0;
 $357 = HEAP32[$356>>2]|0;
 $358 = ($357|0)==(0);
 if (!($358)) {
  $359 = ((($346)) + 11780|0);
  HEAP32[$359>>2] = 0;
 }
 $360 = ((($346)) + 6856|0);
 $361 = HEAP32[$360>>2]|0;
 $362 = HEAP32[268]|0;
 $363 = HEAP32[275]|0;
 $364 = (_FLAC__bitwriter_write_raw_uint32($361,$362,$363)|0);
 $365 = ($364|0)==(0);
 if ($365) {
  $366 = HEAP32[$0>>2]|0;
  HEAP32[$366>>2] = 7;
  $$3 = 1;
  STACKTOP = sp;return ($$3|0);
 }
 $367 = (_write_bitbuffer_($0,0)|0);
 $368 = ($367|0)==(0);
 if ($368) {
  $$3 = 1;
  STACKTOP = sp;return ($$3|0);
 }
 $369 = HEAP32[$0>>2]|0;
 $370 = ((($369)) + 4|0);
 $371 = HEAP32[$370>>2]|0;
 $372 = ($371|0)==(0);
 if (!($372)) {
  $373 = HEAP32[$167>>2]|0;
  $374 = ((($373)) + 11780|0);
  HEAP32[$374>>2] = 1;
 }
 $375 = HEAP32[$167>>2]|0;
 $376 = ((($375)) + 6872|0);
 HEAP32[$376>>2] = 0;
 $377 = ((($375)) + 6876|0);
 HEAP32[$377>>2] = 0;
 $378 = ((($375)) + 6880|0);
 HEAP32[$378>>2] = 34;
 $379 = ((($369)) + 36|0);
 $380 = HEAP32[$379>>2]|0;
 $381 = ((($375)) + 6888|0);
 HEAP32[$381>>2] = $380;
 $382 = HEAP32[$0>>2]|0;
 $383 = ((($382)) + 36|0);
 $384 = HEAP32[$383>>2]|0;
 $385 = HEAP32[$167>>2]|0;
 $386 = ((($385)) + 6892|0);
 HEAP32[$386>>2] = $384;
 $387 = HEAP32[$167>>2]|0;
 $388 = ((($387)) + 6896|0);
 HEAP32[$388>>2] = 0;
 $389 = HEAP32[$167>>2]|0;
 $390 = ((($389)) + 6900|0);
 HEAP32[$390>>2] = 0;
 $391 = HEAP32[$0>>2]|0;
 $392 = ((($391)) + 32|0);
 $393 = HEAP32[$392>>2]|0;
 $394 = HEAP32[$167>>2]|0;
 $395 = ((($394)) + 6904|0);
 HEAP32[$395>>2] = $393;
 $396 = HEAP32[$0>>2]|0;
 $397 = ((($396)) + 24|0);
 $398 = HEAP32[$397>>2]|0;
 $399 = HEAP32[$167>>2]|0;
 $400 = ((($399)) + 6908|0);
 HEAP32[$400>>2] = $398;
 $401 = HEAP32[$0>>2]|0;
 $402 = ((($401)) + 28|0);
 $403 = HEAP32[$402>>2]|0;
 $404 = HEAP32[$167>>2]|0;
 $405 = ((($404)) + 6912|0);
 HEAP32[$405>>2] = $403;
 $406 = HEAP32[$0>>2]|0;
 $407 = ((($406)) + 592|0);
 $408 = $407;
 $409 = $408;
 $410 = HEAP32[$409>>2]|0;
 $411 = (($408) + 4)|0;
 $412 = $411;
 $413 = HEAP32[$412>>2]|0;
 $414 = HEAP32[$167>>2]|0;
 $415 = ((($414)) + 6920|0);
 $416 = $415;
 $417 = $416;
 HEAP32[$417>>2] = $410;
 $418 = (($416) + 4)|0;
 $419 = $418;
 HEAP32[$419>>2] = $413;
 $420 = HEAP32[$167>>2]|0;
 $421 = ((($420)) + 6928|0);
 ;HEAP32[$421>>2]=0|0;HEAP32[$421+4>>2]=0|0;HEAP32[$421+8>>2]=0|0;HEAP32[$421+12>>2]=0|0;
 $422 = HEAP32[$0>>2]|0;
 $423 = ((($422)) + 12|0);
 $424 = HEAP32[$423>>2]|0;
 $425 = ($424|0)==(0);
 if (!($425)) {
  $426 = HEAP32[$167>>2]|0;
  $427 = ((($426)) + 7060|0);
  _FLAC__MD5Init($427);
 }
 $428 = HEAP32[$167>>2]|0;
 $429 = ((($428)) + 6872|0);
 $430 = ((($428)) + 6856|0);
 $431 = HEAP32[$430>>2]|0;
 $432 = (_FLAC__add_metadata_block($429,$431)|0);
 $433 = ($432|0)==(0);
 if ($433) {
  $434 = HEAP32[$0>>2]|0;
  HEAP32[$434>>2] = 7;
  $$3 = 1;
  STACKTOP = sp;return ($$3|0);
 }
 $435 = (_write_bitbuffer_($0,0)|0);
 $436 = ($435|0)==(0);
 if ($436) {
  $$3 = 1;
  STACKTOP = sp;return ($$3|0);
 }
 $437 = HEAP32[277]|0;
 $438 = 1 << $437;
 $439 = (($438) + -1)|0;
 $440 = HEAP32[$167>>2]|0;
 $441 = ((($440)) + 6896|0);
 HEAP32[$441>>2] = $439;
 $442 = HEAP32[$167>>2]|0;
 $443 = ((($442)) + 6920|0);
 $444 = $443;
 $445 = $444;
 HEAP32[$445>>2] = 0;
 $446 = (($444) + 4)|0;
 $447 = $446;
 HEAP32[$447>>2] = 0;
 $448 = ($$0295$lcssa|0)==(0);
 do {
  if ($448) {
   HEAP32[$8>>2] = 4;
   $449 = HEAP32[$0>>2]|0;
   $450 = ((($449)) + 604|0);
   $451 = HEAP32[$450>>2]|0;
   $452 = ($451|0)==(0);
   $453 = $452&1;
   $454 = ((($8)) + 4|0);
   HEAP32[$454>>2] = $453;
   $455 = ((($8)) + 8|0);
   HEAP32[$455>>2] = 8;
   $456 = ((($8)) + 16|0);
   ;HEAP32[$456>>2]=0|0;HEAP32[$456+4>>2]=0|0;HEAP32[$456+8>>2]=0|0;HEAP32[$456+12>>2]=0|0;
   $457 = HEAP32[$167>>2]|0;
   $458 = ((($457)) + 6856|0);
   $459 = HEAP32[$458>>2]|0;
   $460 = (_FLAC__add_metadata_block($8,$459)|0);
   $461 = ($460|0)==(0);
   if ($461) {
    $462 = HEAP32[$0>>2]|0;
    HEAP32[$462>>2] = 7;
    $$3 = 1;
    STACKTOP = sp;return ($$3|0);
   } else {
    $463 = (_write_bitbuffer_($0,0)|0);
    $464 = ($463|0)==(0);
    if ($464) {
     $$3 = 1;
    } else {
     break;
    }
    STACKTOP = sp;return ($$3|0);
   }
  }
 } while(0);
 $465 = HEAP32[$0>>2]|0;
 $466 = ((($465)) + 604|0);
 $467 = HEAP32[$466>>2]|0;
 $468 = ($467|0)==(0);
 L203: do {
  if ($468) {
   $$lcssa = $465;
  } else {
   $$7325 = 0;$475 = $467;$479 = $465;
   while(1) {
    $474 = (($475) + -1)|0;
    $476 = ($$7325|0)==($474|0);
    $477 = $476&1;
    $478 = ((($479)) + 600|0);
    $480 = HEAP32[$478>>2]|0;
    $481 = (($480) + ($$7325<<2)|0);
    $482 = HEAP32[$481>>2]|0;
    $483 = ((($482)) + 4|0);
    HEAP32[$483>>2] = $477;
    $484 = HEAP32[$167>>2]|0;
    $485 = ((($484)) + 6856|0);
    $486 = HEAP32[$485>>2]|0;
    $487 = (_FLAC__add_metadata_block($482,$486)|0);
    $488 = ($487|0)==(0);
    if ($488) {
     break;
    }
    $490 = (_write_bitbuffer_($0,0)|0);
    $491 = ($490|0)==(0);
    $472 = (($$7325) + 1)|0;
    if ($491) {
     $$3 = 1;
     label = 119;
     break;
    }
    $469 = HEAP32[$0>>2]|0;
    $470 = ((($469)) + 604|0);
    $471 = HEAP32[$470>>2]|0;
    $473 = ($472>>>0)<($471>>>0);
    if ($473) {
     $$7325 = $472;$475 = $471;$479 = $469;
    } else {
     $$lcssa = $469;
     break L203;
    }
   }
   if ((label|0) == 119) {
    STACKTOP = sp;return ($$3|0);
   }
   $489 = HEAP32[$0>>2]|0;
   HEAP32[$489>>2] = 7;
   $$3 = 1;
   STACKTOP = sp;return ($$3|0);
  }
 } while(0);
 $492 = HEAP32[$167>>2]|0;
 $493 = ((($492)) + 7296|0);
 $494 = HEAP32[$493>>2]|0;
 $495 = ($494|0)==(0|0);
 do {
  if (!($495)) {
   $496 = ((($$lcssa)) + 624|0);
   $497 = ((($492)) + 7312|0);
   $498 = HEAP32[$497>>2]|0;
   $499 = (FUNCTION_TABLE_iiii[$494 & 15]($0,$496,$498)|0);
   $500 = ($499|0)==(1);
   if (!($500)) {
    break;
   }
   $501 = HEAP32[$0>>2]|0;
   HEAP32[$501>>2] = 5;
   $$3 = 1;
   STACKTOP = sp;return ($$3|0);
  }
 } while(0);
 $502 = HEAP32[$0>>2]|0;
 $503 = ((($502)) + 4|0);
 $504 = HEAP32[$503>>2]|0;
 $505 = ($504|0)==(0);
 if ($505) {
  $$3 = 0;
  STACKTOP = sp;return ($$3|0);
 }
 $506 = HEAP32[$167>>2]|0;
 $507 = ((($506)) + 11780|0);
 HEAP32[$507>>2] = 2;
 $$3 = 0;
 STACKTOP = sp;return ($$3|0);
}
function _precompute_partition_info_sums_($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$07498 = 0, $$07498$in = 0, $$07597 = 0, $$07696 = 0, $$079$lcssa = 0, $$079103 = 0, $$080111 = 0, $$082110 = 0, $$084109 = 0, $$08695 = 0, $$092 = 0, $$1$lcssa = 0, $$177$lcssa = 0, $$17790 = 0, $$181121 = 0, $$183$lcssa = 0, $$183102 = 0, $$185119 = 0, $$191 = 0, $$2120 = 0;
 var $$3$lcssa = 0, $$3112 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $exitcond = 0, $exitcond128 = 0;
 var $exitcond131 = 0, $indvars$iv = 0, $indvars$iv$next = 0, $indvars$iv$next130 = 0, $indvars$iv129 = 0, $ispos = 0, $ispos87 = 0, $neg = 0, $neg88 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = (($3) + ($2))|0;
 $8 = $7 >>> $5;
 $9 = 1 << $5;
 $10 = (_FLAC__bitmath_ilog2_235($8)|0);
 $11 = (32 - ($10))|0;
 $12 = (0 - ($3))|0;
 $13 = (($6) + 4)|0;
 $14 = ($13>>>0)<($11>>>0);
 $15 = (($8) - ($3))|0;
 if ($14) {
  $$080111 = $12;$$082110 = 0;$$084109 = 0;$indvars$iv = $15;
  while(1) {
   $16 = (($$080111) + ($8))|0;
   $17 = ($$082110>>>0)<($16>>>0);
   if ($17) {
    $$079103 = 0;$$183102 = $$082110;
    while(1) {
     $18 = (($0) + ($$183102<<2)|0);
     $19 = HEAP32[$18>>2]|0;
     $ispos87 = ($19|0)>(-1);
     $neg88 = (0 - ($19))|0;
     $20 = $ispos87 ? $19 : $neg88;
     $21 = (($20) + ($$079103))|0;
     $22 = (($$183102) + 1)|0;
     $exitcond128 = ($22|0)==($indvars$iv|0);
     if ($exitcond128) {
      $$079$lcssa = $21;$$183$lcssa = $16;
      break;
     } else {
      $$079103 = $21;$$183102 = $22;
     }
    }
   } else {
    $$079$lcssa = 0;$$183$lcssa = $$082110;
   }
   $23 = (($1) + ($$084109<<3)|0);
   $24 = $23;
   $25 = $24;
   HEAP32[$25>>2] = $$079$lcssa;
   $26 = (($24) + 4)|0;
   $27 = $26;
   HEAP32[$27>>2] = 0;
   $28 = (($$084109) + 1)|0;
   $29 = ($28>>>0)<($9>>>0);
   $indvars$iv$next = (($indvars$iv) + ($8))|0;
   if ($29) {
    $$080111 = $16;$$082110 = $$183$lcssa;$$084109 = $28;$indvars$iv = $indvars$iv$next;
   } else {
    break;
   }
  }
 } else {
  $$181121 = $12;$$185119 = 0;$$2120 = 0;$indvars$iv129 = $15;
  while(1) {
   $30 = (($$181121) + ($8))|0;
   $31 = ($$2120>>>0)<($30>>>0);
   if ($31) {
    $$3112 = $$2120;$37 = 0;$38 = 0;
    while(1) {
     $32 = (($0) + ($$3112<<2)|0);
     $33 = HEAP32[$32>>2]|0;
     $ispos = ($33|0)>(-1);
     $neg = (0 - ($33))|0;
     $34 = $ispos ? $33 : $neg;
     $35 = ($34|0)<(0);
     $36 = $35 << 31 >> 31;
     $39 = (_i64Add(($37|0),($38|0),($34|0),($36|0))|0);
     $40 = (getTempRet0() | 0);
     $41 = (($$3112) + 1)|0;
     $exitcond131 = ($41|0)==($indvars$iv129|0);
     if ($exitcond131) {
      $$3$lcssa = $30;$45 = $39;$48 = $40;
      break;
     } else {
      $$3112 = $41;$37 = $39;$38 = $40;
     }
    }
   } else {
    $$3$lcssa = $$2120;$45 = 0;$48 = 0;
   }
   $42 = (($1) + ($$185119<<3)|0);
   $43 = $42;
   $44 = $43;
   HEAP32[$44>>2] = $45;
   $46 = (($43) + 4)|0;
   $47 = $46;
   HEAP32[$47>>2] = $48;
   $49 = (($$185119) + 1)|0;
   $50 = ($49>>>0)<($9>>>0);
   $indvars$iv$next130 = (($indvars$iv129) + ($8))|0;
   if ($50) {
    $$181121 = $30;$$185119 = $49;$$2120 = $$3$lcssa;$indvars$iv129 = $indvars$iv$next130;
   } else {
    break;
   }
  }
 }
 $51 = ($5|0)>($4|0);
 if (!($51)) {
  return;
 }
 $$07498$in = $5;$$07597 = $9;$$07696 = 0;$$08695 = $9;
 while(1) {
  $$07498 = (($$07498$in) + -1)|0;
  $52 = $$08695 >>> 1;
  $53 = ($52|0)==(0);
  if ($53) {
   $$1$lcssa = $$07597;$$177$lcssa = $$07696;
  } else {
   $54 = $$08695 & -2;
   $$092 = 0;$$17790 = $$07696;$$191 = $$07597;
   while(1) {
    $55 = (($1) + ($$17790<<3)|0);
    $56 = $55;
    $57 = $56;
    $58 = HEAP32[$57>>2]|0;
    $59 = (($56) + 4)|0;
    $60 = $59;
    $61 = HEAP32[$60>>2]|0;
    $62 = (($$17790) + 1)|0;
    $63 = (($1) + ($62<<3)|0);
    $64 = $63;
    $65 = $64;
    $66 = HEAP32[$65>>2]|0;
    $67 = (($64) + 4)|0;
    $68 = $67;
    $69 = HEAP32[$68>>2]|0;
    $70 = (_i64Add(($66|0),($69|0),($58|0),($61|0))|0);
    $71 = (getTempRet0() | 0);
    $72 = (($$191) + 1)|0;
    $73 = (($1) + ($$191<<3)|0);
    $74 = $73;
    $75 = $74;
    HEAP32[$75>>2] = $70;
    $76 = (($74) + 4)|0;
    $77 = $76;
    HEAP32[$77>>2] = $71;
    $78 = (($$17790) + 2)|0;
    $79 = (($$092) + 1)|0;
    $exitcond = ($79|0)==($52|0);
    if ($exitcond) {
     break;
    } else {
     $$092 = $79;$$17790 = $78;$$191 = $72;
    }
   }
   $80 = (($$07597) + ($52))|0;
   $81 = (($$07696) + ($54))|0;
   $$1$lcssa = $80;$$177$lcssa = $81;
  }
  $82 = ($$07498|0)>($4|0);
  if ($82) {
   $$07498$in = $$07498;$$07597 = $$1$lcssa;$$07696 = $$177$lcssa;$$08695 = $52;
  } else {
   break;
  }
 }
 return;
}
function _resize_buffers_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0173219 = 0, $$0181 = 0, $$0207 = 0, $$1196 = 0, $$2213 = 0, $$5191 = 0, $$lcssa = 0, $$lcssa249 = 0, $$lcssa252 = 0, $$mux = 0, $$not = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0, $178 = 0.0, $179 = 0, $18 = 0;
 var $180 = 0.0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0, $187 = 0.0, $188 = 0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4>>>0)<($1>>>0);
 if (!($5)) {
  $$0181 = 1;
  return ($$0181|0);
 }
 $6 = (($1) + 5)|0;
 $$0173219 = 0;
 while(1) {
  $7 = HEAP32[$0>>2]|0;
  $8 = ((($7)) + 24|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($$0173219>>>0)<($9>>>0);
  if (!($10)) {
   label = 5;
   break;
  }
  $11 = HEAP32[$2>>2]|0;
  $12 = (((($11)) + 7352|0) + ($$0173219<<2)|0);
  $13 = (((($11)) + 4|0) + ($$0173219<<2)|0);
  $14 = (_FLAC__memory_alloc_aligned_int32_array($6,$12,$13)|0);
  $15 = ($14|0)==(0);
  $16 = HEAP32[$2>>2]|0;
  $17 = (((($16)) + 4|0) + ($$0173219<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  ;HEAP32[$18>>2]=0|0;HEAP32[$18+4>>2]=0|0;HEAP32[$18+8>>2]=0|0;HEAP32[$18+12>>2]=0|0;
  $19 = HEAP32[$2>>2]|0;
  $20 = (((($19)) + 4|0) + ($$0173219<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($21)) + 16|0);
  HEAP32[$20>>2] = $22;
  $23 = (($$0173219) + 1)|0;
  if ($15) {
   $105 = 0;
   break;
  } else {
   $$0173219 = $23;
  }
 }
 L7: do {
  if ((label|0) == 5) {
   $24 = (($1) + 5)|0;
   $25 = HEAP32[$2>>2]|0;
   $26 = ((($25)) + 7384|0);
   $27 = ((($25)) + 36|0);
   $28 = (_FLAC__memory_alloc_aligned_int32_array($24,$26,$27)|0);
   $29 = ($28|0)!=(0);
   $30 = HEAP32[$2>>2]|0;
   $31 = ((($30)) + 36|0);
   $32 = HEAP32[$31>>2]|0;
   ;HEAP32[$32>>2]=0|0;HEAP32[$32+4>>2]=0|0;HEAP32[$32+8>>2]=0|0;HEAP32[$32+12>>2]=0|0;
   $33 = HEAP32[$2>>2]|0;
   $34 = ((($33)) + 36|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ((($35)) + 16|0);
   HEAP32[$34>>2] = $36;
   if ($29) {
    $37 = HEAP32[$2>>2]|0;
    $38 = ((($37)) + 7388|0);
    $39 = ((($37)) + 40|0);
    $40 = (_FLAC__memory_alloc_aligned_int32_array($24,$38,$39)|0);
    $41 = HEAP32[$2>>2]|0;
    $42 = ((($41)) + 40|0);
    $43 = HEAP32[$42>>2]|0;
    ;HEAP32[$43>>2]=0|0;HEAP32[$43+4>>2]=0|0;HEAP32[$43+8>>2]=0|0;HEAP32[$43+12>>2]=0|0;
    $44 = HEAP32[$2>>2]|0;
    $45 = ((($44)) + 40|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($46)) + 16|0);
    HEAP32[$45>>2] = $47;
    $48 = ($40|0)!=(0);
    $$lcssa252 = $48;
   } else {
    $$lcssa252 = $29;
   }
   if ($$lcssa252) {
    $49 = HEAP32[$0>>2]|0;
    $50 = ((($49)) + 556|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = ($51|0)==(0);
    if (!($52)) {
     $$2213 = 0;
     while(1) {
      $53 = HEAP32[$0>>2]|0;
      $54 = ((($53)) + 40|0);
      $55 = HEAP32[$54>>2]|0;
      $56 = ($$2213>>>0)<($55>>>0);
      $57 = HEAP32[$2>>2]|0;
      if (!($56)) {
       break;
      }
      $58 = (((($57)) + 7432|0) + ($$2213<<2)|0);
      $59 = (((($57)) + 84|0) + ($$2213<<2)|0);
      $60 = (_FLAC__memory_alloc_aligned_real_array($1,$58,$59)|0);
      $61 = ($60|0)==(0);
      $62 = (($$2213) + 1)|0;
      if ($61) {
       $105 = 0;
       break L7;
      } else {
       $$2213 = $62;
      }
     }
     $63 = ((($57)) + 7560|0);
     $64 = ((($57)) + 212|0);
     $65 = (_FLAC__memory_alloc_aligned_real_array($1,$63,$64)|0);
     $66 = ($65|0)==(0);
     if ($66) {
      $105 = 0;
      break;
     }
    }
    $$0207 = 0;
    while(1) {
     $67 = HEAP32[$0>>2]|0;
     $68 = ((($67)) + 24|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($$0207>>>0)<($69>>>0);
     if (!($70)) {
      break;
     }
     $71 = HEAP32[$2>>2]|0;
     $72 = (((($71)) + 7564|0) + ($$0207<<3)|0);
     $73 = (((($71)) + 256|0) + ($$0207<<3)|0);
     $74 = (_FLAC__memory_alloc_aligned_int32_array($1,$72,$73)|0);
     $75 = ($74|0)!=(0);
     if ($75) {
      $76 = HEAP32[$2>>2]|0;
      $77 = (((((($76)) + 7564|0) + ($$0207<<3)|0)) + 4|0);
      $78 = (((((($76)) + 256|0) + ($$0207<<3)|0)) + 4|0);
      $79 = (_FLAC__memory_alloc_aligned_int32_array($1,$77,$78)|0);
      $80 = ($79|0)!=(0);
      $$lcssa249 = $80;
     } else {
      $$lcssa249 = $75;
     }
     $81 = (($$0207) + 1)|0;
     if ($$lcssa249) {
      $$0207 = $81;
     } else {
      $105 = 0;
      break L7;
     }
    }
    $$1196 = 0;
    while(1) {
     $82 = HEAP32[$2>>2]|0;
     $83 = (((($82)) + 7628|0) + ($$1196<<3)|0);
     $84 = (((($82)) + 320|0) + ($$1196<<3)|0);
     $85 = (_FLAC__memory_alloc_aligned_int32_array($1,$83,$84)|0);
     $86 = ($85|0)!=(0);
     if ($86) {
      $87 = HEAP32[$2>>2]|0;
      $88 = (((((($87)) + 7628|0) + ($$1196<<3)|0)) + 4|0);
      $89 = (((((($87)) + 320|0) + ($$1196<<3)|0)) + 4|0);
      $90 = (_FLAC__memory_alloc_aligned_int32_array($1,$88,$89)|0);
      $91 = ($90|0)!=(0);
      $$lcssa = $91;
     } else {
      $$lcssa = $86;
     }
     $92 = (($$1196) + 1)|0;
     $93 = ($92>>>0)<(2);
     $94 = $$lcssa & $93;
     if ($94) {
      $$1196 = $92;
     } else {
      break;
     }
    }
    if ($$lcssa) {
     $95 = $1 << 1;
     $96 = HEAP32[$2>>2]|0;
     $97 = ((($96)) + 7644|0);
     $98 = ((($96)) + 6848|0);
     $99 = (_FLAC__memory_alloc_aligned_uint64_array($95,$97,$98)|0);
     $100 = ($99|0)!=(0);
     $105 = $100;
    } else {
     $105 = 0;
    }
   } else {
    $105 = 0;
   }
  }
 } while(0);
 $101 = HEAP32[$0>>2]|0;
 $102 = ((($101)) + 572|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = ($103|0)==(0);
 $$not = $105 ^ 1;
 $brmerge = $104 | $$not;
 if ($brmerge) {
  $$mux = $105 & $104;
  if (!($$mux)) {
   label = 52;
  }
 } else {
  $106 = $1 << 1;
  $107 = HEAP32[$2>>2]|0;
  $108 = ((($107)) + 7648|0);
  $109 = ((($107)) + 6852|0);
  $110 = (_FLAC__memory_alloc_aligned_unsigned_array($106,$108,$109)|0);
  $111 = ($110|0)==(0);
  if ($111) {
   label = 52;
  }
 }
 if ((label|0) == 52) {
  $202 = HEAP32[$0>>2]|0;
  HEAP32[$202>>2] = 8;
  $$0181 = 0;
  return ($$0181|0);
 }
 $112 = HEAP32[$2>>2]|0;
 $113 = HEAP32[$112>>2]|0;
 $114 = ($113|0)==($1|0);
 L42: do {
  if (!($114)) {
   $115 = HEAP32[$0>>2]|0;
   $116 = ((($115)) + 556|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = ($117|0)==(0);
   if (!($118)) {
    $119 = HEAP32[$0>>2]|0;
    $120 = ((($119)) + 40|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = ($121|0)==(0);
    if (!($122)) {
     $$5191 = 0;$124 = $119;
     while(1) {
      $123 = (((($124)) + 44|0) + ($$5191<<4)|0);
      $125 = HEAP32[$123>>2]|0;
      do {
       switch ($125|0) {
       case 0:  {
        $126 = HEAP32[$2>>2]|0;
        $127 = (((($126)) + 84|0) + ($$5191<<2)|0);
        $128 = HEAP32[$127>>2]|0;
        _FLAC__window_bartlett($128,$1);
        break;
       }
       case 1:  {
        $129 = HEAP32[$2>>2]|0;
        $130 = (((($129)) + 84|0) + ($$5191<<2)|0);
        $131 = HEAP32[$130>>2]|0;
        _FLAC__window_bartlett_hann($131,$1);
        break;
       }
       case 2:  {
        $132 = HEAP32[$2>>2]|0;
        $133 = (((($132)) + 84|0) + ($$5191<<2)|0);
        $134 = HEAP32[$133>>2]|0;
        _FLAC__window_blackman($134,$1);
        break;
       }
       case 3:  {
        $135 = HEAP32[$2>>2]|0;
        $136 = (((($135)) + 84|0) + ($$5191<<2)|0);
        $137 = HEAP32[$136>>2]|0;
        _FLAC__window_blackman_harris_4term_92db_sidelobe($137,$1);
        break;
       }
       case 4:  {
        $138 = HEAP32[$2>>2]|0;
        $139 = (((($138)) + 84|0) + ($$5191<<2)|0);
        $140 = HEAP32[$139>>2]|0;
        _FLAC__window_connes($140,$1);
        break;
       }
       case 5:  {
        $141 = HEAP32[$2>>2]|0;
        $142 = (((($141)) + 84|0) + ($$5191<<2)|0);
        $143 = HEAP32[$142>>2]|0;
        _FLAC__window_flattop($143,$1);
        break;
       }
       case 6:  {
        $144 = HEAP32[$2>>2]|0;
        $145 = (((($144)) + 84|0) + ($$5191<<2)|0);
        $146 = HEAP32[$145>>2]|0;
        $147 = (((((($124)) + 44|0) + ($$5191<<4)|0)) + 4|0);
        $148 = +HEAPF32[$147>>2];
        _FLAC__window_gauss($146,$1,$148);
        break;
       }
       case 7:  {
        $149 = HEAP32[$2>>2]|0;
        $150 = (((($149)) + 84|0) + ($$5191<<2)|0);
        $151 = HEAP32[$150>>2]|0;
        _FLAC__window_hamming($151,$1);
        break;
       }
       case 8:  {
        $152 = HEAP32[$2>>2]|0;
        $153 = (((($152)) + 84|0) + ($$5191<<2)|0);
        $154 = HEAP32[$153>>2]|0;
        _FLAC__window_hann($154,$1);
        break;
       }
       case 9:  {
        $155 = HEAP32[$2>>2]|0;
        $156 = (((($155)) + 84|0) + ($$5191<<2)|0);
        $157 = HEAP32[$156>>2]|0;
        _FLAC__window_kaiser_bessel($157,$1);
        break;
       }
       case 10:  {
        $158 = HEAP32[$2>>2]|0;
        $159 = (((($158)) + 84|0) + ($$5191<<2)|0);
        $160 = HEAP32[$159>>2]|0;
        _FLAC__window_nuttall($160,$1);
        break;
       }
       case 11:  {
        $161 = HEAP32[$2>>2]|0;
        $162 = (((($161)) + 84|0) + ($$5191<<2)|0);
        $163 = HEAP32[$162>>2]|0;
        _FLAC__window_rectangle($163,$1);
        break;
       }
       case 12:  {
        $164 = HEAP32[$2>>2]|0;
        $165 = (((($164)) + 84|0) + ($$5191<<2)|0);
        $166 = HEAP32[$165>>2]|0;
        _FLAC__window_triangle($166,$1);
        break;
       }
       case 13:  {
        $167 = HEAP32[$2>>2]|0;
        $168 = (((($167)) + 84|0) + ($$5191<<2)|0);
        $169 = HEAP32[$168>>2]|0;
        $170 = (((((($124)) + 44|0) + ($$5191<<4)|0)) + 4|0);
        $171 = +HEAPF32[$170>>2];
        _FLAC__window_tukey($169,$1,$171);
        break;
       }
       case 14:  {
        $172 = HEAP32[$2>>2]|0;
        $173 = (((($172)) + 84|0) + ($$5191<<2)|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = (((((($124)) + 44|0) + ($$5191<<4)|0)) + 4|0);
        $176 = +HEAPF32[$175>>2];
        $177 = (((((($124)) + 44|0) + ($$5191<<4)|0)) + 8|0);
        $178 = +HEAPF32[$177>>2];
        $179 = (((((($124)) + 44|0) + ($$5191<<4)|0)) + 12|0);
        $180 = +HEAPF32[$179>>2];
        _FLAC__window_partial_tukey($174,$1,$176,$178,$180);
        break;
       }
       case 15:  {
        $181 = HEAP32[$2>>2]|0;
        $182 = (((($181)) + 84|0) + ($$5191<<2)|0);
        $183 = HEAP32[$182>>2]|0;
        $184 = (((((($124)) + 44|0) + ($$5191<<4)|0)) + 4|0);
        $185 = +HEAPF32[$184>>2];
        $186 = (((((($124)) + 44|0) + ($$5191<<4)|0)) + 8|0);
        $187 = +HEAPF32[$186>>2];
        $188 = (((((($124)) + 44|0) + ($$5191<<4)|0)) + 12|0);
        $189 = +HEAPF32[$188>>2];
        _FLAC__window_punchout_tukey($183,$1,$185,$187,$189);
        break;
       }
       case 16:  {
        $190 = HEAP32[$2>>2]|0;
        $191 = (((($190)) + 84|0) + ($$5191<<2)|0);
        $192 = HEAP32[$191>>2]|0;
        _FLAC__window_welch($192,$1);
        break;
       }
       default: {
        $193 = HEAP32[$2>>2]|0;
        $194 = (((($193)) + 84|0) + ($$5191<<2)|0);
        $195 = HEAP32[$194>>2]|0;
        _FLAC__window_hann($195,$1);
       }
       }
      } while(0);
      $196 = (($$5191) + 1)|0;
      $197 = HEAP32[$0>>2]|0;
      $198 = ((($197)) + 40|0);
      $199 = HEAP32[$198>>2]|0;
      $200 = ($196>>>0)<($199>>>0);
      if ($200) {
       $$5191 = $196;$124 = $197;
      } else {
       break L42;
      }
     }
    }
   }
  }
 } while(0);
 $201 = HEAP32[$2>>2]|0;
 HEAP32[$201>>2] = $1;
 $$0181 = 1;
 return ($$0181|0);
}
function _verify_read_callback_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 11836|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($5)) + 11784|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  HEAP32[$2>>2] = 4;
  $11 = HEAPU8[2361>>0]|(HEAPU8[2361+1>>0]<<8)|(HEAPU8[2361+2>>0]<<16)|(HEAPU8[2361+3>>0]<<24);
  HEAP8[$1>>0]=$11&255;HEAP8[$1+1>>0]=($11>>8)&255;HEAP8[$1+2>>0]=($11>>16)&255;HEAP8[$1+3>>0]=$11>>24;
  $12 = HEAP32[$4>>2]|0;
  $13 = ((($12)) + 11784|0);
  HEAP32[$13>>2] = 0;
  $$0 = 0;
  return ($$0|0);
 }
 $14 = ($7|0)==(0);
 if ($14) {
  $$0 = 2;
  return ($$0|0);
 }
 $15 = HEAP32[$2>>2]|0;
 $16 = ($7>>>0)<($15>>>0);
 if ($16) {
  HEAP32[$2>>2] = $7;
 }
 $17 = ((($5)) + 11828|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[$2>>2]|0;
 _memcpy(($1|0),($18|0),($19|0))|0;
 $20 = HEAP32[$2>>2]|0;
 $21 = HEAP32[$4>>2]|0;
 $22 = ((($21)) + 11828|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + ($20)|0);
 HEAP32[$22>>2] = $24;
 $25 = ((($21)) + 11836|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) - ($20))|0;
 HEAP32[$25>>2] = $27;
 $$0 = 0;
 return ($$0|0);
}
function _verify_write_callback_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$071 = 0, $$072 = 0, $$07379 = 0, $$074 = 0, $$07589 = 0, $$186 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$1>>2]|0;
 $7 = $6 << 2;
 $8 = ($5|0)==(0);
 L1: do {
  if (!($8)) {
   $9 = ((($3)) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $$07589 = 0;
   while(1) {
    $11 = (($2) + ($$07589<<2)|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = (((($10)) + 11788|0) + ($$07589<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (_memcmp($12,$14,$7)|0);
    $16 = ($15|0)==(0);
    if (!($16)) {
     break;
    }
    $55 = (($$07589) + 1)|0;
    $56 = ($55>>>0)<($5>>>0);
    if ($56) {
     $$07589 = $55;
    } else {
     break L1;
    }
   }
   $17 = ($6|0)==(0);
   L7: do {
    if ($17) {
     $$0 = 0;$$071 = 0;$$072 = 0;
    } else {
     $18 = HEAP32[$11>>2]|0;
     $19 = HEAP32[$13>>2]|0;
     $$07379 = 0;
     while(1) {
      $20 = (($18) + ($$07379<<2)|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($19) + ($$07379<<2)|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = ($21|0)==($23|0);
      if (!($24)) {
       $$0 = $21;$$071 = $23;$$072 = $$07379;
       break L7;
      }
      $25 = (($$07379) + 1)|0;
      $26 = ($25>>>0)<($6>>>0);
      if ($26) {
       $$07379 = $25;
      } else {
       $$0 = 0;$$071 = 0;$$072 = 0;
       break;
      }
     }
    }
   } while(0);
   $27 = ((($1)) + 24|0);
   $28 = $27;
   $29 = $28;
   $30 = HEAP32[$29>>2]|0;
   $31 = (($28) + 4)|0;
   $32 = $31;
   $33 = HEAP32[$32>>2]|0;
   $34 = (_i64Add(($30|0),($33|0),($$072|0),0)|0);
   $35 = (getTempRet0() | 0);
   $36 = ((($10)) + 11840|0);
   $37 = $36;
   $38 = $37;
   HEAP32[$38>>2] = $34;
   $39 = (($37) + 4)|0;
   $40 = $39;
   HEAP32[$40>>2] = $35;
   $41 = $27;
   $42 = $41;
   $43 = HEAP32[$42>>2]|0;
   $44 = (($41) + 4)|0;
   $45 = $44;
   $46 = HEAP32[$45>>2]|0;
   $47 = (___udivdi3(($43|0),($46|0),($6|0),0)|0);
   $48 = (getTempRet0() | 0);
   $49 = ((($10)) + 11848|0);
   HEAP32[$49>>2] = $47;
   $50 = ((($10)) + 11852|0);
   HEAP32[$50>>2] = $$07589;
   $51 = ((($10)) + 11856|0);
   HEAP32[$51>>2] = $$072;
   $52 = ((($10)) + 11860|0);
   HEAP32[$52>>2] = $$071;
   $53 = ((($10)) + 11864|0);
   HEAP32[$53>>2] = $$0;
   $54 = HEAP32[$3>>2]|0;
   HEAP32[$54>>2] = 4;
   $$074 = 1;
   return ($$074|0);
  }
 } while(0);
 $57 = ((($3)) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ((($58)) + 11824|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (($60) - ($6))|0;
 HEAP32[$59>>2] = $61;
 $62 = ($5|0)==(0);
 if ($62) {
  $$074 = 0;
  return ($$074|0);
 }
 $$186 = 0;
 while(1) {
  $63 = HEAP32[$57>>2]|0;
  $64 = (((($63)) + 11788|0) + ($$186<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (($65) + ($6<<2)|0);
  $67 = ((($63)) + 11824|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $68 << 2;
  _memmove(($65|0),($66|0),($69|0))|0;
  $70 = (($$186) + 1)|0;
  $exitcond = ($70|0)==($5|0);
  if ($exitcond) {
   $$074 = 0;
   break;
  } else {
   $$186 = $70;
  }
 }
 return ($$074|0);
}
function _verify_metadata_callback_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _verify_error_callback_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = 3;
 return;
}
function _FLAC__stream_encoder_set_verify($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(1);
 if (!($4)) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ((($2)) + 4|0);
 HEAP32[$5>>2] = $1;
 $$0 = 1;
 return ($$0|0);
}
function _FLAC__stream_encoder_set_channels($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(1);
 if (!($4)) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ((($2)) + 24|0);
 HEAP32[$5>>2] = $1;
 $$0 = 1;
 return ($$0|0);
}
function _FLAC__stream_encoder_set_bits_per_sample($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(1);
 if (!($4)) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ((($2)) + 28|0);
 HEAP32[$5>>2] = $1;
 $$0 = 1;
 return ($$0|0);
}
function _FLAC__stream_encoder_set_sample_rate($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(1);
 if (!($4)) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ((($2)) + 32|0);
 HEAP32[$5>>2] = $1;
 $$0 = 1;
 return ($$0|0);
}
function _FLAC__stream_encoder_set_blocksize($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(1);
 if (!($4)) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ((($2)) + 36|0);
 HEAP32[$5>>2] = $1;
 $$0 = 1;
 return ($$0|0);
}
function _FLAC__stream_encoder_set_total_samples_estimate($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(1);
 if (!($5)) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = HEAP32[270]|0;
 $7 = (_bitshift64Shl(1,0,($6|0))|0);
 $8 = (getTempRet0() | 0);
 $9 = (_i64Add(($7|0),($8|0),-1,-1)|0);
 $10 = (getTempRet0() | 0);
 $11 = ($10>>>0)>($2>>>0);
 $12 = ($9>>>0)>($1>>>0);
 $13 = ($10|0)==($2|0);
 $14 = $13 & $12;
 $15 = $11 | $14;
 $16 = $15 ? $1 : $9;
 $17 = $15 ? $2 : $10;
 $18 = ((($3)) + 592|0);
 $19 = $18;
 $20 = $19;
 HEAP32[$20>>2] = $16;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = $17;
 $$0 = 1;
 return ($$0|0);
}
function _FLAC__stream_encoder_get_state($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _FLAC__stream_encoder_process_interleaved($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$0126$lcssa = 0, $$0126146 = 0, $$0127 = 0, $$0129 = 0, $$0133150 = 0, $$1$lcssa = 0, $$1128$lcssa = 0, $$1128145 = 0, $$1130$lcssa = 0, $$1130144 = 0, $$1134164 = 0, $$1157 = 0, $$136 = 0, $$2 = 0, $$2131 = 0, $$3$lcssa = 0, $$3132$lcssa = 0, $$3132155 = 0;
 var $$3156 = 0, $$4$lcssa = 0, $$4151 = 0, $$lcssa = 0, $$lcssa141 = 0, $$lcssa142 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond179 = 0, $exitcond179$peel = 0, $or$cond = 0, $or$cond135 = 0, $or$cond135143 = 0, $or$cond137 = 0, $or$cond137154 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($3)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($3)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0);
 $11 = ($5|0)==(2);
 $or$cond = $11 & $10;
 $12 = ((($0)) + 4|0);
 $13 = ((($0)) + 4|0);
 $14 = (($7) + 1)|0;
 if ($or$cond) {
  $$0127 = 0;$$0129 = 0;
  while(1) {
   $15 = HEAP32[$0>>2]|0;
   $16 = ((($15)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(0);
   if (!($18)) {
    $19 = HEAP32[$13>>2]|0;
    $20 = ((($19)) + 11788|0);
    $21 = ((($19)) + 7052|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (($14) - ($22))|0;
    $24 = (($2) - ($$0127))|0;
    $25 = ($23>>>0)<($24>>>0);
    $$ = $25 ? $23 : $24;
    _append_to_verify_fifo_interleaved_($20,$1,$$0127,$5,$$);
   }
   $26 = HEAP32[$12>>2]|0;
   $27 = ((($26)) + 7052|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28>>>0)<=($7>>>0);
   $30 = ($$0127>>>0)<($2>>>0);
   $or$cond135143 = $30 & $29;
   if ($or$cond135143) {
    $31 = ((($26)) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ((($26)) + 8|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ((($26)) + 40|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($26)) + 36|0);
    $38 = HEAP32[$37>>2]|0;
    $$0126146 = $28;$$1128145 = $$0127;$$1130144 = $$0129;
    while(1) {
     $39 = (($$1130144) + 1)|0;
     $40 = (($1) + ($$1130144<<2)|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = (($32) + ($$0126146<<2)|0);
     HEAP32[$42>>2] = $41;
     $43 = (($$1130144) + 2)|0;
     $44 = (($1) + ($39<<2)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = (($34) + ($$0126146<<2)|0);
     HEAP32[$46>>2] = $45;
     $47 = (($45) + ($41))|0;
     $48 = (($41) - ($45))|0;
     $49 = $47 >> 1;
     $50 = (($36) + ($$0126146<<2)|0);
     HEAP32[$50>>2] = $48;
     $51 = (($38) + ($$0126146<<2)|0);
     HEAP32[$51>>2] = $49;
     $52 = (($$0126146) + 1)|0;
     $53 = (($$1128145) + 1)|0;
     $54 = ($52>>>0)<=($7>>>0);
     $55 = ($53>>>0)<($2>>>0);
     $or$cond135 = $55 & $54;
     if ($or$cond135) {
      $$0126146 = $52;$$1128145 = $53;$$1130144 = $43;
     } else {
      $$0126$lcssa = $52;$$1128$lcssa = $53;$$1130$lcssa = $43;$$lcssa = $55;
      break;
     }
    }
   } else {
    $$0126$lcssa = $28;$$1128$lcssa = $$0127;$$1130$lcssa = $$0129;$$lcssa = $30;
   }
   HEAP32[$27>>2] = $$0126$lcssa;
   $56 = ($$0126$lcssa>>>0)>($7>>>0);
   if ($56) {
    $57 = (_process_frame_($0,0)|0);
    $58 = ($57|0)==(0);
    if ($58) {
     $$0 = 0;
     label = 30;
     break;
    }
    $59 = HEAP32[$12>>2]|0;
    $60 = ((($59)) + 4|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = (($61) + ($7<<2)|0);
    $63 = HEAP32[$62>>2]|0;
    HEAP32[$61>>2] = $63;
    $64 = ((($59)) + 8|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (($65) + ($7<<2)|0);
    $67 = HEAP32[$66>>2]|0;
    HEAP32[$65>>2] = $67;
    $68 = ((($59)) + 36|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = (($69) + ($7<<2)|0);
    $71 = HEAP32[$70>>2]|0;
    HEAP32[$69>>2] = $71;
    $72 = ((($59)) + 40|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = (($73) + ($7<<2)|0);
    $75 = HEAP32[$74>>2]|0;
    HEAP32[$73>>2] = $75;
    $76 = ((($59)) + 7052|0);
    HEAP32[$76>>2] = 1;
   }
   if ($$lcssa) {
    $$0127 = $$1128$lcssa;$$0129 = $$1130$lcssa;
   } else {
    $$0 = 1;
    label = 30;
    break;
   }
  }
  if ((label|0) == 30) {
   return ($$0|0);
  }
 }
 $77 = ($5|0)==(0);
 $78 = ($5|0)==(0);
 $exitcond179$peel = ($5|0)==(1);
 $$2 = 0;$$2131 = 0;
 while(1) {
  $79 = HEAP32[$0>>2]|0;
  $80 = ((($79)) + 4|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = ($81|0)==(0);
  if (!($82)) {
   $83 = HEAP32[$13>>2]|0;
   $84 = ((($83)) + 11788|0);
   $85 = ((($83)) + 7052|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = (($14) - ($86))|0;
   $88 = (($2) - ($$2))|0;
   $89 = ($87>>>0)<($88>>>0);
   $$136 = $89 ? $87 : $88;
   _append_to_verify_fifo_interleaved_($84,$1,$$2,$5,$$136);
  }
  $90 = HEAP32[$12>>2]|0;
  $91 = ((($90)) + 7052|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = ($92>>>0)<=($7>>>0);
  $94 = ($$2>>>0)<($2>>>0);
  $or$cond137154 = $94 & $93;
  if ($or$cond137154) {
   $$1157 = $92;$$3132155 = $$2131;$$3156 = $$2;
   while(1) {
    if ($77) {
     $$4$lcssa = $$3132155;
    } else {
     $$0133150 = 0;$$4151 = $$3132155;
     while(1) {
      $95 = (($$4151) + 1)|0;
      $96 = (($1) + ($$4151<<2)|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = (((($90)) + 4|0) + ($$0133150<<2)|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = (($99) + ($$1157<<2)|0);
      HEAP32[$100>>2] = $97;
      $101 = (($$0133150) + 1)|0;
      $exitcond = ($101|0)==($5|0);
      if ($exitcond) {
       break;
      } else {
       $$0133150 = $101;$$4151 = $95;
      }
     }
     $102 = (($5) + ($$3132155))|0;
     $$4$lcssa = $102;
    }
    $103 = (($$1157) + 1)|0;
    $104 = (($$3156) + 1)|0;
    $105 = ($103>>>0)<=($7>>>0);
    $106 = ($104>>>0)<($2>>>0);
    $or$cond137 = $106 & $105;
    if ($or$cond137) {
     $$1157 = $103;$$3132155 = $$4$lcssa;$$3156 = $104;
    } else {
     $$1$lcssa = $103;$$3$lcssa = $104;$$3132$lcssa = $$4$lcssa;$$lcssa141 = $106;
     break;
    }
   }
  } else {
   $$1$lcssa = $92;$$3$lcssa = $$2;$$3132$lcssa = $$2131;$$lcssa141 = $94;
  }
  HEAP32[$91>>2] = $$1$lcssa;
  $107 = ($$1$lcssa>>>0)>($7>>>0);
  if ($107) {
   $108 = (_process_frame_($0,0)|0);
   $109 = ($108|0)==(0);
   if ($109) {
    $$0 = 0;
    label = 30;
    break;
   }
   $110 = HEAP32[$12>>2]|0;
   if ($78) {
    $$lcssa142 = $110;
   } else {
    $111 = HEAP32[$12>>2]|0;
    $112 = ((($110)) + 4|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = (($113) + ($7<<2)|0);
    $115 = HEAP32[$114>>2]|0;
    HEAP32[$113>>2] = $115;
    if ($exitcond179$peel) {
     $$lcssa142 = $111;
    } else {
     $$1134164 = 1;
     while(1) {
      $116 = (((($111)) + 4|0) + ($$1134164<<2)|0);
      $117 = HEAP32[$116>>2]|0;
      $118 = (($117) + ($7<<2)|0);
      $119 = HEAP32[$118>>2]|0;
      HEAP32[$117>>2] = $119;
      $120 = (($$1134164) + 1)|0;
      $exitcond179 = ($120|0)==($5|0);
      if ($exitcond179) {
       $$lcssa142 = $111;
       break;
      } else {
       $$1134164 = $120;
      }
     }
    }
   }
   $121 = ((($$lcssa142)) + 7052|0);
   HEAP32[$121>>2] = 1;
  }
  if ($$lcssa141) {
   $$2 = $$3$lcssa;$$2131 = $$3132$lcssa;
  } else {
   $$0 = 1;
   label = 30;
   break;
  }
 }
 if ((label|0) == 30) {
  return ($$0|0);
 }
 return (0)|0;
}
function _append_to_verify_fifo_interleaved_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$02329 = 0, $$02428 = 0, $$02526 = 0, $$030 = 0, $$1$lcssa = 0, $$127 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond36 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==(0);
 if ($7) {
  $$0$lcssa = $6;
  HEAP32[$5>>2] = $$0$lcssa;
  return;
 }
 $8 = Math_imul($3, $2)|0;
 $9 = ($3|0)==(0);
 $$02329 = 0;$$02428 = $8;$$030 = $6;
 while(1) {
  if ($9) {
   $$1$lcssa = $$02428;
  } else {
   $$02526 = 0;$$127 = $$02428;
   while(1) {
    $10 = (($$127) + 1)|0;
    $11 = (($1) + ($$127<<2)|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = (($0) + ($$02526<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + ($$030<<2)|0);
    HEAP32[$15>>2] = $12;
    $16 = (($$02526) + 1)|0;
    $exitcond = ($16|0)==($3|0);
    if ($exitcond) {
     break;
    } else {
     $$02526 = $16;$$127 = $10;
    }
   }
   $17 = (($$02428) + ($3))|0;
   $$1$lcssa = $17;
  }
  $18 = (($$030) + 1)|0;
  $19 = (($$02329) + 1)|0;
  $exitcond36 = ($19|0)==($4|0);
  if ($exitcond36) {
   break;
  } else {
   $$02329 = $19;$$02428 = $$1$lcssa;$$030 = $18;
  }
 }
 $20 = (($6) + ($4))|0;
 $$0$lcssa = $20;
 HEAP32[$5>>2] = $$0$lcssa;
 return;
}
function _FLAC__add_metadata_block($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0151 = 0, $$0158181 = 0, $$1152178 = 0, $$2153179 = 0, $$3154183 = 0, $$5 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen(2328)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[287]|0;
 $6 = (_FLAC__bitwriter_write_raw_uint32($1,$4,$5)|0);
 $7 = ($6|0)==(0);
 if ($7) {
  $$5 = 0;
  return ($$5|0);
 }
 $8 = HEAP32[$0>>2]|0;
 $9 = HEAP32[276]|0;
 $10 = (_FLAC__bitwriter_write_raw_uint32($1,$8,$9)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $$5 = 0;
  return ($$5|0);
 }
 $12 = ((($0)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$0>>2]|0;
 $15 = ($14|0)==(4);
 if ($15) {
  $16 = ((($0)) + 16|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($13) + ($2))|0;
  $19 = (($18) - ($17))|0;
  $$0151 = $19;
 } else {
  $$0151 = $13;
 }
 $20 = HEAP32[277]|0;
 $21 = 1 << $20;
 $22 = ($$0151>>>0)<($21>>>0);
 if (!($22)) {
  $$5 = 0;
  return ($$5|0);
 }
 $23 = (_FLAC__bitwriter_write_raw_uint32($1,$$0151,$20)|0);
 $24 = ($23|0)==(0);
 if ($24) {
  $$5 = 0;
  return ($$5|0);
 }
 $25 = HEAP32[$0>>2]|0;
 L16: do {
  switch ($25|0) {
  case 0:  {
   $26 = ((($0)) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = HEAP32[289]|0;
   $29 = (_FLAC__bitwriter_write_raw_uint32($1,$27,$28)|0);
   $30 = ($29|0)==(0);
   if ($30) {
    $$5 = 0;
    return ($$5|0);
   }
   $31 = ((($0)) + 20|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = HEAP32[289]|0;
   $34 = (_FLAC__bitwriter_write_raw_uint32($1,$32,$33)|0);
   $35 = ($34|0)==(0);
   if ($35) {
    $$5 = 0;
    return ($$5|0);
   }
   $36 = ((($0)) + 24|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = HEAP32[277]|0;
   $39 = (_FLAC__bitwriter_write_raw_uint32($1,$37,$38)|0);
   $40 = ($39|0)==(0);
   if ($40) {
    $$5 = 0;
    return ($$5|0);
   }
   $41 = ((($0)) + 28|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = HEAP32[277]|0;
   $44 = (_FLAC__bitwriter_write_raw_uint32($1,$42,$43)|0);
   $45 = ($44|0)==(0);
   if ($45) {
    $$5 = 0;
    return ($$5|0);
   }
   $46 = ((($0)) + 32|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = HEAP32[269]|0;
   $49 = (_FLAC__bitwriter_write_raw_uint32($1,$47,$48)|0);
   $50 = ($49|0)==(0);
   if ($50) {
    $$5 = 0;
    return ($$5|0);
   }
   $51 = ((($0)) + 36|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (($52) + -1)|0;
   $54 = HEAP32[280]|0;
   $55 = (_FLAC__bitwriter_write_raw_uint32($1,$53,$54)|0);
   $56 = ($55|0)==(0);
   if ($56) {
    $$5 = 0;
    return ($$5|0);
   }
   $57 = ((($0)) + 40|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (($58) + -1)|0;
   $60 = HEAP32[285]|0;
   $61 = (_FLAC__bitwriter_write_raw_uint32($1,$59,$60)|0);
   $62 = ($61|0)==(0);
   if ($62) {
    $$5 = 0;
    return ($$5|0);
   }
   $63 = ((($0)) + 48|0);
   $64 = $63;
   $65 = $64;
   $66 = HEAP32[$65>>2]|0;
   $67 = (($64) + 4)|0;
   $68 = $67;
   $69 = HEAP32[$68>>2]|0;
   $70 = HEAP32[270]|0;
   $71 = (_FLAC__bitwriter_write_raw_uint64($1,$66,$69,$70)|0);
   $72 = ($71|0)==(0);
   if ($72) {
    $$5 = 0;
    return ($$5|0);
   }
   $73 = ((($0)) + 56|0);
   $74 = (_FLAC__bitwriter_write_byte_block($1,$73,16)|0);
   $75 = ($74|0)==(0);
   if ($75) {
    $$5 = 0;
    return ($$5|0);
   }
   break;
  }
  case 1:  {
   $76 = HEAP32[$12>>2]|0;
   $77 = $76 << 3;
   $78 = (_FLAC__bitwriter_write_zeroes($1,$77)|0);
   $79 = ($78|0)==(0);
   if ($79) {
    $$5 = 0;
    return ($$5|0);
   }
   break;
  }
  case 2:  {
   $80 = ((($0)) + 16|0);
   $81 = HEAP32[275]|0;
   $82 = $81 >>> 3;
   $83 = (_FLAC__bitwriter_write_byte_block($1,$80,$82)|0);
   $84 = ($83|0)==(0);
   if ($84) {
    $$5 = 0;
    return ($$5|0);
   }
   $85 = ((($0)) + 20|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = HEAP32[$12>>2]|0;
   $88 = (($87) - ($82))|0;
   $89 = (_FLAC__bitwriter_write_byte_block($1,$86,$88)|0);
   $90 = ($89|0)==(0);
   if ($90) {
    $$5 = 0;
    return ($$5|0);
   }
   break;
  }
  case 3:  {
   $91 = ((($0)) + 16|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = ($92|0)==(0);
   if (!($93)) {
    $94 = ((($0)) + 20|0);
    $95 = HEAP32[290]|0;
    $96 = HEAP32[290]|0;
    $97 = HEAP32[289]|0;
    $$1152178 = 0;
    while(1) {
     $101 = HEAP32[$94>>2]|0;
     $102 = (($101) + (($$1152178*24)|0)|0);
     $103 = $102;
     $104 = $103;
     $105 = HEAP32[$104>>2]|0;
     $106 = (($103) + 4)|0;
     $107 = $106;
     $108 = HEAP32[$107>>2]|0;
     $109 = (_FLAC__bitwriter_write_raw_uint64($1,$105,$108,$95)|0);
     $110 = ($109|0)==(0);
     if ($110) {
      $$5 = 0;
      label = 68;
      break;
     }
     $111 = HEAP32[$94>>2]|0;
     $112 = (((($111) + (($$1152178*24)|0)|0)) + 8|0);
     $113 = $112;
     $114 = $113;
     $115 = HEAP32[$114>>2]|0;
     $116 = (($113) + 4)|0;
     $117 = $116;
     $118 = HEAP32[$117>>2]|0;
     $119 = (_FLAC__bitwriter_write_raw_uint64($1,$115,$118,$96)|0);
     $120 = ($119|0)==(0);
     if ($120) {
      $$5 = 0;
      label = 68;
      break;
     }
     $121 = HEAP32[$94>>2]|0;
     $122 = (((($121) + (($$1152178*24)|0)|0)) + 16|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = (_FLAC__bitwriter_write_raw_uint32($1,$123,$97)|0);
     $125 = ($124|0)==(0);
     $99 = (($$1152178) + 1)|0;
     if ($125) {
      $$5 = 0;
      label = 68;
      break;
     }
     $98 = HEAP32[$91>>2]|0;
     $100 = ($99>>>0)<($98>>>0);
     if ($100) {
      $$1152178 = $99;
     } else {
      break L16;
     }
    }
    if ((label|0) == 68) {
     return ($$5|0);
    }
   }
   break;
  }
  case 4:  {
   $126 = (_FLAC__bitwriter_write_raw_uint32_little_endian($1,$2)|0);
   $127 = ($126|0)==(0);
   if ($127) {
    $$5 = 0;
    return ($$5|0);
   }
   $128 = (_FLAC__bitwriter_write_byte_block($1,2328,$2)|0);
   $129 = ($128|0)==(0);
   if ($129) {
    $$5 = 0;
    return ($$5|0);
   }
   $130 = ((($0)) + 24|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = (_FLAC__bitwriter_write_raw_uint32_little_endian($1,$131)|0);
   $133 = ($132|0)==(0);
   if ($133) {
    $$5 = 0;
    return ($$5|0);
   }
   $134 = HEAP32[$130>>2]|0;
   $135 = ($134|0)==(0);
   if (!($135)) {
    $136 = ((($0)) + 28|0);
    $$2153179 = 0;
    while(1) {
     $140 = HEAP32[$136>>2]|0;
     $141 = (($140) + ($$2153179<<3)|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = (_FLAC__bitwriter_write_raw_uint32_little_endian($1,$142)|0);
     $144 = ($143|0)==(0);
     if ($144) {
      $$5 = 0;
      label = 68;
      break;
     }
     $145 = HEAP32[$136>>2]|0;
     $146 = (((($145) + ($$2153179<<3)|0)) + 4|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = (($145) + ($$2153179<<3)|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = (_FLAC__bitwriter_write_byte_block($1,$147,$149)|0);
     $151 = ($150|0)==(0);
     $138 = (($$2153179) + 1)|0;
     if ($151) {
      $$5 = 0;
      label = 68;
      break;
     }
     $137 = HEAP32[$130>>2]|0;
     $139 = ($138>>>0)<($137>>>0);
     if ($139) {
      $$2153179 = $138;
     } else {
      break L16;
     }
    }
    if ((label|0) == 68) {
     return ($$5|0);
    }
   }
   break;
  }
  case 5:  {
   $152 = ((($0)) + 16|0);
   $153 = HEAP32[273]|0;
   $154 = $153 >>> 3;
   $155 = (_FLAC__bitwriter_write_byte_block($1,$152,$154)|0);
   $156 = ($155|0)==(0);
   if ($156) {
    $$5 = 0;
    return ($$5|0);
   }
   $157 = ((($0)) + 152|0);
   $158 = $157;
   $159 = $158;
   $160 = HEAP32[$159>>2]|0;
   $161 = (($158) + 4)|0;
   $162 = $161;
   $163 = HEAP32[$162>>2]|0;
   $164 = HEAP32[290]|0;
   $165 = (_FLAC__bitwriter_write_raw_uint64($1,$160,$163,$164)|0);
   $166 = ($165|0)==(0);
   if ($166) {
    $$5 = 0;
    return ($$5|0);
   }
   $167 = ((($0)) + 160|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = ($168|0)!=(0);
   $170 = $169&1;
   $171 = HEAP32[287]|0;
   $172 = (_FLAC__bitwriter_write_raw_uint32($1,$170,$171)|0);
   $173 = ($172|0)==(0);
   if ($173) {
    $$5 = 0;
    return ($$5|0);
   }
   $174 = HEAP32[274]|0;
   $175 = (_FLAC__bitwriter_write_zeroes($1,$174)|0);
   $176 = ($175|0)==(0);
   if ($176) {
    $$5 = 0;
    return ($$5|0);
   }
   $177 = ((($0)) + 164|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = HEAP32[281]|0;
   $180 = (_FLAC__bitwriter_write_raw_uint32($1,$178,$179)|0);
   $181 = ($180|0)==(0);
   if ($181) {
    $$5 = 0;
    return ($$5|0);
   }
   $182 = HEAP32[$177>>2]|0;
   $183 = ($182|0)==(0);
   if (!($183)) {
    $184 = ((($0)) + 168|0);
    $185 = HEAP32[290]|0;
    $186 = HEAP32[281]|0;
    $187 = HEAP32[271]|0;
    $188 = $187 >>> 3;
    $189 = HEAP32[287]|0;
    $190 = HEAP32[287]|0;
    $191 = HEAP32[272]|0;
    $192 = HEAP32[281]|0;
    $193 = HEAP32[290]|0;
    $194 = HEAP32[281]|0;
    $195 = HEAP32[277]|0;
    $$3154183 = 0;
    L98: while(1) {
     $196 = HEAP32[$184>>2]|0;
     $197 = (($196) + ($$3154183<<5)|0);
     $198 = $197;
     $199 = $198;
     $200 = HEAP32[$199>>2]|0;
     $201 = (($198) + 4)|0;
     $202 = $201;
     $203 = HEAP32[$202>>2]|0;
     $204 = (_FLAC__bitwriter_write_raw_uint64($1,$200,$203,$185)|0);
     $205 = ($204|0)==(0);
     if ($205) {
      $$5 = 0;
      label = 68;
      break;
     }
     $206 = (((($196) + ($$3154183<<5)|0)) + 8|0);
     $207 = HEAP8[$206>>0]|0;
     $208 = $207&255;
     $209 = (_FLAC__bitwriter_write_raw_uint32($1,$208,$186)|0);
     $210 = ($209|0)==(0);
     if ($210) {
      $$5 = 0;
      label = 68;
      break;
     }
     $211 = (((($196) + ($$3154183<<5)|0)) + 9|0);
     $212 = (_FLAC__bitwriter_write_byte_block($1,$211,$188)|0);
     $213 = ($212|0)==(0);
     if ($213) {
      $$5 = 0;
      label = 68;
      break;
     }
     $214 = (((($196) + ($$3154183<<5)|0)) + 22|0);
     $215 = HEAP8[$214>>0]|0;
     $216 = $215 & 1;
     $217 = $216&255;
     $218 = (_FLAC__bitwriter_write_raw_uint32($1,$217,$189)|0);
     $219 = ($218|0)==(0);
     if ($219) {
      $$5 = 0;
      label = 68;
      break;
     }
     $220 = HEAP8[$214>>0]|0;
     $221 = ($220&255) >>> 1;
     $222 = $221 & 1;
     $223 = $222&255;
     $224 = (_FLAC__bitwriter_write_raw_uint32($1,$223,$190)|0);
     $225 = ($224|0)==(0);
     if ($225) {
      $$5 = 0;
      label = 68;
      break;
     }
     $226 = (_FLAC__bitwriter_write_zeroes($1,$191)|0);
     $227 = ($226|0)==(0);
     if ($227) {
      $$5 = 0;
      label = 68;
      break;
     }
     $228 = (((($196) + ($$3154183<<5)|0)) + 23|0);
     $229 = HEAP8[$228>>0]|0;
     $230 = $229&255;
     $231 = (_FLAC__bitwriter_write_raw_uint32($1,$230,$192)|0);
     $232 = ($231|0)==(0);
     if ($232) {
      $$5 = 0;
      label = 68;
      break;
     }
     $233 = HEAP8[$228>>0]|0;
     $234 = ($233<<24>>24)==(0);
     if (!($234)) {
      $235 = (((($196) + ($$3154183<<5)|0)) + 24|0);
      $$0158181 = 0;
      while(1) {
       $240 = HEAP32[$235>>2]|0;
       $241 = (($240) + ($$0158181<<4)|0);
       $242 = $241;
       $243 = $242;
       $244 = HEAP32[$243>>2]|0;
       $245 = (($242) + 4)|0;
       $246 = $245;
       $247 = HEAP32[$246>>2]|0;
       $248 = (_FLAC__bitwriter_write_raw_uint64($1,$244,$247,$193)|0);
       $249 = ($248|0)==(0);
       if ($249) {
        $$5 = 0;
        label = 68;
        break L98;
       }
       $250 = (((($240) + ($$0158181<<4)|0)) + 8|0);
       $251 = HEAP8[$250>>0]|0;
       $252 = $251&255;
       $253 = (_FLAC__bitwriter_write_raw_uint32($1,$252,$194)|0);
       $254 = ($253|0)==(0);
       if ($254) {
        $$5 = 0;
        label = 68;
        break L98;
       }
       $255 = (_FLAC__bitwriter_write_zeroes($1,$195)|0);
       $256 = ($255|0)==(0);
       $238 = (($$0158181) + 1)|0;
       if ($256) {
        $$5 = 0;
        label = 68;
        break L98;
       }
       $236 = HEAP8[$228>>0]|0;
       $237 = $236&255;
       $239 = ($238>>>0)<($237>>>0);
       if ($239) {
        $$0158181 = $238;
       } else {
        break;
       }
      }
     }
     $257 = (($$3154183) + 1)|0;
     $258 = HEAP32[$177>>2]|0;
     $259 = ($257>>>0)<($258>>>0);
     if ($259) {
      $$3154183 = $257;
     } else {
      break L16;
     }
    }
    if ((label|0) == 68) {
     return ($$5|0);
    }
   }
   break;
  }
  case 6:  {
   $260 = ((($0)) + 16|0);
   $261 = HEAP32[$260>>2]|0;
   $262 = HEAP32[275]|0;
   $263 = (_FLAC__bitwriter_write_raw_uint32($1,$261,$262)|0);
   $264 = ($263|0)==(0);
   if ($264) {
    $$5 = 0;
    return ($$5|0);
   }
   $265 = ((($0)) + 20|0);
   $266 = HEAP32[$265>>2]|0;
   $267 = (_strlen($266)|0);
   $268 = HEAP32[275]|0;
   $269 = (_FLAC__bitwriter_write_raw_uint32($1,$267,$268)|0);
   $270 = ($269|0)==(0);
   if ($270) {
    $$5 = 0;
    return ($$5|0);
   }
   $271 = HEAP32[$265>>2]|0;
   $272 = (_FLAC__bitwriter_write_byte_block($1,$271,$267)|0);
   $273 = ($272|0)==(0);
   if ($273) {
    $$5 = 0;
    return ($$5|0);
   }
   $274 = ((($0)) + 24|0);
   $275 = HEAP32[$274>>2]|0;
   $276 = (_strlen($275)|0);
   $277 = HEAP32[275]|0;
   $278 = (_FLAC__bitwriter_write_raw_uint32($1,$276,$277)|0);
   $279 = ($278|0)==(0);
   if ($279) {
    $$5 = 0;
    return ($$5|0);
   }
   $280 = HEAP32[$274>>2]|0;
   $281 = (_FLAC__bitwriter_write_byte_block($1,$280,$276)|0);
   $282 = ($281|0)==(0);
   if ($282) {
    $$5 = 0;
    return ($$5|0);
   }
   $283 = ((($0)) + 28|0);
   $284 = HEAP32[$283>>2]|0;
   $285 = HEAP32[275]|0;
   $286 = (_FLAC__bitwriter_write_raw_uint32($1,$284,$285)|0);
   $287 = ($286|0)==(0);
   if ($287) {
    $$5 = 0;
    return ($$5|0);
   }
   $288 = ((($0)) + 32|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = HEAP32[275]|0;
   $291 = (_FLAC__bitwriter_write_raw_uint32($1,$289,$290)|0);
   $292 = ($291|0)==(0);
   if ($292) {
    $$5 = 0;
    return ($$5|0);
   }
   $293 = ((($0)) + 36|0);
   $294 = HEAP32[$293>>2]|0;
   $295 = HEAP32[275]|0;
   $296 = (_FLAC__bitwriter_write_raw_uint32($1,$294,$295)|0);
   $297 = ($296|0)==(0);
   if ($297) {
    $$5 = 0;
    return ($$5|0);
   }
   $298 = ((($0)) + 40|0);
   $299 = HEAP32[$298>>2]|0;
   $300 = HEAP32[275]|0;
   $301 = (_FLAC__bitwriter_write_raw_uint32($1,$299,$300)|0);
   $302 = ($301|0)==(0);
   if ($302) {
    $$5 = 0;
    return ($$5|0);
   }
   $303 = ((($0)) + 44|0);
   $304 = HEAP32[$303>>2]|0;
   $305 = HEAP32[275]|0;
   $306 = (_FLAC__bitwriter_write_raw_uint32($1,$304,$305)|0);
   $307 = ($306|0)==(0);
   if ($307) {
    $$5 = 0;
    return ($$5|0);
   }
   $308 = ((($0)) + 48|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[$303>>2]|0;
   $311 = (_FLAC__bitwriter_write_byte_block($1,$309,$310)|0);
   $312 = ($311|0)==(0);
   if ($312) {
    $$5 = 0;
    return ($$5|0);
   }
   break;
  }
  default: {
   $313 = ((($0)) + 16|0);
   $314 = HEAP32[$313>>2]|0;
   $315 = HEAP32[$12>>2]|0;
   $316 = (_FLAC__bitwriter_write_byte_block($1,$314,$315)|0);
   $317 = ($316|0)==(0);
   if ($317) {
    $$5 = 0;
    return ($$5|0);
   }
  }
  }
 } while(0);
 $$5 = 1;
 return ($$5|0);
}
function _FLAC__frame_add_header($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $$0$clear = 0, $$044 = 0, $$045 = 0, $$046 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$48 = 0, $$49 = 0, $$50 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $or$cond = 0, $spec$select = 0, $spec$select51 = 0, $switch$split102D = 0, $switch$split12D = 0, $switch$split132D = 0, $switch$split162D = 0, $switch$split192D = 0, $switch$split222D = 0, $switch$split252D = 0, $switch$split282D = 0, $switch$split2D = 0, $switch$split312D = 0, $switch$split342D = 0, $switch$split372D = 0, $switch$split402D = 0, $switch$split42D = 0, $switch$split72D = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = HEAP32[278]|0;
 $4 = HEAP32[279]|0;
 $5 = (_FLAC__bitwriter_write_raw_uint32($1,$3,$4)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $$046 = 0;
  STACKTOP = sp;return ($$046|0);
 }
 $7 = HEAP32[287]|0;
 $8 = (_FLAC__bitwriter_write_raw_uint32($1,0,$7)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $$046 = 0;
  STACKTOP = sp;return ($$046|0);
 }
 $10 = ((($0)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 $13 = $12&1;
 $14 = HEAP32[287]|0;
 $15 = (_FLAC__bitwriter_write_raw_uint32($1,$13,$14)|0);
 $16 = ($15|0)==(0);
 if ($16) {
  $$046 = 0;
  STACKTOP = sp;return ($$046|0);
 }
 $17 = HEAP32[$0>>2]|0;
 $switch$split2D = ($17|0)<(2048);
 L10: do {
  if ($switch$split2D) {
   switch ($17|0) {
   case 192:  {
    $$044 = 0;$$045 = 1;
    break L10;
    break;
   }
   case 576:  {
    $$044 = 0;$$045 = 2;
    break L10;
    break;
   }
   case 1152:  {
    $$044 = 0;$$045 = 3;
    break L10;
    break;
   }
   case 256:  {
    $$044 = 0;$$045 = 8;
    break L10;
    break;
   }
   case 512:  {
    $$044 = 0;$$045 = 9;
    break L10;
    break;
   }
   case 1024:  {
    $$044 = 0;$$045 = 10;
    break L10;
    break;
   }
   default: {
    label = 17;
    break L10;
   }
   }
  } else {
   $switch$split42D = ($17|0)<(4608);
   if ($switch$split42D) {
    switch ($17|0) {
    case 2304:  {
     $$044 = 0;$$045 = 4;
     break L10;
     break;
    }
    case 2048:  {
     $$044 = 0;$$045 = 11;
     break L10;
     break;
    }
    case 4096:  {
     $$044 = 0;$$045 = 12;
     break L10;
     break;
    }
    default: {
     label = 17;
     break L10;
    }
    }
   }
   $switch$split132D = ($17|0)<(16384);
   if ($switch$split132D) {
    $switch$split282D = ($17|0)<(8192);
    if ($switch$split282D) {
     switch ($17|0) {
     case 4608:  {
      break;
     }
     default: {
      label = 17;
      break L10;
     }
     }
     $$044 = 0;$$045 = 5;
     break;
    } else {
     switch ($17|0) {
     case 8192:  {
      break;
     }
     default: {
      label = 17;
      break L10;
     }
     }
     $$044 = 0;$$045 = 13;
     break;
    }
   } else {
    $switch$split312D = ($17|0)<(32768);
    if ($switch$split312D) {
     switch ($17|0) {
     case 16384:  {
      break;
     }
     default: {
      label = 17;
      break L10;
     }
     }
     $$044 = 0;$$045 = 14;
     break;
    } else {
     switch ($17|0) {
     case 32768:  {
      break;
     }
     default: {
      label = 17;
      break L10;
     }
     }
     $$044 = 0;$$045 = 15;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 17) {
  $18 = ($17>>>0)<(257);
  $$ = $18 ? 6 : 7;
  $$044 = $$;$$045 = $$;
 }
 $19 = HEAP32[284]|0;
 $20 = (_FLAC__bitwriter_write_raw_uint32($1,$$045,$19)|0);
 $21 = ($20|0)==(0);
 if ($21) {
  $$046 = 0;
  STACKTOP = sp;return ($$046|0);
 }
 $22 = ((($0)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $switch$split12D = ($23|0)<(44100);
 L45: do {
  if ($switch$split12D) {
   $switch$split72D = ($23|0)<(22050);
   if ($switch$split72D) {
    $switch$split162D = ($23|0)<(16000);
    if ($switch$split162D) {
     switch ($23|0) {
     case 8000:  {
      break;
     }
     default: {
      label = 30;
      break L45;
     }
     }
     $$0 = 0;$$1 = 4;
     break;
    } else {
     switch ($23|0) {
     case 16000:  {
      break;
     }
     default: {
      label = 30;
      break L45;
     }
     }
     $$0 = 0;$$1 = 5;
     break;
    }
   }
   $switch$split192D = ($23|0)<(24000);
   if ($switch$split192D) {
    switch ($23|0) {
    case 22050:  {
     break;
    }
    default: {
     label = 30;
     break L45;
    }
    }
    $$0 = 0;$$1 = 6;
    break;
   }
   $switch$split342D = ($23|0)<(32000);
   if ($switch$split342D) {
    switch ($23|0) {
    case 24000:  {
     break;
    }
    default: {
     label = 30;
     break L45;
    }
    }
    $$0 = 0;$$1 = 7;
    break;
   } else {
    switch ($23|0) {
    case 32000:  {
     break;
    }
    default: {
     label = 30;
     break L45;
    }
    }
    $$0 = 0;$$1 = 8;
    break;
   }
  } else {
   $switch$split102D = ($23|0)<(96000);
   if ($switch$split102D) {
    $switch$split222D = ($23|0)<(48000);
    if ($switch$split222D) {
     switch ($23|0) {
     case 44100:  {
      break;
     }
     default: {
      label = 30;
      break L45;
     }
     }
     $$0 = 0;$$1 = 9;
     break;
    }
    $switch$split372D = ($23|0)<(88200);
    if (!($switch$split372D)) {
     switch ($23|0) {
     case 88200:  {
      $$0 = 0;$$1 = 1;
      break L45;
      break;
     }
     default: {
      label = 30;
      break L45;
     }
     }
    }
    switch ($23|0) {
    case 48000:  {
     break;
    }
    default: {
     label = 30;
     break L45;
    }
    }
    $$0 = 0;$$1 = 10;
    break;
   }
   $switch$split252D = ($23|0)<(176400);
   if ($switch$split252D) {
    switch ($23|0) {
    case 96000:  {
     break;
    }
    default: {
     label = 30;
     break L45;
    }
    }
    $$0 = 0;$$1 = 11;
    break;
   }
   $switch$split402D = ($23|0)<(192000);
   if ($switch$split402D) {
    switch ($23|0) {
    case 176400:  {
     break;
    }
    default: {
     label = 30;
     break L45;
    }
    }
    $$0 = 0;$$1 = 2;
    break;
   } else {
    switch ($23|0) {
    case 192000:  {
     break;
    }
    default: {
     label = 30;
     break L45;
    }
    }
    $$0 = 0;$$1 = 3;
    break;
   }
  }
 } while(0);
 if ((label|0) == 30) {
  $24 = ($23>>>0)<(255001);
  $25 = (($23>>>0) % 1000)&-1;
  $26 = ($25|0)==(0);
  $or$cond = $24 & $26;
  if ($or$cond) {
   $$0 = 12;$$1 = 12;
  } else {
   $27 = (($23>>>0) % 10)&-1;
   $28 = ($27|0)==(0);
   $29 = ($23>>>0)<(65536);
   $$48 = $29 ? 13 : 0;
   $$49 = $29 ? 13 : 0;
   $spec$select = $28 ? 14 : $$48;
   $spec$select51 = $28 ? 14 : $$49;
   $$0 = $spec$select51;$$1 = $spec$select;
  }
 }
 $30 = HEAP32[284]|0;
 $31 = (_FLAC__bitwriter_write_raw_uint32($1,$$1,$30)|0);
 $32 = ($31|0)==(0);
 if ($32) {
  $$046 = 0;
  STACKTOP = sp;return ($$046|0);
 }
 $33 = ((($0)) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 switch ($34|0) {
 case 0:  {
  $35 = ((($0)) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + -1)|0;
  $$2 = $37;
  break;
 }
 case 1:  {
  $$2 = 8;
  break;
 }
 case 2:  {
  $$2 = 9;
  break;
 }
 case 3:  {
  $$2 = 10;
  break;
 }
 default: {
  $$2 = $$1;
 }
 }
 $38 = HEAP32[284]|0;
 $39 = (_FLAC__bitwriter_write_raw_uint32($1,$$2,$38)|0);
 $40 = ($39|0)==(0);
 if ($40) {
  $$046 = 0;
  STACKTOP = sp;return ($$046|0);
 }
 $41 = ((($0)) + 16|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($42) + -8)|0;
 $44 = $43 >>> 2;
 $45 = $43 << 30;
 $46 = $44 | $45;
 switch ($46|0) {
 case 0:  {
  $$3 = 1;
  break;
 }
 case 1:  {
  $$3 = 2;
  break;
 }
 case 2:  {
  $$3 = 4;
  break;
 }
 case 3:  {
  $$3 = 5;
  break;
 }
 case 4:  {
  $$3 = 6;
  break;
 }
 default: {
  $$3 = 0;
 }
 }
 $47 = HEAP32[280]|0;
 $48 = (_FLAC__bitwriter_write_raw_uint32($1,$$3,$47)|0);
 $49 = ($48|0)==(0);
 if ($49) {
  $$046 = 0;
  STACKTOP = sp;return ($$046|0);
 }
 $50 = HEAP32[287]|0;
 $51 = (_FLAC__bitwriter_write_raw_uint32($1,0,$50)|0);
 $52 = ($51|0)==(0);
 if ($52) {
  $$046 = 0;
  STACKTOP = sp;return ($$046|0);
 }
 $53 = HEAP32[$10>>2]|0;
 $54 = ($53|0)==(0);
 $55 = ((($0)) + 24|0);
 if ($54) {
  $56 = HEAP32[$55>>2]|0;
  $57 = (_FLAC__bitwriter_write_utf8_uint32($1,$56)|0);
  $58 = ($57|0)==(0);
  if ($58) {
   $$046 = 0;
   STACKTOP = sp;return ($$046|0);
  }
 } else {
  $59 = $55;
  $60 = $59;
  $61 = HEAP32[$60>>2]|0;
  $62 = (($59) + 4)|0;
  $63 = $62;
  $64 = HEAP32[$63>>2]|0;
  $65 = (_FLAC__bitwriter_write_utf8_uint64($1,$61,$64)|0);
  $66 = ($65|0)==(0);
  if ($66) {
   $$046 = 0;
   STACKTOP = sp;return ($$046|0);
  }
 }
 $67 = ($$044|0)==(0);
 if (!($67)) {
  $68 = HEAP32[$0>>2]|0;
  $69 = (($68) + -1)|0;
  $70 = ($$044|0)==(6);
  $71 = $70 ? 8 : 16;
  $72 = (_FLAC__bitwriter_write_raw_uint32($1,$69,$71)|0);
  $73 = ($72|0)==(0);
  if ($73) {
   $$046 = 0;
   STACKTOP = sp;return ($$046|0);
  }
 }
 $$0$clear = $$0 & 15;
 switch ($$0$clear<<24>>24) {
 case 12:  {
  $74 = HEAP32[$22>>2]|0;
  $75 = (($74>>>0) / 1000)&-1;
  $76 = (_FLAC__bitwriter_write_raw_uint32($1,$75,8)|0);
  $77 = ($76|0)==(0);
  if ($77) {
   $$046 = 0;
   STACKTOP = sp;return ($$046|0);
  }
  break;
 }
 case 13:  {
  $78 = HEAP32[$22>>2]|0;
  $79 = (_FLAC__bitwriter_write_raw_uint32($1,$78,16)|0);
  $80 = ($79|0)==(0);
  if ($80) {
   $$046 = 0;
   STACKTOP = sp;return ($$046|0);
  }
  break;
 }
 case 14:  {
  $81 = HEAP32[$22>>2]|0;
  $82 = (($81>>>0) / 10)&-1;
  $83 = (_FLAC__bitwriter_write_raw_uint32($1,$82,16)|0);
  $84 = ($83|0)==(0);
  if ($84) {
   $$046 = 0;
   STACKTOP = sp;return ($$046|0);
  }
  break;
 }
 default: {
 }
 }
 $85 = (_FLAC__bitwriter_get_write_crc8($1,$2)|0);
 $86 = ($85|0)==(0);
 if ($86) {
  $$046 = 0;
  STACKTOP = sp;return ($$046|0);
 }
 $87 = HEAP8[$2>>0]|0;
 $88 = $87&255;
 $89 = HEAP32[281]|0;
 $90 = (_FLAC__bitwriter_write_raw_uint32($1,$88,$89)|0);
 $91 = ($90|0)!=(0);
 $$50 = $91&1;
 $$046 = $$50;
 STACKTOP = sp;return ($$046|0);
}
function _FLAC__subframe_add_constant($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[1392]|0;
 $5 = ($2|0)!=(0);
 $6 = $5&1;
 $7 = $4 | $6;
 $8 = HEAP32[287]|0;
 $9 = HEAP32[286]|0;
 $10 = (($9) + ($8))|0;
 $11 = HEAP32[287]|0;
 $12 = (($10) + ($11))|0;
 $13 = (_FLAC__bitwriter_write_raw_uint32($3,$7,$12)|0);
 $14 = ($13|0)==(0);
 if ($14) {
  $21 = 0;
  return ($21|0);
 }
 if ($5) {
  $15 = (($2) + -1)|0;
  $16 = (_FLAC__bitwriter_write_unary_unsigned($3,$15)|0);
  $17 = ($16|0)==(0);
  if ($17) {
   $21 = 0;
   return ($21|0);
  }
 }
 $18 = HEAP32[$0>>2]|0;
 $19 = (_FLAC__bitwriter_write_raw_int32($3,$18,$1)|0);
 $20 = ($19|0)!=(0);
 $phitmp = $20&1;
 $21 = $phitmp;
 return ($21|0);
}
function _FLAC__subframe_add_fixed($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$023 = 0, $$024 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = HEAP32[289]|0;
 $6 = ((($0)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 << 1;
 $9 = ($3|0)!=(0);
 $10 = $9&1;
 $11 = $5 | $10;
 $12 = $11 | $8;
 $13 = HEAP32[287]|0;
 $14 = HEAP32[286]|0;
 $15 = (($14) + ($13))|0;
 $16 = HEAP32[287]|0;
 $17 = (($15) + ($16))|0;
 $18 = (_FLAC__bitwriter_write_raw_uint32($4,$12,$17)|0);
 $19 = ($18|0)==(0);
 if ($19) {
  $$023 = 0;
  return ($$023|0);
 }
 if ($9) {
  $20 = (($3) + -1)|0;
  $21 = (_FLAC__bitwriter_write_unary_unsigned($4,$20)|0);
  $22 = ($21|0)==(0);
  if ($22) {
   $$023 = 0;
   return ($$023|0);
  }
 }
 $23 = HEAP32[$6>>2]|0;
 $24 = ($23|0)==(0);
 L8: do {
  if (!($24)) {
   $$024 = 0;
   while(1) {
    $28 = (((($0)) + 16|0) + ($$024<<2)|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (_FLAC__bitwriter_write_raw_int32($4,$29,$2)|0);
    $31 = ($30|0)==(0);
    $26 = (($$024) + 1)|0;
    if ($31) {
     $$023 = 0;
     break;
    }
    $25 = HEAP32[$6>>2]|0;
    $27 = ($26>>>0)<($25>>>0);
    if ($27) {
     $$024 = $26;
    } else {
     break L8;
    }
   }
   return ($$023|0);
  }
 } while(0);
 $32 = (_add_entropy_coding_method_($4,$0)|0);
 $33 = ($32|0)==(0);
 if ($33) {
  $$023 = 0;
  return ($$023|0);
 }
 $34 = HEAP32[$0>>2]|0;
 $switch = ($34>>>0)<(2);
 if ($switch) {
  $35 = ((($0)) + 32|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = HEAP32[$6>>2]|0;
  $38 = ((($0)) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = HEAP32[$39>>2]|0;
  $41 = ((($39)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ((($0)) + 4|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($34|0)==(1);
  $46 = $45&1;
  $47 = (_add_residual_partitioned_rice_($4,$36,$1,$37,$40,$42,$44,$46)|0);
  $48 = ($47|0)==(0);
  if ($48) {
   $$023 = 0;
   return ($$023|0);
  }
 }
 $$023 = 1;
 return ($$023|0);
}
function _add_entropy_coding_method_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[288]|0;
 $4 = (_FLAC__bitwriter_write_raw_uint32($0,$2,$3)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = HEAP32[$1>>2]|0;
 $switch = ($6>>>0)<(2);
 if ($switch) {
  $7 = ((($1)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[284]|0;
  $10 = (_FLAC__bitwriter_write_raw_uint32($0,$8,$9)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $$0 = 1;
 return ($$0|0);
}
function _add_residual_partitioned_rice_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$08193 = 0, $$08290 = 0, $$08392 = 0, $$08489 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $8 = ($7|0)!=(0);
 $9 = HEAP32[285]|0;
 $10 = HEAP32[284]|0;
 $11 = $8 ? $9 : $10;
 $12 = HEAP32[283]|0;
 $13 = HEAP32[282]|0;
 $14 = $8 ? $12 : $13;
 $15 = ($6|0)==(0);
 if ($15) {
  $16 = HEAP32[$5>>2]|0;
  $17 = ($16|0)==(0);
  L3: do {
   if ($17) {
    $18 = HEAP32[$4>>2]|0;
    $19 = (_FLAC__bitwriter_write_raw_uint32($0,$18,$11)|0);
    $20 = ($19|0)==(0);
    if ($20) {
     $$2 = 0;
     return ($$2|0);
    }
    $21 = HEAP32[$4>>2]|0;
    $22 = (_FLAC__bitwriter_write_rice_signed_block($0,$1,$2,$21)|0);
    $23 = ($22|0)==(0);
    if ($23) {
     $$2 = 0;
     return ($$2|0);
    }
   } else {
    $24 = (_FLAC__bitwriter_write_raw_uint32($0,$14,$11)|0);
    $25 = ($24|0)==(0);
    if ($25) {
     $$2 = 0;
     return ($$2|0);
    }
    $26 = HEAP32[$5>>2]|0;
    $27 = HEAP32[285]|0;
    $28 = (_FLAC__bitwriter_write_raw_uint32($0,$26,$27)|0);
    $29 = ($28|0)==(0);
    if ($29) {
     $$2 = 0;
     return ($$2|0);
    }
    $30 = ($2|0)==(0);
    if (!($30)) {
     $$08489 = 0;
     while(1) {
      $33 = (($1) + ($$08489<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = HEAP32[$5>>2]|0;
      $36 = (_FLAC__bitwriter_write_raw_int32($0,$34,$35)|0);
      $37 = ($36|0)==(0);
      $31 = (($$08489) + 1)|0;
      if ($37) {
       $$2 = 0;
       break;
      }
      $32 = ($31>>>0)<($2>>>0);
      if ($32) {
       $$08489 = $31;
      } else {
       break L3;
      }
     }
     return ($$2|0);
    }
   }
  } while(0);
  $$2 = 1;
  return ($$2|0);
 }
 $38 = (($3) + ($2))|0;
 $39 = $38 >>> $6;
 $40 = 1 << $6;
 $41 = HEAP32[285]|0;
 $$08193 = 0;$$08392 = 0;
 L24: while(1) {
  $42 = ($$08392|0)==(0);
  $43 = $42 ? $3 : 0;
  $spec$select = (($39) - ($43))|0;
  $44 = (($spec$select) + ($$08193))|0;
  $45 = (($5) + ($$08392<<2)|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($46|0)==(0);
  if ($47) {
   $48 = (($4) + ($$08392<<2)|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (_FLAC__bitwriter_write_raw_uint32($0,$49,$11)|0);
   $51 = ($50|0)==(0);
   if ($51) {
    $$2 = 0;
    label = 23;
    break;
   }
   $52 = (($1) + ($$08193<<2)|0);
   $53 = HEAP32[$48>>2]|0;
   $54 = (_FLAC__bitwriter_write_rice_signed_block($0,$52,$spec$select,$53)|0);
   $55 = ($54|0)==(0);
   if ($55) {
    $$2 = 0;
    label = 23;
    break;
   }
  } else {
   $56 = (_FLAC__bitwriter_write_raw_uint32($0,$14,$11)|0);
   $57 = ($56|0)==(0);
   if ($57) {
    $$2 = 0;
    label = 23;
    break;
   }
   $58 = HEAP32[$45>>2]|0;
   $59 = (_FLAC__bitwriter_write_raw_uint32($0,$58,$41)|0);
   $60 = ($59|0)==(0);
   if ($60) {
    $$2 = 0;
    label = 23;
    break;
   }
   $61 = ($$08193>>>0)<($44>>>0);
   if ($61) {
    $$08290 = $$08193;
    while(1) {
     $64 = (($1) + ($$08290<<2)|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = HEAP32[$45>>2]|0;
     $67 = (_FLAC__bitwriter_write_raw_int32($0,$65,$66)|0);
     $68 = ($67|0)==(0);
     $62 = (($$08290) + 1)|0;
     if ($68) {
      $$2 = 0;
      label = 23;
      break L24;
     }
     $63 = ($62>>>0)<($44>>>0);
     if ($63) {
      $$08290 = $62;
     } else {
      break;
     }
    }
   }
  }
  $69 = (($$08392) + 1)|0;
  $70 = ($69>>>0)<($40>>>0);
  if ($70) {
   $$08193 = $44;$$08392 = $69;
  } else {
   $$2 = 1;
   label = 23;
   break;
  }
 }
 if ((label|0) == 23) {
  return ($$2|0);
 }
 return (0)|0;
}
function _FLAC__subframe_add_lpc($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$032 = 0, $$035 = 0, $$134 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = HEAP32[290]|0;
 $6 = ((($0)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 << 1;
 $9 = (($8) + -2)|0;
 $10 = ($3|0)!=(0);
 $11 = $10&1;
 $12 = $5 | $11;
 $13 = $12 | $9;
 $14 = HEAP32[287]|0;
 $15 = HEAP32[286]|0;
 $16 = (($15) + ($14))|0;
 $17 = HEAP32[287]|0;
 $18 = (($16) + ($17))|0;
 $19 = (_FLAC__bitwriter_write_raw_uint32($4,$13,$18)|0);
 $20 = ($19|0)==(0);
 if ($20) {
  $$032 = 0;
  return ($$032|0);
 }
 if ($10) {
  $21 = (($3) + -1)|0;
  $22 = (_FLAC__bitwriter_write_unary_unsigned($4,$21)|0);
  $23 = ($22|0)==(0);
  if ($23) {
   $$032 = 0;
   return ($$032|0);
  }
 }
 $24 = HEAP32[$6>>2]|0;
 $25 = ($24|0)==(0);
 L8: do {
  if (!($25)) {
   $$035 = 0;
   while(1) {
    $29 = (((($0)) + 152|0) + ($$035<<2)|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (_FLAC__bitwriter_write_raw_int32($4,$30,$2)|0);
    $32 = ($31|0)==(0);
    $27 = (($$035) + 1)|0;
    if ($32) {
     $$032 = 0;
     break;
    }
    $26 = HEAP32[$6>>2]|0;
    $28 = ($27>>>0)<($26>>>0);
    if ($28) {
     $$035 = $27;
    } else {
     break L8;
    }
   }
   return ($$032|0);
  }
 } while(0);
 $33 = ((($0)) + 16|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($34) + -1)|0;
 $36 = HEAP32[284]|0;
 $37 = (_FLAC__bitwriter_write_raw_uint32($4,$35,$36)|0);
 $38 = ($37|0)==(0);
 if ($38) {
  $$032 = 0;
  return ($$032|0);
 }
 $39 = ((($0)) + 20|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = HEAP32[285]|0;
 $42 = (_FLAC__bitwriter_write_raw_int32($4,$40,$41)|0);
 $43 = ($42|0)==(0);
 if ($43) {
  $$032 = 0;
  return ($$032|0);
 }
 $44 = HEAP32[$6>>2]|0;
 $45 = ($44|0)==(0);
 L21: do {
  if (!($45)) {
   $$134 = 0;
   while(1) {
    $49 = (((($0)) + 24|0) + ($$134<<2)|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = HEAP32[$33>>2]|0;
    $52 = (_FLAC__bitwriter_write_raw_int32($4,$50,$51)|0);
    $53 = ($52|0)==(0);
    $47 = (($$134) + 1)|0;
    if ($53) {
     $$032 = 0;
     break;
    }
    $46 = HEAP32[$6>>2]|0;
    $48 = ($47>>>0)<($46>>>0);
    if ($48) {
     $$134 = $47;
    } else {
     break L21;
    }
   }
   return ($$032|0);
  }
 } while(0);
 $54 = (_add_entropy_coding_method_($4,$0)|0);
 $55 = ($54|0)==(0);
 if ($55) {
  $$032 = 0;
  return ($$032|0);
 }
 $56 = HEAP32[$0>>2]|0;
 $switch = ($56>>>0)<(2);
 if ($switch) {
  $57 = ((($0)) + 280|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = HEAP32[$6>>2]|0;
  $60 = ((($0)) + 8|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = HEAP32[$61>>2]|0;
  $63 = ((($61)) + 4|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ((($0)) + 4|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ($56|0)==(1);
  $68 = $67&1;
  $69 = (_add_residual_partitioned_rice_($4,$58,$1,$59,$62,$64,$66,$68)|0);
  $70 = ($69|0)==(0);
  if ($70) {
   $$032 = 0;
   return ($$032|0);
  }
 }
 $$032 = 1;
 return ($$032|0);
}
function _FLAC__subframe_add_verbatim($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$01617 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = HEAP32[$0>>2]|0;
 $6 = HEAP32[288]|0;
 $7 = ($3|0)!=(0);
 $8 = $7&1;
 $9 = $6 | $8;
 $10 = HEAP32[287]|0;
 $11 = HEAP32[286]|0;
 $12 = (($11) + ($10))|0;
 $13 = HEAP32[287]|0;
 $14 = (($12) + ($13))|0;
 $15 = (_FLAC__bitwriter_write_raw_uint32($4,$9,$14)|0);
 $16 = ($15|0)==(0);
 if ($16) {
  $$0 = 0;
  return ($$0|0);
 }
 if ($7) {
  $17 = (($3) + -1)|0;
  $18 = (_FLAC__bitwriter_write_unary_unsigned($4,$17)|0);
  $19 = ($18|0)==(0);
  if ($19) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $20 = ($1|0)==(0);
 if ($20) {
  $$0 = 1;
  return ($$0|0);
 }
 $$01617 = 0;
 while(1) {
  $23 = (($5) + ($$01617<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (_FLAC__bitwriter_write_raw_int32($4,$24,$2)|0);
  $26 = ($25|0)==(0);
  $21 = (($$01617) + 1)|0;
  if ($26) {
   $$0 = 0;
   label = 8;
   break;
  }
  $22 = ($21>>>0)<($1>>>0);
  if ($22) {
   $$01617 = $21;
  } else {
   $$0 = 1;
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  return ($$0|0);
 }
 return (0)|0;
}
function _FLAC__window_bartlett($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$039 = 0, $$136 = 0, $$2$lcssa = 0, $$234 = 0, $$333 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0;
 var $8 = 0.0, $9 = 0.0, $exitcond = 0, $exitcond46 = 0, $exitcond47 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($1) + -1)|0;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $22 = (($1|0) / 2)&-1;
  $23 = ($1|0)>(1);
  if ($23) {
   $24 = (+($2|0));
   $$234 = 0;
   while(1) {
    $25 = (+($$234|0));
    $26 = $25 * 2.0;
    $27 = $26 / $24;
    $28 = (($0) + ($$234<<2)|0);
    HEAPF32[$28>>2] = $27;
    $29 = (($$234) + 1)|0;
    $exitcond46 = ($29|0)==($22|0);
    if ($exitcond46) {
     $$2$lcssa = $22;
     break;
    } else {
     $$234 = $29;
    }
   }
  } else {
   $$2$lcssa = 0;
  }
  $30 = ($$2$lcssa|0)<($1|0);
  if (!($30)) {
   return;
  }
  $31 = (+($2|0));
  $$333 = $$2$lcssa;
  while(1) {
   $32 = (+($$333|0));
   $33 = $32 * 2.0;
   $34 = $33 / $31;
   $35 = 2.0 - $34;
   $36 = (($0) + ($$333<<2)|0);
   HEAPF32[$36>>2] = $35;
   $37 = (($$333) + 1)|0;
   $exitcond = ($37|0)==($1|0);
   if ($exitcond) {
    break;
   } else {
    $$333 = $37;
   }
  }
  return;
 } else {
  $5 = (($2|0) / 2)&-1;
  $6 = ($1|0)<(0);
  if ($6) {
   $$0$lcssa = 0;
  } else {
   $7 = (+($2|0));
   $$039 = 0;
   while(1) {
    $8 = (+($$039|0));
    $9 = $8 * 2.0;
    $10 = $9 / $7;
    $11 = (($0) + ($$039<<2)|0);
    HEAPF32[$11>>2] = $10;
    $12 = (($$039) + 1)|0;
    $13 = ($$039|0)<($5|0);
    if ($13) {
     $$039 = $12;
    } else {
     $$0$lcssa = $12;
     break;
    }
   }
  }
  $14 = ($$0$lcssa|0)<($1|0);
  if (!($14)) {
   return;
  }
  $15 = (+($2|0));
  $$136 = $$0$lcssa;
  while(1) {
   $16 = (+($$136|0));
   $17 = $16 * 2.0;
   $18 = $17 / $15;
   $19 = 2.0 - $18;
   $20 = (($0) + ($$136<<2)|0);
   HEAPF32[$20>>2] = $19;
   $21 = (($$136) + 1)|0;
   $exitcond47 = ($21|0)==($1|0);
   if ($exitcond47) {
    break;
   } else {
    $$136 = $21;
   }
  }
  return;
 }
}
function _FLAC__window_bartlett_hann($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $exitcond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(0);
 if (!($2)) {
  return;
 }
 $3 = (($1) + -1)|0;
 $4 = (+($3|0));
 $$012 = 0;
 while(1) {
  $5 = (+($$012|0));
  $6 = $5 / $4;
  $7 = $6 + -0.5;
  $8 = (+Math_abs((+$7)));
  $9 = $8;
  $10 = $9 * 0.47999998927116394;
  $11 = 0.62000000476837158 - $10;
  $12 = $6;
  $13 = $12 * 6.2831853071795862;
  $14 = (+Math_cos((+$13)));
  $15 = $14 * 0.37999999523162842;
  $16 = $11 - $15;
  $17 = $16;
  $18 = (($0) + ($$012<<2)|0);
  HEAPF32[$18>>2] = $17;
  $19 = (($$012) + 1)|0;
  $exitcond = ($19|0)==($1|0);
  if ($exitcond) {
   break;
  } else {
   $$012 = $19;
  }
 }
 return;
}
function _FLAC__window_blackman($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $exitcond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(0);
 if (!($2)) {
  return;
 }
 $3 = (($1) + -1)|0;
 $4 = (+($3|0));
 $$012 = 0;
 while(1) {
  $5 = (+($$012|0));
  $6 = $5 * 6.2831853071795862;
  $7 = $6 / $4;
  $8 = (+Math_cos((+$7)));
  $9 = $8 * 0.5;
  $10 = 0.41999998688697815 - $9;
  $11 = $5 * 12.566370614359172;
  $12 = $11 / $4;
  $13 = (+Math_cos((+$12)));
  $14 = $13 * 0.079999998211860657;
  $15 = $14 + $10;
  $16 = $15;
  $17 = (($0) + ($$012<<2)|0);
  HEAPF32[$17>>2] = $16;
  $18 = (($$012) + 1)|0;
  $exitcond = ($18|0)==($1|0);
  if ($exitcond) {
   break;
  } else {
   $$012 = $18;
  }
 }
 return;
}
function _FLAC__window_blackman_harris_4term_92db_sidelobe($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$014 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0;
 var $7 = 0.0, $8 = 0.0, $9 = 0.0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(0);
 if (!($2)) {
  return;
 }
 $3 = (($1) + -1)|0;
 $4 = (+($3|0));
 $$014 = 0;
 while(1) {
  $5 = (+($$014|0));
  $6 = $5 * 6.2831853071795862;
  $7 = $6 / $4;
  $8 = (+Math_cos((+$7)));
  $9 = $8 * 0.48829001188278198;
  $10 = 0.35874998569488525 - $9;
  $11 = $5 * 12.566370614359172;
  $12 = $11 / $4;
  $13 = (+Math_cos((+$12)));
  $14 = $13 * 0.14127999544143677;
  $15 = $14 + $10;
  $16 = $5 * 18.849555921538759;
  $17 = $16 / $4;
  $18 = (+Math_cos((+$17)));
  $19 = $18 * 0.011680000461637974;
  $20 = $15 - $19;
  $21 = $20;
  $22 = (($0) + ($$014<<2)|0);
  HEAPF32[$22>>2] = $21;
  $23 = (($$014) + 1)|0;
  $exitcond = ($23|0)==($1|0);
  if ($exitcond) {
   break;
  } else {
   $$014 = $23;
  }
 }
 return;
}
function _FLAC__window_connes($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$020 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($1) + -1)|0;
 $3 = (+($2|0));
 $4 = $3 * 0.5;
 $5 = ($1|0)>(0);
 if (!($5)) {
  return;
 }
 $$020 = 0;
 while(1) {
  $6 = (+($$020|0));
  $7 = $6 - $4;
  $8 = $7 / $4;
  $9 = $8 * $8;
  $10 = 1.0 - $9;
  $11 = $10 * $10;
  $12 = $11;
  $13 = (($0) + ($$020<<2)|0);
  HEAPF32[$13>>2] = $12;
  $14 = (($$020) + 1)|0;
  $exitcond = ($14|0)==($1|0);
  if ($exitcond) {
   break;
  } else {
   $$020 = $14;
  }
 }
 return;
}
function _FLAC__window_flattop($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$016 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(0);
 if (!($2)) {
  return;
 }
 $3 = (($1) + -1)|0;
 $4 = (+($3|0));
 $$016 = 0;
 while(1) {
  $5 = (+($$016|0));
  $6 = $5 * 6.2831853071795862;
  $7 = $6 / $4;
  $8 = (+Math_cos((+$7)));
  $9 = $8 * 1.9299999475479126;
  $10 = 1.0 - $9;
  $11 = $5 * 12.566370614359172;
  $12 = $11 / $4;
  $13 = (+Math_cos((+$12)));
  $14 = $13 * 1.2899999618530273;
  $15 = $14 + $10;
  $16 = $5 * 18.849555921538759;
  $17 = $16 / $4;
  $18 = (+Math_cos((+$17)));
  $19 = $18 * 0.3880000114440918;
  $20 = $15 - $19;
  $21 = $5 * 25.132741228718345;
  $22 = $21 / $4;
  $23 = (+Math_cos((+$22)));
  $24 = $23 * 0.032200001180171967;
  $25 = $24 + $20;
  $26 = $25;
  $27 = (($0) + ($$016<<2)|0);
  HEAPF32[$27>>2] = $26;
  $28 = (($$016) + 1)|0;
  $exitcond = ($28|0)==($1|0);
  if ($exitcond) {
   break;
  } else {
   $$016 = $28;
  }
 }
 return;
}
function _FLAC__window_gauss($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$019 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (($1) + -1)|0;
 $4 = (+($3|0));
 $5 = $4 * 0.5;
 $6 = ($1|0)>(0);
 if (!($6)) {
  return;
 }
 $7 = $2;
 $8 = $5 * $7;
 $$019 = 0;
 while(1) {
  $9 = (+($$019|0));
  $10 = $9 - $5;
  $11 = $10 / $8;
  $12 = $11 * -0.5;
  $13 = $11 * $12;
  $14 = (+Math_exp((+$13)));
  $15 = $14;
  $16 = (($0) + ($$019<<2)|0);
  HEAPF32[$16>>2] = $15;
  $17 = (($$019) + 1)|0;
  $exitcond = ($17|0)==($1|0);
  if ($exitcond) {
   break;
  } else {
   $$019 = $17;
  }
 }
 return;
}
function _FLAC__window_hamming($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$010 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(0);
 if (!($2)) {
  return;
 }
 $3 = (($1) + -1)|0;
 $4 = (+($3|0));
 $$010 = 0;
 while(1) {
  $5 = (+($$010|0));
  $6 = $5 * 6.2831853071795862;
  $7 = $6 / $4;
  $8 = (+Math_cos((+$7)));
  $9 = $8 * 0.46000000834465027;
  $10 = 0.54000002145767212 - $9;
  $11 = $10;
  $12 = (($0) + ($$010<<2)|0);
  HEAPF32[$12>>2] = $11;
  $13 = (($$010) + 1)|0;
  $exitcond = ($13|0)==($1|0);
  if ($exitcond) {
   break;
  } else {
   $$010 = $13;
  }
 }
 return;
}
function _FLAC__window_hann($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$010 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(0);
 if (!($2)) {
  return;
 }
 $3 = (($1) + -1)|0;
 $4 = (+($3|0));
 $$010 = 0;
 while(1) {
  $5 = (+($$010|0));
  $6 = $5 * 6.2831853071795862;
  $7 = $6 / $4;
  $8 = (+Math_cos((+$7)));
  $9 = $8 * 0.5;
  $10 = 0.5 - $9;
  $11 = $10;
  $12 = (($0) + ($$010<<2)|0);
  HEAPF32[$12>>2] = $11;
  $13 = (($$010) + 1)|0;
  $exitcond = ($13|0)==($1|0);
  if ($exitcond) {
   break;
  } else {
   $$010 = $13;
  }
 }
 return;
}
function _FLAC__window_kaiser_bessel($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$014 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0;
 var $7 = 0.0, $8 = 0.0, $9 = 0.0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(0);
 if (!($2)) {
  return;
 }
 $3 = (($1) + -1)|0;
 $4 = (+($3|0));
 $$014 = 0;
 while(1) {
  $5 = (+($$014|0));
  $6 = $5 * 6.2831853071795862;
  $7 = $6 / $4;
  $8 = (+Math_cos((+$7)));
  $9 = $8 * 0.49799999594688416;
  $10 = 0.40200001001358032 - $9;
  $11 = $5 * 12.566370614359172;
  $12 = $11 / $4;
  $13 = (+Math_cos((+$12)));
  $14 = $13 * 0.097999997437000274;
  $15 = $14 + $10;
  $16 = $5 * 18.849555921538759;
  $17 = $16 / $4;
  $18 = (+Math_cos((+$17)));
  $19 = $18 * 0.0010000000474974513;
  $20 = $15 - $19;
  $21 = $20;
  $22 = (($0) + ($$014<<2)|0);
  HEAPF32[$22>>2] = $21;
  $23 = (($$014) + 1)|0;
  $exitcond = ($23|0)==($1|0);
  if ($exitcond) {
   break;
  } else {
   $$014 = $23;
  }
 }
 return;
}
function _FLAC__window_nuttall($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$014 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0;
 var $7 = 0.0, $8 = 0.0, $9 = 0.0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(0);
 if (!($2)) {
  return;
 }
 $3 = (($1) + -1)|0;
 $4 = (+($3|0));
 $$014 = 0;
 while(1) {
  $5 = (+($$014|0));
  $6 = $5 * 6.2831853071795862;
  $7 = $6 / $4;
  $8 = (+Math_cos((+$7)));
  $9 = $8 * 0.48917749524116516;
  $10 = 0.36358189582824707 - $9;
  $11 = $5 * 12.566370614359172;
  $12 = $11 / $4;
  $13 = (+Math_cos((+$12)));
  $14 = $13 * 0.13659949600696564;
  $15 = $14 + $10;
  $16 = $5 * 18.849555921538759;
  $17 = $16 / $4;
  $18 = (+Math_cos((+$17)));
  $19 = $18 * 0.010641099885106087;
  $20 = $15 - $19;
  $21 = $20;
  $22 = (($0) + ($$014<<2)|0);
  HEAPF32[$22>>2] = $21;
  $23 = (($$014) + 1)|0;
  $exitcond = ($23|0)==($1|0);
  if ($exitcond) {
   break;
  } else {
   $$014 = $23;
  }
 }
 return;
}
function _FLAC__window_rectangle($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$05 = 0, $2 = 0, $3 = 0, $4 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(0);
 if (!($2)) {
  return;
 }
 $$05 = 0;
 while(1) {
  $3 = (($0) + ($$05<<2)|0);
  HEAPF32[$3>>2] = 1.0;
  $4 = (($$05) + 1)|0;
  $exitcond = ($4|0)==($1|0);
  if ($exitcond) {
   break;
  } else {
   $$05 = $4;
  }
 }
 return;
}
function _FLAC__window_triangle($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$038 = 0, $$135 = 0, $$2$lcssa = 0, $$233 = 0, $$332 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0;
 var $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0;
 var $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 1;
 $3 = ($2|0)==(0);
 if ($3) {
  $28 = ($1|0)<(2);
  if ($28) {
   $$2$lcssa = 1;
  } else {
   $29 = $1 >>> 1;
   $30 = (+($1|0));
   $31 = $30 + 1.0;
   $32 = (($29) + 1)|0;
   $$233 = 1;
   while(1) {
    $33 = (+($$233|0));
    $34 = $33 * 2.0;
    $35 = $34 / $31;
    $36 = (($$233) + -1)|0;
    $37 = (($0) + ($36<<2)|0);
    HEAPF32[$37>>2] = $35;
    $38 = (($$233) + 1)|0;
    $exitcond = ($38|0)==($32|0);
    if ($exitcond) {
     $$2$lcssa = $32;
     break;
    } else {
     $$233 = $38;
    }
   }
  }
  $39 = ($$2$lcssa|0)>($1|0);
  if ($39) {
   return;
  }
  $40 = (+($1|0));
  $41 = $40 + 1.0;
  $$332 = $$2$lcssa;
  while(1) {
   $42 = (($1) - ($$332))|0;
   $43 = $42 << 1;
   $44 = (($43) + 2)|0;
   $45 = (+($44|0));
   $46 = $45 / $41;
   $47 = (($$332) + -1)|0;
   $48 = (($0) + ($47<<2)|0);
   HEAPF32[$48>>2] = $46;
   $49 = (($$332) + 1)|0;
   $50 = ($$332|0)<($1|0);
   if ($50) {
    $$332 = $49;
   } else {
    break;
   }
  }
  return;
 } else {
  $4 = (($1) + 1)|0;
  $5 = (($4|0) / 2)&-1;
  $6 = ($1|0)<(1);
  if ($6) {
   $$0$lcssa = 1;
  } else {
   $7 = (+($1|0));
   $8 = $7 + 1.0;
   $$038 = 1;
   while(1) {
    $9 = (+($$038|0));
    $10 = $9 * 2.0;
    $11 = $10 / $8;
    $12 = (($$038) + -1)|0;
    $13 = (($0) + ($12<<2)|0);
    HEAPF32[$13>>2] = $11;
    $14 = (($$038) + 1)|0;
    $15 = ($$038|0)<($5|0);
    if ($15) {
     $$038 = $14;
    } else {
     $$0$lcssa = $14;
     break;
    }
   }
  }
  $16 = ($$0$lcssa|0)>($1|0);
  if ($16) {
   return;
  }
  $17 = (+($1|0));
  $18 = $17 + 1.0;
  $$135 = $$0$lcssa;
  while(1) {
   $19 = (($1) - ($$135))|0;
   $20 = $19 << 1;
   $21 = (($20) + 2)|0;
   $22 = (+($21|0));
   $23 = $22 / $18;
   $24 = (($$135) + -1)|0;
   $25 = (($0) + ($24<<2)|0);
   HEAPF32[$25>>2] = $23;
   $26 = (($$135) + 1)|0;
   $27 = ($$135|0)<($1|0);
   if ($27) {
    $$135 = $26;
   } else {
    break;
   }
  }
  return;
 }
}
function _FLAC__window_tukey($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$027 = 0, $$neg = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
 var $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = !($2 <= 0.0);
 if (!($3)) {
  _FLAC__window_rectangle($0,$1);
  return;
 }
 $4 = !($2 >= 1.0);
 if (!($4)) {
  _FLAC__window_hann($0,$1);
  return;
 }
 $5 = $2 * 0.5;
 $6 = (+($1|0));
 $7 = $5 * $6;
 $8 = (~~(($7)));
 $9 = (($8) + -1)|0;
 _FLAC__window_rectangle($0,$1);
 $10 = ($8|0)>(1);
 if (!($10)) {
  return;
 }
 $11 = (+($9|0));
 $$neg = (1 - ($8))|0;
 $12 = (($1) + -1)|0;
 $13 = (($12) + ($$neg))|0;
 $$027 = 0;
 while(1) {
  $14 = (+($$027|0));
  $15 = $14 * 3.1415926535897931;
  $16 = $15 / $11;
  $17 = (+Math_cos((+$16)));
  $18 = $17 * 0.5;
  $19 = 0.5 - $18;
  $20 = $19;
  $21 = (($0) + ($$027<<2)|0);
  HEAPF32[$21>>2] = $20;
  $22 = (($$027) + ($9))|0;
  $23 = (+($22|0));
  $24 = $23 * 3.1415926535897931;
  $25 = $24 / $11;
  $26 = (+Math_cos((+$25)));
  $27 = $26 * 0.5;
  $28 = 0.5 - $27;
  $29 = $28;
  $30 = (($13) + ($$027))|0;
  $31 = (($0) + ($30<<2)|0);
  HEAPF32[$31>>2] = $29;
  $32 = (($$027) + 1)|0;
  $exitcond = ($32|0)==($8|0);
  if ($exitcond) {
   break;
  } else {
   $$027 = $32;
  }
 }
 return;
}
function _FLAC__window_partial_tukey($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $$073$lcssa = 0, $$07399 = 0, $$095 = 0, $$174$lcssa = 0, $$17494 = 0, $$187 = 0, $$2$lcssa = 0, $$290 = 0, $$3$lcssa = 0, $$386 = 0, $$tr79 = 0.0, $$tr79$be = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0;
 var $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, $or$cond = 0, $or$cond75 = 0, $or$cond7593 = 0, $or$cond76 = 0, $or$cond7689 = 0, $or$cond77 = 0;
 var $or$cond7785 = 0, $or$cond98 = 0, $scevgep = 0, $umax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$tr79 = $2;
 while(1) {
  $5 = !($$tr79 <= 0.0);
  if ($5) {
   $6 = !($$tr79 >= 1.0);
   if ($6) {
    break;
   } else {
    $$tr79$be = 0.94999998807907104;
   }
  } else {
   $$tr79$be = 0.05000000074505806;
  }
  $$tr79 = $$tr79$be;
 }
 $7 = (+($1|0));
 $8 = $7 * $3;
 $9 = (~~(($8)));
 $10 = $7 * $4;
 $11 = (~~(($10)));
 $12 = (($11) - ($9))|0;
 $13 = $$tr79 * 0.5;
 $14 = (+($12|0));
 $15 = $13 * $14;
 $16 = (~~(($15)));
 $17 = ($9|0)>(0);
 $18 = ($1|0)>(0);
 $or$cond98 = $17 & $18;
 if ($or$cond98) {
  $19 = (0 - ($9))|0;
  $20 = (0 - ($1))|0;
  $21 = ($19>>>0)>($20>>>0);
  $umax = $21 ? $19 : $20;
  $22 = Math_imul($umax, -4)|0;
  _memset(($0|0),0,($22|0))|0;
  $$07399 = 0;
  while(1) {
   $23 = (($$07399) + 1)|0;
   $24 = ($23|0)<($9|0);
   $25 = ($23|0)<($1|0);
   $or$cond = $24 & $25;
   if ($or$cond) {
    $$07399 = $23;
   } else {
    $$073$lcssa = $23;
    break;
   }
  }
 } else {
  $$073$lcssa = 0;
 }
 $26 = (($16) + ($9))|0;
 $27 = ($$073$lcssa|0)<($26|0);
 $28 = ($$073$lcssa|0)<($1|0);
 $or$cond7593 = $27 & $28;
 if ($or$cond7593) {
  $29 = (+($16|0));
  $$095 = 1;$$17494 = $$073$lcssa;
  while(1) {
   $30 = (+($$095|0));
   $31 = $30 * 3.1415926535897931;
   $32 = $31 / $29;
   $33 = (+Math_cos((+$32)));
   $34 = $33 * 0.5;
   $35 = 0.5 - $34;
   $36 = $35;
   $37 = (($0) + ($$17494<<2)|0);
   HEAPF32[$37>>2] = $36;
   $38 = (($$17494) + 1)|0;
   $39 = (($$095) + 1)|0;
   $40 = ($38|0)<($26|0);
   $41 = ($38|0)<($1|0);
   $or$cond75 = $40 & $41;
   if ($or$cond75) {
    $$095 = $39;$$17494 = $38;
   } else {
    $$174$lcssa = $38;
    break;
   }
  }
 } else {
  $$174$lcssa = $$073$lcssa;
 }
 $42 = (($11) - ($16))|0;
 $43 = ($$174$lcssa|0)<($42|0);
 $44 = ($$174$lcssa|0)<($1|0);
 $or$cond7689 = $43 & $44;
 if ($or$cond7689) {
  $$290 = $$174$lcssa;
  while(1) {
   $45 = (($0) + ($$290<<2)|0);
   HEAPF32[$45>>2] = 1.0;
   $46 = (($$290) + 1)|0;
   $47 = ($46|0)<($42|0);
   $48 = ($46|0)<($1|0);
   $or$cond76 = $47 & $48;
   if ($or$cond76) {
    $$290 = $46;
   } else {
    $$2$lcssa = $46;
    break;
   }
  }
 } else {
  $$2$lcssa = $$174$lcssa;
 }
 $49 = ($$2$lcssa|0)<($11|0);
 $50 = ($$2$lcssa|0)<($1|0);
 $or$cond7785 = $49 & $50;
 if ($or$cond7785) {
  $51 = (+($16|0));
  $$187 = $16;$$386 = $$2$lcssa;
  while(1) {
   $52 = (+($$187|0));
   $53 = $52 * 3.1415926535897931;
   $54 = $53 / $51;
   $55 = (+Math_cos((+$54)));
   $56 = $55 * 0.5;
   $57 = 0.5 - $56;
   $58 = $57;
   $59 = (($0) + ($$386<<2)|0);
   HEAPF32[$59>>2] = $58;
   $60 = (($$386) + 1)|0;
   $61 = (($$187) + -1)|0;
   $62 = ($60|0)<($11|0);
   $63 = ($60|0)<($1|0);
   $or$cond77 = $62 & $63;
   if ($or$cond77) {
    $$187 = $61;$$386 = $60;
   } else {
    $$3$lcssa = $60;
    break;
   }
  }
 } else {
  $$3$lcssa = $$2$lcssa;
 }
 $64 = ($$3$lcssa|0)<($1|0);
 if (!($64)) {
  return;
 }
 $scevgep = (($0) + ($$3$lcssa<<2)|0);
 $65 = (($1) - ($$3$lcssa))|0;
 $66 = $65 << 2;
 _memset(($scevgep|0),0,($66|0))|0;
 return;
}
function _FLAC__window_punchout_tukey($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $$0137 = 0, $$098$lcssa = 0, $$098136 = 0, $$1128 = 0, $$199$lcssa = 0, $$199132 = 0, $$2100$lcssa = 0, $$2100127 = 0, $$2119 = 0, $$3101$lcssa = 0, $$3101123 = 0, $$3113 = 0, $$4$lcssa = 0, $$4118 = 0, $$5$lcssa = 0, $$5115 = 0, $$6112 = 0, $$tr108 = 0.0, $$tr108$be = 0.0, $10 = 0.0;
 var $100 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, $exitcond = 0, $or$cond = 0, $or$cond102 = 0, $or$cond102131 = 0, $or$cond103 = 0;
 var $or$cond103126 = 0, $or$cond104 = 0, $or$cond104122 = 0, $or$cond105 = 0, $or$cond105117 = 0, $or$cond106 = 0, $or$cond106114 = 0, $or$cond135 = 0, $scevgep = 0, $umax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$tr108 = $2;
 while(1) {
  $5 = !($$tr108 <= 0.0);
  if ($5) {
   $6 = !($$tr108 >= 1.0);
   if ($6) {
    break;
   } else {
    $$tr108$be = 0.94999998807907104;
   }
  } else {
   $$tr108$be = 0.05000000074505806;
  }
  $$tr108 = $$tr108$be;
 }
 $7 = (+($1|0));
 $8 = $7 * $3;
 $9 = (~~(($8)));
 $10 = $7 * $4;
 $11 = (~~(($10)));
 $12 = $$tr108 * 0.5;
 $13 = (+($9|0));
 $14 = $12 * $13;
 $15 = (~~(($14)));
 $16 = (($1) - ($11))|0;
 $17 = (+($16|0));
 $18 = $12 * $17;
 $19 = (~~(($18)));
 $20 = ($15|0)>(0);
 $21 = ($1|0)>(0);
 $or$cond135 = $20 & $21;
 if ($or$cond135) {
  $22 = (+($15|0));
  $$0137 = 1;$$098136 = 0;
  while(1) {
   $23 = (+($$0137|0));
   $24 = $23 * 3.1415926535897931;
   $25 = $24 / $22;
   $26 = (+Math_cos((+$25)));
   $27 = $26 * 0.5;
   $28 = 0.5 - $27;
   $29 = $28;
   $30 = (($0) + ($$098136<<2)|0);
   HEAPF32[$30>>2] = $29;
   $31 = (($$098136) + 1)|0;
   $32 = (($$0137) + 1)|0;
   $33 = ($31|0)<($15|0);
   $34 = ($31|0)<($1|0);
   $or$cond = $33 & $34;
   if ($or$cond) {
    $$0137 = $32;$$098136 = $31;
   } else {
    $$098$lcssa = $31;
    break;
   }
  }
 } else {
  $$098$lcssa = 0;
 }
 $35 = (($9) - ($15))|0;
 $36 = ($$098$lcssa|0)<($35|0);
 $37 = ($$098$lcssa|0)<($1|0);
 $or$cond102131 = $36 & $37;
 if ($or$cond102131) {
  $$199132 = $$098$lcssa;
  while(1) {
   $38 = (($0) + ($$199132<<2)|0);
   HEAPF32[$38>>2] = 1.0;
   $39 = (($$199132) + 1)|0;
   $40 = ($39|0)<($35|0);
   $41 = ($39|0)<($1|0);
   $or$cond102 = $40 & $41;
   if ($or$cond102) {
    $$199132 = $39;
   } else {
    $$199$lcssa = $39;
    break;
   }
  }
 } else {
  $$199$lcssa = $$098$lcssa;
 }
 $42 = ($$199$lcssa|0)<($9|0);
 $43 = ($$199$lcssa|0)<($1|0);
 $or$cond103126 = $42 & $43;
 if ($or$cond103126) {
  $44 = (+($15|0));
  $$1128 = $15;$$2100127 = $$199$lcssa;
  while(1) {
   $45 = (+($$1128|0));
   $46 = $45 * 3.1415926535897931;
   $47 = $46 / $44;
   $48 = (+Math_cos((+$47)));
   $49 = $48 * 0.5;
   $50 = 0.5 - $49;
   $51 = $50;
   $52 = (($0) + ($$2100127<<2)|0);
   HEAPF32[$52>>2] = $51;
   $53 = (($$2100127) + 1)|0;
   $54 = (($$1128) + -1)|0;
   $55 = ($53|0)<($9|0);
   $56 = ($53|0)<($1|0);
   $or$cond103 = $55 & $56;
   if ($or$cond103) {
    $$1128 = $54;$$2100127 = $53;
   } else {
    $$2100$lcssa = $53;
    break;
   }
  }
 } else {
  $$2100$lcssa = $$199$lcssa;
 }
 $57 = ($$2100$lcssa|0)<($11|0);
 $58 = ($$2100$lcssa|0)<($1|0);
 $or$cond104122 = $57 & $58;
 if ($or$cond104122) {
  $scevgep = (($0) + ($$2100$lcssa<<2)|0);
  $59 = (($$2100$lcssa) - ($1))|0;
  $60 = (($$2100$lcssa) - ($11))|0;
  $61 = ($59>>>0)>($60>>>0);
  $umax = $61 ? $59 : $60;
  $62 = Math_imul($umax, -4)|0;
  _memset(($scevgep|0),0,($62|0))|0;
  $$3101123 = $$2100$lcssa;
  while(1) {
   $63 = (($$3101123) + 1)|0;
   $64 = ($63|0)<($11|0);
   $65 = ($63|0)<($1|0);
   $or$cond104 = $64 & $65;
   if ($or$cond104) {
    $$3101123 = $63;
   } else {
    $$3101$lcssa = $63;
    break;
   }
  }
 } else {
  $$3101$lcssa = $$2100$lcssa;
 }
 $66 = (($19) + ($11))|0;
 $67 = ($$3101$lcssa|0)<($66|0);
 $68 = ($$3101$lcssa|0)<($1|0);
 $or$cond105117 = $67 & $68;
 if ($or$cond105117) {
  $69 = (+($19|0));
  $$2119 = 1;$$4118 = $$3101$lcssa;
  while(1) {
   $70 = (+($$2119|0));
   $71 = $70 * 3.1415926535897931;
   $72 = $71 / $69;
   $73 = (+Math_cos((+$72)));
   $74 = $73 * 0.5;
   $75 = 0.5 - $74;
   $76 = $75;
   $77 = (($0) + ($$4118<<2)|0);
   HEAPF32[$77>>2] = $76;
   $78 = (($$4118) + 1)|0;
   $79 = (($$2119) + 1)|0;
   $80 = ($78|0)<($66|0);
   $81 = ($78|0)<($1|0);
   $or$cond105 = $80 & $81;
   if ($or$cond105) {
    $$2119 = $79;$$4118 = $78;
   } else {
    $$4$lcssa = $78;
    break;
   }
  }
 } else {
  $$4$lcssa = $$3101$lcssa;
 }
 $82 = (($1) - ($19))|0;
 $83 = ($$4$lcssa|0)<($82|0);
 $84 = ($$4$lcssa|0)<($1|0);
 $or$cond106114 = $83 & $84;
 if ($or$cond106114) {
  $$5115 = $$4$lcssa;
  while(1) {
   $85 = (($0) + ($$5115<<2)|0);
   HEAPF32[$85>>2] = 1.0;
   $86 = (($$5115) + 1)|0;
   $87 = ($86|0)<($82|0);
   $88 = ($86|0)<($1|0);
   $or$cond106 = $87 & $88;
   if ($or$cond106) {
    $$5115 = $86;
   } else {
    $$5$lcssa = $86;
    break;
   }
  }
 } else {
  $$5$lcssa = $$4$lcssa;
 }
 $89 = ($$5$lcssa|0)<($1|0);
 if (!($89)) {
  return;
 }
 $90 = (+($19|0));
 $$3113 = $19;$$6112 = $$5$lcssa;
 while(1) {
  $91 = (+($$3113|0));
  $92 = $91 * 3.1415926535897931;
  $93 = $92 / $90;
  $94 = (+Math_cos((+$93)));
  $95 = $94 * 0.5;
  $96 = 0.5 - $95;
  $97 = $96;
  $98 = (($0) + ($$6112<<2)|0);
  HEAPF32[$98>>2] = $97;
  $99 = (($$6112) + 1)|0;
  $100 = (($$3113) + -1)|0;
  $exitcond = ($99|0)==($1|0);
  if ($exitcond) {
   break;
  } else {
   $$3113 = $100;$$6112 = $99;
  }
 }
 return;
}
function _FLAC__window_welch($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$018 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($1) + -1)|0;
 $3 = (+($2|0));
 $4 = $3 * 0.5;
 $5 = ($1|0)>(0);
 if (!($5)) {
  return;
 }
 $$018 = 0;
 while(1) {
  $6 = (+($$018|0));
  $7 = $6 - $4;
  $8 = $7 / $4;
  $9 = $8 * $8;
  $10 = 1.0 - $9;
  $11 = $10;
  $12 = (($0) + ($$018<<2)|0);
  HEAPF32[$12>>2] = $11;
  $13 = (($$018) + 1)|0;
  $exitcond = ($13|0)==($1|0);
  if ($exitcond) {
   break;
  } else {
   $$018 = $13;
  }
 }
 return;
}
function _malloc($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i20$i = 0, $$0169$i = 0, $$0170$i = 0, $$0171$i = 0, $$0192 = 0, $$0194 = 0, $$02014$i$i = 0, $$0202$lcssa$i$i = 0, $$02023$i$i = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$024372$i = 0, $$0259$i$i = 0, $$02604$i$i = 0, $$0261$lcssa$i$i = 0, $$02613$i$i = 0;
 var $$0267$i$i = 0, $$0268$i$i = 0, $$0318$i = 0, $$032012$i = 0, $$0321$lcssa$i = 0, $$032111$i = 0, $$0323$i = 0, $$0329$i = 0, $$0335$i = 0, $$0336$i = 0, $$0338$i = 0, $$0339$i = 0, $$0344$i = 0, $$1174$i = 0, $$1174$i$be = 0, $$1174$i$ph = 0, $$1176$i = 0, $$1176$i$be = 0, $$1176$i$ph = 0, $$124471$i = 0;
 var $$1263$i$i = 0, $$1263$i$i$be = 0, $$1263$i$i$ph = 0, $$1265$i$i = 0, $$1265$i$i$be = 0, $$1265$i$i$ph = 0, $$1319$i = 0, $$1324$i = 0, $$1340$i = 0, $$1346$i = 0, $$1346$i$be = 0, $$1346$i$ph = 0, $$1350$i = 0, $$1350$i$be = 0, $$1350$i$ph = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2331$i = 0, $$3$i = 0;
 var $$3$i$i = 0, $$3$i198 = 0, $$3$i198211 = 0, $$3326$i = 0, $$3348$i = 0, $$4$lcssa$i = 0, $$415$i = 0, $$415$i$ph = 0, $$4236$i = 0, $$4327$lcssa$i = 0, $$432714$i = 0, $$432714$i$ph = 0, $$4333$i = 0, $$533413$i = 0, $$533413$i$ph = 0, $$723947$i = 0, $$748$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0;
 var $$pre$i16$i = 0, $$pre$i195 = 0, $$pre$i204 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i17$iZ2D = 0, $$pre$phi$i205Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink320 = 0, $$sink321 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0;
 var $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0;
 var $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0;
 var $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0;
 var $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0;
 var $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0;
 var $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0;
 var $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0;
 var $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0;
 var $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0;
 var $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0;
 var $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0;
 var $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0;
 var $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0;
 var $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0;
 var $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $99 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i203 = 0, $not$$i = 0, $or$cond$i = 0, $or$cond$i199 = 0, $or$cond1$i = 0, $or$cond1$i197 = 0, $or$cond11$i = 0, $or$cond2$i = 0;
 var $or$cond5$i = 0, $or$cond50$i = 0, $or$cond51$i = 0, $or$cond6$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $or$cond8$not$i = 0, $spec$select$i = 0, $spec$select$i201 = 0, $spec$select1$i = 0, $spec$select2$i = 0, $spec$select4$i = 0, $spec$select49$i = 0, $spec$select9$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[1393]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (5612 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($16|0);
    if ($21) {
     $22 = 1 << $14;
     $23 = $22 ^ -1;
     $24 = $8 & $23;
     HEAP32[1393] = $24;
    } else {
     $25 = ((($20)) + 12|0);
     HEAP32[$25>>2] = $16;
     HEAP32[$17>>2] = $20;
    }
    $26 = $14 << 3;
    $27 = $26 | 3;
    $28 = ((($18)) + 4|0);
    HEAP32[$28>>2] = $27;
    $29 = (($18) + ($26)|0);
    $30 = ((($29)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $31 | 1;
    HEAP32[$30>>2] = $32;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[(5580)>>2]|0;
   $34 = ($6>>>0)>($33>>>0);
   if ($34) {
    $35 = ($9|0)==(0);
    if (!($35)) {
     $36 = $9 << $7;
     $37 = 2 << $7;
     $38 = (0 - ($37))|0;
     $39 = $37 | $38;
     $40 = $36 & $39;
     $41 = (0 - ($40))|0;
     $42 = $40 & $41;
     $43 = (($42) + -1)|0;
     $44 = $43 >>> 12;
     $45 = $44 & 16;
     $46 = $43 >>> $45;
     $47 = $46 >>> 5;
     $48 = $47 & 8;
     $49 = $48 | $45;
     $50 = $46 >>> $48;
     $51 = $50 >>> 2;
     $52 = $51 & 4;
     $53 = $49 | $52;
     $54 = $50 >>> $52;
     $55 = $54 >>> 1;
     $56 = $55 & 2;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 1;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = (($61) + ($62))|0;
     $64 = $63 << 1;
     $65 = (5612 + ($64<<2)|0);
     $66 = ((($65)) + 8|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($69|0)==($65|0);
     if ($70) {
      $71 = 1 << $63;
      $72 = $71 ^ -1;
      $73 = $8 & $72;
      HEAP32[1393] = $73;
      $90 = $73;
     } else {
      $74 = ((($69)) + 12|0);
      HEAP32[$74>>2] = $65;
      HEAP32[$66>>2] = $69;
      $90 = $8;
     }
     $75 = $63 << 3;
     $76 = (($75) - ($6))|0;
     $77 = $6 | 3;
     $78 = ((($67)) + 4|0);
     HEAP32[$78>>2] = $77;
     $79 = (($67) + ($6)|0);
     $80 = $76 | 1;
     $81 = ((($79)) + 4|0);
     HEAP32[$81>>2] = $80;
     $82 = (($67) + ($75)|0);
     HEAP32[$82>>2] = $76;
     $83 = ($33|0)==(0);
     if (!($83)) {
      $84 = HEAP32[(5592)>>2]|0;
      $85 = $33 >>> 3;
      $86 = $85 << 1;
      $87 = (5612 + ($86<<2)|0);
      $88 = 1 << $85;
      $89 = $90 & $88;
      $91 = ($89|0)==(0);
      if ($91) {
       $92 = $90 | $88;
       HEAP32[1393] = $92;
       $$pre = ((($87)) + 8|0);
       $$0194 = $87;$$pre$phiZ2D = $$pre;
      } else {
       $93 = ((($87)) + 8|0);
       $94 = HEAP32[$93>>2]|0;
       $$0194 = $94;$$pre$phiZ2D = $93;
      }
      HEAP32[$$pre$phiZ2D>>2] = $84;
      $95 = ((($$0194)) + 12|0);
      HEAP32[$95>>2] = $84;
      $96 = ((($84)) + 8|0);
      HEAP32[$96>>2] = $$0194;
      $97 = ((($84)) + 12|0);
      HEAP32[$97>>2] = $87;
     }
     HEAP32[(5580)>>2] = $76;
     HEAP32[(5592)>>2] = $79;
     $$0 = $68;
     STACKTOP = sp;return ($$0|0);
    }
    $98 = HEAP32[(5576)>>2]|0;
    $99 = ($98|0)==(0);
    if ($99) {
     $$0192 = $6;
    } else {
     $100 = (0 - ($98))|0;
     $101 = $98 & $100;
     $102 = (($101) + -1)|0;
     $103 = $102 >>> 12;
     $104 = $103 & 16;
     $105 = $102 >>> $104;
     $106 = $105 >>> 5;
     $107 = $106 & 8;
     $108 = $107 | $104;
     $109 = $105 >>> $107;
     $110 = $109 >>> 2;
     $111 = $110 & 4;
     $112 = $108 | $111;
     $113 = $109 >>> $111;
     $114 = $113 >>> 1;
     $115 = $114 & 2;
     $116 = $112 | $115;
     $117 = $113 >>> $115;
     $118 = $117 >>> 1;
     $119 = $118 & 1;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = (($120) + ($121))|0;
     $123 = (5876 + ($122<<2)|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($124)) + 4|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $126 & -8;
     $128 = (($127) - ($6))|0;
     $$0169$i = $124;$$0170$i = $124;$$0171$i = $128;
     while(1) {
      $129 = ((($$0169$i)) + 16|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = ($130|0)==(0|0);
      if ($131) {
       $132 = ((($$0169$i)) + 20|0);
       $133 = HEAP32[$132>>2]|0;
       $134 = ($133|0)==(0|0);
       if ($134) {
        break;
       } else {
        $136 = $133;
       }
      } else {
       $136 = $130;
      }
      $135 = ((($136)) + 4|0);
      $137 = HEAP32[$135>>2]|0;
      $138 = $137 & -8;
      $139 = (($138) - ($6))|0;
      $140 = ($139>>>0)<($$0171$i>>>0);
      $spec$select$i = $140 ? $139 : $$0171$i;
      $spec$select1$i = $140 ? $136 : $$0170$i;
      $$0169$i = $136;$$0170$i = $spec$select1$i;$$0171$i = $spec$select$i;
     }
     $141 = (($$0170$i) + ($6)|0);
     $142 = ($141>>>0)>($$0170$i>>>0);
     if ($142) {
      $143 = ((($$0170$i)) + 24|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($$0170$i)) + 12|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($146|0)==($$0170$i|0);
      do {
       if ($147) {
        $152 = ((($$0170$i)) + 20|0);
        $153 = HEAP32[$152>>2]|0;
        $154 = ($153|0)==(0|0);
        if ($154) {
         $155 = ((($$0170$i)) + 16|0);
         $156 = HEAP32[$155>>2]|0;
         $157 = ($156|0)==(0|0);
         if ($157) {
          $$3$i = 0;
          break;
         } else {
          $$1174$i$ph = $156;$$1176$i$ph = $155;
         }
        } else {
         $$1174$i$ph = $153;$$1176$i$ph = $152;
        }
        $$1174$i = $$1174$i$ph;$$1176$i = $$1176$i$ph;
        while(1) {
         $158 = ((($$1174$i)) + 20|0);
         $159 = HEAP32[$158>>2]|0;
         $160 = ($159|0)==(0|0);
         if ($160) {
          $161 = ((($$1174$i)) + 16|0);
          $162 = HEAP32[$161>>2]|0;
          $163 = ($162|0)==(0|0);
          if ($163) {
           break;
          } else {
           $$1174$i$be = $162;$$1176$i$be = $161;
          }
         } else {
          $$1174$i$be = $159;$$1176$i$be = $158;
         }
         $$1174$i = $$1174$i$be;$$1176$i = $$1176$i$be;
        }
        HEAP32[$$1176$i>>2] = 0;
        $$3$i = $$1174$i;
       } else {
        $148 = ((($$0170$i)) + 8|0);
        $149 = HEAP32[$148>>2]|0;
        $150 = ((($149)) + 12|0);
        HEAP32[$150>>2] = $146;
        $151 = ((($146)) + 8|0);
        HEAP32[$151>>2] = $149;
        $$3$i = $146;
       }
      } while(0);
      $164 = ($144|0)==(0|0);
      do {
       if (!($164)) {
        $165 = ((($$0170$i)) + 28|0);
        $166 = HEAP32[$165>>2]|0;
        $167 = (5876 + ($166<<2)|0);
        $168 = HEAP32[$167>>2]|0;
        $169 = ($$0170$i|0)==($168|0);
        if ($169) {
         HEAP32[$167>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $170 = 1 << $166;
          $171 = $170 ^ -1;
          $172 = $98 & $171;
          HEAP32[(5576)>>2] = $172;
          break;
         }
        } else {
         $173 = ((($144)) + 16|0);
         $174 = HEAP32[$173>>2]|0;
         $175 = ($174|0)==($$0170$i|0);
         $176 = ((($144)) + 20|0);
         $$sink = $175 ? $173 : $176;
         HEAP32[$$sink>>2] = $$3$i;
         $177 = ($$3$i|0)==(0|0);
         if ($177) {
          break;
         }
        }
        $178 = ((($$3$i)) + 24|0);
        HEAP32[$178>>2] = $144;
        $179 = ((($$0170$i)) + 16|0);
        $180 = HEAP32[$179>>2]|0;
        $181 = ($180|0)==(0|0);
        if (!($181)) {
         $182 = ((($$3$i)) + 16|0);
         HEAP32[$182>>2] = $180;
         $183 = ((($180)) + 24|0);
         HEAP32[$183>>2] = $$3$i;
        }
        $184 = ((($$0170$i)) + 20|0);
        $185 = HEAP32[$184>>2]|0;
        $186 = ($185|0)==(0|0);
        if (!($186)) {
         $187 = ((($$3$i)) + 20|0);
         HEAP32[$187>>2] = $185;
         $188 = ((($185)) + 24|0);
         HEAP32[$188>>2] = $$3$i;
        }
       }
      } while(0);
      $189 = ($$0171$i>>>0)<(16);
      if ($189) {
       $190 = (($$0171$i) + ($6))|0;
       $191 = $190 | 3;
       $192 = ((($$0170$i)) + 4|0);
       HEAP32[$192>>2] = $191;
       $193 = (($$0170$i) + ($190)|0);
       $194 = ((($193)) + 4|0);
       $195 = HEAP32[$194>>2]|0;
       $196 = $195 | 1;
       HEAP32[$194>>2] = $196;
      } else {
       $197 = $6 | 3;
       $198 = ((($$0170$i)) + 4|0);
       HEAP32[$198>>2] = $197;
       $199 = $$0171$i | 1;
       $200 = ((($141)) + 4|0);
       HEAP32[$200>>2] = $199;
       $201 = (($141) + ($$0171$i)|0);
       HEAP32[$201>>2] = $$0171$i;
       $202 = ($33|0)==(0);
       if (!($202)) {
        $203 = HEAP32[(5592)>>2]|0;
        $204 = $33 >>> 3;
        $205 = $204 << 1;
        $206 = (5612 + ($205<<2)|0);
        $207 = 1 << $204;
        $208 = $207 & $8;
        $209 = ($208|0)==(0);
        if ($209) {
         $210 = $207 | $8;
         HEAP32[1393] = $210;
         $$pre$i = ((($206)) + 8|0);
         $$0$i = $206;$$pre$phi$iZ2D = $$pre$i;
        } else {
         $211 = ((($206)) + 8|0);
         $212 = HEAP32[$211>>2]|0;
         $$0$i = $212;$$pre$phi$iZ2D = $211;
        }
        HEAP32[$$pre$phi$iZ2D>>2] = $203;
        $213 = ((($$0$i)) + 12|0);
        HEAP32[$213>>2] = $203;
        $214 = ((($203)) + 8|0);
        HEAP32[$214>>2] = $$0$i;
        $215 = ((($203)) + 12|0);
        HEAP32[$215>>2] = $206;
       }
       HEAP32[(5580)>>2] = $$0171$i;
       HEAP32[(5592)>>2] = $141;
      }
      $216 = ((($$0170$i)) + 8|0);
      $$0 = $216;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0192 = $6;
     }
    }
   } else {
    $$0192 = $6;
   }
  } else {
   $217 = ($0>>>0)>(4294967231);
   if ($217) {
    $$0192 = -1;
   } else {
    $218 = (($0) + 11)|0;
    $219 = $218 & -8;
    $220 = HEAP32[(5576)>>2]|0;
    $221 = ($220|0)==(0);
    if ($221) {
     $$0192 = $219;
    } else {
     $222 = (0 - ($219))|0;
     $223 = $218 >>> 8;
     $224 = ($223|0)==(0);
     if ($224) {
      $$0335$i = 0;
     } else {
      $225 = ($219>>>0)>(16777215);
      if ($225) {
       $$0335$i = 31;
      } else {
       $226 = (($223) + 1048320)|0;
       $227 = $226 >>> 16;
       $228 = $227 & 8;
       $229 = $223 << $228;
       $230 = (($229) + 520192)|0;
       $231 = $230 >>> 16;
       $232 = $231 & 4;
       $233 = $232 | $228;
       $234 = $229 << $232;
       $235 = (($234) + 245760)|0;
       $236 = $235 >>> 16;
       $237 = $236 & 2;
       $238 = $233 | $237;
       $239 = (14 - ($238))|0;
       $240 = $234 << $237;
       $241 = $240 >>> 15;
       $242 = (($239) + ($241))|0;
       $243 = $242 << 1;
       $244 = (($242) + 7)|0;
       $245 = $219 >>> $244;
       $246 = $245 & 1;
       $247 = $246 | $243;
       $$0335$i = $247;
      }
     }
     $248 = (5876 + ($$0335$i<<2)|0);
     $249 = HEAP32[$248>>2]|0;
     $250 = ($249|0)==(0|0);
     L79: do {
      if ($250) {
       $$2331$i = 0;$$3$i198 = 0;$$3326$i = $222;
       label = 61;
      } else {
       $251 = ($$0335$i|0)==(31);
       $252 = $$0335$i >>> 1;
       $253 = (25 - ($252))|0;
       $254 = $251 ? 0 : $253;
       $255 = $219 << $254;
       $$0318$i = 0;$$0323$i = $222;$$0329$i = $249;$$0336$i = $255;$$0339$i = 0;
       while(1) {
        $256 = ((($$0329$i)) + 4|0);
        $257 = HEAP32[$256>>2]|0;
        $258 = $257 & -8;
        $259 = (($258) - ($219))|0;
        $260 = ($259>>>0)<($$0323$i>>>0);
        if ($260) {
         $261 = ($259|0)==(0);
         if ($261) {
          $$415$i$ph = $$0329$i;$$432714$i$ph = 0;$$533413$i$ph = $$0329$i;
          label = 65;
          break L79;
         } else {
          $$1319$i = $$0329$i;$$1324$i = $259;
         }
        } else {
         $$1319$i = $$0318$i;$$1324$i = $$0323$i;
        }
        $262 = ((($$0329$i)) + 20|0);
        $263 = HEAP32[$262>>2]|0;
        $264 = $$0336$i >>> 31;
        $265 = (((($$0329$i)) + 16|0) + ($264<<2)|0);
        $266 = HEAP32[$265>>2]|0;
        $267 = ($263|0)==(0|0);
        $268 = ($263|0)==($266|0);
        $or$cond1$i197 = $267 | $268;
        $$1340$i = $or$cond1$i197 ? $$0339$i : $263;
        $269 = ($266|0)==(0|0);
        $spec$select4$i = $$0336$i << 1;
        if ($269) {
         $$2331$i = $$1340$i;$$3$i198 = $$1319$i;$$3326$i = $$1324$i;
         label = 61;
         break;
        } else {
         $$0318$i = $$1319$i;$$0323$i = $$1324$i;$$0329$i = $266;$$0336$i = $spec$select4$i;$$0339$i = $$1340$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 61) {
      $270 = ($$2331$i|0)==(0|0);
      $271 = ($$3$i198|0)==(0|0);
      $or$cond$i199 = $270 & $271;
      if ($or$cond$i199) {
       $272 = 2 << $$0335$i;
       $273 = (0 - ($272))|0;
       $274 = $272 | $273;
       $275 = $274 & $220;
       $276 = ($275|0)==(0);
       if ($276) {
        $$0192 = $219;
        break;
       }
       $277 = (0 - ($275))|0;
       $278 = $275 & $277;
       $279 = (($278) + -1)|0;
       $280 = $279 >>> 12;
       $281 = $280 & 16;
       $282 = $279 >>> $281;
       $283 = $282 >>> 5;
       $284 = $283 & 8;
       $285 = $284 | $281;
       $286 = $282 >>> $284;
       $287 = $286 >>> 2;
       $288 = $287 & 4;
       $289 = $285 | $288;
       $290 = $286 >>> $288;
       $291 = $290 >>> 1;
       $292 = $291 & 2;
       $293 = $289 | $292;
       $294 = $290 >>> $292;
       $295 = $294 >>> 1;
       $296 = $295 & 1;
       $297 = $293 | $296;
       $298 = $294 >>> $296;
       $299 = (($297) + ($298))|0;
       $300 = (5876 + ($299<<2)|0);
       $301 = HEAP32[$300>>2]|0;
       $$3$i198211 = 0;$$4333$i = $301;
      } else {
       $$3$i198211 = $$3$i198;$$4333$i = $$2331$i;
      }
      $302 = ($$4333$i|0)==(0|0);
      if ($302) {
       $$4$lcssa$i = $$3$i198211;$$4327$lcssa$i = $$3326$i;
      } else {
       $$415$i$ph = $$3$i198211;$$432714$i$ph = $$3326$i;$$533413$i$ph = $$4333$i;
       label = 65;
      }
     }
     if ((label|0) == 65) {
      $$415$i = $$415$i$ph;$$432714$i = $$432714$i$ph;$$533413$i = $$533413$i$ph;
      while(1) {
       $303 = ((($$533413$i)) + 4|0);
       $304 = HEAP32[$303>>2]|0;
       $305 = $304 & -8;
       $306 = (($305) - ($219))|0;
       $307 = ($306>>>0)<($$432714$i>>>0);
       $spec$select$i201 = $307 ? $306 : $$432714$i;
       $spec$select2$i = $307 ? $$533413$i : $$415$i;
       $308 = ((($$533413$i)) + 16|0);
       $309 = HEAP32[$308>>2]|0;
       $310 = ($309|0)==(0|0);
       if ($310) {
        $311 = ((($$533413$i)) + 20|0);
        $312 = HEAP32[$311>>2]|0;
        $313 = $312;
       } else {
        $313 = $309;
       }
       $314 = ($313|0)==(0|0);
       if ($314) {
        $$4$lcssa$i = $spec$select2$i;$$4327$lcssa$i = $spec$select$i201;
        break;
       } else {
        $$415$i = $spec$select2$i;$$432714$i = $spec$select$i201;$$533413$i = $313;
       }
      }
     }
     $315 = ($$4$lcssa$i|0)==(0|0);
     if ($315) {
      $$0192 = $219;
     } else {
      $316 = HEAP32[(5580)>>2]|0;
      $317 = (($316) - ($219))|0;
      $318 = ($$4327$lcssa$i>>>0)<($317>>>0);
      if ($318) {
       $319 = (($$4$lcssa$i) + ($219)|0);
       $320 = ($319>>>0)>($$4$lcssa$i>>>0);
       if ($320) {
        $321 = ((($$4$lcssa$i)) + 24|0);
        $322 = HEAP32[$321>>2]|0;
        $323 = ((($$4$lcssa$i)) + 12|0);
        $324 = HEAP32[$323>>2]|0;
        $325 = ($324|0)==($$4$lcssa$i|0);
        do {
         if ($325) {
          $330 = ((($$4$lcssa$i)) + 20|0);
          $331 = HEAP32[$330>>2]|0;
          $332 = ($331|0)==(0|0);
          if ($332) {
           $333 = ((($$4$lcssa$i)) + 16|0);
           $334 = HEAP32[$333>>2]|0;
           $335 = ($334|0)==(0|0);
           if ($335) {
            $$3348$i = 0;
            break;
           } else {
            $$1346$i$ph = $334;$$1350$i$ph = $333;
           }
          } else {
           $$1346$i$ph = $331;$$1350$i$ph = $330;
          }
          $$1346$i = $$1346$i$ph;$$1350$i = $$1350$i$ph;
          while(1) {
           $336 = ((($$1346$i)) + 20|0);
           $337 = HEAP32[$336>>2]|0;
           $338 = ($337|0)==(0|0);
           if ($338) {
            $339 = ((($$1346$i)) + 16|0);
            $340 = HEAP32[$339>>2]|0;
            $341 = ($340|0)==(0|0);
            if ($341) {
             break;
            } else {
             $$1346$i$be = $340;$$1350$i$be = $339;
            }
           } else {
            $$1346$i$be = $337;$$1350$i$be = $336;
           }
           $$1346$i = $$1346$i$be;$$1350$i = $$1350$i$be;
          }
          HEAP32[$$1350$i>>2] = 0;
          $$3348$i = $$1346$i;
         } else {
          $326 = ((($$4$lcssa$i)) + 8|0);
          $327 = HEAP32[$326>>2]|0;
          $328 = ((($327)) + 12|0);
          HEAP32[$328>>2] = $324;
          $329 = ((($324)) + 8|0);
          HEAP32[$329>>2] = $327;
          $$3348$i = $324;
         }
        } while(0);
        $342 = ($322|0)==(0|0);
        do {
         if ($342) {
          $425 = $220;
         } else {
          $343 = ((($$4$lcssa$i)) + 28|0);
          $344 = HEAP32[$343>>2]|0;
          $345 = (5876 + ($344<<2)|0);
          $346 = HEAP32[$345>>2]|0;
          $347 = ($$4$lcssa$i|0)==($346|0);
          if ($347) {
           HEAP32[$345>>2] = $$3348$i;
           $cond$i203 = ($$3348$i|0)==(0|0);
           if ($cond$i203) {
            $348 = 1 << $344;
            $349 = $348 ^ -1;
            $350 = $220 & $349;
            HEAP32[(5576)>>2] = $350;
            $425 = $350;
            break;
           }
          } else {
           $351 = ((($322)) + 16|0);
           $352 = HEAP32[$351>>2]|0;
           $353 = ($352|0)==($$4$lcssa$i|0);
           $354 = ((($322)) + 20|0);
           $$sink320 = $353 ? $351 : $354;
           HEAP32[$$sink320>>2] = $$3348$i;
           $355 = ($$3348$i|0)==(0|0);
           if ($355) {
            $425 = $220;
            break;
           }
          }
          $356 = ((($$3348$i)) + 24|0);
          HEAP32[$356>>2] = $322;
          $357 = ((($$4$lcssa$i)) + 16|0);
          $358 = HEAP32[$357>>2]|0;
          $359 = ($358|0)==(0|0);
          if (!($359)) {
           $360 = ((($$3348$i)) + 16|0);
           HEAP32[$360>>2] = $358;
           $361 = ((($358)) + 24|0);
           HEAP32[$361>>2] = $$3348$i;
          }
          $362 = ((($$4$lcssa$i)) + 20|0);
          $363 = HEAP32[$362>>2]|0;
          $364 = ($363|0)==(0|0);
          if ($364) {
           $425 = $220;
          } else {
           $365 = ((($$3348$i)) + 20|0);
           HEAP32[$365>>2] = $363;
           $366 = ((($363)) + 24|0);
           HEAP32[$366>>2] = $$3348$i;
           $425 = $220;
          }
         }
        } while(0);
        $367 = ($$4327$lcssa$i>>>0)<(16);
        L128: do {
         if ($367) {
          $368 = (($$4327$lcssa$i) + ($219))|0;
          $369 = $368 | 3;
          $370 = ((($$4$lcssa$i)) + 4|0);
          HEAP32[$370>>2] = $369;
          $371 = (($$4$lcssa$i) + ($368)|0);
          $372 = ((($371)) + 4|0);
          $373 = HEAP32[$372>>2]|0;
          $374 = $373 | 1;
          HEAP32[$372>>2] = $374;
         } else {
          $375 = $219 | 3;
          $376 = ((($$4$lcssa$i)) + 4|0);
          HEAP32[$376>>2] = $375;
          $377 = $$4327$lcssa$i | 1;
          $378 = ((($319)) + 4|0);
          HEAP32[$378>>2] = $377;
          $379 = (($319) + ($$4327$lcssa$i)|0);
          HEAP32[$379>>2] = $$4327$lcssa$i;
          $380 = $$4327$lcssa$i >>> 3;
          $381 = ($$4327$lcssa$i>>>0)<(256);
          if ($381) {
           $382 = $380 << 1;
           $383 = (5612 + ($382<<2)|0);
           $384 = HEAP32[1393]|0;
           $385 = 1 << $380;
           $386 = $384 & $385;
           $387 = ($386|0)==(0);
           if ($387) {
            $388 = $384 | $385;
            HEAP32[1393] = $388;
            $$pre$i204 = ((($383)) + 8|0);
            $$0344$i = $383;$$pre$phi$i205Z2D = $$pre$i204;
           } else {
            $389 = ((($383)) + 8|0);
            $390 = HEAP32[$389>>2]|0;
            $$0344$i = $390;$$pre$phi$i205Z2D = $389;
           }
           HEAP32[$$pre$phi$i205Z2D>>2] = $319;
           $391 = ((($$0344$i)) + 12|0);
           HEAP32[$391>>2] = $319;
           $392 = ((($319)) + 8|0);
           HEAP32[$392>>2] = $$0344$i;
           $393 = ((($319)) + 12|0);
           HEAP32[$393>>2] = $383;
           break;
          }
          $394 = $$4327$lcssa$i >>> 8;
          $395 = ($394|0)==(0);
          if ($395) {
           $$0338$i = 0;
          } else {
           $396 = ($$4327$lcssa$i>>>0)>(16777215);
           if ($396) {
            $$0338$i = 31;
           } else {
            $397 = (($394) + 1048320)|0;
            $398 = $397 >>> 16;
            $399 = $398 & 8;
            $400 = $394 << $399;
            $401 = (($400) + 520192)|0;
            $402 = $401 >>> 16;
            $403 = $402 & 4;
            $404 = $403 | $399;
            $405 = $400 << $403;
            $406 = (($405) + 245760)|0;
            $407 = $406 >>> 16;
            $408 = $407 & 2;
            $409 = $404 | $408;
            $410 = (14 - ($409))|0;
            $411 = $405 << $408;
            $412 = $411 >>> 15;
            $413 = (($410) + ($412))|0;
            $414 = $413 << 1;
            $415 = (($413) + 7)|0;
            $416 = $$4327$lcssa$i >>> $415;
            $417 = $416 & 1;
            $418 = $417 | $414;
            $$0338$i = $418;
           }
          }
          $419 = (5876 + ($$0338$i<<2)|0);
          $420 = ((($319)) + 28|0);
          HEAP32[$420>>2] = $$0338$i;
          $421 = ((($319)) + 16|0);
          $422 = ((($421)) + 4|0);
          HEAP32[$422>>2] = 0;
          HEAP32[$421>>2] = 0;
          $423 = 1 << $$0338$i;
          $424 = $425 & $423;
          $426 = ($424|0)==(0);
          if ($426) {
           $427 = $425 | $423;
           HEAP32[(5576)>>2] = $427;
           HEAP32[$419>>2] = $319;
           $428 = ((($319)) + 24|0);
           HEAP32[$428>>2] = $419;
           $429 = ((($319)) + 12|0);
           HEAP32[$429>>2] = $319;
           $430 = ((($319)) + 8|0);
           HEAP32[$430>>2] = $319;
           break;
          }
          $431 = HEAP32[$419>>2]|0;
          $432 = ((($431)) + 4|0);
          $433 = HEAP32[$432>>2]|0;
          $434 = $433 & -8;
          $435 = ($434|0)==($$4327$lcssa$i|0);
          L145: do {
           if ($435) {
            $$0321$lcssa$i = $431;
           } else {
            $436 = ($$0338$i|0)==(31);
            $437 = $$0338$i >>> 1;
            $438 = (25 - ($437))|0;
            $439 = $436 ? 0 : $438;
            $440 = $$4327$lcssa$i << $439;
            $$032012$i = $440;$$032111$i = $431;
            while(1) {
             $447 = $$032012$i >>> 31;
             $448 = (((($$032111$i)) + 16|0) + ($447<<2)|0);
             $443 = HEAP32[$448>>2]|0;
             $449 = ($443|0)==(0|0);
             if ($449) {
              break;
             }
             $441 = $$032012$i << 1;
             $442 = ((($443)) + 4|0);
             $444 = HEAP32[$442>>2]|0;
             $445 = $444 & -8;
             $446 = ($445|0)==($$4327$lcssa$i|0);
             if ($446) {
              $$0321$lcssa$i = $443;
              break L145;
             } else {
              $$032012$i = $441;$$032111$i = $443;
             }
            }
            HEAP32[$448>>2] = $319;
            $450 = ((($319)) + 24|0);
            HEAP32[$450>>2] = $$032111$i;
            $451 = ((($319)) + 12|0);
            HEAP32[$451>>2] = $319;
            $452 = ((($319)) + 8|0);
            HEAP32[$452>>2] = $319;
            break L128;
           }
          } while(0);
          $453 = ((($$0321$lcssa$i)) + 8|0);
          $454 = HEAP32[$453>>2]|0;
          $455 = ((($454)) + 12|0);
          HEAP32[$455>>2] = $319;
          HEAP32[$453>>2] = $319;
          $456 = ((($319)) + 8|0);
          HEAP32[$456>>2] = $454;
          $457 = ((($319)) + 12|0);
          HEAP32[$457>>2] = $$0321$lcssa$i;
          $458 = ((($319)) + 24|0);
          HEAP32[$458>>2] = 0;
         }
        } while(0);
        $459 = ((($$4$lcssa$i)) + 8|0);
        $$0 = $459;
        STACKTOP = sp;return ($$0|0);
       } else {
        $$0192 = $219;
       }
      } else {
       $$0192 = $219;
      }
     }
    }
   }
  }
 } while(0);
 $460 = HEAP32[(5580)>>2]|0;
 $461 = ($460>>>0)<($$0192>>>0);
 if (!($461)) {
  $462 = (($460) - ($$0192))|0;
  $463 = HEAP32[(5592)>>2]|0;
  $464 = ($462>>>0)>(15);
  if ($464) {
   $465 = (($463) + ($$0192)|0);
   HEAP32[(5592)>>2] = $465;
   HEAP32[(5580)>>2] = $462;
   $466 = $462 | 1;
   $467 = ((($465)) + 4|0);
   HEAP32[$467>>2] = $466;
   $468 = (($463) + ($460)|0);
   HEAP32[$468>>2] = $462;
   $469 = $$0192 | 3;
   $470 = ((($463)) + 4|0);
   HEAP32[$470>>2] = $469;
  } else {
   HEAP32[(5580)>>2] = 0;
   HEAP32[(5592)>>2] = 0;
   $471 = $460 | 3;
   $472 = ((($463)) + 4|0);
   HEAP32[$472>>2] = $471;
   $473 = (($463) + ($460)|0);
   $474 = ((($473)) + 4|0);
   $475 = HEAP32[$474>>2]|0;
   $476 = $475 | 1;
   HEAP32[$474>>2] = $476;
  }
  $477 = ((($463)) + 8|0);
  $$0 = $477;
  STACKTOP = sp;return ($$0|0);
 }
 $478 = HEAP32[(5584)>>2]|0;
 $479 = ($478>>>0)>($$0192>>>0);
 if ($479) {
  $480 = (($478) - ($$0192))|0;
  HEAP32[(5584)>>2] = $480;
  $481 = HEAP32[(5596)>>2]|0;
  $482 = (($481) + ($$0192)|0);
  HEAP32[(5596)>>2] = $482;
  $483 = $480 | 1;
  $484 = ((($482)) + 4|0);
  HEAP32[$484>>2] = $483;
  $485 = $$0192 | 3;
  $486 = ((($481)) + 4|0);
  HEAP32[$486>>2] = $485;
  $487 = ((($481)) + 8|0);
  $$0 = $487;
  STACKTOP = sp;return ($$0|0);
 }
 $488 = HEAP32[1511]|0;
 $489 = ($488|0)==(0);
 if ($489) {
  HEAP32[(6052)>>2] = 4096;
  HEAP32[(6048)>>2] = 4096;
  HEAP32[(6056)>>2] = -1;
  HEAP32[(6060)>>2] = -1;
  HEAP32[(6064)>>2] = 0;
  HEAP32[(6016)>>2] = 0;
  $490 = $1;
  $491 = $490 & -16;
  $492 = $491 ^ 1431655768;
  HEAP32[1511] = $492;
  $496 = 4096;
 } else {
  $$pre$i195 = HEAP32[(6052)>>2]|0;
  $496 = $$pre$i195;
 }
 $493 = (($$0192) + 48)|0;
 $494 = (($$0192) + 47)|0;
 $495 = (($496) + ($494))|0;
 $497 = (0 - ($496))|0;
 $498 = $495 & $497;
 $499 = ($498>>>0)>($$0192>>>0);
 if (!($499)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $500 = HEAP32[(6012)>>2]|0;
 $501 = ($500|0)==(0);
 if (!($501)) {
  $502 = HEAP32[(6004)>>2]|0;
  $503 = (($502) + ($498))|0;
  $504 = ($503>>>0)<=($502>>>0);
  $505 = ($503>>>0)>($500>>>0);
  $or$cond1$i = $504 | $505;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $506 = HEAP32[(6016)>>2]|0;
 $507 = $506 & 4;
 $508 = ($507|0)==(0);
 L178: do {
  if ($508) {
   $509 = HEAP32[(5596)>>2]|0;
   $510 = ($509|0)==(0|0);
   L180: do {
    if ($510) {
     label = 128;
    } else {
     $$0$i20$i = (6020);
     while(1) {
      $511 = HEAP32[$$0$i20$i>>2]|0;
      $512 = ($511>>>0)>($509>>>0);
      if (!($512)) {
       $513 = ((($$0$i20$i)) + 4|0);
       $514 = HEAP32[$513>>2]|0;
       $515 = (($511) + ($514)|0);
       $516 = ($515>>>0)>($509>>>0);
       if ($516) {
        break;
       }
      }
      $517 = ((($$0$i20$i)) + 8|0);
      $518 = HEAP32[$517>>2]|0;
      $519 = ($518|0)==(0|0);
      if ($519) {
       label = 128;
       break L180;
      } else {
       $$0$i20$i = $518;
      }
     }
     $542 = (($495) - ($478))|0;
     $543 = $542 & $497;
     $544 = ($543>>>0)<(2147483647);
     if ($544) {
      $545 = ((($$0$i20$i)) + 4|0);
      $546 = (_sbrk(($543|0))|0);
      $547 = HEAP32[$$0$i20$i>>2]|0;
      $548 = HEAP32[$545>>2]|0;
      $549 = (($547) + ($548)|0);
      $550 = ($546|0)==($549|0);
      if ($550) {
       $551 = ($546|0)==((-1)|0);
       if ($551) {
        $$2234243136$i = $543;
       } else {
        $$723947$i = $543;$$748$i = $546;
        label = 145;
        break L178;
       }
      } else {
       $$2247$ph$i = $546;$$2253$ph$i = $543;
       label = 136;
      }
     } else {
      $$2234243136$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 128) {
     $520 = (_sbrk(0)|0);
     $521 = ($520|0)==((-1)|0);
     if ($521) {
      $$2234243136$i = 0;
     } else {
      $522 = $520;
      $523 = HEAP32[(6048)>>2]|0;
      $524 = (($523) + -1)|0;
      $525 = $524 & $522;
      $526 = ($525|0)==(0);
      $527 = (($524) + ($522))|0;
      $528 = (0 - ($523))|0;
      $529 = $527 & $528;
      $530 = (($529) - ($522))|0;
      $531 = $526 ? 0 : $530;
      $spec$select49$i = (($531) + ($498))|0;
      $532 = HEAP32[(6004)>>2]|0;
      $533 = (($spec$select49$i) + ($532))|0;
      $534 = ($spec$select49$i>>>0)>($$0192>>>0);
      $535 = ($spec$select49$i>>>0)<(2147483647);
      $or$cond$i = $534 & $535;
      if ($or$cond$i) {
       $536 = HEAP32[(6012)>>2]|0;
       $537 = ($536|0)==(0);
       if (!($537)) {
        $538 = ($533>>>0)<=($532>>>0);
        $539 = ($533>>>0)>($536>>>0);
        $or$cond2$i = $538 | $539;
        if ($or$cond2$i) {
         $$2234243136$i = 0;
         break;
        }
       }
       $540 = (_sbrk(($spec$select49$i|0))|0);
       $541 = ($540|0)==($520|0);
       if ($541) {
        $$723947$i = $spec$select49$i;$$748$i = $520;
        label = 145;
        break L178;
       } else {
        $$2247$ph$i = $540;$$2253$ph$i = $spec$select49$i;
        label = 136;
       }
      } else {
       $$2234243136$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 136) {
     $552 = (0 - ($$2253$ph$i))|0;
     $553 = ($$2247$ph$i|0)!=((-1)|0);
     $554 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $554 & $553;
     $555 = ($493>>>0)>($$2253$ph$i>>>0);
     $or$cond6$i = $555 & $or$cond7$i;
     if (!($or$cond6$i)) {
      $565 = ($$2247$ph$i|0)==((-1)|0);
      if ($565) {
       $$2234243136$i = 0;
       break;
      } else {
       $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
       label = 145;
       break L178;
      }
     }
     $556 = HEAP32[(6052)>>2]|0;
     $557 = (($494) - ($$2253$ph$i))|0;
     $558 = (($557) + ($556))|0;
     $559 = (0 - ($556))|0;
     $560 = $558 & $559;
     $561 = ($560>>>0)<(2147483647);
     if (!($561)) {
      $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
      label = 145;
      break L178;
     }
     $562 = (_sbrk(($560|0))|0);
     $563 = ($562|0)==((-1)|0);
     if ($563) {
      (_sbrk(($552|0))|0);
      $$2234243136$i = 0;
      break;
     } else {
      $564 = (($560) + ($$2253$ph$i))|0;
      $$723947$i = $564;$$748$i = $$2247$ph$i;
      label = 145;
      break L178;
     }
    }
   } while(0);
   $566 = HEAP32[(6016)>>2]|0;
   $567 = $566 | 4;
   HEAP32[(6016)>>2] = $567;
   $$4236$i = $$2234243136$i;
   label = 143;
  } else {
   $$4236$i = 0;
   label = 143;
  }
 } while(0);
 if ((label|0) == 143) {
  $568 = ($498>>>0)<(2147483647);
  if ($568) {
   $569 = (_sbrk(($498|0))|0);
   $570 = (_sbrk(0)|0);
   $571 = ($569|0)!=((-1)|0);
   $572 = ($570|0)!=((-1)|0);
   $or$cond5$i = $571 & $572;
   $573 = ($569>>>0)<($570>>>0);
   $or$cond8$i = $573 & $or$cond5$i;
   $574 = $570;
   $575 = $569;
   $576 = (($574) - ($575))|0;
   $577 = (($$0192) + 40)|0;
   $578 = ($576>>>0)>($577>>>0);
   $spec$select9$i = $578 ? $576 : $$4236$i;
   $or$cond8$not$i = $or$cond8$i ^ 1;
   $579 = ($569|0)==((-1)|0);
   $not$$i = $578 ^ 1;
   $580 = $579 | $not$$i;
   $or$cond50$i = $580 | $or$cond8$not$i;
   if (!($or$cond50$i)) {
    $$723947$i = $spec$select9$i;$$748$i = $569;
    label = 145;
   }
  }
 }
 if ((label|0) == 145) {
  $581 = HEAP32[(6004)>>2]|0;
  $582 = (($581) + ($$723947$i))|0;
  HEAP32[(6004)>>2] = $582;
  $583 = HEAP32[(6008)>>2]|0;
  $584 = ($582>>>0)>($583>>>0);
  if ($584) {
   HEAP32[(6008)>>2] = $582;
  }
  $585 = HEAP32[(5596)>>2]|0;
  $586 = ($585|0)==(0|0);
  L215: do {
   if ($586) {
    $587 = HEAP32[(5588)>>2]|0;
    $588 = ($587|0)==(0|0);
    $589 = ($$748$i>>>0)<($587>>>0);
    $or$cond11$i = $588 | $589;
    if ($or$cond11$i) {
     HEAP32[(5588)>>2] = $$748$i;
    }
    HEAP32[(6020)>>2] = $$748$i;
    HEAP32[(6024)>>2] = $$723947$i;
    HEAP32[(6032)>>2] = 0;
    $590 = HEAP32[1511]|0;
    HEAP32[(5608)>>2] = $590;
    HEAP32[(5604)>>2] = -1;
    HEAP32[(5624)>>2] = (5612);
    HEAP32[(5620)>>2] = (5612);
    HEAP32[(5632)>>2] = (5620);
    HEAP32[(5628)>>2] = (5620);
    HEAP32[(5640)>>2] = (5628);
    HEAP32[(5636)>>2] = (5628);
    HEAP32[(5648)>>2] = (5636);
    HEAP32[(5644)>>2] = (5636);
    HEAP32[(5656)>>2] = (5644);
    HEAP32[(5652)>>2] = (5644);
    HEAP32[(5664)>>2] = (5652);
    HEAP32[(5660)>>2] = (5652);
    HEAP32[(5672)>>2] = (5660);
    HEAP32[(5668)>>2] = (5660);
    HEAP32[(5680)>>2] = (5668);
    HEAP32[(5676)>>2] = (5668);
    HEAP32[(5688)>>2] = (5676);
    HEAP32[(5684)>>2] = (5676);
    HEAP32[(5696)>>2] = (5684);
    HEAP32[(5692)>>2] = (5684);
    HEAP32[(5704)>>2] = (5692);
    HEAP32[(5700)>>2] = (5692);
    HEAP32[(5712)>>2] = (5700);
    HEAP32[(5708)>>2] = (5700);
    HEAP32[(5720)>>2] = (5708);
    HEAP32[(5716)>>2] = (5708);
    HEAP32[(5728)>>2] = (5716);
    HEAP32[(5724)>>2] = (5716);
    HEAP32[(5736)>>2] = (5724);
    HEAP32[(5732)>>2] = (5724);
    HEAP32[(5744)>>2] = (5732);
    HEAP32[(5740)>>2] = (5732);
    HEAP32[(5752)>>2] = (5740);
    HEAP32[(5748)>>2] = (5740);
    HEAP32[(5760)>>2] = (5748);
    HEAP32[(5756)>>2] = (5748);
    HEAP32[(5768)>>2] = (5756);
    HEAP32[(5764)>>2] = (5756);
    HEAP32[(5776)>>2] = (5764);
    HEAP32[(5772)>>2] = (5764);
    HEAP32[(5784)>>2] = (5772);
    HEAP32[(5780)>>2] = (5772);
    HEAP32[(5792)>>2] = (5780);
    HEAP32[(5788)>>2] = (5780);
    HEAP32[(5800)>>2] = (5788);
    HEAP32[(5796)>>2] = (5788);
    HEAP32[(5808)>>2] = (5796);
    HEAP32[(5804)>>2] = (5796);
    HEAP32[(5816)>>2] = (5804);
    HEAP32[(5812)>>2] = (5804);
    HEAP32[(5824)>>2] = (5812);
    HEAP32[(5820)>>2] = (5812);
    HEAP32[(5832)>>2] = (5820);
    HEAP32[(5828)>>2] = (5820);
    HEAP32[(5840)>>2] = (5828);
    HEAP32[(5836)>>2] = (5828);
    HEAP32[(5848)>>2] = (5836);
    HEAP32[(5844)>>2] = (5836);
    HEAP32[(5856)>>2] = (5844);
    HEAP32[(5852)>>2] = (5844);
    HEAP32[(5864)>>2] = (5852);
    HEAP32[(5860)>>2] = (5852);
    HEAP32[(5872)>>2] = (5860);
    HEAP32[(5868)>>2] = (5860);
    $591 = (($$723947$i) + -40)|0;
    $592 = ((($$748$i)) + 8|0);
    $593 = $592;
    $594 = $593 & 7;
    $595 = ($594|0)==(0);
    $596 = (0 - ($593))|0;
    $597 = $596 & 7;
    $598 = $595 ? 0 : $597;
    $599 = (($$748$i) + ($598)|0);
    $600 = (($591) - ($598))|0;
    HEAP32[(5596)>>2] = $599;
    HEAP32[(5584)>>2] = $600;
    $601 = $600 | 1;
    $602 = ((($599)) + 4|0);
    HEAP32[$602>>2] = $601;
    $603 = (($$748$i) + ($591)|0);
    $604 = ((($603)) + 4|0);
    HEAP32[$604>>2] = 40;
    $605 = HEAP32[(6060)>>2]|0;
    HEAP32[(5600)>>2] = $605;
   } else {
    $$024372$i = (6020);
    while(1) {
     $606 = HEAP32[$$024372$i>>2]|0;
     $607 = ((($$024372$i)) + 4|0);
     $608 = HEAP32[$607>>2]|0;
     $609 = (($606) + ($608)|0);
     $610 = ($$748$i|0)==($609|0);
     if ($610) {
      label = 154;
      break;
     }
     $611 = ((($$024372$i)) + 8|0);
     $612 = HEAP32[$611>>2]|0;
     $613 = ($612|0)==(0|0);
     if ($613) {
      break;
     } else {
      $$024372$i = $612;
     }
    }
    if ((label|0) == 154) {
     $614 = ((($$024372$i)) + 4|0);
     $615 = ((($$024372$i)) + 12|0);
     $616 = HEAP32[$615>>2]|0;
     $617 = $616 & 8;
     $618 = ($617|0)==(0);
     if ($618) {
      $619 = ($606>>>0)<=($585>>>0);
      $620 = ($$748$i>>>0)>($585>>>0);
      $or$cond51$i = $620 & $619;
      if ($or$cond51$i) {
       $621 = (($608) + ($$723947$i))|0;
       HEAP32[$614>>2] = $621;
       $622 = HEAP32[(5584)>>2]|0;
       $623 = (($622) + ($$723947$i))|0;
       $624 = ((($585)) + 8|0);
       $625 = $624;
       $626 = $625 & 7;
       $627 = ($626|0)==(0);
       $628 = (0 - ($625))|0;
       $629 = $628 & 7;
       $630 = $627 ? 0 : $629;
       $631 = (($585) + ($630)|0);
       $632 = (($623) - ($630))|0;
       HEAP32[(5596)>>2] = $631;
       HEAP32[(5584)>>2] = $632;
       $633 = $632 | 1;
       $634 = ((($631)) + 4|0);
       HEAP32[$634>>2] = $633;
       $635 = (($585) + ($623)|0);
       $636 = ((($635)) + 4|0);
       HEAP32[$636>>2] = 40;
       $637 = HEAP32[(6060)>>2]|0;
       HEAP32[(5600)>>2] = $637;
       break;
      }
     }
    }
    $638 = HEAP32[(5588)>>2]|0;
    $639 = ($$748$i>>>0)<($638>>>0);
    if ($639) {
     HEAP32[(5588)>>2] = $$748$i;
    }
    $640 = (($$748$i) + ($$723947$i)|0);
    $$124471$i = (6020);
    while(1) {
     $641 = HEAP32[$$124471$i>>2]|0;
     $642 = ($641|0)==($640|0);
     if ($642) {
      label = 162;
      break;
     }
     $643 = ((($$124471$i)) + 8|0);
     $644 = HEAP32[$643>>2]|0;
     $645 = ($644|0)==(0|0);
     if ($645) {
      break;
     } else {
      $$124471$i = $644;
     }
    }
    if ((label|0) == 162) {
     $646 = ((($$124471$i)) + 12|0);
     $647 = HEAP32[$646>>2]|0;
     $648 = $647 & 8;
     $649 = ($648|0)==(0);
     if ($649) {
      HEAP32[$$124471$i>>2] = $$748$i;
      $650 = ((($$124471$i)) + 4|0);
      $651 = HEAP32[$650>>2]|0;
      $652 = (($651) + ($$723947$i))|0;
      HEAP32[$650>>2] = $652;
      $653 = ((($$748$i)) + 8|0);
      $654 = $653;
      $655 = $654 & 7;
      $656 = ($655|0)==(0);
      $657 = (0 - ($654))|0;
      $658 = $657 & 7;
      $659 = $656 ? 0 : $658;
      $660 = (($$748$i) + ($659)|0);
      $661 = ((($640)) + 8|0);
      $662 = $661;
      $663 = $662 & 7;
      $664 = ($663|0)==(0);
      $665 = (0 - ($662))|0;
      $666 = $665 & 7;
      $667 = $664 ? 0 : $666;
      $668 = (($640) + ($667)|0);
      $669 = $668;
      $670 = $660;
      $671 = (($669) - ($670))|0;
      $672 = (($660) + ($$0192)|0);
      $673 = (($671) - ($$0192))|0;
      $674 = $$0192 | 3;
      $675 = ((($660)) + 4|0);
      HEAP32[$675>>2] = $674;
      $676 = ($585|0)==($668|0);
      L238: do {
       if ($676) {
        $677 = HEAP32[(5584)>>2]|0;
        $678 = (($677) + ($673))|0;
        HEAP32[(5584)>>2] = $678;
        HEAP32[(5596)>>2] = $672;
        $679 = $678 | 1;
        $680 = ((($672)) + 4|0);
        HEAP32[$680>>2] = $679;
       } else {
        $681 = HEAP32[(5592)>>2]|0;
        $682 = ($681|0)==($668|0);
        if ($682) {
         $683 = HEAP32[(5580)>>2]|0;
         $684 = (($683) + ($673))|0;
         HEAP32[(5580)>>2] = $684;
         HEAP32[(5592)>>2] = $672;
         $685 = $684 | 1;
         $686 = ((($672)) + 4|0);
         HEAP32[$686>>2] = $685;
         $687 = (($672) + ($684)|0);
         HEAP32[$687>>2] = $684;
         break;
        }
        $688 = ((($668)) + 4|0);
        $689 = HEAP32[$688>>2]|0;
        $690 = $689 & 3;
        $691 = ($690|0)==(1);
        if ($691) {
         $692 = $689 & -8;
         $693 = $689 >>> 3;
         $694 = ($689>>>0)<(256);
         L246: do {
          if ($694) {
           $695 = ((($668)) + 8|0);
           $696 = HEAP32[$695>>2]|0;
           $697 = ((($668)) + 12|0);
           $698 = HEAP32[$697>>2]|0;
           $699 = ($698|0)==($696|0);
           if ($699) {
            $700 = 1 << $693;
            $701 = $700 ^ -1;
            $702 = HEAP32[1393]|0;
            $703 = $702 & $701;
            HEAP32[1393] = $703;
            break;
           } else {
            $704 = ((($696)) + 12|0);
            HEAP32[$704>>2] = $698;
            $705 = ((($698)) + 8|0);
            HEAP32[$705>>2] = $696;
            break;
           }
          } else {
           $706 = ((($668)) + 24|0);
           $707 = HEAP32[$706>>2]|0;
           $708 = ((($668)) + 12|0);
           $709 = HEAP32[$708>>2]|0;
           $710 = ($709|0)==($668|0);
           do {
            if ($710) {
             $715 = ((($668)) + 16|0);
             $716 = ((($715)) + 4|0);
             $717 = HEAP32[$716>>2]|0;
             $718 = ($717|0)==(0|0);
             if ($718) {
              $719 = HEAP32[$715>>2]|0;
              $720 = ($719|0)==(0|0);
              if ($720) {
               $$3$i$i = 0;
               break;
              } else {
               $$1263$i$i$ph = $719;$$1265$i$i$ph = $715;
              }
             } else {
              $$1263$i$i$ph = $717;$$1265$i$i$ph = $716;
             }
             $$1263$i$i = $$1263$i$i$ph;$$1265$i$i = $$1265$i$i$ph;
             while(1) {
              $721 = ((($$1263$i$i)) + 20|0);
              $722 = HEAP32[$721>>2]|0;
              $723 = ($722|0)==(0|0);
              if ($723) {
               $724 = ((($$1263$i$i)) + 16|0);
               $725 = HEAP32[$724>>2]|0;
               $726 = ($725|0)==(0|0);
               if ($726) {
                break;
               } else {
                $$1263$i$i$be = $725;$$1265$i$i$be = $724;
               }
              } else {
               $$1263$i$i$be = $722;$$1265$i$i$be = $721;
              }
              $$1263$i$i = $$1263$i$i$be;$$1265$i$i = $$1265$i$i$be;
             }
             HEAP32[$$1265$i$i>>2] = 0;
             $$3$i$i = $$1263$i$i;
            } else {
             $711 = ((($668)) + 8|0);
             $712 = HEAP32[$711>>2]|0;
             $713 = ((($712)) + 12|0);
             HEAP32[$713>>2] = $709;
             $714 = ((($709)) + 8|0);
             HEAP32[$714>>2] = $712;
             $$3$i$i = $709;
            }
           } while(0);
           $727 = ($707|0)==(0|0);
           if ($727) {
            break;
           }
           $728 = ((($668)) + 28|0);
           $729 = HEAP32[$728>>2]|0;
           $730 = (5876 + ($729<<2)|0);
           $731 = HEAP32[$730>>2]|0;
           $732 = ($731|0)==($668|0);
           do {
            if ($732) {
             HEAP32[$730>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $733 = 1 << $729;
             $734 = $733 ^ -1;
             $735 = HEAP32[(5576)>>2]|0;
             $736 = $735 & $734;
             HEAP32[(5576)>>2] = $736;
             break L246;
            } else {
             $737 = ((($707)) + 16|0);
             $738 = HEAP32[$737>>2]|0;
             $739 = ($738|0)==($668|0);
             $740 = ((($707)) + 20|0);
             $$sink321 = $739 ? $737 : $740;
             HEAP32[$$sink321>>2] = $$3$i$i;
             $741 = ($$3$i$i|0)==(0|0);
             if ($741) {
              break L246;
             }
            }
           } while(0);
           $742 = ((($$3$i$i)) + 24|0);
           HEAP32[$742>>2] = $707;
           $743 = ((($668)) + 16|0);
           $744 = HEAP32[$743>>2]|0;
           $745 = ($744|0)==(0|0);
           if (!($745)) {
            $746 = ((($$3$i$i)) + 16|0);
            HEAP32[$746>>2] = $744;
            $747 = ((($744)) + 24|0);
            HEAP32[$747>>2] = $$3$i$i;
           }
           $748 = ((($743)) + 4|0);
           $749 = HEAP32[$748>>2]|0;
           $750 = ($749|0)==(0|0);
           if ($750) {
            break;
           }
           $751 = ((($$3$i$i)) + 20|0);
           HEAP32[$751>>2] = $749;
           $752 = ((($749)) + 24|0);
           HEAP32[$752>>2] = $$3$i$i;
          }
         } while(0);
         $753 = (($668) + ($692)|0);
         $754 = (($692) + ($673))|0;
         $$0$i$i = $753;$$0259$i$i = $754;
        } else {
         $$0$i$i = $668;$$0259$i$i = $673;
        }
        $755 = ((($$0$i$i)) + 4|0);
        $756 = HEAP32[$755>>2]|0;
        $757 = $756 & -2;
        HEAP32[$755>>2] = $757;
        $758 = $$0259$i$i | 1;
        $759 = ((($672)) + 4|0);
        HEAP32[$759>>2] = $758;
        $760 = (($672) + ($$0259$i$i)|0);
        HEAP32[$760>>2] = $$0259$i$i;
        $761 = $$0259$i$i >>> 3;
        $762 = ($$0259$i$i>>>0)<(256);
        if ($762) {
         $763 = $761 << 1;
         $764 = (5612 + ($763<<2)|0);
         $765 = HEAP32[1393]|0;
         $766 = 1 << $761;
         $767 = $765 & $766;
         $768 = ($767|0)==(0);
         if ($768) {
          $769 = $765 | $766;
          HEAP32[1393] = $769;
          $$pre$i16$i = ((($764)) + 8|0);
          $$0267$i$i = $764;$$pre$phi$i17$iZ2D = $$pre$i16$i;
         } else {
          $770 = ((($764)) + 8|0);
          $771 = HEAP32[$770>>2]|0;
          $$0267$i$i = $771;$$pre$phi$i17$iZ2D = $770;
         }
         HEAP32[$$pre$phi$i17$iZ2D>>2] = $672;
         $772 = ((($$0267$i$i)) + 12|0);
         HEAP32[$772>>2] = $672;
         $773 = ((($672)) + 8|0);
         HEAP32[$773>>2] = $$0267$i$i;
         $774 = ((($672)) + 12|0);
         HEAP32[$774>>2] = $764;
         break;
        }
        $775 = $$0259$i$i >>> 8;
        $776 = ($775|0)==(0);
        do {
         if ($776) {
          $$0268$i$i = 0;
         } else {
          $777 = ($$0259$i$i>>>0)>(16777215);
          if ($777) {
           $$0268$i$i = 31;
           break;
          }
          $778 = (($775) + 1048320)|0;
          $779 = $778 >>> 16;
          $780 = $779 & 8;
          $781 = $775 << $780;
          $782 = (($781) + 520192)|0;
          $783 = $782 >>> 16;
          $784 = $783 & 4;
          $785 = $784 | $780;
          $786 = $781 << $784;
          $787 = (($786) + 245760)|0;
          $788 = $787 >>> 16;
          $789 = $788 & 2;
          $790 = $785 | $789;
          $791 = (14 - ($790))|0;
          $792 = $786 << $789;
          $793 = $792 >>> 15;
          $794 = (($791) + ($793))|0;
          $795 = $794 << 1;
          $796 = (($794) + 7)|0;
          $797 = $$0259$i$i >>> $796;
          $798 = $797 & 1;
          $799 = $798 | $795;
          $$0268$i$i = $799;
         }
        } while(0);
        $800 = (5876 + ($$0268$i$i<<2)|0);
        $801 = ((($672)) + 28|0);
        HEAP32[$801>>2] = $$0268$i$i;
        $802 = ((($672)) + 16|0);
        $803 = ((($802)) + 4|0);
        HEAP32[$803>>2] = 0;
        HEAP32[$802>>2] = 0;
        $804 = HEAP32[(5576)>>2]|0;
        $805 = 1 << $$0268$i$i;
        $806 = $804 & $805;
        $807 = ($806|0)==(0);
        if ($807) {
         $808 = $804 | $805;
         HEAP32[(5576)>>2] = $808;
         HEAP32[$800>>2] = $672;
         $809 = ((($672)) + 24|0);
         HEAP32[$809>>2] = $800;
         $810 = ((($672)) + 12|0);
         HEAP32[$810>>2] = $672;
         $811 = ((($672)) + 8|0);
         HEAP32[$811>>2] = $672;
         break;
        }
        $812 = HEAP32[$800>>2]|0;
        $813 = ((($812)) + 4|0);
        $814 = HEAP32[$813>>2]|0;
        $815 = $814 & -8;
        $816 = ($815|0)==($$0259$i$i|0);
        L291: do {
         if ($816) {
          $$0261$lcssa$i$i = $812;
         } else {
          $817 = ($$0268$i$i|0)==(31);
          $818 = $$0268$i$i >>> 1;
          $819 = (25 - ($818))|0;
          $820 = $817 ? 0 : $819;
          $821 = $$0259$i$i << $820;
          $$02604$i$i = $821;$$02613$i$i = $812;
          while(1) {
           $828 = $$02604$i$i >>> 31;
           $829 = (((($$02613$i$i)) + 16|0) + ($828<<2)|0);
           $824 = HEAP32[$829>>2]|0;
           $830 = ($824|0)==(0|0);
           if ($830) {
            break;
           }
           $822 = $$02604$i$i << 1;
           $823 = ((($824)) + 4|0);
           $825 = HEAP32[$823>>2]|0;
           $826 = $825 & -8;
           $827 = ($826|0)==($$0259$i$i|0);
           if ($827) {
            $$0261$lcssa$i$i = $824;
            break L291;
           } else {
            $$02604$i$i = $822;$$02613$i$i = $824;
           }
          }
          HEAP32[$829>>2] = $672;
          $831 = ((($672)) + 24|0);
          HEAP32[$831>>2] = $$02613$i$i;
          $832 = ((($672)) + 12|0);
          HEAP32[$832>>2] = $672;
          $833 = ((($672)) + 8|0);
          HEAP32[$833>>2] = $672;
          break L238;
         }
        } while(0);
        $834 = ((($$0261$lcssa$i$i)) + 8|0);
        $835 = HEAP32[$834>>2]|0;
        $836 = ((($835)) + 12|0);
        HEAP32[$836>>2] = $672;
        HEAP32[$834>>2] = $672;
        $837 = ((($672)) + 8|0);
        HEAP32[$837>>2] = $835;
        $838 = ((($672)) + 12|0);
        HEAP32[$838>>2] = $$0261$lcssa$i$i;
        $839 = ((($672)) + 24|0);
        HEAP32[$839>>2] = 0;
       }
      } while(0);
      $968 = ((($660)) + 8|0);
      $$0 = $968;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $$0$i$i$i = (6020);
    while(1) {
     $840 = HEAP32[$$0$i$i$i>>2]|0;
     $841 = ($840>>>0)>($585>>>0);
     if (!($841)) {
      $842 = ((($$0$i$i$i)) + 4|0);
      $843 = HEAP32[$842>>2]|0;
      $844 = (($840) + ($843)|0);
      $845 = ($844>>>0)>($585>>>0);
      if ($845) {
       break;
      }
     }
     $846 = ((($$0$i$i$i)) + 8|0);
     $847 = HEAP32[$846>>2]|0;
     $$0$i$i$i = $847;
    }
    $848 = ((($844)) + -47|0);
    $849 = ((($848)) + 8|0);
    $850 = $849;
    $851 = $850 & 7;
    $852 = ($851|0)==(0);
    $853 = (0 - ($850))|0;
    $854 = $853 & 7;
    $855 = $852 ? 0 : $854;
    $856 = (($848) + ($855)|0);
    $857 = ((($585)) + 16|0);
    $858 = ($856>>>0)<($857>>>0);
    $859 = $858 ? $585 : $856;
    $860 = ((($859)) + 8|0);
    $861 = ((($859)) + 24|0);
    $862 = (($$723947$i) + -40)|0;
    $863 = ((($$748$i)) + 8|0);
    $864 = $863;
    $865 = $864 & 7;
    $866 = ($865|0)==(0);
    $867 = (0 - ($864))|0;
    $868 = $867 & 7;
    $869 = $866 ? 0 : $868;
    $870 = (($$748$i) + ($869)|0);
    $871 = (($862) - ($869))|0;
    HEAP32[(5596)>>2] = $870;
    HEAP32[(5584)>>2] = $871;
    $872 = $871 | 1;
    $873 = ((($870)) + 4|0);
    HEAP32[$873>>2] = $872;
    $874 = (($$748$i) + ($862)|0);
    $875 = ((($874)) + 4|0);
    HEAP32[$875>>2] = 40;
    $876 = HEAP32[(6060)>>2]|0;
    HEAP32[(5600)>>2] = $876;
    $877 = ((($859)) + 4|0);
    HEAP32[$877>>2] = 27;
    ;HEAP32[$860>>2]=HEAP32[(6020)>>2]|0;HEAP32[$860+4>>2]=HEAP32[(6020)+4>>2]|0;HEAP32[$860+8>>2]=HEAP32[(6020)+8>>2]|0;HEAP32[$860+12>>2]=HEAP32[(6020)+12>>2]|0;
    HEAP32[(6020)>>2] = $$748$i;
    HEAP32[(6024)>>2] = $$723947$i;
    HEAP32[(6032)>>2] = 0;
    HEAP32[(6028)>>2] = $860;
    $879 = $861;
    while(1) {
     $878 = ((($879)) + 4|0);
     HEAP32[$878>>2] = 7;
     $880 = ((($879)) + 8|0);
     $881 = ($880>>>0)<($844>>>0);
     if ($881) {
      $879 = $878;
     } else {
      break;
     }
    }
    $882 = ($859|0)==($585|0);
    if (!($882)) {
     $883 = $859;
     $884 = $585;
     $885 = (($883) - ($884))|0;
     $886 = HEAP32[$877>>2]|0;
     $887 = $886 & -2;
     HEAP32[$877>>2] = $887;
     $888 = $885 | 1;
     $889 = ((($585)) + 4|0);
     HEAP32[$889>>2] = $888;
     HEAP32[$859>>2] = $885;
     $890 = $885 >>> 3;
     $891 = ($885>>>0)<(256);
     if ($891) {
      $892 = $890 << 1;
      $893 = (5612 + ($892<<2)|0);
      $894 = HEAP32[1393]|0;
      $895 = 1 << $890;
      $896 = $894 & $895;
      $897 = ($896|0)==(0);
      if ($897) {
       $898 = $894 | $895;
       HEAP32[1393] = $898;
       $$pre$i$i = ((($893)) + 8|0);
       $$0206$i$i = $893;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $899 = ((($893)) + 8|0);
       $900 = HEAP32[$899>>2]|0;
       $$0206$i$i = $900;$$pre$phi$i$iZ2D = $899;
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $585;
      $901 = ((($$0206$i$i)) + 12|0);
      HEAP32[$901>>2] = $585;
      $902 = ((($585)) + 8|0);
      HEAP32[$902>>2] = $$0206$i$i;
      $903 = ((($585)) + 12|0);
      HEAP32[$903>>2] = $893;
      break;
     }
     $904 = $885 >>> 8;
     $905 = ($904|0)==(0);
     if ($905) {
      $$0207$i$i = 0;
     } else {
      $906 = ($885>>>0)>(16777215);
      if ($906) {
       $$0207$i$i = 31;
      } else {
       $907 = (($904) + 1048320)|0;
       $908 = $907 >>> 16;
       $909 = $908 & 8;
       $910 = $904 << $909;
       $911 = (($910) + 520192)|0;
       $912 = $911 >>> 16;
       $913 = $912 & 4;
       $914 = $913 | $909;
       $915 = $910 << $913;
       $916 = (($915) + 245760)|0;
       $917 = $916 >>> 16;
       $918 = $917 & 2;
       $919 = $914 | $918;
       $920 = (14 - ($919))|0;
       $921 = $915 << $918;
       $922 = $921 >>> 15;
       $923 = (($920) + ($922))|0;
       $924 = $923 << 1;
       $925 = (($923) + 7)|0;
       $926 = $885 >>> $925;
       $927 = $926 & 1;
       $928 = $927 | $924;
       $$0207$i$i = $928;
      }
     }
     $929 = (5876 + ($$0207$i$i<<2)|0);
     $930 = ((($585)) + 28|0);
     HEAP32[$930>>2] = $$0207$i$i;
     $931 = ((($585)) + 20|0);
     HEAP32[$931>>2] = 0;
     HEAP32[$857>>2] = 0;
     $932 = HEAP32[(5576)>>2]|0;
     $933 = 1 << $$0207$i$i;
     $934 = $932 & $933;
     $935 = ($934|0)==(0);
     if ($935) {
      $936 = $932 | $933;
      HEAP32[(5576)>>2] = $936;
      HEAP32[$929>>2] = $585;
      $937 = ((($585)) + 24|0);
      HEAP32[$937>>2] = $929;
      $938 = ((($585)) + 12|0);
      HEAP32[$938>>2] = $585;
      $939 = ((($585)) + 8|0);
      HEAP32[$939>>2] = $585;
      break;
     }
     $940 = HEAP32[$929>>2]|0;
     $941 = ((($940)) + 4|0);
     $942 = HEAP32[$941>>2]|0;
     $943 = $942 & -8;
     $944 = ($943|0)==($885|0);
     L325: do {
      if ($944) {
       $$0202$lcssa$i$i = $940;
      } else {
       $945 = ($$0207$i$i|0)==(31);
       $946 = $$0207$i$i >>> 1;
       $947 = (25 - ($946))|0;
       $948 = $945 ? 0 : $947;
       $949 = $885 << $948;
       $$02014$i$i = $949;$$02023$i$i = $940;
       while(1) {
        $956 = $$02014$i$i >>> 31;
        $957 = (((($$02023$i$i)) + 16|0) + ($956<<2)|0);
        $952 = HEAP32[$957>>2]|0;
        $958 = ($952|0)==(0|0);
        if ($958) {
         break;
        }
        $950 = $$02014$i$i << 1;
        $951 = ((($952)) + 4|0);
        $953 = HEAP32[$951>>2]|0;
        $954 = $953 & -8;
        $955 = ($954|0)==($885|0);
        if ($955) {
         $$0202$lcssa$i$i = $952;
         break L325;
        } else {
         $$02014$i$i = $950;$$02023$i$i = $952;
        }
       }
       HEAP32[$957>>2] = $585;
       $959 = ((($585)) + 24|0);
       HEAP32[$959>>2] = $$02023$i$i;
       $960 = ((($585)) + 12|0);
       HEAP32[$960>>2] = $585;
       $961 = ((($585)) + 8|0);
       HEAP32[$961>>2] = $585;
       break L215;
      }
     } while(0);
     $962 = ((($$0202$lcssa$i$i)) + 8|0);
     $963 = HEAP32[$962>>2]|0;
     $964 = ((($963)) + 12|0);
     HEAP32[$964>>2] = $585;
     HEAP32[$962>>2] = $585;
     $965 = ((($585)) + 8|0);
     HEAP32[$965>>2] = $963;
     $966 = ((($585)) + 12|0);
     HEAP32[$966>>2] = $$0202$lcssa$i$i;
     $967 = ((($585)) + 24|0);
     HEAP32[$967>>2] = 0;
    }
   }
  } while(0);
  $969 = HEAP32[(5584)>>2]|0;
  $970 = ($969>>>0)>($$0192>>>0);
  if ($970) {
   $971 = (($969) - ($$0192))|0;
   HEAP32[(5584)>>2] = $971;
   $972 = HEAP32[(5596)>>2]|0;
   $973 = (($972) + ($$0192)|0);
   HEAP32[(5596)>>2] = $973;
   $974 = $971 | 1;
   $975 = ((($973)) + 4|0);
   HEAP32[$975>>2] = $974;
   $976 = $$0192 | 3;
   $977 = ((($972)) + 4|0);
   HEAP32[$977>>2] = $976;
   $978 = ((($972)) + 8|0);
   $$0 = $978;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $979 = (___errno_location()|0);
 HEAP32[$979>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0194$i = 0, $$0194$in$i = 0, $$0346381 = 0, $$0347$lcssa = 0, $$0347380 = 0, $$0359 = 0, $$0366 = 0, $$1 = 0, $$1345 = 0, $$1350 = 0, $$1350$be = 0, $$1350$ph = 0, $$1353 = 0, $$1353$be = 0, $$1353$ph = 0, $$1361 = 0, $$1361$be = 0, $$1361$ph = 0, $$1365 = 0, $$1365$be = 0;
 var $$1365$ph = 0, $$2 = 0, $$3 = 0, $$3363 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink395 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond371 = 0, $cond372 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(5588)>>2]|0;
 $4 = ((($0)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & -8;
 $7 = (($2) + ($6)|0);
 $8 = $5 & 1;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $10 = HEAP32[$2>>2]|0;
   $11 = $5 & 3;
   $12 = ($11|0)==(0);
   if ($12) {
    return;
   }
   $13 = (0 - ($10))|0;
   $14 = (($2) + ($13)|0);
   $15 = (($10) + ($6))|0;
   $16 = ($14>>>0)<($3>>>0);
   if ($16) {
    return;
   }
   $17 = HEAP32[(5592)>>2]|0;
   $18 = ($17|0)==($14|0);
   if ($18) {
    $79 = ((($7)) + 4|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = $80 & 3;
    $82 = ($81|0)==(3);
    if (!($82)) {
     $$1 = $14;$$1345 = $15;$87 = $14;
     break;
    }
    $83 = (($14) + ($15)|0);
    $84 = ((($14)) + 4|0);
    $85 = $15 | 1;
    $86 = $80 & -2;
    HEAP32[(5580)>>2] = $15;
    HEAP32[$79>>2] = $86;
    HEAP32[$84>>2] = $85;
    HEAP32[$83>>2] = $15;
    return;
   }
   $19 = $10 >>> 3;
   $20 = ($10>>>0)<(256);
   if ($20) {
    $21 = ((($14)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($14)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==($22|0);
    if ($25) {
     $26 = 1 << $19;
     $27 = $26 ^ -1;
     $28 = HEAP32[1393]|0;
     $29 = $28 & $27;
     HEAP32[1393] = $29;
     $$1 = $14;$$1345 = $15;$87 = $14;
     break;
    } else {
     $30 = ((($22)) + 12|0);
     HEAP32[$30>>2] = $24;
     $31 = ((($24)) + 8|0);
     HEAP32[$31>>2] = $22;
     $$1 = $14;$$1345 = $15;$87 = $14;
     break;
    }
   }
   $32 = ((($14)) + 24|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($14)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==($14|0);
   do {
    if ($36) {
     $41 = ((($14)) + 16|0);
     $42 = ((($41)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(0|0);
     if ($44) {
      $45 = HEAP32[$41>>2]|0;
      $46 = ($45|0)==(0|0);
      if ($46) {
       $$3 = 0;
       break;
      } else {
       $$1350$ph = $45;$$1353$ph = $41;
      }
     } else {
      $$1350$ph = $43;$$1353$ph = $42;
     }
     $$1350 = $$1350$ph;$$1353 = $$1353$ph;
     while(1) {
      $47 = ((($$1350)) + 20|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if ($49) {
       $50 = ((($$1350)) + 16|0);
       $51 = HEAP32[$50>>2]|0;
       $52 = ($51|0)==(0|0);
       if ($52) {
        break;
       } else {
        $$1350$be = $51;$$1353$be = $50;
       }
      } else {
       $$1350$be = $48;$$1353$be = $47;
      }
      $$1350 = $$1350$be;$$1353 = $$1353$be;
     }
     HEAP32[$$1353>>2] = 0;
     $$3 = $$1350;
    } else {
     $37 = ((($14)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ((($38)) + 12|0);
     HEAP32[$39>>2] = $35;
     $40 = ((($35)) + 8|0);
     HEAP32[$40>>2] = $38;
     $$3 = $35;
    }
   } while(0);
   $53 = ($33|0)==(0|0);
   if ($53) {
    $$1 = $14;$$1345 = $15;$87 = $14;
   } else {
    $54 = ((($14)) + 28|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (5876 + ($55<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($57|0)==($14|0);
    if ($58) {
     HEAP32[$56>>2] = $$3;
     $cond371 = ($$3|0)==(0|0);
     if ($cond371) {
      $59 = 1 << $55;
      $60 = $59 ^ -1;
      $61 = HEAP32[(5576)>>2]|0;
      $62 = $61 & $60;
      HEAP32[(5576)>>2] = $62;
      $$1 = $14;$$1345 = $15;$87 = $14;
      break;
     }
    } else {
     $63 = ((($33)) + 16|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ($64|0)==($14|0);
     $66 = ((($33)) + 20|0);
     $$sink = $65 ? $63 : $66;
     HEAP32[$$sink>>2] = $$3;
     $67 = ($$3|0)==(0|0);
     if ($67) {
      $$1 = $14;$$1345 = $15;$87 = $14;
      break;
     }
    }
    $68 = ((($$3)) + 24|0);
    HEAP32[$68>>2] = $33;
    $69 = ((($14)) + 16|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)==(0|0);
    if (!($71)) {
     $72 = ((($$3)) + 16|0);
     HEAP32[$72>>2] = $70;
     $73 = ((($70)) + 24|0);
     HEAP32[$73>>2] = $$3;
    }
    $74 = ((($69)) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($75|0)==(0|0);
    if ($76) {
     $$1 = $14;$$1345 = $15;$87 = $14;
    } else {
     $77 = ((($$3)) + 20|0);
     HEAP32[$77>>2] = $75;
     $78 = ((($75)) + 24|0);
     HEAP32[$78>>2] = $$3;
     $$1 = $14;$$1345 = $15;$87 = $14;
    }
   }
  } else {
   $$1 = $2;$$1345 = $6;$87 = $2;
  }
 } while(0);
 $88 = ($87>>>0)<($7>>>0);
 if (!($88)) {
  return;
 }
 $89 = ((($7)) + 4|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = $90 & 1;
 $92 = ($91|0)==(0);
 if ($92) {
  return;
 }
 $93 = $90 & 2;
 $94 = ($93|0)==(0);
 if ($94) {
  $95 = HEAP32[(5596)>>2]|0;
  $96 = ($95|0)==($7|0);
  if ($96) {
   $97 = HEAP32[(5584)>>2]|0;
   $98 = (($97) + ($$1345))|0;
   HEAP32[(5584)>>2] = $98;
   HEAP32[(5596)>>2] = $$1;
   $99 = $98 | 1;
   $100 = ((($$1)) + 4|0);
   HEAP32[$100>>2] = $99;
   $101 = HEAP32[(5592)>>2]|0;
   $102 = ($$1|0)==($101|0);
   if (!($102)) {
    return;
   }
   HEAP32[(5592)>>2] = 0;
   HEAP32[(5580)>>2] = 0;
   return;
  }
  $103 = HEAP32[(5592)>>2]|0;
  $104 = ($103|0)==($7|0);
  if ($104) {
   $105 = HEAP32[(5580)>>2]|0;
   $106 = (($105) + ($$1345))|0;
   HEAP32[(5580)>>2] = $106;
   HEAP32[(5592)>>2] = $87;
   $107 = $106 | 1;
   $108 = ((($$1)) + 4|0);
   HEAP32[$108>>2] = $107;
   $109 = (($87) + ($106)|0);
   HEAP32[$109>>2] = $106;
   return;
  }
  $110 = $90 & -8;
  $111 = (($110) + ($$1345))|0;
  $112 = $90 >>> 3;
  $113 = ($90>>>0)<(256);
  do {
   if ($113) {
    $114 = ((($7)) + 8|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ((($7)) + 12|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ($117|0)==($115|0);
    if ($118) {
     $119 = 1 << $112;
     $120 = $119 ^ -1;
     $121 = HEAP32[1393]|0;
     $122 = $121 & $120;
     HEAP32[1393] = $122;
     break;
    } else {
     $123 = ((($115)) + 12|0);
     HEAP32[$123>>2] = $117;
     $124 = ((($117)) + 8|0);
     HEAP32[$124>>2] = $115;
     break;
    }
   } else {
    $125 = ((($7)) + 24|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ((($7)) + 12|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($128|0)==($7|0);
    do {
     if ($129) {
      $134 = ((($7)) + 16|0);
      $135 = ((($134)) + 4|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = ($136|0)==(0|0);
      if ($137) {
       $138 = HEAP32[$134>>2]|0;
       $139 = ($138|0)==(0|0);
       if ($139) {
        $$3363 = 0;
        break;
       } else {
        $$1361$ph = $138;$$1365$ph = $134;
       }
      } else {
       $$1361$ph = $136;$$1365$ph = $135;
      }
      $$1361 = $$1361$ph;$$1365 = $$1365$ph;
      while(1) {
       $140 = ((($$1361)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $143 = ((($$1361)) + 16|0);
        $144 = HEAP32[$143>>2]|0;
        $145 = ($144|0)==(0|0);
        if ($145) {
         break;
        } else {
         $$1361$be = $144;$$1365$be = $143;
        }
       } else {
        $$1361$be = $141;$$1365$be = $140;
       }
       $$1361 = $$1361$be;$$1365 = $$1365$be;
      }
      HEAP32[$$1365>>2] = 0;
      $$3363 = $$1361;
     } else {
      $130 = ((($7)) + 8|0);
      $131 = HEAP32[$130>>2]|0;
      $132 = ((($131)) + 12|0);
      HEAP32[$132>>2] = $128;
      $133 = ((($128)) + 8|0);
      HEAP32[$133>>2] = $131;
      $$3363 = $128;
     }
    } while(0);
    $146 = ($126|0)==(0|0);
    if (!($146)) {
     $147 = ((($7)) + 28|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = (5876 + ($148<<2)|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($7|0);
     if ($151) {
      HEAP32[$149>>2] = $$3363;
      $cond372 = ($$3363|0)==(0|0);
      if ($cond372) {
       $152 = 1 << $148;
       $153 = $152 ^ -1;
       $154 = HEAP32[(5576)>>2]|0;
       $155 = $154 & $153;
       HEAP32[(5576)>>2] = $155;
       break;
      }
     } else {
      $156 = ((($126)) + 16|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = ($157|0)==($7|0);
      $159 = ((($126)) + 20|0);
      $$sink395 = $158 ? $156 : $159;
      HEAP32[$$sink395>>2] = $$3363;
      $160 = ($$3363|0)==(0|0);
      if ($160) {
       break;
      }
     }
     $161 = ((($$3363)) + 24|0);
     HEAP32[$161>>2] = $126;
     $162 = ((($7)) + 16|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = ($163|0)==(0|0);
     if (!($164)) {
      $165 = ((($$3363)) + 16|0);
      HEAP32[$165>>2] = $163;
      $166 = ((($163)) + 24|0);
      HEAP32[$166>>2] = $$3363;
     }
     $167 = ((($162)) + 4|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = ($168|0)==(0|0);
     if (!($169)) {
      $170 = ((($$3363)) + 20|0);
      HEAP32[$170>>2] = $168;
      $171 = ((($168)) + 24|0);
      HEAP32[$171>>2] = $$3363;
     }
    }
   }
  } while(0);
  $172 = $111 | 1;
  $173 = ((($$1)) + 4|0);
  HEAP32[$173>>2] = $172;
  $174 = (($87) + ($111)|0);
  HEAP32[$174>>2] = $111;
  $175 = HEAP32[(5592)>>2]|0;
  $176 = ($$1|0)==($175|0);
  if ($176) {
   HEAP32[(5580)>>2] = $111;
   return;
  } else {
   $$2 = $111;
  }
 } else {
  $177 = $90 & -2;
  HEAP32[$89>>2] = $177;
  $178 = $$1345 | 1;
  $179 = ((($$1)) + 4|0);
  HEAP32[$179>>2] = $178;
  $180 = (($87) + ($$1345)|0);
  HEAP32[$180>>2] = $$1345;
  $$2 = $$1345;
 }
 $181 = $$2 >>> 3;
 $182 = ($$2>>>0)<(256);
 if ($182) {
  $183 = $181 << 1;
  $184 = (5612 + ($183<<2)|0);
  $185 = HEAP32[1393]|0;
  $186 = 1 << $181;
  $187 = $185 & $186;
  $188 = ($187|0)==(0);
  if ($188) {
   $189 = $185 | $186;
   HEAP32[1393] = $189;
   $$pre = ((($184)) + 8|0);
   $$0366 = $184;$$pre$phiZ2D = $$pre;
  } else {
   $190 = ((($184)) + 8|0);
   $191 = HEAP32[$190>>2]|0;
   $$0366 = $191;$$pre$phiZ2D = $190;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $192 = ((($$0366)) + 12|0);
  HEAP32[$192>>2] = $$1;
  $193 = ((($$1)) + 8|0);
  HEAP32[$193>>2] = $$0366;
  $194 = ((($$1)) + 12|0);
  HEAP32[$194>>2] = $184;
  return;
 }
 $195 = $$2 >>> 8;
 $196 = ($195|0)==(0);
 if ($196) {
  $$0359 = 0;
 } else {
  $197 = ($$2>>>0)>(16777215);
  if ($197) {
   $$0359 = 31;
  } else {
   $198 = (($195) + 1048320)|0;
   $199 = $198 >>> 16;
   $200 = $199 & 8;
   $201 = $195 << $200;
   $202 = (($201) + 520192)|0;
   $203 = $202 >>> 16;
   $204 = $203 & 4;
   $205 = $204 | $200;
   $206 = $201 << $204;
   $207 = (($206) + 245760)|0;
   $208 = $207 >>> 16;
   $209 = $208 & 2;
   $210 = $205 | $209;
   $211 = (14 - ($210))|0;
   $212 = $206 << $209;
   $213 = $212 >>> 15;
   $214 = (($211) + ($213))|0;
   $215 = $214 << 1;
   $216 = (($214) + 7)|0;
   $217 = $$2 >>> $216;
   $218 = $217 & 1;
   $219 = $218 | $215;
   $$0359 = $219;
  }
 }
 $220 = (5876 + ($$0359<<2)|0);
 $221 = ((($$1)) + 28|0);
 HEAP32[$221>>2] = $$0359;
 $222 = ((($$1)) + 16|0);
 $223 = ((($$1)) + 20|0);
 HEAP32[$223>>2] = 0;
 HEAP32[$222>>2] = 0;
 $224 = HEAP32[(5576)>>2]|0;
 $225 = 1 << $$0359;
 $226 = $224 & $225;
 $227 = ($226|0)==(0);
 L112: do {
  if ($227) {
   $228 = $224 | $225;
   HEAP32[(5576)>>2] = $228;
   HEAP32[$220>>2] = $$1;
   $229 = ((($$1)) + 24|0);
   HEAP32[$229>>2] = $220;
   $230 = ((($$1)) + 12|0);
   HEAP32[$230>>2] = $$1;
   $231 = ((($$1)) + 8|0);
   HEAP32[$231>>2] = $$1;
  } else {
   $232 = HEAP32[$220>>2]|0;
   $233 = ((($232)) + 4|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = $234 & -8;
   $236 = ($235|0)==($$2|0);
   L115: do {
    if ($236) {
     $$0347$lcssa = $232;
    } else {
     $237 = ($$0359|0)==(31);
     $238 = $$0359 >>> 1;
     $239 = (25 - ($238))|0;
     $240 = $237 ? 0 : $239;
     $241 = $$2 << $240;
     $$0346381 = $241;$$0347380 = $232;
     while(1) {
      $248 = $$0346381 >>> 31;
      $249 = (((($$0347380)) + 16|0) + ($248<<2)|0);
      $244 = HEAP32[$249>>2]|0;
      $250 = ($244|0)==(0|0);
      if ($250) {
       break;
      }
      $242 = $$0346381 << 1;
      $243 = ((($244)) + 4|0);
      $245 = HEAP32[$243>>2]|0;
      $246 = $245 & -8;
      $247 = ($246|0)==($$2|0);
      if ($247) {
       $$0347$lcssa = $244;
       break L115;
      } else {
       $$0346381 = $242;$$0347380 = $244;
      }
     }
     HEAP32[$249>>2] = $$1;
     $251 = ((($$1)) + 24|0);
     HEAP32[$251>>2] = $$0347380;
     $252 = ((($$1)) + 12|0);
     HEAP32[$252>>2] = $$1;
     $253 = ((($$1)) + 8|0);
     HEAP32[$253>>2] = $$1;
     break L112;
    }
   } while(0);
   $254 = ((($$0347$lcssa)) + 8|0);
   $255 = HEAP32[$254>>2]|0;
   $256 = ((($255)) + 12|0);
   HEAP32[$256>>2] = $$1;
   HEAP32[$254>>2] = $$1;
   $257 = ((($$1)) + 8|0);
   HEAP32[$257>>2] = $255;
   $258 = ((($$1)) + 12|0);
   HEAP32[$258>>2] = $$0347$lcssa;
   $259 = ((($$1)) + 24|0);
   HEAP32[$259>>2] = 0;
  }
 } while(0);
 $260 = HEAP32[(5604)>>2]|0;
 $261 = (($260) + -1)|0;
 HEAP32[(5604)>>2] = $261;
 $262 = ($261|0)==(0);
 if (!($262)) {
  return;
 }
 $$0194$in$i = (6028);
 while(1) {
  $$0194$i = HEAP32[$$0194$in$i>>2]|0;
  $263 = ($$0194$i|0)==(0|0);
  $264 = ((($$0194$i)) + 8|0);
  if ($263) {
   break;
  } else {
   $$0194$in$i = $264;
  }
 }
 HEAP32[(5604)>>2] = -1;
 return;
}
function _calloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = Math_imul($1, $0)|0;
  $4 = $1 | $0;
  $5 = ($4>>>0)>(65535);
  if ($5) {
   $6 = (($3>>>0) / ($0>>>0))&-1;
   $7 = ($6|0)==($1|0);
   $spec$select = $7 ? $3 : -1;
   $$0 = $spec$select;
  } else {
   $$0 = $3;
  }
 }
 $8 = (_malloc($$0)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  return ($8|0);
 }
 $10 = ((($8)) + -4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 3;
 $13 = ($12|0)==(0);
 if ($13) {
  return ($8|0);
 }
 (_memset(($8|0),0,($$0|0))|0);
 return ($8|0);
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 (_memcpy(($14|0),($0|0),($24|0))|0);
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1245 = 0, $$1245$be = 0, $$1245$ph = 0, $$1248 = 0, $$1248$be = 0, $$1248$ph = 0, $$2 = 0, $$3 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $storemerge = 0, $storemerge1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = $3 & 3;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ($1>>>0)<(256);
  if ($8) {
   $$2 = 0;
   return ($$2|0);
  }
  $9 = (($1) + 4)|0;
  $10 = ($4>>>0)<($9>>>0);
  if (!($10)) {
   $11 = (($4) - ($1))|0;
   $12 = HEAP32[(6052)>>2]|0;
   $13 = $12 << 1;
   $14 = ($11>>>0)>($13>>>0);
   if (!($14)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $15 = ($4>>>0)<($1>>>0);
 if (!($15)) {
  $16 = (($4) - ($1))|0;
  $17 = ($16>>>0)>(15);
  if (!($17)) {
   $$2 = $0;
   return ($$2|0);
  }
  $18 = (($0) + ($1)|0);
  $19 = $3 & 1;
  $20 = $19 | $1;
  $21 = $20 | 2;
  HEAP32[$2>>2] = $21;
  $22 = ((($18)) + 4|0);
  $23 = $16 | 3;
  HEAP32[$22>>2] = $23;
  $24 = ((($5)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $25 | 1;
  HEAP32[$24>>2] = $26;
  _dispose_chunk($18,$16);
  $$2 = $0;
  return ($$2|0);
 }
 $27 = HEAP32[(5596)>>2]|0;
 $28 = ($27|0)==($5|0);
 if ($28) {
  $29 = HEAP32[(5584)>>2]|0;
  $30 = (($29) + ($4))|0;
  $31 = ($30>>>0)>($1>>>0);
  $32 = (($30) - ($1))|0;
  $33 = (($0) + ($1)|0);
  if (!($31)) {
   $$2 = 0;
   return ($$2|0);
  }
  $34 = $32 | 1;
  $35 = ((($33)) + 4|0);
  $36 = $3 & 1;
  $37 = $36 | $1;
  $38 = $37 | 2;
  HEAP32[$2>>2] = $38;
  HEAP32[$35>>2] = $34;
  HEAP32[(5596)>>2] = $33;
  HEAP32[(5584)>>2] = $32;
  $$2 = $0;
  return ($$2|0);
 }
 $39 = HEAP32[(5592)>>2]|0;
 $40 = ($39|0)==($5|0);
 if ($40) {
  $41 = HEAP32[(5580)>>2]|0;
  $42 = (($41) + ($4))|0;
  $43 = ($42>>>0)<($1>>>0);
  if ($43) {
   $$2 = 0;
   return ($$2|0);
  }
  $44 = (($42) - ($1))|0;
  $45 = ($44>>>0)>(15);
  if ($45) {
   $46 = (($0) + ($1)|0);
   $47 = (($0) + ($42)|0);
   $48 = $3 & 1;
   $49 = $48 | $1;
   $50 = $49 | 2;
   HEAP32[$2>>2] = $50;
   $51 = ((($46)) + 4|0);
   $52 = $44 | 1;
   HEAP32[$51>>2] = $52;
   HEAP32[$47>>2] = $44;
   $53 = ((($47)) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $54 & -2;
   HEAP32[$53>>2] = $55;
   $storemerge = $46;$storemerge1 = $44;
  } else {
   $56 = $3 & 1;
   $57 = $56 | $42;
   $58 = $57 | 2;
   HEAP32[$2>>2] = $58;
   $59 = (($0) + ($42)|0);
   $60 = ((($59)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 | 1;
   HEAP32[$60>>2] = $62;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(5580)>>2] = $storemerge1;
  HEAP32[(5592)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $63 = ((($5)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $$2 = 0;
  return ($$2|0);
 }
 $67 = $64 & -8;
 $68 = (($67) + ($4))|0;
 $69 = ($68>>>0)<($1>>>0);
 if ($69) {
  $$2 = 0;
  return ($$2|0);
 }
 $70 = (($68) - ($1))|0;
 $71 = $64 >>> 3;
 $72 = ($64>>>0)<(256);
 do {
  if ($72) {
   $73 = ((($5)) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ((($5)) + 12|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($76|0)==($74|0);
   if ($77) {
    $78 = 1 << $71;
    $79 = $78 ^ -1;
    $80 = HEAP32[1393]|0;
    $81 = $80 & $79;
    HEAP32[1393] = $81;
    break;
   } else {
    $82 = ((($74)) + 12|0);
    HEAP32[$82>>2] = $76;
    $83 = ((($76)) + 8|0);
    HEAP32[$83>>2] = $74;
    break;
   }
  } else {
   $84 = ((($5)) + 24|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ((($5)) + 12|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87|0)==($5|0);
   do {
    if ($88) {
     $93 = ((($5)) + 16|0);
     $94 = ((($93)) + 4|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = ($95|0)==(0|0);
     if ($96) {
      $97 = HEAP32[$93>>2]|0;
      $98 = ($97|0)==(0|0);
      if ($98) {
       $$3 = 0;
       break;
      } else {
       $$1245$ph = $97;$$1248$ph = $93;
      }
     } else {
      $$1245$ph = $95;$$1248$ph = $94;
     }
     $$1245 = $$1245$ph;$$1248 = $$1248$ph;
     while(1) {
      $99 = ((($$1245)) + 20|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = ($100|0)==(0|0);
      if ($101) {
       $102 = ((($$1245)) + 16|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = ($103|0)==(0|0);
       if ($104) {
        break;
       } else {
        $$1245$be = $103;$$1248$be = $102;
       }
      } else {
       $$1245$be = $100;$$1248$be = $99;
      }
      $$1245 = $$1245$be;$$1248 = $$1248$be;
     }
     HEAP32[$$1248>>2] = 0;
     $$3 = $$1245;
    } else {
     $89 = ((($5)) + 8|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = ((($90)) + 12|0);
     HEAP32[$91>>2] = $87;
     $92 = ((($87)) + 8|0);
     HEAP32[$92>>2] = $90;
     $$3 = $87;
    }
   } while(0);
   $105 = ($85|0)==(0|0);
   if (!($105)) {
    $106 = ((($5)) + 28|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (5876 + ($107<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ($109|0)==($5|0);
    if ($110) {
     HEAP32[$108>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $111 = 1 << $107;
      $112 = $111 ^ -1;
      $113 = HEAP32[(5576)>>2]|0;
      $114 = $113 & $112;
      HEAP32[(5576)>>2] = $114;
      break;
     }
    } else {
     $115 = ((($85)) + 16|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)==($5|0);
     $118 = ((($85)) + 20|0);
     $$sink = $117 ? $115 : $118;
     HEAP32[$$sink>>2] = $$3;
     $119 = ($$3|0)==(0|0);
     if ($119) {
      break;
     }
    }
    $120 = ((($$3)) + 24|0);
    HEAP32[$120>>2] = $85;
    $121 = ((($5)) + 16|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = ($122|0)==(0|0);
    if (!($123)) {
     $124 = ((($$3)) + 16|0);
     HEAP32[$124>>2] = $122;
     $125 = ((($122)) + 24|0);
     HEAP32[$125>>2] = $$3;
    }
    $126 = ((($121)) + 4|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = ($127|0)==(0|0);
    if (!($128)) {
     $129 = ((($$3)) + 20|0);
     HEAP32[$129>>2] = $127;
     $130 = ((($127)) + 24|0);
     HEAP32[$130>>2] = $$3;
    }
   }
  }
 } while(0);
 $131 = ($70>>>0)<(16);
 if ($131) {
  $132 = $3 & 1;
  $133 = $132 | $68;
  $134 = $133 | 2;
  HEAP32[$2>>2] = $134;
  $135 = (($0) + ($68)|0);
  $136 = ((($135)) + 4|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = $137 | 1;
  HEAP32[$136>>2] = $138;
  $$2 = $0;
  return ($$2|0);
 } else {
  $139 = (($0) + ($1)|0);
  $140 = $3 & 1;
  $141 = $140 | $1;
  $142 = $141 | 2;
  HEAP32[$2>>2] = $142;
  $143 = ((($139)) + 4|0);
  $144 = $70 | 3;
  HEAP32[$143>>2] = $144;
  $145 = (($0) + ($68)|0);
  $146 = ((($145)) + 4|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = $147 | 1;
  HEAP32[$146>>2] = $148;
  _dispose_chunk($139,$70);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$03649 = 0, $$0365$lcssa = 0, $$03658 = 0, $$0376 = 0, $$0383 = 0, $$1 = 0, $$1363 = 0, $$1371 = 0, $$1371$be = 0, $$1371$ph = 0, $$1374 = 0, $$1374$be = 0, $$1374$ph = 0, $$1378 = 0, $$1378$be = 0, $$1378$ph = 0, $$1382 = 0, $$1382$be = 0, $$1382$ph = 0, $$2 = 0;
 var $$3 = 0, $$3380 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink24 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(5592)>>2]|0;
   $14 = ($13|0)==($11|0);
   if ($14) {
    $75 = ((($2)) + 4|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $76 & 3;
    $78 = ($77|0)==(3);
    if (!($78)) {
     $$1 = $11;$$1363 = $12;
     break;
    }
    $79 = ((($11)) + 4|0);
    $80 = $12 | 1;
    $81 = $76 & -2;
    HEAP32[(5580)>>2] = $12;
    HEAP32[$75>>2] = $81;
    HEAP32[$79>>2] = $80;
    HEAP32[$2>>2] = $12;
    return;
   }
   $15 = $7 >>> 3;
   $16 = ($7>>>0)<(256);
   if ($16) {
    $17 = ((($11)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($11)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($18|0);
    if ($21) {
     $22 = 1 << $15;
     $23 = $22 ^ -1;
     $24 = HEAP32[1393]|0;
     $25 = $24 & $23;
     HEAP32[1393] = $25;
     $$1 = $11;$$1363 = $12;
     break;
    } else {
     $26 = ((($18)) + 12|0);
     HEAP32[$26>>2] = $20;
     $27 = ((($20)) + 8|0);
     HEAP32[$27>>2] = $18;
     $$1 = $11;$$1363 = $12;
     break;
    }
   }
   $28 = ((($11)) + 24|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($11)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==($11|0);
   do {
    if ($32) {
     $37 = ((($11)) + 16|0);
     $38 = ((($37)) + 4|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)==(0|0);
     if ($40) {
      $41 = HEAP32[$37>>2]|0;
      $42 = ($41|0)==(0|0);
      if ($42) {
       $$3 = 0;
       break;
      } else {
       $$1371$ph = $41;$$1374$ph = $37;
      }
     } else {
      $$1371$ph = $39;$$1374$ph = $38;
     }
     $$1371 = $$1371$ph;$$1374 = $$1374$ph;
     while(1) {
      $43 = ((($$1371)) + 20|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($44|0)==(0|0);
      if ($45) {
       $46 = ((($$1371)) + 16|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = ($47|0)==(0|0);
       if ($48) {
        break;
       } else {
        $$1371$be = $47;$$1374$be = $46;
       }
      } else {
       $$1371$be = $44;$$1374$be = $43;
      }
      $$1371 = $$1371$be;$$1374 = $$1374$be;
     }
     HEAP32[$$1374>>2] = 0;
     $$3 = $$1371;
    } else {
     $33 = ((($11)) + 8|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ((($34)) + 12|0);
     HEAP32[$35>>2] = $31;
     $36 = ((($31)) + 8|0);
     HEAP32[$36>>2] = $34;
     $$3 = $31;
    }
   } while(0);
   $49 = ($29|0)==(0|0);
   if ($49) {
    $$1 = $11;$$1363 = $12;
   } else {
    $50 = ((($11)) + 28|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (5876 + ($51<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)==($11|0);
    if ($54) {
     HEAP32[$52>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $55 = 1 << $51;
      $56 = $55 ^ -1;
      $57 = HEAP32[(5576)>>2]|0;
      $58 = $57 & $56;
      HEAP32[(5576)>>2] = $58;
      $$1 = $11;$$1363 = $12;
      break;
     }
    } else {
     $59 = ((($29)) + 16|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)==($11|0);
     $62 = ((($29)) + 20|0);
     $$sink = $61 ? $59 : $62;
     HEAP32[$$sink>>2] = $$3;
     $63 = ($$3|0)==(0|0);
     if ($63) {
      $$1 = $11;$$1363 = $12;
      break;
     }
    }
    $64 = ((($$3)) + 24|0);
    HEAP32[$64>>2] = $29;
    $65 = ((($11)) + 16|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ($66|0)==(0|0);
    if (!($67)) {
     $68 = ((($$3)) + 16|0);
     HEAP32[$68>>2] = $66;
     $69 = ((($66)) + 24|0);
     HEAP32[$69>>2] = $$3;
    }
    $70 = ((($65)) + 4|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ($71|0)==(0|0);
    if ($72) {
     $$1 = $11;$$1363 = $12;
    } else {
     $73 = ((($$3)) + 20|0);
     HEAP32[$73>>2] = $71;
     $74 = ((($71)) + 24|0);
     HEAP32[$74>>2] = $$3;
     $$1 = $11;$$1363 = $12;
    }
   }
  } else {
   $$1 = $0;$$1363 = $1;
  }
 } while(0);
 $82 = ((($2)) + 4|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $83 & 2;
 $85 = ($84|0)==(0);
 if ($85) {
  $86 = HEAP32[(5596)>>2]|0;
  $87 = ($86|0)==($2|0);
  if ($87) {
   $88 = HEAP32[(5584)>>2]|0;
   $89 = (($88) + ($$1363))|0;
   HEAP32[(5584)>>2] = $89;
   HEAP32[(5596)>>2] = $$1;
   $90 = $89 | 1;
   $91 = ((($$1)) + 4|0);
   HEAP32[$91>>2] = $90;
   $92 = HEAP32[(5592)>>2]|0;
   $93 = ($$1|0)==($92|0);
   if (!($93)) {
    return;
   }
   HEAP32[(5592)>>2] = 0;
   HEAP32[(5580)>>2] = 0;
   return;
  }
  $94 = HEAP32[(5592)>>2]|0;
  $95 = ($94|0)==($2|0);
  if ($95) {
   $96 = HEAP32[(5580)>>2]|0;
   $97 = (($96) + ($$1363))|0;
   HEAP32[(5580)>>2] = $97;
   HEAP32[(5592)>>2] = $$1;
   $98 = $97 | 1;
   $99 = ((($$1)) + 4|0);
   HEAP32[$99>>2] = $98;
   $100 = (($$1) + ($97)|0);
   HEAP32[$100>>2] = $97;
   return;
  }
  $101 = $83 & -8;
  $102 = (($101) + ($$1363))|0;
  $103 = $83 >>> 3;
  $104 = ($83>>>0)<(256);
  do {
   if ($104) {
    $105 = ((($2)) + 8|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = ((($2)) + 12|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = ($108|0)==($106|0);
    if ($109) {
     $110 = 1 << $103;
     $111 = $110 ^ -1;
     $112 = HEAP32[1393]|0;
     $113 = $112 & $111;
     HEAP32[1393] = $113;
     break;
    } else {
     $114 = ((($106)) + 12|0);
     HEAP32[$114>>2] = $108;
     $115 = ((($108)) + 8|0);
     HEAP32[$115>>2] = $106;
     break;
    }
   } else {
    $116 = ((($2)) + 24|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ((($2)) + 12|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = ($119|0)==($2|0);
    do {
     if ($120) {
      $125 = ((($2)) + 16|0);
      $126 = ((($125)) + 4|0);
      $127 = HEAP32[$126>>2]|0;
      $128 = ($127|0)==(0|0);
      if ($128) {
       $129 = HEAP32[$125>>2]|0;
       $130 = ($129|0)==(0|0);
       if ($130) {
        $$3380 = 0;
        break;
       } else {
        $$1378$ph = $129;$$1382$ph = $125;
       }
      } else {
       $$1378$ph = $127;$$1382$ph = $126;
      }
      $$1378 = $$1378$ph;$$1382 = $$1382$ph;
      while(1) {
       $131 = ((($$1378)) + 20|0);
       $132 = HEAP32[$131>>2]|0;
       $133 = ($132|0)==(0|0);
       if ($133) {
        $134 = ((($$1378)) + 16|0);
        $135 = HEAP32[$134>>2]|0;
        $136 = ($135|0)==(0|0);
        if ($136) {
         break;
        } else {
         $$1378$be = $135;$$1382$be = $134;
        }
       } else {
        $$1378$be = $132;$$1382$be = $131;
       }
       $$1378 = $$1378$be;$$1382 = $$1382$be;
      }
      HEAP32[$$1382>>2] = 0;
      $$3380 = $$1378;
     } else {
      $121 = ((($2)) + 8|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = ((($122)) + 12|0);
      HEAP32[$123>>2] = $119;
      $124 = ((($119)) + 8|0);
      HEAP32[$124>>2] = $122;
      $$3380 = $119;
     }
    } while(0);
    $137 = ($117|0)==(0|0);
    if (!($137)) {
     $138 = ((($2)) + 28|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = (5876 + ($139<<2)|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($141|0)==($2|0);
     if ($142) {
      HEAP32[$140>>2] = $$3380;
      $cond4 = ($$3380|0)==(0|0);
      if ($cond4) {
       $143 = 1 << $139;
       $144 = $143 ^ -1;
       $145 = HEAP32[(5576)>>2]|0;
       $146 = $145 & $144;
       HEAP32[(5576)>>2] = $146;
       break;
      }
     } else {
      $147 = ((($117)) + 16|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($148|0)==($2|0);
      $150 = ((($117)) + 20|0);
      $$sink24 = $149 ? $147 : $150;
      HEAP32[$$sink24>>2] = $$3380;
      $151 = ($$3380|0)==(0|0);
      if ($151) {
       break;
      }
     }
     $152 = ((($$3380)) + 24|0);
     HEAP32[$152>>2] = $117;
     $153 = ((($2)) + 16|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ($154|0)==(0|0);
     if (!($155)) {
      $156 = ((($$3380)) + 16|0);
      HEAP32[$156>>2] = $154;
      $157 = ((($154)) + 24|0);
      HEAP32[$157>>2] = $$3380;
     }
     $158 = ((($153)) + 4|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==(0|0);
     if (!($160)) {
      $161 = ((($$3380)) + 20|0);
      HEAP32[$161>>2] = $159;
      $162 = ((($159)) + 24|0);
      HEAP32[$162>>2] = $$3380;
     }
    }
   }
  } while(0);
  $163 = $102 | 1;
  $164 = ((($$1)) + 4|0);
  HEAP32[$164>>2] = $163;
  $165 = (($$1) + ($102)|0);
  HEAP32[$165>>2] = $102;
  $166 = HEAP32[(5592)>>2]|0;
  $167 = ($$1|0)==($166|0);
  if ($167) {
   HEAP32[(5580)>>2] = $102;
   return;
  } else {
   $$2 = $102;
  }
 } else {
  $168 = $83 & -2;
  HEAP32[$82>>2] = $168;
  $169 = $$1363 | 1;
  $170 = ((($$1)) + 4|0);
  HEAP32[$170>>2] = $169;
  $171 = (($$1) + ($$1363)|0);
  HEAP32[$171>>2] = $$1363;
  $$2 = $$1363;
 }
 $172 = $$2 >>> 3;
 $173 = ($$2>>>0)<(256);
 if ($173) {
  $174 = $172 << 1;
  $175 = (5612 + ($174<<2)|0);
  $176 = HEAP32[1393]|0;
  $177 = 1 << $172;
  $178 = $176 & $177;
  $179 = ($178|0)==(0);
  if ($179) {
   $180 = $176 | $177;
   HEAP32[1393] = $180;
   $$pre = ((($175)) + 8|0);
   $$0383 = $175;$$pre$phiZ2D = $$pre;
  } else {
   $181 = ((($175)) + 8|0);
   $182 = HEAP32[$181>>2]|0;
   $$0383 = $182;$$pre$phiZ2D = $181;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $183 = ((($$0383)) + 12|0);
  HEAP32[$183>>2] = $$1;
  $184 = ((($$1)) + 8|0);
  HEAP32[$184>>2] = $$0383;
  $185 = ((($$1)) + 12|0);
  HEAP32[$185>>2] = $175;
  return;
 }
 $186 = $$2 >>> 8;
 $187 = ($186|0)==(0);
 if ($187) {
  $$0376 = 0;
 } else {
  $188 = ($$2>>>0)>(16777215);
  if ($188) {
   $$0376 = 31;
  } else {
   $189 = (($186) + 1048320)|0;
   $190 = $189 >>> 16;
   $191 = $190 & 8;
   $192 = $186 << $191;
   $193 = (($192) + 520192)|0;
   $194 = $193 >>> 16;
   $195 = $194 & 4;
   $196 = $195 | $191;
   $197 = $192 << $195;
   $198 = (($197) + 245760)|0;
   $199 = $198 >>> 16;
   $200 = $199 & 2;
   $201 = $196 | $200;
   $202 = (14 - ($201))|0;
   $203 = $197 << $200;
   $204 = $203 >>> 15;
   $205 = (($202) + ($204))|0;
   $206 = $205 << 1;
   $207 = (($205) + 7)|0;
   $208 = $$2 >>> $207;
   $209 = $208 & 1;
   $210 = $209 | $206;
   $$0376 = $210;
  }
 }
 $211 = (5876 + ($$0376<<2)|0);
 $212 = ((($$1)) + 28|0);
 HEAP32[$212>>2] = $$0376;
 $213 = ((($$1)) + 16|0);
 $214 = ((($$1)) + 20|0);
 HEAP32[$214>>2] = 0;
 HEAP32[$213>>2] = 0;
 $215 = HEAP32[(5576)>>2]|0;
 $216 = 1 << $$0376;
 $217 = $215 & $216;
 $218 = ($217|0)==(0);
 if ($218) {
  $219 = $215 | $216;
  HEAP32[(5576)>>2] = $219;
  HEAP32[$211>>2] = $$1;
  $220 = ((($$1)) + 24|0);
  HEAP32[$220>>2] = $211;
  $221 = ((($$1)) + 12|0);
  HEAP32[$221>>2] = $$1;
  $222 = ((($$1)) + 8|0);
  HEAP32[$222>>2] = $$1;
  return;
 }
 $223 = HEAP32[$211>>2]|0;
 $224 = ((($223)) + 4|0);
 $225 = HEAP32[$224>>2]|0;
 $226 = $225 & -8;
 $227 = ($226|0)==($$2|0);
 L104: do {
  if ($227) {
   $$0365$lcssa = $223;
  } else {
   $228 = ($$0376|0)==(31);
   $229 = $$0376 >>> 1;
   $230 = (25 - ($229))|0;
   $231 = $228 ? 0 : $230;
   $232 = $$2 << $231;
   $$03649 = $232;$$03658 = $223;
   while(1) {
    $239 = $$03649 >>> 31;
    $240 = (((($$03658)) + 16|0) + ($239<<2)|0);
    $235 = HEAP32[$240>>2]|0;
    $241 = ($235|0)==(0|0);
    if ($241) {
     break;
    }
    $233 = $$03649 << 1;
    $234 = ((($235)) + 4|0);
    $236 = HEAP32[$234>>2]|0;
    $237 = $236 & -8;
    $238 = ($237|0)==($$2|0);
    if ($238) {
     $$0365$lcssa = $235;
     break L104;
    } else {
     $$03649 = $233;$$03658 = $235;
    }
   }
   HEAP32[$240>>2] = $$1;
   $242 = ((($$1)) + 24|0);
   HEAP32[$242>>2] = $$03658;
   $243 = ((($$1)) + 12|0);
   HEAP32[$243>>2] = $$1;
   $244 = ((($$1)) + 8|0);
   HEAP32[$244>>2] = $$1;
   return;
  }
 } while(0);
 $245 = ((($$0365$lcssa)) + 8|0);
 $246 = HEAP32[$245>>2]|0;
 $247 = ((($246)) + 12|0);
 HEAP32[$247>>2] = $$1;
 HEAP32[$245>>2] = $$1;
 $248 = ((($$1)) + 8|0);
 HEAP32[$248>>2] = $246;
 $249 = ((($$1)) + 12|0);
 HEAP32[$249>>2] = $$0365$lcssa;
 $250 = ((($$1)) + 24|0);
 HEAP32[$250>>2] = 0;
 return;
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy_723($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer3 = sp + 32|0;
 $vararg_buffer = sp + 16|0;
 $3 = sp;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$26 = $17;
   while(1) {
    $27 = ($26|0)<(0);
    if ($27) {
     break;
    }
    $35 = (($$04855) - ($26))|0;
    $36 = ((($$04954)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($26>>>0)>($37>>>0);
    $39 = ((($$04954)) + 8|0);
    $$150 = $38 ? $39 : $$04954;
    $40 = $38 << 31 >> 31;
    $$1 = (($$04756) + ($40))|0;
    $41 = $38 ? $37 : 0;
    $$0 = (($26) - ($41))|0;
    $42 = HEAP32[$$150>>2]|0;
    $43 = (($42) + ($$0)|0);
    HEAP32[$$150>>2] = $43;
    $44 = ((($$150)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) - ($$0))|0;
    HEAP32[$44>>2] = $46;
    $47 = HEAP32[$13>>2]|0;
    $48 = $$150;
    HEAP32[$vararg_buffer3>>2] = $47;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $48;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $49 = (___syscall146(146,($vararg_buffer3|0))|0);
    $50 = (___syscall_ret($49)|0);
    $51 = ($35|0)==($50|0);
    if ($51) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $35;$$04954 = $$150;$26 = $50;
    }
   }
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $29 = HEAP32[$0>>2]|0;
   $30 = $29 | 32;
   HEAP32[$0>>2] = $30;
   $31 = ($$04756|0)==(2);
   if ($31) {
    $$051 = 0;
   } else {
    $32 = ((($$04954)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($2) - ($33))|0;
    $$051 = $34;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  $25 = $20;
  HEAP32[$4>>2] = $25;
  HEAP32[$7>>2] = $25;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $7 = (___syscall140(140,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  HEAP32[$3>>2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $10 = $$pre;
 }
 STACKTOP = sp;return ($10|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6132|0);
}
function _dummy_723($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp + 16|0;
 $3 = sp;
 HEAP32[$3>>2] = $1;
 $4 = ((($3)) + 4|0);
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7&1;
 $9 = (($2) - ($8))|0;
 HEAP32[$4>>2] = $9;
 $10 = ((($3)) + 8|0);
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = ((($3)) + 12|0);
 HEAP32[$13>>2] = $6;
 $14 = ((($0)) + 60|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 HEAP32[$vararg_buffer>>2] = $15;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $16;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $17 = (___syscall145(145,($vararg_buffer|0))|0);
 $18 = (___syscall_ret($17)|0);
 $19 = ($18|0)<(1);
 if ($19) {
  $20 = $18 & 48;
  $21 = $20 ^ 16;
  $22 = HEAP32[$0>>2]|0;
  $23 = $22 | $21;
  HEAP32[$0>>2] = $23;
  $$0 = $18;
 } else {
  $24 = HEAP32[$4>>2]|0;
  $25 = ($18>>>0)>($24>>>0);
  if ($25) {
   $26 = (($18) - ($24))|0;
   $27 = HEAP32[$11>>2]|0;
   $28 = ((($0)) + 4|0);
   HEAP32[$28>>2] = $27;
   $$cast = $27;
   $29 = (($$cast) + ($26)|0);
   $30 = ((($0)) + 8|0);
   HEAP32[$30>>2] = $29;
   $31 = HEAP32[$5>>2]|0;
   $32 = ($31|0)==(0);
   if ($32) {
    $$0 = $2;
   } else {
    $33 = ((($$cast)) + 1|0);
    HEAP32[$28>>2] = $33;
    $34 = HEAP8[$$cast>>0]|0;
    $35 = (($2) + -1)|0;
    $36 = (($1) + ($35)|0);
    HEAP8[$36>>0] = $34;
    $$0 = $2;
   }
  } else {
   $$0 = $18;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 12;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function ___shlim($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 104|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ((($0)) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($1|0)!=(0);
 $10 = ($7|0)>($1|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = $6;
  $12 = (($11) + ($1)|0);
  $13 = ((($0)) + 100|0);
  HEAP32[$13>>2] = $12;
 } else {
  $14 = ((($0)) + 100|0);
  HEAP32[$14>>2] = $4;
 }
 return;
}
function ___shgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert28 = 0, $$pre = 0, $$pre29 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 104|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  label = 3;
 } else {
  $4 = ((($0)) + 108|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)<($2|0);
  if ($6) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $7 = (___uflow($0)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   label = 4;
  } else {
   $10 = HEAP32[$1>>2]|0;
   $11 = ($10|0)==(0);
   $$phi$trans$insert = ((($0)) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($11) {
    $12 = $$pre;
    $42 = $12;
    label = 9;
   } else {
    $13 = ((($0)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $14;
    $16 = (($$pre) - ($15))|0;
    $17 = ((($0)) + 108|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($10) - ($18))|0;
    $20 = ($16|0)<($19|0);
    $21 = $$pre;
    if ($20) {
     $42 = $21;
     label = 9;
    } else {
     $22 = (($19) + -1)|0;
     $23 = (($14) + ($22)|0);
     $24 = ((($0)) + 100|0);
     HEAP32[$24>>2] = $23;
     $26 = $21;
    }
   }
   if ((label|0) == 9) {
    $25 = ((($0)) + 100|0);
    HEAP32[$25>>2] = $$pre;
    $26 = $42;
   }
   $27 = ($26|0)==(0|0);
   $$phi$trans$insert28 = ((($0)) + 4|0);
   if ($27) {
    $$pre29 = HEAP32[$$phi$trans$insert28>>2]|0;
    $37 = $$pre29;
   } else {
    $28 = HEAP32[$$phi$trans$insert28>>2]|0;
    $29 = $26;
    $30 = ((($0)) + 108|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($29) + 1)|0;
    $33 = (($32) - ($28))|0;
    $34 = (($33) + ($31))|0;
    HEAP32[$30>>2] = $34;
    $35 = $28;
    $37 = $35;
   }
   $36 = ((($37)) + -1|0);
   $38 = HEAP8[$36>>0]|0;
   $39 = $38&255;
   $40 = ($7|0)==($39|0);
   if ($40) {
    $$0 = $7;
   } else {
    $41 = $7&255;
    HEAP8[$36>>0] = $41;
    $$0 = $7;
   }
  }
 }
 if ((label|0) == 4) {
  $9 = ((($0)) + 100|0);
  HEAP32[$9>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function _isspace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $narrow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(32);
 $2 = (($0) + -9)|0;
 $3 = ($2>>>0)<(5);
 $narrow = $1 | $3;
 $4 = $narrow&1;
 return ($4|0);
}
function ___uflow($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = (___toread($0)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($0)) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (FUNCTION_TABLE_iiii[$5 & 15]($0,$1,1)|0);
  $7 = ($6|0)==(1);
  if ($7) {
   $8 = HEAP8[$1>>0]|0;
   $9 = $8&255;
   $$0 = $9;
  } else {
   $$0 = -1;
  }
 } else {
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 15]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$9>>2] = 0;
 HEAP32[$7>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 $16 = $15 & 4;
 $17 = ($16|0)==(0);
 if ($17) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 8|0);
  HEAP32[$24>>2] = $23;
  $25 = ((($0)) + 4|0);
  HEAP32[$25>>2] = $23;
  $26 = $15 << 27;
  $sext = $26 >> 31;
  $$0 = $sext;
 } else {
  $18 = $15 | 32;
  HEAP32[$0>>2] = $18;
  $$0 = -1;
 }
 return ($$0|0);
}
function _copysign($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = $3 & 2147483647;
 $7 = $5 & -2147483648;
 $8 = $7 | $6;
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $8;$9 = +HEAPF64[tempDoublePtr>>3];
 return (+$9);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $14 = 0;
  } else {
   $$01318 = $0;$$01417 = $2;$$019 = $1;
   while(1) {
    $4 = HEAP8[$$01318>>0]|0;
    $5 = HEAP8[$$019>>0]|0;
    $6 = ($4<<24>>24)==($5<<24>>24);
    if (!($6)) {
     break;
    }
    $7 = (($$01417) + -1)|0;
    $8 = ((($$01318)) + 1|0);
    $9 = ((($$019)) + 1|0);
    $10 = ($7|0)==(0);
    if ($10) {
     $14 = 0;
     break L1;
    } else {
     $$01318 = $8;$$01417 = $7;$$019 = $9;
    }
   }
   $11 = $4&255;
   $12 = $5&255;
   $13 = (($11) - ($12))|0;
   $14 = $13;
  }
 } while(0);
 return ($14|0);
}
function _strncmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$01823 = 0, $$01925 = 0, $$01925$in = 0, $$020 = 0, $$024 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $$020 = 0;
 } else {
  $4 = HEAP8[$0>>0]|0;
  $5 = ($4<<24>>24)==(0);
  L3: do {
   if ($5) {
    $$0$lcssa = $1;$$lcssa = 0;
   } else {
    $$01823 = $0;$$01925$in = $2;$$024 = $1;$9 = $4;
    while(1) {
     $$01925 = (($$01925$in) + -1)|0;
     $6 = HEAP8[$$024>>0]|0;
     $7 = ($6<<24>>24)!=(0);
     $8 = ($$01925|0)!=(0);
     $or$cond = $8 & $7;
     $10 = ($9<<24>>24)==($6<<24>>24);
     $or$cond21 = $10 & $or$cond;
     if (!($or$cond21)) {
      $$0$lcssa = $$024;$$lcssa = $9;
      break L3;
     }
     $11 = ((($$01823)) + 1|0);
     $12 = ((($$024)) + 1|0);
     $13 = HEAP8[$11>>0]|0;
     $14 = ($13<<24>>24)==(0);
     if ($14) {
      $$0$lcssa = $12;$$lcssa = 0;
      break;
     } else {
      $$01823 = $11;$$01925$in = $$01925;$$024 = $12;$9 = $13;
     }
    }
   }
  } while(0);
  $15 = $$lcssa&255;
  $16 = HEAP8[$$0$lcssa>>0]|0;
  $17 = $16&255;
  $18 = (($15) - ($17))|0;
  $$020 = $18;
 }
 return ($$020|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = (getTempRet0() | 0);
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1820|0);
}
function _qsort($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$067$lcssa = 0, $$06772 = 0, $$068$lcssa = 0, $$06871 = 0, $$1 = 0, $$169 = 0, $$169$be = 0, $$2 = 0, $$2$be = 0, $$be = 0, $$pre$pre = 0, $$pre76 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $15$phi = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0;
 $4 = sp;
 $5 = sp + 192|0;
 $6 = Math_imul($2, $1)|0;
 $7 = $5;
 $8 = $7;
 HEAP32[$8>>2] = 1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $11 = ($6|0)==(0);
 L1: do {
  if (!($11)) {
   $12 = (0 - ($2))|0;
   $13 = ((($4)) + 4|0);
   HEAP32[$13>>2] = $2;
   HEAP32[$4>>2] = $2;
   $$0 = 2;$15 = $2;$17 = $2;
   while(1) {
    $14 = (($15) + ($2))|0;
    $16 = (($14) + ($17))|0;
    $18 = (($4) + ($$0<<2)|0);
    HEAP32[$18>>2] = $16;
    $19 = ($16>>>0)<($6>>>0);
    $20 = (($$0) + 1)|0;
    if ($19) {
     $15$phi = $17;$$0 = $20;$17 = $16;$15 = $15$phi;
    } else {
     break;
    }
   }
   $21 = (($0) + ($6)|0);
   $22 = (($21) + ($12)|0);
   $23 = ($22>>>0)>($0>>>0);
   if ($23) {
    $24 = $22;
    $$06772 = 1;$$06871 = $0;$26 = 1;
    while(1) {
     $25 = $26 & 3;
     $27 = ($25|0)==(3);
     do {
      if ($27) {
       _sift($$06871,$2,$3,$$06772,$4);
       _shr($5,2);
       $28 = (($$06772) + 2)|0;
       $$1 = $28;
      } else {
       $29 = (($$06772) + -1)|0;
       $30 = (($4) + ($29<<2)|0);
       $31 = HEAP32[$30>>2]|0;
       $32 = $$06871;
       $33 = (($24) - ($32))|0;
       $34 = ($31>>>0)<($33>>>0);
       if ($34) {
        _sift($$06871,$2,$3,$$06772,$4);
       } else {
        _trinkle($$06871,$2,$3,$5,$$06772,0,$4);
       }
       $35 = ($$06772|0)==(1);
       if ($35) {
        _shl($5,1);
        $$1 = 0;
        break;
       } else {
        _shl($5,$29);
        $$1 = 1;
        break;
       }
      }
     } while(0);
     $36 = HEAP32[$5>>2]|0;
     $37 = $36 | 1;
     HEAP32[$5>>2] = $37;
     $38 = (($$06871) + ($2)|0);
     $39 = ($38>>>0)<($22>>>0);
     if ($39) {
      $$06772 = $$1;$$06871 = $38;$26 = $37;
     } else {
      $$067$lcssa = $$1;$$068$lcssa = $38;$61 = $37;
      break;
     }
    }
   } else {
    $$067$lcssa = 1;$$068$lcssa = $0;$61 = 1;
   }
   _trinkle($$068$lcssa,$2,$3,$5,$$067$lcssa,0,$4);
   $40 = ((($5)) + 4|0);
   $$169 = $$068$lcssa;$$2 = $$067$lcssa;$42 = $61;
   while(1) {
    $41 = ($$2|0)==(1);
    $43 = ($42|0)==(1);
    $or$cond = $41 & $43;
    if ($or$cond) {
     $44 = HEAP32[$40>>2]|0;
     $45 = ($44|0)==(0);
     if ($45) {
      break L1;
     } else {
      label = 19;
     }
    } else {
     $46 = ($$2|0)<(2);
     if ($46) {
      label = 19;
     } else {
      _shl($5,2);
      $49 = (($$2) + -2)|0;
      $50 = HEAP32[$5>>2]|0;
      $51 = $50 ^ 7;
      HEAP32[$5>>2] = $51;
      _shr($5,1);
      $52 = (($4) + ($49<<2)|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = (0 - ($53))|0;
      $55 = (($$169) + ($54)|0);
      $56 = (($55) + ($12)|0);
      $57 = (($$2) + -1)|0;
      _trinkle($56,$2,$3,$5,$57,1,$4);
      _shl($5,1);
      $58 = HEAP32[$5>>2]|0;
      $59 = $58 | 1;
      HEAP32[$5>>2] = $59;
      $60 = (($$169) + ($12)|0);
      _trinkle($60,$2,$3,$5,$49,1,$4);
      $$169$be = $60;$$2$be = $49;$$be = $59;
     }
    }
    if ((label|0) == 19) {
     label = 0;
     $47 = (_pntz($5)|0);
     _shr($5,$47);
     $48 = (($47) + ($$2))|0;
     $$pre$pre = HEAP32[$5>>2]|0;
     $$pre76 = (($$169) + ($12)|0);
     $$169$be = $$pre76;$$2$be = $48;$$be = $$pre$pre;
    }
    $$169 = $$169$be;$$2 = $$2$be;$42 = $$be;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _sift($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$02934 = 0, $$03133 = 0, $$035 = 0, $$1 = 0, $$130 = 0, $$132 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $5 = sp;
 HEAP32[$5>>2] = $0;
 $6 = ($3|0)>(1);
 L1: do {
  if ($6) {
   $7 = (0 - ($1))|0;
   $$02934 = $0;$$03133 = $3;$$035 = 1;$14 = $0;
   while(1) {
    $8 = (($$02934) + ($7)|0);
    $9 = (($$03133) + -2)|0;
    $10 = (($4) + ($9<<2)|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (0 - ($11))|0;
    $13 = (($8) + ($12)|0);
    $15 = (FUNCTION_TABLE_iii[$2 & 7]($14,$13)|0);
    $16 = ($15|0)>(-1);
    if ($16) {
     $17 = (FUNCTION_TABLE_iii[$2 & 7]($14,$8)|0);
     $18 = ($17|0)>(-1);
     if ($18) {
      $$0$lcssa = $$035;
      break L1;
     }
    }
    $19 = (FUNCTION_TABLE_iii[$2 & 7]($13,$8)|0);
    $20 = ($19|0)>(-1);
    $21 = (($5) + ($$035<<2)|0);
    if ($20) {
     HEAP32[$21>>2] = $13;
     $22 = (($$03133) + -1)|0;
     $$130 = $13;$$132 = $22;
    } else {
     HEAP32[$21>>2] = $8;
     $$130 = $8;$$132 = $9;
    }
    $$1 = (($$035) + 1)|0;
    $23 = ($$132|0)>(1);
    if (!($23)) {
     $$0$lcssa = $$1;
     break L1;
    }
    $$pre = HEAP32[$5>>2]|0;
    $$02934 = $$130;$$03133 = $$132;$$035 = $$1;$14 = $$pre;
   }
  } else {
   $$0$lcssa = 1;
  }
 } while(0);
 _cycle($1,$5,$$0$lcssa);
 STACKTOP = sp;return;
}
function _shr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $$pre11 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(31);
 $3 = ((($0)) + 4|0);
 if ($2) {
  $4 = (($1) + -32)|0;
  $5 = HEAP32[$3>>2]|0;
  HEAP32[$0>>2] = $5;
  HEAP32[$3>>2] = 0;
  $$0 = $4;$10 = 0;$7 = $5;
 } else {
  $$pre = HEAP32[$0>>2]|0;
  $$pre11 = HEAP32[$3>>2]|0;
  $$0 = $1;$10 = $$pre11;$7 = $$pre;
 }
 $6 = $7 >>> $$0;
 $8 = (32 - ($$0))|0;
 $9 = $10 << $8;
 $11 = $9 | $6;
 HEAP32[$0>>2] = $11;
 $12 = $10 >>> $$0;
 HEAP32[$3>>2] = $12;
 return;
}
function _trinkle($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0$lcssa = 0, $$045$lcssa = 0, $$04551 = 0, $$0455780 = 0, $$046$lcssa = 0, $$04653 = 0, $$0465681 = 0, $$047$lcssa = 0, $$0475582 = 0, $$049 = 0, $$05879 = 0, $$05879$phi = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $phitmp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $7 = sp + 232|0;
 $8 = sp;
 $9 = HEAP32[$3>>2]|0;
 HEAP32[$7>>2] = $9;
 $10 = ((($3)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($7)) + 4|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$8>>2] = $0;
 $13 = ($9|0)!=(1);
 $14 = ($11|0)!=(0);
 $15 = $13 | $14;
 L1: do {
  if ($15) {
   $16 = (0 - ($1))|0;
   $17 = (($6) + ($4<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (0 - ($18))|0;
   $20 = (($0) + ($19)|0);
   $21 = (FUNCTION_TABLE_iii[$2 & 7]($20,$0)|0);
   $22 = ($21|0)<(1);
   if ($22) {
    $$0$lcssa = $0;$$045$lcssa = 1;$$046$lcssa = $4;$$047$lcssa = $5;
    label = 9;
   } else {
    $phitmp = ($5|0)==(0);
    $$0455780 = 1;$$0465681 = $4;$$0475582 = $phitmp;$$05879 = $0;$28 = $20;
    while(1) {
     $23 = ($$0465681|0)>(1);
     $or$cond = $$0475582 & $23;
     if ($or$cond) {
      $24 = (($$05879) + ($16)|0);
      $25 = (($$0465681) + -2)|0;
      $26 = (($6) + ($25<<2)|0);
      $27 = HEAP32[$26>>2]|0;
      $29 = (FUNCTION_TABLE_iii[$2 & 7]($24,$28)|0);
      $30 = ($29|0)>(-1);
      if ($30) {
       $$04551 = $$0455780;$$04653 = $$0465681;$$049 = $$05879;
       label = 10;
       break L1;
      }
      $31 = (0 - ($27))|0;
      $32 = (($24) + ($31)|0);
      $33 = (FUNCTION_TABLE_iii[$2 & 7]($32,$28)|0);
      $34 = ($33|0)>(-1);
      if ($34) {
       $$04551 = $$0455780;$$04653 = $$0465681;$$049 = $$05879;
       label = 10;
       break L1;
      }
     }
     $35 = (($$0455780) + 1)|0;
     $36 = (($8) + ($$0455780<<2)|0);
     HEAP32[$36>>2] = $28;
     $37 = (_pntz($7)|0);
     _shr($7,$37);
     $38 = (($37) + ($$0465681))|0;
     $39 = HEAP32[$7>>2]|0;
     $40 = ($39|0)!=(1);
     $41 = HEAP32[$12>>2]|0;
     $42 = ($41|0)!=(0);
     $43 = $40 | $42;
     if (!($43)) {
      $$04551 = $35;$$04653 = $38;$$049 = $28;
      label = 10;
      break L1;
     }
     $$pre = HEAP32[$8>>2]|0;
     $44 = (($6) + ($38<<2)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = (0 - ($45))|0;
     $47 = (($28) + ($46)|0);
     $48 = (FUNCTION_TABLE_iii[$2 & 7]($47,$$pre)|0);
     $49 = ($48|0)<(1);
     if ($49) {
      $$0$lcssa = $28;$$045$lcssa = $35;$$046$lcssa = $38;$$047$lcssa = 0;
      label = 9;
      break;
     } else {
      $$05879$phi = $28;$$0455780 = $35;$$0465681 = $38;$$0475582 = 1;$28 = $47;$$05879 = $$05879$phi;
     }
    }
   }
  } else {
   $$0$lcssa = $0;$$045$lcssa = 1;$$046$lcssa = $4;$$047$lcssa = $5;
   label = 9;
  }
 } while(0);
 if ((label|0) == 9) {
  $50 = ($$047$lcssa|0)==(0);
  if ($50) {
   $$04551 = $$045$lcssa;$$04653 = $$046$lcssa;$$049 = $$0$lcssa;
   label = 10;
  }
 }
 if ((label|0) == 10) {
  _cycle($1,$8,$$04551);
  _sift($$049,$1,$2,$$04653,$6);
 }
 STACKTOP = sp;return;
}
function _shl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $$pre11 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(31);
 $3 = ((($0)) + 4|0);
 if ($2) {
  $4 = (($1) + -32)|0;
  $5 = HEAP32[$0>>2]|0;
  HEAP32[$3>>2] = $5;
  HEAP32[$0>>2] = 0;
  $$0 = $4;$10 = 0;$7 = $5;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $$pre11 = HEAP32[$0>>2]|0;
  $$0 = $1;$10 = $$pre11;$7 = $$pre;
 }
 $6 = $7 << $$0;
 $8 = (32 - ($$0))|0;
 $9 = $10 >>> $8;
 $11 = $9 | $6;
 HEAP32[$3>>2] = $11;
 $12 = $10 << $$0;
 HEAP32[$0>>2] = $12;
 return;
}
function _pntz($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1)|0;
 $3 = (_a_ctz_l_748($2)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = ((($0)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_a_ctz_l_748($6)|0);
  $8 = (($7) + 32)|0;
  $9 = ($7|0)==(0);
  $spec$select = $9 ? 0 : $8;
  return ($spec$select|0);
 } else {
  return ($3|0);
 }
 return (0)|0;
}
function _a_ctz_l_748($0) {
 $0 = $0|0;
 var $$068 = 0, $$07 = 0, $$09 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 if ($1) {
  $$07 = 32;
 } else {
  $2 = $0 & 1;
  $3 = ($2|0)==(0);
  if ($3) {
   $$068 = $0;$$09 = 0;
   while(1) {
    $4 = (($$09) + 1)|0;
    $5 = $$068 >>> 1;
    $6 = $$068 & 2;
    $7 = ($6|0)==(0);
    if ($7) {
     $$068 = $5;$$09 = $4;
    } else {
     $$07 = $4;
     break;
    }
   }
  } else {
   $$07 = 0;
  }
 }
 return ($$07|0);
}
function _cycle($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$02527 = 0, $$026 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $3 = sp;
 $4 = ($2|0)<(2);
 L1: do {
  if (!($4)) {
   $5 = (($1) + ($2<<2)|0);
   HEAP32[$5>>2] = $3;
   $6 = ($0|0)==(0);
   if (!($6)) {
    $$02527 = $0;$10 = $3;
    while(1) {
     $7 = ($$02527>>>0)<(256);
     $8 = $7 ? $$02527 : 256;
     $9 = HEAP32[$1>>2]|0;
     (_memcpy(($10|0),($9|0),($8|0))|0);
     $$026 = 0;
     while(1) {
      $11 = (($1) + ($$026<<2)|0);
      $12 = HEAP32[$11>>2]|0;
      $13 = (($$026) + 1)|0;
      $14 = (($1) + ($13<<2)|0);
      $15 = HEAP32[$14>>2]|0;
      (_memcpy(($12|0),($15|0),($8|0))|0);
      $16 = HEAP32[$11>>2]|0;
      $17 = (($16) + ($8)|0);
      HEAP32[$11>>2] = $17;
      $exitcond = ($13|0)==($2|0);
      if ($exitcond) {
       break;
      } else {
       $$026 = $13;
      }
     }
     $18 = (($$02527) - ($8))|0;
     $19 = ($18|0)==(0);
     if ($19) {
      break L1;
     }
     $$pre = HEAP32[$5>>2]|0;
     $$02527 = $18;$10 = $$pre;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function ___floatscan($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0102 = 0, $$0103 = 0, $$0104122 = 0, $$0110 = 0, $$0111 = 0.0, $$1$lcssa = 0, $$1105118 = 0, $$1123 = 0, $$2 = 0, $$2106120 = 0, $$3107 = 0, $$3121 = 0, $$4 = 0, $$4108 = 0, $$5 = 0, $$6 = 0, $$in = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0.0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond124 = 0, $or$cond5 = 0, $or$cond7 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($1|0) {
 case 0:  {
  $$0102 = -149;$$0103 = 24;
  label = 4;
  break;
 }
 case 1:  {
  $$0102 = -1074;$$0103 = 53;
  label = 4;
  break;
 }
 case 2:  {
  $$0102 = -1074;$$0103 = 53;
  label = 4;
  break;
 }
 default: {
  $$0111 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $3 = ((($0)) + 4|0);
   $4 = ((($0)) + 100|0);
   while(1) {
    $5 = HEAP32[$3>>2]|0;
    $6 = HEAP32[$4>>2]|0;
    $7 = ($5>>>0)<($6>>>0);
    if ($7) {
     $8 = ((($5)) + 1|0);
     HEAP32[$3>>2] = $8;
     $9 = HEAP8[$5>>0]|0;
     $10 = $9&255;
     $12 = $10;
    } else {
     $11 = (___shgetc($0)|0);
     $12 = $11;
    }
    $13 = (_isspace($12)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     break;
    }
   }
   L13: do {
    switch ($12|0) {
    case 43: case 45:  {
     $15 = ($12|0)==(45);
     $16 = $15&1;
     $17 = $16 << 1;
     $18 = (1 - ($17))|0;
     $19 = HEAP32[$3>>2]|0;
     $20 = HEAP32[$4>>2]|0;
     $21 = ($19>>>0)<($20>>>0);
     if ($21) {
      $22 = ((($19)) + 1|0);
      HEAP32[$3>>2] = $22;
      $23 = HEAP8[$19>>0]|0;
      $24 = $23&255;
      $$0 = $24;$$0110 = $18;
      break L13;
     } else {
      $25 = (___shgetc($0)|0);
      $$0 = $25;$$0110 = $18;
      break L13;
     }
     break;
    }
    default: {
     $$0 = $12;$$0110 = 1;
    }
    }
   } while(0);
   $$0104122 = 0;$$1123 = $$0;
   while(1) {
    $26 = $$1123 | 32;
    $27 = (3470 + ($$0104122)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28 << 24 >> 24;
    $30 = ($26|0)==($29|0);
    if (!($30)) {
     $$1$lcssa = $$1123;$trunc = $$0104122;
     break;
    }
    $31 = ($$0104122>>>0)<(7);
    do {
     if ($31) {
      $32 = HEAP32[$3>>2]|0;
      $33 = HEAP32[$4>>2]|0;
      $34 = ($32>>>0)<($33>>>0);
      if ($34) {
       $35 = ((($32)) + 1|0);
       HEAP32[$3>>2] = $35;
       $36 = HEAP8[$32>>0]|0;
       $37 = $36&255;
       $$2 = $37;
       break;
      } else {
       $38 = (___shgetc($0)|0);
       $$2 = $38;
       break;
      }
     } else {
      $$2 = $$1123;
     }
    } while(0);
    $39 = (($$0104122) + 1)|0;
    $40 = ($39>>>0)<(8);
    if ($40) {
     $$0104122 = $39;$$1123 = $$2;
    } else {
     $$1$lcssa = $$2;$trunc = 8;
     break;
    }
   }
   $trunc$clear = $trunc & 2147483647;
   L29: do {
    switch ($trunc$clear|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $41 = ($trunc>>>0)>(3);
     $42 = ($2|0)!=(0);
     $or$cond5 = $42 & $41;
     if ($or$cond5) {
      $43 = ($trunc|0)==(8);
      if ($43) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $57 = ($trunc|0)==(0);
     L34: do {
      if ($57) {
       $$2106120 = 0;$$3121 = $$1$lcssa;
       while(1) {
        $58 = $$3121 | 32;
        $59 = (3479 + ($$2106120)|0);
        $60 = HEAP8[$59>>0]|0;
        $61 = $60 << 24 >> 24;
        $62 = ($58|0)==($61|0);
        if (!($62)) {
         $$3107 = $$2106120;$$5 = $$3121;
         break L34;
        }
        $63 = ($$2106120>>>0)<(2);
        do {
         if ($63) {
          $64 = HEAP32[$3>>2]|0;
          $65 = HEAP32[$4>>2]|0;
          $66 = ($64>>>0)<($65>>>0);
          if ($66) {
           $67 = ((($64)) + 1|0);
           HEAP32[$3>>2] = $67;
           $68 = HEAP8[$64>>0]|0;
           $69 = $68&255;
           $$4 = $69;
           break;
          } else {
           $70 = (___shgetc($0)|0);
           $$4 = $70;
           break;
          }
         } else {
          $$4 = $$3121;
         }
        } while(0);
        $71 = (($$2106120) + 1)|0;
        $72 = ($71>>>0)<(3);
        if ($72) {
         $$2106120 = $71;$$3121 = $$4;
        } else {
         $$3107 = 3;$$5 = $$4;
         break;
        }
       }
      } else {
       $$3107 = $trunc;$$5 = $$1$lcssa;
      }
     } while(0);
     switch ($$3107|0) {
     case 3:  {
      $73 = HEAP32[$3>>2]|0;
      $74 = HEAP32[$4>>2]|0;
      $75 = ($73>>>0)<($74>>>0);
      if ($75) {
       $76 = ((($73)) + 1|0);
       HEAP32[$3>>2] = $76;
       $77 = HEAP8[$73>>0]|0;
       $78 = $77&255;
       $80 = $78;
      } else {
       $79 = (___shgetc($0)|0);
       $80 = $79;
      }
      $81 = ($80|0)==(40);
      if (!($81)) {
       $82 = HEAP32[$4>>2]|0;
       $83 = ($82|0)==(0|0);
       if ($83) {
        $$0111 = nan;
        break L4;
       }
       $84 = HEAP32[$3>>2]|0;
       $85 = ((($84)) + -1|0);
       HEAP32[$3>>2] = $85;
       $$0111 = nan;
       break L4;
      }
      $$4108 = 1;
      while(1) {
       $86 = HEAP32[$3>>2]|0;
       $87 = HEAP32[$4>>2]|0;
       $88 = ($86>>>0)<($87>>>0);
       if ($88) {
        $89 = ((($86)) + 1|0);
        HEAP32[$3>>2] = $89;
        $90 = HEAP8[$86>>0]|0;
        $91 = $90&255;
        $94 = $91;
       } else {
        $92 = (___shgetc($0)|0);
        $94 = $92;
       }
       $93 = (($94) + -48)|0;
       $95 = ($93>>>0)<(10);
       $96 = (($94) + -65)|0;
       $97 = ($96>>>0)<(26);
       $or$cond = $95 | $97;
       if (!($or$cond)) {
        $98 = (($94) + -97)|0;
        $99 = ($98>>>0)<(26);
        $100 = ($94|0)==(95);
        $or$cond7 = $100 | $99;
        if (!($or$cond7)) {
         break;
        }
       }
       $112 = (($$4108) + 1)|0;
       $$4108 = $112;
      }
      $101 = ($94|0)==(41);
      if ($101) {
       $$0111 = nan;
       break L4;
      }
      $102 = HEAP32[$4>>2]|0;
      $103 = ($102|0)==(0|0);
      if (!($103)) {
       $104 = HEAP32[$3>>2]|0;
       $105 = ((($104)) + -1|0);
       HEAP32[$3>>2] = $105;
      }
      if (!($42)) {
       $106 = (___errno_location()|0);
       HEAP32[$106>>2] = 22;
       ___shlim($0,0);
       $$0111 = 0.0;
       break L4;
      }
      $107 = ($$4108|0)==(0);
      if ($107) {
       $$0111 = nan;
       break L4;
      }
      $$in = $$4108;
      while(1) {
       $108 = (($$in) + -1)|0;
       if (!($103)) {
        $109 = HEAP32[$3>>2]|0;
        $110 = ((($109)) + -1|0);
        HEAP32[$3>>2] = $110;
       }
       $111 = ($108|0)==(0);
       if ($111) {
        $$0111 = nan;
        break L4;
       } else {
        $$in = $108;
       }
      }
      break;
     }
     case 0:  {
      $118 = ($$5|0)==(48);
      if ($118) {
       $119 = HEAP32[$3>>2]|0;
       $120 = HEAP32[$4>>2]|0;
       $121 = ($119>>>0)<($120>>>0);
       if ($121) {
        $122 = ((($119)) + 1|0);
        HEAP32[$3>>2] = $122;
        $123 = HEAP8[$119>>0]|0;
        $124 = $123&255;
        $127 = $124;
       } else {
        $125 = (___shgetc($0)|0);
        $127 = $125;
       }
       $126 = $127 | 32;
       $128 = ($126|0)==(120);
       if ($128) {
        $129 = (+_hexfloat($0,$$0103,$$0102,$$0110,$2));
        $$0111 = $129;
        break L4;
       }
       $130 = HEAP32[$4>>2]|0;
       $131 = ($130|0)==(0|0);
       if ($131) {
        $$6 = 48;
       } else {
        $132 = HEAP32[$3>>2]|0;
        $133 = ((($132)) + -1|0);
        HEAP32[$3>>2] = $133;
        $$6 = 48;
       }
      } else {
       $$6 = $$5;
      }
      $134 = (+_decfloat($0,$$6,$$0103,$$0102,$$0110,$2));
      $$0111 = $134;
      break L4;
      break;
     }
     default: {
      $113 = HEAP32[$4>>2]|0;
      $114 = ($113|0)==(0|0);
      if (!($114)) {
       $115 = HEAP32[$3>>2]|0;
       $116 = ((($115)) + -1|0);
       HEAP32[$3>>2] = $116;
      }
      $117 = (___errno_location()|0);
      HEAP32[$117>>2] = 22;
      ___shlim($0,0);
      $$0111 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $44 = HEAP32[$4>>2]|0;
    $45 = ($44|0)==(0|0);
    if (!($45)) {
     $46 = HEAP32[$3>>2]|0;
     $47 = ((($46)) + -1|0);
     HEAP32[$3>>2] = $47;
    }
    $48 = ($2|0)!=(0);
    $49 = ($trunc>>>0)>(3);
    $or$cond124 = $48 & $49;
    if ($or$cond124) {
     $$1105118 = $trunc;
     while(1) {
      if (!($45)) {
       $50 = HEAP32[$3>>2]|0;
       $51 = ((($50)) + -1|0);
       HEAP32[$3>>2] = $51;
      }
      $52 = (($$1105118) + -1)|0;
      $53 = ($52>>>0)>(3);
      if ($53) {
       $$1105118 = $52;
      } else {
       break;
      }
     }
    }
   }
   $54 = (+($$0110|0));
   $55 = $54 * inf;
   $56 = $55;
   $$0111 = $56;
  }
 } while(0);
 return (+$$0111);
}
function _hexfloat($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0$be = 0, $$0$ph = 0, $$0133 = 0, $$0143 = 0, $$0151 = 0, $$0154 = 0.0, $$0155 = 0.0, $$0158 = 0.0, $$0163 = 0, $$0169 = 0.0, $$0170 = 0, $$0170173 = 0, $$0170174 = 0, $$1149 = 0, $$1149$ph = 0, $$1152 = 0, $$1156 = 0.0, $$1159 = 0.0, $$1164 = 0;
 var $$2150 = 0, $$2153 = 0, $$2157 = 0.0, $$2160 = 0.0, $$2165 = 0, $$3 = 0, $$3$be = 0, $$3$lcssa = 0, $$3$ph = 0, $$3146 = 0, $$3146$ph = 0, $$3161$lcssa = 0.0, $$3161181 = 0.0, $$3166$lcssa = 0, $$3166185 = 0, $$4147 = 0, $$4162 = 0.0, $$4167$lcssa = 0, $$4167180 = 0, $$5 = 0.0;
 var $$5168 = 0, $$6 = 0, $$pn = 0.0, $$pre = 0, $$pre$phi204Z2D = 0.0, $$pre203 = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0.0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0;
 var $not$ = 0, $or$cond = 0, $or$cond172 = 0, $or$cond4 = 0, $or$cond6 = 0, $spec$select175 = 0.0, $spec$select176 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 100|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)<($8>>>0);
 if ($9) {
  $10 = ((($6)) + 1|0);
  HEAP32[$5>>2] = $10;
  $11 = HEAP8[$6>>0]|0;
  $12 = $11&255;
  $$0$ph = $12;
 } else {
  $13 = (___shgetc($0)|0);
  $$0$ph = $13;
 }
 $$0 = $$0$ph;$$0143 = 0;
 L5: while(1) {
  switch ($$0|0) {
  case 46:  {
   label = 10;
   break L5;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$1149$ph = 0;$$3$ph = $$0;$$3146$ph = $$0143;$212 = 0;$213 = 0;
   break L5;
  }
  }
  $14 = HEAP32[$5>>2]|0;
  $15 = HEAP32[$7>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$5>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $$0$be = $19;
  } else {
   $20 = (___shgetc($0)|0);
   $$0$be = $20;
  }
  $$0 = $$0$be;$$0143 = 1;
 }
 if ((label|0) == 10) {
  $21 = HEAP32[$5>>2]|0;
  $22 = HEAP32[$7>>2]|0;
  $23 = ($21>>>0)<($22>>>0);
  if ($23) {
   $24 = ((($21)) + 1|0);
   HEAP32[$5>>2] = $24;
   $25 = HEAP8[$21>>0]|0;
   $26 = $25&255;
   $28 = $26;
  } else {
   $27 = (___shgetc($0)|0);
   $28 = $27;
  }
  $29 = ($28|0)==(48);
  if ($29) {
   $37 = 0;$38 = 0;
   while(1) {
    $30 = HEAP32[$5>>2]|0;
    $31 = HEAP32[$7>>2]|0;
    $32 = ($30>>>0)<($31>>>0);
    if ($32) {
     $33 = ((($30)) + 1|0);
     HEAP32[$5>>2] = $33;
     $34 = HEAP8[$30>>0]|0;
     $35 = $34&255;
     $41 = $35;
    } else {
     $36 = (___shgetc($0)|0);
     $41 = $36;
    }
    $39 = (_i64Add(($37|0),($38|0),-1,-1)|0);
    $40 = (getTempRet0() | 0);
    $42 = ($41|0)==(48);
    if ($42) {
     $37 = $39;$38 = $40;
    } else {
     $$1149$ph = 1;$$3$ph = $41;$$3146$ph = 1;$212 = $39;$213 = $40;
     break;
    }
   }
  } else {
   $$1149$ph = 1;$$3$ph = $28;$$3146$ph = $$0143;$212 = 0;$213 = 0;
  }
 }
 $$0151 = 0;$$0155 = 1.0;$$0158 = 0.0;$$0163 = 0;$$1149 = $$1149$ph;$$3 = $$3$ph;$$3146 = $$3146$ph;$51 = 0;$53 = 0;$96 = $212;$98 = $213;
 while(1) {
  $43 = (($$3) + -48)|0;
  $44 = ($43>>>0)<(10);
  $$pre = $$3 | 32;
  if ($44) {
   label = 24;
  } else {
   $45 = (($$pre) + -97)|0;
   $46 = ($45>>>0)<(6);
   $47 = ($$3|0)==(46);
   $or$cond6 = $47 | $46;
   if (!($or$cond6)) {
    $$3$lcssa = $$3;
    break;
   }
   if ($47) {
    $48 = ($$1149|0)==(0);
    if ($48) {
     $$2150 = 1;$$2153 = $$0151;$$2157 = $$0155;$$2160 = $$0158;$$2165 = $$0163;$$4147 = $$3146;$214 = $53;$215 = $51;$216 = $53;$217 = $51;
    } else {
     $$3$lcssa = 46;
     break;
    }
   } else {
    label = 24;
   }
  }
  if ((label|0) == 24) {
   label = 0;
   $49 = ($$3|0)>(57);
   $50 = (($$pre) + -87)|0;
   $$0133 = $49 ? $50 : $43;
   $52 = ($51|0)<(0);
   $54 = ($53>>>0)<(8);
   $55 = ($51|0)==(0);
   $56 = $55 & $54;
   $57 = $52 | $56;
   do {
    if ($57) {
     $58 = $$0163 << 4;
     $59 = (($$0133) + ($58))|0;
     $$1152 = $$0151;$$1156 = $$0155;$$1159 = $$0158;$$1164 = $59;
    } else {
     $60 = ($51|0)<(0);
     $61 = ($53>>>0)<(14);
     $62 = ($51|0)==(0);
     $63 = $62 & $61;
     $64 = $60 | $63;
     if ($64) {
      $65 = (+($$0133|0));
      $66 = $$0155 * 0.0625;
      $67 = $66 * $65;
      $68 = $$0158 + $67;
      $$1152 = $$0151;$$1156 = $66;$$1159 = $68;$$1164 = $$0163;
      break;
     } else {
      $69 = ($$0133|0)==(0);
      $70 = ($$0151|0)!=(0);
      $or$cond = $70 | $69;
      $71 = $$0155 * 0.5;
      $72 = $$0158 + $71;
      $spec$select175 = $or$cond ? $$0158 : $72;
      $spec$select176 = $or$cond ? $$0151 : 1;
      $$1152 = $spec$select176;$$1156 = $$0155;$$1159 = $spec$select175;$$1164 = $$0163;
      break;
     }
    }
   } while(0);
   $73 = (_i64Add(($53|0),($51|0),1,0)|0);
   $74 = (getTempRet0() | 0);
   $$2150 = $$1149;$$2153 = $$1152;$$2157 = $$1156;$$2160 = $$1159;$$2165 = $$1164;$$4147 = 1;$214 = $96;$215 = $98;$216 = $73;$217 = $74;
  }
  $75 = HEAP32[$5>>2]|0;
  $76 = HEAP32[$7>>2]|0;
  $77 = ($75>>>0)<($76>>>0);
  if ($77) {
   $78 = ((($75)) + 1|0);
   HEAP32[$5>>2] = $78;
   $79 = HEAP8[$75>>0]|0;
   $80 = $79&255;
   $$3$be = $80;
  } else {
   $81 = (___shgetc($0)|0);
   $$3$be = $81;
  }
  $$0151 = $$2153;$$0155 = $$2157;$$0158 = $$2160;$$0163 = $$2165;$$1149 = $$2150;$$3 = $$3$be;$$3146 = $$4147;$51 = $217;$53 = $216;$96 = $214;$98 = $215;
 }
 $82 = ($$3146|0)==(0);
 do {
  if ($82) {
   $83 = HEAP32[$7>>2]|0;
   $84 = ($83|0)==(0|0);
   if (!($84)) {
    $85 = HEAP32[$5>>2]|0;
    $86 = ((($85)) + -1|0);
    HEAP32[$5>>2] = $86;
   }
   $87 = ($4|0)==(0);
   if ($87) {
    ___shlim($0,0);
   } else {
    if (!($84)) {
     $88 = HEAP32[$5>>2]|0;
     $89 = ((($88)) + -1|0);
     HEAP32[$5>>2] = $89;
     $90 = ($$1149|0)==(0);
     $brmerge = $90 | $84;
     if (!($brmerge)) {
      $91 = HEAP32[$5>>2]|0;
      $92 = ((($91)) + -1|0);
      HEAP32[$5>>2] = $92;
     }
    }
   }
   $93 = (+($3|0));
   $94 = $93 * 0.0;
   $$0169 = $94;
  } else {
   $95 = ($$1149|0)==(0);
   $97 = $95 ? $53 : $96;
   $99 = $95 ? $51 : $98;
   $100 = ($51|0)<(0);
   $101 = ($53>>>0)<(8);
   $102 = ($51|0)==(0);
   $103 = $102 & $101;
   $104 = $100 | $103;
   if ($104) {
    $$3166185 = $$0163;$106 = $53;$107 = $51;
    while(1) {
     $105 = $$3166185 << 4;
     $108 = (_i64Add(($106|0),($107|0),1,0)|0);
     $109 = (getTempRet0() | 0);
     $110 = ($107|0)<(0);
     $111 = ($106>>>0)<(7);
     $112 = ($107|0)==(0);
     $113 = $112 & $111;
     $114 = $110 | $113;
     if ($114) {
      $$3166185 = $105;$106 = $108;$107 = $109;
     } else {
      $$3166$lcssa = $105;
      break;
     }
    }
   } else {
    $$3166$lcssa = $$0163;
   }
   $115 = $$3$lcssa | 32;
   $116 = ($115|0)==(112);
   if ($116) {
    $117 = (_scanexp($0,$4)|0);
    $118 = (getTempRet0() | 0);
    $119 = ($117|0)==(0);
    $120 = ($118|0)==(-2147483648);
    $121 = $119 & $120;
    if ($121) {
     $122 = ($4|0)==(0);
     if ($122) {
      ___shlim($0,0);
      $$0169 = 0.0;
      break;
     }
     $123 = HEAP32[$7>>2]|0;
     $124 = ($123|0)==(0|0);
     if ($124) {
      $135 = 0;$136 = 0;
     } else {
      $125 = HEAP32[$5>>2]|0;
      $126 = ((($125)) + -1|0);
      HEAP32[$5>>2] = $126;
      $135 = 0;$136 = 0;
     }
    } else {
     $135 = $117;$136 = $118;
    }
   } else {
    $127 = HEAP32[$7>>2]|0;
    $128 = ($127|0)==(0|0);
    if ($128) {
     $135 = 0;$136 = 0;
    } else {
     $129 = HEAP32[$5>>2]|0;
     $130 = ((($129)) + -1|0);
     HEAP32[$5>>2] = $130;
     $135 = 0;$136 = 0;
    }
   }
   $131 = (_bitshift64Shl(($97|0),($99|0),2)|0);
   $132 = (getTempRet0() | 0);
   $133 = (_i64Add(($131|0),($132|0),-32,-1)|0);
   $134 = (getTempRet0() | 0);
   $137 = (_i64Add(($133|0),($134|0),($135|0),($136|0))|0);
   $138 = (getTempRet0() | 0);
   $139 = ($$3166$lcssa|0)==(0);
   if ($139) {
    $140 = (+($3|0));
    $141 = $140 * 0.0;
    $$0169 = $141;
    break;
   }
   $142 = (0 - ($2))|0;
   $143 = ($142|0)<(0);
   $144 = $143 << 31 >> 31;
   $145 = ($138|0)>($144|0);
   $146 = ($137>>>0)>($142>>>0);
   $147 = ($138|0)==($144|0);
   $148 = $147 & $146;
   $149 = $145 | $148;
   if ($149) {
    $150 = (___errno_location()|0);
    HEAP32[$150>>2] = 34;
    $151 = (+($3|0));
    $152 = $151 * 1.7976931348623157E+308;
    $153 = $152 * 1.7976931348623157E+308;
    $$0169 = $153;
    break;
   }
   $154 = (($2) + -106)|0;
   $155 = ($154|0)<(0);
   $156 = $155 << 31 >> 31;
   $157 = ($138|0)<($156|0);
   $158 = ($137>>>0)<($154>>>0);
   $159 = ($138|0)==($156|0);
   $160 = $159 & $158;
   $161 = $157 | $160;
   if ($161) {
    $162 = (___errno_location()|0);
    HEAP32[$162>>2] = 34;
    $163 = (+($3|0));
    $164 = $163 * 2.2250738585072014E-308;
    $165 = $164 * 2.2250738585072014E-308;
    $$0169 = $165;
    break;
   }
   $166 = ($$3166$lcssa|0)>(-1);
   if ($166) {
    $$3161181 = $$0158;$$4167180 = $$3166$lcssa;$171 = $137;$172 = $138;
    while(1) {
     $167 = !($$3161181 >= 0.5);
     $168 = $$4167180 << 1;
     $169 = $$3161181 + -1.0;
     $not$ = $167 ^ 1;
     $170 = $not$&1;
     $$5168 = $168 | $170;
     $$pn = $167 ? $$3161181 : $169;
     $$4162 = $$3161181 + $$pn;
     $173 = (_i64Add(($171|0),($172|0),-1,-1)|0);
     $174 = (getTempRet0() | 0);
     $175 = ($$5168|0)>(-1);
     if ($175) {
      $$3161181 = $$4162;$$4167180 = $$5168;$171 = $173;$172 = $174;
     } else {
      $$3161$lcssa = $$4162;$$4167$lcssa = $$5168;$182 = $173;$183 = $174;
      break;
     }
    }
   } else {
    $$3161$lcssa = $$0158;$$4167$lcssa = $$3166$lcssa;$182 = $137;$183 = $138;
   }
   $176 = ($1|0)<(0);
   $177 = $176 << 31 >> 31;
   $178 = ($2|0)<(0);
   $179 = $178 << 31 >> 31;
   $180 = (_i64Subtract(32,0,($2|0),($179|0))|0);
   $181 = (getTempRet0() | 0);
   $184 = (_i64Add(($180|0),($181|0),($182|0),($183|0))|0);
   $185 = (getTempRet0() | 0);
   $186 = ($185|0)<($177|0);
   $187 = ($184>>>0)<($1>>>0);
   $188 = ($185|0)==($177|0);
   $189 = $188 & $187;
   $190 = $186 | $189;
   if ($190) {
    $191 = ($184|0)>(0);
    if ($191) {
     $$0170 = $184;
     label = 65;
    } else {
     $$0170174 = 0;$195 = 84;
     label = 67;
    }
   } else {
    $$0170 = $1;
    label = 65;
   }
   if ((label|0) == 65) {
    $192 = ($$0170|0)<(53);
    $193 = (84 - ($$0170))|0;
    if ($192) {
     $$0170174 = $$0170;$195 = $193;
     label = 67;
    } else {
     $$pre203 = (+($3|0));
     $$0154 = 0.0;$$0170173 = $$0170;$$pre$phi204Z2D = $$pre203;
    }
   }
   if ((label|0) == 67) {
    $194 = (+($3|0));
    $196 = (+_scalbn(1.0,$195));
    $197 = (+_copysignl($196,$194));
    $$0154 = $197;$$0170173 = $$0170174;$$pre$phi204Z2D = $194;
   }
   $198 = ($$0170173|0)<(32);
   $199 = $$3161$lcssa != 0.0;
   $or$cond4 = $199 & $198;
   $200 = $$4167$lcssa & 1;
   $201 = ($200|0)==(0);
   $or$cond172 = $201 & $or$cond4;
   $202 = $or$cond172&1;
   $$6 = (($$4167$lcssa) + ($202))|0;
   $$5 = $or$cond172 ? 0.0 : $$3161$lcssa;
   $203 = (+($$6>>>0));
   $204 = $$pre$phi204Z2D * $203;
   $205 = $$0154 + $204;
   $206 = $$5 * $$pre$phi204Z2D;
   $207 = $206 + $205;
   $208 = $207 - $$0154;
   $209 = $208 != 0.0;
   if (!($209)) {
    $210 = (___errno_location()|0);
    HEAP32[$210>>2] = 34;
   }
   $211 = (+_scalbnl($208,$182));
   $$0169 = $211;
  }
 } while(0);
 return (+$$0169);
}
function _decfloat($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0324 = 0, $$0324$be = 0, $$0327480 = 0, $$0328 = 0, $$0329 = 0, $$0331476 = 0, $$0335486 = 0, $$0336$lcssa = 0, $$0336453 = 0, $$0336454 = 0, $$0336455 = 0, $$0336503 = 0, $$0340$lcssa = 0, $$0340457 = 0, $$0340458 = 0, $$0340459 = 0, $$0340502 = 0, $$0345$lcssa540 = 0, $$0345484 = 0, $$0355 = 0.0;
 var $$0356 = 0.0, $$0360474 = 0.0, $$0367 = 0, $$0376 = 0, $$0376$ph = 0, $$0381$lcssa539 = 0, $$0381483 = 0, $$0390 = 0, $$0393 = 0, $$0398$lcssa = 0, $$0398463 = 0, $$0398464 = 0, $$0398465 = 0, $$0398499 = 0, $$1 = 0.0, $$10473 = 0, $$11 = 0, $$1330 = 0, $$1357 = 0.0, $$1361 = 0.0;
 var $$1377 = 0, $$1377$ph = 0, $$1377$ph$ph = 0, $$1391$lcssa = 0, $$1391501 = 0, $$2 = 0, $$2338 = 0, $$2342 = 0, $$2362 = 0.0, $$2366$v = 0, $$2369 = 0, $$2369$ph = 0, $$2369$ph579 = 0, $$2392 = 0, $$2395 = 0, $$2400 = 0, $$3$lcssa = 0, $$3339493 = 0, $$3343 = 0, $$3348$ph = 0;
 var $$3348$ph580 = 0, $$3359 = 0.0, $$3363 = 0.0, $$3370 = 0, $$3379 = 0, $$3384$ph = 0, $$3384$ph578 = 0, $$3396$lcssa = 0, $$3396500 = 0, $$3504 = 0, $$4344485 = 0, $$4380 = 0, $$4397 = 0, $$4475 = 0, $$5 = 0, $$5$in = 0, $$5350 = 0, $$5350$ph = 0, $$5350$ph$ph = 0, $$5372 = 0;
 var $$5386$ph = 0, $$5386$ph576 = 0, $$5386$ph576$ph = 0, $$6351478 = 0, $$6387477 = 0, $$6479 = 0, $$7374$ph$ph = 0, $$neg447 = 0, $$neg448 = 0, $$pre = 0, $$promoted = 0, $$sink$off0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0;
 var $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0.0, $313 = 0, $314 = 0, $315 = 0.0, $316 = 0.0, $317 = 0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0.0, $327 = 0.0, $328 = 0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0.0, $332 = 0.0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0.0, $344 = 0.0, $345 = 0, $346 = 0.0, $347 = 0.0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0, $356 = 0, $357 = 0.0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0.0;
 var $361 = 0.0, $362 = 0, $363 = 0, $364 = 0, $365 = 0.0, $366 = 0, $367 = 0.0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0.0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cond = 0, $exitcond = 0, $narrow = 0, $not$ = 0, $or$cond = 0, $or$cond3 = 0, $or$cond414 = 0, $or$cond416 = 0, $or$cond417 = 0, $or$cond418 = 0, $or$cond421 = 0, $or$cond559 = 0, $or$cond9 = 0, $spec$select = 0, $spec$select410 = 0, $spec$select411 = 0, $spec$select419 = 0, $spec$select420 = 0, $spec$select439 = 0;
 var $spec$select440 = 0, $spec$select441 = 0, $spec$select442 = 0, $spec$select443 = 0, $spec$store$select = 0, $storemerge446 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $6 = sp;
 $7 = (($3) + ($2))|0;
 $8 = (0 - ($7))|0;
 $9 = ((($0)) + 4|0);
 $10 = ((($0)) + 100|0);
 $$0324 = $1;$$0393 = 0;
 L1: while(1) {
  switch ($$0324|0) {
  case 46:  {
   label = 7;
   break L1;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$0390 = 0;$$2 = $$0324;$$2395 = $$0393;$375 = 0;$376 = 0;
   break L1;
  }
  }
  $11 = HEAP32[$9>>2]|0;
  $12 = HEAP32[$10>>2]|0;
  $13 = ($11>>>0)<($12>>>0);
  if ($13) {
   $14 = ((($11)) + 1|0);
   HEAP32[$9>>2] = $14;
   $15 = HEAP8[$11>>0]|0;
   $16 = $15&255;
   $$0324$be = $16;
  } else {
   $17 = (___shgetc($0)|0);
   $$0324$be = $17;
  }
  $$0324 = $$0324$be;$$0393 = 1;
 }
 if ((label|0) == 7) {
  $18 = HEAP32[$9>>2]|0;
  $19 = HEAP32[$10>>2]|0;
  $20 = ($18>>>0)<($19>>>0);
  if ($20) {
   $21 = ((($18)) + 1|0);
   HEAP32[$9>>2] = $21;
   $22 = HEAP8[$18>>0]|0;
   $23 = $22&255;
   $25 = $23;
  } else {
   $24 = (___shgetc($0)|0);
   $25 = $24;
  }
  $26 = ($25|0)==(48);
  if ($26) {
   $27 = 0;$28 = 0;
   while(1) {
    $29 = (_i64Add(($27|0),($28|0),-1,-1)|0);
    $30 = (getTempRet0() | 0);
    $31 = HEAP32[$9>>2]|0;
    $32 = HEAP32[$10>>2]|0;
    $33 = ($31>>>0)<($32>>>0);
    if ($33) {
     $34 = ((($31)) + 1|0);
     HEAP32[$9>>2] = $34;
     $35 = HEAP8[$31>>0]|0;
     $36 = $35&255;
     $38 = $36;
    } else {
     $37 = (___shgetc($0)|0);
     $38 = $37;
    }
    $39 = ($38|0)==(48);
    if ($39) {
     $27 = $29;$28 = $30;
    } else {
     $$0390 = 1;$$2 = $38;$$2395 = 1;$375 = $29;$376 = $30;
     break;
    }
   }
  } else {
   $$0390 = 1;$$2 = $25;$$2395 = $$0393;$375 = 0;$376 = 0;
  }
 }
 HEAP32[$6>>2] = 0;
 $40 = (($$2) + -48)|0;
 $41 = ($40>>>0)<(10);
 $42 = ($$2|0)==(46);
 $43 = $42 | $41;
 L22: do {
  if ($43) {
   $44 = ((($6)) + 496|0);
   $$0336503 = 0;$$0340502 = 0;$$0398499 = 0;$$1391501 = $$0390;$$3396500 = $$2395;$$3504 = $$2;$377 = $42;$378 = $40;$379 = $375;$380 = $376;$47 = 0;$48 = 0;
   L24: while(1) {
    do {
     if ($377) {
      $cond = ($$1391501|0)==(0);
      if ($cond) {
       $$2338 = $$0336503;$$2342 = $$0340502;$$2392 = 1;$$2400 = $$0398499;$$4397 = $$3396500;$381 = $47;$382 = $48;$383 = $47;$384 = $48;
      } else {
       break L24;
      }
     } else {
      $46 = ($$0340502|0)<(125);
      $49 = (_i64Add(($47|0),($48|0),1,0)|0);
      $50 = (getTempRet0() | 0);
      $51 = ($$3504|0)!=(48);
      if (!($46)) {
       if (!($51)) {
        $$2338 = $$0336503;$$2342 = $$0340502;$$2392 = $$1391501;$$2400 = $$0398499;$$4397 = $$3396500;$381 = $379;$382 = $380;$383 = $49;$384 = $50;
        break;
       }
       $61 = HEAP32[$44>>2]|0;
       $62 = $61 | 1;
       HEAP32[$44>>2] = $62;
       $$2338 = $$0336503;$$2342 = $$0340502;$$2392 = $$1391501;$$2400 = $$0398499;$$4397 = $$3396500;$381 = $379;$382 = $380;$383 = $49;$384 = $50;
       break;
      }
      $spec$select = $51 ? $49 : $$0398499;
      $52 = ($$0336503|0)==(0);
      $53 = (($6) + ($$0340502<<2)|0);
      if ($52) {
       $storemerge446 = $378;
      } else {
       $54 = HEAP32[$53>>2]|0;
       $55 = ($54*10)|0;
       $56 = (($$3504) + -48)|0;
       $57 = (($56) + ($55))|0;
       $storemerge446 = $57;
      }
      HEAP32[$53>>2] = $storemerge446;
      $58 = (($$0336503) + 1)|0;
      $59 = ($58|0)==(9);
      $60 = $59&1;
      $spec$select410 = (($$0340502) + ($60))|0;
      $spec$select411 = $59 ? 0 : $58;
      $$2338 = $spec$select411;$$2342 = $spec$select410;$$2392 = $$1391501;$$2400 = $spec$select;$$4397 = 1;$381 = $379;$382 = $380;$383 = $49;$384 = $50;
     }
    } while(0);
    $63 = HEAP32[$9>>2]|0;
    $64 = HEAP32[$10>>2]|0;
    $65 = ($63>>>0)<($64>>>0);
    if ($65) {
     $66 = ((($63)) + 1|0);
     HEAP32[$9>>2] = $66;
     $67 = HEAP8[$63>>0]|0;
     $68 = $67&255;
     $71 = $68;
    } else {
     $69 = (___shgetc($0)|0);
     $71 = $69;
    }
    $70 = (($71) + -48)|0;
    $72 = ($70>>>0)<(10);
    $73 = ($71|0)==(46);
    $74 = $73 | $72;
    if ($74) {
     $$0336503 = $$2338;$$0340502 = $$2342;$$0398499 = $$2400;$$1391501 = $$2392;$$3396500 = $$4397;$$3504 = $71;$377 = $73;$378 = $70;$379 = $381;$380 = $382;$47 = $383;$48 = $384;
    } else {
     $$0336$lcssa = $$2338;$$0340$lcssa = $$2342;$$0398$lcssa = $$2400;$$1391$lcssa = $$2392;$$3$lcssa = $71;$$3396$lcssa = $$4397;$76 = $381;$77 = $383;$79 = $382;$80 = $384;
     label = 31;
     break L22;
    }
   }
   $45 = ($$3396500|0)!=(0);
   $$0336455 = $$0336503;$$0340459 = $$0340502;$$0398465 = $$0398499;$385 = $47;$386 = $48;$387 = $379;$388 = $380;$389 = $45;
   label = 39;
  } else {
   $$0336$lcssa = 0;$$0340$lcssa = 0;$$0398$lcssa = 0;$$1391$lcssa = $$0390;$$3$lcssa = $$2;$$3396$lcssa = $$2395;$76 = $375;$77 = 0;$79 = $376;$80 = 0;
   label = 31;
  }
 } while(0);
 do {
  if ((label|0) == 31) {
   $75 = ($$1391$lcssa|0)==(0);
   $78 = $75 ? $77 : $76;
   $81 = $75 ? $80 : $79;
   $82 = ($$3396$lcssa|0)!=(0);
   $83 = $$3$lcssa | 32;
   $84 = ($83|0)==(101);
   $or$cond414 = $82 & $84;
   if (!($or$cond414)) {
    $99 = ($$3$lcssa|0)>(-1);
    if ($99) {
     $$0336455 = $$0336$lcssa;$$0340459 = $$0340$lcssa;$$0398465 = $$0398$lcssa;$385 = $77;$386 = $80;$387 = $78;$388 = $81;$389 = $82;
     label = 39;
     break;
    } else {
     $$0336454 = $$0336$lcssa;$$0340458 = $$0340$lcssa;$$0398464 = $$0398$lcssa;$390 = $77;$391 = $80;$392 = $82;$393 = $78;$394 = $81;
     label = 41;
     break;
    }
   }
   $85 = (_scanexp($0,$5)|0);
   $86 = (getTempRet0() | 0);
   $87 = ($85|0)==(0);
   $88 = ($86|0)==(-2147483648);
   $89 = $87 & $88;
   if ($89) {
    $90 = ($5|0)==(0);
    if ($90) {
     ___shlim($0,0);
     $$1 = 0.0;
     break;
    }
    $91 = HEAP32[$10>>2]|0;
    $92 = ($91|0)==(0|0);
    if ($92) {
     $95 = 0;$96 = 0;
    } else {
     $93 = HEAP32[$9>>2]|0;
     $94 = ((($93)) + -1|0);
     HEAP32[$9>>2] = $94;
     $95 = 0;$96 = 0;
    }
   } else {
    $95 = $85;$96 = $86;
   }
   $97 = (_i64Add(($95|0),($96|0),($78|0),($81|0))|0);
   $98 = (getTempRet0() | 0);
   $$0336453 = $$0336$lcssa;$$0340457 = $$0340$lcssa;$$0398463 = $$0398$lcssa;$109 = $97;$111 = $77;$112 = $98;$114 = $80;
   label = 43;
  }
 } while(0);
 if ((label|0) == 39) {
  $100 = HEAP32[$10>>2]|0;
  $101 = ($100|0)==(0|0);
  if ($101) {
   $$0336454 = $$0336455;$$0340458 = $$0340459;$$0398464 = $$0398465;$390 = $385;$391 = $386;$392 = $389;$393 = $387;$394 = $388;
   label = 41;
  } else {
   $102 = HEAP32[$9>>2]|0;
   $103 = ((($102)) + -1|0);
   HEAP32[$9>>2] = $103;
   if ($389) {
    $$0336453 = $$0336455;$$0340457 = $$0340459;$$0398463 = $$0398465;$109 = $387;$111 = $385;$112 = $388;$114 = $386;
    label = 43;
   } else {
    label = 42;
   }
  }
 }
 if ((label|0) == 41) {
  if ($392) {
   $$0336453 = $$0336454;$$0340457 = $$0340458;$$0398463 = $$0398464;$109 = $393;$111 = $390;$112 = $394;$114 = $391;
   label = 43;
  } else {
   label = 42;
  }
 }
 do {
  if ((label|0) == 42) {
   $104 = (___errno_location()|0);
   HEAP32[$104>>2] = 22;
   ___shlim($0,0);
   $$1 = 0.0;
  }
  else if ((label|0) == 43) {
   $105 = HEAP32[$6>>2]|0;
   $106 = ($105|0)==(0);
   if ($106) {
    $107 = (+($4|0));
    $108 = $107 * 0.0;
    $$1 = $108;
    break;
   }
   $110 = ($109|0)==($111|0);
   $113 = ($112|0)==($114|0);
   $115 = $110 & $113;
   $116 = ($114|0)<(0);
   $117 = ($111>>>0)<(10);
   $118 = ($114|0)==(0);
   $119 = $118 & $117;
   $120 = $116 | $119;
   $or$cond = $120 & $115;
   if ($or$cond) {
    $121 = ($2|0)>(30);
    $122 = $105 >>> $2;
    $123 = ($122|0)==(0);
    $or$cond416 = $121 | $123;
    if ($or$cond416) {
     $124 = (+($4|0));
     $125 = (+($105>>>0));
     $126 = $124 * $125;
     $$1 = $126;
     break;
    }
   }
   $127 = (($3|0) / -2)&-1;
   $128 = ($127|0)<(0);
   $129 = $128 << 31 >> 31;
   $130 = ($112|0)>($129|0);
   $131 = ($109>>>0)>($127>>>0);
   $132 = ($112|0)==($129|0);
   $133 = $132 & $131;
   $134 = $130 | $133;
   if ($134) {
    $135 = (___errno_location()|0);
    HEAP32[$135>>2] = 34;
    $136 = (+($4|0));
    $137 = $136 * 1.7976931348623157E+308;
    $138 = $137 * 1.7976931348623157E+308;
    $$1 = $138;
    break;
   }
   $139 = (($3) + -106)|0;
   $140 = ($139|0)<(0);
   $141 = $140 << 31 >> 31;
   $142 = ($112|0)<($141|0);
   $143 = ($109>>>0)<($139>>>0);
   $144 = ($112|0)==($141|0);
   $145 = $144 & $143;
   $146 = $142 | $145;
   if ($146) {
    $147 = (___errno_location()|0);
    HEAP32[$147>>2] = 34;
    $148 = (+($4|0));
    $149 = $148 * 2.2250738585072014E-308;
    $150 = $149 * 2.2250738585072014E-308;
    $$1 = $150;
    break;
   }
   $151 = ($$0336453|0)==(0);
   if ($151) {
    $$3343 = $$0340457;
   } else {
    $152 = ($$0336453|0)<(9);
    if ($152) {
     $153 = (($6) + ($$0340457<<2)|0);
     $$promoted = HEAP32[$153>>2]|0;
     $$3339493 = $$0336453;$155 = $$promoted;
     while(1) {
      $154 = ($155*10)|0;
      $156 = (($$3339493) + 1)|0;
      $157 = ($$3339493|0)<(8);
      if ($157) {
       $$3339493 = $156;$155 = $154;
      } else {
       break;
      }
     }
     HEAP32[$153>>2] = $154;
    }
    $158 = (($$0340457) + 1)|0;
    $$3343 = $158;
   }
   $159 = ($$0398463|0)<(9);
   if ($159) {
    $160 = ($$0398463|0)<=($109|0);
    $161 = ($109|0)<(18);
    $or$cond3 = $160 & $161;
    if ($or$cond3) {
     $162 = ($109|0)==(9);
     if ($162) {
      $163 = (+($4|0));
      $164 = HEAP32[$6>>2]|0;
      $165 = (+($164>>>0));
      $166 = $163 * $165;
      $$1 = $166;
      break;
     }
     $167 = ($109|0)<(9);
     if ($167) {
      $168 = (+($4|0));
      $169 = HEAP32[$6>>2]|0;
      $170 = (+($169>>>0));
      $171 = $168 * $170;
      $172 = (8 - ($109))|0;
      $173 = (16 + ($172<<2)|0);
      $174 = HEAP32[$173>>2]|0;
      $175 = (+($174|0));
      $176 = $171 / $175;
      $$1 = $176;
      break;
     }
     $$neg447 = Math_imul($109, -3)|0;
     $$neg448 = (($2) + 27)|0;
     $177 = (($$neg448) + ($$neg447))|0;
     $178 = ($177|0)>(30);
     $$pre = HEAP32[$6>>2]|0;
     $179 = $$pre >>> $177;
     $180 = ($179|0)==(0);
     $or$cond559 = $178 | $180;
     if ($or$cond559) {
      $181 = (+($4|0));
      $182 = (+($$pre>>>0));
      $183 = $181 * $182;
      $184 = (($109) + -10)|0;
      $185 = (16 + ($184<<2)|0);
      $186 = HEAP32[$185>>2]|0;
      $187 = (+($186|0));
      $188 = $183 * $187;
      $$1 = $188;
      break;
     }
    }
   }
   $189 = (($109|0) % 9)&-1;
   $190 = ($189|0)==(0);
   if ($190) {
    $$2369$ph = $$3343;$$3348$ph = 0;$$3384$ph = $109;
   } else {
    $191 = ($109|0)>(-1);
    $192 = (($189) + 9)|0;
    $193 = $191 ? $189 : $192;
    $194 = (8 - ($193))|0;
    $195 = (16 + ($194<<2)|0);
    $196 = HEAP32[$195>>2]|0;
    $197 = ($$3343|0)==(0);
    if ($197) {
     $$0345$lcssa540 = 0;$$0367 = 0;$$0381$lcssa539 = $109;
    } else {
     $198 = (1000000000 / ($196|0))&-1;
     $$0335486 = 0;$$0345484 = 0;$$0381483 = $109;$$4344485 = 0;
     while(1) {
      $199 = (($6) + ($$4344485<<2)|0);
      $200 = HEAP32[$199>>2]|0;
      $201 = (($200>>>0) / ($196>>>0))&-1;
      $202 = Math_imul($201, $196)|0;
      $203 = (($200) - ($202))|0;
      $204 = (($201) + ($$0335486))|0;
      HEAP32[$199>>2] = $204;
      $205 = Math_imul($198, $203)|0;
      $206 = ($$4344485|0)==($$0345484|0);
      $207 = ($204|0)==(0);
      $or$cond417 = $206 & $207;
      $208 = (($$0345484) + 1)|0;
      $209 = $208 & 127;
      $210 = (($$0381483) + -9)|0;
      $spec$select439 = $or$cond417 ? $210 : $$0381483;
      $spec$select440 = $or$cond417 ? $209 : $$0345484;
      $211 = (($$4344485) + 1)|0;
      $212 = ($211|0)==($$3343|0);
      if ($212) {
       break;
      } else {
       $$0335486 = $205;$$0345484 = $spec$select440;$$0381483 = $spec$select439;$$4344485 = $211;
      }
     }
     $213 = ($205|0)==(0);
     if ($213) {
      $$0345$lcssa540 = $spec$select440;$$0367 = $$3343;$$0381$lcssa539 = $spec$select439;
     } else {
      $214 = (($6) + ($$3343<<2)|0);
      $215 = (($$3343) + 1)|0;
      HEAP32[$214>>2] = $205;
      $$0345$lcssa540 = $spec$select440;$$0367 = $215;$$0381$lcssa539 = $spec$select439;
     }
    }
    $216 = (9 - ($193))|0;
    $217 = (($216) + ($$0381$lcssa539))|0;
    $$2369$ph = $$0367;$$3348$ph = $$0345$lcssa540;$$3384$ph = $217;
   }
   $$0376$ph = 0;$$2369$ph579 = $$2369$ph;$$3348$ph580 = $$3348$ph;$$3384$ph578 = $$3384$ph;
   L104: while(1) {
    $218 = ($$3384$ph578|0)<(18);
    $219 = ($$3384$ph578|0)==(18);
    $220 = (($6) + ($$3348$ph580<<2)|0);
    $$0376 = $$0376$ph;$$2369 = $$2369$ph579;
    while(1) {
     if (!($218)) {
      if (!($219)) {
       $$5386$ph = $$3384$ph578;
       break L104;
      }
      $221 = HEAP32[$220>>2]|0;
      $222 = ($221>>>0)<(9007199);
      if (!($222)) {
       $$5386$ph = 18;
       break L104;
      }
     }
     $223 = (($$2369) + 127)|0;
     $$0329 = 0;$$3370 = $$2369;$$5$in = $223;
     while(1) {
      $$5 = $$5$in & 127;
      $224 = (($6) + ($$5<<2)|0);
      $225 = HEAP32[$224>>2]|0;
      $226 = (_bitshift64Shl(($225|0),0,29)|0);
      $227 = (getTempRet0() | 0);
      $228 = (_i64Add(($226|0),($227|0),($$0329|0),0)|0);
      $229 = (getTempRet0() | 0);
      $230 = ($229>>>0)>(0);
      $231 = ($228>>>0)>(1000000000);
      $232 = ($229|0)==(0);
      $233 = $232 & $231;
      $234 = $230 | $233;
      if ($234) {
       $235 = (___udivdi3(($228|0),($229|0),1000000000,0)|0);
       $236 = (getTempRet0() | 0);
       $237 = (___muldi3(($235|0),($236|0),1000000000,0)|0);
       $238 = (getTempRet0() | 0);
       $239 = (_i64Subtract(($228|0),($229|0),($237|0),($238|0))|0);
       $240 = (getTempRet0() | 0);
       $$1330 = $235;$$sink$off0 = $239;
      } else {
       $$1330 = 0;$$sink$off0 = $228;
      }
      HEAP32[$224>>2] = $$sink$off0;
      $241 = (($$3370) + 127)|0;
      $242 = $241 & 127;
      $243 = ($$5|0)!=($242|0);
      $244 = ($$5|0)==($$3348$ph580|0);
      $or$cond418 = $243 | $244;
      $245 = ($$sink$off0|0)==(0);
      $spec$select419 = $245 ? $$5 : $$3370;
      $spec$select441 = $or$cond418 ? $$3370 : $spec$select419;
      $246 = (($$5) + -1)|0;
      if ($244) {
       break;
      } else {
       $$0329 = $$1330;$$3370 = $spec$select441;$$5$in = $246;
      }
     }
     $247 = (($$0376) + -29)|0;
     $248 = ($$1330|0)==(0);
     if ($248) {
      $$0376 = $247;$$2369 = $$3370;
     } else {
      break;
     }
    }
    $249 = (($$3384$ph578) + 9)|0;
    $250 = (($$3348$ph580) + 127)|0;
    $251 = $250 & 127;
    $252 = ($251|0)==($spec$select441|0);
    $253 = (($spec$select441) + 127)|0;
    $254 = $253 & 127;
    $255 = (($spec$select441) + 126)|0;
    $256 = $255 & 127;
    $257 = (($6) + ($256<<2)|0);
    if ($252) {
     $258 = (($6) + ($254<<2)|0);
     $259 = HEAP32[$258>>2]|0;
     $260 = HEAP32[$257>>2]|0;
     $261 = $260 | $259;
     HEAP32[$257>>2] = $261;
     $$5372 = $254;
    } else {
     $$5372 = $$3370;
    }
    $262 = (($6) + ($251<<2)|0);
    HEAP32[$262>>2] = $$1330;
    $$0376$ph = $247;$$2369$ph579 = $$5372;$$3348$ph580 = $251;$$3384$ph578 = $249;
   }
   $$1377$ph$ph = $$0376;$$5350$ph$ph = $$3348$ph580;$$5386$ph576$ph = $$5386$ph;$$7374$ph$ph = $$2369;
   L123: while(1) {
    $299 = (($$7374$ph$ph) + 1)|0;
    $296 = $299 & 127;
    $300 = (($$7374$ph$ph) + 127)|0;
    $301 = $300 & 127;
    $302 = (($6) + ($301<<2)|0);
    $$1377$ph = $$1377$ph$ph;$$5350$ph = $$5350$ph$ph;$$5386$ph576 = $$5386$ph576$ph;
    while(1) {
     $294 = ($$5386$ph576|0)==(18);
     $295 = ($$5386$ph576|0)>(27);
     $spec$select420 = $295 ? 9 : 1;
     $$1377 = $$1377$ph;$$5350 = $$5350$ph;
     while(1) {
      $$0331476 = 0;
      while(1) {
       $263 = (($$0331476) + ($$5350))|0;
       $264 = $263 & 127;
       $265 = ($264|0)==($$7374$ph$ph|0);
       if ($265) {
        label = 92;
        break;
       }
       $266 = (($6) + ($264<<2)|0);
       $267 = HEAP32[$266>>2]|0;
       $268 = (2064 + ($$0331476<<2)|0);
       $269 = HEAP32[$268>>2]|0;
       $270 = ($267>>>0)<($269>>>0);
       if ($270) {
        label = 92;
        break;
       }
       $271 = ($267>>>0)>($269>>>0);
       if ($271) {
        break;
       }
       $272 = (($$0331476) + 1)|0;
       $273 = ($272>>>0)<(2);
       if ($273) {
        $$0331476 = 1;
       } else {
        label = 92;
        break;
       }
      }
      if ((label|0) == 92) {
       label = 0;
       if ($294) {
        break L123;
       }
      }
      $274 = (($spec$select420) + ($$1377))|0;
      $275 = ($$5350|0)==($$7374$ph$ph|0);
      if ($275) {
       $$1377 = $274;$$5350 = $$7374$ph$ph;
      } else {
       break;
      }
     }
     $276 = 1 << $spec$select420;
     $277 = (($276) + -1)|0;
     $278 = 1000000000 >>> $spec$select420;
     $$0327480 = 0;$$6351478 = $$5350;$$6387477 = $$5386$ph576;$$6479 = $$5350;
     while(1) {
      $279 = (($6) + ($$6479<<2)|0);
      $280 = HEAP32[$279>>2]|0;
      $281 = $280 & $277;
      $282 = $280 >>> $spec$select420;
      $283 = (($282) + ($$0327480))|0;
      HEAP32[$279>>2] = $283;
      $284 = Math_imul($281, $278)|0;
      $285 = ($$6479|0)==($$6351478|0);
      $286 = ($283|0)==(0);
      $or$cond421 = $285 & $286;
      $287 = (($$6351478) + 1)|0;
      $288 = $287 & 127;
      $289 = (($$6387477) + -9)|0;
      $spec$select442 = $or$cond421 ? $289 : $$6387477;
      $spec$select443 = $or$cond421 ? $288 : $$6351478;
      $290 = (($$6479) + 1)|0;
      $291 = $290 & 127;
      $292 = ($291|0)==($$7374$ph$ph|0);
      if ($292) {
       break;
      } else {
       $$0327480 = $284;$$6351478 = $spec$select443;$$6387477 = $spec$select442;$$6479 = $291;
      }
     }
     $293 = ($284|0)==(0);
     if (!($293)) {
      $297 = ($296|0)==($spec$select443|0);
      if (!($297)) {
       break;
      }
      $303 = HEAP32[$302>>2]|0;
      $304 = $303 | 1;
      HEAP32[$302>>2] = $304;
     }
     $$1377$ph = $274;$$5350$ph = $spec$select443;$$5386$ph576 = $spec$select442;
    }
    $298 = (($6) + ($$7374$ph$ph<<2)|0);
    HEAP32[$298>>2] = $284;
    $$1377$ph$ph = $274;$$5350$ph$ph = $spec$select443;$$5386$ph576$ph = $spec$select442;$$7374$ph$ph = $296;
   }
   $$0360474 = 0.0;$$10473 = $$7374$ph$ph;$$4475 = 0;
   while(1) {
    $305 = (($$4475) + ($$5350))|0;
    $306 = $305 & 127;
    $307 = ($306|0)==($$10473|0);
    $308 = (($$10473) + 1)|0;
    $309 = $308 & 127;
    if ($307) {
     $310 = (($309) + -1)|0;
     $311 = (($6) + ($310<<2)|0);
     HEAP32[$311>>2] = 0;
     $$11 = $309;
    } else {
     $$11 = $$10473;
    }
    $312 = $$0360474 * 1.0E+9;
    $313 = (($6) + ($306<<2)|0);
    $314 = HEAP32[$313>>2]|0;
    $315 = (+($314>>>0));
    $316 = $312 + $315;
    $317 = (($$4475) + 1)|0;
    $exitcond = ($317|0)==(2);
    if ($exitcond) {
     break;
    } else {
     $$0360474 = $316;$$10473 = $$11;$$4475 = $317;
    }
   }
   $318 = (+($4|0));
   $319 = $316 * $318;
   $320 = (($$1377) + 53)|0;
   $321 = (($320) - ($3))|0;
   $322 = ($321|0)<($2|0);
   $323 = ($321|0)>(0);
   $spec$store$select = $323 ? $321 : 0;
   $$0328 = $322 ? $spec$store$select : $2;
   $324 = ($$0328|0)<(53);
   if ($324) {
    $325 = (105 - ($$0328))|0;
    $326 = (+_scalbn(1.0,$325));
    $327 = (+_copysignl($326,$319));
    $328 = (53 - ($$0328))|0;
    $329 = (+_scalbn(1.0,$328));
    $330 = (+_fmodl($319,$329));
    $331 = $319 - $330;
    $332 = $327 + $331;
    $$0355 = $327;$$0356 = $330;$$1361 = $332;
   } else {
    $$0355 = 0.0;$$0356 = 0.0;$$1361 = $319;
   }
   $333 = (($$5350) + 2)|0;
   $334 = $333 & 127;
   $335 = ($334|0)==($$11|0);
   if ($335) {
    $$3359 = $$0356;
   } else {
    $336 = (($6) + ($334<<2)|0);
    $337 = HEAP32[$336>>2]|0;
    $338 = ($337>>>0)<(500000000);
    do {
     if ($338) {
      $339 = ($337|0)==(0);
      if ($339) {
       $340 = (($$5350) + 3)|0;
       $341 = $340 & 127;
       $342 = ($341|0)==($$11|0);
       if ($342) {
        $$1357 = $$0356;
        break;
       }
      }
      $343 = $318 * 0.25;
      $344 = $343 + $$0356;
      $$1357 = $344;
     } else {
      $345 = ($337|0)==(500000000);
      if (!($345)) {
       $346 = $318 * 0.75;
       $347 = $346 + $$0356;
       $$1357 = $347;
       break;
      }
      $348 = (($$5350) + 3)|0;
      $349 = $348 & 127;
      $350 = ($349|0)==($$11|0);
      if ($350) {
       $351 = $318 * 0.5;
       $352 = $351 + $$0356;
       $$1357 = $352;
       break;
      } else {
       $353 = $318 * 0.75;
       $354 = $353 + $$0356;
       $$1357 = $354;
       break;
      }
     }
    } while(0);
    $355 = (53 - ($$0328))|0;
    $356 = ($355|0)>(1);
    if ($356) {
     $357 = (+_fmodl($$1357,1.0));
     $358 = $357 != 0.0;
     if ($358) {
      $$3359 = $$1357;
     } else {
      $359 = $$1357 + 1.0;
      $$3359 = $359;
     }
    } else {
     $$3359 = $$1357;
    }
   }
   $360 = $$1361 + $$3359;
   $361 = $360 - $$0355;
   $362 = $320 & 2147483647;
   $363 = (-2 - ($7))|0;
   $364 = ($362|0)>($363|0);
   do {
    if ($364) {
     $365 = (+Math_abs((+$361)));
     $366 = !($365 >= 9007199254740992.0);
     $367 = $361 * 0.5;
     $not$ = $366 ^ 1;
     $368 = $not$&1;
     $$3379 = (($$1377) + ($368))|0;
     $$2362 = $366 ? $361 : $367;
     $369 = (($$3379) + 50)|0;
     $370 = ($369|0)>($8|0);
     if (!($370)) {
      $371 = ($$0328|0)!=($321|0);
      $narrow = $371 | $366;
      $$2366$v = $322 & $narrow;
      $372 = $$3359 != 0.0;
      $or$cond9 = $372 & $$2366$v;
      if (!($or$cond9)) {
       $$3363 = $$2362;$$4380 = $$3379;
       break;
      }
     }
     $373 = (___errno_location()|0);
     HEAP32[$373>>2] = 34;
     $$3363 = $$2362;$$4380 = $$3379;
    } else {
     $$3363 = $361;$$4380 = $$1377;
    }
   } while(0);
   $374 = (+_scalbnl($$3363,$$4380));
   $$1 = $374;
  }
 } while(0);
 STACKTOP = sp;return (+$$1);
}
function _scanexp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04858 = 0, $$049 = 0, $$157 = 0, $$251 = 0, $$pr = 0, $$pre = 0, $$pre$phi69Z2D = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 100|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if ($6) {
  $7 = ((($3)) + 1|0);
  HEAP32[$2>>2] = $7;
  $8 = HEAP8[$3>>0]|0;
  $9 = $8&255;
  $11 = $9;
 } else {
  $10 = (___shgetc($0)|0);
  $11 = $10;
 }
 switch ($11|0) {
 case 43: case 45:  {
  $12 = ($11|0)==(45);
  $13 = $12&1;
  $14 = HEAP32[$2>>2]|0;
  $15 = HEAP32[$4>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$2>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $22 = $19;
  } else {
   $20 = (___shgetc($0)|0);
   $22 = $20;
  }
  $21 = (($22) + -48)|0;
  $23 = ($21>>>0)>(9);
  $24 = ($1|0)!=(0);
  $or$cond3 = $24 & $23;
  if ($or$cond3) {
   $25 = HEAP32[$4>>2]|0;
   $26 = ($25|0)==(0|0);
   if ($26) {
    $100 = 0;$99 = -2147483648;
   } else {
    $27 = HEAP32[$2>>2]|0;
    $28 = ((($27)) + -1|0);
    HEAP32[$2>>2] = $28;
    label = 14;
   }
  } else {
   $$0 = $13;$$049 = $22;$$pre$phi69Z2D = $21;
   label = 12;
  }
  break;
 }
 default: {
  $$pre = (($11) + -48)|0;
  $$0 = 0;$$049 = $11;$$pre$phi69Z2D = $$pre;
  label = 12;
 }
 }
 if ((label|0) == 12) {
  $29 = ($$pre$phi69Z2D>>>0)>(9);
  if ($29) {
   label = 14;
  } else {
   $$04858 = 0;$$157 = $$049;
   while(1) {
    $33 = ($$04858*10)|0;
    $34 = (($$157) + -48)|0;
    $35 = (($34) + ($33))|0;
    $36 = HEAP32[$2>>2]|0;
    $37 = HEAP32[$4>>2]|0;
    $38 = ($36>>>0)<($37>>>0);
    if ($38) {
     $39 = ((($36)) + 1|0);
     HEAP32[$2>>2] = $39;
     $40 = HEAP8[$36>>0]|0;
     $41 = $40&255;
     $44 = $41;
    } else {
     $42 = (___shgetc($0)|0);
     $44 = $42;
    }
    $43 = (($44) + -48)|0;
    $45 = ($43>>>0)<(10);
    $46 = ($35|0)<(214748364);
    $47 = $45 & $46;
    if ($47) {
     $$04858 = $35;$$157 = $44;
    } else {
     break;
    }
   }
   $48 = ($35|0)<(0);
   $49 = $48 << 31 >> 31;
   $50 = ($43>>>0)<(10);
   if ($50) {
    $$251 = $44;$51 = $35;$52 = $49;
    while(1) {
     $53 = (___muldi3(($51|0),($52|0),10,0)|0);
     $54 = (getTempRet0() | 0);
     $55 = ($$251|0)<(0);
     $56 = $55 << 31 >> 31;
     $57 = (_i64Add(($$251|0),($56|0),-48,-1)|0);
     $58 = (getTempRet0() | 0);
     $59 = (_i64Add(($57|0),($58|0),($53|0),($54|0))|0);
     $60 = (getTempRet0() | 0);
     $61 = HEAP32[$2>>2]|0;
     $62 = HEAP32[$4>>2]|0;
     $63 = ($61>>>0)<($62>>>0);
     if ($63) {
      $64 = ((($61)) + 1|0);
      HEAP32[$2>>2] = $64;
      $65 = HEAP8[$61>>0]|0;
      $66 = $65&255;
      $69 = $66;
     } else {
      $67 = (___shgetc($0)|0);
      $69 = $67;
     }
     $68 = (($69) + -48)|0;
     $70 = ($68>>>0)<(10);
     $71 = ($60|0)<(21474836);
     $72 = ($59>>>0)<(2061584302);
     $73 = ($60|0)==(21474836);
     $74 = $73 & $72;
     $75 = $71 | $74;
     $76 = $70 & $75;
     if ($76) {
      $$251 = $69;$51 = $59;$52 = $60;
     } else {
      break;
     }
    }
    $77 = ($68>>>0)<(10);
    if ($77) {
     while(1) {
      $78 = HEAP32[$2>>2]|0;
      $79 = HEAP32[$4>>2]|0;
      $80 = ($78>>>0)<($79>>>0);
      if ($80) {
       $81 = ((($78)) + 1|0);
       HEAP32[$2>>2] = $81;
       $82 = HEAP8[$78>>0]|0;
       $83 = $82&255;
       $86 = $83;
      } else {
       $84 = (___shgetc($0)|0);
       $86 = $84;
      }
      $85 = (($86) + -48)|0;
      $87 = ($85>>>0)<(10);
      if (!($87)) {
       $93 = $59;$94 = $60;
       break;
      }
     }
    } else {
     $93 = $59;$94 = $60;
    }
   } else {
    $93 = $35;$94 = $49;
   }
   $88 = HEAP32[$4>>2]|0;
   $89 = ($88|0)==(0|0);
   if (!($89)) {
    $90 = HEAP32[$2>>2]|0;
    $91 = ((($90)) + -1|0);
    HEAP32[$2>>2] = $91;
   }
   $92 = ($$0|0)==(0);
   $95 = (_i64Subtract(0,0,($93|0),($94|0))|0);
   $96 = (getTempRet0() | 0);
   $97 = $92 ? $93 : $95;
   $98 = $92 ? $94 : $96;
   $100 = $97;$99 = $98;
  }
 }
 if ((label|0) == 14) {
  $$pr = HEAP32[$4>>2]|0;
  $30 = ($$pr|0)==(0|0);
  if ($30) {
   $100 = 0;$99 = -2147483648;
  } else {
   $31 = HEAP32[$2>>2]|0;
   $32 = ((($31)) + -1|0);
   HEAP32[$2>>2] = $32;
   $100 = 0;$99 = -2147483648;
  }
 }
 setTempRet0(($99) | 0);
 return ($100|0);
}
function _scalbn($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$020 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0, $spec$select = 0, $spec$select21 = 0.0, $spec$select22 = 0, $spec$select23 = 0.0, $spec$store$select = 0, $spec$store$select1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(1023);
 if ($2) {
  $3 = $0 * 8.9884656743115795E+307;
  $4 = (($1) + -1023)|0;
  $5 = ($1|0)>(2046);
  $6 = $3 * 8.9884656743115795E+307;
  $7 = (($1) + -2046)|0;
  $8 = ($7|0)<(1023);
  $spec$store$select = $8 ? $7 : 1023;
  $spec$select = $5 ? $spec$store$select : $4;
  $spec$select21 = $5 ? $6 : $3;
  $$0 = $spec$select21;$$020 = $spec$select;
 } else {
  $9 = ($1|0)<(-1022);
  if ($9) {
   $10 = $0 * 2.2250738585072014E-308;
   $11 = (($1) + 1022)|0;
   $12 = ($1|0)<(-2044);
   $13 = $10 * 2.2250738585072014E-308;
   $14 = (($1) + 2044)|0;
   $15 = ($14|0)>(-1022);
   $spec$store$select1 = $15 ? $14 : -1022;
   $spec$select22 = $12 ? $spec$store$select1 : $11;
   $spec$select23 = $12 ? $13 : $10;
   $$0 = $spec$select23;$$020 = $spec$select22;
  } else {
   $$0 = $0;$$020 = $1;
  }
 }
 $16 = (($$020) + 1023)|0;
 $17 = (_bitshift64Shl(($16|0),0,52)|0);
 $18 = (getTempRet0() | 0);
 HEAP32[tempDoublePtr>>2] = $17;HEAP32[tempDoublePtr+4>>2] = $18;$19 = +HEAPF64[tempDoublePtr>>3];
 $20 = $$0 * $19;
 return (+$20);
}
function _copysignl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_copysign($0,$1));
 return (+$2);
}
function _fmodl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_fmod($0,$1));
 return (+$2);
}
function _scalbnl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_scalbn($0,$1));
 return (+$2);
}
function _fmod($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$070 = 0.0, $$071$lcssa = 0, $$07194 = 0, $$073$lcssa = 0, $$073100 = 0, $$172 = 0, $$174 = 0, $$275$lcssa = 0, $$27585 = 0, $$376$lcssa = 0, $$37682 = 0, $$lcssa = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $spec$select = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $7 = (getTempRet0() | 0);
 $8 = $6 & 2047;
 $9 = (_bitshift64Lshr(($4|0),($5|0),52)|0);
 $10 = (getTempRet0() | 0);
 $11 = $9 & 2047;
 $12 = $3 & -2147483648;
 $13 = (_bitshift64Shl(($4|0),($5|0),1)|0);
 $14 = (getTempRet0() | 0);
 $15 = ($13|0)==(0);
 $16 = ($14|0)==(0);
 $17 = $15 & $16;
 L1: do {
  if ($17) {
   label = 3;
  } else {
   $18 = (___DOUBLE_BITS_273($1)|0);
   $19 = (getTempRet0() | 0);
   $20 = $19 & 2147483647;
   $21 = ($20>>>0)>(2146435072);
   $22 = ($18>>>0)>(0);
   $23 = ($20|0)==(2146435072);
   $24 = $23 & $22;
   $25 = $21 | $24;
   $26 = ($8|0)==(2047);
   $or$cond = $26 | $25;
   if ($or$cond) {
    label = 3;
   } else {
    $29 = (_bitshift64Shl(($2|0),($3|0),1)|0);
    $30 = (getTempRet0() | 0);
    $31 = ($30>>>0)>($14>>>0);
    $32 = ($29>>>0)>($13>>>0);
    $33 = ($30|0)==($14|0);
    $34 = $33 & $32;
    $35 = $31 | $34;
    if (!($35)) {
     $36 = ($29|0)==($13|0);
     $37 = ($30|0)==($14|0);
     $38 = $36 & $37;
     $39 = $0 * 0.0;
     $spec$select = $38 ? $39 : $0;
     return (+$spec$select);
    }
    $40 = ($8|0)==(0);
    if ($40) {
     $41 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $42 = (getTempRet0() | 0);
     $43 = ($42|0)>(-1);
     $44 = ($41>>>0)>(4294967295);
     $45 = ($42|0)==(-1);
     $46 = $45 & $44;
     $47 = $43 | $46;
     if ($47) {
      $$073100 = 0;$49 = $41;$50 = $42;
      while(1) {
       $48 = (($$073100) + -1)|0;
       $51 = (_bitshift64Shl(($49|0),($50|0),1)|0);
       $52 = (getTempRet0() | 0);
       $53 = ($52|0)>(-1);
       $54 = ($51>>>0)>(4294967295);
       $55 = ($52|0)==(-1);
       $56 = $55 & $54;
       $57 = $53 | $56;
       if ($57) {
        $$073100 = $48;$49 = $51;$50 = $52;
       } else {
        $$073$lcssa = $48;
        break;
       }
      }
     } else {
      $$073$lcssa = 0;
     }
     $58 = (1 - ($$073$lcssa))|0;
     $59 = (_bitshift64Shl(($2|0),($3|0),($58|0))|0);
     $60 = (getTempRet0() | 0);
     $$174 = $$073$lcssa;$87 = $59;$88 = $60;
    } else {
     $61 = $3 & 1048575;
     $62 = $61 | 1048576;
     $$174 = $8;$87 = $2;$88 = $62;
    }
    $63 = ($11|0)==(0);
    if ($63) {
     $64 = (_bitshift64Shl(($4|0),($5|0),12)|0);
     $65 = (getTempRet0() | 0);
     $66 = ($65|0)>(-1);
     $67 = ($64>>>0)>(4294967295);
     $68 = ($65|0)==(-1);
     $69 = $68 & $67;
     $70 = $66 | $69;
     if ($70) {
      $$07194 = 0;$72 = $64;$73 = $65;
      while(1) {
       $71 = (($$07194) + -1)|0;
       $74 = (_bitshift64Shl(($72|0),($73|0),1)|0);
       $75 = (getTempRet0() | 0);
       $76 = ($75|0)>(-1);
       $77 = ($74>>>0)>(4294967295);
       $78 = ($75|0)==(-1);
       $79 = $78 & $77;
       $80 = $76 | $79;
       if ($80) {
        $$07194 = $71;$72 = $74;$73 = $75;
       } else {
        $$071$lcssa = $71;
        break;
       }
      }
     } else {
      $$071$lcssa = 0;
     }
     $81 = (1 - ($$071$lcssa))|0;
     $82 = (_bitshift64Shl(($4|0),($5|0),($81|0))|0);
     $83 = (getTempRet0() | 0);
     $$172 = $$071$lcssa;$89 = $82;$90 = $83;
    } else {
     $84 = $5 & 1048575;
     $85 = $84 | 1048576;
     $$172 = $11;$89 = $4;$90 = $85;
    }
    $86 = ($$174|0)>($$172|0);
    $91 = (_i64Subtract(($87|0),($88|0),($89|0),($90|0))|0);
    $92 = (getTempRet0() | 0);
    $93 = ($92|0)>(-1);
    $94 = ($91>>>0)>(4294967295);
    $95 = ($92|0)==(-1);
    $96 = $95 & $94;
    $97 = $93 | $96;
    L25: do {
     if ($86) {
      $$27585 = $$174;$100 = $92;$158 = $97;$159 = $87;$160 = $88;$98 = $91;
      while(1) {
       if ($158) {
        $99 = ($98|0)==(0);
        $101 = ($100|0)==(0);
        $102 = $99 & $101;
        if ($102) {
         break;
        } else {
         $104 = $98;$105 = $100;
        }
       } else {
        $104 = $159;$105 = $160;
       }
       $106 = (_bitshift64Shl(($104|0),($105|0),1)|0);
       $107 = (getTempRet0() | 0);
       $108 = (($$27585) + -1)|0;
       $109 = ($108|0)>($$172|0);
       $110 = (_i64Subtract(($106|0),($107|0),($89|0),($90|0))|0);
       $111 = (getTempRet0() | 0);
       $112 = ($111|0)>(-1);
       $113 = ($110>>>0)>(4294967295);
       $114 = ($111|0)==(-1);
       $115 = $114 & $113;
       $116 = $112 | $115;
       if ($109) {
        $$27585 = $108;$100 = $111;$158 = $116;$159 = $106;$160 = $107;$98 = $110;
       } else {
        $$275$lcssa = $108;$$lcssa = $116;$117 = $110;$119 = $111;$156 = $106;$157 = $107;
        break L25;
       }
      }
      $103 = $0 * 0.0;
      $$070 = $103;
      break L1;
     } else {
      $$275$lcssa = $$174;$$lcssa = $97;$117 = $91;$119 = $92;$156 = $87;$157 = $88;
     }
    } while(0);
    if ($$lcssa) {
     $118 = ($117|0)==(0);
     $120 = ($119|0)==(0);
     $121 = $118 & $120;
     if ($121) {
      $122 = $0 * 0.0;
      $$070 = $122;
      break;
     } else {
      $123 = $119;$125 = $117;
     }
    } else {
     $123 = $157;$125 = $156;
    }
    $124 = ($123>>>0)<(1048576);
    $126 = ($125>>>0)<(0);
    $127 = ($123|0)==(1048576);
    $128 = $127 & $126;
    $129 = $124 | $128;
    if ($129) {
     $$37682 = $$275$lcssa;$130 = $125;$131 = $123;
     while(1) {
      $132 = (_bitshift64Shl(($130|0),($131|0),1)|0);
      $133 = (getTempRet0() | 0);
      $134 = (($$37682) + -1)|0;
      $135 = ($133>>>0)<(1048576);
      $136 = ($132>>>0)<(0);
      $137 = ($133|0)==(1048576);
      $138 = $137 & $136;
      $139 = $135 | $138;
      if ($139) {
       $$37682 = $134;$130 = $132;$131 = $133;
      } else {
       $$376$lcssa = $134;$141 = $132;$142 = $133;
       break;
      }
     }
    } else {
     $$376$lcssa = $$275$lcssa;$141 = $125;$142 = $123;
    }
    $140 = ($$376$lcssa|0)>(0);
    if ($140) {
     $143 = (_i64Add(($141|0),($142|0),0,-1048576)|0);
     $144 = (getTempRet0() | 0);
     $145 = (_bitshift64Shl(($$376$lcssa|0),0,52)|0);
     $146 = (getTempRet0() | 0);
     $147 = $143 | $145;
     $148 = $144 | $146;
     $153 = $148;$155 = $147;
    } else {
     $149 = (1 - ($$376$lcssa))|0;
     $150 = (_bitshift64Lshr(($141|0),($142|0),($149|0))|0);
     $151 = (getTempRet0() | 0);
     $153 = $151;$155 = $150;
    }
    $152 = $153 | $12;
    HEAP32[tempDoublePtr>>2] = $155;HEAP32[tempDoublePtr+4>>2] = $152;$154 = +HEAPF64[tempDoublePtr>>3];
    $$070 = $154;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $27 = $0 * $1;
  $28 = $27 / $27;
  $$070 = $28;
 }
 return (+$$070);
}
function ___DOUBLE_BITS_273($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 setTempRet0(($2) | 0);
 return ($1|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$014 = 0, $$015$lcssa = 0, $$01518 = 0, $$1$lcssa = 0, $$pn = 0, $$pn29 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 5;
  } else {
   $$01518 = $0;$22 = $1;
   while(1) {
    $4 = HEAP8[$$01518>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$pn = $22;
     break L1;
    }
    $6 = ((($$01518)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 5;
     break;
    } else {
     $$01518 = $6;$22 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn29 = $$0;
   while(1) {
    $19 = ((($$pn29)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn29 = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$pn = $21;
 }
 $$014 = (($$pn) - ($1))|0;
 return ($$014|0);
}
function _strchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___strchrnul($0,$1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $1&255;
 $5 = ($3<<24>>24)==($4<<24>>24);
 $6 = $5 ? $2 : 0;
 return ($6|0);
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $4 = (_strlen($0)|0);
   $5 = (($0) + ($4)|0);
   $$0 = $5;
  } else {
   $6 = $0;
   $7 = $6 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$030$lcssa = $0;
   } else {
    $9 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($9<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _lround($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_round((+$0)));
 $2 = (~~(($1)));
 return ($2|0);
}
function ___unlist_locked_file($0) {
 $0 = $0|0;
 var $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = ((($0)) + 116|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  $7 = $5;
  $$pre = ((($0)) + 112|0);
  if (!($6)) {
   $8 = HEAP32[$$pre>>2]|0;
   $9 = ((($5)) + 112|0);
   HEAP32[$9>>2] = $8;
  }
  $10 = HEAP32[$$pre>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   $13 = (___pthread_self_599()|0);
   $14 = ((($13)) + 232|0);
   $$sink = $14;
  } else {
   $12 = ((($10)) + 116|0);
   $$sink = $12;
  }
  HEAP32[$$sink>>2] = $7;
 }
 return;
}
function ___pthread_self_599() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((6136|0));
 return (6144|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((6136|0));
 return;
}
function _fclose($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $29 = $4;
 } else {
  $29 = 0;
 }
 ___unlist_locked_file($0);
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $8 = (___ofl_lock()|0);
  $9 = ((($0)) + 52|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  $12 = $10;
  $$pre = ((($0)) + 56|0);
  if (!($11)) {
   $13 = HEAP32[$$pre>>2]|0;
   $14 = ((($10)) + 56|0);
   HEAP32[$14>>2] = $13;
  }
  $15 = HEAP32[$$pre>>2]|0;
  $16 = ($15|0)==(0|0);
  $17 = $15;
  if (!($16)) {
   $18 = ((($15)) + 52|0);
   HEAP32[$18>>2] = $12;
  }
  $19 = HEAP32[$8>>2]|0;
  $20 = ($19|0)==($0|0);
  if ($20) {
   HEAP32[$8>>2] = $17;
  }
  ___ofl_unlock();
 }
 $21 = (_fflush($0)|0);
 $22 = ((($0)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (FUNCTION_TABLE_ii[$23 & 7]($0)|0);
 $25 = $24 | $21;
 $26 = ((($0)) + 92|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if (!($28)) {
  _free($27);
 }
 if ($7) {
  $30 = ($29|0)==(0);
  if (!($30)) {
   ___unlockfile($0);
  }
 } else {
  _free($0);
 }
 return ($25|0);
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[454]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[454]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $25 = $17;
     } else {
      $25 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $26 = ($25|0)==(0);
     if (!($26)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 15]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = (($15) - ($16))|0;
   $18 = ((($0)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   (FUNCTION_TABLE_iiii[$19 & 15]($0,$17,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _strtod($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_strtox($0,$1,1));
 return (+$2);
}
function _strtox($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $3 = sp;
 dest=$3; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = $0;
 $5 = ((($3)) + 8|0);
 HEAP32[$5>>2] = (-1);
 $6 = ((($3)) + 44|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($3)) + 76|0);
 HEAP32[$7>>2] = -1;
 ___shlim($3,0);
 $8 = (+___floatscan($3,$2,1));
 $9 = ((($3)) + 108|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$4>>2]|0;
 $12 = HEAP32[$5>>2]|0;
 $13 = (($11) - ($12))|0;
 $14 = (($13) + ($10))|0;
 $15 = ($1|0)==(0|0);
 if (!($15)) {
  $16 = ($14|0)==(0);
  $17 = (($0) + ($14)|0);
  $18 = $16 ? $0 : $17;
  HEAP32[$1>>2] = $18;
 }
 STACKTOP = sp;return (+$8);
}
function runPostSets() {
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (setTempRet0(((($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0) | 0), 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = (getTempRet0() | 0);
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (setTempRet0((((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0) | 0), 0 | $1$0 & -1) | 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _llvm_cttz_i32(x) { // Note: Currently doesn't take isZeroUndef()
    x = x | 0;
    return (x ? (31 - (Math_clz32((x ^ (x - 1))) | 0) | 0) : 32) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = (getTempRet0() | 0);
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = (getTempRet0() | 0);
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = (getTempRet0() | 0);
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (setTempRet0((HEAP32[$rem + 4 >> 2] | 0) | 0), HEAP32[$rem >> 2] | 0) | 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0((high >> bits) | 0);
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    setTempRet0(((high|0) < 0 ? -1 : 0) | 0);
    return (high >> (bits - 32))|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0((high >>> bits) | 0);
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    setTempRet0((0) | 0);
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0(((high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))) | 0);
      return low << bits;
    }
    setTempRet0((low << (bits - 32)) | 0);
    return 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _round(d) {
    d = +d;
    return d >= +0 ? +Math_floor(d + +0.5) : +Math_ceil(d - +0.5);
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        ___setErrNo(12);
        return -1;
      }
    }
    return oldDynamicTop|0;
}

  
function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&7](a1|0)|0;
}


function jsCall_ii_0(a1) {
  a1=a1|0;
  return jsCall_ii(0,a1|0)|0;
}



function jsCall_ii_1(a1) {
  a1=a1|0;
  return jsCall_ii(1,a1|0)|0;
}



function jsCall_ii_2(a1) {
  a1=a1|0;
  return jsCall_ii(2,a1|0)|0;
}



function jsCall_ii_3(a1) {
  a1=a1|0;
  return jsCall_ii(3,a1|0)|0;
}



function jsCall_ii_4(a1) {
  a1=a1|0;
  return jsCall_ii(4,a1|0)|0;
}



function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&7](a1|0,a2|0)|0;
}


function jsCall_iii_0(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(0,a1|0,a2|0)|0;
}



function jsCall_iii_1(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(1,a1|0,a2|0)|0;
}



function jsCall_iii_2(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(2,a1|0,a2|0)|0;
}



function jsCall_iii_3(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(3,a1|0,a2|0)|0;
}



function jsCall_iii_4(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(4,a1|0,a2|0)|0;
}



function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&15](a1|0,a2|0,a3|0)|0;
}


function jsCall_iiii_0(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(0,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_1(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(1,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_2(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(2,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_3(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(3,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_4(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(4,a1|0,a2|0,a3|0)|0;
}



function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&7](a1|0,a2|0,a3|0,a4|0)|0;
}


function jsCall_iiiii_0(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return jsCall_iiiii(0,a1|0,a2|0,a3|0,a4|0)|0;
}



function jsCall_iiiii_1(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return jsCall_iiiii(1,a1|0,a2|0,a3|0,a4|0)|0;
}



function jsCall_iiiii_2(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return jsCall_iiiii(2,a1|0,a2|0,a3|0,a4|0)|0;
}



function jsCall_iiiii_3(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return jsCall_iiiii(3,a1|0,a2|0,a3|0,a4|0)|0;
}



function jsCall_iiiii_4(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return jsCall_iiiii(4,a1|0,a2|0,a3|0,a4|0)|0;
}



function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iiiiiii[index&7](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}


function jsCall_iiiiiii_0(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return jsCall_iiiiiii(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}



function jsCall_iiiiiii_1(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return jsCall_iiiiiii(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}



function jsCall_iiiiiii_2(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return jsCall_iiiiiii(2,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}



function jsCall_iiiiiii_3(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return jsCall_iiiiiii(3,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}



function jsCall_iiiiiii_4(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return jsCall_iiiiiii(4,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}



function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&7](a1|0,a2|0,a3|0);
}


function jsCall_viii_0(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  jsCall_viii(0,a1|0,a2|0,a3|0);
}



function jsCall_viii_1(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  jsCall_viii(1,a1|0,a2|0,a3|0);
}



function jsCall_viii_2(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  jsCall_viii(2,a1|0,a2|0,a3|0);
}



function jsCall_viii_3(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  jsCall_viii(3,a1|0,a2|0,a3|0);
}



function jsCall_viii_4(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  jsCall_viii(4,a1|0,a2|0,a3|0);
}



function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&7](a1|0,a2|0,a3|0,a4|0);
}


function jsCall_viiii_0(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(0,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_1(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(1,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_2(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(2,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_3(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(3,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_4(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(4,a1|0,a2|0,a3|0,a4|0);
}



function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&15](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function jsCall_viiiiii_0(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_1(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_2(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(2,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_3(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(3,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_4(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(4,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  FUNCTION_TABLE_viiiiiii[index&7](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}


function jsCall_viiiiiii_0(a1,a2,a3,a4,a5,a6,a7) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  jsCall_viiiiiii(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}



function jsCall_viiiiiii_1(a1,a2,a3,a4,a5,a6,a7) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  jsCall_viiiiiii(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}



function jsCall_viiiiiii_2(a1,a2,a3,a4,a5,a6,a7) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  jsCall_viiiiiii(2,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}



function jsCall_viiiiiii_3(a1,a2,a3,a4,a5,a6,a7) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  jsCall_viiiiiii(3,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}



function jsCall_viiiiiii_4(a1,a2,a3,a4,a5,a6,a7) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  jsCall_viiiiiii(4,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}


function b0(p0) {
 p0 = p0|0; abort(0);return 0;
}
function b1(p0,p1) {
 p0 = p0|0;p1 = p1|0; abort(1);return 0;
}
function b2(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(2);return 0;
}
function b3(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(3);return 0;
}
function b4(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; abort(4);return 0;
}
function b5(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(5);
}
function b6(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(6);
}
function b7(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; abort(7);
}
function b8(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; abort(8);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ii = [b0,jsCall_ii_0,jsCall_ii_1,jsCall_ii_2,jsCall_ii_3,jsCall_ii_4,___stdio_close,b0];
var FUNCTION_TABLE_iii = [b1,jsCall_iii_0,jsCall_iii_1,jsCall_iii_2,jsCall_iii_3,jsCall_iii_4,_seekpoint_compare_,b1];
var FUNCTION_TABLE_iiii = [b2,jsCall_iiii_0,jsCall_iiii_1,jsCall_iiii_2,jsCall_iiii_3,jsCall_iiii_4,___stdio_read,___stdio_seek,___stdout_write,_read_callback_,_FLAC__fixed_compute_best_predictor,_FLAC__fixed_compute_best_predictor_wide,___stdio_write,b2,b2,b2];
var FUNCTION_TABLE_iiiii = [b3,jsCall_iiiii_0,jsCall_iiiii_1,jsCall_iiiii_2,jsCall_iiiii_3,jsCall_iiiii_4,_verify_read_callback_,_verify_write_callback_];
var FUNCTION_TABLE_iiiiiii = [b4,jsCall_iiiiiii_0,jsCall_iiiiiii_1,jsCall_iiiiiii_2,jsCall_iiiiiii_3,jsCall_iiiiiii_4,b4,b4];
var FUNCTION_TABLE_viii = [b5,jsCall_viii_0,jsCall_viii_1,jsCall_viii_2,jsCall_viii_3,jsCall_viii_4,_verify_metadata_callback_,_verify_error_callback_];
var FUNCTION_TABLE_viiii = [b6,jsCall_viiii_0,jsCall_viiii_1,jsCall_viiii_2,jsCall_viiii_3,jsCall_viiii_4,_FLAC__lpc_compute_autocorrelation,b6];
var FUNCTION_TABLE_viiiiii = [b7,jsCall_viiiiii_0,jsCall_viiiiii_1,jsCall_viiiiii_2,jsCall_viiiiii_3,jsCall_viiiiii_4,_FLAC__lpc_restore_signal,_FLAC__lpc_restore_signal_wide,_FLAC__lpc_compute_residual_from_qlp_coefficients,_FLAC__lpc_compute_residual_from_qlp_coefficients_wide,b7,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_viiiiiii = [b8,jsCall_viiiiiii_0,jsCall_viiiiiii_1,jsCall_viiiiiii_2,jsCall_viiiiiii_3,jsCall_viiiiiii_4,_precompute_partition_info_sums_,b8];

  return { _FLAC__stream_decoder_delete: _FLAC__stream_decoder_delete, _FLAC__stream_decoder_finish: _FLAC__stream_decoder_finish, _FLAC__stream_decoder_get_md5_checking: _FLAC__stream_decoder_get_md5_checking, _FLAC__stream_decoder_get_state: _FLAC__stream_decoder_get_state, _FLAC__stream_decoder_init_stream: _FLAC__stream_decoder_init_stream, _FLAC__stream_decoder_new: _FLAC__stream_decoder_new, _FLAC__stream_decoder_process_single: _FLAC__stream_decoder_process_single, _FLAC__stream_decoder_process_until_end_of_metadata: _FLAC__stream_decoder_process_until_end_of_metadata, _FLAC__stream_decoder_process_until_end_of_stream: _FLAC__stream_decoder_process_until_end_of_stream, _FLAC__stream_decoder_reset: _FLAC__stream_decoder_reset, _FLAC__stream_decoder_set_md5_checking: _FLAC__stream_decoder_set_md5_checking, _FLAC__stream_encoder_delete: _FLAC__stream_encoder_delete, _FLAC__stream_encoder_finish: _FLAC__stream_encoder_finish, _FLAC__stream_encoder_get_state: _FLAC__stream_encoder_get_state, _FLAC__stream_encoder_init_stream: _FLAC__stream_encoder_init_stream, _FLAC__stream_encoder_new: _FLAC__stream_encoder_new, _FLAC__stream_encoder_process_interleaved: _FLAC__stream_encoder_process_interleaved, _FLAC__stream_encoder_set_bits_per_sample: _FLAC__stream_encoder_set_bits_per_sample, _FLAC__stream_encoder_set_blocksize: _FLAC__stream_encoder_set_blocksize, _FLAC__stream_encoder_set_channels: _FLAC__stream_encoder_set_channels, _FLAC__stream_encoder_set_compression_level: _FLAC__stream_encoder_set_compression_level, _FLAC__stream_encoder_set_sample_rate: _FLAC__stream_encoder_set_sample_rate, _FLAC__stream_encoder_set_total_samples_estimate: _FLAC__stream_encoder_set_total_samples_estimate, _FLAC__stream_encoder_set_verify: _FLAC__stream_encoder_set_verify, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, _bitshift64Ashr: _bitshift64Ashr, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _emscripten_replace_memory: _emscripten_replace_memory, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _llvm_bswap_i32: _llvm_bswap_i32, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _round: _round, _sbrk: _sbrk, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viiiiiii: dynCall_viiiiiii, establishStackSpace: establishStackSpace, runPostSets: runPostSets, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var _FLAC__stream_decoder_delete = Module["_FLAC__stream_decoder_delete"] = asm["_FLAC__stream_decoder_delete"];
var _FLAC__stream_decoder_finish = Module["_FLAC__stream_decoder_finish"] = asm["_FLAC__stream_decoder_finish"];
var _FLAC__stream_decoder_get_md5_checking = Module["_FLAC__stream_decoder_get_md5_checking"] = asm["_FLAC__stream_decoder_get_md5_checking"];
var _FLAC__stream_decoder_get_state = Module["_FLAC__stream_decoder_get_state"] = asm["_FLAC__stream_decoder_get_state"];
var _FLAC__stream_decoder_init_stream = Module["_FLAC__stream_decoder_init_stream"] = asm["_FLAC__stream_decoder_init_stream"];
var _FLAC__stream_decoder_new = Module["_FLAC__stream_decoder_new"] = asm["_FLAC__stream_decoder_new"];
var _FLAC__stream_decoder_process_single = Module["_FLAC__stream_decoder_process_single"] = asm["_FLAC__stream_decoder_process_single"];
var _FLAC__stream_decoder_process_until_end_of_metadata = Module["_FLAC__stream_decoder_process_until_end_of_metadata"] = asm["_FLAC__stream_decoder_process_until_end_of_metadata"];
var _FLAC__stream_decoder_process_until_end_of_stream = Module["_FLAC__stream_decoder_process_until_end_of_stream"] = asm["_FLAC__stream_decoder_process_until_end_of_stream"];
var _FLAC__stream_decoder_reset = Module["_FLAC__stream_decoder_reset"] = asm["_FLAC__stream_decoder_reset"];
var _FLAC__stream_decoder_set_md5_checking = Module["_FLAC__stream_decoder_set_md5_checking"] = asm["_FLAC__stream_decoder_set_md5_checking"];
var _FLAC__stream_encoder_delete = Module["_FLAC__stream_encoder_delete"] = asm["_FLAC__stream_encoder_delete"];
var _FLAC__stream_encoder_finish = Module["_FLAC__stream_encoder_finish"] = asm["_FLAC__stream_encoder_finish"];
var _FLAC__stream_encoder_get_state = Module["_FLAC__stream_encoder_get_state"] = asm["_FLAC__stream_encoder_get_state"];
var _FLAC__stream_encoder_init_stream = Module["_FLAC__stream_encoder_init_stream"] = asm["_FLAC__stream_encoder_init_stream"];
var _FLAC__stream_encoder_new = Module["_FLAC__stream_encoder_new"] = asm["_FLAC__stream_encoder_new"];
var _FLAC__stream_encoder_process_interleaved = Module["_FLAC__stream_encoder_process_interleaved"] = asm["_FLAC__stream_encoder_process_interleaved"];
var _FLAC__stream_encoder_set_bits_per_sample = Module["_FLAC__stream_encoder_set_bits_per_sample"] = asm["_FLAC__stream_encoder_set_bits_per_sample"];
var _FLAC__stream_encoder_set_blocksize = Module["_FLAC__stream_encoder_set_blocksize"] = asm["_FLAC__stream_encoder_set_blocksize"];
var _FLAC__stream_encoder_set_channels = Module["_FLAC__stream_encoder_set_channels"] = asm["_FLAC__stream_encoder_set_channels"];
var _FLAC__stream_encoder_set_compression_level = Module["_FLAC__stream_encoder_set_compression_level"] = asm["_FLAC__stream_encoder_set_compression_level"];
var _FLAC__stream_encoder_set_sample_rate = Module["_FLAC__stream_encoder_set_sample_rate"] = asm["_FLAC__stream_encoder_set_sample_rate"];
var _FLAC__stream_encoder_set_total_samples_estimate = Module["_FLAC__stream_encoder_set_total_samples_estimate"] = asm["_FLAC__stream_encoder_set_total_samples_estimate"];
var _FLAC__stream_encoder_set_verify = Module["_FLAC__stream_encoder_set_verify"] = asm["_FLAC__stream_encoder_set_verify"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = asm["_emscripten_replace_memory"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _round = Module["_round"] = asm["_round"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;



Module["ccall"] = ccall;
Module["cwrap"] = cwrap;
Module["setValue"] = setValue;
Module["getValue"] = getValue;




































































if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    memoryInitializer = locateFile(memoryInitializer);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile and defining it in JS. That
            // means that the HTML file doesn't know about it, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}





/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }


  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();


    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = run;


function exit(status, implicit) {

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  Module['quit'](status, new ExitStatus(status));
}

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    out(what);
    err(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  throw 'abort(' + what + '). Build with -s ASSERTIONS=1 for more info.';
}
Module['abort'] = abort;

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}


  Module["noExitRuntime"] = true;

run();





// {{MODULE_ADDITIONS}}



//libflac function wrappers

/**
 * HELPER read/extract stream info meta-data from frame header / meta-data
 * @param {POINTER} p_streaminfo
 * @returns StreamInfo
 */
function _readStreamInfo(p_streaminfo){//-> FLAC__StreamMetadata.type (FLAC__MetadataType) === FLAC__METADATA_TYPE_STREAMINFO (0)

	/*
	typedef struct {
		unsigned min_blocksize, max_blocksize;
		unsigned min_framesize, max_framesize;
		unsigned sample_rate;
		unsigned channels;
		unsigned bits_per_sample;
		FLAC__uint64 total_samples;
		FLAC__byte md5sum[16];
	} FLAC__StreamMetadata_StreamInfo;
	 */

	var min_blocksize = Module.getValue(p_streaminfo,'i32');//4 bytes
	var max_blocksize = Module.getValue(p_streaminfo+4,'i32');//4 bytes

	var min_framesize = Module.getValue(p_streaminfo+8,'i32');//4 bytes
	var max_framesize = Module.getValue(p_streaminfo+12,'i32');//4 bytes

	var sample_rate = Module.getValue(p_streaminfo+16,'i32');//4 bytes
	var channels = Module.getValue(p_streaminfo+20,'i32');//4 bytes

	var bits_per_sample = Module.getValue(p_streaminfo+24,'i32');//4 bytes

	//FIXME should be at p_streaminfo+28, but seems to be at p_streaminfo+32
	var total_samples = Module.getValue(p_streaminfo+32,'i64');//8 bytes

	var md5sum = _readMd5(p_streaminfo+40);//16 bytes

	return {
		min_blocksize: min_blocksize,
		max_blocksize: max_blocksize,
		min_framesize: min_framesize,
		max_framesize: max_framesize,
		sampleRate: sample_rate,
		channels: channels,
		bitsPerSample: bits_per_sample,
		total_samples: total_samples,
		md5sum: md5sum
	};
}

/**
 * read MD5 checksum
 * @param {POINTER} p_md5
 * @returns {String} as HEX string representation
 */
function _readMd5(p_md5){

	var sb = [], v, str;
	for(var i=0, len = 16; i < len; ++i){
		v = Module.getValue(p_md5+i,'i8');//1 byte
		if(v < 0) v = 256 + v;//<- "convert" to uint8, if necessary
		str = v.toString(16);
		if(str.length < 2) str = '0' + str;//<- add padding, if necessary
		sb.push(str);
	}
	return sb.join('');
}

/**
 * HELPER: read frame data
 *
 * @param {POINTER} p_frame
 * @returns FrameHeader
 */
function _readFrameHdr(p_frame){

	/*
	typedef struct {
		unsigned blocksize;
		unsigned sample_rate;
		unsigned channels;
		FLAC__ChannelAssignment channel_assignment;
		unsigned bits_per_sample;
		FLAC__FrameNumberType number_type;
		union {
			FLAC__uint32 frame_number;
			FLAC__uint64 sample_number;
		} number;
		FLAC__uint8 crc;
	} FLAC__FrameHeader;
	 */

	var blocksize = Module.getValue(p_frame,'i32');//4 bytes
	var sample_rate = Module.getValue(p_frame+4,'i32');//4 bytes
	var channels = Module.getValue(p_frame+8,'i32');//4 bytes

	// 0: FLAC__CHANNEL_ASSIGNMENT_INDEPENDENT	independent channels
	// 1: FLAC__CHANNEL_ASSIGNMENT_LEFT_SIDE 	left+side stereo
	// 2: FLAC__CHANNEL_ASSIGNMENT_RIGHT_SIDE 	right+side stereo
	// 3: FLAC__CHANNEL_ASSIGNMENT_MID_SIDE 	mid+side stereo
	var channel_assignment = Module.getValue(p_frame+12,'i32');//4 bytes

	var bits_per_sample = Module.getValue(p_frame+16,'i32');

	// 0: FLAC__FRAME_NUMBER_TYPE_FRAME_NUMBER 	number contains the frame number
	// 1: FLAC__FRAME_NUMBER_TYPE_SAMPLE_NUMBER	number contains the sample number of first sample in frame
	var number_type = Module.getValue(p_frame+20,'i32');

	// union {} number: The frame number or sample number of first sample in frame; use the number_type value to determine which to use.
	var frame_number = Module.getValue(p_frame+24,'i32');
	var sample_number = Module.getValue(p_frame+24,'i64');

	var number = number_type === 0? frame_number : sample_number;

	var crc = Module.getValue(p_frame+36,'i8');

	//TODO read subframe
	//TODO read footer

	return {
		blocksize: blocksize,
		sampleRate: sample_rate,
		channels: channels,
		bitsPerSample: bits_per_sample,
		number: number,
		crc: crc
	};
}


/**
 * HELPER workaround / fix for returned write-buffer when decoding FLAC
 *
 * @param {number} heapOffset
 * 				the offset for the data on HEAPU8
 * @param {Uint8Array} newBuffer
 * 				the target buffer into which the data should be written -- with the correct (block) size
 */
function __fix_write_buffer(heapOffset, newBuffer){

	var dv = new DataView(newBuffer.buffer);
	var targetSize = newBuffer.length;

	var increase = 2;//<- for FIX/workaround
	var buffer = HEAPU8.subarray(heapOffset, heapOffset + targetSize * increase);

	//FIXME for some reason, the bytes values 0 (min) and 255 (max) get "triplicated"
	//		HACK for now: remove/"over-read" 2 of the values, for each of these triplets
	var jump, isPrint;
	for(var i=0, j=0, size = buffer.length; i < size && j < targetSize; ++i, ++j){

		if(i === size-1 && j < targetSize - 1){
			//increase heap-view, in order to read more (valid) data into the target buffer
			buffer = HEAPU8.subarray(heapOffset, size + targetSize);
			size = buffer.length;
		}

		if(buffer[i] === 0 || buffer[i] === 255){

			jump = 0;
			isPrint = true;

			if(i + 1 < size && buffer[i] === buffer[i+1]){

				++jump;

				if(i + 2 < size){
					if(buffer[i] === buffer[i+2]){
						++jump;
					} else {
						//if only 2 occurrences: ignore value
						isPrint = false;
					}
				}
			}//else: if single value: do print (an do not jump)


			if(isPrint){
				dv.setUint8(j, buffer[i]);
				if(jump === 2 && i + 3 < size && buffer[i] === buffer[i+3]){
					//special case for reducing triples in case the following value is also the same
					// (ie. something like: x x x |+ x)
					// -> then: do write the value one more time, and jump one further ahead
					// i.e. if value occurs 4 times in a row, write 2 values
					++jump;
					dv.setUint8(++j, buffer[i]);
				}
			} else {
				--j;
			}

			i += jump;//<- apply jump, if there were value duplications

		} else {
			dv.setUint8(j, buffer[i]);
		}

	}
}


// FLAC__STREAM_DECODER_READ_STATUS_CONTINUE     	The read was OK and decoding can continue.
// FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM   The read was attempted while at the end of the stream. Note that the client must only return this value when the read callback was called when already at the end of the stream. Otherwise, if the read itself moves to the end of the stream, the client should still return the data and FLAC__STREAM_DECODER_READ_STATUS_CONTINUE, and then on the next read callback it should return FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM with a byte count of 0.
// FLAC__STREAM_DECODER_READ_STATUS_ABORT       	An unrecoverable error occurred. The decoder will return from the process call.
var FLAC__STREAM_DECODER_READ_STATUS_CONTINUE = 0;
var FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM = 1;
var FLAC__STREAM_DECODER_READ_STATUS_ABORT = 2;

// FLAC__STREAM_DECODER_WRITE_STATUS_CONTINUE   The write was OK and decoding can continue.
// FLAC__STREAM_DECODER_WRITE_STATUS_ABORT     	An unrecoverable error occurred. The decoder will return from the process call.
var FLAC__STREAM_DECODER_WRITE_STATUS_CONTINUE = 0;
var FLAC__STREAM_DECODER_WRITE_STATUS_ABORT = 1;

//FLAC__STREAM_DECODER_INIT_STATUS_OK						Initialization was successful.
//FLAC__STREAM_DECODER_INIT_STATUS_UNSUPPORTED_CONTAINER 	The library was not compiled with support for the given container format.
//FLAC__STREAM_DECODER_INIT_STATUS_INVALID_CALLBACKS 			A required callback was not supplied.
//FLAC__STREAM_DECODER_INIT_STATUS_MEMORY_ALLOCATION_ERROR 	An error occurred allocating memory.
//FLAC__STREAM_DECODER_INIT_STATUS_ERROR_OPENING_FILE 		fopen() failed in FLAC__stream_decoder_init_file() or FLAC__stream_decoder_init_ogg_file().
//FLAC__STREAM_DECODER_INIT_STATUS_ALREADY_INITIALIZED 		FLAC__stream_decoder_init_*() was called when the decoder was already initialized, usually because FLAC__stream_decoder_finish() was not called.
var FLAC__STREAM_DECODER_INIT_STATUS_OK	= 0;
var FLAC__STREAM_DECODER_INIT_STATUS_UNSUPPORTED_CONTAINER	= 1;
var FLAC__STREAM_DECODER_INIT_STATUS_INVALID_CALLBACKS	= 2;
var FLAC__STREAM_DECODER_INIT_STATUS_MEMORY_ALLOCATION_ERROR = 3;
var FLAC__STREAM_DECODER_INIT_STATUS_ERROR_OPENING_FILE = 4;
var FLAC__STREAM_DECODER_INIT_STATUS_ALREADY_INITIALIZED = 5;

//FLAC__STREAM_ENCODER_INIT_STATUS_OK									Initialization was successful.
//FLAC__STREAM_ENCODER_INIT_STATUS_ENCODER_ERROR						General failure to set up encoder; call FLAC__stream_encoder_get_state() for cause.
//FLAC__STREAM_ENCODER_INIT_STATUS_UNSUPPORTED_CONTAINER				The library was not compiled with support for the given container format.
//FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_CALLBACKS					A required callback was not supplied.
//FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_NUMBER_OF_CHANNELS			The encoder has an invalid setting for number of channels.
//FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_BITS_PER_SAMPLE				The encoder has an invalid setting for bits-per-sample. FLAC supports 4-32 bps but the reference encoder currently supports only up to 24 bps.
//FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_SAMPLE_RATE					The encoder has an invalid setting for the input sample rate.
//FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_BLOCK_SIZE					The encoder has an invalid setting for the block size.
//FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_MAX_LPC_ORDER				The encoder has an invalid setting for the maximum LPC order.
//FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_QLP_COEFF_PRECISION			The encoder has an invalid setting for the precision of the quantized linear predictor coefficients.
//FLAC__STREAM_ENCODER_INIT_STATUS_BLOCK_SIZE_TOO_SMALL_FOR_LPC_ORDER	The specified block size is less than the maximum LPC order.
//FLAC__STREAM_ENCODER_INIT_STATUS_NOT_STREAMABLE						The encoder is bound to the Subset but other settings violate it.
//FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_METADATA						The metadata input to the encoder is invalid, in one of the following ways:
//																	      FLAC__stream_encoder_set_metadata() was called with a null pointer but a block count > 0
//																	      One of the metadata blocks contains an undefined type
//																	      It contains an illegal CUESHEET as checked by FLAC__format_cuesheet_is_legal()
//																	      It contains an illegal SEEKTABLE as checked by FLAC__format_seektable_is_legal()
//																	      It contains more than one SEEKTABLE block or more than one VORBIS_COMMENT block
//FLAC__STREAM_ENCODER_INIT_STATUS_ALREADY_INITIALIZED					FLAC__stream_encoder_init_*() was called when the encoder was already initialized, usually because FLAC__stream_encoder_finish() was not called.
var FLAC__STREAM_ENCODER_INIT_STATUS_OK = 0;
var FLAC__STREAM_ENCODER_INIT_STATUS_ENCODER_ERROR = 1;
var FLAC__STREAM_ENCODER_INIT_STATUS_UNSUPPORTED_CONTAINER = 2;
var FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_CALLBACKS = 3;
var FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_NUMBER_OF_CHANNELS = 4;
var FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_BITS_PER_SAMPLE = 5;
var FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_SAMPLE_RATE = 6;
var FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_BLOCK_SIZE = 7;
var FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_MAX_LPC_ORDER = 8;
var FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_QLP_COEFF_PRECISION = 9;
var FLAC__STREAM_ENCODER_INIT_STATUS_BLOCK_SIZE_TOO_SMALL_FOR_LPC_ORDER = 10;
var FLAC__STREAM_ENCODER_INIT_STATUS_NOT_STREAMABLE = 11;
var FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_METADATA = 12;
var FLAC__STREAM_ENCODER_INIT_STATUS_ALREADY_INITIALIZED = 13;

//FLAC__STREAM_ENCODER_WRITE_STATUS_OK 				The write was OK and encoding can continue.
//FLAC__STREAM_ENCODER_WRITE_STATUS_FATAL_ERROR		An unrecoverable error occurred. The encoder will return from the process call
var FLAC__STREAM_ENCODER_WRITE_STATUS_OK = 0;
var FLAC__STREAM_ENCODER_WRITE_STATUS_FATAL_ERROR = 1;


/**
 * Map for encoder/decoder callback functions
 *
 * <pre>[ID] -> {function_type: FUNCTION}</pre>
 *
 * type: {[id: number]: {[callback_type: string]: function}}
 * @private
 */
var coders = {};

/**
 * Get a registered callback for the encoder / decoder instance
 *
 * @param {Number} p_coder
 * 			the encoder/decoder pointer (ID)
 * @param {String} func_type
 * 			the callback type, one of
 * 				"write" | "read" | "error" | "metadata"
 * @returns {Function} the callback (or VOID if there is no callback registered)
 * @private
 */
function getCallback(p_coder, func_type){
	if(coders[p_coder]){
		return coders[p_coder][func_type];
	}
}

/**
 * Register a callback for an encoder / decoder instance (will / should be deleted, when finish()/delete())
 *
 * @param {Number} p_coder
 * 			the encoder/decoder pointer (ID)
 * @param {String} func_type
 * 			the callback type, one of
 * 				"write" | "read" | "error" | "metadata"
 * @param {Function} callback
 * 			the callback function
 * @private
 */
function setCallback(p_coder, func_type, callback){
	if(!coders[p_coder]){
		coders[p_coder] = {};
	}
	coders[p_coder][func_type] = callback;
}

//(const FLAC__StreamEncoder *encoder, const FLAC__byte buffer[], size_t bytes, unsigned samples, unsigned current_frame, void *client_data)
// -> FLAC__StreamEncoderWriteStatus
var enc_write_fn_ptr = addFunction(function(p_encoder, buffer, bytes, samples, current_frame, p_client_data){
	var arraybuf = new ArrayBuffer(buffer);
	var retdata = new Uint8Array(bytes);
	retdata.set(HEAPU8.subarray(buffer, buffer + bytes));
	var write_callback_fn = getCallback(p_encoder, 'write');
	try{
		write_callback_fn(retdata, bytes, samples, current_frame, p_client_data);
	} catch(err) {
		console.error(err);
		return FLAC__STREAM_ENCODER_WRITE_STATUS_FATAL_ERROR;
	}
	return FLAC__STREAM_ENCODER_WRITE_STATUS_OK
}, 'iiiiiii');

//(const FLAC__StreamDecoder *decoder, FLAC__byte buffer[], size_t *bytes, void *client_data)
// -> FLAC__StreamDecoderReadStatus
var dec_read_fn_ptr = addFunction(function(p_decoder, buffer, bytes, p_client_data){
	//FLAC__StreamDecoderReadCallback, see https://xiph.org/flac/api/group__flac__stream__decoder.html#ga7a5f593b9bc2d163884348b48c4285fd

	var len = Module.getValue(bytes, 'i32');

	if(len === 0){
		return FLAC__STREAM_DECODER_READ_STATUS_ABORT;
	}

	var read_callback_fn = getCallback(p_decoder, 'read');

	//callback must return object with: {buffer: TypedArray, readDataLength: number, error: boolean}
	var readResult = read_callback_fn(len, p_client_data);
	//in case of END_OF_STREAM or an error, readResult.readDataLength must be returned with 0

	var readLen = readResult.readDataLength;
	Module.setValue(bytes, readLen, 'i32');

	if(readResult.error){
		return FLAC__STREAM_DECODER_READ_STATUS_ABORT;
	}

	if(readLen === 0){
		return FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM;
	}

	var readBuf = readResult.buffer;

	var dataHeap = new Uint8Array(Module.HEAPU8.buffer, buffer, readLen);
	dataHeap.set(new Uint8Array(readBuf));

	return FLAC__STREAM_DECODER_READ_STATUS_CONTINUE;
}, 'iiiii');

//(const FLAC__StreamDecoder *decoder, const FLAC__Frame *frame, const FLAC__int32 *const buffer[], void *client_data)
// -> FLAC__StreamDecoderWriteStatus
var dec_write_fn_ptr = addFunction(function(p_decoder, p_frame, p_buffer, p_client_data){

	// var dec = Module.getValue(p_decoder,'i32');
	// var clientData = Module.getValue(p_client_data,'i32');

	var frameInfo = _readFrameHdr(p_frame);

//	console.log(frameInfo);//DEBUG

	var channels = frameInfo.channels;
	var block_size = frameInfo.blocksize * (frameInfo.bitsPerSample / 8);

	var data = [];//<- array for the data of each channel
	var bufferOffset, heapView, _buffer;

	for(var i=0; i < channels; ++i){

		bufferOffset = Module.getValue(p_buffer + (i*4),'i32');

		_buffer = new Uint8Array(block_size);
		//FIXME HACK for "strange" data (see helper function __fix_write_buffer)
		__fix_write_buffer(bufferOffset, _buffer);

		data.push(_buffer.subarray(0, block_size));
	}

	var write_callback_fn = getCallback(p_decoder, 'write');
	write_callback_fn(data, frameInfo);//, clientData);

	// FLAC__STREAM_DECODER_WRITE_STATUS_CONTINUE	The write was OK and decoding can continue.
	// FLAC__STREAM_DECODER_WRITE_STATUS_ABORT     	An unrecoverable error occurred. The decoder will return from the process call.

	return FLAC__STREAM_DECODER_WRITE_STATUS_CONTINUE;
}, 'iiiii');



//(const FLAC__StreamDecoder *decoder, FLAC__StreamDecoderErrorStatus status, void *client_data)
// -> void
var dec_error_fn_ptr = addFunction(function(p_decoder, err, p_client_data){

	//err:
	// FLAC__STREAM_DECODER_ERROR_STATUS_LOST_SYNC         An error in the stream caused the decoder to lose synchronization.
	// FLAC__STREAM_DECODER_ERROR_STATUS_BAD_HEADER       The decoder encountered a corrupted frame header.
	// FLAC__STREAM_DECODER_ERROR_STATUS_FRAME_CRC_MISMATCH   The frame's data did not match the CRC in the footer.
	// FLAC__STREAM_DECODER_ERROR_STATUS_UNPARSEABLE_STREAM   The decoder encountered reserved fields in use in the stream.
	var msg;
	switch(err){
	case 0:
		msg = 'FLAC__STREAM_DECODER_ERROR_STATUS_LOST_SYNC';
		break;
	case 1:
		msg = 'FLAC__STREAM_DECODER_ERROR_STATUS_BAD_HEADER';
		break;
	case 2:
		msg = 'FLAC__STREAM_DECODER_ERROR_STATUS_FRAME_CRC_MISMATCH';
		break;
	case 3:
		msg = 'FLAC__STREAM_DECODER_ERROR_STATUS_UNPARSEABLE_STREAM';
		break;
	default:
		msg = 'FLAC__STREAM_DECODER_ERROR__UNKNOWN__';//<- this should never happen
	}

	var error_callback_fn = getCallback(p_decoder, 'error');
	error_callback_fn(err, msg, p_client_data);
}, 'viii');

//(const FLAC__StreamDecoder *decoder, const FLAC__StreamMetadata *metadata, void *client_data) -> void
//(const FLAC__StreamEncoder *encoder, const FLAC__StreamMetadata *metadata, void *client_data) -> void
var metadata_fn_ptr = addFunction(function(p_coder, p_metadata, p_client_data){
	/*
	 typedef struct {
		FLAC__MetadataType type;
		FLAC__bool is_last;
		unsigned length;
		union {
			FLAC__StreamMetadata_StreamInfo stream_info;
			FLAC__StreamMetadata_Padding padding;
			FLAC__StreamMetadata_Application application;
			FLAC__StreamMetadata_SeekTable seek_table;
			FLAC__StreamMetadata_VorbisComment vorbis_comment;
			FLAC__StreamMetadata_CueSheet cue_sheet;
			FLAC__StreamMetadata_Picture picture;
			FLAC__StreamMetadata_Unknown unknown;
		} data;
	} FLAC__StreamMetadata;
	 */

	/*
	FLAC__METADATA_TYPE_STREAMINFO 		STREAMINFO block
	FLAC__METADATA_TYPE_PADDING 		PADDING block
	FLAC__METADATA_TYPE_APPLICATION 	APPLICATION block
	FLAC__METADATA_TYPE_SEEKTABLE 		SEEKTABLE block
	FLAC__METADATA_TYPE_VORBIS_COMMENT 	VORBISCOMMENT block (a.k.a. FLAC tags)
	FLAC__METADATA_TYPE_CUESHEET 		CUESHEET block
	FLAC__METADATA_TYPE_PICTURE 		PICTURE block
	FLAC__METADATA_TYPE_UNDEFINED 		marker to denote beginning of undefined type range; this number will increase as new metadata types are added
	FLAC__MAX_METADATA_TYPE 			No type will ever be greater than this. There is not enough room in the protocol block.
	 */

	var type = Module.getValue(p_metadata,'i32');//4 bytes
	var is_last = Module.getValue(p_metadata+4,'i32');//4 bytes
	var length = Module.getValue(p_metadata+8,'i64');//8 bytes

	var metadata_callback_fn = getCallback(p_coder, 'metadata');
	var meta_data;
	if(type === 0){// === FLAC__METADATA_TYPE_STREAMINFO
		meta_data = _readStreamInfo(p_metadata+16);

		metadata_callback_fn(meta_data);
	}
	//TODO handle other meta data too

}, 'viii');


////////////// helper fields and functions for event handling
// see exported on()/off() functions
var listeners = {};
var persistedEvents = [];
var add_event_listener = function (eventName, listener){
	var list = listeners[eventName];
	if(!list){
		list = [listener];
		listeners[eventName] = list;
	} else {
		list.push(listener);
	}
	var activated;
	for(var i=persistedEvents.length-1; i >= 0; --i){
		activated = persistedEvents[i];
		if(activated && activated.event === eventName){
			listener.apply(null, activated.args);
			break;
		}
	}
};
var remove_event_listener = function (eventName, listener){
	var list = listeners[eventName];
	if(list){
		for(var i=list.length-1; i >= 0; --i){
			if(list[i] === listener){
				list.splice(i, 1);
			}
		}
	}
};
/**
 * HELPER: fire an event
 * @param  {string} eventName
 * 										the event name
 * @param  {Array<any>} [args] OPITIONAL
 * 										the arguments when triggering the listeners
 * @param  {boolean} [isPersist] OPTIONAL (positinal argument!)
 * 										if TRUE, handlers for this event that will be registered after this will get triggered immediately
 * 										(i.e. event is "persistent": once triggered it stays "active")
 *
 */
var do_fire_event = function (eventName, args, isPersist){
	if(_exported['on'+eventName]){
		_exported['on'+eventName].apply(null, args);
	}
	var list = listeners[eventName];
	if(list){
		for(var i=0, size=list.length; i < size; ++i){
			list[i].apply(null, args)
		}
	}
	if(isPersist){
		persistedEvents.push({event: eventName, args: args});
	}
}

/////////////////////////////////////    export / public: /////////////////////////////////////////////
/**
 * The <code>Flac</code> module that provides functionality
 * for encoding WAV/PCM audio to Flac and decoding Flac to PCM.
 *
 * @see https://xiph.org/flac/api/group__flac__stream__encoder.html
 * @see https://xiph.org/flac/api/group__flac__stream__decoder.html
 *
 * @class Flac
 * @namespace Flac
 */
var _exported = {
	_module: Module,//internal: reference to Flac module
	_clear_enc_cb: function(enc_ptr){//internal function: remove reference to encoder instance and its callbacks
		delete coders[enc_ptr];
	},
	_clear_dec_cb: function(dec_ptr){//internal function: remove reference to decoder instance and its callbacks
		delete coders[dec_ptr];
	},
	/**
	 * Returns if Flac has been initialized / is ready to be used.
	 *
	 * @returns {boolean} true, if Flac is ready to be used
	 *
	 * @memberOf Flac#
	 */
	isReady: function() { return _flac_ready; },
	/**
	 * Callback that gets called, when asynchronous initialization has finished.
	 *
	 * Note that this function is not called again, after #isReady() is TRUE
	 *
	 * @memberOf Flac#
	 * @function
	 * @example
	 *  if(!Flac.isReady()){
	 *    Flac.onready = function(){
	 *       //gets executed when library becomes ready...
	 *    };
	 *  }
	 */
	onready: void(0),
	/**
	 * Add an event listener for module-events.
	 * Supported events:
	 * <ul>
	 *  <li> <code>"ready"</code>: emitted when module is ready for usage (i.e. {@link #isReady} is true)<br/>
	 *             (NOTE listener will get immediately triggered if module is already <code>"ready"</code>)
	 *  </li>
	 * </ul>
	 *
	 * @param {string} eventName
	 * @param {Function} listener
	 *
	 * @memberOf Flac#
	 * @function
	 * @example
	 *  Flac.on('ready', function(){
	 *     //gets executed when library is ready, or becomes ready...
	 *  });
	 */
	on: add_event_listener,
	/**
	 * Remove an event listener for module-events.
	 * @function
	 * @param {string} eventName
	 * @param {Function} listener
	 *
	 * @memberOf Flac#
	 */
	off: remove_event_listener,

	/**@memberOf Flac#
	 * @function
	 */
	FLAC__stream_encoder_set_verify: Module.cwrap('FLAC__stream_encoder_set_verify', 'number', [ 'number', 'number' ]),
	/**@memberOf Flac#
	 * @function
	 */
	FLAC__stream_encoder_set_compression_level: Module.cwrap('FLAC__stream_encoder_set_compression_level', 'number', [ 'number', 'number' ]),
	/**@memberOf Flac#
	 * @function
	 */
	FLAC__stream_encoder_set_blocksize: Module.cwrap('FLAC__stream_encoder_set_blocksize', 'number', [ 'number', 'number']),
/*

TODO export other encoder API functions?:

FLAC__StreamEncoder * 	FLAC__stream_encoder_new (void)

FLAC__bool 	FLAC__stream_encoder_set_channels (FLAC__StreamEncoder *encoder, unsigned value)

FLAC__bool 	FLAC__stream_encoder_set_bits_per_sample (FLAC__StreamEncoder *encoder, unsigned value)

FLAC__bool 	FLAC__stream_encoder_set_sample_rate (FLAC__StreamEncoder *encoder, unsigned value)

FLAC__bool 	FLAC__stream_encoder_set_do_mid_side_stereo (FLAC__StreamEncoder *encoder, FLAC__bool value)

FLAC__bool 	FLAC__stream_encoder_set_loose_mid_side_stereo (FLAC__StreamEncoder *encoder, FLAC__bool value)

FLAC__bool 	FLAC__stream_encoder_set_apodization (FLAC__StreamEncoder *encoder, const char *specification)

FLAC__bool 	FLAC__stream_encoder_set_max_lpc_order (FLAC__StreamEncoder *encoder, unsigned value)

FLAC__bool 	FLAC__stream_encoder_set_qlp_coeff_precision (FLAC__StreamEncoder *encoder, unsigned value)

FLAC__bool 	FLAC__stream_encoder_set_do_qlp_coeff_prec_search (FLAC__StreamEncoder *encoder, FLAC__bool value)

FLAC__bool 	FLAC__stream_encoder_set_do_escape_coding (FLAC__StreamEncoder *encoder, FLAC__bool value)

FLAC__bool 	FLAC__stream_encoder_set_do_exhaustive_model_search (FLAC__StreamEncoder *encoder, FLAC__bool value)

FLAC__bool 	FLAC__stream_encoder_set_min_residual_partition_order (FLAC__StreamEncoder *encoder, unsigned value)

FLAC__bool 	FLAC__stream_encoder_set_max_residual_partition_order (FLAC__StreamEncoder *encoder, unsigned value)

FLAC__bool 	FLAC__stream_encoder_set_rice_parameter_search_dist (FLAC__StreamEncoder *encoder, unsigned value)


FLAC__StreamDecoderState 	FLAC__stream_encoder_get_verify_decoder_state (const FLAC__StreamEncoder *encoder)

FLAC__bool 	FLAC__stream_encoder_get_verify (const FLAC__StreamEncoder *encoder)

FLAC__bool 	FLAC__stream_encoder_get_streamable_subset (const FLAC__StreamEncoder *encoder)

unsigned 	FLAC__stream_encoder_get_channels (const FLAC__StreamEncoder *encoder)

unsigned 	FLAC__stream_encoder_get_bits_per_sample (const FLAC__StreamEncoder *encoder)

unsigned 	FLAC__stream_encoder_get_sample_rate (const FLAC__StreamEncoder *encoder)

unsigned 	FLAC__stream_encoder_get_blocksize (const FLAC__StreamEncoder *encoder)

FLAC__bool 	FLAC__stream_encoder_get_do_mid_side_stereo (const FLAC__StreamEncoder *encoder)

FLAC__bool 	FLAC__stream_encoder_get_loose_mid_side_stereo (const FLAC__StreamEncoder *encoder)

unsigned 	FLAC__stream_encoder_get_max_lpc_order (const FLAC__StreamEncoder *encoder)

unsigned 	FLAC__stream_encoder_get_qlp_coeff_precision (const FLAC__StreamEncoder *encoder)

FLAC__bool 	FLAC__stream_encoder_get_do_qlp_coeff_prec_search (const FLAC__StreamEncoder *encoder)

FLAC__bool 	FLAC__stream_encoder_get_do_escape_coding (const FLAC__StreamEncoder *encoder)

FLAC__bool 	FLAC__stream_encoder_get_do_exhaustive_model_search (const FLAC__StreamEncoder *encoder)

unsigned 	FLAC__stream_encoder_get_min_residual_partition_order (const FLAC__StreamEncoder *encoder)

unsigned 	FLAC__stream_encoder_get_max_residual_partition_order (const FLAC__StreamEncoder *encoder)

unsigned 	FLAC__stream_encoder_get_rice_parameter_search_dist (const FLAC__StreamEncoder *encoder)

FLAC__uint64 	FLAC__stream_encoder_get_total_samples_estimate (const FLAC__StreamEncoder *encoder)



TODO export other decoder API functions?:

FLAC__StreamDecoder * 	FLAC__stream_decoder_new (void)

FLAC__bool 	FLAC__stream_decoder_set_md5_checking (FLAC__StreamDecoder *decoder, FLAC__bool value)

FLAC__bool 	FLAC__stream_decoder_set_metadata_respond (FLAC__StreamDecoder *decoder, FLAC__MetadataType type)

FLAC__bool 	FLAC__stream_decoder_set_metadata_respond_application (FLAC__StreamDecoder *decoder, const FLAC__byte id[4])

FLAC__bool 	FLAC__stream_decoder_set_metadata_respond_all (FLAC__StreamDecoder *decoder)

FLAC__bool 	FLAC__stream_decoder_set_metadata_ignore (FLAC__StreamDecoder *decoder, FLAC__MetadataType type)

FLAC__bool 	FLAC__stream_decoder_set_metadata_ignore_application (FLAC__StreamDecoder *decoder, const FLAC__byte id[4])

FLAC__bool 	FLAC__stream_decoder_set_metadata_ignore_all (FLAC__StreamDecoder *decoder)


const char * 	FLAC__stream_decoder_get_resolved_state_string (const FLAC__StreamDecoder *decoder)

FLAC__uint64 	FLAC__stream_decoder_get_total_samples (const FLAC__StreamDecoder *decoder)

unsigned 	FLAC__stream_decoder_get_channels (const FLAC__StreamDecoder *decoder)

unsigned 	FLAC__stream_decoder_get_bits_per_sample (const FLAC__StreamDecoder *decoder)

unsigned 	FLAC__stream_decoder_get_sample_rate (const FLAC__StreamDecoder *decoder)

unsigned 	FLAC__stream_decoder_get_blocksize (const FLAC__StreamDecoder *decoder)


FLAC__bool 	FLAC__stream_decoder_flush (FLAC__StreamDecoder *decoder)

FLAC__bool 	FLAC__stream_decoder_skip_single_frame (FLAC__StreamDecoder *decoder)

 */

	/**
	 * Create an encoder.
	 *
	 * @param {number} sample_rate
	 * 					the sample rate of the input PCM data
	 * @param {number} channels
	 * 					the number of channels of the input PCM data
	 * @param {number} bps
	 * 					bits per sample of the input PCM data
	 * @param {number} compression_level
	 * 					the desired Flac compression level: [0, 8]
	 * @param {number} [total_samples] OPTIONAL
	 * 					the number of total samples of the input PCM data:<br>
	 * 					 Sets an estimate of the total samples that will be encoded.
	 * 					 This is merely an estimate and may be set to 0 if unknown.
	 * 					 This value will be written to the STREAMINFO block before encoding,
	 * 					 and can remove the need for the caller to rewrite the value later if
	 * 					 the value is known before encoding.<br>
	 * 					If specified, the it will be written into metadata of the FLAC header.<br>
	 * 					DEFAULT: 0 (i.e. unknown number of samples)
	 * @param {boolean} [is_verify] OPTIONAL
	 * 					enable/disable checksum verification during encoding<br>
	 * 					DEFAULT: true<br>
	 * 					NOTE: this argument is positional (i.e. total_samples must also be given)
	 * @param {number} [block_size] OPTIONAL
	 * 					the number of samples to use per frame.<br>
	 * 					DEFAULT: 0 (i.e. encoder sets block size automatically)
	 * 					NOTE: this argument is positional (i.e. total_samples and is_verify must also be given)
	 *
	 *
	 * @returns {number} the ID of the created encoder instance (or 0, if there was an error)
	 *
	 * @memberOf Flac#
	 * @function
	 */
	create_libflac_encoder: function(sample_rate, channels, bps, compression_level, total_samples, is_verify, block_size){
		is_verify = typeof is_verify === 'undefined'? 1 : is_verify + 0;
		total_samples = typeof total_samples === 'number'? total_samples : 0;
		block_size = typeof block_size === 'number'? block_size : 0;
		var ok = true;
		var encoder = Module.ccall('FLAC__stream_encoder_new', 'number', [ ], [ ]);
		ok &= Module.ccall('FLAC__stream_encoder_set_verify', 'number', ['number', 'number'], [ encoder, is_verify ]);
		ok &= Module.ccall('FLAC__stream_encoder_set_compression_level', 'number', ['number', 'number'], [ encoder, compression_level ]);
		ok &= Module.ccall('FLAC__stream_encoder_set_channels', 'number', ['number', 'number'], [ encoder, channels ]);
		ok &= Module.ccall('FLAC__stream_encoder_set_bits_per_sample', 'number', ['number', 'number'], [ encoder, bps ]);
		ok &= Module.ccall('FLAC__stream_encoder_set_sample_rate', 'number', ['number', 'number'], [ encoder, sample_rate ]);
		ok &= Module.ccall('FLAC__stream_encoder_set_blocksize', 'number', [ 'number', 'number'], [ encoder, block_size ]);
		ok &= Module.ccall('FLAC__stream_encoder_set_total_samples_estimate', 'number', ['number', 'number'], [ encoder, total_samples ]);
		if (ok){
			return encoder;
		}
		return 0;
	},
	/** @deprecated use {@link #create_libflac_encoder} instead */
	init_libflac_encoder: function(){ return this.create_libflac_encoder.apply(this, arguments); },

	/**
	 * Create a decoder.
	 *
	 * @param {boolean} [is_verify]
	 * 				enable/disable checksum verification during decoding<br>
	 * 				DEFAULT: true
	 *
	 * @returns {number} the ID of the created decoder instance (or 0, if there was an error)
	 *
	 * @memberOf Flac#
	 * @function
	 */
	create_libflac_decoder: function(is_verify){
		is_verify = typeof is_verify === 'undefined'? 1 : is_verify + 0;
		var ok = true;
		var decoder = Module.ccall('FLAC__stream_decoder_new', 'number', [ ], [ ]);
		ok &= Module.ccall('FLAC__stream_decoder_set_md5_checking', 'number', ['number', 'number'], [ decoder, is_verify ]);
		if (ok){
			return decoder;
		}
		return 0;
	},
	/** @deprecated use {@link #create_libflac_decoder} instead */
	init_libflac_decoder: function(){ return this.create_libflac_decoder.apply(this, arguments); },

	/**
	 * Initialize the decoder.
	 *
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 *
	 * @param {Function} write_callback_fn
	 * 				the callback for writing the encoded Flac data:
	 * 				<pre>
	 * 				write_callback_fn(data: Uint8Array, numberOfBytes: Number, samples: Number, currentFrame: Number)
	 *
	 * 				data: the encoded Flac data
	 * 				numberOfBytes: the number of bytes in data
	 * 				samples: the number of samples encoded in data
	 * 				currentFrame: the number of the (current) encoded frame in data
	 * 				</pre>
	 *
	 * @param {Function} [metadata_callback_fn] OPTIONAL
	 * 				the callback for the metadata of the encoded Flac data:
	 * 				<pre>
	 * 				metadata_callback_fn(metadata: StreamMetadata)
	 *
	 * 				metadata.min_blocksize (Number): the minimal block size (bytes)
	 * 				metadata.max_blocksize (Number): the maximal block size (bytes)
	 * 				metadata.min_framesize (Number): the minimal frame size (bytes)
	 * 				metadata.max_framesize (Number): the maximal frame size (bytes)
	 * 				metadata.sampleRate (Number): the sample rate (Hz)
	 * 				metadata.channels (Number): the number of channels
	 * 				metadata.bitsPerSample (Number): bits per sample
	 * 				metadata.total_samples (Number): the total number of (decoded) samples
	 * 				metadata.md5sum (String): the MD5 checksum for the decoded data (if validation is active)
	 * 				</pre>
	 *
	 * @memberOf Flac#
	 * @function
	 */
	init_encoder_stream: function(encoder, write_callback_fn, metadata_callback_fn, client_data){

		client_data = client_data|0;

		if(typeof write_callback_fn !== 'function'){
			return FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_CALLBACKS;
		}
		setCallback(encoder, 'write', write_callback_fn);

		var __metadata_callback_fn_ptr = 0;
		if(typeof metadata_callback_fn === 'function'){
			setCallback(encoder, 'metadata', metadata_callback_fn);
			__metadata_callback_fn_ptr = metadata_fn_ptr;
		}

		var init_status = Module.ccall(
				'FLAC__stream_encoder_init_stream', 'number',
				['number', 'number', 'number', 'number', 'number', 'number'],
				[
				 	encoder,
				 	enc_write_fn_ptr,
				 	0,//	FLAC__StreamEncoderSeekCallback
				 	0,//	FLAC__StreamEncoderTellCallback
				 	__metadata_callback_fn_ptr,
				 	client_data
				]
		);

		return init_status;
	},

	/**
	 * Initialize the decoder.
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @param {Function} read_callback_fn
	 * 				the callback for reading the Flac data that should get decoded:
	 * 				<pre>
	 * 				read_callback_fn(numberOfBytes: Number) : {buffer: ArrayBuffer, readDataLength: number, error: boolean}
	 *
	 * 				numberOfBytes: the maximal number of bytes that the read callback can return
	 *
	 * 				RETURN.buffer: a TypedArray (e.g. Uint8Array) with the read data
	 * 				RETURN.readDataLength: the number of read data bytes. A number of 0 (zero) indicates that the end-of-stream is reached.
	 * 				RETURN.error: TRUE indicates that an error occurs (decoding will be aborted)
	 * 				</pre>
	 *
	 * @param {Function} write_callback_fn
	 * 				the callback for writing the decoded data:
	 * 				<pre>
	 * 				write_callback_fn(data: TypedArray, frameInfo: Metadata)
	 *
	 * 				data: the decoded PCM data as Uint8Array
	 * 				frameInfo: the metadata information for the decoded data with
	 * 				frameInfo.blocksize (Number): the block size (bytes)
	 * 				frameInfo.sampleRate (Number): the sample rate (Hz)
	 * 				frameInfo.channels (Number): number of channels
	 * 				frameInfo.bitsPerSample (Number): bits per sample
	 * 				frameInfo.number (Number):  the number of the decoded sample
	 * 				frameInfo.crc (String): the MD5 checksum for the decoded data (if validation is active)
	 * 				</pre>
	 *
	 * @param {Function} [error_callback_fn] OPTIONAL
	 * 				the error callback:
	 * 				<pre>
	 * 				error_callback_fn(errorCode: Number, errorMessage: String)
	 *
	 * 				where
	 * 					FLAC__STREAM_DECODER_ERROR_STATUS_LOST_SYNC        		An error in the stream caused the decoder to lose synchronization.
	 * 					FLAC__STREAM_DECODER_ERROR_STATUS_BAD_HEADER       		The decoder encountered a corrupted frame header.
	 * 					FLAC__STREAM_DECODER_ERROR_STATUS_FRAME_CRC_MISMATCH   	The frame's data did not match the CRC in the footer.
	 * 					FLAC__STREAM_DECODER_ERROR_STATUS_UNPARSEABLE_STREAM   	The decoder encountered reserved fields in use in the stream.
	 * 				</pre>
	 *
	 * @param {Function} [metadata_callback_fn] OPTIONAL
	 * 				callback for receiving the metadata of the decoded PCM data:
	 * 				<pre>
	 * 				metadata_callback_fn(metadata: StreamMetadata)
	 *
	 * 				metadata.min_blocksize (Number): the minimal block size (bytes)
	 * 				metadata.max_blocksize (Number): the maximal block size (bytes)
	 * 				metadata.min_framesize (Number): the minimal frame size (bytes)
	 * 				metadata.max_framesize (Number): the maximal frame size (bytes)
	 * 				metadata.sampleRate (Number): the sample rate (Hz)
	 * 				metadata.channels (Number): the number of channels
	 * 				metadata.bitsPerSample (Number): bits per sample
	 * 				metadata.total_samples (Number): the total number of (decoded) samples
	 * 				metadata.md5sum (String): the MD5 checksum for the decoded data (if validation is active)
	 * 				</pre>
	 *
	 * @memberOf Flac#
	 * @function
	 */
	init_decoder_stream: function(decoder, read_callback_fn, write_callback_fn, error_callback_fn, metadata_callback_fn, client_data){

		client_data = client_data|0;

		if(typeof read_callback_fn !== 'function'){
			return FLAC__STREAM_DECODER_INIT_STATUS_INVALID_CALLBACKS;
		}
		setCallback(decoder, 'read', read_callback_fn);

		if(typeof write_callback_fn !== 'function'){
			return FLAC__STREAM_DECODER_INIT_STATUS_INVALID_CALLBACKS;
		}
		setCallback(decoder, 'write', write_callback_fn);

		var __error_callback_fn_ptr = 0;
		if(typeof error_callback_fn === 'function'){
			setCallback(decoder, 'error', error_callback_fn);
			__error_callback_fn_ptr = dec_error_fn_ptr;
		}

		var __metadata_callback_fn_ptr = 0;
		if(typeof metadata_callback_fn === 'function'){
			setCallback(decoder, 'metadata', metadata_callback_fn);
			__metadata_callback_fn_ptr = metadata_fn_ptr;
		}

		var init_status = Module.ccall(
				'FLAC__stream_decoder_init_stream', 'number',
				[ 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number'],
				[
                   decoder,
                   dec_read_fn_ptr,
                   0,// FLAC__StreamDecoderSeekCallback
                   0,// FLAC__StreamDecoderTellCallback
                   0,//	FLAC__StreamDecoderLengthCallback
                   0,//	FLAC__StreamDecoderEofCallback
                   dec_write_fn_ptr,
                   __metadata_callback_fn_ptr,
                   __error_callback_fn_ptr,
                   client_data
                ]
		);

		return init_status;
	},

	/**
	 * Encode / submit data for encoding.
	 *
	 * This version allows you to supply the input data where the channels are interleaved into a
	 * single array (i.e. channel0_sample0, channel1_sample0, ... , channelN_sample0, channel0_sample1, ...).
	 *
	 * The samples need not be block-aligned but they must be sample-aligned, i.e. the first value should be
	 * channel0_sample0 and the last value channelN_sampleM.
	 *
	 * Each sample should be a signed integer, right-justified to the resolution set by bits-per-sample.
	 *
	 * For example, if the resolution is 16 bits per sample, the samples should all be in the range [-32768,32767].
	 *
	 *
	 * For applications where channel order is important, channels must follow the order as described in the frame header.
	 *
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 *
	 * @param {TypedArray} buffer
	 * 				the audio data in a typed array with signed integers (and size according to the set bits-per-sample setting)
	 *
	 * @param {number} num_of_samples
	 * 				the number of samples in buffer
	 *
	 * @returns {boolean} true if successful, else false; in this case, check the encoder state with FLAC__stream_encoder_get_state() to see what went wrong.
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_encoder_process_interleaved: function(encoder, buffer, num_of_samples){
		// get the length of the data in bytes
		var numBytes = buffer.length * buffer.BYTES_PER_ELEMENT;
		// console.log("DEBUG numBytes: " + numBytes);
		// malloc enough space for the data
		var ptr = Module._malloc(numBytes);
		// get a bytes-wise view on the newly allocated buffer
		var heapBytes= new Uint8Array(Module.HEAPU8.buffer, ptr, numBytes);
		// console.log("DEBUG heapBytes: " + heapBytes);
		// copy data into heapBytes
		heapBytes.set(new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength));// issue #11 (2): do use byteOffset and byteLength for copying the data in case the underlying buffer/ArrayBuffer of the TypedArray view is larger than the TypedArray
		var status = Module.ccall('FLAC__stream_encoder_process_interleaved', 'number',
				['number', 'number', 'number'],
				[encoder, heapBytes.byteOffset, num_of_samples]
		);
		Module._free(ptr);
		return status;
	},

	/**
	 * Decodes a single frame.
	 *
	 * To check decoding progress, use #FLAC__stream_decoder_get_state().
	 *
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 *
	 * @returns {boolean} FALSE if an error occurred
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_decoder_process_single: Module.cwrap('FLAC__stream_decoder_process_single', 'number', ['number']),

	/**
	 * Decodes data until end of stream.
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @returns {boolean} FALSE if an error occurred
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_decoder_process_until_end_of_stream: Module.cwrap('FLAC__stream_decoder_process_until_end_of_stream', 'number', ['number']),

	/**
	 * Decodes data until end of metadata.
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @returns {boolean} false if any fatal read, write, or memory allocation error occurred (meaning decoding must stop), else true.
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_decoder_process_until_end_of_metadata: Module.cwrap('FLAC__stream_decoder_process_until_end_of_metadata', 'number', ['number']),

	/**
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @returns {number} the decoder state:
	 * <pre>
	 * 0	FLAC__STREAM_DECODER_SEARCH_FOR_METADATA:		The decoder is ready to search for metadata
	 * 1	FLAC__STREAM_DECODER_READ_METADATA:				The decoder is ready to or is in the process of reading metadata
	 * 2	FLAC__STREAM_DECODER_SEARCH_FOR_FRAME_SYNC:		The decoder is ready to or is in the process of searching for the frame sync code
	 * 3	FLAC__STREAM_DECODER_READ_FRAME:				The decoder is ready to or is in the process of reading a frame
	 * 4	FLAC__STREAM_DECODER_END_OF_STREAM:				The decoder has reached the end of the stream
	 * 5	FLAC__STREAM_DECODER_OGG_ERROR:					An error occurred in the underlying Ogg layer
	 * 6	FLAC__STREAM_DECODER_SEEK_ERROR:				An error occurred while seeking. The decoder must be flushed with FLAC__stream_decoder_flush() or reset with FLAC__stream_decoder_reset() before decoding can continue
	 * 7	FLAC__STREAM_DECODER_ABORTED:					The decoder was aborted by the read callback
	 * 8	FLAC__STREAM_DECODER_MEMORY_ALLOCATION_ERROR:	An error occurred allocating memory. The decoder is in an invalid state and can no longer be used
	 * 9	FLAC__STREAM_DECODER_UNINITIALIZED:				The decoder is in the uninitialized state; one of the FLAC__stream_decoder_init_*() functions must be called before samples can be processed.
	 * </pre>
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_decoder_get_state: Module.cwrap('FLAC__stream_decoder_get_state', 'number', ['number']),

	/**
	 *
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 *
	 * @returns {number} the encoder state:
	 * <pre>
	 * 0	FLAC__STREAM_ENCODER_OK								The encoder is in the normal OK state and samples can be processed.
	 * 1	FLAC__STREAM_ENCODER_UNINITIALIZED					The encoder is in the uninitialized state; one of the FLAC__stream_encoder_init_*() functions must be called before samples can be processed.
	 * 2	FLAC__STREAM_ENCODER_OGG_ERROR						An error occurred in the underlying Ogg layer.
	 * 3	FLAC__STREAM_ENCODER_VERIFY_DECODER_ERROR			An error occurred in the underlying verify stream decoder; check FLAC__stream_encoder_get_verify_decoder_state().
	 * 4	FLAC__STREAM_ENCODER_VERIFY_MISMATCH_IN_AUDIO_DATA	The verify decoder detected a mismatch between the original audio signal and the decoded audio signal.
	 * 5	FLAC__STREAM_ENCODER_CLIENT_ERROR					One of the callbacks returned a fatal error.
	 * 6	FLAC__STREAM_ENCODER_IO_ERROR						An I/O error occurred while opening/reading/writing a file. Check errno.
	 * 7	FLAC__STREAM_ENCODER_FRAMING_ERROR					An error occurred while writing the stream; usually, the write_callback returned an error.
	 * 8	FLAC__STREAM_ENCODER_MEMORY_ALLOCATION_ERROR		Memory allocation failed.
	 * </pre>
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_encoder_get_state:  Module.cwrap('FLAC__stream_encoder_get_state', 'number', ['number']),

	/**
	 * Get if MD5 verification is enabled for decoder
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @returns {boolean} TRUE if MD5 verification is enabled
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_decoder_get_md5_checking: Module.cwrap('FLAC__stream_decoder_get_md5_checking', 'number', ['number']),

//	/** @returns {boolean} FALSE if the decoder is already initialized, else TRUE. */
//	FLAC__stream_decoder_set_md5_checking: Module.cwrap('FLAC__stream_decoder_set_md5_checking', 'number', ['number', 'number']),

	/**
	 * Finish the encoding process.
	 *
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 *
	 * @returns {boolean} false if an error occurred processing the last frame;
	 * 					 or if verify mode is set, there was a verify mismatch; else true.
	 * 					 If false, caller should check the state with FLAC__stream_encoder_get_state()
	 * 					 for more information about the error.
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_encoder_finish: Module.cwrap('FLAC__stream_encoder_finish', 'number', [ 'number' ]),
	/**
	 * Finish the decoding process.
	 *
	 * The decoder can be reused, after initializing it again.
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @returns {boolean} false if MD5 checking is on AND a STREAMINFO block was available AND the MD5 signature in
	 * 						 the STREAMINFO block was non-zero AND the signature does not match the one computed by the decoder;
	 * 						 else true.
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_decoder_finish: Module.cwrap('FLAC__stream_decoder_finish', 'number', [ 'number' ]),
	/**
	 * Reset the decoder for reuse.
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @returns {boolean} true if successful
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_decoder_reset: Module.cwrap('FLAC__stream_decoder_reset', 'number', [ 'number' ]),
	/**
	 * Delete the encoder instance, and free up its resources.
	 *
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_encoder_delete: function(encoder){
		this._clear_enc_cb(encoder);//<- remove callback references
		return Module.ccall('FLAC__stream_encoder_delete', 'number', [ 'number' ], [encoder]);
	},
	/**
	 * Delete the decoder instance, and free up its resources.
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_decoder_delete: function(decoder){
		this._clear_dec_cb(decoder);//<- remove callback references
		return Module.ccall('FLAC__stream_decoder_delete', 'number', [ 'number' ], [decoder]);
	}

};//END: var _exported = {
return _exported;

}));//END: UMD wrapper


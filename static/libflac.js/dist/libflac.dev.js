// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// libflac.js - port of libflac to JavaScript using emscripten


(function (root, factory) {

	if (typeof define === 'function' && define.amd) {
		// AMD. Register as an anonymous module.
		define(['module', 'require'], factory.bind(null, root));
	} else if (typeof module === 'object' && module.exports) {
		// Node. Does not work with strict CommonJS, but
		// only CommonJS-like environments that support module.exports,
		// like Node.

		// use process.env (if available) for reading Flac environment settings:
		var env = typeof process !== 'undefined' && process && process.env? process.env : root;
		factory(env, module, module.require);
	} else {
		// Browser globals
		root.Flac = factory(root);
	}

}(typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : this, function (global, expLib, require) {
'use strict';

var Module = Module || {};
var _flac_ready = false;
//in case resources are loaded asynchronously (e.g. *.mem file for minified version): setup "ready" handling
Module["onRuntimeInitialized"] = function(){
	_flac_ready = true;
	if(!_exported){
		//if _exported is not yet set (may happen, in case initialization was strictly synchronously),
		// do "pause" until sync initialization has run through
		setTimeout(function(){do_fire_event('ready', [{type: 'ready', target: _exported}], true);}, 0);
	} else {
		do_fire_event('ready', [{type: 'ready', target: _exported}], true);
	}
};

if(global && global.FLAC_SCRIPT_LOCATION){

	Module["locateFile"] = function(fileName){
		var path = global.FLAC_SCRIPT_LOCATION || '';
		if(path[fileName]){
			return path[fileName];
		}
		path += path && !/\/$/.test(path)? '/' : '';
		return path + fileName;
	};

	//NOTE will be overwritten if emscripten has env specific implementation for this
	var readBinary = function(filePath){

		//for Node: use default implementation (copied from generated code):
		if(ENVIRONMENT_IS_NODE){
			var ret = read_(filePath, true);
			if (!ret.buffer) {
				ret = new Uint8Array(ret);
			}
			assert(ret.buffer);
			return ret;
		}

		//otherwise: try "fallback" to AJAX
		return new Promise(function(resolve, reject){
			var xhr = new XMLHttpRequest();
			xhr.responseType = "arraybuffer";
			xhr.addEventListener("load", function(evt){
				resolve(xhr.response);
			});
			xhr.addEventListener("error", function(err){
				reject(err);
			});
			xhr.open("GET", filePath);
			xhr.send();
		});
	};
}

//fallback for fetch && support file://-protocol: try read as binary if fetch fails
if(global && typeof global.fetch === 'function'){
	var _fetch = global.fetch;
	global.fetch = function(url){
		return _fetch.apply(null, arguments).catch(function(err){
			try{
				var result = readBinary(url);
				if(result && result.catch){
					result.catch(function(_err){throw err});
				}
				return result;
			} catch(_err){
				throw err;
			}
		});
	};
}



// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
// N.b. Electron.js environment is simultaneously a NODE-environment, but
// also a web environment.
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string';
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}



// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

var nodeFS;
var nodePath;

if (ENVIRONMENT_IS_NODE) {
  if (ENVIRONMENT_IS_WORKER) {
    scriptDirectory = require('path').dirname(scriptDirectory) + '/';
  } else {
    scriptDirectory = __dirname + '/';
  }


  read_ = function shell_read(filename, binary) {
    var ret = tryParseAsDataURI(filename);
    if (ret) {
      return binary ? ret : ret.toString();
    }
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    return nodeFS['readFileSync'](filename, binary ? null : 'utf8');
  };

  readBinary = function readBinary(filename) {
    var ret = read_(filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };




  if (process['argv'].length > 1) {
    thisProgram = process['argv'][1].replace(/\\/g, '/');
  }

  arguments_ = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  process['on']('unhandledRejection', abort);

  quit_ = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };



} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit === 'function') {
    quit_ = function(status) {
      quit(status);
    };
  }

  if (typeof print !== 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console === 'undefined') console = /** @type{!Console} */({});
    console.log = /** @type{!function(this:Console, ...*): undefined} */ (print);
    console.warn = console.error = /** @type{!function(this:Console, ...*): undefined} */ (typeof printErr !== 'undefined' ? printErr : print);
  }


} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {


  read_ = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };




  }

  setWindowTitle = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}


// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.
if (Module['arguments']) arguments_ = Module['arguments'];if (!Object.getOwnPropertyDescriptor(Module, 'arguments')) Object.defineProperty(Module, 'arguments', { configurable: true, get: function() { abort('Module.arguments has been replaced with plain arguments_') } });
if (Module['thisProgram']) thisProgram = Module['thisProgram'];if (!Object.getOwnPropertyDescriptor(Module, 'thisProgram')) Object.defineProperty(Module, 'thisProgram', { configurable: true, get: function() { abort('Module.thisProgram has been replaced with plain thisProgram') } });
if (Module['quit']) quit_ = Module['quit'];if (!Object.getOwnPropertyDescriptor(Module, 'quit')) Object.defineProperty(Module, 'quit', { configurable: true, get: function() { abort('Module.quit has been replaced with plain quit_') } });

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] === 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] === 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] === 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] === 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
assert(typeof Module['TOTAL_MEMORY'] === 'undefined', 'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY');
if (!Object.getOwnPropertyDescriptor(Module, 'read')) Object.defineProperty(Module, 'read', { configurable: true, get: function() { abort('Module.read has been replaced with plain read_') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readAsync')) Object.defineProperty(Module, 'readAsync', { configurable: true, get: function() { abort('Module.readAsync has been replaced with plain readAsync') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readBinary')) Object.defineProperty(Module, 'readBinary', { configurable: true, get: function() { abort('Module.readBinary has been replaced with plain readBinary') } });
// TODO: add when SDL2 is fixed if (!Object.getOwnPropertyDescriptor(Module, 'setWindowTitle')) Object.defineProperty(Module, 'setWindowTitle', { configurable: true, get: function() { abort('Module.setWindowTitle has been replaced with plain setWindowTitle') } });
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';


// TODO remove when SDL2 is fixed (also see above)



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready

/** @suppress{duplicate} */
var stackSave;
/** @suppress{duplicate} */
var stackRestore;
/** @suppress{duplicate} */
var stackAlloc;

stackSave = stackRestore = stackAlloc = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  abort('staticAlloc is no longer available at runtime; instead, perform static allocations at compile time (using makeStaticAlloc)');
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  assert(end <= HEAP8.length, 'failure to dynamicAlloc - memory growth etc. is not supported there, call malloc/sbrk directly');
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = Number(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}






// Wraps a JS function as a wasm function with a given signature.
function convertJsFunctionToWasm(func, sig) {
  return func;
}

var freeTableIndexes = [];

// Add a wasm function to the table.
function addFunctionWasm(func, sig) {
  var table = wasmTable;
  var ret;
  // Reuse a free index if there is one, otherwise grow.
  if (freeTableIndexes.length) {
    ret = freeTableIndexes.pop();
  } else {
    ret = table.length;
    // Grow the table
    try {
      table.grow(1);
    } catch (err) {
      if (!(err instanceof RangeError)) {
        throw err;
      }
      throw 'Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.';
    }
  }

  // Set the new value.
  try {
    // Attempting to call this with JS function will cause of table.set() to fail
    table.set(ret, func);
  } catch (err) {
    if (!(err instanceof TypeError)) {
      throw err;
    }
    assert(typeof sig !== 'undefined', 'Missing signature argument to addFunction');
    var wrapped = convertJsFunctionToWasm(func, sig);
    table.set(ret, wrapped);
  }

  return ret;
}

function removeFunctionWasm(index) {
  freeTableIndexes.push(index);
}

// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {
  assert(typeof func !== 'undefined');

  return addFunctionWasm(func, sig);
}

function removeFunction(index) {
  removeFunctionWasm(index);
}



var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}





function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

/** @param {Array=} args */
function dynCall(sig, ptr, args) {
  if (args && args.length) {
    // j (64-bit integer) must be passed in as two numbers [low 32, high 32].
    assert(args.length === sig.substring(1).replace(/j/g, '--').length);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 1024;




// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html


var wasmBinary;if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];if (!Object.getOwnPropertyDescriptor(Module, 'wasmBinary')) Object.defineProperty(Module, 'wasmBinary', { configurable: true, get: function() { abort('Module.wasmBinary has been replaced with plain wasmBinary') } });
var noExitRuntime;if (Module['noExitRuntime']) noExitRuntime = Module['noExitRuntime'];if (!Object.getOwnPropertyDescriptor(Module, 'noExitRuntime')) Object.defineProperty(Module, 'noExitRuntime', { configurable: true, get: function() { abort('Module.noExitRuntime has been replaced with plain noExitRuntime') } });


// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.


// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
/** @suppress{const} */
var
WebAssembly = {
  Memory: /** @constructor */ function(opts) {
    return {
      buffer: new ArrayBuffer(opts['initial'] * 65536),
      grow: function(amount) {
        var oldBuffer = this.buffer;
        var ret = __growWasmMemory(amount);
        assert(this.buffer !== oldBuffer); // the call should have updated us
        return ret;
      }
    };
  },

  Table: function(opts) {
    var ret = new Array(opts['initial']);
    ret.grow = function(by) {
      if (ret.length >= 22 + 5) {
        abort('Unable to grow wasm table. Use a higher value for RESERVED_FUNCTION_POINTERS or set ALLOW_TABLE_GROWTH.')
      }
      ret.push(null);
    };
    ret.set = function(i, func) {
      ret[i] = func;
    };
    ret.get = function(i) {
      return ret[i];
    };
    return ret;
  },

  Module: function(binary) {
    // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
    // the main JS
    return {};
  },

  Instance: function(module, info) {
    // TODO: use the module and info somehow - right now the wasm2js output is embedded in
    // the main JS
    // This will be replaced by the actual wasm2js code.
    var exports = (
function instantiate(asmLibraryArg, wasmMemory, wasmTable) {


  var scratchBuffer = new ArrayBuffer(8);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      
  function legalimport$wasm2js_scratch_load_i64() {
    if (typeof setTempRet0 === 'function') setTempRet0(i32ScratchView[1]);
    return i32ScratchView[0];
  }
      
  function legalimport$wasm2js_scratch_store_i64(low, high) {
    i32ScratchView[0] = low;
    i32ScratchView[1] = high;
  }
      
  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[0] = value;
  }
      
function asmFunc(global, env, buffer) {
 var memory = env.memory;
 var FUNCTION_TABLE = wasmTable;
 var HEAP8 = new global.Int8Array(buffer);
 var HEAP16 = new global.Int16Array(buffer);
 var HEAP32 = new global.Int32Array(buffer);
 var HEAPU8 = new global.Uint8Array(buffer);
 var HEAPU16 = new global.Uint16Array(buffer);
 var HEAPU32 = new global.Uint32Array(buffer);
 var HEAPF32 = new global.Float32Array(buffer);
 var HEAPF64 = new global.Float64Array(buffer);
 var Math_imul = global.Math.imul;
 var Math_fround = global.Math.fround;
 var Math_abs = global.Math.abs;
 var Math_clz32 = global.Math.clz32;
 var Math_min = global.Math.min;
 var Math_max = global.Math.max;
 var Math_floor = global.Math.floor;
 var Math_ceil = global.Math.ceil;
 var Math_sqrt = global.Math.sqrt;
 var abort = env.abort;
 var nan = global.NaN;
 var infinity = global.Infinity;
 var emscripten_resize_heap = env.emscripten_resize_heap;
 var abort = env.abort;
 var emscripten_memcpy_big = env.emscripten_memcpy_big;
 var __wasi_fd_close = env.fd_close;
 var __wasi_fd_write = env.fd_write;
 var __wasi_fd_read = env.fd_read;
 var round = env.round;
 var __handle_stack_overflow = env.__handle_stack_overflow;
 var setTempRet0 = env.setTempRet0;
 var legalimport$__wasi_fd_seek = env.fd_seek;
 var getTempRet0 = env.getTempRet0;
 var global$0 = 5257040;
 var global$1 = 0;
 var global$2 = 1;
 var global$3 = 6400;
 var global$4 = 10864;
 var global$5 = 6439;
 var global$6 = 1280;
 var global$7 = 6680;
 var global$8 = 6484;
 var global$9 = 7536;
 var global$10 = 5;
 var global$11 = 6;
 var global$12 = 6592;
 var global$13 = 6596;
 var global$14 = 6600;
 var global$15 = 6452;
 var global$16 = 6456;
 var global$17 = 6460;
 var global$18 = 6464;
 var global$19 = 6468;
 var global$20 = 6472;
 var global$21 = 6476;
 var global$22 = 6480;
 var global$23 = 6496;
 var global$24 = 6492;
 var global$25 = 6488;
 var global$26 = 6540;
 var global$27 = 6544;
 var global$28 = 6548;
 var global$29 = 6552;
 var global$30 = 6556;
 var global$31 = 6520;
 var global$32 = 6508;
 var global$33 = 6504;
 var global$34 = 6500;
 var global$35 = 6536;
 var global$36 = 6532;
 var global$37 = 6528;
 var global$38 = 6524;
 var global$39 = 6516;
 var global$40 = 6512;
 var global$41 = 6560;
 var global$42 = 6564;
 var global$43 = 6568;
 var global$44 = 6572;
 var global$45 = 6576;
 var global$46 = 6580;
 var global$47 = 6584;
 var global$48 = 6588;
 var global$49 = 6676;
 var global$50 = 6652;
 var global$51 = 6648;
 var global$52 = 6644;
 var global$53 = 6668;
 var global$54 = 6672;
 var global$55 = 6656;
 var global$56 = 6660;
 var global$57 = 6664;
 var global$58 = 10868;
 var global$59 = 6608;
 var global$60 = 6604;
 var global$61 = 6612;
 var global$62 = 6616;
 var global$63 = 6620;
 var global$64 = 6624;
 var global$65 = 6628;
 var global$66 = 6632;
 var global$67 = 6636;
 var global$68 = 6640;
 var global$69 = 6696;
 var global$70 = 6684;
 var global$71 = 6688;
 var global$72 = 6692;
 var global$73 = 6704;
 var global$74 = 6708;
 var global$75 = 6700;
 var global$76 = 7572;
 var global$77 = 12;
 var global$78 = 13;
 var global$79 = 14;
 var global$80 = 15;
 var global$81 = 17;
 var global$82 = 6448;
 var global$83 = 6444;
 var global$84 = 14152;
 var global$85 = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
;
 function emscripten_get_sbrk_ptr() {
  return 14160 | 0;
 }
 
 function __wasm_call_ctors() {
  
 }
 
 function __errno_location() {
  return 11568 | 0;
 }
 
 function sbrk($0) {
  $0 = $0 | 0;
  var $1 = 0, $3 = 0, $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1 = emscripten_get_sbrk_ptr() | 0;
  $2 = __wasm_memory_size();
  label$1 : {
   $3 = HEAP32[$1 >> 2] | 0;
   $0 = $3 + (($0 + 3 | 0) & -4 | 0) | 0;
   if ($0 >>> 0 <= ($2 << 16 | 0) >>> 0) {
    break label$1
   }
   if (emscripten_resize_heap($0 | 0) | 0) {
    break label$1
   }
   (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 48), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   return -1 | 0;
  }
  HEAP32[$1 >> 2] = $0;
  return $3 | 0;
 }
 
 function memset($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $4 = 0, $6 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $6$hi = 0, i64toi32_i32$3 = 0, $5 = 0, $14 = 0, $104$hi = 0;
  label$1 : {
   if (!$2) {
    break label$1
   }
   $3 = $2 + $0 | 0;
   HEAP8[($3 + -1 | 0) >> 0] = $1;
   HEAP8[$0 >> 0] = $1;
   if ($2 >>> 0 < 3 >>> 0) {
    break label$1
   }
   HEAP8[($3 + -2 | 0) >> 0] = $1;
   HEAP8[($0 + 1 | 0) >> 0] = $1;
   HEAP8[($3 + -3 | 0) >> 0] = $1;
   HEAP8[($0 + 2 | 0) >> 0] = $1;
   if ($2 >>> 0 < 7 >>> 0) {
    break label$1
   }
   HEAP8[($3 + -4 | 0) >> 0] = $1;
   HEAP8[($0 + 3 | 0) >> 0] = $1;
   if ($2 >>> 0 < 9 >>> 0) {
    break label$1
   }
   $4 = (0 - $0 | 0) & 3 | 0;
   $3 = $0 + $4 | 0;
   $1 = Math_imul($1 & 255 | 0, 16843009);
   HEAP32[$3 >> 2] = $1;
   $4 = ($2 - $4 | 0) & -4 | 0;
   $2 = $3 + $4 | 0;
   HEAP32[($2 + -4 | 0) >> 2] = $1;
   if ($4 >>> 0 < 9 >>> 0) {
    break label$1
   }
   HEAP32[($3 + 8 | 0) >> 2] = $1;
   HEAP32[($3 + 4 | 0) >> 2] = $1;
   HEAP32[($2 + -8 | 0) >> 2] = $1;
   HEAP32[($2 + -12 | 0) >> 2] = $1;
   if ($4 >>> 0 < 25 >>> 0) {
    break label$1
   }
   HEAP32[($3 + 24 | 0) >> 2] = $1;
   HEAP32[($3 + 20 | 0) >> 2] = $1;
   HEAP32[($3 + 16 | 0) >> 2] = $1;
   HEAP32[($3 + 12 | 0) >> 2] = $1;
   HEAP32[($2 + -16 | 0) >> 2] = $1;
   HEAP32[($2 + -20 | 0) >> 2] = $1;
   HEAP32[($2 + -24 | 0) >> 2] = $1;
   HEAP32[($2 + -28 | 0) >> 2] = $1;
   $5 = $3 & 4 | 0 | 24 | 0;
   $2 = $4 - $5 | 0;
   if ($2 >>> 0 < 32 >>> 0) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   $6 = $1;
   $6$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $14 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $14 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   $104$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$1 = $104$hi;
   i64toi32_i32$0 = $14;
   i64toi32_i32$2 = $6$hi;
   i64toi32_i32$3 = $6;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $6 = i64toi32_i32$0 | $6 | 0;
   $6$hi = i64toi32_i32$2;
   $1 = $3 + $5 | 0;
   label$2 : while (1) {
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$0 = $1;
    HEAP32[($1 + 24 | 0) >> 2] = $6;
    HEAP32[($1 + 28 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$0 = $1;
    HEAP32[($1 + 16 | 0) >> 2] = $6;
    HEAP32[($1 + 20 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$0 = $1;
    HEAP32[($1 + 8 | 0) >> 2] = $6;
    HEAP32[($1 + 12 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$0 = $1;
    HEAP32[$1 >> 2] = $6;
    HEAP32[($1 + 4 | 0) >> 2] = i64toi32_i32$2;
    $1 = $1 + 32 | 0;
    $2 = $2 + -32 | 0;
    if ($2 >>> 0 > 31 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0 | 0;
 }
 
 function memcpy($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0, $5 = 0;
  label$1 : {
   if ($2 >>> 0 < 512 >>> 0) {
    break label$1
   }
   emscripten_memcpy_big($0 | 0, $1 | 0, $2 | 0) | 0;
   return $0 | 0;
  }
  $3 = $0 + $2 | 0;
  label$2 : {
   label$3 : {
    if (($1 ^ $0 | 0) & 3 | 0) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if (($2 | 0) >= (1 | 0)) {
       break label$5
      }
      $2 = $0;
      break label$4;
     }
     label$6 : {
      if ($0 & 3 | 0) {
       break label$6
      }
      $2 = $0;
      break label$4;
     }
     $2 = $0;
     label$7 : while (1) {
      HEAP8[$2 >> 0] = HEAPU8[$1 >> 0] | 0;
      $1 = $1 + 1 | 0;
      $2 = $2 + 1 | 0;
      if ($2 >>> 0 >= $3 >>> 0) {
       break label$4
      }
      if ($2 & 3 | 0) {
       continue label$7
      }
      break label$7;
     };
    }
    label$8 : {
     $4 = $3 & -4 | 0;
     if ($4 >>> 0 < 64 >>> 0) {
      break label$8
     }
     $5 = $4 + -64 | 0;
     if ($2 >>> 0 > $5 >>> 0) {
      break label$8
     }
     label$9 : while (1) {
      HEAP32[$2 >> 2] = HEAP32[$1 >> 2] | 0;
      HEAP32[($2 + 4 | 0) >> 2] = HEAP32[($1 + 4 | 0) >> 2] | 0;
      HEAP32[($2 + 8 | 0) >> 2] = HEAP32[($1 + 8 | 0) >> 2] | 0;
      HEAP32[($2 + 12 | 0) >> 2] = HEAP32[($1 + 12 | 0) >> 2] | 0;
      HEAP32[($2 + 16 | 0) >> 2] = HEAP32[($1 + 16 | 0) >> 2] | 0;
      HEAP32[($2 + 20 | 0) >> 2] = HEAP32[($1 + 20 | 0) >> 2] | 0;
      HEAP32[($2 + 24 | 0) >> 2] = HEAP32[($1 + 24 | 0) >> 2] | 0;
      HEAP32[($2 + 28 | 0) >> 2] = HEAP32[($1 + 28 | 0) >> 2] | 0;
      HEAP32[($2 + 32 | 0) >> 2] = HEAP32[($1 + 32 | 0) >> 2] | 0;
      HEAP32[($2 + 36 | 0) >> 2] = HEAP32[($1 + 36 | 0) >> 2] | 0;
      HEAP32[($2 + 40 | 0) >> 2] = HEAP32[($1 + 40 | 0) >> 2] | 0;
      HEAP32[($2 + 44 | 0) >> 2] = HEAP32[($1 + 44 | 0) >> 2] | 0;
      HEAP32[($2 + 48 | 0) >> 2] = HEAP32[($1 + 48 | 0) >> 2] | 0;
      HEAP32[($2 + 52 | 0) >> 2] = HEAP32[($1 + 52 | 0) >> 2] | 0;
      HEAP32[($2 + 56 | 0) >> 2] = HEAP32[($1 + 56 | 0) >> 2] | 0;
      HEAP32[($2 + 60 | 0) >> 2] = HEAP32[($1 + 60 | 0) >> 2] | 0;
      $1 = $1 + 64 | 0;
      $2 = $2 + 64 | 0;
      if ($2 >>> 0 <= $5 >>> 0) {
       continue label$9
      }
      break label$9;
     };
    }
    if ($2 >>> 0 >= $4 >>> 0) {
     break label$2
    }
    label$10 : while (1) {
     HEAP32[$2 >> 2] = HEAP32[$1 >> 2] | 0;
     $1 = $1 + 4 | 0;
     $2 = $2 + 4 | 0;
     if ($2 >>> 0 < $4 >>> 0) {
      continue label$10
     }
     break label$2;
    };
   }
   label$11 : {
    if ($3 >>> 0 >= 4 >>> 0) {
     break label$11
    }
    $2 = $0;
    break label$2;
   }
   label$12 : {
    $4 = $3 + -4 | 0;
    if ($4 >>> 0 >= $0 >>> 0) {
     break label$12
    }
    $2 = $0;
    break label$2;
   }
   $2 = $0;
   label$13 : while (1) {
    HEAP8[$2 >> 0] = HEAPU8[$1 >> 0] | 0;
    HEAP8[($2 + 1 | 0) >> 0] = HEAPU8[($1 + 1 | 0) >> 0] | 0;
    HEAP8[($2 + 2 | 0) >> 0] = HEAPU8[($1 + 2 | 0) >> 0] | 0;
    HEAP8[($2 + 3 | 0) >> 0] = HEAPU8[($1 + 3 | 0) >> 0] | 0;
    $1 = $1 + 4 | 0;
    $2 = $2 + 4 | 0;
    if ($2 >>> 0 <= $4 >>> 0) {
     continue label$13
    }
    break label$13;
   };
  }
  label$14 : {
   if ($2 >>> 0 >= $3 >>> 0) {
    break label$14
   }
   label$15 : while (1) {
    HEAP8[$2 >> 0] = HEAPU8[$1 >> 0] | 0;
    $1 = $1 + 1 | 0;
    $2 = $2 + 1 | 0;
    if (($2 | 0) != ($3 | 0)) {
     continue label$15
    }
    break label$15;
   };
  }
  return $0 | 0;
 }
 
 function dummy($0) {
  $0 = $0 | 0;
  return $0 | 0;
 }
 
 function __stdio_close($0) {
  $0 = $0 | 0;
  return __wasi_fd_close(dummy(HEAP32[($0 + 60 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0;
 }
 
 function __wasi_syscall_ret($0) {
  $0 = $0 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   if ($0) {
    break label$1
   }
   return 0 | 0;
  }
  (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = $0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  return -1 | 0;
 }
 
 function __stdio_write($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $7 = 0, $6 = 0, $8 = 0, $10 = 0, $9 = 0;
  label$1 : {
   $3 = global$0 - 32 | 0;
   $9 = $3;
   if ($3 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $9;
  }
  $4 = HEAP32[($0 + 28 | 0) >> 2] | 0;
  HEAP32[($3 + 16 | 0) >> 2] = $4;
  $5 = HEAP32[($0 + 20 | 0) >> 2] | 0;
  HEAP32[($3 + 28 | 0) >> 2] = $2;
  HEAP32[($3 + 24 | 0) >> 2] = $1;
  $1 = $5 - $4 | 0;
  HEAP32[($3 + 20 | 0) >> 2] = $1;
  $5 = $1 + $2 | 0;
  $6 = 2;
  $1 = $3 + 16 | 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      if (__wasi_syscall_ret(__wasi_fd_write(HEAP32[($0 + 60 | 0) >> 2] | 0 | 0, $3 + 16 | 0 | 0, 2 | 0, $3 + 12 | 0 | 0) | 0 | 0) | 0) {
       break label$6
      }
      label$7 : while (1) {
       $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
       if (($5 | 0) == ($4 | 0)) {
        break label$5
       }
       if (($4 | 0) <= (-1 | 0)) {
        break label$4
       }
       $7 = HEAP32[($1 + 4 | 0) >> 2] | 0;
       $8 = $4 >>> 0 > $7 >>> 0;
       $1 = $8 ? $1 + 8 | 0 : $1;
       $7 = $4 - ($8 ? $7 : 0) | 0;
       HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + $7 | 0;
       HEAP32[($1 + 4 | 0) >> 2] = (HEAP32[($1 + 4 | 0) >> 2] | 0) - $7 | 0;
       $5 = $5 - $4 | 0;
       $6 = $6 - $8 | 0;
       if (!(__wasi_syscall_ret(__wasi_fd_write(HEAP32[($0 + 60 | 0) >> 2] | 0 | 0, $1 | 0, $6 | 0, $3 + 12 | 0 | 0) | 0 | 0) | 0)) {
        continue label$7
       }
       break label$7;
      };
     }
     HEAP32[($3 + 12 | 0) >> 2] = -1;
     if (($5 | 0) != (-1 | 0)) {
      break label$4
     }
    }
    $1 = HEAP32[($0 + 44 | 0) >> 2] | 0;
    HEAP32[($0 + 28 | 0) >> 2] = $1;
    HEAP32[($0 + 20 | 0) >> 2] = $1;
    HEAP32[($0 + 16 | 0) >> 2] = $1 + (HEAP32[($0 + 48 | 0) >> 2] | 0) | 0;
    $4 = $2;
    break label$3;
   }
   $4 = 0;
   HEAP32[($0 + 28 | 0) >> 2] = 0;
   HEAP32[($0 + 16 | 0) >> 2] = 0;
   HEAP32[($0 + 20 | 0) >> 2] = 0;
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 0 | 32 | 0;
   if (($6 | 0) == (2 | 0)) {
    break label$3
   }
   $4 = $2 - (HEAP32[($1 + 4 | 0) >> 2] | 0) | 0;
  }
  label$8 : {
   $10 = $3 + 32 | 0;
   if ($10 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $10;
  }
  return $4 | 0;
 }
 
 function __stdio_seek($0, $1, $1$hi, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  var $3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5 = 0, $4 = 0;
  label$1 : {
   $3 = global$0 - 16 | 0;
   $4 = $3;
   if ($3 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $4;
  }
  i64toi32_i32$0 = $1$hi;
  __wasi_syscall_ret(legalfunc$__wasi_fd_seek(HEAP32[($0 + 60 | 0) >> 2] | 0 | 0, $1 | 0, i64toi32_i32$0 | 0, $2 & 255 | 0 | 0, $3 + 8 | 0 | 0) | 0 | 0) | 0;
  i64toi32_i32$0 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  $1 = i64toi32_i32$0;
  $1$hi = i64toi32_i32$1;
  label$3 : {
   $5 = $3 + 16 | 0;
   if ($5 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $5;
  }
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$0 = $1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function __lockfile($0) {
  $0 = $0 | 0;
  return 1 | 0;
 }
 
 function __unlockfile($0) {
  $0 = $0 | 0;
 }
 
 function memchr($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = ($2 | 0) != (0 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (!$2) {
       break label$4
      }
      if (!($0 & 3 | 0)) {
       break label$4
      }
      $4 = $1 & 255 | 0;
      label$5 : while (1) {
       if ((HEAPU8[$0 >> 0] | 0 | 0) == ($4 | 0)) {
        break label$3
       }
       $0 = $0 + 1 | 0;
       $2 = $2 + -1 | 0;
       $3 = ($2 | 0) != (0 | 0);
       if (!$2) {
        break label$4
       }
       if ($0 & 3 | 0) {
        continue label$5
       }
       break label$5;
      };
     }
     if (!$3) {
      break label$2
     }
    }
    if ((HEAPU8[$0 >> 0] | 0 | 0) == ($1 & 255 | 0 | 0)) {
     break label$1
    }
    label$6 : {
     label$7 : {
      if ($2 >>> 0 < 4 >>> 0) {
       break label$7
      }
      $4 = Math_imul($1 & 255 | 0, 16843009);
      label$8 : while (1) {
       $3 = (HEAP32[$0 >> 2] | 0) ^ $4 | 0;
       if ((($3 ^ -1 | 0) & ($3 + -16843009 | 0) | 0) & -2139062144 | 0) {
        break label$6
       }
       $0 = $0 + 4 | 0;
       $2 = $2 + -4 | 0;
       if ($2 >>> 0 > 3 >>> 0) {
        continue label$8
       }
       break label$8;
      };
     }
     if (!$2) {
      break label$2
     }
    }
    $3 = $1 & 255 | 0;
    label$9 : while (1) {
     if ((HEAPU8[$0 >> 0] | 0 | 0) == ($3 | 0)) {
      break label$1
     }
     $0 = $0 + 1 | 0;
     $2 = $2 + -1 | 0;
     if ($2) {
      continue label$9
     }
     break label$9;
    };
   }
   return 0 | 0;
  }
  return $0 | 0;
 }
 
 function frexp($0, $1) {
  $0 = +$0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $2 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $3 = 0, $10 = 0, $3$hi = 0;
  label$1 : {
   wasm2js_scratch_store_f64(+$0);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $3 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $3$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $3;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 52;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $10 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $10 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2 = $10 & 2047 | 0;
   if (($2 | 0) == (2047 | 0)) {
    break label$1
   }
   label$2 : {
    if ($2) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if ($0 != 0.0) {
       break label$4
      }
      $2 = 0;
      break label$3;
     }
     $0 = +frexp(+($0 * 18446744073709551615.0), $1 | 0);
     $2 = (HEAP32[$1 >> 2] | 0) + -64 | 0;
    }
    HEAP32[$1 >> 2] = $2;
    return +$0;
   }
   HEAP32[$1 >> 2] = $2 + -1022 | 0;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$0 = $3;
   i64toi32_i32$2 = -2146435073;
   i64toi32_i32$3 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 1071644672;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $0 = +wasm2js_scratch_load_f64();
  }
  return +$0;
 }
 
 function __ashlti3($0, $1, $1$hi, $2, $2$hi, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $11$hi = 0, $18$hi = 0, $19 = 0, $19$hi = 0, $4 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $18 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $18 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $2 = $18;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $1 = 0;
    $1$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3) {
    break label$1
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $20 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $20 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $19 = $20;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = 0;
   $4 = $3;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $21 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $21 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $22 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $22 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $1 = $22;
   $1$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0;
  HEAP32[i64toi32_i32$0 >> 2] = $1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function __lshrti3($0, $1, $1$hi, $2, $2$hi, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $11$hi = 0, $18$hi = 0, $19 = 0, $19$hi = 0, $4 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = $2;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $18 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $18 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $1 = $18;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $2 = 0;
    $2$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $20 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $20 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $19 = $20;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = 0;
   $4 = $3;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $21 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $21 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $22 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $22 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2 = $22;
   $2$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0;
  HEAP32[i64toi32_i32$0 >> 2] = $1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function __trunctfdf2($0, $0$hi, $1, $1$hi) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $6 = 0, $6$hi = 0, $7$hi = 0, $7 = 0, $2 = 0, $3 = 0, $44 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0, $5 = 0, $4 = 0, $18 = 0, $18$hi = 0, $20$hi = 0, $23 = 0, $23$hi = 0, $25$hi = 0, $39$hi = 0, $43 = 0, $45 = 0, $50 = 0, $50$hi = 0, $52$hi = 0, $80 = 0, $80$hi = 0, $84$hi = 0, $87 = 0, $87$hi = 0, $89 = 0, $89$hi = 0, $93 = 0, $93$hi = 0, $95 = 0, $96$hi = 0, $106$hi = 0, $117 = 0, $117$hi = 0;
  label$1 : {
   $2 = global$0 - 32 | 0;
   $4 = $2;
   if ($2 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $4;
  }
  label$3 : {
   label$4 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $6 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $6$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $6;
    i64toi32_i32$2 = -1006698496;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $18 = i64toi32_i32$4;
    $18$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$1 = $6;
    i64toi32_i32$0 = -1140785152;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $20$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $18$hi;
    i64toi32_i32$5 = $18;
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$4
    }
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$3 = $0;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 60;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $44 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $44 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $23 = $44;
    $23$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$5 = $1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     $46 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
     $46 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    }
    $25$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$4 = $23;
    i64toi32_i32$5 = $25$hi;
    i64toi32_i32$1 = $46;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    $6 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $6$hi = i64toi32_i32$5;
    label$5 : {
     i64toi32_i32$5 = $0$hi;
     i64toi32_i32$3 = $0;
     i64toi32_i32$4 = 268435455;
     i64toi32_i32$1 = -1;
     i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
     $0 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $0$hi = i64toi32_i32$4;
     i64toi32_i32$5 = $0;
     i64toi32_i32$3 = 134217728;
     i64toi32_i32$1 = 1;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$5
     }
     i64toi32_i32$5 = $6$hi;
     i64toi32_i32$1 = $6;
     i64toi32_i32$4 = 1073741824;
     i64toi32_i32$3 = 1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $7 = i64toi32_i32$0;
     $7$hi = i64toi32_i32$2;
     break label$3;
    }
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$5 = $6;
    i64toi32_i32$1 = 1073741824;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $7 = i64toi32_i32$4;
    $7$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0;
    i64toi32_i32$5 = 134217728;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | 0) {
     break label$3
    }
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$3 = $7;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
    $39$hi = i64toi32_i32$5;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$5 = $39$hi;
    i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    i64toi32_i32$3 = $7$hi;
    i64toi32_i32$2 = $7;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $7 = i64toi32_i32$1;
    $7$hi = i64toi32_i32$4;
    break label$3;
   }
   label$6 : {
    i64toi32_i32$4 = $0$hi;
    $43 = !($0 | i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $6$hi;
    i64toi32_i32$5 = $6;
    i64toi32_i32$0 = 2147418112;
    i64toi32_i32$2 = 0;
    $45 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$5 = i64toi32_i32$4;
    i64toi32_i32$2 = $6;
    i64toi32_i32$4 = 2147418112;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) | 0 ? $43 : $45) {
     break label$6
    }
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = $0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 60;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $47 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
     $47 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
    }
    $50 = $47;
    $50$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$2 = $1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 4;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
     $48 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
     $48 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    }
    $52$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $50$hi;
    i64toi32_i32$5 = $50;
    i64toi32_i32$2 = $52$hi;
    i64toi32_i32$4 = $48;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    i64toi32_i32$5 = 524287;
    i64toi32_i32$4 = -1;
    i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    i64toi32_i32$0 = 2146959360;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $7 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    $7$hi = i64toi32_i32$0;
    break label$3;
   }
   i64toi32_i32$0 = 2146435072;
   $7 = 0;
   $7$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$5 = $6;
   i64toi32_i32$2 = 1140785151;
   i64toi32_i32$4 = -1;
   if (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
    break label$3
   }
   i64toi32_i32$5 = 0;
   $7 = 0;
   $7$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $6$hi;
   i64toi32_i32$4 = $6;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = 48;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $49 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
    $49 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $3 = $49;
   if ($3 >>> 0 < 15249 >>> 0) {
    break label$3
   }
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = $1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$2 = -1;
   i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   $6 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $0$hi;
   i64toi32_i32$0 = $6$hi;
   __ashlti3($2 + 16 | 0 | 0, $0 | 0, i64toi32_i32$5 | 0, $6 | 0, i64toi32_i32$0 | 0, $3 + -15233 | 0 | 0);
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = $6$hi;
   __lshrti3($2 | 0, $0 | 0, i64toi32_i32$0 | 0, $6 | 0, i64toi32_i32$5 | 0, 15361 - $3 | 0 | 0);
   i64toi32_i32$4 = $2;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $6 = i64toi32_i32$5;
   $6$hi = i64toi32_i32$0;
   i64toi32_i32$4 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 60;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = 0;
    $51 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $51 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $80 = $51;
   $80$hi = i64toi32_i32$5;
   i64toi32_i32$0 = $2 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 4;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $52 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $52 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $84$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $80$hi;
   i64toi32_i32$4 = $80;
   i64toi32_i32$0 = $84$hi;
   i64toi32_i32$2 = $52;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   $7 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
   $7$hi = i64toi32_i32$0;
   label$7 : {
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$5 = $6;
    i64toi32_i32$4 = 268435455;
    i64toi32_i32$2 = -1;
    i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    $87 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
    $87$hi = i64toi32_i32$4;
    i64toi32_i32$0 = $2;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
    $89 = i64toi32_i32$4;
    $89$hi = i64toi32_i32$5;
    i64toi32_i32$0 = (i64toi32_i32$0 + 16 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $93 = i64toi32_i32$5;
    $93$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $89$hi;
    i64toi32_i32$0 = $89;
    i64toi32_i32$5 = $93$hi;
    i64toi32_i32$2 = $93;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 0;
    $95 = (i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$4 = 0;
    $96$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $87$hi;
    i64toi32_i32$2 = $87;
    i64toi32_i32$5 = $96$hi;
    i64toi32_i32$0 = $95;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $6 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $6$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $6;
    i64toi32_i32$2 = 134217728;
    i64toi32_i32$0 = 1;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$7
    }
    i64toi32_i32$4 = $7$hi;
    i64toi32_i32$0 = $7;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $7 = i64toi32_i32$3;
    $7$hi = i64toi32_i32$1;
    break label$3;
   }
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$4 = $6;
   i64toi32_i32$0 = 134217728;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
   i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$2 | 0;
   i64toi32_i32$4 = 0;
   i64toi32_i32$2 = 0;
   if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0) {
    break label$3
   }
   i64toi32_i32$1 = $7$hi;
   i64toi32_i32$2 = $7;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   $106$hi = i64toi32_i32$0;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$0 = $106$hi;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
   i64toi32_i32$2 = $7$hi;
   i64toi32_i32$4 = $7;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $7 = i64toi32_i32$5;
   $7$hi = i64toi32_i32$3;
  }
  label$8 : {
   $5 = $2 + 32 | 0;
   if ($5 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $5;
  }
  i64toi32_i32$3 = $7$hi;
  i64toi32_i32$3 = $1$hi;
  i64toi32_i32$0 = $1;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$4 = 0;
  i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
  $117 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
  $117$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$3 = $7;
  i64toi32_i32$0 = $117$hi;
  i64toi32_i32$4 = $117;
  i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
  wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 | i64toi32_i32$4 | 0 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
  return +(+wasm2js_scratch_load_f64());
 }
 
 function __lock($0) {
  $0 = $0 | 0;
 }
 
 function __unlock($0) {
  $0 = $0 | 0;
 }
 
 function __ofl_lock() {
  __lock(11572 | 0);
  return 11580 | 0;
 }
 
 function __ofl_unlock() {
  __unlock(11572 | 0);
 }
 
 function dlmalloc($0) {
  $0 = $0 | 0;
  var $4 = 0, $5 = 0, $7 = 0, $3 = 0, $8 = 0, $2 = 0, $13 = 0, $6 = 0, $9 = 0, i64toi32_i32$0 = 0, $12 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $1 = 0, $11 = 0, $10 = 0, $15 = 0, $14 = 0, $94 = 0, $107 = 0, $118 = 0, $126 = 0, $134 = 0, $235 = 0, $246 = 0, $254 = 0, $262 = 0, $297 = 0, $512 = 0, $519 = 0, $612 = 0, $623 = 0, $631 = 0, $639 = 0, $878 = 0, $885 = 0, $1634 = 0, $1641 = 0, $1786 = 0, $1788 = 0, $1861 = 0, $1868 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   $1 = global$0 - 16 | 0;
   $14 = $1;
   if ($1 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $14;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       if ($0 >>> 0 > 244 >>> 0) {
        break label$7
       }
       label$8 : {
        $2 = HEAP32[(0 + 11584 | 0) >> 2] | 0;
        $3 = $0 >>> 0 < 11 >>> 0 ? 16 : ($0 + 11 | 0) & -8 | 0;
        $4 = $3 >>> 3 | 0;
        $0 = $2 >>> $4 | 0;
        if (!($0 & 3 | 0)) {
         break label$8
        }
        label$9 : {
         label$10 : {
          $5 = (($0 ^ -1 | 0) & 1 | 0) + $4 | 0;
          $3 = $5 << 3 | 0;
          $4 = HEAP32[($3 + 11632 | 0) >> 2] | 0;
          $0 = HEAP32[($4 + 8 | 0) >> 2] | 0;
          $3 = $3 + 11624 | 0;
          if (($0 | 0) != ($3 | 0)) {
           break label$10
          }
          (wasm2js_i32$0 = 0, wasm2js_i32$1 = $2 & (__wasm_rotl_i32(-2 | 0, $5 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 11584 | 0) >> 2] = wasm2js_i32$1;
          break label$9;
         }
         if ((HEAP32[(0 + 11600 | 0) >> 2] | 0) >>> 0 > $0 >>> 0) {
          break label$5
         }
         if ((HEAP32[($0 + 12 | 0) >> 2] | 0 | 0) != ($4 | 0)) {
          break label$5
         }
         HEAP32[($0 + 12 | 0) >> 2] = $3;
         HEAP32[($3 + 8 | 0) >> 2] = $0;
        }
        $0 = $4 + 8 | 0;
        $5 = $5 << 3 | 0;
        HEAP32[($4 + 4 | 0) >> 2] = $5 | 3 | 0;
        $4 = $4 + $5 | 0;
        HEAP32[($4 + 4 | 0) >> 2] = HEAP32[($4 + 4 | 0) >> 2] | 0 | 1 | 0;
        break label$3;
       }
       $6 = HEAP32[(0 + 11592 | 0) >> 2] | 0;
       if ($3 >>> 0 <= $6 >>> 0) {
        break label$6
       }
       label$11 : {
        if (!$0) {
         break label$11
        }
        label$12 : {
         label$13 : {
          $94 = $0 << $4 | 0;
          $0 = 2 << $4 | 0;
          $0 = $94 & ($0 | (0 - $0 | 0) | 0) | 0;
          $0 = ($0 & (0 - $0 | 0) | 0) + -1 | 0;
          $107 = $0;
          $0 = ($0 >>> 12 | 0) & 16 | 0;
          $4 = $107 >>> $0 | 0;
          $5 = ($4 >>> 5 | 0) & 8 | 0;
          $118 = $5 | $0 | 0;
          $0 = $4 >>> $5 | 0;
          $4 = ($0 >>> 2 | 0) & 4 | 0;
          $126 = $118 | $4 | 0;
          $0 = $0 >>> $4 | 0;
          $4 = ($0 >>> 1 | 0) & 2 | 0;
          $134 = $126 | $4 | 0;
          $0 = $0 >>> $4 | 0;
          $4 = ($0 >>> 1 | 0) & 1 | 0;
          $5 = ($134 | $4 | 0) + ($0 >>> $4 | 0) | 0;
          $7 = $5 << 3 | 0;
          $0 = HEAP32[($7 + 11632 | 0) >> 2] | 0;
          $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
          $7 = $7 + 11624 | 0;
          if (($4 | 0) != ($7 | 0)) {
           break label$13
          }
          $2 = $2 & (__wasm_rotl_i32(-2 | 0, $5 | 0) | 0) | 0;
          HEAP32[(0 + 11584 | 0) >> 2] = $2;
          break label$12;
         }
         if ((HEAP32[(0 + 11600 | 0) >> 2] | 0) >>> 0 > $4 >>> 0) {
          break label$5
         }
         if ((HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) != ($0 | 0)) {
          break label$5
         }
         HEAP32[($4 + 12 | 0) >> 2] = $7;
         HEAP32[($7 + 8 | 0) >> 2] = $4;
        }
        HEAP32[($0 + 4 | 0) >> 2] = $3 | 3 | 0;
        $7 = $0 + $3 | 0;
        $4 = $5 << 3 | 0;
        $5 = $4 - $3 | 0;
        HEAP32[($7 + 4 | 0) >> 2] = $5 | 1 | 0;
        HEAP32[($0 + $4 | 0) >> 2] = $5;
        label$14 : {
         if (!$6) {
          break label$14
         }
         $8 = $6 >>> 3 | 0;
         $3 = ($8 << 3 | 0) + 11624 | 0;
         $4 = HEAP32[(0 + 11604 | 0) >> 2] | 0;
         label$15 : {
          label$16 : {
           $8 = 1 << $8 | 0;
           if ($2 & $8 | 0) {
            break label$16
           }
           HEAP32[(0 + 11584 | 0) >> 2] = $2 | $8 | 0;
           $8 = $3;
           break label$15;
          }
          $8 = HEAP32[($3 + 8 | 0) >> 2] | 0;
          if ((HEAP32[(0 + 11600 | 0) >> 2] | 0) >>> 0 > $8 >>> 0) {
           break label$5
          }
         }
         HEAP32[($3 + 8 | 0) >> 2] = $4;
         HEAP32[($8 + 12 | 0) >> 2] = $4;
         HEAP32[($4 + 12 | 0) >> 2] = $3;
         HEAP32[($4 + 8 | 0) >> 2] = $8;
        }
        $0 = $0 + 8 | 0;
        HEAP32[(0 + 11604 | 0) >> 2] = $7;
        HEAP32[(0 + 11592 | 0) >> 2] = $5;
        break label$3;
       }
       $9 = HEAP32[(0 + 11588 | 0) >> 2] | 0;
       if (!$9) {
        break label$6
       }
       $0 = ($9 & (0 - $9 | 0) | 0) + -1 | 0;
       $235 = $0;
       $0 = ($0 >>> 12 | 0) & 16 | 0;
       $4 = $235 >>> $0 | 0;
       $5 = ($4 >>> 5 | 0) & 8 | 0;
       $246 = $5 | $0 | 0;
       $0 = $4 >>> $5 | 0;
       $4 = ($0 >>> 2 | 0) & 4 | 0;
       $254 = $246 | $4 | 0;
       $0 = $0 >>> $4 | 0;
       $4 = ($0 >>> 1 | 0) & 2 | 0;
       $262 = $254 | $4 | 0;
       $0 = $0 >>> $4 | 0;
       $4 = ($0 >>> 1 | 0) & 1 | 0;
       $7 = HEAP32[(((($262 | $4 | 0) + ($0 >>> $4 | 0) | 0) << 2 | 0) + 11888 | 0) >> 2] | 0;
       $4 = ((HEAP32[($7 + 4 | 0) >> 2] | 0) & -8 | 0) - $3 | 0;
       $5 = $7;
       label$17 : {
        label$18 : while (1) {
         label$19 : {
          $0 = HEAP32[($5 + 16 | 0) >> 2] | 0;
          if ($0) {
           break label$19
          }
          $0 = HEAP32[($5 + 20 | 0) >> 2] | 0;
          if (!$0) {
           break label$17
          }
         }
         $5 = ((HEAP32[($0 + 4 | 0) >> 2] | 0) & -8 | 0) - $3 | 0;
         $297 = $5;
         $5 = $5 >>> 0 < $4 >>> 0;
         $4 = $5 ? $297 : $4;
         $7 = $5 ? $0 : $7;
         $5 = $0;
         continue label$18;
        };
       }
       $10 = HEAP32[(0 + 11600 | 0) >> 2] | 0;
       if ($10 >>> 0 > $7 >>> 0) {
        break label$5
       }
       $11 = $7 + $3 | 0;
       if ($11 >>> 0 <= $7 >>> 0) {
        break label$5
       }
       $12 = HEAP32[($7 + 24 | 0) >> 2] | 0;
       label$20 : {
        label$21 : {
         $8 = HEAP32[($7 + 12 | 0) >> 2] | 0;
         if (($8 | 0) == ($7 | 0)) {
          break label$21
         }
         $0 = HEAP32[($7 + 8 | 0) >> 2] | 0;
         if ($10 >>> 0 > $0 >>> 0) {
          break label$5
         }
         if ((HEAP32[($0 + 12 | 0) >> 2] | 0 | 0) != ($7 | 0)) {
          break label$5
         }
         if ((HEAP32[($8 + 8 | 0) >> 2] | 0 | 0) != ($7 | 0)) {
          break label$5
         }
         HEAP32[($0 + 12 | 0) >> 2] = $8;
         HEAP32[($8 + 8 | 0) >> 2] = $0;
         break label$20;
        }
        label$22 : {
         label$23 : {
          $5 = $7 + 20 | 0;
          $0 = HEAP32[$5 >> 2] | 0;
          if ($0) {
           break label$23
          }
          $0 = HEAP32[($7 + 16 | 0) >> 2] | 0;
          if (!$0) {
           break label$22
          }
          $5 = $7 + 16 | 0;
         }
         label$24 : while (1) {
          $13 = $5;
          $8 = $0;
          $5 = $0 + 20 | 0;
          $0 = HEAP32[$5 >> 2] | 0;
          if ($0) {
           continue label$24
          }
          $5 = $8 + 16 | 0;
          $0 = HEAP32[($8 + 16 | 0) >> 2] | 0;
          if ($0) {
           continue label$24
          }
          break label$24;
         };
         if ($10 >>> 0 > $13 >>> 0) {
          break label$5
         }
         HEAP32[$13 >> 2] = 0;
         break label$20;
        }
        $8 = 0;
       }
       label$25 : {
        if (!$12) {
         break label$25
        }
        label$26 : {
         label$27 : {
          $5 = HEAP32[($7 + 28 | 0) >> 2] | 0;
          $0 = ($5 << 2 | 0) + 11888 | 0;
          if (($7 | 0) != (HEAP32[$0 >> 2] | 0 | 0)) {
           break label$27
          }
          HEAP32[$0 >> 2] = $8;
          if ($8) {
           break label$26
          }
          (wasm2js_i32$0 = 0, wasm2js_i32$1 = $9 & (__wasm_rotl_i32(-2 | 0, $5 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 11588 | 0) >> 2] = wasm2js_i32$1;
          break label$25;
         }
         if ((HEAP32[(0 + 11600 | 0) >> 2] | 0) >>> 0 > $12 >>> 0) {
          break label$5
         }
         HEAP32[($12 + ((HEAP32[($12 + 16 | 0) >> 2] | 0 | 0) == ($7 | 0) ? 16 : 20) | 0) >> 2] = $8;
         if (!$8) {
          break label$25
         }
        }
        $5 = HEAP32[(0 + 11600 | 0) >> 2] | 0;
        if ($5 >>> 0 > $8 >>> 0) {
         break label$5
        }
        HEAP32[($8 + 24 | 0) >> 2] = $12;
        label$28 : {
         $0 = HEAP32[($7 + 16 | 0) >> 2] | 0;
         if (!$0) {
          break label$28
         }
         if ($5 >>> 0 > $0 >>> 0) {
          break label$5
         }
         HEAP32[($8 + 16 | 0) >> 2] = $0;
         HEAP32[($0 + 24 | 0) >> 2] = $8;
        }
        $0 = HEAP32[($7 + 20 | 0) >> 2] | 0;
        if (!$0) {
         break label$25
        }
        if ((HEAP32[(0 + 11600 | 0) >> 2] | 0) >>> 0 > $0 >>> 0) {
         break label$5
        }
        HEAP32[($8 + 20 | 0) >> 2] = $0;
        HEAP32[($0 + 24 | 0) >> 2] = $8;
       }
       label$29 : {
        label$30 : {
         if ($4 >>> 0 > 15 >>> 0) {
          break label$30
         }
         $0 = $4 + $3 | 0;
         HEAP32[($7 + 4 | 0) >> 2] = $0 | 3 | 0;
         $0 = $7 + $0 | 0;
         HEAP32[($0 + 4 | 0) >> 2] = HEAP32[($0 + 4 | 0) >> 2] | 0 | 1 | 0;
         break label$29;
        }
        HEAP32[($7 + 4 | 0) >> 2] = $3 | 3 | 0;
        HEAP32[($11 + 4 | 0) >> 2] = $4 | 1 | 0;
        HEAP32[($11 + $4 | 0) >> 2] = $4;
        label$31 : {
         if (!$6) {
          break label$31
         }
         $3 = $6 >>> 3 | 0;
         $5 = ($3 << 3 | 0) + 11624 | 0;
         $0 = HEAP32[(0 + 11604 | 0) >> 2] | 0;
         label$32 : {
          label$33 : {
           $3 = 1 << $3 | 0;
           if ($3 & $2 | 0) {
            break label$33
           }
           HEAP32[(0 + 11584 | 0) >> 2] = $3 | $2 | 0;
           $3 = $5;
           break label$32;
          }
          $3 = HEAP32[($5 + 8 | 0) >> 2] | 0;
          if ((HEAP32[(0 + 11600 | 0) >> 2] | 0) >>> 0 > $3 >>> 0) {
           break label$5
          }
         }
         HEAP32[($5 + 8 | 0) >> 2] = $0;
         HEAP32[($3 + 12 | 0) >> 2] = $0;
         HEAP32[($0 + 12 | 0) >> 2] = $5;
         HEAP32[($0 + 8 | 0) >> 2] = $3;
        }
        HEAP32[(0 + 11604 | 0) >> 2] = $11;
        HEAP32[(0 + 11592 | 0) >> 2] = $4;
       }
       $0 = $7 + 8 | 0;
       break label$3;
      }
      $3 = -1;
      if ($0 >>> 0 > -65 >>> 0) {
       break label$6
      }
      $0 = $0 + 11 | 0;
      $3 = $0 & -8 | 0;
      $6 = HEAP32[(0 + 11588 | 0) >> 2] | 0;
      if (!$6) {
       break label$6
      }
      $13 = 0;
      label$34 : {
       $0 = $0 >>> 8 | 0;
       if (!$0) {
        break label$34
       }
       $13 = 31;
       if ($3 >>> 0 > 16777215 >>> 0) {
        break label$34
       }
       $4 = (($0 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
       $0 = $0 << $4 | 0;
       $512 = $0;
       $0 = (($0 + 520192 | 0) >>> 16 | 0) & 4 | 0;
       $5 = $512 << $0 | 0;
       $519 = $5;
       $5 = (($5 + 245760 | 0) >>> 16 | 0) & 2 | 0;
       $0 = (($519 << $5 | 0) >>> 15 | 0) - ($0 | $4 | 0 | $5 | 0) | 0;
       $13 = ($0 << 1 | 0 | (($3 >>> ($0 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
      }
      $5 = 0 - $3 | 0;
      label$35 : {
       label$36 : {
        label$37 : {
         label$38 : {
          $4 = HEAP32[(($13 << 2 | 0) + 11888 | 0) >> 2] | 0;
          if ($4) {
           break label$38
          }
          $0 = 0;
          $8 = 0;
          break label$37;
         }
         $7 = $3 << (($13 | 0) == (31 | 0) ? 0 : 25 - ($13 >>> 1 | 0) | 0) | 0;
         $0 = 0;
         $8 = 0;
         label$39 : while (1) {
          label$40 : {
           $2 = ((HEAP32[($4 + 4 | 0) >> 2] | 0) & -8 | 0) - $3 | 0;
           if ($2 >>> 0 >= $5 >>> 0) {
            break label$40
           }
           $5 = $2;
           $8 = $4;
           if ($5) {
            break label$40
           }
           $5 = 0;
           $8 = $4;
           $0 = $4;
           break label$36;
          }
          $2 = HEAP32[($4 + 20 | 0) >> 2] | 0;
          $4 = HEAP32[(($4 + (($7 >>> 29 | 0) & 4 | 0) | 0) + 16 | 0) >> 2] | 0;
          $0 = $2 ? (($2 | 0) == ($4 | 0) ? $0 : $2) : $0;
          $7 = $7 << (($4 | 0) != (0 | 0)) | 0;
          if ($4) {
           continue label$39
          }
          break label$39;
         };
        }
        label$41 : {
         if ($0 | $8 | 0) {
          break label$41
         }
         $0 = 2 << $13 | 0;
         $0 = ($0 | (0 - $0 | 0) | 0) & $6 | 0;
         if (!$0) {
          break label$6
         }
         $0 = ($0 & (0 - $0 | 0) | 0) + -1 | 0;
         $612 = $0;
         $0 = ($0 >>> 12 | 0) & 16 | 0;
         $4 = $612 >>> $0 | 0;
         $7 = ($4 >>> 5 | 0) & 8 | 0;
         $623 = $7 | $0 | 0;
         $0 = $4 >>> $7 | 0;
         $4 = ($0 >>> 2 | 0) & 4 | 0;
         $631 = $623 | $4 | 0;
         $0 = $0 >>> $4 | 0;
         $4 = ($0 >>> 1 | 0) & 2 | 0;
         $639 = $631 | $4 | 0;
         $0 = $0 >>> $4 | 0;
         $4 = ($0 >>> 1 | 0) & 1 | 0;
         $0 = HEAP32[(((($639 | $4 | 0) + ($0 >>> $4 | 0) | 0) << 2 | 0) + 11888 | 0) >> 2] | 0;
        }
        if (!$0) {
         break label$35
        }
       }
       label$42 : while (1) {
        $2 = ((HEAP32[($0 + 4 | 0) >> 2] | 0) & -8 | 0) - $3 | 0;
        $7 = $2 >>> 0 < $5 >>> 0;
        label$43 : {
         $4 = HEAP32[($0 + 16 | 0) >> 2] | 0;
         if ($4) {
          break label$43
         }
         $4 = HEAP32[($0 + 20 | 0) >> 2] | 0;
        }
        $5 = $7 ? $2 : $5;
        $8 = $7 ? $0 : $8;
        $0 = $4;
        if ($0) {
         continue label$42
        }
        break label$42;
       };
      }
      if (!$8) {
       break label$6
      }
      if ($5 >>> 0 >= ((HEAP32[(0 + 11592 | 0) >> 2] | 0) - $3 | 0) >>> 0) {
       break label$6
      }
      $12 = HEAP32[(0 + 11600 | 0) >> 2] | 0;
      if ($12 >>> 0 > $8 >>> 0) {
       break label$5
      }
      $13 = $8 + $3 | 0;
      if ($13 >>> 0 <= $8 >>> 0) {
       break label$5
      }
      $9 = HEAP32[($8 + 24 | 0) >> 2] | 0;
      label$44 : {
       label$45 : {
        $7 = HEAP32[($8 + 12 | 0) >> 2] | 0;
        if (($7 | 0) == ($8 | 0)) {
         break label$45
        }
        $0 = HEAP32[($8 + 8 | 0) >> 2] | 0;
        if ($12 >>> 0 > $0 >>> 0) {
         break label$5
        }
        if ((HEAP32[($0 + 12 | 0) >> 2] | 0 | 0) != ($8 | 0)) {
         break label$5
        }
        if ((HEAP32[($7 + 8 | 0) >> 2] | 0 | 0) != ($8 | 0)) {
         break label$5
        }
        HEAP32[($0 + 12 | 0) >> 2] = $7;
        HEAP32[($7 + 8 | 0) >> 2] = $0;
        break label$44;
       }
       label$46 : {
        label$47 : {
         $4 = $8 + 20 | 0;
         $0 = HEAP32[$4 >> 2] | 0;
         if ($0) {
          break label$47
         }
         $0 = HEAP32[($8 + 16 | 0) >> 2] | 0;
         if (!$0) {
          break label$46
         }
         $4 = $8 + 16 | 0;
        }
        label$48 : while (1) {
         $2 = $4;
         $7 = $0;
         $4 = $0 + 20 | 0;
         $0 = HEAP32[$4 >> 2] | 0;
         if ($0) {
          continue label$48
         }
         $4 = $7 + 16 | 0;
         $0 = HEAP32[($7 + 16 | 0) >> 2] | 0;
         if ($0) {
          continue label$48
         }
         break label$48;
        };
        if ($12 >>> 0 > $2 >>> 0) {
         break label$5
        }
        HEAP32[$2 >> 2] = 0;
        break label$44;
       }
       $7 = 0;
      }
      label$49 : {
       if (!$9) {
        break label$49
       }
       label$50 : {
        label$51 : {
         $4 = HEAP32[($8 + 28 | 0) >> 2] | 0;
         $0 = ($4 << 2 | 0) + 11888 | 0;
         if (($8 | 0) != (HEAP32[$0 >> 2] | 0 | 0)) {
          break label$51
         }
         HEAP32[$0 >> 2] = $7;
         if ($7) {
          break label$50
         }
         $6 = $6 & (__wasm_rotl_i32(-2 | 0, $4 | 0) | 0) | 0;
         HEAP32[(0 + 11588 | 0) >> 2] = $6;
         break label$49;
        }
        if ((HEAP32[(0 + 11600 | 0) >> 2] | 0) >>> 0 > $9 >>> 0) {
         break label$5
        }
        HEAP32[($9 + ((HEAP32[($9 + 16 | 0) >> 2] | 0 | 0) == ($8 | 0) ? 16 : 20) | 0) >> 2] = $7;
        if (!$7) {
         break label$49
        }
       }
       $4 = HEAP32[(0 + 11600 | 0) >> 2] | 0;
       if ($4 >>> 0 > $7 >>> 0) {
        break label$5
       }
       HEAP32[($7 + 24 | 0) >> 2] = $9;
       label$52 : {
        $0 = HEAP32[($8 + 16 | 0) >> 2] | 0;
        if (!$0) {
         break label$52
        }
        if ($4 >>> 0 > $0 >>> 0) {
         break label$5
        }
        HEAP32[($7 + 16 | 0) >> 2] = $0;
        HEAP32[($0 + 24 | 0) >> 2] = $7;
       }
       $0 = HEAP32[($8 + 20 | 0) >> 2] | 0;
       if (!$0) {
        break label$49
       }
       if ((HEAP32[(0 + 11600 | 0) >> 2] | 0) >>> 0 > $0 >>> 0) {
        break label$5
       }
       HEAP32[($7 + 20 | 0) >> 2] = $0;
       HEAP32[($0 + 24 | 0) >> 2] = $7;
      }
      label$53 : {
       label$54 : {
        if ($5 >>> 0 > 15 >>> 0) {
         break label$54
        }
        $0 = $5 + $3 | 0;
        HEAP32[($8 + 4 | 0) >> 2] = $0 | 3 | 0;
        $0 = $8 + $0 | 0;
        HEAP32[($0 + 4 | 0) >> 2] = HEAP32[($0 + 4 | 0) >> 2] | 0 | 1 | 0;
        break label$53;
       }
       HEAP32[($8 + 4 | 0) >> 2] = $3 | 3 | 0;
       HEAP32[($13 + 4 | 0) >> 2] = $5 | 1 | 0;
       HEAP32[($13 + $5 | 0) >> 2] = $5;
       label$55 : {
        if ($5 >>> 0 > 255 >>> 0) {
         break label$55
        }
        $4 = $5 >>> 3 | 0;
        $0 = ($4 << 3 | 0) + 11624 | 0;
        label$56 : {
         label$57 : {
          $5 = HEAP32[(0 + 11584 | 0) >> 2] | 0;
          $4 = 1 << $4 | 0;
          if ($5 & $4 | 0) {
           break label$57
          }
          HEAP32[(0 + 11584 | 0) >> 2] = $5 | $4 | 0;
          $4 = $0;
          break label$56;
         }
         $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
         if ((HEAP32[(0 + 11600 | 0) >> 2] | 0) >>> 0 > $4 >>> 0) {
          break label$5
         }
        }
        HEAP32[($0 + 8 | 0) >> 2] = $13;
        HEAP32[($4 + 12 | 0) >> 2] = $13;
        HEAP32[($13 + 12 | 0) >> 2] = $0;
        HEAP32[($13 + 8 | 0) >> 2] = $4;
        break label$53;
       }
       label$58 : {
        label$59 : {
         $4 = $5 >>> 8 | 0;
         if ($4) {
          break label$59
         }
         $0 = 0;
         break label$58;
        }
        $0 = 31;
        if ($5 >>> 0 > 16777215 >>> 0) {
         break label$58
        }
        $0 = (($4 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
        $4 = $4 << $0 | 0;
        $878 = $4;
        $4 = (($4 + 520192 | 0) >>> 16 | 0) & 4 | 0;
        $3 = $878 << $4 | 0;
        $885 = $3;
        $3 = (($3 + 245760 | 0) >>> 16 | 0) & 2 | 0;
        $0 = (($885 << $3 | 0) >>> 15 | 0) - ($4 | $0 | 0 | $3 | 0) | 0;
        $0 = ($0 << 1 | 0 | (($5 >>> ($0 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
       }
       HEAP32[($13 + 28 | 0) >> 2] = $0;
       i64toi32_i32$1 = $13;
       i64toi32_i32$0 = 0;
       HEAP32[($13 + 16 | 0) >> 2] = 0;
       HEAP32[($13 + 20 | 0) >> 2] = i64toi32_i32$0;
       $4 = ($0 << 2 | 0) + 11888 | 0;
       label$60 : {
        label$61 : {
         label$62 : {
          $3 = 1 << $0 | 0;
          if ($6 & $3 | 0) {
           break label$62
          }
          HEAP32[(0 + 11588 | 0) >> 2] = $6 | $3 | 0;
          HEAP32[$4 >> 2] = $13;
          HEAP32[($13 + 24 | 0) >> 2] = $4;
          break label$61;
         }
         $0 = $5 << (($0 | 0) == (31 | 0) ? 0 : 25 - ($0 >>> 1 | 0) | 0) | 0;
         $3 = HEAP32[$4 >> 2] | 0;
         label$63 : while (1) {
          $4 = $3;
          if (((HEAP32[($4 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($5 | 0)) {
           break label$60
          }
          $3 = $0 >>> 29 | 0;
          $0 = $0 << 1 | 0;
          $7 = ($4 + ($3 & 4 | 0) | 0) + 16 | 0;
          $3 = HEAP32[$7 >> 2] | 0;
          if ($3) {
           continue label$63
          }
          break label$63;
         };
         if ((HEAP32[(0 + 11600 | 0) >> 2] | 0) >>> 0 > $7 >>> 0) {
          break label$5
         }
         HEAP32[$7 >> 2] = $13;
         HEAP32[($13 + 24 | 0) >> 2] = $4;
        }
        HEAP32[($13 + 12 | 0) >> 2] = $13;
        HEAP32[($13 + 8 | 0) >> 2] = $13;
        break label$53;
       }
       $5 = HEAP32[(0 + 11600 | 0) >> 2] | 0;
       if ($5 >>> 0 > $4 >>> 0) {
        break label$5
       }
       $0 = HEAP32[($4 + 8 | 0) >> 2] | 0;
       if ($5 >>> 0 > $0 >>> 0) {
        break label$5
       }
       HEAP32[($0 + 12 | 0) >> 2] = $13;
       HEAP32[($4 + 8 | 0) >> 2] = $13;
       HEAP32[($13 + 24 | 0) >> 2] = 0;
       HEAP32[($13 + 12 | 0) >> 2] = $4;
       HEAP32[($13 + 8 | 0) >> 2] = $0;
      }
      $0 = $8 + 8 | 0;
      break label$3;
     }
     label$64 : {
      $0 = HEAP32[(0 + 11592 | 0) >> 2] | 0;
      if ($0 >>> 0 < $3 >>> 0) {
       break label$64
      }
      $4 = HEAP32[(0 + 11604 | 0) >> 2] | 0;
      label$65 : {
       label$66 : {
        $5 = $0 - $3 | 0;
        if ($5 >>> 0 < 16 >>> 0) {
         break label$66
        }
        HEAP32[(0 + 11592 | 0) >> 2] = $5;
        $7 = $4 + $3 | 0;
        HEAP32[(0 + 11604 | 0) >> 2] = $7;
        HEAP32[($7 + 4 | 0) >> 2] = $5 | 1 | 0;
        HEAP32[($4 + $0 | 0) >> 2] = $5;
        HEAP32[($4 + 4 | 0) >> 2] = $3 | 3 | 0;
        break label$65;
       }
       HEAP32[(0 + 11604 | 0) >> 2] = 0;
       HEAP32[(0 + 11592 | 0) >> 2] = 0;
       HEAP32[($4 + 4 | 0) >> 2] = $0 | 3 | 0;
       $0 = $4 + $0 | 0;
       HEAP32[($0 + 4 | 0) >> 2] = HEAP32[($0 + 4 | 0) >> 2] | 0 | 1 | 0;
      }
      $0 = $4 + 8 | 0;
      break label$3;
     }
     label$67 : {
      $7 = HEAP32[(0 + 11596 | 0) >> 2] | 0;
      if ($7 >>> 0 <= $3 >>> 0) {
       break label$67
      }
      $4 = $7 - $3 | 0;
      HEAP32[(0 + 11596 | 0) >> 2] = $4;
      $0 = HEAP32[(0 + 11608 | 0) >> 2] | 0;
      $5 = $0 + $3 | 0;
      HEAP32[(0 + 11608 | 0) >> 2] = $5;
      HEAP32[($5 + 4 | 0) >> 2] = $4 | 1 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = $3 | 3 | 0;
      $0 = $0 + 8 | 0;
      break label$3;
     }
     label$68 : {
      label$69 : {
       if (!(HEAP32[(0 + 12056 | 0) >> 2] | 0)) {
        break label$69
       }
       $4 = HEAP32[(0 + 12064 | 0) >> 2] | 0;
       break label$68;
      }
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = -1;
      HEAP32[(i64toi32_i32$1 + 12068 | 0) >> 2] = -1;
      HEAP32[(i64toi32_i32$1 + 12072 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = 4096;
      HEAP32[(i64toi32_i32$1 + 12060 | 0) >> 2] = 4096;
      HEAP32[(i64toi32_i32$1 + 12064 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[(0 + 12056 | 0) >> 2] = (($1 + 12 | 0) & -16 | 0) ^ 1431655768 | 0;
      HEAP32[(0 + 12076 | 0) >> 2] = 0;
      HEAP32[(0 + 12028 | 0) >> 2] = 0;
      $4 = 4096;
     }
     $0 = 0;
     $6 = $3 + 47 | 0;
     $2 = $4 + $6 | 0;
     $13 = 0 - $4 | 0;
     $8 = $2 & $13 | 0;
     if ($8 >>> 0 <= $3 >>> 0) {
      break label$3
     }
     $0 = 0;
     label$70 : {
      $4 = HEAP32[(0 + 12024 | 0) >> 2] | 0;
      if (!$4) {
       break label$70
      }
      $5 = HEAP32[(0 + 12016 | 0) >> 2] | 0;
      $9 = $5 + $8 | 0;
      if ($9 >>> 0 <= $5 >>> 0) {
       break label$3
      }
      if ($9 >>> 0 > $4 >>> 0) {
       break label$3
      }
     }
     label$71 : {
      label$72 : {
       if ((HEAPU8[(0 + 12028 | 0) >> 0] | 0) & 4 | 0) {
        break label$72
       }
       label$73 : {
        label$74 : {
         label$75 : {
          label$76 : {
           label$77 : {
            $4 = HEAP32[(0 + 11608 | 0) >> 2] | 0;
            if (!$4) {
             break label$77
            }
            $0 = 12032;
            label$78 : while (1) {
             label$79 : {
              $5 = HEAP32[$0 >> 2] | 0;
              if ($5 >>> 0 > $4 >>> 0) {
               break label$79
              }
              if (($5 + (HEAP32[($0 + 4 | 0) >> 2] | 0) | 0) >>> 0 > $4 >>> 0) {
               break label$76
              }
             }
             $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
             if ($0) {
              continue label$78
             }
             break label$78;
            };
           }
           $7 = sbrk(0 | 0) | 0;
           if (($7 | 0) == (-1 | 0)) {
            break label$73
           }
           $2 = $8;
           label$80 : {
            $0 = HEAP32[(0 + 12060 | 0) >> 2] | 0;
            $4 = $0 + -1 | 0;
            if (!($4 & $7 | 0)) {
             break label$80
            }
            $2 = ($8 - $7 | 0) + (($4 + $7 | 0) & (0 - $0 | 0) | 0) | 0;
           }
           if ($2 >>> 0 <= $3 >>> 0) {
            break label$73
           }
           if ($2 >>> 0 > 2147483646 >>> 0) {
            break label$73
           }
           label$81 : {
            $0 = HEAP32[(0 + 12024 | 0) >> 2] | 0;
            if (!$0) {
             break label$81
            }
            $4 = HEAP32[(0 + 12016 | 0) >> 2] | 0;
            $5 = $4 + $2 | 0;
            if ($5 >>> 0 <= $4 >>> 0) {
             break label$73
            }
            if ($5 >>> 0 > $0 >>> 0) {
             break label$73
            }
           }
           $0 = sbrk($2 | 0) | 0;
           if (($0 | 0) != ($7 | 0)) {
            break label$75
           }
           break label$71;
          }
          $2 = ($2 - $7 | 0) & $13 | 0;
          if ($2 >>> 0 > 2147483646 >>> 0) {
           break label$73
          }
          $7 = sbrk($2 | 0) | 0;
          if (($7 | 0) == ((HEAP32[$0 >> 2] | 0) + (HEAP32[($0 + 4 | 0) >> 2] | 0) | 0 | 0)) {
           break label$74
          }
          $0 = $7;
         }
         label$82 : {
          if (($3 + 48 | 0) >>> 0 <= $2 >>> 0) {
           break label$82
          }
          if (($0 | 0) == (-1 | 0)) {
           break label$82
          }
          label$83 : {
           $4 = HEAP32[(0 + 12064 | 0) >> 2] | 0;
           $4 = (($6 - $2 | 0) + $4 | 0) & (0 - $4 | 0) | 0;
           if ($4 >>> 0 <= 2147483646 >>> 0) {
            break label$83
           }
           $7 = $0;
           break label$71;
          }
          label$84 : {
           if ((sbrk($4 | 0) | 0 | 0) == (-1 | 0)) {
            break label$84
           }
           $2 = $4 + $2 | 0;
           $7 = $0;
           break label$71;
          }
          sbrk(0 - $2 | 0 | 0) | 0;
          break label$73;
         }
         $7 = $0;
         if (($0 | 0) != (-1 | 0)) {
          break label$71
         }
         break label$73;
        }
        if (($7 | 0) != (-1 | 0)) {
         break label$71
        }
       }
       HEAP32[(0 + 12028 | 0) >> 2] = HEAP32[(0 + 12028 | 0) >> 2] | 0 | 4 | 0;
      }
      if ($8 >>> 0 > 2147483646 >>> 0) {
       break label$4
      }
      $7 = sbrk($8 | 0) | 0;
      $0 = sbrk(0 | 0) | 0;
      if ($7 >>> 0 >= $0 >>> 0) {
       break label$4
      }
      if (($7 | 0) == (-1 | 0)) {
       break label$4
      }
      if (($0 | 0) == (-1 | 0)) {
       break label$4
      }
      $2 = $0 - $7 | 0;
      if ($2 >>> 0 <= ($3 + 40 | 0) >>> 0) {
       break label$4
      }
     }
     $0 = (HEAP32[(0 + 12016 | 0) >> 2] | 0) + $2 | 0;
     HEAP32[(0 + 12016 | 0) >> 2] = $0;
     label$85 : {
      if ($0 >>> 0 <= (HEAP32[(0 + 12020 | 0) >> 2] | 0) >>> 0) {
       break label$85
      }
      HEAP32[(0 + 12020 | 0) >> 2] = $0;
     }
     label$86 : {
      label$87 : {
       label$88 : {
        label$89 : {
         $4 = HEAP32[(0 + 11608 | 0) >> 2] | 0;
         if (!$4) {
          break label$89
         }
         $0 = 12032;
         label$90 : while (1) {
          $5 = HEAP32[$0 >> 2] | 0;
          $8 = HEAP32[($0 + 4 | 0) >> 2] | 0;
          if (($7 | 0) == ($5 + $8 | 0 | 0)) {
           break label$88
          }
          $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
          if ($0) {
           continue label$90
          }
          break label$87;
         };
        }
        label$91 : {
         label$92 : {
          $0 = HEAP32[(0 + 11600 | 0) >> 2] | 0;
          if (!$0) {
           break label$92
          }
          if ($7 >>> 0 >= $0 >>> 0) {
           break label$91
          }
         }
         HEAP32[(0 + 11600 | 0) >> 2] = $7;
        }
        $0 = 0;
        HEAP32[(0 + 12036 | 0) >> 2] = $2;
        HEAP32[(0 + 12032 | 0) >> 2] = $7;
        HEAP32[(0 + 11616 | 0) >> 2] = -1;
        HEAP32[(0 + 11620 | 0) >> 2] = HEAP32[(0 + 12056 | 0) >> 2] | 0;
        HEAP32[(0 + 12044 | 0) >> 2] = 0;
        label$93 : while (1) {
         $4 = $0 << 3 | 0;
         $5 = $4 + 11624 | 0;
         HEAP32[($4 + 11632 | 0) >> 2] = $5;
         HEAP32[($4 + 11636 | 0) >> 2] = $5;
         $0 = $0 + 1 | 0;
         if (($0 | 0) != (32 | 0)) {
          continue label$93
         }
         break label$93;
        };
        $0 = $2 + -40 | 0;
        $4 = ($7 + 8 | 0) & 7 | 0 ? (-8 - $7 | 0) & 7 | 0 : 0;
        $5 = $0 - $4 | 0;
        HEAP32[(0 + 11596 | 0) >> 2] = $5;
        $4 = $7 + $4 | 0;
        HEAP32[(0 + 11608 | 0) >> 2] = $4;
        HEAP32[($4 + 4 | 0) >> 2] = $5 | 1 | 0;
        HEAP32[(($7 + $0 | 0) + 4 | 0) >> 2] = 40;
        HEAP32[(0 + 11612 | 0) >> 2] = HEAP32[(0 + 12072 | 0) >> 2] | 0;
        break label$86;
       }
       if ((HEAPU8[($0 + 12 | 0) >> 0] | 0) & 8 | 0) {
        break label$87
       }
       if ($7 >>> 0 <= $4 >>> 0) {
        break label$87
       }
       if ($5 >>> 0 > $4 >>> 0) {
        break label$87
       }
       HEAP32[($0 + 4 | 0) >> 2] = $8 + $2 | 0;
       $0 = ($4 + 8 | 0) & 7 | 0 ? (-8 - $4 | 0) & 7 | 0 : 0;
       $5 = $4 + $0 | 0;
       HEAP32[(0 + 11608 | 0) >> 2] = $5;
       $7 = (HEAP32[(0 + 11596 | 0) >> 2] | 0) + $2 | 0;
       $0 = $7 - $0 | 0;
       HEAP32[(0 + 11596 | 0) >> 2] = $0;
       HEAP32[($5 + 4 | 0) >> 2] = $0 | 1 | 0;
       HEAP32[(($4 + $7 | 0) + 4 | 0) >> 2] = 40;
       HEAP32[(0 + 11612 | 0) >> 2] = HEAP32[(0 + 12072 | 0) >> 2] | 0;
       break label$86;
      }
      label$94 : {
       $8 = HEAP32[(0 + 11600 | 0) >> 2] | 0;
       if ($7 >>> 0 >= $8 >>> 0) {
        break label$94
       }
       HEAP32[(0 + 11600 | 0) >> 2] = $7;
       $8 = $7;
      }
      $5 = $7 + $2 | 0;
      $0 = 12032;
      label$95 : {
       label$96 : {
        label$97 : {
         label$98 : {
          label$99 : while (1) {
           if ((HEAP32[$0 >> 2] | 0 | 0) == ($5 | 0)) {
            break label$98
           }
           $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
           if ($0) {
            continue label$99
           }
           break label$97;
          };
         }
         if (!((HEAPU8[($0 + 12 | 0) >> 0] | 0) & 8 | 0)) {
          break label$96
         }
        }
        $0 = 12032;
        label$100 : while (1) {
         label$101 : {
          $5 = HEAP32[$0 >> 2] | 0;
          if ($5 >>> 0 > $4 >>> 0) {
           break label$101
          }
          $5 = $5 + (HEAP32[($0 + 4 | 0) >> 2] | 0) | 0;
          if ($5 >>> 0 > $4 >>> 0) {
           break label$95
          }
         }
         $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
         continue label$100;
        };
       }
       HEAP32[$0 >> 2] = $7;
       HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) + $2 | 0;
       $13 = $7 + (($7 + 8 | 0) & 7 | 0 ? (-8 - $7 | 0) & 7 | 0 : 0) | 0;
       HEAP32[($13 + 4 | 0) >> 2] = $3 | 3 | 0;
       $7 = $5 + (($5 + 8 | 0) & 7 | 0 ? (-8 - $5 | 0) & 7 | 0 : 0) | 0;
       $0 = ($7 - $13 | 0) - $3 | 0;
       $5 = $13 + $3 | 0;
       label$102 : {
        label$103 : {
         if (($4 | 0) != ($7 | 0)) {
          break label$103
         }
         HEAP32[(0 + 11608 | 0) >> 2] = $5;
         $0 = (HEAP32[(0 + 11596 | 0) >> 2] | 0) + $0 | 0;
         HEAP32[(0 + 11596 | 0) >> 2] = $0;
         HEAP32[($5 + 4 | 0) >> 2] = $0 | 1 | 0;
         break label$102;
        }
        label$104 : {
         if ((HEAP32[(0 + 11604 | 0) >> 2] | 0 | 0) != ($7 | 0)) {
          break label$104
         }
         HEAP32[(0 + 11604 | 0) >> 2] = $5;
         $0 = (HEAP32[(0 + 11592 | 0) >> 2] | 0) + $0 | 0;
         HEAP32[(0 + 11592 | 0) >> 2] = $0;
         HEAP32[($5 + 4 | 0) >> 2] = $0 | 1 | 0;
         HEAP32[($5 + $0 | 0) >> 2] = $0;
         break label$102;
        }
        label$105 : {
         $9 = HEAP32[($7 + 4 | 0) >> 2] | 0;
         if (($9 & 3 | 0 | 0) != (1 | 0)) {
          break label$105
         }
         label$106 : {
          label$107 : {
           if ($9 >>> 0 > 255 >>> 0) {
            break label$107
           }
           $4 = HEAP32[($7 + 12 | 0) >> 2] | 0;
           label$108 : {
            $3 = HEAP32[($7 + 8 | 0) >> 2] | 0;
            $6 = $9 >>> 3 | 0;
            $2 = ($6 << 3 | 0) + 11624 | 0;
            if (($3 | 0) == ($2 | 0)) {
             break label$108
            }
            if ($8 >>> 0 > $3 >>> 0) {
             break label$5
            }
            if ((HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) != ($7 | 0)) {
             break label$5
            }
           }
           label$109 : {
            if (($4 | 0) != ($3 | 0)) {
             break label$109
            }
            (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 11584 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $6 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 11584 | 0) >> 2] = wasm2js_i32$1;
            break label$106;
           }
           label$110 : {
            if (($4 | 0) == ($2 | 0)) {
             break label$110
            }
            if ($8 >>> 0 > $4 >>> 0) {
             break label$5
            }
            if ((HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) != ($7 | 0)) {
             break label$5
            }
           }
           HEAP32[($3 + 12 | 0) >> 2] = $4;
           HEAP32[($4 + 8 | 0) >> 2] = $3;
           break label$106;
          }
          $12 = HEAP32[($7 + 24 | 0) >> 2] | 0;
          label$111 : {
           label$112 : {
            $2 = HEAP32[($7 + 12 | 0) >> 2] | 0;
            if (($2 | 0) == ($7 | 0)) {
             break label$112
            }
            $4 = HEAP32[($7 + 8 | 0) >> 2] | 0;
            if ($8 >>> 0 > $4 >>> 0) {
             break label$5
            }
            if ((HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) != ($7 | 0)) {
             break label$5
            }
            if ((HEAP32[($2 + 8 | 0) >> 2] | 0 | 0) != ($7 | 0)) {
             break label$5
            }
            HEAP32[($4 + 12 | 0) >> 2] = $2;
            HEAP32[($2 + 8 | 0) >> 2] = $4;
            break label$111;
           }
           label$113 : {
            $4 = $7 + 20 | 0;
            $3 = HEAP32[$4 >> 2] | 0;
            if ($3) {
             break label$113
            }
            $4 = $7 + 16 | 0;
            $3 = HEAP32[$4 >> 2] | 0;
            if ($3) {
             break label$113
            }
            $2 = 0;
            break label$111;
           }
           label$114 : while (1) {
            $6 = $4;
            $2 = $3;
            $4 = $3 + 20 | 0;
            $3 = HEAP32[$4 >> 2] | 0;
            if ($3) {
             continue label$114
            }
            $4 = $2 + 16 | 0;
            $3 = HEAP32[($2 + 16 | 0) >> 2] | 0;
            if ($3) {
             continue label$114
            }
            break label$114;
           };
           if ($8 >>> 0 > $6 >>> 0) {
            break label$5
           }
           HEAP32[$6 >> 2] = 0;
          }
          if (!$12) {
           break label$106
          }
          label$115 : {
           label$116 : {
            $3 = HEAP32[($7 + 28 | 0) >> 2] | 0;
            $4 = ($3 << 2 | 0) + 11888 | 0;
            if ((HEAP32[$4 >> 2] | 0 | 0) != ($7 | 0)) {
             break label$116
            }
            HEAP32[$4 >> 2] = $2;
            if ($2) {
             break label$115
            }
            (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 11588 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $3 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 11588 | 0) >> 2] = wasm2js_i32$1;
            break label$106;
           }
           if ((HEAP32[(0 + 11600 | 0) >> 2] | 0) >>> 0 > $12 >>> 0) {
            break label$5
           }
           HEAP32[($12 + ((HEAP32[($12 + 16 | 0) >> 2] | 0 | 0) == ($7 | 0) ? 16 : 20) | 0) >> 2] = $2;
           if (!$2) {
            break label$106
           }
          }
          $3 = HEAP32[(0 + 11600 | 0) >> 2] | 0;
          if ($3 >>> 0 > $2 >>> 0) {
           break label$5
          }
          HEAP32[($2 + 24 | 0) >> 2] = $12;
          label$117 : {
           $4 = HEAP32[($7 + 16 | 0) >> 2] | 0;
           if (!$4) {
            break label$117
           }
           if ($3 >>> 0 > $4 >>> 0) {
            break label$5
           }
           HEAP32[($2 + 16 | 0) >> 2] = $4;
           HEAP32[($4 + 24 | 0) >> 2] = $2;
          }
          $4 = HEAP32[($7 + 20 | 0) >> 2] | 0;
          if (!$4) {
           break label$106
          }
          if ((HEAP32[(0 + 11600 | 0) >> 2] | 0) >>> 0 > $4 >>> 0) {
           break label$5
          }
          HEAP32[($2 + 20 | 0) >> 2] = $4;
          HEAP32[($4 + 24 | 0) >> 2] = $2;
         }
         $4 = $9 & -8 | 0;
         $0 = $4 + $0 | 0;
         $7 = $7 + $4 | 0;
        }
        HEAP32[($7 + 4 | 0) >> 2] = (HEAP32[($7 + 4 | 0) >> 2] | 0) & -2 | 0;
        HEAP32[($5 + 4 | 0) >> 2] = $0 | 1 | 0;
        HEAP32[($5 + $0 | 0) >> 2] = $0;
        label$118 : {
         if ($0 >>> 0 > 255 >>> 0) {
          break label$118
         }
         $4 = $0 >>> 3 | 0;
         $0 = ($4 << 3 | 0) + 11624 | 0;
         label$119 : {
          label$120 : {
           $3 = HEAP32[(0 + 11584 | 0) >> 2] | 0;
           $4 = 1 << $4 | 0;
           if ($3 & $4 | 0) {
            break label$120
           }
           HEAP32[(0 + 11584 | 0) >> 2] = $3 | $4 | 0;
           $4 = $0;
           break label$119;
          }
          $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
          if ((HEAP32[(0 + 11600 | 0) >> 2] | 0) >>> 0 > $4 >>> 0) {
           break label$5
          }
         }
         HEAP32[($0 + 8 | 0) >> 2] = $5;
         HEAP32[($4 + 12 | 0) >> 2] = $5;
         HEAP32[($5 + 12 | 0) >> 2] = $0;
         HEAP32[($5 + 8 | 0) >> 2] = $4;
         break label$102;
        }
        $4 = 0;
        label$121 : {
         $3 = $0 >>> 8 | 0;
         if (!$3) {
          break label$121
         }
         $4 = 31;
         if ($0 >>> 0 > 16777215 >>> 0) {
          break label$121
         }
         $4 = (($3 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
         $3 = $3 << $4 | 0;
         $1634 = $3;
         $3 = (($3 + 520192 | 0) >>> 16 | 0) & 4 | 0;
         $7 = $1634 << $3 | 0;
         $1641 = $7;
         $7 = (($7 + 245760 | 0) >>> 16 | 0) & 2 | 0;
         $4 = (($1641 << $7 | 0) >>> 15 | 0) - ($3 | $4 | 0 | $7 | 0) | 0;
         $4 = ($4 << 1 | 0 | (($0 >>> ($4 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
        }
        HEAP32[($5 + 28 | 0) >> 2] = $4;
        i64toi32_i32$1 = $5;
        i64toi32_i32$0 = 0;
        HEAP32[($5 + 16 | 0) >> 2] = 0;
        HEAP32[($5 + 20 | 0) >> 2] = i64toi32_i32$0;
        $3 = ($4 << 2 | 0) + 11888 | 0;
        label$122 : {
         label$123 : {
          label$124 : {
           $7 = HEAP32[(0 + 11588 | 0) >> 2] | 0;
           $8 = 1 << $4 | 0;
           if ($7 & $8 | 0) {
            break label$124
           }
           HEAP32[(0 + 11588 | 0) >> 2] = $7 | $8 | 0;
           HEAP32[$3 >> 2] = $5;
           HEAP32[($5 + 24 | 0) >> 2] = $3;
           break label$123;
          }
          $4 = $0 << (($4 | 0) == (31 | 0) ? 0 : 25 - ($4 >>> 1 | 0) | 0) | 0;
          $7 = HEAP32[$3 >> 2] | 0;
          label$125 : while (1) {
           $3 = $7;
           if (((HEAP32[($7 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0 | 0)) {
            break label$122
           }
           $7 = $4 >>> 29 | 0;
           $4 = $4 << 1 | 0;
           $8 = ($3 + ($7 & 4 | 0) | 0) + 16 | 0;
           $7 = HEAP32[$8 >> 2] | 0;
           if ($7) {
            continue label$125
           }
           break label$125;
          };
          if ((HEAP32[(0 + 11600 | 0) >> 2] | 0) >>> 0 > $8 >>> 0) {
           break label$5
          }
          HEAP32[$8 >> 2] = $5;
          HEAP32[($5 + 24 | 0) >> 2] = $3;
         }
         HEAP32[($5 + 12 | 0) >> 2] = $5;
         HEAP32[($5 + 8 | 0) >> 2] = $5;
         break label$102;
        }
        $4 = HEAP32[(0 + 11600 | 0) >> 2] | 0;
        if ($4 >>> 0 > $3 >>> 0) {
         break label$5
        }
        $0 = HEAP32[($3 + 8 | 0) >> 2] | 0;
        if ($4 >>> 0 > $0 >>> 0) {
         break label$5
        }
        HEAP32[($0 + 12 | 0) >> 2] = $5;
        HEAP32[($3 + 8 | 0) >> 2] = $5;
        HEAP32[($5 + 24 | 0) >> 2] = 0;
        HEAP32[($5 + 12 | 0) >> 2] = $3;
        HEAP32[($5 + 8 | 0) >> 2] = $0;
       }
       $0 = $13 + 8 | 0;
       break label$3;
      }
      $0 = $2 + -40 | 0;
      $8 = ($7 + 8 | 0) & 7 | 0 ? (-8 - $7 | 0) & 7 | 0 : 0;
      $13 = $0 - $8 | 0;
      HEAP32[(0 + 11596 | 0) >> 2] = $13;
      $8 = $7 + $8 | 0;
      HEAP32[(0 + 11608 | 0) >> 2] = $8;
      HEAP32[($8 + 4 | 0) >> 2] = $13 | 1 | 0;
      HEAP32[(($7 + $0 | 0) + 4 | 0) >> 2] = 40;
      HEAP32[(0 + 11612 | 0) >> 2] = HEAP32[(0 + 12072 | 0) >> 2] | 0;
      $0 = ($5 + (($5 + -39 | 0) & 7 | 0 ? (39 - $5 | 0) & 7 | 0 : 0) | 0) + -47 | 0;
      $8 = $0 >>> 0 < ($4 + 16 | 0) >>> 0 ? $4 : $0;
      HEAP32[($8 + 4 | 0) >> 2] = 27;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12040 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12044 | 0) >> 2] | 0;
      $1786 = i64toi32_i32$0;
      i64toi32_i32$0 = $8 + 16 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $1786;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12032 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12036 | 0) >> 2] | 0;
      $1788 = i64toi32_i32$1;
      i64toi32_i32$1 = $8;
      HEAP32[($8 + 8 | 0) >> 2] = $1788;
      HEAP32[($8 + 12 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[(0 + 12040 | 0) >> 2] = $8 + 8 | 0;
      HEAP32[(0 + 12036 | 0) >> 2] = $2;
      HEAP32[(0 + 12032 | 0) >> 2] = $7;
      HEAP32[(0 + 12044 | 0) >> 2] = 0;
      $0 = $8 + 24 | 0;
      label$126 : while (1) {
       HEAP32[($0 + 4 | 0) >> 2] = 7;
       $7 = $0 + 8 | 0;
       $0 = $0 + 4 | 0;
       if ($5 >>> 0 > $7 >>> 0) {
        continue label$126
       }
       break label$126;
      };
      if (($8 | 0) == ($4 | 0)) {
       break label$86
      }
      HEAP32[($8 + 4 | 0) >> 2] = (HEAP32[($8 + 4 | 0) >> 2] | 0) & -2 | 0;
      $2 = $8 - $4 | 0;
      HEAP32[($4 + 4 | 0) >> 2] = $2 | 1 | 0;
      HEAP32[$8 >> 2] = $2;
      label$127 : {
       if ($2 >>> 0 > 255 >>> 0) {
        break label$127
       }
       $5 = $2 >>> 3 | 0;
       $0 = ($5 << 3 | 0) + 11624 | 0;
       label$128 : {
        label$129 : {
         $7 = HEAP32[(0 + 11584 | 0) >> 2] | 0;
         $5 = 1 << $5 | 0;
         if ($7 & $5 | 0) {
          break label$129
         }
         HEAP32[(0 + 11584 | 0) >> 2] = $7 | $5 | 0;
         $5 = $0;
         break label$128;
        }
        $5 = HEAP32[($0 + 8 | 0) >> 2] | 0;
        if ((HEAP32[(0 + 11600 | 0) >> 2] | 0) >>> 0 > $5 >>> 0) {
         break label$5
        }
       }
       HEAP32[($0 + 8 | 0) >> 2] = $4;
       HEAP32[($5 + 12 | 0) >> 2] = $4;
       HEAP32[($4 + 12 | 0) >> 2] = $0;
       HEAP32[($4 + 8 | 0) >> 2] = $5;
       break label$86;
      }
      $0 = 0;
      label$130 : {
       $5 = $2 >>> 8 | 0;
       if (!$5) {
        break label$130
       }
       $0 = 31;
       if ($2 >>> 0 > 16777215 >>> 0) {
        break label$130
       }
       $0 = (($5 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
       $5 = $5 << $0 | 0;
       $1861 = $5;
       $5 = (($5 + 520192 | 0) >>> 16 | 0) & 4 | 0;
       $7 = $1861 << $5 | 0;
       $1868 = $7;
       $7 = (($7 + 245760 | 0) >>> 16 | 0) & 2 | 0;
       $0 = (($1868 << $7 | 0) >>> 15 | 0) - ($5 | $0 | 0 | $7 | 0) | 0;
       $0 = ($0 << 1 | 0 | (($2 >>> ($0 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
      }
      i64toi32_i32$1 = $4;
      i64toi32_i32$0 = 0;
      HEAP32[($4 + 16 | 0) >> 2] = 0;
      HEAP32[($4 + 20 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[($4 + 28 | 0) >> 2] = $0;
      $5 = ($0 << 2 | 0) + 11888 | 0;
      label$131 : {
       label$132 : {
        label$133 : {
         $7 = HEAP32[(0 + 11588 | 0) >> 2] | 0;
         $8 = 1 << $0 | 0;
         if ($7 & $8 | 0) {
          break label$133
         }
         HEAP32[(0 + 11588 | 0) >> 2] = $7 | $8 | 0;
         HEAP32[$5 >> 2] = $4;
         HEAP32[($4 + 24 | 0) >> 2] = $5;
         break label$132;
        }
        $0 = $2 << (($0 | 0) == (31 | 0) ? 0 : 25 - ($0 >>> 1 | 0) | 0) | 0;
        $7 = HEAP32[$5 >> 2] | 0;
        label$134 : while (1) {
         $5 = $7;
         if (((HEAP32[($7 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($2 | 0)) {
          break label$131
         }
         $7 = $0 >>> 29 | 0;
         $0 = $0 << 1 | 0;
         $8 = ($5 + ($7 & 4 | 0) | 0) + 16 | 0;
         $7 = HEAP32[$8 >> 2] | 0;
         if ($7) {
          continue label$134
         }
         break label$134;
        };
        if ((HEAP32[(0 + 11600 | 0) >> 2] | 0) >>> 0 > $8 >>> 0) {
         break label$5
        }
        HEAP32[$8 >> 2] = $4;
        HEAP32[($4 + 24 | 0) >> 2] = $5;
       }
       HEAP32[($4 + 12 | 0) >> 2] = $4;
       HEAP32[($4 + 8 | 0) >> 2] = $4;
       break label$86;
      }
      $7 = HEAP32[(0 + 11600 | 0) >> 2] | 0;
      if ($7 >>> 0 > $5 >>> 0) {
       break label$5
      }
      $0 = HEAP32[($5 + 8 | 0) >> 2] | 0;
      if ($7 >>> 0 > $0 >>> 0) {
       break label$5
      }
      HEAP32[($0 + 12 | 0) >> 2] = $4;
      HEAP32[($5 + 8 | 0) >> 2] = $4;
      HEAP32[($4 + 24 | 0) >> 2] = 0;
      HEAP32[($4 + 12 | 0) >> 2] = $5;
      HEAP32[($4 + 8 | 0) >> 2] = $0;
     }
     $0 = HEAP32[(0 + 11596 | 0) >> 2] | 0;
     if ($0 >>> 0 <= $3 >>> 0) {
      break label$4
     }
     $4 = $0 - $3 | 0;
     HEAP32[(0 + 11596 | 0) >> 2] = $4;
     $0 = HEAP32[(0 + 11608 | 0) >> 2] | 0;
     $5 = $0 + $3 | 0;
     HEAP32[(0 + 11608 | 0) >> 2] = $5;
     HEAP32[($5 + 4 | 0) >> 2] = $4 | 1 | 0;
     HEAP32[($0 + 4 | 0) >> 2] = $3 | 3 | 0;
     $0 = $0 + 8 | 0;
     break label$3;
    }
    abort();
    abort();
   }
   (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 48), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   $0 = 0;
  }
  label$135 : {
   $15 = $1 + 16 | 0;
   if ($15 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $15;
  }
  return $0 | 0;
 }
 
 function dlfree($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $1 = 0, $6 = 0, $5 = 0, $2 = 0, $7 = 0, $8 = 0, $474 = 0, $481 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   label$2 : {
    if (!$0) {
     break label$2
    }
    $1 = $0 + -8 | 0;
    $2 = HEAP32[(0 + 11600 | 0) >> 2] | 0;
    if ($1 >>> 0 < $2 >>> 0) {
     break label$1
    }
    $3 = HEAP32[($0 + -4 | 0) >> 2] | 0;
    $4 = $3 & 3 | 0;
    if (($4 | 0) == (1 | 0)) {
     break label$1
    }
    $0 = $3 & -8 | 0;
    $5 = $1 + $0 | 0;
    label$3 : {
     if ($3 & 1 | 0) {
      break label$3
     }
     if (!$4) {
      break label$2
     }
     $3 = HEAP32[$1 >> 2] | 0;
     $1 = $1 - $3 | 0;
     if ($1 >>> 0 < $2 >>> 0) {
      break label$1
     }
     $0 = $3 + $0 | 0;
     label$4 : {
      if ((HEAP32[(0 + 11604 | 0) >> 2] | 0 | 0) == ($1 | 0)) {
       break label$4
      }
      label$5 : {
       if ($3 >>> 0 > 255 >>> 0) {
        break label$5
       }
       $4 = HEAP32[($1 + 12 | 0) >> 2] | 0;
       label$6 : {
        $6 = HEAP32[($1 + 8 | 0) >> 2] | 0;
        $7 = $3 >>> 3 | 0;
        $3 = ($7 << 3 | 0) + 11624 | 0;
        if (($6 | 0) == ($3 | 0)) {
         break label$6
        }
        if ($2 >>> 0 > $6 >>> 0) {
         break label$1
        }
        if ((HEAP32[($6 + 12 | 0) >> 2] | 0 | 0) != ($1 | 0)) {
         break label$1
        }
       }
       label$7 : {
        if (($4 | 0) != ($6 | 0)) {
         break label$7
        }
        (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 11584 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 11584 | 0) >> 2] = wasm2js_i32$1;
        break label$3;
       }
       label$8 : {
        if (($4 | 0) == ($3 | 0)) {
         break label$8
        }
        if ($2 >>> 0 > $4 >>> 0) {
         break label$1
        }
        if ((HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) != ($1 | 0)) {
         break label$1
        }
       }
       HEAP32[($6 + 12 | 0) >> 2] = $4;
       HEAP32[($4 + 8 | 0) >> 2] = $6;
       break label$3;
      }
      $8 = HEAP32[($1 + 24 | 0) >> 2] | 0;
      label$9 : {
       label$10 : {
        $6 = HEAP32[($1 + 12 | 0) >> 2] | 0;
        if (($6 | 0) == ($1 | 0)) {
         break label$10
        }
        $3 = HEAP32[($1 + 8 | 0) >> 2] | 0;
        if ($2 >>> 0 > $3 >>> 0) {
         break label$1
        }
        if ((HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) != ($1 | 0)) {
         break label$1
        }
        if ((HEAP32[($6 + 8 | 0) >> 2] | 0 | 0) != ($1 | 0)) {
         break label$1
        }
        HEAP32[($3 + 12 | 0) >> 2] = $6;
        HEAP32[($6 + 8 | 0) >> 2] = $3;
        break label$9;
       }
       label$11 : {
        $3 = $1 + 20 | 0;
        $4 = HEAP32[$3 >> 2] | 0;
        if ($4) {
         break label$11
        }
        $3 = $1 + 16 | 0;
        $4 = HEAP32[$3 >> 2] | 0;
        if ($4) {
         break label$11
        }
        $6 = 0;
        break label$9;
       }
       label$12 : while (1) {
        $7 = $3;
        $6 = $4;
        $3 = $4 + 20 | 0;
        $4 = HEAP32[$3 >> 2] | 0;
        if ($4) {
         continue label$12
        }
        $3 = $6 + 16 | 0;
        $4 = HEAP32[($6 + 16 | 0) >> 2] | 0;
        if ($4) {
         continue label$12
        }
        break label$12;
       };
       if ($2 >>> 0 > $7 >>> 0) {
        break label$1
       }
       HEAP32[$7 >> 2] = 0;
      }
      if (!$8) {
       break label$3
      }
      label$13 : {
       label$14 : {
        $4 = HEAP32[($1 + 28 | 0) >> 2] | 0;
        $3 = ($4 << 2 | 0) + 11888 | 0;
        if ((HEAP32[$3 >> 2] | 0 | 0) != ($1 | 0)) {
         break label$14
        }
        HEAP32[$3 >> 2] = $6;
        if ($6) {
         break label$13
        }
        (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 11588 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 11588 | 0) >> 2] = wasm2js_i32$1;
        break label$3;
       }
       if ((HEAP32[(0 + 11600 | 0) >> 2] | 0) >>> 0 > $8 >>> 0) {
        break label$1
       }
       HEAP32[($8 + ((HEAP32[($8 + 16 | 0) >> 2] | 0 | 0) == ($1 | 0) ? 16 : 20) | 0) >> 2] = $6;
       if (!$6) {
        break label$3
       }
      }
      $4 = HEAP32[(0 + 11600 | 0) >> 2] | 0;
      if ($4 >>> 0 > $6 >>> 0) {
       break label$1
      }
      HEAP32[($6 + 24 | 0) >> 2] = $8;
      label$15 : {
       $3 = HEAP32[($1 + 16 | 0) >> 2] | 0;
       if (!$3) {
        break label$15
       }
       if ($4 >>> 0 > $3 >>> 0) {
        break label$1
       }
       HEAP32[($6 + 16 | 0) >> 2] = $3;
       HEAP32[($3 + 24 | 0) >> 2] = $6;
      }
      $3 = HEAP32[($1 + 20 | 0) >> 2] | 0;
      if (!$3) {
       break label$3
      }
      if ((HEAP32[(0 + 11600 | 0) >> 2] | 0) >>> 0 > $3 >>> 0) {
       break label$1
      }
      HEAP32[($6 + 20 | 0) >> 2] = $3;
      HEAP32[($3 + 24 | 0) >> 2] = $6;
      break label$3;
     }
     $3 = HEAP32[($5 + 4 | 0) >> 2] | 0;
     if (($3 & 3 | 0 | 0) != (3 | 0)) {
      break label$3
     }
     HEAP32[(0 + 11592 | 0) >> 2] = $0;
     HEAP32[($5 + 4 | 0) >> 2] = $3 & -2 | 0;
     HEAP32[($1 + 4 | 0) >> 2] = $0 | 1 | 0;
     HEAP32[($1 + $0 | 0) >> 2] = $0;
     return;
    }
    if ($5 >>> 0 <= $1 >>> 0) {
     break label$1
    }
    $7 = HEAP32[($5 + 4 | 0) >> 2] | 0;
    if (!($7 & 1 | 0)) {
     break label$1
    }
    label$16 : {
     label$17 : {
      if ($7 & 2 | 0) {
       break label$17
      }
      label$18 : {
       if ((HEAP32[(0 + 11608 | 0) >> 2] | 0 | 0) != ($5 | 0)) {
        break label$18
       }
       HEAP32[(0 + 11608 | 0) >> 2] = $1;
       $0 = (HEAP32[(0 + 11596 | 0) >> 2] | 0) + $0 | 0;
       HEAP32[(0 + 11596 | 0) >> 2] = $0;
       HEAP32[($1 + 4 | 0) >> 2] = $0 | 1 | 0;
       if (($1 | 0) != (HEAP32[(0 + 11604 | 0) >> 2] | 0 | 0)) {
        break label$2
       }
       HEAP32[(0 + 11592 | 0) >> 2] = 0;
       HEAP32[(0 + 11604 | 0) >> 2] = 0;
       return;
      }
      label$19 : {
       if ((HEAP32[(0 + 11604 | 0) >> 2] | 0 | 0) != ($5 | 0)) {
        break label$19
       }
       HEAP32[(0 + 11604 | 0) >> 2] = $1;
       $0 = (HEAP32[(0 + 11592 | 0) >> 2] | 0) + $0 | 0;
       HEAP32[(0 + 11592 | 0) >> 2] = $0;
       HEAP32[($1 + 4 | 0) >> 2] = $0 | 1 | 0;
       HEAP32[($1 + $0 | 0) >> 2] = $0;
       return;
      }
      label$20 : {
       label$21 : {
        if ($7 >>> 0 > 255 >>> 0) {
         break label$21
        }
        $3 = HEAP32[($5 + 12 | 0) >> 2] | 0;
        label$22 : {
         $4 = HEAP32[($5 + 8 | 0) >> 2] | 0;
         $2 = $7 >>> 3 | 0;
         $6 = ($2 << 3 | 0) + 11624 | 0;
         if (($4 | 0) == ($6 | 0)) {
          break label$22
         }
         if ((HEAP32[(0 + 11600 | 0) >> 2] | 0) >>> 0 > $4 >>> 0) {
          break label$1
         }
         if ((HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) != ($5 | 0)) {
          break label$1
         }
        }
        label$23 : {
         if (($3 | 0) != ($4 | 0)) {
          break label$23
         }
         (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 11584 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $2 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 11584 | 0) >> 2] = wasm2js_i32$1;
         break label$20;
        }
        label$24 : {
         if (($3 | 0) == ($6 | 0)) {
          break label$24
         }
         if ((HEAP32[(0 + 11600 | 0) >> 2] | 0) >>> 0 > $3 >>> 0) {
          break label$1
         }
         if ((HEAP32[($3 + 8 | 0) >> 2] | 0 | 0) != ($5 | 0)) {
          break label$1
         }
        }
        HEAP32[($4 + 12 | 0) >> 2] = $3;
        HEAP32[($3 + 8 | 0) >> 2] = $4;
        break label$20;
       }
       $8 = HEAP32[($5 + 24 | 0) >> 2] | 0;
       label$25 : {
        label$26 : {
         $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
         if (($6 | 0) == ($5 | 0)) {
          break label$26
         }
         $3 = HEAP32[($5 + 8 | 0) >> 2] | 0;
         if ((HEAP32[(0 + 11600 | 0) >> 2] | 0) >>> 0 > $3 >>> 0) {
          break label$1
         }
         if ((HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) != ($5 | 0)) {
          break label$1
         }
         if ((HEAP32[($6 + 8 | 0) >> 2] | 0 | 0) != ($5 | 0)) {
          break label$1
         }
         HEAP32[($3 + 12 | 0) >> 2] = $6;
         HEAP32[($6 + 8 | 0) >> 2] = $3;
         break label$25;
        }
        label$27 : {
         $3 = $5 + 20 | 0;
         $4 = HEAP32[$3 >> 2] | 0;
         if ($4) {
          break label$27
         }
         $3 = $5 + 16 | 0;
         $4 = HEAP32[$3 >> 2] | 0;
         if ($4) {
          break label$27
         }
         $6 = 0;
         break label$25;
        }
        label$28 : while (1) {
         $2 = $3;
         $6 = $4;
         $3 = $4 + 20 | 0;
         $4 = HEAP32[$3 >> 2] | 0;
         if ($4) {
          continue label$28
         }
         $3 = $6 + 16 | 0;
         $4 = HEAP32[($6 + 16 | 0) >> 2] | 0;
         if ($4) {
          continue label$28
         }
         break label$28;
        };
        if ((HEAP32[(0 + 11600 | 0) >> 2] | 0) >>> 0 > $2 >>> 0) {
         break label$1
        }
        HEAP32[$2 >> 2] = 0;
       }
       if (!$8) {
        break label$20
       }
       label$29 : {
        label$30 : {
         $4 = HEAP32[($5 + 28 | 0) >> 2] | 0;
         $3 = ($4 << 2 | 0) + 11888 | 0;
         if ((HEAP32[$3 >> 2] | 0 | 0) != ($5 | 0)) {
          break label$30
         }
         HEAP32[$3 >> 2] = $6;
         if ($6) {
          break label$29
         }
         (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 11588 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 11588 | 0) >> 2] = wasm2js_i32$1;
         break label$20;
        }
        if ((HEAP32[(0 + 11600 | 0) >> 2] | 0) >>> 0 > $8 >>> 0) {
         break label$1
        }
        HEAP32[($8 + ((HEAP32[($8 + 16 | 0) >> 2] | 0 | 0) == ($5 | 0) ? 16 : 20) | 0) >> 2] = $6;
        if (!$6) {
         break label$20
        }
       }
       $4 = HEAP32[(0 + 11600 | 0) >> 2] | 0;
       if ($4 >>> 0 > $6 >>> 0) {
        break label$1
       }
       HEAP32[($6 + 24 | 0) >> 2] = $8;
       label$31 : {
        $3 = HEAP32[($5 + 16 | 0) >> 2] | 0;
        if (!$3) {
         break label$31
        }
        if ($4 >>> 0 > $3 >>> 0) {
         break label$1
        }
        HEAP32[($6 + 16 | 0) >> 2] = $3;
        HEAP32[($3 + 24 | 0) >> 2] = $6;
       }
       $3 = HEAP32[($5 + 20 | 0) >> 2] | 0;
       if (!$3) {
        break label$20
       }
       if ((HEAP32[(0 + 11600 | 0) >> 2] | 0) >>> 0 > $3 >>> 0) {
        break label$1
       }
       HEAP32[($6 + 20 | 0) >> 2] = $3;
       HEAP32[($3 + 24 | 0) >> 2] = $6;
      }
      $0 = ($7 & -8 | 0) + $0 | 0;
      HEAP32[($1 + 4 | 0) >> 2] = $0 | 1 | 0;
      HEAP32[($1 + $0 | 0) >> 2] = $0;
      if (($1 | 0) != (HEAP32[(0 + 11604 | 0) >> 2] | 0 | 0)) {
       break label$16
      }
      HEAP32[(0 + 11592 | 0) >> 2] = $0;
      return;
     }
     HEAP32[($5 + 4 | 0) >> 2] = $7 & -2 | 0;
     HEAP32[($1 + 4 | 0) >> 2] = $0 | 1 | 0;
     HEAP32[($1 + $0 | 0) >> 2] = $0;
    }
    label$32 : {
     if ($0 >>> 0 > 255 >>> 0) {
      break label$32
     }
     $3 = $0 >>> 3 | 0;
     $0 = ($3 << 3 | 0) + 11624 | 0;
     label$33 : {
      label$34 : {
       $4 = HEAP32[(0 + 11584 | 0) >> 2] | 0;
       $3 = 1 << $3 | 0;
       if ($4 & $3 | 0) {
        break label$34
       }
       HEAP32[(0 + 11584 | 0) >> 2] = $4 | $3 | 0;
       $3 = $0;
       break label$33;
      }
      $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
      if ((HEAP32[(0 + 11600 | 0) >> 2] | 0) >>> 0 > $3 >>> 0) {
       break label$1
      }
     }
     HEAP32[($0 + 8 | 0) >> 2] = $1;
     HEAP32[($3 + 12 | 0) >> 2] = $1;
     HEAP32[($1 + 12 | 0) >> 2] = $0;
     HEAP32[($1 + 8 | 0) >> 2] = $3;
     return;
    }
    $3 = 0;
    label$35 : {
     $4 = $0 >>> 8 | 0;
     if (!$4) {
      break label$35
     }
     $3 = 31;
     if ($0 >>> 0 > 16777215 >>> 0) {
      break label$35
     }
     $3 = (($4 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
     $4 = $4 << $3 | 0;
     $474 = $4;
     $4 = (($4 + 520192 | 0) >>> 16 | 0) & 4 | 0;
     $6 = $474 << $4 | 0;
     $481 = $6;
     $6 = (($6 + 245760 | 0) >>> 16 | 0) & 2 | 0;
     $3 = (($481 << $6 | 0) >>> 15 | 0) - ($4 | $3 | 0 | $6 | 0) | 0;
     $3 = ($3 << 1 | 0 | (($0 >>> ($3 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
    }
    HEAP32[($1 + 16 | 0) >> 2] = 0;
    HEAP32[($1 + 20 | 0) >> 2] = 0;
    HEAP32[($1 + 28 | 0) >> 2] = $3;
    $4 = ($3 << 2 | 0) + 11888 | 0;
    label$36 : {
     label$37 : {
      label$38 : {
       label$39 : {
        $6 = HEAP32[(0 + 11588 | 0) >> 2] | 0;
        $5 = 1 << $3 | 0;
        if ($6 & $5 | 0) {
         break label$39
        }
        HEAP32[(0 + 11588 | 0) >> 2] = $6 | $5 | 0;
        HEAP32[$4 >> 2] = $1;
        HEAP32[($1 + 24 | 0) >> 2] = $4;
        break label$38;
       }
       $3 = $0 << (($3 | 0) == (31 | 0) ? 0 : 25 - ($3 >>> 1 | 0) | 0) | 0;
       $6 = HEAP32[$4 >> 2] | 0;
       label$40 : while (1) {
        $4 = $6;
        if (((HEAP32[($4 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0 | 0)) {
         break label$37
        }
        $6 = $3 >>> 29 | 0;
        $3 = $3 << 1 | 0;
        $5 = ($4 + ($6 & 4 | 0) | 0) + 16 | 0;
        $6 = HEAP32[$5 >> 2] | 0;
        if ($6) {
         continue label$40
        }
        break label$40;
       };
       if ((HEAP32[(0 + 11600 | 0) >> 2] | 0) >>> 0 > $5 >>> 0) {
        break label$1
       }
       HEAP32[$5 >> 2] = $1;
       HEAP32[($1 + 24 | 0) >> 2] = $4;
      }
      HEAP32[($1 + 12 | 0) >> 2] = $1;
      HEAP32[($1 + 8 | 0) >> 2] = $1;
      break label$36;
     }
     $3 = HEAP32[(0 + 11600 | 0) >> 2] | 0;
     if ($3 >>> 0 > $4 >>> 0) {
      break label$1
     }
     $0 = HEAP32[($4 + 8 | 0) >> 2] | 0;
     if ($3 >>> 0 > $0 >>> 0) {
      break label$1
     }
     HEAP32[($0 + 12 | 0) >> 2] = $1;
     HEAP32[($4 + 8 | 0) >> 2] = $1;
     HEAP32[($1 + 24 | 0) >> 2] = 0;
     HEAP32[($1 + 12 | 0) >> 2] = $4;
     HEAP32[($1 + 8 | 0) >> 2] = $0;
    }
    $1 = (HEAP32[(0 + 11616 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[(0 + 11616 | 0) >> 2] = $1;
    if ($1) {
     break label$2
    }
    $1 = 12040;
    label$41 : while (1) {
     $0 = HEAP32[$1 >> 2] | 0;
     $1 = $0 + 8 | 0;
     if ($0) {
      continue label$41
     }
     break label$41;
    };
    HEAP32[(0 + 11616 | 0) >> 2] = -1;
   }
   return;
  }
  abort();
  abort();
 }
 
 function dlcalloc($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $13 = 0, $6$hi = 0, $8$hi = 0, $3 = 0, $3$hi = 0, $16 = 0, i64toi32_i32$2 = 0;
  label$1 : {
   label$2 : {
    if ($0) {
     break label$2
    }
    $2 = 0;
    break label$1;
   }
   i64toi32_i32$0 = 0;
   $6$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $8$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$1 = $8$hi;
   i64toi32_i32$1 = __wasm_i64_mul($0 | 0, i64toi32_i32$0 | 0, $1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $3 = i64toi32_i32$1;
   $3$hi = i64toi32_i32$0;
   $2 = i64toi32_i32$1;
   if (($1 | $0 | 0) >>> 0 < 65536 >>> 0) {
    break label$1
   }
   $16 = $2;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$2 = $3;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $13 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $13 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2 = ($13 | 0) != (0 | 0) ? -1 : $16;
  }
  label$3 : {
   $0 = dlmalloc($2 | 0) | 0;
   if (!$0) {
    break label$3
   }
   if (!((HEAPU8[($0 + -4 | 0) >> 0] | 0) & 3 | 0)) {
    break label$3
   }
   memset($0 | 0, 0 | 0, $2 | 0) | 0;
  }
  return $0 | 0;
 }
 
 function dlrealloc($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   if ($0) {
    break label$1
   }
   return dlmalloc($1 | 0) | 0 | 0;
  }
  label$2 : {
   if ($1 >>> 0 < -64 >>> 0) {
    break label$2
   }
   (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 48), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   return 0 | 0;
  }
  label$3 : {
   $2 = try_realloc_chunk($0 + -8 | 0 | 0, ($1 >>> 0 < 11 >>> 0 ? 16 : ($1 + 11 | 0) & -8 | 0) | 0) | 0;
   if (!$2) {
    break label$3
   }
   return $2 + 8 | 0 | 0;
  }
  label$4 : {
   $2 = dlmalloc($1 | 0) | 0;
   if ($2) {
    break label$4
   }
   return 0 | 0;
  }
  $3 = HEAP32[($0 + -4 | 0) >> 2] | 0;
  $3 = ($3 & -8 | 0) - ($3 & 3 | 0 ? 4 : 8) | 0;
  memcpy($2 | 0, $0 | 0, ($3 >>> 0 < $1 >>> 0 ? $3 : $1) | 0) | 0;
  dlfree($0 | 0);
  return $2 | 0;
 }
 
 function try_realloc_chunk($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $5 = 0, $6 = 0, $4 = 0, $7 = 0, $3 = 0, $2 = 0, $8 = 0, $9 = 0, $10 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   label$2 : {
    $2 = HEAP32[(0 + 11600 | 0) >> 2] | 0;
    if ($2 >>> 0 > $0 >>> 0) {
     break label$2
    }
    $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    $4 = $3 & 3 | 0;
    if (($4 | 0) == (1 | 0)) {
     break label$2
    }
    $5 = $3 & -8 | 0;
    $6 = $0 + $5 | 0;
    if ($6 >>> 0 <= $0 >>> 0) {
     break label$2
    }
    $7 = HEAP32[($6 + 4 | 0) >> 2] | 0;
    if (!($7 & 1 | 0)) {
     break label$2
    }
    label$3 : {
     if ($4) {
      break label$3
     }
     $4 = 0;
     if ($1 >>> 0 < 256 >>> 0) {
      break label$1
     }
     label$4 : {
      if ($5 >>> 0 < ($1 + 4 | 0) >>> 0) {
       break label$4
      }
      $4 = $0;
      if (($5 - $1 | 0) >>> 0 <= ((HEAP32[(0 + 12064 | 0) >> 2] | 0) << 1 | 0) >>> 0) {
       break label$1
      }
     }
     $4 = 0;
     break label$1;
    }
    label$5 : {
     if ($5 >>> 0 < $1 >>> 0) {
      break label$5
     }
     label$6 : {
      $5 = $5 - $1 | 0;
      if ($5 >>> 0 < 16 >>> 0) {
       break label$6
      }
      HEAP32[($0 + 4 | 0) >> 2] = $3 & 1 | 0 | $1 | 0 | 2 | 0;
      $1 = $0 + $1 | 0;
      HEAP32[($1 + 4 | 0) >> 2] = $5 | 3 | 0;
      HEAP32[($6 + 4 | 0) >> 2] = HEAP32[($6 + 4 | 0) >> 2] | 0 | 1 | 0;
      dispose_chunk($1 | 0, $5 | 0);
     }
     return $0 | 0;
    }
    $4 = 0;
    label$7 : {
     if ((HEAP32[(0 + 11608 | 0) >> 2] | 0 | 0) != ($6 | 0)) {
      break label$7
     }
     $6 = (HEAP32[(0 + 11596 | 0) >> 2] | 0) + $5 | 0;
     if ($6 >>> 0 <= $1 >>> 0) {
      break label$1
     }
     HEAP32[($0 + 4 | 0) >> 2] = $3 & 1 | 0 | $1 | 0 | 2 | 0;
     $5 = $0 + $1 | 0;
     $1 = $6 - $1 | 0;
     HEAP32[($5 + 4 | 0) >> 2] = $1 | 1 | 0;
     HEAP32[(0 + 11596 | 0) >> 2] = $1;
     HEAP32[(0 + 11608 | 0) >> 2] = $5;
     return $0 | 0;
    }
    label$8 : {
     if ((HEAP32[(0 + 11604 | 0) >> 2] | 0 | 0) != ($6 | 0)) {
      break label$8
     }
     $4 = 0;
     $6 = (HEAP32[(0 + 11592 | 0) >> 2] | 0) + $5 | 0;
     if ($6 >>> 0 < $1 >>> 0) {
      break label$1
     }
     label$9 : {
      label$10 : {
       $5 = $6 - $1 | 0;
       if ($5 >>> 0 < 16 >>> 0) {
        break label$10
       }
       HEAP32[($0 + 4 | 0) >> 2] = $3 & 1 | 0 | $1 | 0 | 2 | 0;
       $1 = $0 + $1 | 0;
       HEAP32[($1 + 4 | 0) >> 2] = $5 | 1 | 0;
       $6 = $0 + $6 | 0;
       HEAP32[$6 >> 2] = $5;
       HEAP32[($6 + 4 | 0) >> 2] = (HEAP32[($6 + 4 | 0) >> 2] | 0) & -2 | 0;
       break label$9;
      }
      HEAP32[($0 + 4 | 0) >> 2] = $3 & 1 | 0 | $6 | 0 | 2 | 0;
      $1 = $0 + $6 | 0;
      HEAP32[($1 + 4 | 0) >> 2] = HEAP32[($1 + 4 | 0) >> 2] | 0 | 1 | 0;
      $5 = 0;
      $1 = 0;
     }
     HEAP32[(0 + 11604 | 0) >> 2] = $1;
     HEAP32[(0 + 11592 | 0) >> 2] = $5;
     return $0 | 0;
    }
    $4 = 0;
    if ($7 & 2 | 0) {
     break label$1
    }
    $8 = ($7 & -8 | 0) + $5 | 0;
    if ($8 >>> 0 < $1 >>> 0) {
     break label$1
    }
    label$11 : {
     label$12 : {
      if ($7 >>> 0 > 255 >>> 0) {
       break label$12
      }
      $5 = HEAP32[($6 + 12 | 0) >> 2] | 0;
      label$13 : {
       $4 = HEAP32[($6 + 8 | 0) >> 2] | 0;
       $9 = $7 >>> 3 | 0;
       $7 = ($9 << 3 | 0) + 11624 | 0;
       if (($4 | 0) == ($7 | 0)) {
        break label$13
       }
       if ($2 >>> 0 > $4 >>> 0) {
        break label$2
       }
       if ((HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) != ($6 | 0)) {
        break label$2
       }
      }
      label$14 : {
       if (($5 | 0) != ($4 | 0)) {
        break label$14
       }
       (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 11584 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $9 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 11584 | 0) >> 2] = wasm2js_i32$1;
       break label$11;
      }
      label$15 : {
       if (($5 | 0) == ($7 | 0)) {
        break label$15
       }
       if ($2 >>> 0 > $5 >>> 0) {
        break label$2
       }
       if ((HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) != ($6 | 0)) {
        break label$2
       }
      }
      HEAP32[($4 + 12 | 0) >> 2] = $5;
      HEAP32[($5 + 8 | 0) >> 2] = $4;
      break label$11;
     }
     $10 = HEAP32[($6 + 24 | 0) >> 2] | 0;
     label$16 : {
      label$17 : {
       $7 = HEAP32[($6 + 12 | 0) >> 2] | 0;
       if (($7 | 0) == ($6 | 0)) {
        break label$17
       }
       $5 = HEAP32[($6 + 8 | 0) >> 2] | 0;
       if ($2 >>> 0 > $5 >>> 0) {
        break label$2
       }
       if ((HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) != ($6 | 0)) {
        break label$2
       }
       if ((HEAP32[($7 + 8 | 0) >> 2] | 0 | 0) != ($6 | 0)) {
        break label$2
       }
       HEAP32[($5 + 12 | 0) >> 2] = $7;
       HEAP32[($7 + 8 | 0) >> 2] = $5;
       break label$16;
      }
      label$18 : {
       $5 = $6 + 20 | 0;
       $4 = HEAP32[$5 >> 2] | 0;
       if ($4) {
        break label$18
       }
       $5 = $6 + 16 | 0;
       $4 = HEAP32[$5 >> 2] | 0;
       if ($4) {
        break label$18
       }
       $7 = 0;
       break label$16;
      }
      label$19 : while (1) {
       $9 = $5;
       $7 = $4;
       $5 = $7 + 20 | 0;
       $4 = HEAP32[$5 >> 2] | 0;
       if ($4) {
        continue label$19
       }
       $5 = $7 + 16 | 0;
       $4 = HEAP32[($7 + 16 | 0) >> 2] | 0;
       if ($4) {
        continue label$19
       }
       break label$19;
      };
      if ($2 >>> 0 > $9 >>> 0) {
       break label$2
      }
      HEAP32[$9 >> 2] = 0;
     }
     if (!$10) {
      break label$11
     }
     label$20 : {
      label$21 : {
       $4 = HEAP32[($6 + 28 | 0) >> 2] | 0;
       $5 = ($4 << 2 | 0) + 11888 | 0;
       if ((HEAP32[$5 >> 2] | 0 | 0) != ($6 | 0)) {
        break label$21
       }
       HEAP32[$5 >> 2] = $7;
       if ($7) {
        break label$20
       }
       (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 11588 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 11588 | 0) >> 2] = wasm2js_i32$1;
       break label$11;
      }
      if ((HEAP32[(0 + 11600 | 0) >> 2] | 0) >>> 0 > $10 >>> 0) {
       break label$2
      }
      HEAP32[($10 + ((HEAP32[($10 + 16 | 0) >> 2] | 0 | 0) == ($6 | 0) ? 16 : 20) | 0) >> 2] = $7;
      if (!$7) {
       break label$11
      }
     }
     $4 = HEAP32[(0 + 11600 | 0) >> 2] | 0;
     if ($4 >>> 0 > $7 >>> 0) {
      break label$2
     }
     HEAP32[($7 + 24 | 0) >> 2] = $10;
     label$22 : {
      $5 = HEAP32[($6 + 16 | 0) >> 2] | 0;
      if (!$5) {
       break label$22
      }
      if ($4 >>> 0 > $5 >>> 0) {
       break label$2
      }
      HEAP32[($7 + 16 | 0) >> 2] = $5;
      HEAP32[($5 + 24 | 0) >> 2] = $7;
     }
     $6 = HEAP32[($6 + 20 | 0) >> 2] | 0;
     if (!$6) {
      break label$11
     }
     if ((HEAP32[(0 + 11600 | 0) >> 2] | 0) >>> 0 > $6 >>> 0) {
      break label$2
     }
     HEAP32[($7 + 20 | 0) >> 2] = $6;
     HEAP32[($6 + 24 | 0) >> 2] = $7;
    }
    label$23 : {
     $6 = $8 - $1 | 0;
     if ($6 >>> 0 > 15 >>> 0) {
      break label$23
     }
     HEAP32[($0 + 4 | 0) >> 2] = $3 & 1 | 0 | $8 | 0 | 2 | 0;
     $1 = $0 + $8 | 0;
     HEAP32[($1 + 4 | 0) >> 2] = HEAP32[($1 + 4 | 0) >> 2] | 0 | 1 | 0;
     return $0 | 0;
    }
    HEAP32[($0 + 4 | 0) >> 2] = $3 & 1 | 0 | $1 | 0 | 2 | 0;
    $1 = $0 + $1 | 0;
    HEAP32[($1 + 4 | 0) >> 2] = $6 | 3 | 0;
    $5 = $0 + $8 | 0;
    HEAP32[($5 + 4 | 0) >> 2] = HEAP32[($5 + 4 | 0) >> 2] | 0 | 1 | 0;
    dispose_chunk($1 | 0, $6 | 0);
    return $0 | 0;
   }
   abort();
   abort();
  }
  return $4 | 0;
 }
 
 function dispose_chunk($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $5 = 0, $6 = 0, $2 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, $458 = 0, $465 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2 = $0 + $1 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     if ($3 & 1 | 0) {
      break label$3
     }
     if (!($3 & 3 | 0)) {
      break label$2
     }
     $3 = HEAP32[$0 >> 2] | 0;
     $0 = $0 - $3 | 0;
     $4 = HEAP32[(0 + 11600 | 0) >> 2] | 0;
     if ($0 >>> 0 < $4 >>> 0) {
      break label$1
     }
     $1 = $3 + $1 | 0;
     label$4 : {
      if ((HEAP32[(0 + 11604 | 0) >> 2] | 0 | 0) == ($0 | 0)) {
       break label$4
      }
      label$5 : {
       if ($3 >>> 0 > 255 >>> 0) {
        break label$5
       }
       $5 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       label$6 : {
        $6 = HEAP32[($0 + 8 | 0) >> 2] | 0;
        $7 = $3 >>> 3 | 0;
        $3 = ($7 << 3 | 0) + 11624 | 0;
        if (($6 | 0) == ($3 | 0)) {
         break label$6
        }
        if ($4 >>> 0 > $6 >>> 0) {
         break label$1
        }
        if ((HEAP32[($6 + 12 | 0) >> 2] | 0 | 0) != ($0 | 0)) {
         break label$1
        }
       }
       label$7 : {
        if (($5 | 0) != ($6 | 0)) {
         break label$7
        }
        (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 11584 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 11584 | 0) >> 2] = wasm2js_i32$1;
        break label$3;
       }
       label$8 : {
        if (($5 | 0) == ($3 | 0)) {
         break label$8
        }
        if ($4 >>> 0 > $5 >>> 0) {
         break label$1
        }
        if ((HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) != ($0 | 0)) {
         break label$1
        }
       }
       HEAP32[($6 + 12 | 0) >> 2] = $5;
       HEAP32[($5 + 8 | 0) >> 2] = $6;
       break label$3;
      }
      $8 = HEAP32[($0 + 24 | 0) >> 2] | 0;
      label$9 : {
       label$10 : {
        $6 = HEAP32[($0 + 12 | 0) >> 2] | 0;
        if (($6 | 0) == ($0 | 0)) {
         break label$10
        }
        $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
        if ($4 >>> 0 > $3 >>> 0) {
         break label$1
        }
        if ((HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) != ($0 | 0)) {
         break label$1
        }
        if ((HEAP32[($6 + 8 | 0) >> 2] | 0 | 0) != ($0 | 0)) {
         break label$1
        }
        HEAP32[($3 + 12 | 0) >> 2] = $6;
        HEAP32[($6 + 8 | 0) >> 2] = $3;
        break label$9;
       }
       label$11 : {
        $3 = $0 + 20 | 0;
        $5 = HEAP32[$3 >> 2] | 0;
        if ($5) {
         break label$11
        }
        $3 = $0 + 16 | 0;
        $5 = HEAP32[$3 >> 2] | 0;
        if ($5) {
         break label$11
        }
        $6 = 0;
        break label$9;
       }
       label$12 : while (1) {
        $7 = $3;
        $6 = $5;
        $3 = $6 + 20 | 0;
        $5 = HEAP32[$3 >> 2] | 0;
        if ($5) {
         continue label$12
        }
        $3 = $6 + 16 | 0;
        $5 = HEAP32[($6 + 16 | 0) >> 2] | 0;
        if ($5) {
         continue label$12
        }
        break label$12;
       };
       if ($4 >>> 0 > $7 >>> 0) {
        break label$1
       }
       HEAP32[$7 >> 2] = 0;
      }
      if (!$8) {
       break label$3
      }
      label$13 : {
       label$14 : {
        $5 = HEAP32[($0 + 28 | 0) >> 2] | 0;
        $3 = ($5 << 2 | 0) + 11888 | 0;
        if ((HEAP32[$3 >> 2] | 0 | 0) != ($0 | 0)) {
         break label$14
        }
        HEAP32[$3 >> 2] = $6;
        if ($6) {
         break label$13
        }
        (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 11588 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 11588 | 0) >> 2] = wasm2js_i32$1;
        break label$3;
       }
       if ((HEAP32[(0 + 11600 | 0) >> 2] | 0) >>> 0 > $8 >>> 0) {
        break label$1
       }
       HEAP32[($8 + ((HEAP32[($8 + 16 | 0) >> 2] | 0 | 0) == ($0 | 0) ? 16 : 20) | 0) >> 2] = $6;
       if (!$6) {
        break label$3
       }
      }
      $5 = HEAP32[(0 + 11600 | 0) >> 2] | 0;
      if ($5 >>> 0 > $6 >>> 0) {
       break label$1
      }
      HEAP32[($6 + 24 | 0) >> 2] = $8;
      label$15 : {
       $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
       if (!$3) {
        break label$15
       }
       if ($5 >>> 0 > $3 >>> 0) {
        break label$1
       }
       HEAP32[($6 + 16 | 0) >> 2] = $3;
       HEAP32[($3 + 24 | 0) >> 2] = $6;
      }
      $3 = HEAP32[($0 + 20 | 0) >> 2] | 0;
      if (!$3) {
       break label$3
      }
      if ((HEAP32[(0 + 11600 | 0) >> 2] | 0) >>> 0 > $3 >>> 0) {
       break label$1
      }
      HEAP32[($6 + 20 | 0) >> 2] = $3;
      HEAP32[($3 + 24 | 0) >> 2] = $6;
      break label$3;
     }
     $3 = HEAP32[($2 + 4 | 0) >> 2] | 0;
     if (($3 & 3 | 0 | 0) != (3 | 0)) {
      break label$3
     }
     HEAP32[(0 + 11592 | 0) >> 2] = $1;
     HEAP32[($2 + 4 | 0) >> 2] = $3 & -2 | 0;
     HEAP32[($0 + 4 | 0) >> 2] = $1 | 1 | 0;
     HEAP32[$2 >> 2] = $1;
     return;
    }
    $8 = HEAP32[(0 + 11600 | 0) >> 2] | 0;
    if ($2 >>> 0 < $8 >>> 0) {
     break label$1
    }
    label$16 : {
     label$17 : {
      $4 = HEAP32[($2 + 4 | 0) >> 2] | 0;
      if ($4 & 2 | 0) {
       break label$17
      }
      label$18 : {
       if ((HEAP32[(0 + 11608 | 0) >> 2] | 0 | 0) != ($2 | 0)) {
        break label$18
       }
       HEAP32[(0 + 11608 | 0) >> 2] = $0;
       $1 = (HEAP32[(0 + 11596 | 0) >> 2] | 0) + $1 | 0;
       HEAP32[(0 + 11596 | 0) >> 2] = $1;
       HEAP32[($0 + 4 | 0) >> 2] = $1 | 1 | 0;
       if (($0 | 0) != (HEAP32[(0 + 11604 | 0) >> 2] | 0 | 0)) {
        break label$2
       }
       HEAP32[(0 + 11592 | 0) >> 2] = 0;
       HEAP32[(0 + 11604 | 0) >> 2] = 0;
       return;
      }
      label$19 : {
       if ((HEAP32[(0 + 11604 | 0) >> 2] | 0 | 0) != ($2 | 0)) {
        break label$19
       }
       HEAP32[(0 + 11604 | 0) >> 2] = $0;
       $1 = (HEAP32[(0 + 11592 | 0) >> 2] | 0) + $1 | 0;
       HEAP32[(0 + 11592 | 0) >> 2] = $1;
       HEAP32[($0 + 4 | 0) >> 2] = $1 | 1 | 0;
       HEAP32[($0 + $1 | 0) >> 2] = $1;
       return;
      }
      label$20 : {
       label$21 : {
        if ($4 >>> 0 > 255 >>> 0) {
         break label$21
        }
        $3 = HEAP32[($2 + 12 | 0) >> 2] | 0;
        label$22 : {
         $5 = HEAP32[($2 + 8 | 0) >> 2] | 0;
         $7 = $4 >>> 3 | 0;
         $6 = ($7 << 3 | 0) + 11624 | 0;
         if (($5 | 0) == ($6 | 0)) {
          break label$22
         }
         if ($8 >>> 0 > $5 >>> 0) {
          break label$1
         }
         if ((HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) != ($2 | 0)) {
          break label$1
         }
        }
        label$23 : {
         if (($3 | 0) != ($5 | 0)) {
          break label$23
         }
         (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 11584 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 11584 | 0) >> 2] = wasm2js_i32$1;
         break label$20;
        }
        label$24 : {
         if (($3 | 0) == ($6 | 0)) {
          break label$24
         }
         if ($8 >>> 0 > $3 >>> 0) {
          break label$1
         }
         if ((HEAP32[($3 + 8 | 0) >> 2] | 0 | 0) != ($2 | 0)) {
          break label$1
         }
        }
        HEAP32[($5 + 12 | 0) >> 2] = $3;
        HEAP32[($3 + 8 | 0) >> 2] = $5;
        break label$20;
       }
       $9 = HEAP32[($2 + 24 | 0) >> 2] | 0;
       label$25 : {
        label$26 : {
         $6 = HEAP32[($2 + 12 | 0) >> 2] | 0;
         if (($6 | 0) == ($2 | 0)) {
          break label$26
         }
         $3 = HEAP32[($2 + 8 | 0) >> 2] | 0;
         if ($8 >>> 0 > $3 >>> 0) {
          break label$1
         }
         if ((HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) != ($2 | 0)) {
          break label$1
         }
         if ((HEAP32[($6 + 8 | 0) >> 2] | 0 | 0) != ($2 | 0)) {
          break label$1
         }
         HEAP32[($3 + 12 | 0) >> 2] = $6;
         HEAP32[($6 + 8 | 0) >> 2] = $3;
         break label$25;
        }
        label$27 : {
         $3 = $2 + 20 | 0;
         $5 = HEAP32[$3 >> 2] | 0;
         if ($5) {
          break label$27
         }
         $3 = $2 + 16 | 0;
         $5 = HEAP32[$3 >> 2] | 0;
         if ($5) {
          break label$27
         }
         $6 = 0;
         break label$25;
        }
        label$28 : while (1) {
         $7 = $3;
         $6 = $5;
         $3 = $6 + 20 | 0;
         $5 = HEAP32[$3 >> 2] | 0;
         if ($5) {
          continue label$28
         }
         $3 = $6 + 16 | 0;
         $5 = HEAP32[($6 + 16 | 0) >> 2] | 0;
         if ($5) {
          continue label$28
         }
         break label$28;
        };
        if ($8 >>> 0 > $7 >>> 0) {
         break label$1
        }
        HEAP32[$7 >> 2] = 0;
       }
       if (!$9) {
        break label$20
       }
       label$29 : {
        label$30 : {
         $5 = HEAP32[($2 + 28 | 0) >> 2] | 0;
         $3 = ($5 << 2 | 0) + 11888 | 0;
         if ((HEAP32[$3 >> 2] | 0 | 0) != ($2 | 0)) {
          break label$30
         }
         HEAP32[$3 >> 2] = $6;
         if ($6) {
          break label$29
         }
         (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 11588 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 11588 | 0) >> 2] = wasm2js_i32$1;
         break label$20;
        }
        if ((HEAP32[(0 + 11600 | 0) >> 2] | 0) >>> 0 > $9 >>> 0) {
         break label$1
        }
        HEAP32[($9 + ((HEAP32[($9 + 16 | 0) >> 2] | 0 | 0) == ($2 | 0) ? 16 : 20) | 0) >> 2] = $6;
        if (!$6) {
         break label$20
        }
       }
       $5 = HEAP32[(0 + 11600 | 0) >> 2] | 0;
       if ($5 >>> 0 > $6 >>> 0) {
        break label$1
       }
       HEAP32[($6 + 24 | 0) >> 2] = $9;
       label$31 : {
        $3 = HEAP32[($2 + 16 | 0) >> 2] | 0;
        if (!$3) {
         break label$31
        }
        if ($5 >>> 0 > $3 >>> 0) {
         break label$1
        }
        HEAP32[($6 + 16 | 0) >> 2] = $3;
        HEAP32[($3 + 24 | 0) >> 2] = $6;
       }
       $3 = HEAP32[($2 + 20 | 0) >> 2] | 0;
       if (!$3) {
        break label$20
       }
       if ((HEAP32[(0 + 11600 | 0) >> 2] | 0) >>> 0 > $3 >>> 0) {
        break label$1
       }
       HEAP32[($6 + 20 | 0) >> 2] = $3;
       HEAP32[($3 + 24 | 0) >> 2] = $6;
      }
      $1 = ($4 & -8 | 0) + $1 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = $1 | 1 | 0;
      HEAP32[($0 + $1 | 0) >> 2] = $1;
      if (($0 | 0) != (HEAP32[(0 + 11604 | 0) >> 2] | 0 | 0)) {
       break label$16
      }
      HEAP32[(0 + 11592 | 0) >> 2] = $1;
      return;
     }
     HEAP32[($2 + 4 | 0) >> 2] = $4 & -2 | 0;
     HEAP32[($0 + 4 | 0) >> 2] = $1 | 1 | 0;
     HEAP32[($0 + $1 | 0) >> 2] = $1;
    }
    label$32 : {
     if ($1 >>> 0 > 255 >>> 0) {
      break label$32
     }
     $3 = $1 >>> 3 | 0;
     $1 = ($3 << 3 | 0) + 11624 | 0;
     label$33 : {
      label$34 : {
       $5 = HEAP32[(0 + 11584 | 0) >> 2] | 0;
       $3 = 1 << $3 | 0;
       if ($5 & $3 | 0) {
        break label$34
       }
       HEAP32[(0 + 11584 | 0) >> 2] = $5 | $3 | 0;
       $3 = $1;
       break label$33;
      }
      $3 = HEAP32[($1 + 8 | 0) >> 2] | 0;
      if ((HEAP32[(0 + 11600 | 0) >> 2] | 0) >>> 0 > $3 >>> 0) {
       break label$1
      }
     }
     HEAP32[($1 + 8 | 0) >> 2] = $0;
     HEAP32[($3 + 12 | 0) >> 2] = $0;
     HEAP32[($0 + 12 | 0) >> 2] = $1;
     HEAP32[($0 + 8 | 0) >> 2] = $3;
     return;
    }
    $3 = 0;
    label$35 : {
     $5 = $1 >>> 8 | 0;
     if (!$5) {
      break label$35
     }
     $3 = 31;
     if ($1 >>> 0 > 16777215 >>> 0) {
      break label$35
     }
     $3 = (($5 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
     $5 = $5 << $3 | 0;
     $458 = $5;
     $5 = (($5 + 520192 | 0) >>> 16 | 0) & 4 | 0;
     $6 = $458 << $5 | 0;
     $465 = $6;
     $6 = (($6 + 245760 | 0) >>> 16 | 0) & 2 | 0;
     $3 = (($465 << $6 | 0) >>> 15 | 0) - ($5 | $3 | 0 | $6 | 0) | 0;
     $3 = ($3 << 1 | 0 | (($1 >>> ($3 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
    }
    HEAP32[($0 + 16 | 0) >> 2] = 0;
    HEAP32[($0 + 20 | 0) >> 2] = 0;
    HEAP32[($0 + 28 | 0) >> 2] = $3;
    $5 = ($3 << 2 | 0) + 11888 | 0;
    label$36 : {
     label$37 : {
      label$38 : {
       $6 = HEAP32[(0 + 11588 | 0) >> 2] | 0;
       $2 = 1 << $3 | 0;
       if ($6 & $2 | 0) {
        break label$38
       }
       HEAP32[(0 + 11588 | 0) >> 2] = $6 | $2 | 0;
       HEAP32[$5 >> 2] = $0;
       HEAP32[($0 + 24 | 0) >> 2] = $5;
       break label$37;
      }
      $3 = $1 << (($3 | 0) == (31 | 0) ? 0 : 25 - ($3 >>> 1 | 0) | 0) | 0;
      $6 = HEAP32[$5 >> 2] | 0;
      label$39 : while (1) {
       $5 = $6;
       if (((HEAP32[($6 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($1 | 0)) {
        break label$36
       }
       $6 = $3 >>> 29 | 0;
       $3 = $3 << 1 | 0;
       $2 = ($5 + ($6 & 4 | 0) | 0) + 16 | 0;
       $6 = HEAP32[$2 >> 2] | 0;
       if ($6) {
        continue label$39
       }
       break label$39;
      };
      if ((HEAP32[(0 + 11600 | 0) >> 2] | 0) >>> 0 > $2 >>> 0) {
       break label$1
      }
      HEAP32[$2 >> 2] = $0;
      HEAP32[($0 + 24 | 0) >> 2] = $5;
     }
     HEAP32[($0 + 12 | 0) >> 2] = $0;
     HEAP32[($0 + 8 | 0) >> 2] = $0;
     return;
    }
    $3 = HEAP32[(0 + 11600 | 0) >> 2] | 0;
    if ($3 >>> 0 > $5 >>> 0) {
     break label$1
    }
    $1 = HEAP32[($5 + 8 | 0) >> 2] | 0;
    if ($3 >>> 0 > $1 >>> 0) {
     break label$1
    }
    HEAP32[($1 + 12 | 0) >> 2] = $0;
    HEAP32[($5 + 8 | 0) >> 2] = $0;
    HEAP32[($0 + 24 | 0) >> 2] = 0;
    HEAP32[($0 + 12 | 0) >> 2] = $5;
    HEAP32[($0 + 8 | 0) >> 2] = $1;
   }
   return;
  }
  abort();
  abort();
 }
 
 function FLAC__crc8($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = 0;
  label$1 : {
   if (!$1) {
    break label$1
   }
   label$2 : while (1) {
    $2 = HEAPU8[((global$1 + 1024 | 0) + ((HEAPU8[$0 >> 0] | 0) ^ ($2 & 255 | 0) | 0) | 0) >> 0] | 0;
    $0 = $0 + 1 | 0;
    $1 = $1 + -1 | 0;
    if ($1) {
     continue label$2
    }
    break label$2;
   };
  }
  return $2 & 255 | 0 | 0;
 }
 
 function FLAC__crc16($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $4 = 0, $3 = 0;
  $2 = 0;
  label$1 : {
   if ($1 >>> 0 <= 7 >>> 0) {
    break label$1
   }
   label$2 : while (1) {
    $3 = HEAPU8[$0 >> 0] | 0 | ((HEAPU8[($0 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
    $4 = global$1 + 1280 | 0;
    $2 = (($3 << 24 | 0 | (($3 << 8 | 0) & 16711680 | 0) | 0) >>> 16 | 0) ^ $2 | 0;
    $2 = (((((((HEAPU16[(($4 + (($2 & 255 | 0) << 1 | 0) | 0) + 3072 | 0) >> 1] | 0) ^ (HEAPU16[(($4 + (($2 >>> 7 | 0) & 510 | 0) | 0) + 3584 | 0) >> 1] | 0) | 0) ^ (HEAPU16[(($4 + ((HEAPU8[($0 + 2 | 0) >> 0] | 0) << 1 | 0) | 0) + 2560 | 0) >> 1] | 0) | 0) ^ (HEAPU16[(($4 + ((HEAPU8[($0 + 3 | 0) >> 0] | 0) << 1 | 0) | 0) + 2048 | 0) >> 1] | 0) | 0) ^ (HEAPU16[(($4 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 1 | 0) | 0) + 1536 | 0) >> 1] | 0) | 0) ^ (HEAPU16[(($4 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 1 | 0) | 0) + 1024 | 0) >> 1] | 0) | 0) ^ (HEAPU16[(($4 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 1 | 0) | 0) + 512 | 0) >> 1] | 0) | 0) ^ (HEAPU16[($4 + ((HEAPU8[($0 + 7 | 0) >> 0] | 0) << 1 | 0) | 0) >> 1] | 0) | 0;
    $0 = $0 + 8 | 0;
    $1 = $1 + -8 | 0;
    if ($1 >>> 0 > 7 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  label$3 : {
   if (!$1) {
    break label$3
   }
   label$4 : while (1) {
    $2 = (HEAPU16[((global$1 + 1280 | 0) + (((HEAPU8[$0 >> 0] | 0) ^ (($2 & 65280 | 0) >>> 8 | 0) | 0) << 1 | 0) | 0) >> 1] | 0) ^ ($2 << 8 | 0) | 0;
    $0 = $0 + 1 | 0;
    $1 = $1 + -1 | 0;
    if ($1) {
     continue label$4
    }
    break label$4;
   };
  }
  return $2 & 65535 | 0 | 0;
 }
 
 function FLAC__crc16_update_words32($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $45 = 0;
  label$1 : {
   if ($1 >>> 0 < 2 >>> 0) {
    break label$1
   }
   label$2 : while (1) {
    $3 = global$1 + 1280 | 0;
    $4 = HEAP32[$0 >> 2] | 0;
    $2 = $2 ^ ($4 >>> 16 | 0) | 0;
    $45 = (((HEAPU16[(($3 + (($2 & 255 | 0) << 1 | 0) | 0) + 3072 | 0) >> 1] | 0) ^ (HEAPU16[(($3 + (($2 >>> 7 | 0) & 510 | 0) | 0) + 3584 | 0) >> 1] | 0) | 0) ^ (HEAPU16[(($3 + (($4 >>> 7 | 0) & 510 | 0) | 0) + 2560 | 0) >> 1] | 0) | 0) ^ (HEAPU16[(($3 + (($4 & 255 | 0) << 1 | 0) | 0) + 2048 | 0) >> 1] | 0) | 0;
    $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    $2 = ((($45 ^ (HEAPU16[(($3 + (($4 >>> 23 | 0) & 510 | 0) | 0) + 1536 | 0) >> 1] | 0) | 0) ^ (HEAPU16[(($3 + (($4 >>> 15 | 0) & 510 | 0) | 0) + 1024 | 0) >> 1] | 0) | 0) ^ (HEAPU16[(($3 + (($4 >>> 7 | 0) & 510 | 0) | 0) + 512 | 0) >> 1] | 0) | 0) ^ (HEAPU16[($3 + (($4 & 255 | 0) << 1 | 0) | 0) >> 1] | 0) | 0;
    $0 = $0 + 8 | 0;
    $1 = $1 + -2 | 0;
    if ($1 >>> 0 > 1 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  label$3 : {
   if (!$1) {
    break label$3
   }
   $3 = global$1 + 1280 | 0;
   $0 = HEAP32[$0 >> 2] | 0;
   $4 = $2 ^ ($0 >>> 16 | 0) | 0;
   $2 = (((HEAPU16[(($3 + (($4 & 255 | 0) << 1 | 0) | 0) + 1024 | 0) >> 1] | 0) ^ (HEAPU16[(($3 + (($4 >>> 7 | 0) & 510 | 0) | 0) + 1536 | 0) >> 1] | 0) | 0) ^ (HEAPU16[(($3 + (($0 >>> 7 | 0) & 510 | 0) | 0) + 512 | 0) >> 1] | 0) | 0) ^ (HEAPU16[($3 + (($0 & 255 | 0) << 1 | 0) | 0) >> 1] | 0) | 0;
  }
  return $2 & 65535 | 0 | 0;
 }
 
 function FLAC__bitwriter_new() {
  return dlcalloc(1 | 0, 20 | 0) | 0 | 0;
 }
 
 function FLAC__bitwriter_delete($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   $1 = HEAP32[$0 >> 2] | 0;
   if (!$1) {
    break label$1
   }
   dlfree($1 | 0);
  }
  dlfree($0 | 0);
 }
 
 function FLAC__bitwriter_free($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   $1 = HEAP32[$0 >> 2] | 0;
   if (!$1) {
    break label$1
   }
   dlfree($1 | 0);
  }
  HEAP32[($0 + 16 | 0) >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[($0 + 8 | 0) >> 2] = 0;
  HEAP32[($0 + 12 | 0) >> 2] = 0;
 }
 
 function FLAC__bitwriter_init($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[($0 + 16 | 0) >> 2] = 0;
  HEAP32[($0 + 8 | 0) >> 2] = 8192;
  HEAP32[($0 + 12 | 0) >> 2] = 0;
  $1 = dlmalloc(32768 | 0) | 0;
  HEAP32[$0 >> 2] = $1;
  return ($1 | 0) != (0 | 0) | 0;
 }
 
 function FLAC__bitwriter_clear($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0;
  i64toi32_i32$1 = $0;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = 0;
 }
 
 function FLAC__bitwriter_get_write_crc16($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $4 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   $2 = global$0 - 16 | 0;
   $3 = $2;
   if ($2 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $3;
  }
  label$3 : {
   label$4 : {
    if (FLAC__bitwriter_get_buffer($0 | 0, $2 + 12 | 0 | 0, $2 + 8 | 0 | 0) | 0) {
     break label$4
    }
    $0 = 0;
    break label$3;
   }
   (wasm2js_i32$0 = $1, wasm2js_i32$1 = FLAC__crc16(HEAP32[($2 + 12 | 0) >> 2] | 0 | 0, HEAP32[($2 + 8 | 0) >> 2] | 0 | 0) | 0), HEAP16[wasm2js_i32$0 >> 1] = wasm2js_i32$1;
   $0 = 1;
  }
  label$5 : {
   $4 = $2 + 16 | 0;
   if ($4 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $4;
  }
  return $0 | 0;
 }
 
 function FLAC__bitwriter_get_buffer($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $7 = 0, $6 = 0, $69 = 0;
  $3 = 0;
  label$1 : {
   $4 = HEAP32[($0 + 16 | 0) >> 2] | 0;
   if ($4 & 7 | 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($4) {
      break label$3
     }
     $5 = HEAP32[$0 >> 2] | 0;
     $3 = 0;
     break label$2;
    }
    label$4 : {
     $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     if (($3 | 0) != (HEAP32[($0 + 8 | 0) >> 2] | 0 | 0)) {
      break label$4
     }
     $5 = ($4 + 63 | 0) >>> 5 | 0;
     $6 = $3 + $5 | 0;
     if ($6 >>> 0 <= $3 >>> 0) {
      break label$4
     }
     $3 = 0;
     $7 = HEAP32[$0 >> 2] | 0;
     label$5 : {
      label$6 : {
       $4 = $5 & 1023 | 0;
       $4 = ($4 ? 1024 - $4 | 0 : 0) + $6 | 0;
       if (!$4) {
        break label$6
       }
       if (($4 & 1073741823 | 0 | 0) != ($4 | 0)) {
        break label$1
       }
       $5 = dlrealloc($7 | 0, $4 << 2 | 0 | 0) | 0;
       if ($5) {
        break label$5
       }
       dlfree($7 | 0);
       return 0 | 0;
      }
      $3 = 0;
      $5 = dlrealloc($7 | 0, 0 | 0) | 0;
      if (!$5) {
       break label$1
      }
     }
     HEAP32[($0 + 8 | 0) >> 2] = $4;
     HEAP32[$0 >> 2] = $5;
     $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     $4 = HEAP32[($0 + 16 | 0) >> 2] | 0;
    }
    $5 = HEAP32[$0 >> 2] | 0;
    $69 = $5 + ($3 << 2 | 0) | 0;
    $3 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << (32 - $4 | 0) | 0;
    HEAP32[$69 >> 2] = $3 << 24 | 0 | (($3 << 8 | 0) & 16711680 | 0) | 0 | (($3 >>> 8 | 0) & 65280 | 0 | ($3 >>> 24 | 0) | 0) | 0;
    $3 = (HEAP32[($0 + 16 | 0) >> 2] | 0) >>> 3 | 0;
   }
   HEAP32[$1 >> 2] = $5;
   HEAP32[$2 >> 2] = $3 + ((HEAP32[($0 + 12 | 0) >> 2] | 0) << 2 | 0) | 0;
   $3 = 1;
  }
  return $3 | 0;
 }
 
 function FLAC__bitwriter_release_buffer($0) {
  $0 = $0 | 0;
 }
 
 function FLAC__bitwriter_get_write_crc8($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $4 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   $2 = global$0 - 16 | 0;
   $3 = $2;
   if ($2 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $3;
  }
  label$3 : {
   label$4 : {
    if (FLAC__bitwriter_get_buffer($0 | 0, $2 + 12 | 0 | 0, $2 + 8 | 0 | 0) | 0) {
     break label$4
    }
    $0 = 0;
    break label$3;
   }
   (wasm2js_i32$0 = $1, wasm2js_i32$1 = FLAC__crc8(HEAP32[($2 + 12 | 0) >> 2] | 0 | 0, HEAP32[($2 + 8 | 0) >> 2] | 0 | 0) | 0), HEAP8[wasm2js_i32$0 >> 0] = wasm2js_i32$1;
   $0 = 1;
  }
  label$5 : {
   $4 = $2 + 16 | 0;
   if ($4 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $4;
  }
  return $0 | 0;
 }
 
 function FLAC__bitwriter_write_zeroes($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  label$1 : {
   label$2 : {
    if (!$1) {
     break label$2
    }
    label$3 : {
     $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     if ($2 >>> 0 > ($3 + $1 | 0) >>> 0) {
      break label$3
     }
     $4 = ((($1 + (HEAP32[($0 + 16 | 0) >> 2] | 0) | 0) + 31 | 0) >>> 5 | 0) + $3 | 0;
     if ($4 >>> 0 <= $2 >>> 0) {
      break label$3
     }
     $3 = 0;
     $5 = HEAP32[$0 >> 2] | 0;
     label$4 : {
      label$5 : {
       $2 = ($4 - $2 | 0) & 1023 | 0;
       $2 = ($2 ? 1024 - $2 | 0 : 0) + $4 | 0;
       if (!$2) {
        break label$5
       }
       if (($2 & 1073741823 | 0 | 0) != ($2 | 0)) {
        break label$1
       }
       $4 = dlrealloc($5 | 0, $2 << 2 | 0 | 0) | 0;
       if ($4) {
        break label$4
       }
       dlfree($5 | 0);
       return 0 | 0;
      }
      $3 = 0;
      $4 = dlrealloc($5 | 0, 0 | 0) | 0;
      if (!$4) {
       break label$1
      }
     }
     HEAP32[($0 + 8 | 0) >> 2] = $2;
     HEAP32[$0 >> 2] = $4;
    }
    label$6 : {
     $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
     if (!$3) {
      break label$6
     }
     $2 = 32 - $3 | 0;
     $2 = $2 >>> 0 < $1 >>> 0 ? $2 : $1;
     $4 = $2 + $3 | 0;
     HEAP32[($0 + 16 | 0) >> 2] = $4;
     $3 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $2 | 0;
     HEAP32[($0 + 4 | 0) >> 2] = $3;
     if (($4 | 0) != (32 | 0)) {
      break label$2
     }
     $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     HEAP32[($0 + 12 | 0) >> 2] = $4 + 1 | 0;
     HEAP32[((HEAP32[$0 >> 2] | 0) + ($4 << 2 | 0) | 0) >> 2] = $3 << 24 | 0 | (($3 << 8 | 0) & 16711680 | 0) | 0 | (($3 >>> 8 | 0) & 65280 | 0 | ($3 >>> 24 | 0) | 0) | 0;
     HEAP32[($0 + 16 | 0) >> 2] = 0;
     $1 = $1 - $2 | 0;
    }
    label$7 : {
     if ($1 >>> 0 < 32 >>> 0) {
      break label$7
     }
     $2 = HEAP32[$0 >> 2] | 0;
     label$8 : while (1) {
      $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $3 + 1 | 0;
      HEAP32[($2 + ($3 << 2 | 0) | 0) >> 2] = 0;
      $1 = $1 + -32 | 0;
      if ($1 >>> 0 > 31 >>> 0) {
       continue label$8
      }
      break label$8;
     };
    }
    if (!$1) {
     break label$2
    }
    HEAP32[($0 + 16 | 0) >> 2] = $1;
    HEAP32[($0 + 4 | 0) >> 2] = 0;
   }
   $3 = 1;
  }
  return $3 | 0;
 }
 
 function FLAC__bitwriter_write_raw_uint32($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $5 = 0, $4 = 0, $6 = 0;
  $3 = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   if ($2 >>> 0 < 32 >>> 0 & ($1 >>> $2 | 0 | 0) != (0 | 0) | 0) {
    break label$1
   }
   if ($2 >>> 0 > 32 >>> 0) {
    break label$1
   }
   $4 = HEAP32[$0 >> 2] | 0;
   if (!$4) {
    break label$1
   }
   $3 = 1;
   if (!$2) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $5 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     if ($5 >>> 0 <= ($3 + $2 | 0) >>> 0) {
      break label$3
     }
     $5 = $4;
     break label$2;
    }
    label$4 : {
     $6 = ((($2 + (HEAP32[($0 + 16 | 0) >> 2] | 0) | 0) + 31 | 0) >>> 5 | 0) + $3 | 0;
     if ($6 >>> 0 > $5 >>> 0) {
      break label$4
     }
     $5 = $4;
     break label$2;
    }
    $3 = 0;
    label$5 : {
     label$6 : {
      $5 = ($6 - $5 | 0) & 1023 | 0;
      $6 = ($5 ? 1024 - $5 | 0 : 0) + $6 | 0;
      if (!$6) {
       break label$6
      }
      if (($6 & 1073741823 | 0 | 0) != ($6 | 0)) {
       break label$1
      }
      $5 = dlrealloc($4 | 0, $6 << 2 | 0 | 0) | 0;
      if ($5) {
       break label$5
      }
      dlfree($4 | 0);
      return 0 | 0;
     }
     $3 = 0;
     $5 = dlrealloc($4 | 0, 0 | 0) | 0;
     if (!$5) {
      break label$1
     }
    }
    HEAP32[($0 + 8 | 0) >> 2] = $6;
    HEAP32[$0 >> 2] = $5;
   }
   label$7 : {
    $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
    $4 = 32 - $3 | 0;
    if ($4 >>> 0 <= $2 >>> 0) {
     break label$7
    }
    HEAP32[($0 + 16 | 0) >> 2] = $3 + $2 | 0;
    HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $2 | 0 | $1 | 0;
    return 1 | 0;
   }
   label$8 : {
    if (!$3) {
     break label$8
    }
    $2 = $2 - $4 | 0;
    HEAP32[($0 + 16 | 0) >> 2] = $2;
    $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
    HEAP32[($0 + 12 | 0) >> 2] = $3 + 1 | 0;
    $2 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $4 | 0 | ($1 >>> $2 | 0) | 0;
    HEAP32[($5 + ($3 << 2 | 0) | 0) >> 2] = $2 << 24 | 0 | (($2 << 8 | 0) & 16711680 | 0) | 0 | (($2 >>> 8 | 0) & 65280 | 0 | ($2 >>> 24 | 0) | 0) | 0;
    HEAP32[($0 + 4 | 0) >> 2] = $1;
    return 1 | 0;
   }
   $3 = 1;
   $2 = HEAP32[($0 + 12 | 0) >> 2] | 0;
   HEAP32[($0 + 12 | 0) >> 2] = $2 + 1 | 0;
   HEAP32[($5 + ($2 << 2 | 0) | 0) >> 2] = $1 << 24 | 0 | (($1 << 8 | 0) & 16711680 | 0) | 0 | (($1 >>> 8 | 0) & 65280 | 0 | ($1 >>> 24 | 0) | 0) | 0;
  }
  return $3 | 0;
 }
 
 function FLAC__bitwriter_write_raw_int32($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $5 = 0, $4 = 0, $6 = 0;
  $3 = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   if ($2 >>> 0 > 32 >>> 0) {
    break label$1
   }
   $4 = HEAP32[$0 >> 2] | 0;
   if (!$4) {
    break label$1
   }
   $3 = 1;
   if (!$2) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $5 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     if ($5 >>> 0 <= ($3 + $2 | 0) >>> 0) {
      break label$3
     }
     $5 = $4;
     break label$2;
    }
    label$4 : {
     $6 = ((($2 + (HEAP32[($0 + 16 | 0) >> 2] | 0) | 0) + 31 | 0) >>> 5 | 0) + $3 | 0;
     if ($6 >>> 0 > $5 >>> 0) {
      break label$4
     }
     $5 = $4;
     break label$2;
    }
    $3 = 0;
    label$5 : {
     label$6 : {
      $5 = ($6 - $5 | 0) & 1023 | 0;
      $6 = ($5 ? 1024 - $5 | 0 : 0) + $6 | 0;
      if (!$6) {
       break label$6
      }
      if (($6 & 1073741823 | 0 | 0) != ($6 | 0)) {
       break label$1
      }
      $5 = dlrealloc($4 | 0, $6 << 2 | 0 | 0) | 0;
      if ($5) {
       break label$5
      }
      dlfree($4 | 0);
      return 0 | 0;
     }
     $3 = 0;
     $5 = dlrealloc($4 | 0, 0 | 0) | 0;
     if (!$5) {
      break label$1
     }
    }
    HEAP32[($0 + 8 | 0) >> 2] = $6;
    HEAP32[$0 >> 2] = $5;
   }
   $1 = ($2 >>> 0 < 32 >>> 0 ? (-1 << $2 | 0) ^ -1 | 0 : -1) & $1 | 0;
   label$7 : {
    $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
    $4 = 32 - $3 | 0;
    if ($4 >>> 0 <= $2 >>> 0) {
     break label$7
    }
    HEAP32[($0 + 16 | 0) >> 2] = $3 + $2 | 0;
    HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $2 | 0 | $1 | 0;
    return 1 | 0;
   }
   label$8 : {
    if (!$3) {
     break label$8
    }
    $2 = $2 - $4 | 0;
    HEAP32[($0 + 16 | 0) >> 2] = $2;
    $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
    HEAP32[($0 + 12 | 0) >> 2] = $3 + 1 | 0;
    $2 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $4 | 0 | ($1 >>> $2 | 0) | 0;
    HEAP32[($5 + ($3 << 2 | 0) | 0) >> 2] = $2 << 24 | 0 | (($2 << 8 | 0) & 16711680 | 0) | 0 | (($2 >>> 8 | 0) & 65280 | 0 | ($2 >>> 24 | 0) | 0) | 0;
    HEAP32[($0 + 4 | 0) >> 2] = $1;
    return 1 | 0;
   }
   $3 = 1;
   $2 = HEAP32[($0 + 12 | 0) >> 2] | 0;
   HEAP32[($0 + 12 | 0) >> 2] = $2 + 1 | 0;
   HEAP32[($5 + ($2 << 2 | 0) | 0) >> 2] = $1 << 24 | 0 | (($1 << 8 | 0) & 16711680 | 0) | 0 | (($1 >>> 8 | 0) & 65280 | 0 | ($1 >>> 24 | 0) | 0) | 0;
  }
  return $3 | 0;
 }
 
 function FLAC__bitwriter_write_raw_uint64($0, $1, $1$hi, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0, $5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $12 = 0, $8 = 0, i64toi32_i32$2 = 0;
  label$1 : {
   label$2 : {
    if ($2 >>> 0 < 33 >>> 0) {
     break label$2
    }
    $3 = 0;
    $8 = $0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     $12 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0
    } else {
     $12 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0
    }
    if (!(FLAC__bitwriter_write_raw_uint32($8 | 0, $12 | 0, $2 + -32 | 0 | 0) | 0)) {
     break label$1
    }
    if (!$0) {
     break label$1
    }
    $2 = HEAP32[$0 >> 2] | 0;
    if (!$2) {
     break label$1
    }
    label$3 : {
     label$4 : {
      $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
      $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      if ($4 >>> 0 <= ($3 + 32 | 0) >>> 0) {
       break label$4
      }
      $4 = $2;
      break label$3;
     }
     label$5 : {
      $5 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 63 | 0) >>> 5 | 0) + $3 | 0;
      if ($5 >>> 0 > $4 >>> 0) {
       break label$5
      }
      $4 = $2;
      break label$3;
     }
     $3 = 0;
     label$6 : {
      label$7 : {
       $4 = ($5 - $4 | 0) & 1023 | 0;
       $5 = ($4 ? 1024 - $4 | 0 : 0) + $5 | 0;
       if (!$5) {
        break label$7
       }
       if (($5 & 1073741823 | 0 | 0) != ($5 | 0)) {
        break label$1
       }
       $4 = dlrealloc($2 | 0, $5 << 2 | 0 | 0) | 0;
       if ($4) {
        break label$6
       }
       dlfree($2 | 0);
       return 0 | 0;
      }
      $3 = 0;
      $4 = dlrealloc($2 | 0, 0 | 0) | 0;
      if (!$4) {
       break label$1
      }
     }
     HEAP32[($0 + 8 | 0) >> 2] = $5;
     HEAP32[$0 >> 2] = $4;
    }
    label$8 : {
     $2 = HEAP32[($0 + 16 | 0) >> 2] | 0;
     if ($2 >>> 0 < 33 >>> 0) {
      break label$8
     }
     HEAP32[($0 + 4 | 0) >> 2] = -1;
     HEAP32[($0 + 16 | 0) >> 2] = $2 + 32 | 0;
     return 1 | 0;
    }
    $3 = $1;
    label$9 : {
     if (!$2) {
      break label$9
     }
     $5 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     HEAP32[($0 + 12 | 0) >> 2] = $5 + 1 | 0;
     $2 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << (32 - $2 | 0) | 0 | ($3 >>> $2 | 0) | 0;
     HEAP32[($4 + ($5 << 2 | 0) | 0) >> 2] = $2 << 24 | 0 | (($2 << 8 | 0) & 16711680 | 0) | 0 | (($2 >>> 8 | 0) & 65280 | 0 | ($2 >>> 24 | 0) | 0) | 0;
     HEAP32[($0 + 4 | 0) >> 2] = $3;
     return 1 | 0;
    }
    $2 = HEAP32[($0 + 12 | 0) >> 2] | 0;
    HEAP32[($0 + 12 | 0) >> 2] = $2 + 1 | 0;
    HEAP32[($4 + ($2 << 2 | 0) | 0) >> 2] = $3 << 24 | 0 | (($3 << 8 | 0) & 16711680 | 0) | 0 | (($3 >>> 8 | 0) & 65280 | 0 | ($3 >>> 24 | 0) | 0) | 0;
    return 1 | 0;
   }
   $3 = FLAC__bitwriter_write_raw_uint32($0 | 0, $1 | 0, $2 | 0) | 0;
  }
  return $3 | 0;
 }
 
 function FLAC__bitwriter_write_raw_uint32_little_endian($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0, $5 = 0, $4 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   if ($0) {
    break label$1
   }
   return 0 | 0;
  }
  label$2 : {
   $2 = HEAP32[$0 >> 2] | 0;
   if ($2) {
    break label$2
   }
   return 0 | 0;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     if ($3 >>> 0 <= ($4 + 8 | 0) >>> 0) {
      break label$5
     }
     $3 = $2;
     break label$4;
    }
    label$6 : {
     $5 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $4 | 0;
     if ($5 >>> 0 > $3 >>> 0) {
      break label$6
     }
     $3 = $2;
     break label$4;
    }
    $4 = 0;
    label$7 : {
     label$8 : {
      $3 = ($5 - $3 | 0) & 1023 | 0;
      $5 = ($3 ? 1024 - $3 | 0 : 0) + $5 | 0;
      if (!$5) {
       break label$8
      }
      if (($5 & 1073741823 | 0 | 0) != ($5 | 0)) {
       break label$3
      }
      $3 = dlrealloc($2 | 0, $5 << 2 | 0 | 0) | 0;
      if ($3) {
       break label$7
      }
      dlfree($2 | 0);
      return 0 | 0;
     }
     $4 = 0;
     $3 = dlrealloc($2 | 0, 0 | 0) | 0;
     if (!$3) {
      break label$3
     }
    }
    HEAP32[($0 + 8 | 0) >> 2] = $5;
    HEAP32[$0 >> 2] = $3;
   }
   $4 = $1 & 255 | 0;
   label$9 : {
    label$10 : {
     $2 = HEAP32[($0 + 16 | 0) >> 2] | 0;
     $5 = 32 - $2 | 0;
     if ($5 >>> 0 < 9 >>> 0) {
      break label$10
     }
     HEAP32[($0 + 16 | 0) >> 2] = $2 + 8 | 0;
     HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $4 | 0;
     break label$9;
    }
    label$11 : {
     if (!$2) {
      break label$11
     }
     $2 = $2 + -24 | 0;
     HEAP32[($0 + 16 | 0) >> 2] = $2;
     $6 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     HEAP32[($0 + 12 | 0) >> 2] = $6 + 1 | 0;
     $2 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $5 | 0 | ($4 >>> $2 | 0) | 0;
     HEAP32[($3 + ($6 << 2 | 0) | 0) >> 2] = $2 << 24 | 0 | (($2 << 8 | 0) & 16711680 | 0) | 0 | (($2 >>> 8 | 0) & 65280 | 0 | ($2 >>> 24 | 0) | 0) | 0;
     HEAP32[($0 + 4 | 0) >> 2] = $4;
     break label$9;
    }
    $2 = HEAP32[($0 + 12 | 0) >> 2] | 0;
    HEAP32[($0 + 12 | 0) >> 2] = $2 + 1 | 0;
    (wasm2js_i32$0 = $3 + ($2 << 2 | 0) | 0, wasm2js_i32$1 = (__wasm_rotl_i32($4 | 0, 24 | 0) | 0) & -16711936 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   }
   label$12 : {
    if ($3) {
     break label$12
    }
    return 0 | 0;
   }
   label$13 : {
    label$14 : {
     $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     if ($2 >>> 0 <= ($4 + 8 | 0) >>> 0) {
      break label$14
     }
     $2 = $3;
     break label$13;
    }
    label$15 : {
     $5 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $4 | 0;
     if ($5 >>> 0 > $2 >>> 0) {
      break label$15
     }
     $2 = $3;
     break label$13;
    }
    $4 = 0;
    label$16 : {
     label$17 : {
      $2 = ($5 - $2 | 0) & 1023 | 0;
      $5 = ($2 ? 1024 - $2 | 0 : 0) + $5 | 0;
      if (!$5) {
       break label$17
      }
      if (($5 & 1073741823 | 0 | 0) != ($5 | 0)) {
       break label$3
      }
      $2 = dlrealloc($3 | 0, $5 << 2 | 0 | 0) | 0;
      if ($2) {
       break label$16
      }
      dlfree($3 | 0);
      return 0 | 0;
     }
     $4 = 0;
     $2 = dlrealloc($3 | 0, 0 | 0) | 0;
     if (!$2) {
      break label$3
     }
    }
    HEAP32[($0 + 8 | 0) >> 2] = $5;
    HEAP32[$0 >> 2] = $2;
   }
   $4 = ($1 >>> 8 | 0) & 255 | 0;
   label$18 : {
    label$19 : {
     $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
     $5 = 32 - $3 | 0;
     if ($5 >>> 0 < 9 >>> 0) {
      break label$19
     }
     HEAP32[($0 + 16 | 0) >> 2] = $3 + 8 | 0;
     HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $4 | 0;
     break label$18;
    }
    label$20 : {
     if (!$3) {
      break label$20
     }
     $3 = $3 + -24 | 0;
     HEAP32[($0 + 16 | 0) >> 2] = $3;
     $6 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     HEAP32[($0 + 12 | 0) >> 2] = $6 + 1 | 0;
     $3 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $5 | 0 | ($4 >>> $3 | 0) | 0;
     HEAP32[($2 + ($6 << 2 | 0) | 0) >> 2] = $3 << 24 | 0 | (($3 << 8 | 0) & 16711680 | 0) | 0 | (($3 >>> 8 | 0) & 65280 | 0 | ($3 >>> 24 | 0) | 0) | 0;
     HEAP32[($0 + 4 | 0) >> 2] = $4;
     break label$18;
    }
    $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
    HEAP32[($0 + 12 | 0) >> 2] = $3 + 1 | 0;
    (wasm2js_i32$0 = $2 + ($3 << 2 | 0) | 0, wasm2js_i32$1 = (__wasm_rotl_i32($4 | 0, 24 | 0) | 0) & -16711936 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   }
   label$21 : {
    if ($2) {
     break label$21
    }
    return 0 | 0;
   }
   label$22 : {
    label$23 : {
     label$24 : {
      $5 = HEAP32[($0 + 8 | 0) >> 2] | 0;
      $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      if ($5 >>> 0 <= ($4 + 8 | 0) >>> 0) {
       break label$24
      }
      $5 = $2;
      break label$23;
     }
     label$25 : {
      $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
      $6 = (($3 + 39 | 0) >>> 5 | 0) + $4 | 0;
      if ($6 >>> 0 > $5 >>> 0) {
       break label$25
      }
      $5 = $2;
      break label$22;
     }
     $4 = 0;
     label$26 : {
      label$27 : {
       $3 = ($6 - $5 | 0) & 1023 | 0;
       $3 = ($3 ? 1024 - $3 | 0 : 0) + $6 | 0;
       if (!$3) {
        break label$27
       }
       if (($3 & 1073741823 | 0 | 0) != ($3 | 0)) {
        break label$3
       }
       $5 = dlrealloc($2 | 0, $3 << 2 | 0 | 0) | 0;
       if ($5) {
        break label$26
       }
       dlfree($2 | 0);
       return 0 | 0;
      }
      $4 = 0;
      $5 = dlrealloc($2 | 0, 0 | 0) | 0;
      if (!$5) {
       break label$3
      }
     }
     HEAP32[($0 + 8 | 0) >> 2] = $3;
     HEAP32[$0 >> 2] = $5;
    }
    $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
   }
   $2 = ($1 >>> 16 | 0) & 255 | 0;
   label$28 : {
    label$29 : {
     $4 = 32 - $3 | 0;
     if ($4 >>> 0 < 9 >>> 0) {
      break label$29
     }
     HEAP32[($0 + 16 | 0) >> 2] = $3 + 8 | 0;
     HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $2 | 0;
     break label$28;
    }
    label$30 : {
     if (!$3) {
      break label$30
     }
     $3 = $3 + -24 | 0;
     HEAP32[($0 + 16 | 0) >> 2] = $3;
     $6 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     HEAP32[($0 + 12 | 0) >> 2] = $6 + 1 | 0;
     $3 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $4 | 0 | ($2 >>> $3 | 0) | 0;
     HEAP32[($5 + ($6 << 2 | 0) | 0) >> 2] = $3 << 24 | 0 | (($3 << 8 | 0) & 16711680 | 0) | 0 | (($3 >>> 8 | 0) & 65280 | 0 | ($3 >>> 24 | 0) | 0) | 0;
     HEAP32[($0 + 4 | 0) >> 2] = $2;
     break label$28;
    }
    $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
    HEAP32[($0 + 12 | 0) >> 2] = $3 + 1 | 0;
    (wasm2js_i32$0 = $5 + ($3 << 2 | 0) | 0, wasm2js_i32$1 = (__wasm_rotl_i32($2 | 0, 24 | 0) | 0) & -16711936 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   }
   $4 = 0;
   if (!$5) {
    break label$3
   }
   label$31 : {
    label$32 : {
     $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     if ($2 >>> 0 > ($4 + 8 | 0) >>> 0) {
      break label$32
     }
     $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
     $6 = (($3 + 39 | 0) >>> 5 | 0) + $4 | 0;
     if ($6 >>> 0 <= $2 >>> 0) {
      break label$31
     }
     $4 = 0;
     label$33 : {
      label$34 : {
       $3 = ($6 - $2 | 0) & 1023 | 0;
       $3 = ($3 ? 1024 - $3 | 0 : 0) + $6 | 0;
       if (!$3) {
        break label$34
       }
       if (($3 & 1073741823 | 0 | 0) != ($3 | 0)) {
        break label$3
       }
       $2 = dlrealloc($5 | 0, $3 << 2 | 0 | 0) | 0;
       if ($2) {
        break label$33
       }
       dlfree($5 | 0);
       return 0 | 0;
      }
      $4 = 0;
      $2 = dlrealloc($5 | 0, 0 | 0) | 0;
      if (!$2) {
       break label$3
      }
     }
     HEAP32[($0 + 8 | 0) >> 2] = $3;
     HEAP32[$0 >> 2] = $2;
     $5 = $2;
    }
    $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
   }
   $1 = $1 >>> 24 | 0;
   label$35 : {
    $2 = 32 - $3 | 0;
    if ($2 >>> 0 < 9 >>> 0) {
     break label$35
    }
    HEAP32[($0 + 16 | 0) >> 2] = $3 + 8 | 0;
    HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $1 | 0;
    return 1 | 0;
   }
   label$36 : {
    if (!$3) {
     break label$36
    }
    $3 = $3 + -24 | 0;
    HEAP32[($0 + 16 | 0) >> 2] = $3;
    $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
    HEAP32[($0 + 12 | 0) >> 2] = $4 + 1 | 0;
    $3 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $2 | 0 | ($1 >>> $3 | 0) | 0;
    HEAP32[($5 + ($4 << 2 | 0) | 0) >> 2] = $3 << 24 | 0 | (($3 << 8 | 0) & 16711680 | 0) | 0 | (($3 >>> 8 | 0) & 65280 | 0 | ($3 >>> 24 | 0) | 0) | 0;
    HEAP32[($0 + 4 | 0) >> 2] = $1;
    return 1 | 0;
   }
   $4 = 1;
   $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
   HEAP32[($0 + 12 | 0) >> 2] = $3 + 1 | 0;
   (wasm2js_i32$0 = $5 + ($3 << 2 | 0) | 0, wasm2js_i32$1 = (__wasm_rotl_i32($1 | 0, 24 | 0) | 0) & -16711936 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  }
  return $4 | 0;
 }
 
 function FLAC__bitwriter_write_byte_block($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0, $5 = 0, $8 = 0, $6 = 0, $7 = 0, $9 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   label$2 : {
    $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
    if ($3 >>> 0 > ((($2 >>> 2 | 0) + $4 | 0) + 1 | 0) >>> 0) {
     break label$2
    }
    $5 = (((($2 << 3 | 0) + (HEAP32[($0 + 16 | 0) >> 2] | 0) | 0) + 31 | 0) >>> 5 | 0) + $4 | 0;
    if ($5 >>> 0 <= $3 >>> 0) {
     break label$2
    }
    $4 = 0;
    $6 = HEAP32[$0 >> 2] | 0;
    label$3 : {
     label$4 : {
      $3 = ($5 - $3 | 0) & 1023 | 0;
      $3 = ($3 ? 1024 - $3 | 0 : 0) + $5 | 0;
      if (!$3) {
       break label$4
      }
      if (($3 & 1073741823 | 0 | 0) != ($3 | 0)) {
       break label$1
      }
      $5 = dlrealloc($6 | 0, $3 << 2 | 0 | 0) | 0;
      if ($5) {
       break label$3
      }
      dlfree($6 | 0);
      return 0 | 0;
     }
     $4 = 0;
     $5 = dlrealloc($6 | 0, 0 | 0) | 0;
     if (!$5) {
      break label$1
     }
    }
    HEAP32[($0 + 8 | 0) >> 2] = $3;
    HEAP32[$0 >> 2] = $5;
   }
   $4 = 1;
   if (!$2) {
    break label$1
   }
   $7 = HEAP32[$0 >> 2] | 0;
   $6 = $7;
   $3 = 0;
   label$5 : while (1) {
    label$6 : {
     if ($6) {
      break label$6
     }
     return 0 | 0;
    }
    $5 = HEAPU8[($1 + $3 | 0) >> 0] | 0;
    label$7 : {
     label$8 : {
      $8 = HEAP32[($0 + 8 | 0) >> 2] | 0;
      $9 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      if ($8 >>> 0 > ($9 + 8 | 0) >>> 0) {
       break label$8
      }
      $4 = HEAP32[($0 + 16 | 0) >> 2] | 0;
      $9 = (($4 + 39 | 0) >>> 5 | 0) + $9 | 0;
      if ($9 >>> 0 <= $8 >>> 0) {
       break label$7
      }
      label$9 : {
       label$10 : {
        $4 = ($9 - $8 | 0) & 1023 | 0;
        $8 = ($4 ? 1024 - $4 | 0 : 0) + $9 | 0;
        if (!$8) {
         break label$10
        }
        label$11 : {
         if (($8 & 1073741823 | 0 | 0) == ($8 | 0)) {
          break label$11
         }
         return 0 | 0;
        }
        $7 = dlrealloc($6 | 0, $8 << 2 | 0 | 0) | 0;
        if ($7) {
         break label$9
        }
        dlfree($6 | 0);
        return 0 | 0;
       }
       $4 = 0;
       $7 = dlrealloc($6 | 0, 0 | 0) | 0;
       if (!$7) {
        break label$1
       }
      }
      HEAP32[($0 + 8 | 0) >> 2] = $8;
      HEAP32[$0 >> 2] = $7;
      $6 = $7;
     }
     $4 = HEAP32[($0 + 16 | 0) >> 2] | 0;
    }
    label$12 : {
     label$13 : {
      $8 = 32 - $4 | 0;
      if ($8 >>> 0 < 9 >>> 0) {
       break label$13
      }
      HEAP32[($0 + 16 | 0) >> 2] = $4 + 8 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $5 | 0;
      break label$12;
     }
     label$14 : {
      if (!$4) {
       break label$14
      }
      $4 = $4 + -24 | 0;
      HEAP32[($0 + 16 | 0) >> 2] = $4;
      $9 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $9 + 1 | 0;
      $4 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $8 | 0 | ($5 >>> $4 | 0) | 0;
      HEAP32[($6 + ($9 << 2 | 0) | 0) >> 2] = $4 << 24 | 0 | (($4 << 8 | 0) & 16711680 | 0) | 0 | (($4 >>> 8 | 0) & 65280 | 0 | ($4 >>> 24 | 0) | 0) | 0;
      HEAP32[($0 + 4 | 0) >> 2] = $5;
      break label$12;
     }
     $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     HEAP32[($0 + 12 | 0) >> 2] = $4 + 1 | 0;
     (wasm2js_i32$0 = $7 + ($4 << 2 | 0) | 0, wasm2js_i32$1 = (__wasm_rotl_i32($5 | 0, 24 | 0) | 0) & -16711936 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     $6 = $7;
    }
    $4 = 1;
    $3 = $3 + 1 | 0;
    if (($3 | 0) != ($2 | 0)) {
     continue label$5
    }
    break label$5;
   };
  }
  return $4 | 0;
 }
 
 function FLAC__bitwriter_write_unary_unsigned($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $5 = 0, $2 = 0, $3 = 0, $4 = 0;
  label$1 : {
   label$2 : {
    if ($1 >>> 0 > 31 >>> 0) {
     break label$2
    }
    $2 = 0;
    if (!$0) {
     break label$1
    }
    $3 = HEAP32[$0 >> 2] | 0;
    if (!$3) {
     break label$1
    }
    label$3 : {
     label$4 : {
      $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
      $2 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      $5 = $1 + 1 | 0;
      if ($4 >>> 0 <= ($2 + $5 | 0) >>> 0) {
       break label$4
      }
      $4 = $3;
      break label$3;
     }
     label$5 : {
      $1 = ((($1 + (HEAP32[($0 + 16 | 0) >> 2] | 0) | 0) + 32 | 0) >>> 5 | 0) + $2 | 0;
      if ($1 >>> 0 > $4 >>> 0) {
       break label$5
      }
      $4 = $3;
      break label$3;
     }
     $2 = 0;
     label$6 : {
      label$7 : {
       $4 = ($1 - $4 | 0) & 1023 | 0;
       $1 = ($4 ? 1024 - $4 | 0 : 0) + $1 | 0;
       if (!$1) {
        break label$7
       }
       if (($1 & 1073741823 | 0 | 0) != ($1 | 0)) {
        break label$1
       }
       $4 = dlrealloc($3 | 0, $1 << 2 | 0 | 0) | 0;
       if ($4) {
        break label$6
       }
       dlfree($3 | 0);
       return 0 | 0;
      }
      $2 = 0;
      $4 = dlrealloc($3 | 0, 0 | 0) | 0;
      if (!$4) {
       break label$1
      }
     }
     HEAP32[($0 + 8 | 0) >> 2] = $1;
     HEAP32[$0 >> 2] = $4;
    }
    label$8 : {
     $1 = HEAP32[($0 + 16 | 0) >> 2] | 0;
     $2 = 32 - $1 | 0;
     if ($5 >>> 0 >= $2 >>> 0) {
      break label$8
     }
     HEAP32[($0 + 16 | 0) >> 2] = $1 + $5 | 0;
     HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $5 | 0 | 1 | 0;
     return 1 | 0;
    }
    label$9 : {
     if (!$1) {
      break label$9
     }
     $1 = $5 - $2 | 0;
     HEAP32[($0 + 16 | 0) >> 2] = $1;
     $5 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     HEAP32[($0 + 12 | 0) >> 2] = $5 + 1 | 0;
     $1 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $2 | 0 | (1 >>> $1 | 0) | 0;
     HEAP32[($4 + ($5 << 2 | 0) | 0) >> 2] = $1 << 24 | 0 | (($1 << 8 | 0) & 16711680 | 0) | 0 | (($1 >>> 8 | 0) & 65280 | 0 | ($1 >>> 24 | 0) | 0) | 0;
     HEAP32[($0 + 4 | 0) >> 2] = 1;
     return 1 | 0;
    }
    $1 = HEAP32[($0 + 12 | 0) >> 2] | 0;
    HEAP32[($0 + 12 | 0) >> 2] = $1 + 1 | 0;
    HEAP32[($4 + ($1 << 2 | 0) | 0) >> 2] = 16777216;
    return 1 | 0;
   }
   $2 = 0;
   $1 = FLAC__bitwriter_write_zeroes($0 | 0, $1 | 0) | 0;
   if (!$0) {
    break label$1
   }
   if (!$1) {
    break label$1
   }
   $1 = HEAP32[$0 >> 2] | 0;
   if (!$1) {
    break label$1
   }
   label$10 : {
    label$11 : {
     $5 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     $2 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     if ($5 >>> 0 <= ($2 + 1 | 0) >>> 0) {
      break label$11
     }
     $5 = $1;
     break label$10;
    }
    label$12 : {
     $3 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 32 | 0) >>> 5 | 0) + $2 | 0;
     if ($3 >>> 0 > $5 >>> 0) {
      break label$12
     }
     $5 = $1;
     break label$10;
    }
    $2 = 0;
    label$13 : {
     label$14 : {
      $5 = ($3 - $5 | 0) & 1023 | 0;
      $3 = ($5 ? 1024 - $5 | 0 : 0) + $3 | 0;
      if (!$3) {
       break label$14
      }
      if (($3 & 1073741823 | 0 | 0) != ($3 | 0)) {
       break label$1
      }
      $5 = dlrealloc($1 | 0, $3 << 2 | 0 | 0) | 0;
      if ($5) {
       break label$13
      }
      dlfree($1 | 0);
      return 0 | 0;
     }
     $2 = 0;
     $5 = dlrealloc($1 | 0, 0 | 0) | 0;
     if (!$5) {
      break label$1
     }
    }
    HEAP32[($0 + 8 | 0) >> 2] = $3;
    HEAP32[$0 >> 2] = $5;
   }
   label$15 : {
    $1 = HEAP32[($0 + 16 | 0) >> 2] | 0;
    $2 = 32 - $1 | 0;
    if ($2 >>> 0 < 2 >>> 0) {
     break label$15
    }
    HEAP32[($0 + 16 | 0) >> 2] = $1 + 1 | 0;
    HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 1 | 0 | 1 | 0;
    return 1 | 0;
   }
   label$16 : {
    if (!$1) {
     break label$16
    }
    $1 = $1 + -31 | 0;
    HEAP32[($0 + 16 | 0) >> 2] = $1;
    $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
    HEAP32[($0 + 12 | 0) >> 2] = $3 + 1 | 0;
    $1 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $2 | 0 | (1 >>> $1 | 0) | 0;
    HEAP32[($5 + ($3 << 2 | 0) | 0) >> 2] = $1 << 24 | 0 | (($1 << 8 | 0) & 16711680 | 0) | 0 | (($1 >>> 8 | 0) & 65280 | 0 | ($1 >>> 24 | 0) | 0) | 0;
    HEAP32[($0 + 4 | 0) >> 2] = 1;
    return 1 | 0;
   }
   $2 = 1;
   $1 = HEAP32[($0 + 12 | 0) >> 2] | 0;
   HEAP32[($0 + 12 | 0) >> 2] = $1 + 1 | 0;
   HEAP32[($5 + ($1 << 2 | 0) | 0) >> 2] = 16777216;
  }
  return $2 | 0;
 }
 
 function FLAC__bitwriter_write_rice_signed_block($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $11 = 0, $10 = 0, $8 = 0, $4 = 0, $9 = 0, $12 = 0, $5 = 0, $6 = 0, $7 = 0;
  $4 = 1;
  label$1 : {
   if (!$2) {
    break label$1
   }
   $5 = $3 + 1 | 0;
   $6 = -1 << $3 | 0;
   $7 = -1 >>> (31 - $3 | 0) | 0;
   label$2 : while (1) {
    $8 = HEAP32[$1 >> 2] | 0;
    $9 = ($8 << 1 | 0) ^ ($8 >> 31 | 0) | 0;
    $8 = $9 >>> $3 | 0;
    $10 = $8 + $5 | 0;
    label$3 : {
     label$4 : {
      $11 = HEAP32[($0 + 16 | 0) >> 2] | 0;
      if (!$11) {
       break label$4
      }
      $4 = $10 + $11 | 0;
      if ($4 >>> 0 > 31 >>> 0) {
       break label$4
      }
      HEAP32[($0 + 16 | 0) >> 2] = $4;
      HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $10 | 0 | (($9 | $6 | 0) & $7 | 0) | 0;
      break label$3;
     }
     label$5 : {
      $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
      $12 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      if ($4 >>> 0 > ((($11 + $8 | 0) + $12 | 0) + 1 | 0) >>> 0) {
       break label$5
      }
      $11 = $12 + ((($10 + $11 | 0) + 31 | 0) >>> 5 | 0) | 0;
      if ($11 >>> 0 <= $4 >>> 0) {
       break label$5
      }
      $12 = HEAP32[$0 >> 2] | 0;
      label$6 : {
       label$7 : {
        $10 = ($11 - $4 | 0) & 1023 | 0;
        $11 = ($10 ? 1024 - $10 | 0 : 0) + $11 | 0;
        if (!$11) {
         break label$7
        }
        $4 = 0;
        if (($11 & 1073741823 | 0 | 0) != ($11 | 0)) {
         break label$1
        }
        $10 = dlrealloc($12 | 0, $11 << 2 | 0 | 0) | 0;
        if ($10) {
         break label$6
        }
        dlfree($12 | 0);
        return 0 | 0;
       }
       $4 = 0;
       $10 = dlrealloc($12 | 0, 0 | 0) | 0;
       if (!$10) {
        break label$1
       }
      }
      HEAP32[($0 + 8 | 0) >> 2] = $11;
      HEAP32[$0 >> 2] = $10;
     }
     label$8 : {
      if (!$8) {
       break label$8
      }
      label$9 : {
       $11 = HEAP32[($0 + 16 | 0) >> 2] | 0;
       if (!$11) {
        break label$9
       }
       $10 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       label$10 : {
        $4 = 32 - $11 | 0;
        if ($8 >>> 0 >= $4 >>> 0) {
         break label$10
        }
        HEAP32[($0 + 16 | 0) >> 2] = $11 + $8 | 0;
        HEAP32[($0 + 4 | 0) >> 2] = $10 << $8 | 0;
        break label$8;
       }
       $11 = $10 << $4 | 0;
       HEAP32[($0 + 4 | 0) >> 2] = $11;
       $10 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       HEAP32[($0 + 12 | 0) >> 2] = $10 + 1 | 0;
       HEAP32[((HEAP32[$0 >> 2] | 0) + ($10 << 2 | 0) | 0) >> 2] = $11 << 24 | 0 | (($11 << 8 | 0) & 16711680 | 0) | 0 | (($11 >>> 8 | 0) & 65280 | 0 | ($11 >>> 24 | 0) | 0) | 0;
       HEAP32[($0 + 16 | 0) >> 2] = 0;
       $8 = $8 - $4 | 0;
      }
      label$11 : {
       if ($8 >>> 0 < 32 >>> 0) {
        break label$11
       }
       $10 = HEAP32[$0 >> 2] | 0;
       label$12 : while (1) {
        $11 = HEAP32[($0 + 12 | 0) >> 2] | 0;
        HEAP32[($0 + 12 | 0) >> 2] = $11 + 1 | 0;
        HEAP32[($10 + ($11 << 2 | 0) | 0) >> 2] = 0;
        $8 = $8 + -32 | 0;
        if ($8 >>> 0 > 31 >>> 0) {
         continue label$12
        }
        break label$12;
       };
      }
      if (!$8) {
       break label$8
      }
      HEAP32[($0 + 16 | 0) >> 2] = $8;
      HEAP32[($0 + 4 | 0) >> 2] = 0;
     }
     $8 = ($9 | $6 | 0) & $7 | 0;
     $11 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     label$13 : {
      $9 = HEAP32[($0 + 16 | 0) >> 2] | 0;
      $10 = 32 - $9 | 0;
      if ($5 >>> 0 >= $10 >>> 0) {
       break label$13
      }
      HEAP32[($0 + 16 | 0) >> 2] = $9 + $5 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = $11 << $5 | 0 | $8 | 0;
      break label$3;
     }
     $9 = $5 - $10 | 0;
     HEAP32[($0 + 16 | 0) >> 2] = $9;
     $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     HEAP32[($0 + 12 | 0) >> 2] = $4 + 1 | 0;
     $11 = $8 >>> $9 | 0 | ($11 << $10 | 0) | 0;
     HEAP32[((HEAP32[$0 >> 2] | 0) + ($4 << 2 | 0) | 0) >> 2] = $11 << 24 | 0 | (($11 << 8 | 0) & 16711680 | 0) | 0 | (($11 >>> 8 | 0) & 65280 | 0 | ($11 >>> 24 | 0) | 0) | 0;
     HEAP32[($0 + 4 | 0) >> 2] = $8;
    }
    $1 = $1 + 4 | 0;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue label$2
    }
    break label$2;
   };
   $4 = 1;
  }
  return $4 | 0;
 }
 
 function FLAC__bitwriter_write_utf8_uint32($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $5 = 0, $3 = 0, $6 = 0, $2 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $235 = 0, $629 = 0, $1012 = 0, $1137 = 0, $1518 = 0, $1643 = 0, $1768 = 0, $2145 = 0, $2267 = 0, $2389 = 0, $2517 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2 = 0;
  label$1 : {
   if (($1 | 0) < (0 | 0)) {
    break label$1
   }
   label$2 : {
    if ($1 >>> 0 > 127 >>> 0) {
     break label$2
    }
    if (!$0) {
     break label$1
    }
    $3 = HEAP32[$0 >> 2] | 0;
    if (!$3) {
     break label$1
    }
    label$3 : {
     label$4 : {
      $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
      $2 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      if ($4 >>> 0 <= ($2 + 8 | 0) >>> 0) {
       break label$4
      }
      $4 = $3;
      break label$3;
     }
     label$5 : {
      $5 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $2 | 0;
      if ($5 >>> 0 > $4 >>> 0) {
       break label$5
      }
      $4 = $3;
      break label$3;
     }
     $2 = 0;
     label$6 : {
      label$7 : {
       $4 = ($5 - $4 | 0) & 1023 | 0;
       $5 = ($4 ? 1024 - $4 | 0 : 0) + $5 | 0;
       if (!$5) {
        break label$7
       }
       if (($5 & 1073741823 | 0 | 0) != ($5 | 0)) {
        break label$1
       }
       $4 = dlrealloc($3 | 0, $5 << 2 | 0 | 0) | 0;
       if ($4) {
        break label$6
       }
       dlfree($3 | 0);
       return 0 | 0;
      }
      $2 = 0;
      $4 = dlrealloc($3 | 0, 0 | 0) | 0;
      if (!$4) {
       break label$1
      }
     }
     HEAP32[($0 + 8 | 0) >> 2] = $5;
     HEAP32[$0 >> 2] = $4;
    }
    label$8 : {
     $2 = HEAP32[($0 + 16 | 0) >> 2] | 0;
     $3 = 32 - $2 | 0;
     if ($3 >>> 0 < 9 >>> 0) {
      break label$8
     }
     HEAP32[($0 + 16 | 0) >> 2] = $2 + 8 | 0;
     HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $1 | 0;
     return 1 | 0;
    }
    label$9 : {
     if (!$2) {
      break label$9
     }
     $2 = $2 + -24 | 0;
     HEAP32[($0 + 16 | 0) >> 2] = $2;
     $5 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     HEAP32[($0 + 12 | 0) >> 2] = $5 + 1 | 0;
     $2 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $3 | 0 | ($1 >>> $2 | 0) | 0;
     HEAP32[($4 + ($5 << 2 | 0) | 0) >> 2] = $2 << 24 | 0 | (($2 << 8 | 0) & 16711680 | 0) | 0 | (($2 >>> 8 | 0) & 65280 | 0 | ($2 >>> 24 | 0) | 0) | 0;
     HEAP32[($0 + 4 | 0) >> 2] = $1;
     return 1 | 0;
    }
    $2 = HEAP32[($0 + 12 | 0) >> 2] | 0;
    HEAP32[($0 + 12 | 0) >> 2] = $2 + 1 | 0;
    HEAP32[($4 + ($2 << 2 | 0) | 0) >> 2] = $1 << 24 | 0 | (($1 << 8 | 0) & 16711680 | 0) | 0 | (($1 >>> 8 | 0) & 65280 | 0 | ($1 >>> 24 | 0) | 0) | 0;
    return 1 | 0;
   }
   label$10 : {
    if ($1 >>> 0 > 2047 >>> 0) {
     break label$10
    }
    $2 = 0;
    label$11 : {
     if ($0) {
      break label$11
     }
     return 0 & 0 | 0 | 0;
    }
    label$12 : {
     $3 = HEAP32[$0 >> 2] | 0;
     if ($3) {
      break label$12
     }
     return 0 & 0 | 0 | 0;
    }
    label$13 : {
     label$14 : {
      label$15 : {
       $5 = HEAP32[($0 + 8 | 0) >> 2] | 0;
       $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       if ($5 >>> 0 <= ($4 + 8 | 0) >>> 0) {
        break label$15
       }
       $5 = $3;
       break label$14;
      }
      label$16 : {
       $6 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $4 | 0;
       if ($6 >>> 0 > $5 >>> 0) {
        break label$16
       }
       $5 = $3;
       break label$14;
      }
      $4 = 0;
      label$17 : {
       label$18 : {
        $5 = ($6 - $5 | 0) & 1023 | 0;
        $6 = ($5 ? 1024 - $5 | 0 : 0) + $6 | 0;
        if (!$6) {
         break label$18
        }
        if (($6 & 1073741823 | 0 | 0) != ($6 | 0)) {
         break label$13
        }
        $5 = dlrealloc($3 | 0, $6 << 2 | 0 | 0) | 0;
        if ($5) {
         break label$17
        }
        dlfree($3 | 0);
        break label$13;
       }
       $4 = 0;
       $5 = dlrealloc($3 | 0, 0 | 0) | 0;
       if (!$5) {
        break label$13
       }
      }
      HEAP32[($0 + 8 | 0) >> 2] = $6;
      HEAP32[$0 >> 2] = $5;
     }
     $3 = $1 >>> 6 | 0 | 192 | 0;
     label$19 : {
      $4 = HEAP32[($0 + 16 | 0) >> 2] | 0;
      $6 = 32 - $4 | 0;
      if ($6 >>> 0 < 9 >>> 0) {
       break label$19
      }
      HEAP32[($0 + 16 | 0) >> 2] = $4 + 8 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $3 | 0;
      $4 = 1;
      break label$13;
     }
     label$20 : {
      if (!$4) {
       break label$20
      }
      $7 = $4 + -24 | 0;
      HEAP32[($0 + 16 | 0) >> 2] = $7;
      $4 = 1;
      $8 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $8 + 1 | 0;
      $235 = $5 + ($8 << 2 | 0) | 0;
      $5 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $6 | 0 | ($3 >>> $7 | 0) | 0;
      HEAP32[$235 >> 2] = $5 << 24 | 0 | (($5 << 8 | 0) & 16711680 | 0) | 0 | (($5 >>> 8 | 0) & 65280 | 0 | ($5 >>> 24 | 0) | 0) | 0;
      HEAP32[($0 + 4 | 0) >> 2] = $3;
      break label$13;
     }
     $4 = 1;
     $6 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     HEAP32[($0 + 12 | 0) >> 2] = $6 + 1 | 0;
     HEAP32[($5 + ($6 << 2 | 0) | 0) >> 2] = $3 << 24 | 0 | (($3 << 8 | 0) & 16711680 | 0) | 0 | (($3 >>> 8 | 0) & 65280 | 0 | ($3 >>> 24 | 0) | 0) | 0;
    }
    label$21 : {
     $3 = HEAP32[$0 >> 2] | 0;
     if (!$3) {
      break label$21
     }
     label$22 : {
      label$23 : {
       $5 = HEAP32[($0 + 8 | 0) >> 2] | 0;
       $2 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       if ($5 >>> 0 <= ($2 + 8 | 0) >>> 0) {
        break label$23
       }
       $5 = $3;
       break label$22;
      }
      label$24 : {
       $6 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $2 | 0;
       if ($6 >>> 0 > $5 >>> 0) {
        break label$24
       }
       $5 = $3;
       break label$22;
      }
      $2 = 0;
      label$25 : {
       label$26 : {
        $5 = ($6 - $5 | 0) & 1023 | 0;
        $6 = ($5 ? 1024 - $5 | 0 : 0) + $6 | 0;
        if (!$6) {
         break label$26
        }
        if (($6 & 1073741823 | 0 | 0) != ($6 | 0)) {
         break label$21
        }
        $5 = dlrealloc($3 | 0, $6 << 2 | 0 | 0) | 0;
        if ($5) {
         break label$25
        }
        dlfree($3 | 0);
        return 0 & $4 | 0 | 0;
       }
       $2 = 0;
       $5 = dlrealloc($3 | 0, 0 | 0) | 0;
       if (!$5) {
        break label$21
       }
      }
      HEAP32[($0 + 8 | 0) >> 2] = $6;
      HEAP32[$0 >> 2] = $5;
     }
     $3 = $1 & 63 | 0 | 128 | 0;
     label$27 : {
      $1 = HEAP32[($0 + 16 | 0) >> 2] | 0;
      $2 = 32 - $1 | 0;
      if ($2 >>> 0 < 9 >>> 0) {
       break label$27
      }
      HEAP32[($0 + 16 | 0) >> 2] = $1 + 8 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $3 | 0;
      return 1 & $4 | 0 | 0;
     }
     label$28 : {
      if (!$1) {
       break label$28
      }
      $1 = $1 + -24 | 0;
      HEAP32[($0 + 16 | 0) >> 2] = $1;
      $6 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $6 + 1 | 0;
      $1 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $2 | 0 | ($3 >>> $1 | 0) | 0;
      HEAP32[($5 + ($6 << 2 | 0) | 0) >> 2] = $1 << 24 | 0 | (($1 << 8 | 0) & 16711680 | 0) | 0 | (($1 >>> 8 | 0) & 65280 | 0 | ($1 >>> 24 | 0) | 0) | 0;
      HEAP32[($0 + 4 | 0) >> 2] = $3;
      return 1 & $4 | 0 | 0;
     }
     $2 = 1;
     $1 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     HEAP32[($0 + 12 | 0) >> 2] = $1 + 1 | 0;
     (wasm2js_i32$0 = $5 + ($1 << 2 | 0) | 0, wasm2js_i32$1 = (__wasm_rotl_i32($3 | 0, 24 | 0) | 0) & -16711936 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    }
    return $2 & $4 | 0 | 0;
   }
   label$29 : {
    if ($1 >>> 0 > 65535 >>> 0) {
     break label$29
    }
    $2 = 0;
    label$30 : {
     if ($0) {
      break label$30
     }
     return 0 & 0 | 0 | 0;
    }
    $3 = 0;
    label$31 : {
     $4 = HEAP32[$0 >> 2] | 0;
     if (!$4) {
      break label$31
     }
     label$32 : {
      label$33 : {
       label$34 : {
        $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
        $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
        if ($2 >>> 0 <= ($3 + 8 | 0) >>> 0) {
         break label$34
        }
        $6 = $4;
        break label$33;
       }
       label$35 : {
        $3 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $3 | 0;
        if ($3 >>> 0 > $2 >>> 0) {
         break label$35
        }
        $6 = $4;
        break label$33;
       }
       $5 = 0;
       label$36 : {
        label$37 : {
         $2 = ($3 - $2 | 0) & 1023 | 0;
         $2 = ($2 ? 1024 - $2 | 0 : 0) + $3 | 0;
         if (!$2) {
          break label$37
         }
         if (($2 & 1073741823 | 0 | 0) != ($2 | 0)) {
          break label$32
         }
         $6 = dlrealloc($4 | 0, $2 << 2 | 0 | 0) | 0;
         if ($6) {
          break label$36
         }
         dlfree($4 | 0);
         break label$32;
        }
        $5 = 0;
        $6 = dlrealloc($4 | 0, 0 | 0) | 0;
        if (!$6) {
         break label$32
        }
       }
       HEAP32[($0 + 8 | 0) >> 2] = $2;
       HEAP32[$0 >> 2] = $6;
      }
      $2 = $1 >>> 12 | 0 | 224 | 0;
      label$38 : {
       $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
       $4 = 32 - $3 | 0;
       if ($4 >>> 0 < 9 >>> 0) {
        break label$38
       }
       HEAP32[($0 + 16 | 0) >> 2] = $3 + 8 | 0;
       HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $2 | 0;
       $5 = 1;
       break label$32;
      }
      label$39 : {
       if (!$3) {
        break label$39
       }
       $3 = $3 + -24 | 0;
       HEAP32[($0 + 16 | 0) >> 2] = $3;
       $5 = 1;
       $7 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       HEAP32[($0 + 12 | 0) >> 2] = $7 + 1 | 0;
       $3 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $4 | 0 | ($2 >>> $3 | 0) | 0;
       HEAP32[($6 + ($7 << 2 | 0) | 0) >> 2] = $3 << 24 | 0 | (($3 << 8 | 0) & 16711680 | 0) | 0 | (($3 >>> 8 | 0) & 65280 | 0 | ($3 >>> 24 | 0) | 0) | 0;
       HEAP32[($0 + 4 | 0) >> 2] = $2;
       break label$32;
      }
      $5 = 1;
      $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $3 + 1 | 0;
      HEAP32[($6 + ($3 << 2 | 0) | 0) >> 2] = ($2 >>> 8 | 0) & 3840 | 0 | ($2 << 24 | 0 | (($2 << 8 | 0) & 16711680 | 0) | 0) | 0;
     }
     $3 = 0;
     $2 = 0;
     label$40 : {
      $4 = HEAP32[$0 >> 2] | 0;
      if (!$4) {
       break label$40
      }
      label$41 : {
       label$42 : {
        $6 = HEAP32[($0 + 8 | 0) >> 2] | 0;
        $2 = HEAP32[($0 + 12 | 0) >> 2] | 0;
        if ($6 >>> 0 <= ($2 + 8 | 0) >>> 0) {
         break label$42
        }
        $6 = $4;
        break label$41;
       }
       label$43 : {
        $7 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $2 | 0;
        if ($7 >>> 0 > $6 >>> 0) {
         break label$43
        }
        $6 = $4;
        break label$41;
       }
       $2 = 0;
       label$44 : {
        label$45 : {
         $6 = ($7 - $6 | 0) & 1023 | 0;
         $7 = ($6 ? 1024 - $6 | 0 : 0) + $7 | 0;
         if (!$7) {
          break label$45
         }
         if (($7 & 1073741823 | 0 | 0) != ($7 | 0)) {
          break label$40
         }
         $6 = dlrealloc($4 | 0, $7 << 2 | 0 | 0) | 0;
         if ($6) {
          break label$44
         }
         dlfree($4 | 0);
         break label$40;
        }
        $2 = 0;
        $6 = dlrealloc($4 | 0, 0 | 0) | 0;
        if (!$6) {
         break label$40
        }
       }
       HEAP32[($0 + 8 | 0) >> 2] = $7;
       HEAP32[$0 >> 2] = $6;
      }
      $4 = ($1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      label$46 : {
       $2 = HEAP32[($0 + 16 | 0) >> 2] | 0;
       $7 = 32 - $2 | 0;
       if ($7 >>> 0 < 9 >>> 0) {
        break label$46
       }
       HEAP32[($0 + 16 | 0) >> 2] = $2 + 8 | 0;
       HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $4 | 0;
       $2 = 1;
       break label$40;
      }
      label$47 : {
       if (!$2) {
        break label$47
       }
       $8 = $2 + -24 | 0;
       HEAP32[($0 + 16 | 0) >> 2] = $8;
       $2 = 1;
       $9 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       HEAP32[($0 + 12 | 0) >> 2] = $9 + 1 | 0;
       $629 = $6 + ($9 << 2 | 0) | 0;
       $6 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $7 | 0 | ($4 >>> $8 | 0) | 0;
       HEAP32[$629 >> 2] = $6 << 24 | 0 | (($6 << 8 | 0) & 16711680 | 0) | 0 | (($6 >>> 8 | 0) & 65280 | 0 | ($6 >>> 24 | 0) | 0) | 0;
       HEAP32[($0 + 4 | 0) >> 2] = $4;
       break label$40;
      }
      $2 = 1;
      $7 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $7 + 1 | 0;
      (wasm2js_i32$0 = $6 + ($7 << 2 | 0) | 0, wasm2js_i32$1 = (__wasm_rotl_i32($4 | 0, 24 | 0) | 0) & -16711936 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     }
     $2 = $2 & $5 | 0;
     $4 = HEAP32[$0 >> 2] | 0;
     if (!$4) {
      break label$31
     }
     label$48 : {
      label$49 : {
       $5 = HEAP32[($0 + 8 | 0) >> 2] | 0;
       $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       if ($5 >>> 0 <= ($3 + 8 | 0) >>> 0) {
        break label$49
       }
       $5 = $4;
       break label$48;
      }
      label$50 : {
       $6 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $3 | 0;
       if ($6 >>> 0 > $5 >>> 0) {
        break label$50
       }
       $5 = $4;
       break label$48;
      }
      $3 = 0;
      label$51 : {
       label$52 : {
        $5 = ($6 - $5 | 0) & 1023 | 0;
        $6 = ($5 ? 1024 - $5 | 0 : 0) + $6 | 0;
        if (!$6) {
         break label$52
        }
        if (($6 & 1073741823 | 0 | 0) != ($6 | 0)) {
         break label$31
        }
        $5 = dlrealloc($4 | 0, $6 << 2 | 0 | 0) | 0;
        if ($5) {
         break label$51
        }
        dlfree($4 | 0);
        return 0 & $2 | 0 | 0;
       }
       $3 = 0;
       $5 = dlrealloc($4 | 0, 0 | 0) | 0;
       if (!$5) {
        break label$31
       }
      }
      HEAP32[($0 + 8 | 0) >> 2] = $6;
      HEAP32[$0 >> 2] = $5;
     }
     $4 = $1 & 63 | 0 | 128 | 0;
     label$53 : {
      $1 = HEAP32[($0 + 16 | 0) >> 2] | 0;
      $3 = 32 - $1 | 0;
      if ($3 >>> 0 < 9 >>> 0) {
       break label$53
      }
      HEAP32[($0 + 16 | 0) >> 2] = $1 + 8 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $4 | 0;
      return 1 & $2 | 0 | 0;
     }
     label$54 : {
      if (!$1) {
       break label$54
      }
      $1 = $1 + -24 | 0;
      HEAP32[($0 + 16 | 0) >> 2] = $1;
      $6 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $6 + 1 | 0;
      $1 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $3 | 0 | ($4 >>> $1 | 0) | 0;
      HEAP32[($5 + ($6 << 2 | 0) | 0) >> 2] = $1 << 24 | 0 | (($1 << 8 | 0) & 16711680 | 0) | 0 | (($1 >>> 8 | 0) & 65280 | 0 | ($1 >>> 24 | 0) | 0) | 0;
      HEAP32[($0 + 4 | 0) >> 2] = $4;
      return 1 & $2 | 0 | 0;
     }
     $3 = 1;
     $1 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     HEAP32[($0 + 12 | 0) >> 2] = $1 + 1 | 0;
     (wasm2js_i32$0 = $5 + ($1 << 2 | 0) | 0, wasm2js_i32$1 = (__wasm_rotl_i32($4 | 0, 24 | 0) | 0) & -16711936 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    }
    return $3 & $2 | 0 | 0;
   }
   label$55 : {
    if ($1 >>> 0 > 2097151 >>> 0) {
     break label$55
    }
    $2 = 0;
    label$56 : {
     if ($0) {
      break label$56
     }
     return 0 & 0 | 0 | 0;
    }
    $3 = 0;
    label$57 : {
     $4 = HEAP32[$0 >> 2] | 0;
     if (!$4) {
      break label$57
     }
     label$58 : {
      label$59 : {
       label$60 : {
        $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
        $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
        if ($2 >>> 0 <= ($3 + 8 | 0) >>> 0) {
         break label$60
        }
        $6 = $4;
        break label$59;
       }
       label$61 : {
        $3 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $3 | 0;
        if ($3 >>> 0 > $2 >>> 0) {
         break label$61
        }
        $6 = $4;
        break label$59;
       }
       $5 = 0;
       label$62 : {
        label$63 : {
         $2 = ($3 - $2 | 0) & 1023 | 0;
         $2 = ($2 ? 1024 - $2 | 0 : 0) + $3 | 0;
         if (!$2) {
          break label$63
         }
         if (($2 & 1073741823 | 0 | 0) != ($2 | 0)) {
          break label$58
         }
         $6 = dlrealloc($4 | 0, $2 << 2 | 0 | 0) | 0;
         if ($6) {
          break label$62
         }
         dlfree($4 | 0);
         break label$58;
        }
        $5 = 0;
        $6 = dlrealloc($4 | 0, 0 | 0) | 0;
        if (!$6) {
         break label$58
        }
       }
       HEAP32[($0 + 8 | 0) >> 2] = $2;
       HEAP32[$0 >> 2] = $6;
      }
      $2 = $1 >>> 18 | 0 | 240 | 0;
      label$64 : {
       $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
       $4 = 32 - $3 | 0;
       if ($4 >>> 0 < 9 >>> 0) {
        break label$64
       }
       HEAP32[($0 + 16 | 0) >> 2] = $3 + 8 | 0;
       HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $2 | 0;
       $5 = 1;
       break label$58;
      }
      label$65 : {
       if (!$3) {
        break label$65
       }
       $3 = $3 + -24 | 0;
       HEAP32[($0 + 16 | 0) >> 2] = $3;
       $5 = 1;
       $7 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       HEAP32[($0 + 12 | 0) >> 2] = $7 + 1 | 0;
       $3 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $4 | 0 | ($2 >>> $3 | 0) | 0;
       HEAP32[($6 + ($7 << 2 | 0) | 0) >> 2] = $3 << 24 | 0 | (($3 << 8 | 0) & 16711680 | 0) | 0 | (($3 >>> 8 | 0) & 65280 | 0 | ($3 >>> 24 | 0) | 0) | 0;
       HEAP32[($0 + 4 | 0) >> 2] = $2;
       break label$58;
      }
      $5 = 1;
      $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $3 + 1 | 0;
      HEAP32[($6 + ($3 << 2 | 0) | 0) >> 2] = $2 << 24 | 0 | (($2 << 8 | 0) & 4128768 | 0) | 0;
     }
     $2 = 0;
     $3 = 0;
     label$66 : {
      $4 = HEAP32[$0 >> 2] | 0;
      if (!$4) {
       break label$66
      }
      label$67 : {
       label$68 : {
        $6 = HEAP32[($0 + 8 | 0) >> 2] | 0;
        $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
        if ($6 >>> 0 <= ($3 + 8 | 0) >>> 0) {
         break label$68
        }
        $6 = $4;
        break label$67;
       }
       label$69 : {
        $7 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $3 | 0;
        if ($7 >>> 0 > $6 >>> 0) {
         break label$69
        }
        $6 = $4;
        break label$67;
       }
       $3 = 0;
       label$70 : {
        label$71 : {
         $6 = ($7 - $6 | 0) & 1023 | 0;
         $7 = ($6 ? 1024 - $6 | 0 : 0) + $7 | 0;
         if (!$7) {
          break label$71
         }
         if (($7 & 1073741823 | 0 | 0) != ($7 | 0)) {
          break label$66
         }
         $6 = dlrealloc($4 | 0, $7 << 2 | 0 | 0) | 0;
         if ($6) {
          break label$70
         }
         dlfree($4 | 0);
         break label$66;
        }
        $3 = 0;
        $6 = dlrealloc($4 | 0, 0 | 0) | 0;
        if (!$6) {
         break label$66
        }
       }
       HEAP32[($0 + 8 | 0) >> 2] = $7;
       HEAP32[$0 >> 2] = $6;
      }
      $4 = ($1 >>> 12 | 0) & 63 | 0 | 128 | 0;
      label$72 : {
       $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
       $7 = 32 - $3 | 0;
       if ($7 >>> 0 < 9 >>> 0) {
        break label$72
       }
       HEAP32[($0 + 16 | 0) >> 2] = $3 + 8 | 0;
       HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $4 | 0;
       $3 = 1;
       break label$66;
      }
      label$73 : {
       if (!$3) {
        break label$73
       }
       $8 = $3 + -24 | 0;
       HEAP32[($0 + 16 | 0) >> 2] = $8;
       $3 = 1;
       $9 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       HEAP32[($0 + 12 | 0) >> 2] = $9 + 1 | 0;
       $1012 = $6 + ($9 << 2 | 0) | 0;
       $6 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $7 | 0 | ($4 >>> $8 | 0) | 0;
       HEAP32[$1012 >> 2] = $6 << 24 | 0 | (($6 << 8 | 0) & 16711680 | 0) | 0 | (($6 >>> 8 | 0) & 65280 | 0 | ($6 >>> 24 | 0) | 0) | 0;
       HEAP32[($0 + 4 | 0) >> 2] = $4;
       break label$66;
      }
      $3 = 1;
      $7 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $7 + 1 | 0;
      (wasm2js_i32$0 = $6 + ($7 << 2 | 0) | 0, wasm2js_i32$1 = (__wasm_rotl_i32($4 | 0, 24 | 0) | 0) & -16711936 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     }
     $3 = $3 & $5 | 0;
     label$74 : {
      $4 = HEAP32[$0 >> 2] | 0;
      if (!$4) {
       break label$74
      }
      label$75 : {
       label$76 : {
        $5 = HEAP32[($0 + 8 | 0) >> 2] | 0;
        $2 = HEAP32[($0 + 12 | 0) >> 2] | 0;
        if ($5 >>> 0 <= ($2 + 8 | 0) >>> 0) {
         break label$76
        }
        $5 = $4;
        break label$75;
       }
       label$77 : {
        $6 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $2 | 0;
        if ($6 >>> 0 > $5 >>> 0) {
         break label$77
        }
        $5 = $4;
        break label$75;
       }
       $2 = 0;
       label$78 : {
        label$79 : {
         $5 = ($6 - $5 | 0) & 1023 | 0;
         $6 = ($5 ? 1024 - $5 | 0 : 0) + $6 | 0;
         if (!$6) {
          break label$79
         }
         if (($6 & 1073741823 | 0 | 0) != ($6 | 0)) {
          break label$74
         }
         $5 = dlrealloc($4 | 0, $6 << 2 | 0 | 0) | 0;
         if ($5) {
          break label$78
         }
         dlfree($4 | 0);
         break label$74;
        }
        $2 = 0;
        $5 = dlrealloc($4 | 0, 0 | 0) | 0;
        if (!$5) {
         break label$74
        }
       }
       HEAP32[($0 + 8 | 0) >> 2] = $6;
       HEAP32[$0 >> 2] = $5;
      }
      $4 = ($1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      label$80 : {
       $2 = HEAP32[($0 + 16 | 0) >> 2] | 0;
       $6 = 32 - $2 | 0;
       if ($6 >>> 0 < 9 >>> 0) {
        break label$80
       }
       HEAP32[($0 + 16 | 0) >> 2] = $2 + 8 | 0;
       HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $4 | 0;
       $2 = 1;
       break label$74;
      }
      label$81 : {
       if (!$2) {
        break label$81
       }
       $7 = $2 + -24 | 0;
       HEAP32[($0 + 16 | 0) >> 2] = $7;
       $2 = 1;
       $8 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       HEAP32[($0 + 12 | 0) >> 2] = $8 + 1 | 0;
       $1137 = $5 + ($8 << 2 | 0) | 0;
       $5 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $6 | 0 | ($4 >>> $7 | 0) | 0;
       HEAP32[$1137 >> 2] = $5 << 24 | 0 | (($5 << 8 | 0) & 16711680 | 0) | 0 | (($5 >>> 8 | 0) & 65280 | 0 | ($5 >>> 24 | 0) | 0) | 0;
       HEAP32[($0 + 4 | 0) >> 2] = $4;
       break label$74;
      }
      $2 = 1;
      $6 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $6 + 1 | 0;
      (wasm2js_i32$0 = $5 + ($6 << 2 | 0) | 0, wasm2js_i32$1 = (__wasm_rotl_i32($4 | 0, 24 | 0) | 0) & -16711936 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     }
     $2 = $3 & $2 | 0;
     label$82 : {
      $4 = HEAP32[$0 >> 2] | 0;
      if ($4) {
       break label$82
      }
      return 0 & $2 | 0 | 0;
     }
     label$83 : {
      label$84 : {
       $5 = HEAP32[($0 + 8 | 0) >> 2] | 0;
       $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       if ($5 >>> 0 <= ($3 + 8 | 0) >>> 0) {
        break label$84
       }
       $5 = $4;
       break label$83;
      }
      label$85 : {
       $6 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $3 | 0;
       if ($6 >>> 0 > $5 >>> 0) {
        break label$85
       }
       $5 = $4;
       break label$83;
      }
      $3 = 0;
      label$86 : {
       label$87 : {
        $5 = ($6 - $5 | 0) & 1023 | 0;
        $6 = ($5 ? 1024 - $5 | 0 : 0) + $6 | 0;
        if (!$6) {
         break label$87
        }
        if (($6 & 1073741823 | 0 | 0) != ($6 | 0)) {
         break label$57
        }
        $5 = dlrealloc($4 | 0, $6 << 2 | 0 | 0) | 0;
        if ($5) {
         break label$86
        }
        dlfree($4 | 0);
        return 0 & $2 | 0 | 0;
       }
       $3 = 0;
       $5 = dlrealloc($4 | 0, 0 | 0) | 0;
       if (!$5) {
        break label$57
       }
      }
      HEAP32[($0 + 8 | 0) >> 2] = $6;
      HEAP32[$0 >> 2] = $5;
     }
     $1 = $1 & 63 | 0 | 128 | 0;
     label$88 : {
      $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
      $4 = 32 - $3 | 0;
      if ($4 >>> 0 < 9 >>> 0) {
       break label$88
      }
      HEAP32[($0 + 16 | 0) >> 2] = $3 + 8 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $1 | 0;
      return 1 & $2 | 0 | 0;
     }
     label$89 : {
      if (!$3) {
       break label$89
      }
      $3 = $3 + -24 | 0;
      HEAP32[($0 + 16 | 0) >> 2] = $3;
      $6 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $6 + 1 | 0;
      $3 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $4 | 0 | ($1 >>> $3 | 0) | 0;
      HEAP32[($5 + ($6 << 2 | 0) | 0) >> 2] = $3 << 24 | 0 | (($3 << 8 | 0) & 16711680 | 0) | 0 | (($3 >>> 8 | 0) & 65280 | 0 | ($3 >>> 24 | 0) | 0) | 0;
      HEAP32[($0 + 4 | 0) >> 2] = $1;
      return 1 & $2 | 0 | 0;
     }
     $3 = 1;
     $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     HEAP32[($0 + 12 | 0) >> 2] = $4 + 1 | 0;
     (wasm2js_i32$0 = $5 + ($4 << 2 | 0) | 0, wasm2js_i32$1 = (__wasm_rotl_i32($1 | 0, 24 | 0) | 0) & -16711936 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    }
    return $3 & $2 | 0 | 0;
   }
   label$90 : {
    if ($1 >>> 0 > 67108863 >>> 0) {
     break label$90
    }
    $2 = 0;
    label$91 : {
     if ($0) {
      break label$91
     }
     return 0 & 0 | 0 | 0;
    }
    $3 = 0;
    label$92 : {
     $4 = HEAP32[$0 >> 2] | 0;
     if (!$4) {
      break label$92
     }
     label$93 : {
      label$94 : {
       label$95 : {
        $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
        $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
        if ($2 >>> 0 <= ($3 + 8 | 0) >>> 0) {
         break label$95
        }
        $6 = $4;
        break label$94;
       }
       label$96 : {
        $3 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $3 | 0;
        if ($3 >>> 0 > $2 >>> 0) {
         break label$96
        }
        $6 = $4;
        break label$94;
       }
       $5 = 0;
       label$97 : {
        label$98 : {
         $2 = ($3 - $2 | 0) & 1023 | 0;
         $2 = ($2 ? 1024 - $2 | 0 : 0) + $3 | 0;
         if (!$2) {
          break label$98
         }
         if (($2 & 1073741823 | 0 | 0) != ($2 | 0)) {
          break label$93
         }
         $6 = dlrealloc($4 | 0, $2 << 2 | 0 | 0) | 0;
         if ($6) {
          break label$97
         }
         dlfree($4 | 0);
         break label$93;
        }
        $5 = 0;
        $6 = dlrealloc($4 | 0, 0 | 0) | 0;
        if (!$6) {
         break label$93
        }
       }
       HEAP32[($0 + 8 | 0) >> 2] = $2;
       HEAP32[$0 >> 2] = $6;
      }
      $2 = $1 >>> 24 | 0 | 248 | 0;
      label$99 : {
       $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
       $4 = 32 - $3 | 0;
       if ($4 >>> 0 < 9 >>> 0) {
        break label$99
       }
       HEAP32[($0 + 16 | 0) >> 2] = $3 + 8 | 0;
       HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $2 | 0;
       $5 = 1;
       break label$93;
      }
      label$100 : {
       if (!$3) {
        break label$100
       }
       $3 = $3 + -24 | 0;
       HEAP32[($0 + 16 | 0) >> 2] = $3;
       $5 = 1;
       $7 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       HEAP32[($0 + 12 | 0) >> 2] = $7 + 1 | 0;
       $3 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $4 | 0 | ($2 >>> $3 | 0) | 0;
       HEAP32[($6 + ($7 << 2 | 0) | 0) >> 2] = $3 << 24 | 0 | (($3 << 8 | 0) & 16711680 | 0) | 0 | (($3 >>> 8 | 0) & 65280 | 0 | ($3 >>> 24 | 0) | 0) | 0;
       HEAP32[($0 + 4 | 0) >> 2] = $2;
       break label$93;
      }
      $5 = 1;
      $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $3 + 1 | 0;
      (wasm2js_i32$0 = $6 + ($3 << 2 | 0) | 0, wasm2js_i32$1 = (__wasm_rotl_i32($2 | 0, 24 | 0) | 0) & -16711936 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     }
     $2 = 0;
     $3 = 0;
     label$101 : {
      $4 = HEAP32[$0 >> 2] | 0;
      if (!$4) {
       break label$101
      }
      label$102 : {
       label$103 : {
        $6 = HEAP32[($0 + 8 | 0) >> 2] | 0;
        $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
        if ($6 >>> 0 <= ($3 + 8 | 0) >>> 0) {
         break label$103
        }
        $6 = $4;
        break label$102;
       }
       label$104 : {
        $7 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $3 | 0;
        if ($7 >>> 0 > $6 >>> 0) {
         break label$104
        }
        $6 = $4;
        break label$102;
       }
       $3 = 0;
       label$105 : {
        label$106 : {
         $6 = ($7 - $6 | 0) & 1023 | 0;
         $7 = ($6 ? 1024 - $6 | 0 : 0) + $7 | 0;
         if (!$7) {
          break label$106
         }
         if (($7 & 1073741823 | 0 | 0) != ($7 | 0)) {
          break label$101
         }
         $6 = dlrealloc($4 | 0, $7 << 2 | 0 | 0) | 0;
         if ($6) {
          break label$105
         }
         dlfree($4 | 0);
         break label$101;
        }
        $3 = 0;
        $6 = dlrealloc($4 | 0, 0 | 0) | 0;
        if (!$6) {
         break label$101
        }
       }
       HEAP32[($0 + 8 | 0) >> 2] = $7;
       HEAP32[$0 >> 2] = $6;
      }
      $4 = ($1 >>> 18 | 0) & 63 | 0 | 128 | 0;
      label$107 : {
       $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
       $7 = 32 - $3 | 0;
       if ($7 >>> 0 < 9 >>> 0) {
        break label$107
       }
       HEAP32[($0 + 16 | 0) >> 2] = $3 + 8 | 0;
       HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $4 | 0;
       $3 = 1;
       break label$101;
      }
      label$108 : {
       if (!$3) {
        break label$108
       }
       $8 = $3 + -24 | 0;
       HEAP32[($0 + 16 | 0) >> 2] = $8;
       $3 = 1;
       $9 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       HEAP32[($0 + 12 | 0) >> 2] = $9 + 1 | 0;
       $1518 = $6 + ($9 << 2 | 0) | 0;
       $6 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $7 | 0 | ($4 >>> $8 | 0) | 0;
       HEAP32[$1518 >> 2] = $6 << 24 | 0 | (($6 << 8 | 0) & 16711680 | 0) | 0 | (($6 >>> 8 | 0) & 65280 | 0 | ($6 >>> 24 | 0) | 0) | 0;
       HEAP32[($0 + 4 | 0) >> 2] = $4;
       break label$101;
      }
      $3 = 1;
      $7 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $7 + 1 | 0;
      (wasm2js_i32$0 = $6 + ($7 << 2 | 0) | 0, wasm2js_i32$1 = (__wasm_rotl_i32($4 | 0, 24 | 0) | 0) & -16711936 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     }
     $3 = $3 & $5 | 0;
     label$109 : {
      $4 = HEAP32[$0 >> 2] | 0;
      if (!$4) {
       break label$109
      }
      label$110 : {
       label$111 : {
        $5 = HEAP32[($0 + 8 | 0) >> 2] | 0;
        $2 = HEAP32[($0 + 12 | 0) >> 2] | 0;
        if ($5 >>> 0 <= ($2 + 8 | 0) >>> 0) {
         break label$111
        }
        $5 = $4;
        break label$110;
       }
       label$112 : {
        $6 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $2 | 0;
        if ($6 >>> 0 > $5 >>> 0) {
         break label$112
        }
        $5 = $4;
        break label$110;
       }
       $2 = 0;
       label$113 : {
        label$114 : {
         $5 = ($6 - $5 | 0) & 1023 | 0;
         $6 = ($5 ? 1024 - $5 | 0 : 0) + $6 | 0;
         if (!$6) {
          break label$114
         }
         if (($6 & 1073741823 | 0 | 0) != ($6 | 0)) {
          break label$109
         }
         $5 = dlrealloc($4 | 0, $6 << 2 | 0 | 0) | 0;
         if ($5) {
          break label$113
         }
         dlfree($4 | 0);
         break label$109;
        }
        $2 = 0;
        $5 = dlrealloc($4 | 0, 0 | 0) | 0;
        if (!$5) {
         break label$109
        }
       }
       HEAP32[($0 + 8 | 0) >> 2] = $6;
       HEAP32[$0 >> 2] = $5;
      }
      $4 = ($1 >>> 12 | 0) & 63 | 0 | 128 | 0;
      label$115 : {
       $2 = HEAP32[($0 + 16 | 0) >> 2] | 0;
       $6 = 32 - $2 | 0;
       if ($6 >>> 0 < 9 >>> 0) {
        break label$115
       }
       HEAP32[($0 + 16 | 0) >> 2] = $2 + 8 | 0;
       HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $4 | 0;
       $2 = 1;
       break label$109;
      }
      label$116 : {
       if (!$2) {
        break label$116
       }
       $7 = $2 + -24 | 0;
       HEAP32[($0 + 16 | 0) >> 2] = $7;
       $2 = 1;
       $8 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       HEAP32[($0 + 12 | 0) >> 2] = $8 + 1 | 0;
       $1643 = $5 + ($8 << 2 | 0) | 0;
       $5 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $6 | 0 | ($4 >>> $7 | 0) | 0;
       HEAP32[$1643 >> 2] = $5 << 24 | 0 | (($5 << 8 | 0) & 16711680 | 0) | 0 | (($5 >>> 8 | 0) & 65280 | 0 | ($5 >>> 24 | 0) | 0) | 0;
       HEAP32[($0 + 4 | 0) >> 2] = $4;
       break label$109;
      }
      $2 = 1;
      $6 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $6 + 1 | 0;
      (wasm2js_i32$0 = $5 + ($6 << 2 | 0) | 0, wasm2js_i32$1 = (__wasm_rotl_i32($4 | 0, 24 | 0) | 0) & -16711936 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     }
     $4 = $3 & $2 | 0;
     $3 = 0;
     $2 = 0;
     label$117 : {
      $5 = HEAP32[$0 >> 2] | 0;
      if (!$5) {
       break label$117
      }
      label$118 : {
       label$119 : {
        $6 = HEAP32[($0 + 8 | 0) >> 2] | 0;
        $2 = HEAP32[($0 + 12 | 0) >> 2] | 0;
        if ($6 >>> 0 <= ($2 + 8 | 0) >>> 0) {
         break label$119
        }
        $6 = $5;
        break label$118;
       }
       label$120 : {
        $7 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $2 | 0;
        if ($7 >>> 0 > $6 >>> 0) {
         break label$120
        }
        $6 = $5;
        break label$118;
       }
       $2 = 0;
       label$121 : {
        label$122 : {
         $6 = ($7 - $6 | 0) & 1023 | 0;
         $7 = ($6 ? 1024 - $6 | 0 : 0) + $7 | 0;
         if (!$7) {
          break label$122
         }
         if (($7 & 1073741823 | 0 | 0) != ($7 | 0)) {
          break label$117
         }
         $6 = dlrealloc($5 | 0, $7 << 2 | 0 | 0) | 0;
         if ($6) {
          break label$121
         }
         dlfree($5 | 0);
         break label$117;
        }
        $2 = 0;
        $6 = dlrealloc($5 | 0, 0 | 0) | 0;
        if (!$6) {
         break label$117
        }
       }
       HEAP32[($0 + 8 | 0) >> 2] = $7;
       HEAP32[$0 >> 2] = $6;
      }
      $5 = ($1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      label$123 : {
       $2 = HEAP32[($0 + 16 | 0) >> 2] | 0;
       $7 = 32 - $2 | 0;
       if ($7 >>> 0 < 9 >>> 0) {
        break label$123
       }
       HEAP32[($0 + 16 | 0) >> 2] = $2 + 8 | 0;
       HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $5 | 0;
       $2 = 1;
       break label$117;
      }
      label$124 : {
       if (!$2) {
        break label$124
       }
       $8 = $2 + -24 | 0;
       HEAP32[($0 + 16 | 0) >> 2] = $8;
       $2 = 1;
       $9 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       HEAP32[($0 + 12 | 0) >> 2] = $9 + 1 | 0;
       $1768 = $6 + ($9 << 2 | 0) | 0;
       $6 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $7 | 0 | ($5 >>> $8 | 0) | 0;
       HEAP32[$1768 >> 2] = $6 << 24 | 0 | (($6 << 8 | 0) & 16711680 | 0) | 0 | (($6 >>> 8 | 0) & 65280 | 0 | ($6 >>> 24 | 0) | 0) | 0;
       HEAP32[($0 + 4 | 0) >> 2] = $5;
       break label$117;
      }
      $2 = 1;
      $7 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $7 + 1 | 0;
      (wasm2js_i32$0 = $6 + ($7 << 2 | 0) | 0, wasm2js_i32$1 = (__wasm_rotl_i32($5 | 0, 24 | 0) | 0) & -16711936 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     }
     $2 = $4 & $2 | 0;
     $4 = HEAP32[$0 >> 2] | 0;
     if (!$4) {
      break label$92
     }
     label$125 : {
      label$126 : {
       $5 = HEAP32[($0 + 8 | 0) >> 2] | 0;
       $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       if ($5 >>> 0 <= ($3 + 8 | 0) >>> 0) {
        break label$126
       }
       $5 = $4;
       break label$125;
      }
      label$127 : {
       $6 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $3 | 0;
       if ($6 >>> 0 > $5 >>> 0) {
        break label$127
       }
       $5 = $4;
       break label$125;
      }
      $3 = 0;
      label$128 : {
       label$129 : {
        $5 = ($6 - $5 | 0) & 1023 | 0;
        $6 = ($5 ? 1024 - $5 | 0 : 0) + $6 | 0;
        if (!$6) {
         break label$129
        }
        if (($6 & 1073741823 | 0 | 0) != ($6 | 0)) {
         break label$92
        }
        $5 = dlrealloc($4 | 0, $6 << 2 | 0 | 0) | 0;
        if ($5) {
         break label$128
        }
        dlfree($4 | 0);
        return 0 & $2 | 0 | 0;
       }
       $3 = 0;
       $5 = dlrealloc($4 | 0, 0 | 0) | 0;
       if (!$5) {
        break label$92
       }
      }
      HEAP32[($0 + 8 | 0) >> 2] = $6;
      HEAP32[$0 >> 2] = $5;
     }
     $1 = $1 & 63 | 0 | 128 | 0;
     label$130 : {
      $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
      $4 = 32 - $3 | 0;
      if ($4 >>> 0 < 9 >>> 0) {
       break label$130
      }
      HEAP32[($0 + 16 | 0) >> 2] = $3 + 8 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $1 | 0;
      return 1 & $2 | 0 | 0;
     }
     label$131 : {
      if (!$3) {
       break label$131
      }
      $3 = $3 + -24 | 0;
      HEAP32[($0 + 16 | 0) >> 2] = $3;
      $6 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $6 + 1 | 0;
      $3 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $4 | 0 | ($1 >>> $3 | 0) | 0;
      HEAP32[($5 + ($6 << 2 | 0) | 0) >> 2] = $3 << 24 | 0 | (($3 << 8 | 0) & 16711680 | 0) | 0 | (($3 >>> 8 | 0) & 65280 | 0 | ($3 >>> 24 | 0) | 0) | 0;
      HEAP32[($0 + 4 | 0) >> 2] = $1;
      return 1 & $2 | 0 | 0;
     }
     $3 = 1;
     $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     HEAP32[($0 + 12 | 0) >> 2] = $4 + 1 | 0;
     (wasm2js_i32$0 = $5 + ($4 << 2 | 0) | 0, wasm2js_i32$1 = (__wasm_rotl_i32($1 | 0, 24 | 0) | 0) & -16711936 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    }
    return $3 & $2 | 0 | 0;
   }
   $3 = 0;
   label$132 : {
    label$133 : {
     if ($0) {
      break label$133
     }
     $2 = 0;
     break label$132;
    }
    $2 = 0;
    $4 = HEAP32[$0 >> 2] | 0;
    if (!$4) {
     break label$132
    }
    label$134 : {
     label$135 : {
      label$136 : {
       $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
       $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       if ($2 >>> 0 <= ($3 + 8 | 0) >>> 0) {
        break label$136
       }
       $5 = $4;
       break label$135;
      }
      label$137 : {
       $3 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $3 | 0;
       if ($3 >>> 0 > $2 >>> 0) {
        break label$137
       }
       $5 = $4;
       break label$135;
      }
      $6 = 0;
      label$138 : {
       label$139 : {
        $2 = ($3 - $2 | 0) & 1023 | 0;
        $2 = ($2 ? 1024 - $2 | 0 : 0) + $3 | 0;
        if (!$2) {
         break label$139
        }
        if (($2 & 1073741823 | 0 | 0) != ($2 | 0)) {
         break label$134
        }
        $5 = dlrealloc($4 | 0, $2 << 2 | 0 | 0) | 0;
        if ($5) {
         break label$138
        }
        dlfree($4 | 0);
        break label$134;
       }
       $6 = 0;
       $5 = dlrealloc($4 | 0, 0 | 0) | 0;
       if (!$5) {
        break label$134
       }
      }
      HEAP32[($0 + 8 | 0) >> 2] = $2;
      HEAP32[$0 >> 2] = $5;
     }
     $2 = $1 >>> 30 | 0 | 252 | 0;
     label$140 : {
      $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
      $4 = 32 - $3 | 0;
      if ($4 >>> 0 < 9 >>> 0) {
       break label$140
      }
      HEAP32[($0 + 16 | 0) >> 2] = $3 + 8 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $2 | 0;
      $6 = 1;
      break label$134;
     }
     label$141 : {
      if (!$3) {
       break label$141
      }
      $3 = $3 + -24 | 0;
      HEAP32[($0 + 16 | 0) >> 2] = $3;
      $6 = 1;
      $7 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $7 + 1 | 0;
      $3 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $4 | 0 | ($2 >>> $3 | 0) | 0;
      HEAP32[($5 + ($7 << 2 | 0) | 0) >> 2] = $3 << 24 | 0 | (($3 << 8 | 0) & 16711680 | 0) | 0 | (($3 >>> 8 | 0) & 65280 | 0 | ($3 >>> 24 | 0) | 0) | 0;
      HEAP32[($0 + 4 | 0) >> 2] = $2;
      break label$134;
     }
     $6 = 1;
     $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     HEAP32[($0 + 12 | 0) >> 2] = $3 + 1 | 0;
     (wasm2js_i32$0 = $5 + ($3 << 2 | 0) | 0, wasm2js_i32$1 = (__wasm_rotl_i32($2 | 0, 24 | 0) | 0) & -16711936 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    }
    $3 = 0;
    $4 = 0;
    label$142 : {
     $2 = HEAP32[$0 >> 2] | 0;
     if (!$2) {
      break label$142
     }
     label$143 : {
      label$144 : {
       $5 = HEAP32[($0 + 8 | 0) >> 2] | 0;
       $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       if ($5 >>> 0 <= ($4 + 8 | 0) >>> 0) {
        break label$144
       }
       $5 = $2;
       break label$143;
      }
      label$145 : {
       $7 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $4 | 0;
       if ($7 >>> 0 > $5 >>> 0) {
        break label$145
       }
       $5 = $2;
       break label$143;
      }
      $4 = 0;
      label$146 : {
       label$147 : {
        $5 = ($7 - $5 | 0) & 1023 | 0;
        $7 = ($5 ? 1024 - $5 | 0 : 0) + $7 | 0;
        if (!$7) {
         break label$147
        }
        if (($7 & 1073741823 | 0 | 0) != ($7 | 0)) {
         break label$142
        }
        $5 = dlrealloc($2 | 0, $7 << 2 | 0 | 0) | 0;
        if ($5) {
         break label$146
        }
        dlfree($2 | 0);
        break label$142;
       }
       $4 = 0;
       $5 = dlrealloc($2 | 0, 0 | 0) | 0;
       if (!$5) {
        break label$142
       }
      }
      HEAP32[($0 + 8 | 0) >> 2] = $7;
      HEAP32[$0 >> 2] = $5;
     }
     $2 = ($1 >>> 24 | 0) & 63 | 0 | 128 | 0;
     label$148 : {
      $4 = HEAP32[($0 + 16 | 0) >> 2] | 0;
      $7 = 32 - $4 | 0;
      if ($7 >>> 0 < 9 >>> 0) {
       break label$148
      }
      HEAP32[($0 + 16 | 0) >> 2] = $4 + 8 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $2 | 0;
      $4 = 1;
      break label$142;
     }
     label$149 : {
      if (!$4) {
       break label$149
      }
      $8 = $4 + -24 | 0;
      HEAP32[($0 + 16 | 0) >> 2] = $8;
      $4 = 1;
      $9 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $9 + 1 | 0;
      $2145 = $5 + ($9 << 2 | 0) | 0;
      $5 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $7 | 0 | ($2 >>> $8 | 0) | 0;
      HEAP32[$2145 >> 2] = $5 << 24 | 0 | (($5 << 8 | 0) & 16711680 | 0) | 0 | (($5 >>> 8 | 0) & 65280 | 0 | ($5 >>> 24 | 0) | 0) | 0;
      HEAP32[($0 + 4 | 0) >> 2] = $2;
      break label$142;
     }
     $4 = 1;
     $7 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     HEAP32[($0 + 12 | 0) >> 2] = $7 + 1 | 0;
     (wasm2js_i32$0 = $5 + ($7 << 2 | 0) | 0, wasm2js_i32$1 = (__wasm_rotl_i32($2 | 0, 24 | 0) | 0) & -16711936 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    }
    label$150 : {
     $2 = HEAP32[$0 >> 2] | 0;
     if (!$2) {
      break label$150
     }
     label$151 : {
      label$152 : {
       $5 = HEAP32[($0 + 8 | 0) >> 2] | 0;
       $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       if ($5 >>> 0 <= ($3 + 8 | 0) >>> 0) {
        break label$152
       }
       $5 = $2;
       break label$151;
      }
      label$153 : {
       $7 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $3 | 0;
       if ($7 >>> 0 > $5 >>> 0) {
        break label$153
       }
       $5 = $2;
       break label$151;
      }
      $3 = 0;
      label$154 : {
       label$155 : {
        $5 = ($7 - $5 | 0) & 1023 | 0;
        $7 = ($5 ? 1024 - $5 | 0 : 0) + $7 | 0;
        if (!$7) {
         break label$155
        }
        if (($7 & 1073741823 | 0 | 0) != ($7 | 0)) {
         break label$150
        }
        $5 = dlrealloc($2 | 0, $7 << 2 | 0 | 0) | 0;
        if ($5) {
         break label$154
        }
        dlfree($2 | 0);
        break label$150;
       }
       $3 = 0;
       $5 = dlrealloc($2 | 0, 0 | 0) | 0;
       if (!$5) {
        break label$150
       }
      }
      HEAP32[($0 + 8 | 0) >> 2] = $7;
      HEAP32[$0 >> 2] = $5;
     }
     $2 = ($1 >>> 18 | 0) & 63 | 0 | 128 | 0;
     label$156 : {
      $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
      $7 = 32 - $3 | 0;
      if ($7 >>> 0 < 9 >>> 0) {
       break label$156
      }
      HEAP32[($0 + 16 | 0) >> 2] = $3 + 8 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $2 | 0;
      $3 = 1;
      break label$150;
     }
     label$157 : {
      if (!$3) {
       break label$157
      }
      $8 = $3 + -24 | 0;
      HEAP32[($0 + 16 | 0) >> 2] = $8;
      $3 = 1;
      $9 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $9 + 1 | 0;
      $2267 = $5 + ($9 << 2 | 0) | 0;
      $5 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $7 | 0 | ($2 >>> $8 | 0) | 0;
      HEAP32[$2267 >> 2] = $5 << 24 | 0 | (($5 << 8 | 0) & 16711680 | 0) | 0 | (($5 >>> 8 | 0) & 65280 | 0 | ($5 >>> 24 | 0) | 0) | 0;
      HEAP32[($0 + 4 | 0) >> 2] = $2;
      break label$150;
     }
     $3 = 1;
     $7 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     HEAP32[($0 + 12 | 0) >> 2] = $7 + 1 | 0;
     (wasm2js_i32$0 = $5 + ($7 << 2 | 0) | 0, wasm2js_i32$1 = (__wasm_rotl_i32($2 | 0, 24 | 0) | 0) & -16711936 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    }
    $2 = 0;
    $5 = 0;
    label$158 : {
     $7 = HEAP32[$0 >> 2] | 0;
     if (!$7) {
      break label$158
     }
     label$159 : {
      label$160 : {
       $8 = HEAP32[($0 + 8 | 0) >> 2] | 0;
       $5 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       if ($8 >>> 0 <= ($5 + 8 | 0) >>> 0) {
        break label$160
       }
       $8 = $7;
       break label$159;
      }
      label$161 : {
       $9 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $5 | 0;
       if ($9 >>> 0 > $8 >>> 0) {
        break label$161
       }
       $8 = $7;
       break label$159;
      }
      $5 = 0;
      label$162 : {
       label$163 : {
        $8 = ($9 - $8 | 0) & 1023 | 0;
        $9 = ($8 ? 1024 - $8 | 0 : 0) + $9 | 0;
        if (!$9) {
         break label$163
        }
        if (($9 & 1073741823 | 0 | 0) != ($9 | 0)) {
         break label$158
        }
        $8 = dlrealloc($7 | 0, $9 << 2 | 0 | 0) | 0;
        if ($8) {
         break label$162
        }
        dlfree($7 | 0);
        break label$158;
       }
       $5 = 0;
       $8 = dlrealloc($7 | 0, 0 | 0) | 0;
       if (!$8) {
        break label$158
       }
      }
      HEAP32[($0 + 8 | 0) >> 2] = $9;
      HEAP32[$0 >> 2] = $8;
     }
     $7 = ($1 >>> 12 | 0) & 63 | 0 | 128 | 0;
     label$164 : {
      $5 = HEAP32[($0 + 16 | 0) >> 2] | 0;
      $9 = 32 - $5 | 0;
      if ($9 >>> 0 < 9 >>> 0) {
       break label$164
      }
      HEAP32[($0 + 16 | 0) >> 2] = $5 + 8 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $7 | 0;
      $5 = 1;
      break label$158;
     }
     label$165 : {
      if (!$5) {
       break label$165
      }
      $10 = $5 + -24 | 0;
      HEAP32[($0 + 16 | 0) >> 2] = $10;
      $5 = 1;
      $11 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $11 + 1 | 0;
      $2389 = $8 + ($11 << 2 | 0) | 0;
      $8 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $9 | 0 | ($7 >>> $10 | 0) | 0;
      HEAP32[$2389 >> 2] = $8 << 24 | 0 | (($8 << 8 | 0) & 16711680 | 0) | 0 | (($8 >>> 8 | 0) & 65280 | 0 | ($8 >>> 24 | 0) | 0) | 0;
      HEAP32[($0 + 4 | 0) >> 2] = $7;
      break label$158;
     }
     $5 = 1;
     $9 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     HEAP32[($0 + 12 | 0) >> 2] = $9 + 1 | 0;
     (wasm2js_i32$0 = $8 + ($9 << 2 | 0) | 0, wasm2js_i32$1 = (__wasm_rotl_i32($7 | 0, 24 | 0) | 0) & -16711936 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    }
    label$166 : {
     $7 = HEAP32[$0 >> 2] | 0;
     if ($7) {
      break label$166
     }
     $3 = 0;
     break label$132;
    }
    $4 = (($4 & $6 | 0) & $3 | 0) & $5 | 0;
    label$167 : {
     label$168 : {
      label$169 : {
       $5 = HEAP32[($0 + 8 | 0) >> 2] | 0;
       $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       if ($5 >>> 0 <= ($3 + 8 | 0) >>> 0) {
        break label$169
       }
       $6 = $7;
       break label$168;
      }
      label$170 : {
       $6 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $3 | 0;
       if ($6 >>> 0 > $5 >>> 0) {
        break label$170
       }
       $6 = $7;
       break label$168;
      }
      $3 = 0;
      label$171 : {
       label$172 : {
        $5 = ($6 - $5 | 0) & 1023 | 0;
        $5 = ($5 ? 1024 - $5 | 0 : 0) + $6 | 0;
        if (!$5) {
         break label$172
        }
        if (($5 & 1073741823 | 0 | 0) != ($5 | 0)) {
         break label$167
        }
        $6 = dlrealloc($7 | 0, $5 << 2 | 0 | 0) | 0;
        if ($6) {
         break label$171
        }
        dlfree($7 | 0);
        break label$167;
       }
       $3 = 0;
       $6 = dlrealloc($7 | 0, 0 | 0) | 0;
       if (!$6) {
        break label$167
       }
      }
      HEAP32[($0 + 8 | 0) >> 2] = $5;
      HEAP32[$0 >> 2] = $6;
     }
     $5 = ($1 >>> 6 | 0) & 63 | 0 | 128 | 0;
     label$173 : {
      $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
      $7 = 32 - $3 | 0;
      if ($7 >>> 0 < 9 >>> 0) {
       break label$173
      }
      HEAP32[($0 + 16 | 0) >> 2] = $3 + 8 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $5 | 0;
      $3 = 1;
      break label$167;
     }
     label$174 : {
      if (!$3) {
       break label$174
      }
      $8 = $3 + -24 | 0;
      HEAP32[($0 + 16 | 0) >> 2] = $8;
      $3 = 1;
      $9 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $9 + 1 | 0;
      $2517 = $6 + ($9 << 2 | 0) | 0;
      $6 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $7 | 0 | ($5 >>> $8 | 0) | 0;
      HEAP32[$2517 >> 2] = $6 << 24 | 0 | (($6 << 8 | 0) & 16711680 | 0) | 0 | (($6 >>> 8 | 0) & 65280 | 0 | ($6 >>> 24 | 0) | 0) | 0;
      HEAP32[($0 + 4 | 0) >> 2] = $5;
      break label$167;
     }
     $3 = 1;
     $7 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     HEAP32[($0 + 12 | 0) >> 2] = $7 + 1 | 0;
     (wasm2js_i32$0 = $6 + ($7 << 2 | 0) | 0, wasm2js_i32$1 = (__wasm_rotl_i32($5 | 0, 24 | 0) | 0) & -16711936 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    }
    $3 = $4 & $3 | 0;
    $4 = HEAP32[$0 >> 2] | 0;
    if (!$4) {
     break label$132
    }
    label$175 : {
     label$176 : {
      $5 = HEAP32[($0 + 8 | 0) >> 2] | 0;
      $2 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      if ($5 >>> 0 <= ($2 + 8 | 0) >>> 0) {
       break label$176
      }
      $5 = $4;
      break label$175;
     }
     label$177 : {
      $6 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $2 | 0;
      if ($6 >>> 0 > $5 >>> 0) {
       break label$177
      }
      $5 = $4;
      break label$175;
     }
     $2 = 0;
     label$178 : {
      label$179 : {
       $5 = ($6 - $5 | 0) & 1023 | 0;
       $6 = ($5 ? 1024 - $5 | 0 : 0) + $6 | 0;
       if (!$6) {
        break label$179
       }
       if (($6 & 1073741823 | 0 | 0) != ($6 | 0)) {
        break label$132
       }
       $5 = dlrealloc($4 | 0, $6 << 2 | 0 | 0) | 0;
       if ($5) {
        break label$178
       }
       dlfree($4 | 0);
       break label$132;
      }
      $2 = 0;
      $5 = dlrealloc($4 | 0, 0 | 0) | 0;
      if (!$5) {
       break label$132
      }
     }
     HEAP32[($0 + 8 | 0) >> 2] = $6;
     HEAP32[$0 >> 2] = $5;
    }
    $4 = $1 & 63 | 0 | 128 | 0;
    label$180 : {
     $1 = HEAP32[($0 + 16 | 0) >> 2] | 0;
     $6 = 32 - $1 | 0;
     if ($6 >>> 0 < 9 >>> 0) {
      break label$180
     }
     HEAP32[($0 + 16 | 0) >> 2] = $1 + 8 | 0;
     HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $4 | 0;
     $2 = 1;
     break label$132;
    }
    label$181 : {
     if (!$1) {
      break label$181
     }
     $1 = $1 + -24 | 0;
     HEAP32[($0 + 16 | 0) >> 2] = $1;
     $2 = 1;
     $7 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     HEAP32[($0 + 12 | 0) >> 2] = $7 + 1 | 0;
     $1 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $6 | 0 | ($4 >>> $1 | 0) | 0;
     HEAP32[($5 + ($7 << 2 | 0) | 0) >> 2] = $1 << 24 | 0 | (($1 << 8 | 0) & 16711680 | 0) | 0 | (($1 >>> 8 | 0) & 65280 | 0 | ($1 >>> 24 | 0) | 0) | 0;
     HEAP32[($0 + 4 | 0) >> 2] = $4;
     break label$132;
    }
    $2 = 1;
    $1 = HEAP32[($0 + 12 | 0) >> 2] | 0;
    HEAP32[($0 + 12 | 0) >> 2] = $1 + 1 | 0;
    (wasm2js_i32$0 = $5 + ($1 << 2 | 0) | 0, wasm2js_i32$1 = (__wasm_rotl_i32($4 | 0, 24 | 0) | 0) & -16711936 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   }
   $2 = $2 & $3 | 0;
  }
  return $2 | 0;
 }
 
 function FLAC__bitwriter_write_utf8_uint64($0, $1, $1$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  var $6 = 0, $3 = 0, $7 = 0, $2 = 0, $4 = 0, $5 = 0, $8 = 0, i64toi32_i32$3 = 0, $9 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $10 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $237 = 0, $638 = 0, $1029 = 0, $1156 = 0, $1415 = 0, $1799 = 0, $2058 = 0, $2316 = 0, $2566 = 0, $2818 = 0, $2934 = 0, $3070 = 0, $3320 = 0, $3445 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2 = 0;
  label$1 : {
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $1;
   i64toi32_i32$1 = 15;
   i64toi32_i32$3 = -1;
   if ($1$hi >>> 0 > i64toi32_i32$1 >>> 0 | (($1$hi | 0) == (i64toi32_i32$1 | 0) & $1 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 127;
    if ($1$hi >>> 0 > i64toi32_i32$0 >>> 0 | (($1$hi | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
     break label$2
    }
    if (!$0) {
     break label$1
    }
    $3 = HEAP32[$0 >> 2] | 0;
    if (!$3) {
     break label$1
    }
    label$3 : {
     label$4 : {
      $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
      $2 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      if ($4 >>> 0 <= ($2 + 8 | 0) >>> 0) {
       break label$4
      }
      $4 = $3;
      break label$3;
     }
     label$5 : {
      $5 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $2 | 0;
      if ($5 >>> 0 > $4 >>> 0) {
       break label$5
      }
      $4 = $3;
      break label$3;
     }
     $2 = 0;
     label$6 : {
      label$7 : {
       $4 = ($5 - $4 | 0) & 1023 | 0;
       $5 = ($4 ? 1024 - $4 | 0 : 0) + $5 | 0;
       if (!$5) {
        break label$7
       }
       if (($5 & 1073741823 | 0 | 0) != ($5 | 0)) {
        break label$1
       }
       $4 = dlrealloc($3 | 0, $5 << 2 | 0 | 0) | 0;
       if ($4) {
        break label$6
       }
       dlfree($3 | 0);
       return 0 | 0;
      }
      $2 = 0;
      $4 = dlrealloc($3 | 0, 0 | 0) | 0;
      if (!$4) {
       break label$1
      }
     }
     HEAP32[($0 + 8 | 0) >> 2] = $5;
     HEAP32[$0 >> 2] = $4;
    }
    i64toi32_i32$3 = $1$hi;
    $2 = $1;
    label$8 : {
     $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
     $5 = 32 - $3 | 0;
     if ($5 >>> 0 < 9 >>> 0) {
      break label$8
     }
     HEAP32[($0 + 16 | 0) >> 2] = $3 + 8 | 0;
     HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $2 | 0;
     return 1 | 0;
    }
    label$9 : {
     if (!$3) {
      break label$9
     }
     $3 = $3 + -24 | 0;
     HEAP32[($0 + 16 | 0) >> 2] = $3;
     $6 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     HEAP32[($0 + 12 | 0) >> 2] = $6 + 1 | 0;
     $3 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $5 | 0 | ($2 >>> $3 | 0) | 0;
     HEAP32[($4 + ($6 << 2 | 0) | 0) >> 2] = $3 << 24 | 0 | (($3 << 8 | 0) & 16711680 | 0) | 0 | (($3 >>> 8 | 0) & 65280 | 0 | ($3 >>> 24 | 0) | 0) | 0;
     HEAP32[($0 + 4 | 0) >> 2] = $2;
     return 1 | 0;
    }
    $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
    HEAP32[($0 + 12 | 0) >> 2] = $3 + 1 | 0;
    HEAP32[($4 + ($3 << 2 | 0) | 0) >> 2] = $2 << 24 | 0 | (($2 << 8 | 0) & 16711680 | 0) | 0 | (($2 >>> 8 | 0) & 65280 | 0 | ($2 >>> 24 | 0) | 0) | 0;
    return 1 | 0;
   }
   label$10 : {
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 2047;
    if (i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$10
    }
    $2 = 0;
    label$11 : {
     if ($0) {
      break label$11
     }
     return 0 & 0 | 0 | 0;
    }
    label$12 : {
     $3 = HEAP32[$0 >> 2] | 0;
     if ($3) {
      break label$12
     }
     return 0 & 0 | 0 | 0;
    }
    label$13 : {
     label$14 : {
      label$15 : {
       $5 = HEAP32[($0 + 8 | 0) >> 2] | 0;
       $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       if ($5 >>> 0 <= ($4 + 8 | 0) >>> 0) {
        break label$15
       }
       $5 = $3;
       break label$14;
      }
      label$16 : {
       $6 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $4 | 0;
       if ($6 >>> 0 > $5 >>> 0) {
        break label$16
       }
       $5 = $3;
       break label$14;
      }
      $4 = 0;
      label$17 : {
       label$18 : {
        $5 = ($6 - $5 | 0) & 1023 | 0;
        $6 = ($5 ? 1024 - $5 | 0 : 0) + $6 | 0;
        if (!$6) {
         break label$18
        }
        if (($6 & 1073741823 | 0 | 0) != ($6 | 0)) {
         break label$13
        }
        $5 = dlrealloc($3 | 0, $6 << 2 | 0 | 0) | 0;
        if ($5) {
         break label$17
        }
        dlfree($3 | 0);
        break label$13;
       }
       $4 = 0;
       $5 = dlrealloc($3 | 0, 0 | 0) | 0;
       if (!$5) {
        break label$13
       }
      }
      HEAP32[($0 + 8 | 0) >> 2] = $6;
      HEAP32[$0 >> 2] = $5;
     }
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 6;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $31 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $31 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
     }
     $3 = $31 | 192 | 0;
     label$19 : {
      $4 = HEAP32[($0 + 16 | 0) >> 2] | 0;
      $6 = 32 - $4 | 0;
      if ($6 >>> 0 < 9 >>> 0) {
       break label$19
      }
      HEAP32[($0 + 16 | 0) >> 2] = $4 + 8 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $3 | 0;
      $4 = 1;
      break label$13;
     }
     label$20 : {
      if (!$4) {
       break label$20
      }
      $7 = $4 + -24 | 0;
      HEAP32[($0 + 16 | 0) >> 2] = $7;
      $4 = 1;
      $8 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $8 + 1 | 0;
      $237 = $5 + ($8 << 2 | 0) | 0;
      $5 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $6 | 0 | ($3 >>> $7 | 0) | 0;
      HEAP32[$237 >> 2] = $5 << 24 | 0 | (($5 << 8 | 0) & 16711680 | 0) | 0 | (($5 >>> 8 | 0) & 65280 | 0 | ($5 >>> 24 | 0) | 0) | 0;
      HEAP32[($0 + 4 | 0) >> 2] = $3;
      break label$13;
     }
     $4 = 1;
     $6 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     HEAP32[($0 + 12 | 0) >> 2] = $6 + 1 | 0;
     HEAP32[($5 + ($6 << 2 | 0) | 0) >> 2] = $3 << 24 | 0 | (($3 << 8 | 0) & 16711680 | 0) | 0 | (($3 >>> 8 | 0) & 65280 | 0 | ($3 >>> 24 | 0) | 0) | 0;
    }
    label$21 : {
     $3 = HEAP32[$0 >> 2] | 0;
     if (!$3) {
      break label$21
     }
     label$22 : {
      label$23 : {
       $5 = HEAP32[($0 + 8 | 0) >> 2] | 0;
       $2 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       if ($5 >>> 0 <= ($2 + 8 | 0) >>> 0) {
        break label$23
       }
       $5 = $3;
       break label$22;
      }
      label$24 : {
       $6 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $2 | 0;
       if ($6 >>> 0 > $5 >>> 0) {
        break label$24
       }
       $5 = $3;
       break label$22;
      }
      $2 = 0;
      label$25 : {
       label$26 : {
        $5 = ($6 - $5 | 0) & 1023 | 0;
        $6 = ($5 ? 1024 - $5 | 0 : 0) + $6 | 0;
        if (!$6) {
         break label$26
        }
        if (($6 & 1073741823 | 0 | 0) != ($6 | 0)) {
         break label$21
        }
        $5 = dlrealloc($3 | 0, $6 << 2 | 0 | 0) | 0;
        if ($5) {
         break label$25
        }
        dlfree($3 | 0);
        return 0 & $4 | 0 | 0;
       }
       $2 = 0;
       $5 = dlrealloc($3 | 0, 0 | 0) | 0;
       if (!$5) {
        break label$21
       }
      }
      HEAP32[($0 + 8 | 0) >> 2] = $6;
      HEAP32[$0 >> 2] = $5;
     }
     i64toi32_i32$3 = $1$hi;
     $3 = $1 & 63 | 0 | 128 | 0;
     label$27 : {
      $2 = HEAP32[($0 + 16 | 0) >> 2] | 0;
      $6 = 32 - $2 | 0;
      if ($6 >>> 0 < 9 >>> 0) {
       break label$27
      }
      HEAP32[($0 + 16 | 0) >> 2] = $2 + 8 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $3 | 0;
      return 1 & $4 | 0 | 0;
     }
     label$28 : {
      if (!$2) {
       break label$28
      }
      $2 = $2 + -24 | 0;
      HEAP32[($0 + 16 | 0) >> 2] = $2;
      $7 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $7 + 1 | 0;
      $2 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $6 | 0 | ($3 >>> $2 | 0) | 0;
      HEAP32[($5 + ($7 << 2 | 0) | 0) >> 2] = $2 << 24 | 0 | (($2 << 8 | 0) & 16711680 | 0) | 0 | (($2 >>> 8 | 0) & 65280 | 0 | ($2 >>> 24 | 0) | 0) | 0;
      HEAP32[($0 + 4 | 0) >> 2] = $3;
      return 1 & $4 | 0 | 0;
     }
     $2 = 1;
     $6 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     HEAP32[($0 + 12 | 0) >> 2] = $6 + 1 | 0;
     (wasm2js_i32$0 = $5 + ($6 << 2 | 0) | 0, wasm2js_i32$1 = (__wasm_rotl_i32($3 | 0, 24 | 0) | 0) & -16711936 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    }
    return $2 & $4 | 0 | 0;
   }
   label$29 : {
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 65535;
    if (i64toi32_i32$3 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
     break label$29
    }
    $2 = 0;
    label$30 : {
     if ($0) {
      break label$30
     }
     return 0 & 0 | 0 | 0;
    }
    $3 = 0;
    label$31 : {
     $4 = HEAP32[$0 >> 2] | 0;
     if (!$4) {
      break label$31
     }
     label$32 : {
      label$33 : {
       label$34 : {
        $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
        $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
        if ($2 >>> 0 <= ($3 + 8 | 0) >>> 0) {
         break label$34
        }
        $6 = $4;
        break label$33;
       }
       label$35 : {
        $3 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $3 | 0;
        if ($3 >>> 0 > $2 >>> 0) {
         break label$35
        }
        $6 = $4;
        break label$33;
       }
       $5 = 0;
       label$36 : {
        label$37 : {
         $2 = ($3 - $2 | 0) & 1023 | 0;
         $2 = ($2 ? 1024 - $2 | 0 : 0) + $3 | 0;
         if (!$2) {
          break label$37
         }
         if (($2 & 1073741823 | 0 | 0) != ($2 | 0)) {
          break label$32
         }
         $6 = dlrealloc($4 | 0, $2 << 2 | 0 | 0) | 0;
         if ($6) {
          break label$36
         }
         dlfree($4 | 0);
         break label$32;
        }
        $5 = 0;
        $6 = dlrealloc($4 | 0, 0 | 0) | 0;
        if (!$6) {
         break label$32
        }
       }
       HEAP32[($0 + 8 | 0) >> 2] = $2;
       HEAP32[$0 >> 2] = $6;
      }
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$2 = $1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 12;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = 0;
       $32 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
       $32 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
      }
      $2 = $32 | 224 | 0;
      label$38 : {
       $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
       $4 = 32 - $3 | 0;
       if ($4 >>> 0 < 9 >>> 0) {
        break label$38
       }
       HEAP32[($0 + 16 | 0) >> 2] = $3 + 8 | 0;
       HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $2 | 0;
       $5 = 1;
       break label$32;
      }
      label$39 : {
       if (!$3) {
        break label$39
       }
       $3 = $3 + -24 | 0;
       HEAP32[($0 + 16 | 0) >> 2] = $3;
       $5 = 1;
       $7 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       HEAP32[($0 + 12 | 0) >> 2] = $7 + 1 | 0;
       $3 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $4 | 0 | ($2 >>> $3 | 0) | 0;
       HEAP32[($6 + ($7 << 2 | 0) | 0) >> 2] = $3 << 24 | 0 | (($3 << 8 | 0) & 16711680 | 0) | 0 | (($3 >>> 8 | 0) & 65280 | 0 | ($3 >>> 24 | 0) | 0) | 0;
       HEAP32[($0 + 4 | 0) >> 2] = $2;
       break label$32;
      }
      $5 = 1;
      $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $3 + 1 | 0;
      HEAP32[($6 + ($3 << 2 | 0) | 0) >> 2] = $2 << 24 | 0 | (($2 << 8 | 0) & 16711680 | 0) | 0 | (($2 >>> 8 | 0) & 65280 | 0 | ($2 >>> 24 | 0) | 0) | 0;
     }
     i64toi32_i32$3 = $1$hi;
     $4 = $1;
     $3 = 0;
     $2 = 0;
     label$40 : {
      $6 = HEAP32[$0 >> 2] | 0;
      if (!$6) {
       break label$40
      }
      label$41 : {
       label$42 : {
        $7 = HEAP32[($0 + 8 | 0) >> 2] | 0;
        $2 = HEAP32[($0 + 12 | 0) >> 2] | 0;
        if ($7 >>> 0 <= ($2 + 8 | 0) >>> 0) {
         break label$42
        }
        $7 = $6;
        break label$41;
       }
       label$43 : {
        $8 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $2 | 0;
        if ($8 >>> 0 > $7 >>> 0) {
         break label$43
        }
        $7 = $6;
        break label$41;
       }
       $2 = 0;
       label$44 : {
        label$45 : {
         $7 = ($8 - $7 | 0) & 1023 | 0;
         $8 = ($7 ? 1024 - $7 | 0 : 0) + $8 | 0;
         if (!$8) {
          break label$45
         }
         if (($8 & 1073741823 | 0 | 0) != ($8 | 0)) {
          break label$40
         }
         $7 = dlrealloc($6 | 0, $8 << 2 | 0 | 0) | 0;
         if ($7) {
          break label$44
         }
         dlfree($6 | 0);
         break label$40;
        }
        $2 = 0;
        $7 = dlrealloc($6 | 0, 0 | 0) | 0;
        if (!$7) {
         break label$40
        }
       }
       HEAP32[($0 + 8 | 0) >> 2] = $8;
       HEAP32[$0 >> 2] = $7;
      }
      $6 = ($4 >>> 6 | 0) & 63 | 0 | 128 | 0;
      label$46 : {
       $2 = HEAP32[($0 + 16 | 0) >> 2] | 0;
       $8 = 32 - $2 | 0;
       if ($8 >>> 0 < 9 >>> 0) {
        break label$46
       }
       HEAP32[($0 + 16 | 0) >> 2] = $2 + 8 | 0;
       HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $6 | 0;
       $2 = 1;
       break label$40;
      }
      label$47 : {
       if (!$2) {
        break label$47
       }
       $9 = $2 + -24 | 0;
       HEAP32[($0 + 16 | 0) >> 2] = $9;
       $2 = 1;
       $10 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       HEAP32[($0 + 12 | 0) >> 2] = $10 + 1 | 0;
       $638 = $7 + ($10 << 2 | 0) | 0;
       $7 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $8 | 0 | ($6 >>> $9 | 0) | 0;
       HEAP32[$638 >> 2] = $7 << 24 | 0 | (($7 << 8 | 0) & 16711680 | 0) | 0 | (($7 >>> 8 | 0) & 65280 | 0 | ($7 >>> 24 | 0) | 0) | 0;
       HEAP32[($0 + 4 | 0) >> 2] = $6;
       break label$40;
      }
      $2 = 1;
      $8 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $8 + 1 | 0;
      (wasm2js_i32$0 = $7 + ($8 << 2 | 0) | 0, wasm2js_i32$1 = (__wasm_rotl_i32($6 | 0, 24 | 0) | 0) & -16711936 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     }
     $2 = $2 & $5 | 0;
     $5 = HEAP32[$0 >> 2] | 0;
     if (!$5) {
      break label$31
     }
     label$48 : {
      label$49 : {
       $6 = HEAP32[($0 + 8 | 0) >> 2] | 0;
       $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       if ($6 >>> 0 <= ($3 + 8 | 0) >>> 0) {
        break label$49
       }
       $6 = $5;
       break label$48;
      }
      label$50 : {
       $7 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $3 | 0;
       if ($7 >>> 0 > $6 >>> 0) {
        break label$50
       }
       $6 = $5;
       break label$48;
      }
      $3 = 0;
      label$51 : {
       label$52 : {
        $6 = ($7 - $6 | 0) & 1023 | 0;
        $7 = ($6 ? 1024 - $6 | 0 : 0) + $7 | 0;
        if (!$7) {
         break label$52
        }
        if (($7 & 1073741823 | 0 | 0) != ($7 | 0)) {
         break label$31
        }
        $6 = dlrealloc($5 | 0, $7 << 2 | 0 | 0) | 0;
        if ($6) {
         break label$51
        }
        dlfree($5 | 0);
        return 0 & $2 | 0 | 0;
       }
       $3 = 0;
       $6 = dlrealloc($5 | 0, 0 | 0) | 0;
       if (!$6) {
        break label$31
       }
      }
      HEAP32[($0 + 8 | 0) >> 2] = $7;
      HEAP32[$0 >> 2] = $6;
     }
     $4 = $4 & 63 | 0 | 128 | 0;
     label$53 : {
      $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
      $5 = 32 - $3 | 0;
      if ($5 >>> 0 < 9 >>> 0) {
       break label$53
      }
      HEAP32[($0 + 16 | 0) >> 2] = $3 + 8 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $4 | 0;
      return 1 & $2 | 0 | 0;
     }
     label$54 : {
      if (!$3) {
       break label$54
      }
      $3 = $3 + -24 | 0;
      HEAP32[($0 + 16 | 0) >> 2] = $3;
      $7 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $7 + 1 | 0;
      $3 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $5 | 0 | ($4 >>> $3 | 0) | 0;
      HEAP32[($6 + ($7 << 2 | 0) | 0) >> 2] = $3 << 24 | 0 | (($3 << 8 | 0) & 16711680 | 0) | 0 | (($3 >>> 8 | 0) & 65280 | 0 | ($3 >>> 24 | 0) | 0) | 0;
      HEAP32[($0 + 4 | 0) >> 2] = $4;
      return 1 & $2 | 0 | 0;
     }
     $3 = 1;
     $5 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     HEAP32[($0 + 12 | 0) >> 2] = $5 + 1 | 0;
     (wasm2js_i32$0 = $6 + ($5 << 2 | 0) | 0, wasm2js_i32$1 = (__wasm_rotl_i32($4 | 0, 24 | 0) | 0) & -16711936 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    }
    return $3 & $2 | 0 | 0;
   }
   label$55 : {
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 2097151;
    if (i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$55
    }
    label$56 : {
     if ($0) {
      break label$56
     }
     return 0 & 0 | 0 | 0;
    }
    $5 = 0;
    $2 = 0;
    $3 = 0;
    label$57 : {
     $4 = HEAP32[$0 >> 2] | 0;
     if (!$4) {
      break label$57
     }
     label$58 : {
      label$59 : {
       label$60 : {
        $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
        $2 = HEAP32[($0 + 12 | 0) >> 2] | 0;
        if ($3 >>> 0 <= ($2 + 8 | 0) >>> 0) {
         break label$60
        }
        $6 = $4;
        break label$59;
       }
       label$61 : {
        $6 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $2 | 0;
        if ($6 >>> 0 > $3 >>> 0) {
         break label$61
        }
        $6 = $4;
        break label$59;
       }
       $2 = 0;
       label$62 : {
        label$63 : {
         $3 = ($6 - $3 | 0) & 1023 | 0;
         $3 = ($3 ? 1024 - $3 | 0 : 0) + $6 | 0;
         if (!$3) {
          break label$63
         }
         if (($3 & 1073741823 | 0 | 0) != ($3 | 0)) {
          break label$58
         }
         $6 = dlrealloc($4 | 0, $3 << 2 | 0 | 0) | 0;
         if ($6) {
          break label$62
         }
         dlfree($4 | 0);
         break label$58;
        }
        $2 = 0;
        $6 = dlrealloc($4 | 0, 0 | 0) | 0;
        if (!$6) {
         break label$58
        }
       }
       HEAP32[($0 + 8 | 0) >> 2] = $3;
       HEAP32[$0 >> 2] = $6;
      }
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$0 = $1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = 18;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = 0;
       $33 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
       $33 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
      }
      $3 = $33 | 240 | 0;
      label$64 : {
       $2 = HEAP32[($0 + 16 | 0) >> 2] | 0;
       $4 = 32 - $2 | 0;
       if ($4 >>> 0 < 9 >>> 0) {
        break label$64
       }
       HEAP32[($0 + 16 | 0) >> 2] = $2 + 8 | 0;
       HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $3 | 0;
       $2 = 1;
       break label$58;
      }
      label$65 : {
       if (!$2) {
        break label$65
       }
       $7 = $2 + -24 | 0;
       HEAP32[($0 + 16 | 0) >> 2] = $7;
       $2 = 1;
       $8 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       HEAP32[($0 + 12 | 0) >> 2] = $8 + 1 | 0;
       $4 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $4 | 0 | ($3 >>> $7 | 0) | 0;
       HEAP32[($6 + ($8 << 2 | 0) | 0) >> 2] = $4 << 24 | 0 | (($4 << 8 | 0) & 16711680 | 0) | 0 | (($4 >>> 8 | 0) & 65280 | 0 | ($4 >>> 24 | 0) | 0) | 0;
       HEAP32[($0 + 4 | 0) >> 2] = $3;
       break label$58;
      }
      $2 = 1;
      $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $4 + 1 | 0;
      HEAP32[($6 + ($4 << 2 | 0) | 0) >> 2] = $3 << 24 | 0 | (($3 << 8 | 0) & 16711680 | 0) | 0 | (($3 >>> 8 | 0) & 65280 | 0 | ($3 >>> 24 | 0) | 0) | 0;
     }
     label$66 : {
      $4 = HEAP32[$0 >> 2] | 0;
      if ($4) {
       break label$66
      }
      $3 = 0;
      break label$57;
     }
     label$67 : {
      label$68 : {
       $6 = HEAP32[($0 + 8 | 0) >> 2] | 0;
       $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       if ($6 >>> 0 <= ($3 + 8 | 0) >>> 0) {
        break label$68
       }
       $6 = $4;
       break label$67;
      }
      label$69 : {
       $7 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $3 | 0;
       if ($7 >>> 0 > $6 >>> 0) {
        break label$69
       }
       $6 = $4;
       break label$67;
      }
      $3 = 0;
      label$70 : {
       label$71 : {
        $6 = ($7 - $6 | 0) & 1023 | 0;
        $7 = ($6 ? 1024 - $6 | 0 : 0) + $7 | 0;
        if (!$7) {
         break label$71
        }
        if (($7 & 1073741823 | 0 | 0) != ($7 | 0)) {
         break label$57
        }
        $6 = dlrealloc($4 | 0, $7 << 2 | 0 | 0) | 0;
        if ($6) {
         break label$70
        }
        dlfree($4 | 0);
        break label$57;
       }
       $3 = 0;
       $6 = dlrealloc($4 | 0, 0 | 0) | 0;
       if (!$6) {
        break label$57
       }
      }
      HEAP32[($0 + 8 | 0) >> 2] = $7;
      HEAP32[$0 >> 2] = $6;
     }
     i64toi32_i32$3 = $1$hi;
     $4 = ($1 >>> 12 | 0) & 63 | 0 | 128 | 0;
     label$72 : {
      $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
      $7 = 32 - $3 | 0;
      if ($7 >>> 0 < 9 >>> 0) {
       break label$72
      }
      HEAP32[($0 + 16 | 0) >> 2] = $3 + 8 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $4 | 0;
      $3 = 1;
      break label$57;
     }
     label$73 : {
      if (!$3) {
       break label$73
      }
      $8 = $3 + -24 | 0;
      HEAP32[($0 + 16 | 0) >> 2] = $8;
      $3 = 1;
      $9 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $9 + 1 | 0;
      $1029 = $6 + ($9 << 2 | 0) | 0;
      $6 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $7 | 0 | ($4 >>> $8 | 0) | 0;
      HEAP32[$1029 >> 2] = $6 << 24 | 0 | (($6 << 8 | 0) & 16711680 | 0) | 0 | (($6 >>> 8 | 0) & 65280 | 0 | ($6 >>> 24 | 0) | 0) | 0;
      HEAP32[($0 + 4 | 0) >> 2] = $4;
      break label$57;
     }
     $3 = 1;
     $7 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     HEAP32[($0 + 12 | 0) >> 2] = $7 + 1 | 0;
     (wasm2js_i32$0 = $6 + ($7 << 2 | 0) | 0, wasm2js_i32$1 = (__wasm_rotl_i32($4 | 0, 24 | 0) | 0) & -16711936 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    }
    label$74 : {
     $4 = HEAP32[$0 >> 2] | 0;
     if ($4) {
      break label$74
     }
     return 0 & 0 | 0 | 0;
    }
    $6 = $3 & $2 | 0;
    i64toi32_i32$3 = $1$hi;
    $2 = $1;
    label$75 : {
     label$76 : {
      label$77 : {
       $7 = HEAP32[($0 + 8 | 0) >> 2] | 0;
       $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       if ($7 >>> 0 <= ($3 + 8 | 0) >>> 0) {
        break label$77
       }
       $7 = $4;
       break label$76;
      }
      label$78 : {
       $8 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $3 | 0;
       if ($8 >>> 0 > $7 >>> 0) {
        break label$78
       }
       $7 = $4;
       break label$76;
      }
      $3 = 0;
      label$79 : {
       label$80 : {
        $7 = ($8 - $7 | 0) & 1023 | 0;
        $8 = ($7 ? 1024 - $7 | 0 : 0) + $8 | 0;
        if (!$8) {
         break label$80
        }
        if (($8 & 1073741823 | 0 | 0) != ($8 | 0)) {
         break label$75
        }
        $7 = dlrealloc($4 | 0, $8 << 2 | 0 | 0) | 0;
        if ($7) {
         break label$79
        }
        dlfree($4 | 0);
        break label$75;
       }
       $3 = 0;
       $7 = dlrealloc($4 | 0, 0 | 0) | 0;
       if (!$7) {
        break label$75
       }
      }
      HEAP32[($0 + 8 | 0) >> 2] = $8;
      HEAP32[$0 >> 2] = $7;
     }
     $4 = ($2 >>> 6 | 0) & 63 | 0 | 128 | 0;
     label$81 : {
      $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
      $8 = 32 - $3 | 0;
      if ($8 >>> 0 < 9 >>> 0) {
       break label$81
      }
      HEAP32[($0 + 16 | 0) >> 2] = $3 + 8 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $4 | 0;
      $3 = 1;
      break label$75;
     }
     label$82 : {
      if (!$3) {
       break label$82
      }
      $9 = $3 + -24 | 0;
      HEAP32[($0 + 16 | 0) >> 2] = $9;
      $3 = 1;
      $10 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $10 + 1 | 0;
      $1156 = $7 + ($10 << 2 | 0) | 0;
      $7 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $8 | 0 | ($4 >>> $9 | 0) | 0;
      HEAP32[$1156 >> 2] = $7 << 24 | 0 | (($7 << 8 | 0) & 16711680 | 0) | 0 | (($7 >>> 8 | 0) & 65280 | 0 | ($7 >>> 24 | 0) | 0) | 0;
      HEAP32[($0 + 4 | 0) >> 2] = $4;
      break label$75;
     }
     $3 = 1;
     $8 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     HEAP32[($0 + 12 | 0) >> 2] = $8 + 1 | 0;
     (wasm2js_i32$0 = $7 + ($8 << 2 | 0) | 0, wasm2js_i32$1 = (__wasm_rotl_i32($4 | 0, 24 | 0) | 0) & -16711936 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    }
    $3 = $6 & $3 | 0;
    label$83 : {
     $4 = HEAP32[$0 >> 2] | 0;
     if (!$4) {
      break label$83
     }
     label$84 : {
      label$85 : {
       $6 = HEAP32[($0 + 8 | 0) >> 2] | 0;
       $5 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       if ($6 >>> 0 <= ($5 + 8 | 0) >>> 0) {
        break label$85
       }
       $6 = $4;
       break label$84;
      }
      label$86 : {
       $7 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $5 | 0;
       if ($7 >>> 0 > $6 >>> 0) {
        break label$86
       }
       $6 = $4;
       break label$84;
      }
      $5 = 0;
      label$87 : {
       label$88 : {
        $6 = ($7 - $6 | 0) & 1023 | 0;
        $7 = ($6 ? 1024 - $6 | 0 : 0) + $7 | 0;
        if (!$7) {
         break label$88
        }
        if (($7 & 1073741823 | 0 | 0) != ($7 | 0)) {
         break label$83
        }
        $6 = dlrealloc($4 | 0, $7 << 2 | 0 | 0) | 0;
        if ($6) {
         break label$87
        }
        dlfree($4 | 0);
        return 0 & $3 | 0 | 0;
       }
       $5 = 0;
       $6 = dlrealloc($4 | 0, 0 | 0) | 0;
       if (!$6) {
        break label$83
       }
      }
      HEAP32[($0 + 8 | 0) >> 2] = $7;
      HEAP32[$0 >> 2] = $6;
     }
     $4 = $2 & 63 | 0 | 128 | 0;
     label$89 : {
      $2 = HEAP32[($0 + 16 | 0) >> 2] | 0;
      $5 = 32 - $2 | 0;
      if ($5 >>> 0 < 9 >>> 0) {
       break label$89
      }
      HEAP32[($0 + 16 | 0) >> 2] = $2 + 8 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $4 | 0;
      return 1 & $3 | 0 | 0;
     }
     label$90 : {
      if (!$2) {
       break label$90
      }
      $2 = $2 + -24 | 0;
      HEAP32[($0 + 16 | 0) >> 2] = $2;
      $7 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $7 + 1 | 0;
      $2 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $5 | 0 | ($4 >>> $2 | 0) | 0;
      HEAP32[($6 + ($7 << 2 | 0) | 0) >> 2] = $2 << 24 | 0 | (($2 << 8 | 0) & 16711680 | 0) | 0 | (($2 >>> 8 | 0) & 65280 | 0 | ($2 >>> 24 | 0) | 0) | 0;
      HEAP32[($0 + 4 | 0) >> 2] = $4;
      return 1 & $3 | 0 | 0;
     }
     $5 = 1;
     $2 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     HEAP32[($0 + 12 | 0) >> 2] = $2 + 1 | 0;
     (wasm2js_i32$0 = $6 + ($2 << 2 | 0) | 0, wasm2js_i32$1 = (__wasm_rotl_i32($4 | 0, 24 | 0) | 0) & -16711936 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    }
    return $5 & $3 | 0 | 0;
   }
   label$91 : {
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 67108863;
    if (i64toi32_i32$3 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
     break label$91
    }
    label$92 : {
     if ($0) {
      break label$92
     }
     return 0 & 0 | 0 | 0;
    }
    $2 = 0;
    $4 = 0;
    $5 = 0;
    label$93 : {
     $3 = HEAP32[$0 >> 2] | 0;
     if (!$3) {
      break label$93
     }
     label$94 : {
      label$95 : {
       label$96 : {
        $5 = HEAP32[($0 + 8 | 0) >> 2] | 0;
        $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
        if ($5 >>> 0 <= ($4 + 8 | 0) >>> 0) {
         break label$96
        }
        $5 = $3;
        break label$95;
       }
       label$97 : {
        $6 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $4 | 0;
        if ($6 >>> 0 > $5 >>> 0) {
         break label$97
        }
        $5 = $3;
        break label$95;
       }
       $4 = 0;
       label$98 : {
        label$99 : {
         $5 = ($6 - $5 | 0) & 1023 | 0;
         $6 = ($5 ? 1024 - $5 | 0 : 0) + $6 | 0;
         if (!$6) {
          break label$99
         }
         if (($6 & 1073741823 | 0 | 0) != ($6 | 0)) {
          break label$94
         }
         $5 = dlrealloc($3 | 0, $6 << 2 | 0 | 0) | 0;
         if ($5) {
          break label$98
         }
         dlfree($3 | 0);
         break label$94;
        }
        $4 = 0;
        $5 = dlrealloc($3 | 0, 0 | 0) | 0;
        if (!$5) {
         break label$94
        }
       }
       HEAP32[($0 + 8 | 0) >> 2] = $6;
       HEAP32[$0 >> 2] = $5;
      }
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$2 = $1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 24;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = 0;
       $34 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
       $34 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
      }
      $3 = $34 | 248 | 0;
      label$100 : {
       $4 = HEAP32[($0 + 16 | 0) >> 2] | 0;
       $6 = 32 - $4 | 0;
       if ($6 >>> 0 < 9 >>> 0) {
        break label$100
       }
       HEAP32[($0 + 16 | 0) >> 2] = $4 + 8 | 0;
       HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $3 | 0;
       $4 = 1;
       break label$94;
      }
      label$101 : {
       if (!$4) {
        break label$101
       }
       $7 = $4 + -24 | 0;
       HEAP32[($0 + 16 | 0) >> 2] = $7;
       $4 = 1;
       $8 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       HEAP32[($0 + 12 | 0) >> 2] = $8 + 1 | 0;
       $1415 = $5 + ($8 << 2 | 0) | 0;
       $5 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $6 | 0 | ($3 >>> $7 | 0) | 0;
       HEAP32[$1415 >> 2] = $5 << 24 | 0 | (($5 << 8 | 0) & 16711680 | 0) | 0 | (($5 >>> 8 | 0) & 65280 | 0 | ($5 >>> 24 | 0) | 0) | 0;
       HEAP32[($0 + 4 | 0) >> 2] = $3;
       break label$94;
      }
      $4 = 1;
      $6 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $6 + 1 | 0;
      HEAP32[($5 + ($6 << 2 | 0) | 0) >> 2] = $3 << 24 | 0 | (($3 << 8 | 0) & 16711680 | 0) | 0 | (($3 >>> 8 | 0) & 65280 | 0 | ($3 >>> 24 | 0) | 0) | 0;
     }
     label$102 : {
      $3 = HEAP32[$0 >> 2] | 0;
      if ($3) {
       break label$102
      }
      $5 = 0;
      break label$93;
     }
     label$103 : {
      label$104 : {
       $6 = HEAP32[($0 + 8 | 0) >> 2] | 0;
       $5 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       if ($6 >>> 0 <= ($5 + 8 | 0) >>> 0) {
        break label$104
       }
       $7 = $3;
       break label$103;
      }
      label$105 : {
       $7 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $5 | 0;
       if ($7 >>> 0 > $6 >>> 0) {
        break label$105
       }
       $7 = $3;
       break label$103;
      }
      $5 = 0;
      label$106 : {
       label$107 : {
        $6 = ($7 - $6 | 0) & 1023 | 0;
        $6 = ($6 ? 1024 - $6 | 0 : 0) + $7 | 0;
        if (!$6) {
         break label$107
        }
        if (($6 & 1073741823 | 0 | 0) != ($6 | 0)) {
         break label$93
        }
        $7 = dlrealloc($3 | 0, $6 << 2 | 0 | 0) | 0;
        if ($7) {
         break label$106
        }
        dlfree($3 | 0);
        break label$93;
       }
       $5 = 0;
       $7 = dlrealloc($3 | 0, 0 | 0) | 0;
       if (!$7) {
        break label$93
       }
      }
      HEAP32[($0 + 8 | 0) >> 2] = $6;
      HEAP32[$0 >> 2] = $7;
     }
     i64toi32_i32$3 = $1$hi;
     $6 = ($1 >>> 18 | 0) & 63 | 0 | 128 | 0;
     label$108 : {
      $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
      $8 = 32 - $3 | 0;
      if ($8 >>> 0 < 9 >>> 0) {
       break label$108
      }
      HEAP32[($0 + 16 | 0) >> 2] = $3 + 8 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $6 | 0;
      $5 = 1;
      break label$93;
     }
     label$109 : {
      if (!$3) {
       break label$109
      }
      $3 = $3 + -24 | 0;
      HEAP32[($0 + 16 | 0) >> 2] = $3;
      $5 = 1;
      $9 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $9 + 1 | 0;
      $3 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $8 | 0 | ($6 >>> $3 | 0) | 0;
      HEAP32[($7 + ($9 << 2 | 0) | 0) >> 2] = $3 << 24 | 0 | (($3 << 8 | 0) & 16711680 | 0) | 0 | (($3 >>> 8 | 0) & 65280 | 0 | ($3 >>> 24 | 0) | 0) | 0;
      HEAP32[($0 + 4 | 0) >> 2] = $6;
      break label$93;
     }
     $5 = 1;
     $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     HEAP32[($0 + 12 | 0) >> 2] = $3 + 1 | 0;
     (wasm2js_i32$0 = $7 + ($3 << 2 | 0) | 0, wasm2js_i32$1 = (__wasm_rotl_i32($6 | 0, 24 | 0) | 0) & -16711936 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    }
    $3 = 0;
    label$110 : {
     $6 = HEAP32[$0 >> 2] | 0;
     if (!$6) {
      break label$110
     }
     $3 = $5 & $4 | 0;
     i64toi32_i32$3 = $1$hi;
     $4 = $1;
     label$111 : {
      label$112 : {
       label$113 : {
        $5 = HEAP32[($0 + 8 | 0) >> 2] | 0;
        $2 = HEAP32[($0 + 12 | 0) >> 2] | 0;
        if ($5 >>> 0 <= ($2 + 8 | 0) >>> 0) {
         break label$113
        }
        $7 = $6;
        break label$112;
       }
       label$114 : {
        $7 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $2 | 0;
        if ($7 >>> 0 > $5 >>> 0) {
         break label$114
        }
        $7 = $6;
        break label$112;
       }
       $2 = 0;
       label$115 : {
        label$116 : {
         $5 = ($7 - $5 | 0) & 1023 | 0;
         $5 = ($5 ? 1024 - $5 | 0 : 0) + $7 | 0;
         if (!$5) {
          break label$116
         }
         if (($5 & 1073741823 | 0 | 0) != ($5 | 0)) {
          break label$111
         }
         $7 = dlrealloc($6 | 0, $5 << 2 | 0 | 0) | 0;
         if ($7) {
          break label$115
         }
         dlfree($6 | 0);
         break label$111;
        }
        $2 = 0;
        $7 = dlrealloc($6 | 0, 0 | 0) | 0;
        if (!$7) {
         break label$111
        }
       }
       HEAP32[($0 + 8 | 0) >> 2] = $5;
       HEAP32[$0 >> 2] = $7;
      }
      $5 = ($4 >>> 12 | 0) & 63 | 0 | 128 | 0;
      label$117 : {
       $2 = HEAP32[($0 + 16 | 0) >> 2] | 0;
       $6 = 32 - $2 | 0;
       if ($6 >>> 0 < 9 >>> 0) {
        break label$117
       }
       HEAP32[($0 + 16 | 0) >> 2] = $2 + 8 | 0;
       HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $5 | 0;
       $2 = 1;
       break label$111;
      }
      label$118 : {
       if (!$2) {
        break label$118
       }
       $8 = $2 + -24 | 0;
       HEAP32[($0 + 16 | 0) >> 2] = $8;
       $2 = 1;
       $9 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       HEAP32[($0 + 12 | 0) >> 2] = $9 + 1 | 0;
       $6 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $6 | 0 | ($5 >>> $8 | 0) | 0;
       HEAP32[($7 + ($9 << 2 | 0) | 0) >> 2] = $6 << 24 | 0 | (($6 << 8 | 0) & 16711680 | 0) | 0 | (($6 >>> 8 | 0) & 65280 | 0 | ($6 >>> 24 | 0) | 0) | 0;
       HEAP32[($0 + 4 | 0) >> 2] = $5;
       break label$111;
      }
      $2 = 1;
      $6 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $6 + 1 | 0;
      (wasm2js_i32$0 = $7 + ($6 << 2 | 0) | 0, wasm2js_i32$1 = (__wasm_rotl_i32($5 | 0, 24 | 0) | 0) & -16711936 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     }
     $5 = $3 & $2 | 0;
     $3 = 0;
     $2 = 0;
     label$119 : {
      $6 = HEAP32[$0 >> 2] | 0;
      if (!$6) {
       break label$119
      }
      label$120 : {
       label$121 : {
        $7 = HEAP32[($0 + 8 | 0) >> 2] | 0;
        $2 = HEAP32[($0 + 12 | 0) >> 2] | 0;
        if ($7 >>> 0 <= ($2 + 8 | 0) >>> 0) {
         break label$121
        }
        $7 = $6;
        break label$120;
       }
       label$122 : {
        $8 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $2 | 0;
        if ($8 >>> 0 > $7 >>> 0) {
         break label$122
        }
        $7 = $6;
        break label$120;
       }
       $2 = 0;
       label$123 : {
        label$124 : {
         $7 = ($8 - $7 | 0) & 1023 | 0;
         $8 = ($7 ? 1024 - $7 | 0 : 0) + $8 | 0;
         if (!$8) {
          break label$124
         }
         if (($8 & 1073741823 | 0 | 0) != ($8 | 0)) {
          break label$119
         }
         $7 = dlrealloc($6 | 0, $8 << 2 | 0 | 0) | 0;
         if ($7) {
          break label$123
         }
         dlfree($6 | 0);
         break label$119;
        }
        $2 = 0;
        $7 = dlrealloc($6 | 0, 0 | 0) | 0;
        if (!$7) {
         break label$119
        }
       }
       HEAP32[($0 + 8 | 0) >> 2] = $8;
       HEAP32[$0 >> 2] = $7;
      }
      $6 = ($4 >>> 6 | 0) & 63 | 0 | 128 | 0;
      label$125 : {
       $2 = HEAP32[($0 + 16 | 0) >> 2] | 0;
       $8 = 32 - $2 | 0;
       if ($8 >>> 0 < 9 >>> 0) {
        break label$125
       }
       HEAP32[($0 + 16 | 0) >> 2] = $2 + 8 | 0;
       HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $6 | 0;
       $2 = 1;
       break label$119;
      }
      label$126 : {
       if (!$2) {
        break label$126
       }
       $9 = $2 + -24 | 0;
       HEAP32[($0 + 16 | 0) >> 2] = $9;
       $2 = 1;
       $10 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       HEAP32[($0 + 12 | 0) >> 2] = $10 + 1 | 0;
       $1799 = $7 + ($10 << 2 | 0) | 0;
       $7 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $8 | 0 | ($6 >>> $9 | 0) | 0;
       HEAP32[$1799 >> 2] = $7 << 24 | 0 | (($7 << 8 | 0) & 16711680 | 0) | 0 | (($7 >>> 8 | 0) & 65280 | 0 | ($7 >>> 24 | 0) | 0) | 0;
       HEAP32[($0 + 4 | 0) >> 2] = $6;
       break label$119;
      }
      $2 = 1;
      $8 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $8 + 1 | 0;
      (wasm2js_i32$0 = $7 + ($8 << 2 | 0) | 0, wasm2js_i32$1 = (__wasm_rotl_i32($6 | 0, 24 | 0) | 0) & -16711936 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     }
     $2 = $5 & $2 | 0;
     $5 = HEAP32[$0 >> 2] | 0;
     if (!$5) {
      break label$110
     }
     label$127 : {
      label$128 : {
       $6 = HEAP32[($0 + 8 | 0) >> 2] | 0;
       $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       if ($6 >>> 0 <= ($3 + 8 | 0) >>> 0) {
        break label$128
       }
       $6 = $5;
       break label$127;
      }
      label$129 : {
       $7 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $3 | 0;
       if ($7 >>> 0 > $6 >>> 0) {
        break label$129
       }
       $6 = $5;
       break label$127;
      }
      $3 = 0;
      label$130 : {
       label$131 : {
        $6 = ($7 - $6 | 0) & 1023 | 0;
        $7 = ($6 ? 1024 - $6 | 0 : 0) + $7 | 0;
        if (!$7) {
         break label$131
        }
        if (($7 & 1073741823 | 0 | 0) != ($7 | 0)) {
         break label$110
        }
        $6 = dlrealloc($5 | 0, $7 << 2 | 0 | 0) | 0;
        if ($6) {
         break label$130
        }
        dlfree($5 | 0);
        return 0 & $2 | 0 | 0;
       }
       $3 = 0;
       $6 = dlrealloc($5 | 0, 0 | 0) | 0;
       if (!$6) {
        break label$110
       }
      }
      HEAP32[($0 + 8 | 0) >> 2] = $7;
      HEAP32[$0 >> 2] = $6;
     }
     $4 = $4 & 63 | 0 | 128 | 0;
     label$132 : {
      $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
      $5 = 32 - $3 | 0;
      if ($5 >>> 0 < 9 >>> 0) {
       break label$132
      }
      HEAP32[($0 + 16 | 0) >> 2] = $3 + 8 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $4 | 0;
      return 1 & $2 | 0 | 0;
     }
     label$133 : {
      if (!$3) {
       break label$133
      }
      $3 = $3 + -24 | 0;
      HEAP32[($0 + 16 | 0) >> 2] = $3;
      $7 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $7 + 1 | 0;
      $3 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $5 | 0 | ($4 >>> $3 | 0) | 0;
      HEAP32[($6 + ($7 << 2 | 0) | 0) >> 2] = $3 << 24 | 0 | (($3 << 8 | 0) & 16711680 | 0) | 0 | (($3 >>> 8 | 0) & 65280 | 0 | ($3 >>> 24 | 0) | 0) | 0;
      HEAP32[($0 + 4 | 0) >> 2] = $4;
      return 1 & $2 | 0 | 0;
     }
     $3 = 1;
     $5 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     HEAP32[($0 + 12 | 0) >> 2] = $5 + 1 | 0;
     (wasm2js_i32$0 = $6 + ($5 << 2 | 0) | 0, wasm2js_i32$1 = (__wasm_rotl_i32($4 | 0, 24 | 0) | 0) & -16711936 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    }
    return $3 & $2 | 0 | 0;
   }
   label$134 : {
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 2147483647;
    if (i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$134
    }
    label$135 : {
     if ($0) {
      break label$135
     }
     return 0 & 0 | 0 | 0;
    }
    $5 = 0;
    $3 = 0;
    $4 = 0;
    label$136 : {
     $2 = HEAP32[$0 >> 2] | 0;
     if (!$2) {
      break label$136
     }
     label$137 : {
      label$138 : {
       label$139 : {
        $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
        $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
        if ($4 >>> 0 <= ($3 + 8 | 0) >>> 0) {
         break label$139
        }
        $4 = $2;
        break label$138;
       }
       label$140 : {
        $6 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $3 | 0;
        if ($6 >>> 0 > $4 >>> 0) {
         break label$140
        }
        $4 = $2;
        break label$138;
       }
       $3 = 0;
       label$141 : {
        label$142 : {
         $4 = ($6 - $4 | 0) & 1023 | 0;
         $6 = ($4 ? 1024 - $4 | 0 : 0) + $6 | 0;
         if (!$6) {
          break label$142
         }
         if (($6 & 1073741823 | 0 | 0) != ($6 | 0)) {
          break label$137
         }
         $4 = dlrealloc($2 | 0, $6 << 2 | 0 | 0) | 0;
         if ($4) {
          break label$141
         }
         dlfree($2 | 0);
         break label$137;
        }
        $3 = 0;
        $4 = dlrealloc($2 | 0, 0 | 0) | 0;
        if (!$4) {
         break label$137
        }
       }
       HEAP32[($0 + 8 | 0) >> 2] = $6;
       HEAP32[$0 >> 2] = $4;
      }
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$0 = $1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = 30;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = 0;
       $35 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
       $35 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
      }
      $2 = $35 | 252 | 0;
      label$143 : {
       $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
       $6 = 32 - $3 | 0;
       if ($6 >>> 0 < 9 >>> 0) {
        break label$143
       }
       HEAP32[($0 + 16 | 0) >> 2] = $3 + 8 | 0;
       HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $2 | 0;
       $3 = 1;
       break label$137;
      }
      label$144 : {
       if (!$3) {
        break label$144
       }
       $7 = $3 + -24 | 0;
       HEAP32[($0 + 16 | 0) >> 2] = $7;
       $3 = 1;
       $8 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       HEAP32[($0 + 12 | 0) >> 2] = $8 + 1 | 0;
       $2058 = $4 + ($8 << 2 | 0) | 0;
       $4 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $6 | 0 | ($2 >>> $7 | 0) | 0;
       HEAP32[$2058 >> 2] = $4 << 24 | 0 | (($4 << 8 | 0) & 16711680 | 0) | 0 | (($4 >>> 8 | 0) & 65280 | 0 | ($4 >>> 24 | 0) | 0) | 0;
       HEAP32[($0 + 4 | 0) >> 2] = $2;
       break label$137;
      }
      $3 = 1;
      $6 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $6 + 1 | 0;
      HEAP32[($4 + ($6 << 2 | 0) | 0) >> 2] = $2 << 24 | 0 | (($2 << 8 | 0) & 16711680 | 0) | 0 | (($2 >>> 8 | 0) & 65280 | 0 | ($2 >>> 24 | 0) | 0) | 0;
     }
     label$145 : {
      $2 = HEAP32[$0 >> 2] | 0;
      if ($2) {
       break label$145
      }
      $4 = 0;
      break label$136;
     }
     label$146 : {
      label$147 : {
       $6 = HEAP32[($0 + 8 | 0) >> 2] | 0;
       $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       if ($6 >>> 0 <= ($4 + 8 | 0) >>> 0) {
        break label$147
       }
       $7 = $2;
       break label$146;
      }
      label$148 : {
       $7 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $4 | 0;
       if ($7 >>> 0 > $6 >>> 0) {
        break label$148
       }
       $7 = $2;
       break label$146;
      }
      $4 = 0;
      label$149 : {
       label$150 : {
        $6 = ($7 - $6 | 0) & 1023 | 0;
        $6 = ($6 ? 1024 - $6 | 0 : 0) + $7 | 0;
        if (!$6) {
         break label$150
        }
        if (($6 & 1073741823 | 0 | 0) != ($6 | 0)) {
         break label$136
        }
        $7 = dlrealloc($2 | 0, $6 << 2 | 0 | 0) | 0;
        if ($7) {
         break label$149
        }
        dlfree($2 | 0);
        break label$136;
       }
       $4 = 0;
       $7 = dlrealloc($2 | 0, 0 | 0) | 0;
       if (!$7) {
        break label$136
       }
      }
      HEAP32[($0 + 8 | 0) >> 2] = $6;
      HEAP32[$0 >> 2] = $7;
     }
     i64toi32_i32$3 = $1$hi;
     $6 = ($1 >>> 24 | 0) & 63 | 0 | 128 | 0;
     label$151 : {
      $2 = HEAP32[($0 + 16 | 0) >> 2] | 0;
      $8 = 32 - $2 | 0;
      if ($8 >>> 0 < 9 >>> 0) {
       break label$151
      }
      HEAP32[($0 + 16 | 0) >> 2] = $2 + 8 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $6 | 0;
      $4 = 1;
      break label$136;
     }
     label$152 : {
      if (!$2) {
       break label$152
      }
      $2 = $2 + -24 | 0;
      HEAP32[($0 + 16 | 0) >> 2] = $2;
      $4 = 1;
      $9 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $9 + 1 | 0;
      $2 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $8 | 0 | ($6 >>> $2 | 0) | 0;
      HEAP32[($7 + ($9 << 2 | 0) | 0) >> 2] = $2 << 24 | 0 | (($2 << 8 | 0) & 16711680 | 0) | 0 | (($2 >>> 8 | 0) & 65280 | 0 | ($2 >>> 24 | 0) | 0) | 0;
      HEAP32[($0 + 4 | 0) >> 2] = $6;
      break label$136;
     }
     $4 = 1;
     $2 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     HEAP32[($0 + 12 | 0) >> 2] = $2 + 1 | 0;
     (wasm2js_i32$0 = $7 + ($2 << 2 | 0) | 0, wasm2js_i32$1 = (__wasm_rotl_i32($6 | 0, 24 | 0) | 0) & -16711936 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    }
    i64toi32_i32$3 = $1$hi;
    $2 = $1;
    label$153 : {
     label$154 : {
      $6 = HEAP32[$0 >> 2] | 0;
      if ($6) {
       break label$154
      }
      $3 = 0;
      break label$153;
     }
     $4 = $4 & $3 | 0;
     label$155 : {
      label$156 : {
       label$157 : {
        $7 = HEAP32[($0 + 8 | 0) >> 2] | 0;
        $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
        if ($7 >>> 0 <= ($3 + 8 | 0) >>> 0) {
         break label$157
        }
        $7 = $6;
        break label$156;
       }
       label$158 : {
        $8 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $3 | 0;
        if ($8 >>> 0 > $7 >>> 0) {
         break label$158
        }
        $7 = $6;
        break label$156;
       }
       $3 = 0;
       label$159 : {
        label$160 : {
         $7 = ($8 - $7 | 0) & 1023 | 0;
         $8 = ($7 ? 1024 - $7 | 0 : 0) + $8 | 0;
         if (!$8) {
          break label$160
         }
         if (($8 & 1073741823 | 0 | 0) != ($8 | 0)) {
          break label$155
         }
         $7 = dlrealloc($6 | 0, $8 << 2 | 0 | 0) | 0;
         if ($7) {
          break label$159
         }
         dlfree($6 | 0);
         break label$155;
        }
        $3 = 0;
        $7 = dlrealloc($6 | 0, 0 | 0) | 0;
        if (!$7) {
         break label$155
        }
       }
       HEAP32[($0 + 8 | 0) >> 2] = $8;
       HEAP32[$0 >> 2] = $7;
      }
      $6 = ($2 >>> 18 | 0) & 63 | 0 | 128 | 0;
      label$161 : {
       $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
       $8 = 32 - $3 | 0;
       if ($8 >>> 0 < 9 >>> 0) {
        break label$161
       }
       HEAP32[($0 + 16 | 0) >> 2] = $3 + 8 | 0;
       HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $6 | 0;
       $3 = 1;
       break label$155;
      }
      label$162 : {
       if (!$3) {
        break label$162
       }
       $9 = $3 + -24 | 0;
       HEAP32[($0 + 16 | 0) >> 2] = $9;
       $3 = 1;
       $10 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       HEAP32[($0 + 12 | 0) >> 2] = $10 + 1 | 0;
       $2316 = $7 + ($10 << 2 | 0) | 0;
       $7 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $8 | 0 | ($6 >>> $9 | 0) | 0;
       HEAP32[$2316 >> 2] = $7 << 24 | 0 | (($7 << 8 | 0) & 16711680 | 0) | 0 | (($7 >>> 8 | 0) & 65280 | 0 | ($7 >>> 24 | 0) | 0) | 0;
       HEAP32[($0 + 4 | 0) >> 2] = $6;
       break label$155;
      }
      $3 = 1;
      $8 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $8 + 1 | 0;
      (wasm2js_i32$0 = $7 + ($8 << 2 | 0) | 0, wasm2js_i32$1 = (__wasm_rotl_i32($6 | 0, 24 | 0) | 0) & -16711936 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     }
     $3 = $4 & $3 | 0;
     $4 = HEAP32[$0 >> 2] | 0;
     if (!$4) {
      break label$153
     }
     label$163 : {
      label$164 : {
       $6 = HEAP32[($0 + 8 | 0) >> 2] | 0;
       $5 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       if ($6 >>> 0 <= ($5 + 8 | 0) >>> 0) {
        break label$164
       }
       $7 = $4;
       break label$163;
      }
      label$165 : {
       $7 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $5 | 0;
       if ($7 >>> 0 > $6 >>> 0) {
        break label$165
       }
       $7 = $4;
       break label$163;
      }
      $5 = 0;
      label$166 : {
       label$167 : {
        $6 = ($7 - $6 | 0) & 1023 | 0;
        $6 = ($6 ? 1024 - $6 | 0 : 0) + $7 | 0;
        if (!$6) {
         break label$167
        }
        if (($6 & 1073741823 | 0 | 0) != ($6 | 0)) {
         break label$153
        }
        $7 = dlrealloc($4 | 0, $6 << 2 | 0 | 0) | 0;
        if ($7) {
         break label$166
        }
        dlfree($4 | 0);
        break label$153;
       }
       $5 = 0;
       $7 = dlrealloc($4 | 0, 0 | 0) | 0;
       if (!$7) {
        break label$153
       }
      }
      HEAP32[($0 + 8 | 0) >> 2] = $6;
      HEAP32[$0 >> 2] = $7;
     }
     $6 = ($2 >>> 12 | 0) & 63 | 0 | 128 | 0;
     label$168 : {
      $4 = HEAP32[($0 + 16 | 0) >> 2] | 0;
      $8 = 32 - $4 | 0;
      if ($8 >>> 0 < 9 >>> 0) {
       break label$168
      }
      HEAP32[($0 + 16 | 0) >> 2] = $4 + 8 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $6 | 0;
      $5 = 1;
      break label$153;
     }
     label$169 : {
      if (!$4) {
       break label$169
      }
      $4 = $4 + -24 | 0;
      HEAP32[($0 + 16 | 0) >> 2] = $4;
      $5 = 1;
      $9 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $9 + 1 | 0;
      $4 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $8 | 0 | ($6 >>> $4 | 0) | 0;
      HEAP32[($7 + ($9 << 2 | 0) | 0) >> 2] = $4 << 24 | 0 | (($4 << 8 | 0) & 16711680 | 0) | 0 | (($4 >>> 8 | 0) & 65280 | 0 | ($4 >>> 24 | 0) | 0) | 0;
      HEAP32[($0 + 4 | 0) >> 2] = $6;
      break label$153;
     }
     $5 = 1;
     $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     HEAP32[($0 + 12 | 0) >> 2] = $4 + 1 | 0;
     (wasm2js_i32$0 = $7 + ($4 << 2 | 0) | 0, wasm2js_i32$1 = (__wasm_rotl_i32($6 | 0, 24 | 0) | 0) & -16711936 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    }
    $6 = 0;
    label$170 : {
     $4 = HEAP32[$0 >> 2] | 0;
     if ($4) {
      break label$170
     }
     return 0 & 0 | 0 | 0;
    }
    $5 = $3 & $5 | 0;
    label$171 : {
     label$172 : {
      label$173 : {
       $7 = HEAP32[($0 + 8 | 0) >> 2] | 0;
       $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       if ($7 >>> 0 <= ($3 + 8 | 0) >>> 0) {
        break label$173
       }
       $7 = $4;
       break label$172;
      }
      label$174 : {
       $8 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $3 | 0;
       if ($8 >>> 0 > $7 >>> 0) {
        break label$174
       }
       $7 = $4;
       break label$172;
      }
      $3 = 0;
      label$175 : {
       label$176 : {
        $7 = ($8 - $7 | 0) & 1023 | 0;
        $8 = ($7 ? 1024 - $7 | 0 : 0) + $8 | 0;
        if (!$8) {
         break label$176
        }
        if (($8 & 1073741823 | 0 | 0) != ($8 | 0)) {
         break label$171
        }
        $7 = dlrealloc($4 | 0, $8 << 2 | 0 | 0) | 0;
        if ($7) {
         break label$175
        }
        dlfree($4 | 0);
        break label$171;
       }
       $3 = 0;
       $7 = dlrealloc($4 | 0, 0 | 0) | 0;
       if (!$7) {
        break label$171
       }
      }
      HEAP32[($0 + 8 | 0) >> 2] = $8;
      HEAP32[$0 >> 2] = $7;
     }
     $4 = ($2 >>> 6 | 0) & 63 | 0 | 128 | 0;
     label$177 : {
      $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
      $8 = 32 - $3 | 0;
      if ($8 >>> 0 < 9 >>> 0) {
       break label$177
      }
      HEAP32[($0 + 16 | 0) >> 2] = $3 + 8 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $4 | 0;
      $3 = 1;
      break label$171;
     }
     label$178 : {
      if (!$3) {
       break label$178
      }
      $9 = $3 + -24 | 0;
      HEAP32[($0 + 16 | 0) >> 2] = $9;
      $3 = 1;
      $10 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $10 + 1 | 0;
      $2566 = $7 + ($10 << 2 | 0) | 0;
      $7 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $8 | 0 | ($4 >>> $9 | 0) | 0;
      HEAP32[$2566 >> 2] = $7 << 24 | 0 | (($7 << 8 | 0) & 16711680 | 0) | 0 | (($7 >>> 8 | 0) & 65280 | 0 | ($7 >>> 24 | 0) | 0) | 0;
      HEAP32[($0 + 4 | 0) >> 2] = $4;
      break label$171;
     }
     $3 = 1;
     $8 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     HEAP32[($0 + 12 | 0) >> 2] = $8 + 1 | 0;
     (wasm2js_i32$0 = $7 + ($8 << 2 | 0) | 0, wasm2js_i32$1 = (__wasm_rotl_i32($4 | 0, 24 | 0) | 0) & -16711936 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    }
    $3 = $5 & $3 | 0;
    label$179 : {
     $4 = HEAP32[$0 >> 2] | 0;
     if (!$4) {
      break label$179
     }
     label$180 : {
      label$181 : {
       $5 = HEAP32[($0 + 8 | 0) >> 2] | 0;
       $6 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       if ($5 >>> 0 <= ($6 + 8 | 0) >>> 0) {
        break label$181
       }
       $5 = $4;
       break label$180;
      }
      label$182 : {
       $7 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $6 | 0;
       if ($7 >>> 0 > $5 >>> 0) {
        break label$182
       }
       $5 = $4;
       break label$180;
      }
      $6 = 0;
      label$183 : {
       label$184 : {
        $5 = ($7 - $5 | 0) & 1023 | 0;
        $7 = ($5 ? 1024 - $5 | 0 : 0) + $7 | 0;
        if (!$7) {
         break label$184
        }
        if (($7 & 1073741823 | 0 | 0) != ($7 | 0)) {
         break label$179
        }
        $5 = dlrealloc($4 | 0, $7 << 2 | 0 | 0) | 0;
        if ($5) {
         break label$183
        }
        dlfree($4 | 0);
        return 0 & $3 | 0 | 0;
       }
       $6 = 0;
       $5 = dlrealloc($4 | 0, 0 | 0) | 0;
       if (!$5) {
        break label$179
       }
      }
      HEAP32[($0 + 8 | 0) >> 2] = $7;
      HEAP32[$0 >> 2] = $5;
     }
     $4 = $2 & 63 | 0 | 128 | 0;
     label$185 : {
      $2 = HEAP32[($0 + 16 | 0) >> 2] | 0;
      $6 = 32 - $2 | 0;
      if ($6 >>> 0 < 9 >>> 0) {
       break label$185
      }
      HEAP32[($0 + 16 | 0) >> 2] = $2 + 8 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $4 | 0;
      return 1 & $3 | 0 | 0;
     }
     label$186 : {
      if (!$2) {
       break label$186
      }
      $2 = $2 + -24 | 0;
      HEAP32[($0 + 16 | 0) >> 2] = $2;
      $7 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $7 + 1 | 0;
      $2 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $6 | 0 | ($4 >>> $2 | 0) | 0;
      HEAP32[($5 + ($7 << 2 | 0) | 0) >> 2] = $2 << 24 | 0 | (($2 << 8 | 0) & 16711680 | 0) | 0 | (($2 >>> 8 | 0) & 65280 | 0 | ($2 >>> 24 | 0) | 0) | 0;
      HEAP32[($0 + 4 | 0) >> 2] = $4;
      return 1 & $3 | 0 | 0;
     }
     $6 = 1;
     $2 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     HEAP32[($0 + 12 | 0) >> 2] = $2 + 1 | 0;
     (wasm2js_i32$0 = $5 + ($2 << 2 | 0) | 0, wasm2js_i32$1 = (__wasm_rotl_i32($4 | 0, 24 | 0) | 0) & -16711936 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    }
    return $6 & $3 | 0 | 0;
   }
   label$187 : {
    label$188 : {
     if (!$0) {
      break label$188
     }
     $5 = 0;
     $2 = 0;
     $3 = 0;
     label$189 : {
      $4 = HEAP32[$0 >> 2] | 0;
      if (!$4) {
       break label$189
      }
      label$190 : {
       label$191 : {
        label$192 : {
         $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
         $2 = HEAP32[($0 + 12 | 0) >> 2] | 0;
         if ($3 >>> 0 <= ($2 + 8 | 0) >>> 0) {
          break label$192
         }
         $3 = $4;
         break label$191;
        }
        label$193 : {
         $6 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $2 | 0;
         if ($6 >>> 0 > $3 >>> 0) {
          break label$193
         }
         $3 = $4;
         break label$191;
        }
        $2 = 0;
        label$194 : {
         label$195 : {
          $3 = ($6 - $3 | 0) & 1023 | 0;
          $6 = ($3 ? 1024 - $3 | 0 : 0) + $6 | 0;
          if (!$6) {
           break label$195
          }
          if (($6 & 1073741823 | 0 | 0) != ($6 | 0)) {
           break label$190
          }
          $3 = dlrealloc($4 | 0, $6 << 2 | 0 | 0) | 0;
          if ($3) {
           break label$194
          }
          dlfree($4 | 0);
          break label$190;
         }
         $2 = 0;
         $3 = dlrealloc($4 | 0, 0 | 0) | 0;
         if (!$3) {
          break label$190
         }
        }
        HEAP32[($0 + 8 | 0) >> 2] = $6;
        HEAP32[$0 >> 2] = $3;
       }
       label$196 : {
        $2 = HEAP32[($0 + 16 | 0) >> 2] | 0;
        $4 = 32 - $2 | 0;
        if ($4 >>> 0 < 9 >>> 0) {
         break label$196
        }
        HEAP32[($0 + 16 | 0) >> 2] = $2 + 8 | 0;
        HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | 254 | 0;
        $2 = 1;
        break label$190;
       }
       label$197 : {
        if (!$2) {
         break label$197
        }
        $6 = $2 + -24 | 0;
        HEAP32[($0 + 16 | 0) >> 2] = $6;
        $2 = 1;
        $7 = HEAP32[($0 + 12 | 0) >> 2] | 0;
        HEAP32[($0 + 12 | 0) >> 2] = $7 + 1 | 0;
        $2818 = $3 + ($7 << 2 | 0) | 0;
        $3 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $4 | 0 | (254 >>> $6 | 0) | 0;
        HEAP32[$2818 >> 2] = $3 << 24 | 0 | (($3 << 8 | 0) & 16711680 | 0) | 0 | (($3 >>> 8 | 0) & 65280 | 0 | ($3 >>> 24 | 0) | 0) | 0;
        HEAP32[($0 + 4 | 0) >> 2] = 254;
        break label$190;
       }
       $2 = 1;
       $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       HEAP32[($0 + 12 | 0) >> 2] = $4 + 1 | 0;
       HEAP32[($3 + ($4 << 2 | 0) | 0) >> 2] = -33554432;
      }
      label$198 : {
       $4 = HEAP32[$0 >> 2] | 0;
       if ($4) {
        break label$198
       }
       $3 = 0;
       break label$189;
      }
      label$199 : {
       label$200 : {
        $6 = HEAP32[($0 + 8 | 0) >> 2] | 0;
        $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
        if ($6 >>> 0 <= ($3 + 8 | 0) >>> 0) {
         break label$200
        }
        $6 = $4;
        break label$199;
       }
       label$201 : {
        $7 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $3 | 0;
        if ($7 >>> 0 > $6 >>> 0) {
         break label$201
        }
        $6 = $4;
        break label$199;
       }
       $3 = 0;
       label$202 : {
        label$203 : {
         $6 = ($7 - $6 | 0) & 1023 | 0;
         $7 = ($6 ? 1024 - $6 | 0 : 0) + $7 | 0;
         if (!$7) {
          break label$203
         }
         if (($7 & 1073741823 | 0 | 0) != ($7 | 0)) {
          break label$189
         }
         $6 = dlrealloc($4 | 0, $7 << 2 | 0 | 0) | 0;
         if ($6) {
          break label$202
         }
         dlfree($4 | 0);
         break label$189;
        }
        $3 = 0;
        $6 = dlrealloc($4 | 0, 0 | 0) | 0;
        if (!$6) {
         break label$189
        }
       }
       HEAP32[($0 + 8 | 0) >> 2] = $7;
       HEAP32[$0 >> 2] = $6;
      }
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$1 = $1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = 30;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $36 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       $36 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      $4 = $36 | 128 | 0;
      label$204 : {
       $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
       $7 = 32 - $3 | 0;
       if ($7 >>> 0 < 9 >>> 0) {
        break label$204
       }
       HEAP32[($0 + 16 | 0) >> 2] = $3 + 8 | 0;
       HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $4 | 0;
       $3 = 1;
       break label$189;
      }
      label$205 : {
       if (!$3) {
        break label$205
       }
       $8 = $3 + -24 | 0;
       HEAP32[($0 + 16 | 0) >> 2] = $8;
       $3 = 1;
       $9 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       HEAP32[($0 + 12 | 0) >> 2] = $9 + 1 | 0;
       $2934 = $6 + ($9 << 2 | 0) | 0;
       $6 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $7 | 0 | ($4 >>> $8 | 0) | 0;
       HEAP32[$2934 >> 2] = $6 << 24 | 0 | (($6 << 8 | 0) & 16711680 | 0) | 0 | (($6 >>> 8 | 0) & 65280 | 0 | ($6 >>> 24 | 0) | 0) | 0;
       HEAP32[($0 + 4 | 0) >> 2] = $4;
       break label$189;
      }
      $3 = 1;
      $7 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $7 + 1 | 0;
      HEAP32[($6 + ($7 << 2 | 0) | 0) >> 2] = $4 << 24 | 0 | (($4 << 8 | 0) & 16711680 | 0) | 0 | (($4 >>> 8 | 0) & 65280 | 0 | ($4 >>> 24 | 0) | 0) | 0;
     }
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $1$hi;
     $4 = $1;
     label$206 : {
      label$207 : {
       $6 = HEAP32[$0 >> 2] | 0;
       if ($6) {
        break label$207
       }
       $2 = 0;
       break label$206;
      }
      $3 = $3 & $2 | 0;
      label$208 : {
       label$209 : {
        label$210 : {
         $7 = HEAP32[($0 + 8 | 0) >> 2] | 0;
         $2 = HEAP32[($0 + 12 | 0) >> 2] | 0;
         if ($7 >>> 0 <= ($2 + 8 | 0) >>> 0) {
          break label$210
         }
         $7 = $6;
         break label$209;
        }
        label$211 : {
         $8 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $2 | 0;
         if ($8 >>> 0 > $7 >>> 0) {
          break label$211
         }
         $7 = $6;
         break label$209;
        }
        $2 = 0;
        label$212 : {
         label$213 : {
          $7 = ($8 - $7 | 0) & 1023 | 0;
          $8 = ($7 ? 1024 - $7 | 0 : 0) + $8 | 0;
          if (!$8) {
           break label$213
          }
          if (($8 & 1073741823 | 0 | 0) != ($8 | 0)) {
           break label$208
          }
          $7 = dlrealloc($6 | 0, $8 << 2 | 0 | 0) | 0;
          if ($7) {
           break label$212
          }
          dlfree($6 | 0);
          break label$208;
         }
         $2 = 0;
         $7 = dlrealloc($6 | 0, 0 | 0) | 0;
         if (!$7) {
          break label$208
         }
        }
        HEAP32[($0 + 8 | 0) >> 2] = $8;
        HEAP32[$0 >> 2] = $7;
       }
       $6 = ($4 >>> 24 | 0) & 63 | 0 | 128 | 0;
       label$214 : {
        $2 = HEAP32[($0 + 16 | 0) >> 2] | 0;
        $8 = 32 - $2 | 0;
        if ($8 >>> 0 < 9 >>> 0) {
         break label$214
        }
        HEAP32[($0 + 16 | 0) >> 2] = $2 + 8 | 0;
        HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $6 | 0;
        $2 = 1;
        break label$208;
       }
       label$215 : {
        if (!$2) {
         break label$215
        }
        $9 = $2 + -24 | 0;
        HEAP32[($0 + 16 | 0) >> 2] = $9;
        $2 = 1;
        $10 = HEAP32[($0 + 12 | 0) >> 2] | 0;
        HEAP32[($0 + 12 | 0) >> 2] = $10 + 1 | 0;
        $3070 = $7 + ($10 << 2 | 0) | 0;
        $7 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $8 | 0 | ($6 >>> $9 | 0) | 0;
        HEAP32[$3070 >> 2] = $7 << 24 | 0 | (($7 << 8 | 0) & 16711680 | 0) | 0 | (($7 >>> 8 | 0) & 65280 | 0 | ($7 >>> 24 | 0) | 0) | 0;
        HEAP32[($0 + 4 | 0) >> 2] = $6;
        break label$208;
       }
       $2 = 1;
       $8 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       HEAP32[($0 + 12 | 0) >> 2] = $8 + 1 | 0;
       (wasm2js_i32$0 = $7 + ($8 << 2 | 0) | 0, wasm2js_i32$1 = (__wasm_rotl_i32($6 | 0, 24 | 0) | 0) & -16711936 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      }
      $2 = $3 & $2 | 0;
      $3 = HEAP32[$0 >> 2] | 0;
      if (!$3) {
       break label$206
      }
      label$216 : {
       label$217 : {
        $6 = HEAP32[($0 + 8 | 0) >> 2] | 0;
        $5 = HEAP32[($0 + 12 | 0) >> 2] | 0;
        if ($6 >>> 0 <= ($5 + 8 | 0) >>> 0) {
         break label$217
        }
        $7 = $3;
        break label$216;
       }
       label$218 : {
        $7 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $5 | 0;
        if ($7 >>> 0 > $6 >>> 0) {
         break label$218
        }
        $7 = $3;
        break label$216;
       }
       $5 = 0;
       label$219 : {
        label$220 : {
         $6 = ($7 - $6 | 0) & 1023 | 0;
         $6 = ($6 ? 1024 - $6 | 0 : 0) + $7 | 0;
         if (!$6) {
          break label$220
         }
         if (($6 & 1073741823 | 0 | 0) != ($6 | 0)) {
          break label$206
         }
         $7 = dlrealloc($3 | 0, $6 << 2 | 0 | 0) | 0;
         if ($7) {
          break label$219
         }
         dlfree($3 | 0);
         break label$206;
        }
        $5 = 0;
        $7 = dlrealloc($3 | 0, 0 | 0) | 0;
        if (!$7) {
         break label$206
        }
       }
       HEAP32[($0 + 8 | 0) >> 2] = $6;
       HEAP32[$0 >> 2] = $7;
      }
      $6 = ($4 >>> 18 | 0) & 63 | 0 | 128 | 0;
      label$221 : {
       $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
       $8 = 32 - $3 | 0;
       if ($8 >>> 0 < 9 >>> 0) {
        break label$221
       }
       HEAP32[($0 + 16 | 0) >> 2] = $3 + 8 | 0;
       HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $6 | 0;
       $5 = 1;
       break label$206;
      }
      label$222 : {
       if (!$3) {
        break label$222
       }
       $3 = $3 + -24 | 0;
       HEAP32[($0 + 16 | 0) >> 2] = $3;
       $5 = 1;
       $9 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       HEAP32[($0 + 12 | 0) >> 2] = $9 + 1 | 0;
       $3 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $8 | 0 | ($6 >>> $3 | 0) | 0;
       HEAP32[($7 + ($9 << 2 | 0) | 0) >> 2] = $3 << 24 | 0 | (($3 << 8 | 0) & 16711680 | 0) | 0 | (($3 >>> 8 | 0) & 65280 | 0 | ($3 >>> 24 | 0) | 0) | 0;
       HEAP32[($0 + 4 | 0) >> 2] = $6;
       break label$206;
      }
      $5 = 1;
      $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $3 + 1 | 0;
      (wasm2js_i32$0 = $7 + ($3 << 2 | 0) | 0, wasm2js_i32$1 = (__wasm_rotl_i32($6 | 0, 24 | 0) | 0) & -16711936 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     }
     $3 = HEAP32[$0 >> 2] | 0;
     if (!$3) {
      break label$188
     }
     $5 = $2 & $5 | 0;
     label$223 : {
      label$224 : {
       label$225 : {
        $6 = HEAP32[($0 + 8 | 0) >> 2] | 0;
        $2 = HEAP32[($0 + 12 | 0) >> 2] | 0;
        if ($6 >>> 0 <= ($2 + 8 | 0) >>> 0) {
         break label$225
        }
        $6 = $3;
        break label$224;
       }
       label$226 : {
        $7 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $2 | 0;
        if ($7 >>> 0 > $6 >>> 0) {
         break label$226
        }
        $6 = $3;
        break label$224;
       }
       $2 = 0;
       label$227 : {
        label$228 : {
         $6 = ($7 - $6 | 0) & 1023 | 0;
         $7 = ($6 ? 1024 - $6 | 0 : 0) + $7 | 0;
         if (!$7) {
          break label$228
         }
         if (($7 & 1073741823 | 0 | 0) != ($7 | 0)) {
          break label$223
         }
         $6 = dlrealloc($3 | 0, $7 << 2 | 0 | 0) | 0;
         if ($6) {
          break label$227
         }
         dlfree($3 | 0);
         break label$223;
        }
        $2 = 0;
        $6 = dlrealloc($3 | 0, 0 | 0) | 0;
        if (!$6) {
         break label$223
        }
       }
       HEAP32[($0 + 8 | 0) >> 2] = $7;
       HEAP32[$0 >> 2] = $6;
      }
      $3 = ($4 >>> 12 | 0) & 63 | 0 | 128 | 0;
      label$229 : {
       $2 = HEAP32[($0 + 16 | 0) >> 2] | 0;
       $7 = 32 - $2 | 0;
       if ($7 >>> 0 < 9 >>> 0) {
        break label$229
       }
       HEAP32[($0 + 16 | 0) >> 2] = $2 + 8 | 0;
       HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $3 | 0;
       $2 = 1;
       break label$223;
      }
      label$230 : {
       if (!$2) {
        break label$230
       }
       $8 = $2 + -24 | 0;
       HEAP32[($0 + 16 | 0) >> 2] = $8;
       $2 = 1;
       $9 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       HEAP32[($0 + 12 | 0) >> 2] = $9 + 1 | 0;
       $3320 = $6 + ($9 << 2 | 0) | 0;
       $6 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $7 | 0 | ($3 >>> $8 | 0) | 0;
       HEAP32[$3320 >> 2] = $6 << 24 | 0 | (($6 << 8 | 0) & 16711680 | 0) | 0 | (($6 >>> 8 | 0) & 65280 | 0 | ($6 >>> 24 | 0) | 0) | 0;
       HEAP32[($0 + 4 | 0) >> 2] = $3;
       break label$223;
      }
      $2 = 1;
      $7 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $7 + 1 | 0;
      (wasm2js_i32$0 = $6 + ($7 << 2 | 0) | 0, wasm2js_i32$1 = (__wasm_rotl_i32($3 | 0, 24 | 0) | 0) & -16711936 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     }
     $5 = $5 & $2 | 0;
     $2 = 0;
     $3 = 0;
     label$231 : {
      $6 = HEAP32[$0 >> 2] | 0;
      if (!$6) {
       break label$231
      }
      label$232 : {
       label$233 : {
        $7 = HEAP32[($0 + 8 | 0) >> 2] | 0;
        $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
        if ($7 >>> 0 <= ($3 + 8 | 0) >>> 0) {
         break label$233
        }
        $7 = $6;
        break label$232;
       }
       label$234 : {
        $8 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $3 | 0;
        if ($8 >>> 0 > $7 >>> 0) {
         break label$234
        }
        $7 = $6;
        break label$232;
       }
       $3 = 0;
       label$235 : {
        label$236 : {
         $7 = ($8 - $7 | 0) & 1023 | 0;
         $8 = ($7 ? 1024 - $7 | 0 : 0) + $8 | 0;
         if (!$8) {
          break label$236
         }
         if (($8 & 1073741823 | 0 | 0) != ($8 | 0)) {
          break label$231
         }
         $7 = dlrealloc($6 | 0, $8 << 2 | 0 | 0) | 0;
         if ($7) {
          break label$235
         }
         dlfree($6 | 0);
         break label$231;
        }
        $3 = 0;
        $7 = dlrealloc($6 | 0, 0 | 0) | 0;
        if (!$7) {
         break label$231
        }
       }
       HEAP32[($0 + 8 | 0) >> 2] = $8;
       HEAP32[$0 >> 2] = $7;
      }
      $6 = ($4 >>> 6 | 0) & 63 | 0 | 128 | 0;
      label$237 : {
       $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
       $8 = 32 - $3 | 0;
       if ($8 >>> 0 < 9 >>> 0) {
        break label$237
       }
       HEAP32[($0 + 16 | 0) >> 2] = $3 + 8 | 0;
       HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $6 | 0;
       $3 = 1;
       break label$231;
      }
      label$238 : {
       if (!$3) {
        break label$238
       }
       $9 = $3 + -24 | 0;
       HEAP32[($0 + 16 | 0) >> 2] = $9;
       $3 = 1;
       $10 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       HEAP32[($0 + 12 | 0) >> 2] = $10 + 1 | 0;
       $3445 = $7 + ($10 << 2 | 0) | 0;
       $7 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $8 | 0 | ($6 >>> $9 | 0) | 0;
       HEAP32[$3445 >> 2] = $7 << 24 | 0 | (($7 << 8 | 0) & 16711680 | 0) | 0 | (($7 >>> 8 | 0) & 65280 | 0 | ($7 >>> 24 | 0) | 0) | 0;
       HEAP32[($0 + 4 | 0) >> 2] = $6;
       break label$231;
      }
      $3 = 1;
      $8 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $8 + 1 | 0;
      (wasm2js_i32$0 = $7 + ($8 << 2 | 0) | 0, wasm2js_i32$1 = (__wasm_rotl_i32($6 | 0, 24 | 0) | 0) & -16711936 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     }
     $3 = $5 & $3 | 0;
     $5 = HEAP32[$0 >> 2] | 0;
     if (!$5) {
      break label$187
     }
     label$239 : {
      label$240 : {
       $6 = HEAP32[($0 + 8 | 0) >> 2] | 0;
       $2 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       if ($6 >>> 0 <= ($2 + 8 | 0) >>> 0) {
        break label$240
       }
       $6 = $5;
       break label$239;
      }
      label$241 : {
       $7 = (((HEAP32[($0 + 16 | 0) >> 2] | 0) + 39 | 0) >>> 5 | 0) + $2 | 0;
       if ($7 >>> 0 > $6 >>> 0) {
        break label$241
       }
       $6 = $5;
       break label$239;
      }
      $2 = 0;
      label$242 : {
       label$243 : {
        $6 = ($7 - $6 | 0) & 1023 | 0;
        $7 = ($6 ? 1024 - $6 | 0 : 0) + $7 | 0;
        if (!$7) {
         break label$243
        }
        if (($7 & 1073741823 | 0 | 0) != ($7 | 0)) {
         break label$187
        }
        $6 = dlrealloc($5 | 0, $7 << 2 | 0 | 0) | 0;
        if ($6) {
         break label$242
        }
        dlfree($5 | 0);
        break label$187;
       }
       $2 = 0;
       $6 = dlrealloc($5 | 0, 0 | 0) | 0;
       if (!$6) {
        break label$187
       }
      }
      HEAP32[($0 + 8 | 0) >> 2] = $7;
      HEAP32[$0 >> 2] = $6;
     }
     $4 = $4 & 63 | 0 | 128 | 0;
     label$244 : {
      $2 = HEAP32[($0 + 16 | 0) >> 2] | 0;
      $5 = 32 - $2 | 0;
      if ($5 >>> 0 < 9 >>> 0) {
       break label$244
      }
      HEAP32[($0 + 16 | 0) >> 2] = $2 + 8 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 8 | 0 | $4 | 0;
      $2 = 1;
      break label$187;
     }
     label$245 : {
      if (!$2) {
       break label$245
      }
      $7 = $2 + -24 | 0;
      HEAP32[($0 + 16 | 0) >> 2] = $7;
      $2 = 1;
      $8 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $8 + 1 | 0;
      $5 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $5 | 0 | ($4 >>> $7 | 0) | 0;
      HEAP32[($6 + ($8 << 2 | 0) | 0) >> 2] = $5 << 24 | 0 | (($5 << 8 | 0) & 16711680 | 0) | 0 | (($5 >>> 8 | 0) & 65280 | 0 | ($5 >>> 24 | 0) | 0) | 0;
      HEAP32[($0 + 4 | 0) >> 2] = $4;
      break label$187;
     }
     $2 = 1;
     $5 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     HEAP32[($0 + 12 | 0) >> 2] = $5 + 1 | 0;
     (wasm2js_i32$0 = $6 + ($5 << 2 | 0) | 0, wasm2js_i32$1 = (__wasm_rotl_i32($4 | 0, 24 | 0) | 0) & -16711936 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     break label$187;
    }
    $3 = 0;
    $2 = 0;
   }
   $2 = $2 & $3 | 0;
  }
  return $2 | 0;
 }
 
 function FLAC__bitwriter_zero_pad_to_byte_boundary($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   $1 = (HEAP32[($0 + 16 | 0) >> 2] | 0) & 7 | 0;
   if ($1) {
    break label$1
   }
   return 1 | 0;
  }
  return FLAC__bitwriter_write_zeroes($0 | 0, 8 - $1 | 0 | 0) | 0 | 0;
 }
 
 function memmove($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0;
  label$1 : {
   if (($0 | 0) == ($1 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (($1 + $2 | 0) >>> 0 <= $0 >>> 0) {
      break label$3
     }
     $3 = $0 + $2 | 0;
     if ($3 >>> 0 > $1 >>> 0) {
      break label$2
     }
    }
    return memcpy($0 | 0, $1 | 0, $2 | 0) | 0 | 0;
   }
   $4 = ($1 ^ $0 | 0) & 3 | 0;
   label$4 : {
    label$5 : {
     label$6 : {
      if ($0 >>> 0 >= $1 >>> 0) {
       break label$6
      }
      label$7 : {
       if (!$4) {
        break label$7
       }
       $4 = $0;
       break label$4;
      }
      label$8 : {
       if ($0 & 3 | 0) {
        break label$8
       }
       $4 = $0;
       break label$5;
      }
      $4 = $0;
      label$9 : while (1) {
       if (!$2) {
        break label$1
       }
       HEAP8[$4 >> 0] = HEAPU8[$1 >> 0] | 0;
       $1 = $1 + 1 | 0;
       $2 = $2 + -1 | 0;
       $4 = $4 + 1 | 0;
       if (!($4 & 3 | 0)) {
        break label$5
       }
       continue label$9;
      };
     }
     label$10 : {
      if ($4) {
       break label$10
      }
      label$11 : {
       if (!($3 & 3 | 0)) {
        break label$11
       }
       label$12 : while (1) {
        if (!$2) {
         break label$1
        }
        $2 = $2 + -1 | 0;
        $4 = $0 + $2 | 0;
        HEAP8[$4 >> 0] = HEAPU8[($1 + $2 | 0) >> 0] | 0;
        if ($4 & 3 | 0) {
         continue label$12
        }
        break label$12;
       };
      }
      if ($2 >>> 0 <= 3 >>> 0) {
       break label$10
      }
      label$13 : while (1) {
       $2 = $2 + -4 | 0;
       HEAP32[($0 + $2 | 0) >> 2] = HEAP32[($1 + $2 | 0) >> 2] | 0;
       if ($2 >>> 0 > 3 >>> 0) {
        continue label$13
       }
       break label$13;
      };
     }
     if (!$2) {
      break label$1
     }
     label$14 : while (1) {
      $2 = $2 + -1 | 0;
      HEAP8[($0 + $2 | 0) >> 0] = HEAPU8[($1 + $2 | 0) >> 0] | 0;
      if ($2) {
       continue label$14
      }
      break label$1;
     };
    }
    if ($2 >>> 0 <= 3 >>> 0) {
     break label$4
    }
    label$15 : while (1) {
     HEAP32[$4 >> 2] = HEAP32[$1 >> 2] | 0;
     $1 = $1 + 4 | 0;
     $4 = $4 + 4 | 0;
     $2 = $2 + -4 | 0;
     if ($2 >>> 0 > 3 >>> 0) {
      continue label$15
     }
     break label$15;
    };
   }
   if (!$2) {
    break label$1
   }
   label$16 : while (1) {
    HEAP8[$4 >> 0] = HEAPU8[$1 >> 0] | 0;
    $4 = $4 + 1 | 0;
    $1 = $1 + 1 | 0;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue label$16
    }
    break label$16;
   };
  }
  return $0 | 0;
 }
 
 function ogg_page_serialno($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = HEAP32[$0 >> 2] | 0;
  return HEAPU8[($1 + 14 | 0) >> 0] | 0 | ((HEAPU8[($1 + 15 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($1 + 16 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($1 + 17 | 0) >> 0] | 0) << 24 | 0) | 0) | 0 | 0;
 }
 
 function ogg_stream_init($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = -1;
  label$1 : {
   if (!$0) {
    break label$1
   }
   memset($0 + 8 | 0 | 0, 0 | 0, 352 | 0) | 0;
   HEAP32[($0 + 24 | 0) >> 2] = 1024;
   HEAP32[($0 + 4 | 0) >> 2] = 16384;
   $3 = dlmalloc(16384 | 0) | 0;
   HEAP32[$0 >> 2] = $3;
   $2 = dlmalloc(4096 | 0) | 0;
   HEAP32[($0 + 16 | 0) >> 2] = $2;
   $4 = dlmalloc(8192 | 0) | 0;
   HEAP32[($0 + 20 | 0) >> 2] = $4;
   label$2 : {
    label$3 : {
     if (!$3) {
      break label$3
     }
     label$4 : {
      if (!$4) {
       break label$4
      }
      if ($2) {
       break label$2
      }
     }
     dlfree($3 | 0);
     $2 = HEAP32[($0 + 16 | 0) >> 2] | 0;
    }
    label$5 : {
     if (!$2) {
      break label$5
     }
     dlfree($2 | 0);
    }
    label$6 : {
     $2 = HEAP32[($0 + 20 | 0) >> 2] | 0;
     if (!$2) {
      break label$6
     }
     dlfree($2 | 0);
    }
    memset($0 | 0, 0 | 0, 360 | 0) | 0;
    return -1 | 0;
   }
   HEAP32[($0 + 336 | 0) >> 2] = $1;
   $2 = 0;
  }
  return $2 | 0;
 }
 
 function ogg_stream_clear($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   label$2 : {
    $1 = HEAP32[$0 >> 2] | 0;
    if (!$1) {
     break label$2
    }
    dlfree($1 | 0);
   }
   label$3 : {
    $1 = HEAP32[($0 + 16 | 0) >> 2] | 0;
    if (!$1) {
     break label$3
    }
    dlfree($1 | 0);
   }
   label$4 : {
    $1 = HEAP32[($0 + 20 | 0) >> 2] | 0;
    if (!$1) {
     break label$4
    }
    dlfree($1 | 0);
   }
   memset($0 | 0, 0 | 0, 360 | 0) | 0;
  }
  return 0 | 0;
 }
 
 function ogg_page_checksum_set($0) {
  $0 = $0 | 0;
  var $1 = 0, $4 = 0, $2 = 0, $3 = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   $1 = 0;
   HEAP8[((HEAP32[$0 >> 2] | 0) + 22 | 0) >> 0] = 0;
   HEAP8[((HEAP32[$0 >> 2] | 0) + 23 | 0) >> 0] = 0;
   HEAP8[((HEAP32[$0 >> 2] | 0) + 24 | 0) >> 0] = 0;
   HEAP8[((HEAP32[$0 >> 2] | 0) + 25 | 0) >> 0] = 0;
   label$2 : {
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    if (($2 | 0) < (1 | 0)) {
     break label$2
    }
    $3 = HEAP32[$0 >> 2] | 0;
    $4 = 0;
    $1 = 0;
    label$3 : while (1) {
     $1 = (HEAP32[(((($1 >>> 24 | 0) ^ (HEAPU8[($3 + $4 | 0) >> 0] | 0) | 0) << 2 | 0) + 5376 | 0) >> 2] | 0) ^ ($1 << 8 | 0) | 0;
     $4 = $4 + 1 | 0;
     if (($4 | 0) != ($2 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   label$4 : {
    $2 = HEAP32[($0 + 12 | 0) >> 2] | 0;
    if (($2 | 0) < (1 | 0)) {
     break label$4
    }
    $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    $4 = 0;
    label$5 : while (1) {
     $1 = (HEAP32[(((($1 >>> 24 | 0) ^ (HEAPU8[($3 + $4 | 0) >> 0] | 0) | 0) << 2 | 0) + 5376 | 0) >> 2] | 0) ^ ($1 << 8 | 0) | 0;
     $4 = $4 + 1 | 0;
     if (($4 | 0) != ($2 | 0)) {
      continue label$5
     }
     break label$5;
    };
   }
   HEAP8[((HEAP32[$0 >> 2] | 0) + 22 | 0) >> 0] = $1;
   HEAP8[((HEAP32[$0 >> 2] | 0) + 23 | 0) >> 0] = $1 >>> 8 | 0;
   HEAP8[((HEAP32[$0 >> 2] | 0) + 24 | 0) >> 0] = $1 >>> 16 | 0;
   HEAP8[((HEAP32[$0 >> 2] | 0) + 25 | 0) >> 0] = $1 >>> 24 | 0;
  }
 }
 
 function ogg_stream_iovecin($0, $1, $2, $3, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var $7 = 0, $8 = 0, $9 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5 = 0, $6 = 0, i64toi32_i32$2 = 0, $10 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $136 = 0, $180 = 0, $217 = 0;
  $5 = -1;
  label$1 : {
   if (!$0) {
    break label$1
   }
   $6 = HEAP32[$0 >> 2] | 0;
   if (!$6) {
    break label$1
   }
   label$2 : {
    if ($1) {
     break label$2
    }
    return 0 | 0;
   }
   $7 = 0;
   label$3 : {
    label$4 : {
     if (($2 | 0) >= (1 | 0)) {
      break label$4
     }
     $8 = 0;
     break label$3;
    }
    $8 = 0;
    label$5 : while (1) {
     $9 = HEAP32[(($1 + ($7 << 3 | 0) | 0) + 4 | 0) >> 2] | 0;
     if (($9 | 0) < (0 | 0)) {
      break label$1
     }
     if (($8 | 0) > (2147483647 - $9 | 0 | 0)) {
      break label$1
     }
     $8 = $9 + $8 | 0;
     $7 = $7 + 1 | 0;
     if (($7 | 0) != ($2 | 0)) {
      continue label$5
     }
     break label$5;
    };
   }
   $10 = ($8 | 0) / (255 | 0) | 0;
   label$6 : {
    $7 = HEAP32[($0 + 12 | 0) >> 2] | 0;
    if (!$7) {
     break label$6
    }
    $9 = (HEAP32[($0 + 8 | 0) >> 2] | 0) - $7 | 0;
    HEAP32[($0 + 8 | 0) >> 2] = $9;
    label$7 : {
     if (!$9) {
      break label$7
     }
     memmove($6 | 0, $6 + $7 | 0 | 0, $9 | 0) | 0;
    }
    HEAP32[($0 + 12 | 0) >> 2] = 0;
   }
   label$8 : {
    $7 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    if (($7 - $8 | 0 | 0) > (HEAP32[($0 + 8 | 0) >> 2] | 0 | 0)) {
     break label$8
    }
    label$9 : {
     if (($7 | 0) <= (2147483647 - $8 | 0 | 0)) {
      break label$9
     }
     label$10 : {
      $8 = HEAP32[$0 >> 2] | 0;
      if (!$8) {
       break label$10
      }
      dlfree($8 | 0);
     }
     label$11 : {
      $8 = HEAP32[($0 + 16 | 0) >> 2] | 0;
      if (!$8) {
       break label$11
      }
      dlfree($8 | 0);
     }
     label$12 : {
      $8 = HEAP32[($0 + 20 | 0) >> 2] | 0;
      if (!$8) {
       break label$12
      }
      dlfree($8 | 0);
     }
     memset($0 | 0, 0 | 0, 360 | 0) | 0;
     return -1 | 0;
    }
    label$13 : {
     $7 = $7 + $8 | 0;
     $7 = ($7 | 0) < (2147482623 | 0) ? $7 + 1024 | 0 : $7;
     $9 = dlrealloc(HEAP32[$0 >> 2] | 0 | 0, $7 | 0) | 0;
     if ($9) {
      break label$13
     }
     label$14 : {
      $8 = HEAP32[$0 >> 2] | 0;
      if (!$8) {
       break label$14
      }
      dlfree($8 | 0);
     }
     label$15 : {
      $8 = HEAP32[($0 + 16 | 0) >> 2] | 0;
      if (!$8) {
       break label$15
      }
      dlfree($8 | 0);
     }
     label$16 : {
      $8 = HEAP32[($0 + 20 | 0) >> 2] | 0;
      if (!$8) {
       break label$16
      }
      dlfree($8 | 0);
     }
     memset($0 | 0, 0 | 0, 360 | 0) | 0;
     return -1 | 0;
    }
    HEAP32[$0 >> 2] = $9;
    HEAP32[($0 + 4 | 0) >> 2] = $7;
   }
   $6 = $10 + 1 | 0;
   if (_os_lacing_expand($0 | 0, $6 | 0) | 0) {
    break label$1
   }
   label$17 : {
    if (($2 | 0) < (1 | 0)) {
     break label$17
    }
    $9 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    $7 = 0;
    label$18 : while (1) {
     $136 = (HEAP32[$0 >> 2] | 0) + $9 | 0;
     $9 = $1 + ($7 << 3 | 0) | 0;
     memcpy($136 | 0, HEAP32[$9 >> 2] | 0 | 0, HEAP32[($9 + 4 | 0) >> 2] | 0 | 0) | 0;
     $9 = (HEAP32[($0 + 8 | 0) >> 2] | 0) + (HEAP32[($9 + 4 | 0) >> 2] | 0) | 0;
     HEAP32[($0 + 8 | 0) >> 2] = $9;
     $7 = $7 + 1 | 0;
     if (($7 | 0) != ($2 | 0)) {
      continue label$18
     }
     break label$18;
    };
   }
   $1 = HEAP32[($0 + 28 | 0) >> 2] | 0;
   $2 = HEAP32[($0 + 16 | 0) >> 2] | 0;
   label$19 : {
    label$20 : {
     if (($8 | 0) > (254 | 0)) {
      break label$20
     }
     $5 = HEAP32[($0 + 20 | 0) >> 2] | 0;
     $7 = 0;
     break label$19;
    }
    $5 = HEAP32[($0 + 20 | 0) >> 2] | 0;
    $7 = 0;
    label$21 : while (1) {
     $9 = $1 + $7 | 0;
     HEAP32[($2 + ($9 << 2 | 0) | 0) >> 2] = 255;
     i64toi32_i32$2 = $0;
     i64toi32_i32$0 = HEAP32[($0 + 352 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($0 + 356 | 0) >> 2] | 0;
     $180 = i64toi32_i32$0;
     i64toi32_i32$0 = $5 + ($9 << 3 | 0) | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $180;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $7 = $7 + 1 | 0;
     if (($7 | 0) != ($10 | 0)) {
      continue label$21
     }
     break label$21;
    };
    $7 = $10;
   }
   $7 = $1 + $7 | 0;
   HEAP32[($2 + ($7 << 2 | 0) | 0) >> 2] = $8 - Math_imul($10, 255) | 0;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$0 = $5 + ($7 << 3 | 0) | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $4;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$0 = $0;
   HEAP32[($0 + 352 | 0) >> 2] = $4;
   HEAP32[($0 + 356 | 0) >> 2] = i64toi32_i32$1;
   $8 = $2 + ($1 << 2 | 0) | 0;
   HEAP32[$8 >> 2] = HEAP32[$8 >> 2] | 0 | 256 | 0;
   HEAP32[($0 + 28 | 0) >> 2] = $1 + $6 | 0;
   $217 = $0;
   i64toi32_i32$2 = $0;
   i64toi32_i32$1 = HEAP32[($0 + 344 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0 + 348 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   i64toi32_i32$2 = $217;
   HEAP32[(i64toi32_i32$2 + 344 | 0) >> 2] = i64toi32_i32$4;
   HEAP32[(i64toi32_i32$2 + 348 | 0) >> 2] = i64toi32_i32$5;
   $5 = 0;
   if (!$3) {
    break label$1
   }
   HEAP32[($0 + 328 | 0) >> 2] = 1;
  }
  return $5 | 0;
 }
 
 function _os_lacing_expand($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  label$1 : {
   $2 = HEAP32[($0 + 24 | 0) >> 2] | 0;
   if (($2 - $1 | 0 | 0) > (HEAP32[($0 + 28 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   label$2 : {
    if (($2 | 0) <= (2147483647 - $1 | 0 | 0)) {
     break label$2
    }
    label$3 : {
     $1 = HEAP32[$0 >> 2] | 0;
     if (!$1) {
      break label$3
     }
     dlfree($1 | 0);
    }
    label$4 : {
     $1 = HEAP32[($0 + 16 | 0) >> 2] | 0;
     if (!$1) {
      break label$4
     }
     dlfree($1 | 0);
    }
    label$5 : {
     $1 = HEAP32[($0 + 20 | 0) >> 2] | 0;
     if (!$1) {
      break label$5
     }
     dlfree($1 | 0);
    }
    memset($0 | 0, 0 | 0, 360 | 0) | 0;
    return -1 | 0;
   }
   label$6 : {
    $1 = $2 + $1 | 0;
    $1 = ($1 | 0) < (2147483615 | 0) ? $1 + 32 | 0 : $1;
    $2 = dlrealloc(HEAP32[($0 + 16 | 0) >> 2] | 0 | 0, $1 << 2 | 0 | 0) | 0;
    if ($2) {
     break label$6
    }
    label$7 : {
     $1 = HEAP32[$0 >> 2] | 0;
     if (!$1) {
      break label$7
     }
     dlfree($1 | 0);
    }
    label$8 : {
     $1 = HEAP32[($0 + 16 | 0) >> 2] | 0;
     if (!$1) {
      break label$8
     }
     dlfree($1 | 0);
    }
    label$9 : {
     $1 = HEAP32[($0 + 20 | 0) >> 2] | 0;
     if (!$1) {
      break label$9
     }
     dlfree($1 | 0);
    }
    memset($0 | 0, 0 | 0, 360 | 0) | 0;
    return -1 | 0;
   }
   HEAP32[($0 + 16 | 0) >> 2] = $2;
   label$10 : {
    $2 = dlrealloc(HEAP32[($0 + 20 | 0) >> 2] | 0 | 0, $1 << 3 | 0 | 0) | 0;
    if ($2) {
     break label$10
    }
    label$11 : {
     $1 = HEAP32[$0 >> 2] | 0;
     if (!$1) {
      break label$11
     }
     dlfree($1 | 0);
    }
    label$12 : {
     $1 = HEAP32[($0 + 16 | 0) >> 2] | 0;
     if (!$1) {
      break label$12
     }
     dlfree($1 | 0);
    }
    label$13 : {
     $1 = HEAP32[($0 + 20 | 0) >> 2] | 0;
     if (!$1) {
      break label$13
     }
     dlfree($1 | 0);
    }
    memset($0 | 0, 0 | 0, 360 | 0) | 0;
    return -1 | 0;
   }
   HEAP32[($0 + 24 | 0) >> 2] = $1;
   HEAP32[($0 + 20 | 0) >> 2] = $2;
  }
  return 0 | 0;
 }
 
 function ogg_stream_packetin($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $4 = 0, $3 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   $2 = global$0 - 16 | 0;
   $3 = $2;
   if ($2 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $3;
  }
  HEAP32[($2 + 8 | 0) >> 2] = HEAP32[$1 >> 2] | 0;
  HEAP32[($2 + 12 | 0) >> 2] = HEAP32[($1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1 + 20 | 0) >> 2] | 0;
  $1 = ogg_stream_iovecin($0 | 0, $2 + 8 | 0 | 0, 1 | 0, HEAP32[($1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($1 + 16 | 0) >> 2] | 0 | 0, i64toi32_i32$1 | 0) | 0;
  label$3 : {
   $4 = $2 + 16 | 0;
   if ($4 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $4;
  }
  return $1 | 0;
 }
 
 function ogg_stream_flush($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return ogg_stream_flush_i($0 | 0, $1 | 0, 1 | 0, 4096 | 0) | 0 | 0;
 }
 
 function ogg_stream_flush_i($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $11 = 0, $9 = 0, $14 = 0, $14$hi = 0, $10 = 0, $5 = 0, $12 = 0, $28 = 0, $29 = 0, $13 = 0, $4 = 0, $7 = 0, $8 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $122 = 0, $126 = 0, $130 = 0, $134 = 0, $138 = 0, $142 = 0, $146 = 0;
  $4 = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   $5 = HEAP32[($0 + 28 | 0) >> 2] | 0;
   $6 = ($5 | 0) < (255 | 0) ? $5 : 255;
   if (!$6) {
    break label$1
   }
   $7 = HEAP32[$0 >> 2] | 0;
   if (!$7) {
    break label$1
   }
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       $8 = HEAP32[($0 + 332 | 0) >> 2] | 0;
       if (!$8) {
        break label$5
       }
       if (($5 | 0) >= (1 | 0)) {
        break label$4
       }
       i64toi32_i32$0 = -1;
       $14 = -1;
       $14$hi = i64toi32_i32$0;
       $6 = 0;
       break label$3;
      }
      $9 = 0;
      $6 = ($6 | 0) > (0 | 0) ? $6 : 0;
      label$6 : while (1) {
       i64toi32_i32$0 = 0;
       $14 = 0;
       $14$hi = i64toi32_i32$0;
       if (($9 | 0) == ($6 | 0)) {
        break label$3
       }
       $10 = $9 << 2 | 0;
       $11 = $9 + 1 | 0;
       $9 = $11;
       if ((HEAPU8[($10 + (HEAP32[($0 + 16 | 0) >> 2] | 0) | 0) >> 0] | 0 | 0) == (255 | 0)) {
        continue label$6
       }
       break label$6;
      };
      $6 = $11;
      break label$3;
     }
     $12 = ($6 | 0) > (1 | 0) ? $6 : 1;
     i64toi32_i32$0 = -1;
     $14 = -1;
     $14$hi = i64toi32_i32$0;
     $10 = 0;
     $13 = 0;
     $9 = 0;
     $6 = 0;
     label$7 : {
      label$8 : while (1) {
       label$9 : {
        if (($9 | 0) <= ($3 | 0)) {
         break label$9
        }
        if (($10 | 0) <= (3 | 0)) {
         break label$9
        }
        $2 = 1;
        break label$7;
       }
       $10 = 0;
       label$10 : {
        $11 = HEAPU8[((HEAP32[($0 + 16 | 0) >> 2] | 0) + ($6 << 2 | 0) | 0) >> 0] | 0;
        if (($11 | 0) == (255 | 0)) {
         break label$10
        }
        i64toi32_i32$2 = (HEAP32[($0 + 20 | 0) >> 2] | 0) + ($6 << 3 | 0) | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $14 = i64toi32_i32$0;
        $14$hi = i64toi32_i32$1;
        $13 = $13 + 1 | 0;
        $10 = $13;
       }
       $9 = $11 + $9 | 0;
       $6 = $6 + 1 | 0;
       if (($6 | 0) != ($12 | 0)) {
        continue label$8
       }
       break label$8;
      };
      $6 = $12;
     }
     $11 = 255;
     if (($6 | 0) == (255 | 0)) {
      break label$2
     }
    }
    $11 = $6;
    if (!$2) {
     break label$1
    }
   }
   HEAP32[($0 + 40 | 0) >> 2] = 1399285583;
   HEAP16[($0 + 44 | 0) >> 1] = 0;
   $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
   $6 = ((HEAPU8[($3 + 1 | 0) >> 0] | 0) ^ -1 | 0) & 1 | 0;
   $6 = $8 ? $6 : $6 | 2 | 0;
   HEAP8[($0 + 45 | 0) >> 0] = $6;
   label$11 : {
    if (($5 | 0) != ($11 | 0)) {
     break label$11
    }
    if (!(HEAP32[($0 + 328 | 0) >> 2] | 0)) {
     break label$11
    }
    HEAP8[($0 + 45 | 0) >> 0] = $6 | 4 | 0;
   }
   HEAP32[($0 + 332 | 0) >> 2] = 1;
   $122 = $0 + 53 | 0;
   i64toi32_i32$1 = $14$hi;
   i64toi32_i32$2 = $14;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 56;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $30 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $30 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   HEAP8[$122 >> 0] = $30;
   $126 = $0 + 52 | 0;
   i64toi32_i32$0 = $14$hi;
   i64toi32_i32$1 = $14;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $31 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $31 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
   }
   HEAP8[$126 >> 0] = $31;
   $130 = $0 + 51 | 0;
   i64toi32_i32$2 = $14$hi;
   i64toi32_i32$0 = $14;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 40;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $32 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $32 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   HEAP8[$130 >> 0] = $32;
   $134 = $0 + 50 | 0;
   i64toi32_i32$1 = $14$hi;
   i64toi32_i32$2 = $14;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $33 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $33 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   HEAP8[$134 >> 0] = $33;
   $138 = $0 + 49 | 0;
   i64toi32_i32$0 = $14$hi;
   i64toi32_i32$1 = $14;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 24;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $34 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $34 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
   }
   HEAP8[$138 >> 0] = $34;
   $142 = $0 + 48 | 0;
   i64toi32_i32$2 = $14$hi;
   i64toi32_i32$0 = $14;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 16;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $35 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $35 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   HEAP8[$142 >> 0] = $35;
   $146 = $0 + 47 | 0;
   i64toi32_i32$1 = $14$hi;
   i64toi32_i32$2 = $14;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 8;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $36 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $36 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   HEAP8[$146 >> 0] = $36;
   i64toi32_i32$0 = $14$hi;
   HEAP8[($0 + 46 | 0) >> 0] = $14;
   $28 = $0 + 54 | 0;
   $29 = HEAP32[($0 + 336 | 0) >> 2] | 0;
   HEAP8[$28 >> 0] = $29;
   HEAP8[($28 + 1 | 0) >> 0] = $29 >>> 8 | 0;
   HEAP8[($28 + 2 | 0) >> 0] = $29 >>> 16 | 0;
   HEAP8[($28 + 3 | 0) >> 0] = $29 >>> 24 | 0;
   label$12 : {
    $6 = HEAP32[($0 + 340 | 0) >> 2] | 0;
    if (($6 | 0) != (-1 | 0)) {
     break label$12
    }
    $6 = 0;
    HEAP32[($0 + 340 | 0) >> 2] = 0;
   }
   $12 = $0 + 40 | 0;
   HEAP8[($0 + 66 | 0) >> 0] = $11;
   $9 = 0;
   $37 = $0 + 62 | 0;
   $38 = 0;
   HEAP16[$37 >> 1] = $38;
   HEAP16[($37 + 2 | 0) >> 1] = $38 >>> 16 | 0;
   HEAP8[($0 + 61 | 0) >> 0] = $6 >>> 24 | 0;
   HEAP8[($0 + 60 | 0) >> 0] = $6 >>> 16 | 0;
   HEAP8[($0 + 59 | 0) >> 0] = $6 >>> 8 | 0;
   HEAP8[($0 + 58 | 0) >> 0] = $6;
   $4 = 1;
   HEAP32[($0 + 340 | 0) >> 2] = $6 + 1 | 0;
   label$13 : {
    if (($11 | 0) < (1 | 0)) {
     break label$13
    }
    $6 = 0;
    label$14 : while (1) {
     $10 = HEAP32[($3 + ($6 << 2 | 0) | 0) >> 2] | 0;
     HEAP8[(($6 + $0 | 0) + 67 | 0) >> 0] = $10;
     $9 = ($10 & 255 | 0) + $9 | 0;
     $6 = $6 + 1 | 0;
     if (($6 | 0) != ($11 | 0)) {
      continue label$14
     }
     break label$14;
    };
   }
   HEAP32[$1 >> 2] = $12;
   $6 = $11 + 27 | 0;
   HEAP32[($0 + 324 | 0) >> 2] = $6;
   HEAP32[($1 + 4 | 0) >> 2] = $6;
   $6 = HEAP32[($0 + 12 | 0) >> 2] | 0;
   HEAP32[($1 + 12 | 0) >> 2] = $9;
   HEAP32[($1 + 8 | 0) >> 2] = $7 + $6 | 0;
   $6 = $5 - $11 | 0;
   HEAP32[($0 + 28 | 0) >> 2] = $6;
   memmove($3 | 0, $3 + ($11 << 2 | 0) | 0 | 0, $6 << 2 | 0 | 0) | 0;
   $6 = HEAP32[($0 + 20 | 0) >> 2] | 0;
   memmove($6 | 0, $6 + ($11 << 3 | 0) | 0 | 0, (HEAP32[($0 + 28 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
   HEAP32[($0 + 12 | 0) >> 2] = (HEAP32[($0 + 12 | 0) >> 2] | 0) + $9 | 0;
   ogg_page_checksum_set($1 | 0);
  }
  return $4 | 0;
 }
 
 function ogg_stream_pageout($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   if (!(HEAP32[$0 >> 2] | 0)) {
    break label$1
   }
   $3 = HEAP32[($0 + 28 | 0) >> 2] | 0;
   label$2 : {
    label$3 : {
     label$4 : {
      if (!(HEAP32[($0 + 328 | 0) >> 2] | 0)) {
       break label$4
      }
      if ($3) {
       break label$3
      }
      $2 = 0;
      break label$2;
     }
     $2 = 0;
     if (!$3) {
      break label$2
     }
     if (HEAP32[($0 + 332 | 0) >> 2] | 0) {
      break label$2
     }
    }
    $2 = 1;
   }
   $2 = ogg_stream_flush_i($0 | 0, $1 | 0, $2 | 0, 4096 | 0) | 0;
  }
  return $2 | 0;
 }
 
 function ogg_sync_init($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   i64toi32_i32$1 = $0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = 0;
   i64toi32_i32$1 = i64toi32_i32$1 + 16 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $0 + 8 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
  return 0 | 0;
 }
 
 function ogg_sync_clear($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1 = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   label$2 : {
    $1 = HEAP32[$0 >> 2] | 0;
    if (!$1) {
     break label$2
    }
    dlfree($1 | 0);
   }
   i64toi32_i32$1 = $0;
   i64toi32_i32$0 = 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[($0 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($0 + 24 | 0) >> 2] = 0;
   i64toi32_i32$1 = $0 + 16 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $0 + 8 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
  return 0 | 0;
 }
 
 function ogg_sync_buffer($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $4 = 0;
  $2 = 0;
  label$1 : {
   $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   if (($3 | 0) < (0 | 0)) {
    break label$1
   }
   label$2 : {
    $2 = HEAP32[($0 + 12 | 0) >> 2] | 0;
    if (!$2) {
     break label$2
    }
    $4 = (HEAP32[($0 + 8 | 0) >> 2] | 0) - $2 | 0;
    HEAP32[($0 + 8 | 0) >> 2] = $4;
    label$3 : {
     if (($4 | 0) < (1 | 0)) {
      break label$3
     }
     $3 = HEAP32[$0 >> 2] | 0;
     memmove($3 | 0, $3 + $2 | 0 | 0, $4 | 0) | 0;
     $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    }
    HEAP32[($0 + 12 | 0) >> 2] = 0;
   }
   label$4 : {
    label$5 : {
     $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     if (($3 - $2 | 0 | 0) < ($1 | 0)) {
      break label$5
     }
     $1 = HEAP32[$0 >> 2] | 0;
     break label$4;
    }
    $2 = ($1 + $2 | 0) + 4096 | 0;
    label$6 : {
     label$7 : {
      $1 = HEAP32[$0 >> 2] | 0;
      if (!$1) {
       break label$7
      }
      $1 = dlrealloc($1 | 0, $2 | 0) | 0;
      break label$6;
     }
     $1 = dlmalloc($2 | 0) | 0;
    }
    label$8 : {
     if ($1) {
      break label$8
     }
     label$9 : {
      $2 = HEAP32[$0 >> 2] | 0;
      if (!$2) {
       break label$9
      }
      dlfree($2 | 0);
     }
     i64toi32_i32$1 = $0;
     i64toi32_i32$0 = 0;
     HEAP32[$0 >> 2] = 0;
     HEAP32[($0 + 4 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($0 + 24 | 0) >> 2] = 0;
     i64toi32_i32$1 = $0 + 16 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $0 + 8 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return 0 | 0;
    }
    HEAP32[($0 + 4 | 0) >> 2] = $2;
    HEAP32[$0 >> 2] = $1;
    $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   }
   $2 = $1 + $2 | 0;
  }
  return $2 | 0;
 }
 
 function ogg_sync_wrote($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = -1;
  label$1 : {
   $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   if (($3 | 0) < (0 | 0)) {
    break label$1
   }
   $1 = (HEAP32[($0 + 8 | 0) >> 2] | 0) + $1 | 0;
   if (($1 | 0) > ($3 | 0)) {
    break label$1
   }
   HEAP32[($0 + 8 | 0) >> 2] = $1;
   $2 = 0;
  }
  return $2 | 0;
 }
 
 function ogg_sync_pageseek($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $6 = 0, $3 = 0, $4 = 0, $7 = 0, $8 = 0, $2 = 0, $5 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, i64toi32_i32$0 = 0, $9 = 0, $10 = 0, $11 = 0, $13 = 0, $12 = 0;
  label$1 : {
   $2 = global$0 - 16 | 0;
   $12 = $2;
   if ($2 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $12;
  }
  $3 = 0;
  label$3 : {
   if ((HEAP32[($0 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$3
   }
   $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
   $5 = (HEAP32[($0 + 8 | 0) >> 2] | 0) - $4 | 0;
   $6 = (HEAP32[$0 >> 2] | 0) + $4 | 0;
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        $7 = HEAP32[($0 + 20 | 0) >> 2] | 0;
        if ($7) {
         break label$8
        }
        if (($5 | 0) < (27 | 0)) {
         break label$3
        }
        if ((HEAPU8[$6 >> 0] | 0 | ((HEAPU8[($6 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($6 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($6 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0 | 0) != (1399285583 | 0)) {
         break label$7
        }
        $4 = HEAPU8[($6 + 26 | 0) >> 0] | 0;
        $7 = $4 + 27 | 0;
        if (($5 | 0) < ($7 | 0)) {
         break label$3
        }
        label$9 : {
         if (!$4) {
          break label$9
         }
         $8 = HEAP32[($0 + 24 | 0) >> 2] | 0;
         $4 = 0;
         label$10 : while (1) {
          $8 = $8 + (HEAPU8[(($4 + $6 | 0) + 27 | 0) >> 0] | 0) | 0;
          HEAP32[($0 + 24 | 0) >> 2] = $8;
          $4 = $4 + 1 | 0;
          if ($4 >>> 0 < (HEAPU8[($6 + 26 | 0) >> 0] | 0) >>> 0) {
           continue label$10
          }
          break label$10;
         };
        }
        HEAP32[($0 + 20 | 0) >> 2] = $7;
       }
       if (($7 + (HEAP32[($0 + 24 | 0) >> 2] | 0) | 0 | 0) > ($5 | 0)) {
        break label$3
       }
       $9 = HEAPU8[($6 + 22 | 0) >> 0] | 0 | ((HEAPU8[($6 + 23 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($6 + 24 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($6 + 25 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       HEAP32[($2 + 12 | 0) >> 2] = $9;
       $4 = 0;
       $15 = 0;
       HEAP8[($6 + 22 | 0) >> 0] = $15;
       HEAP8[($6 + 23 | 0) >> 0] = $15 >>> 8 | 0;
       HEAP8[($6 + 24 | 0) >> 0] = $15 >>> 16 | 0;
       HEAP8[($6 + 25 | 0) >> 0] = $15 >>> 24 | 0;
       $10 = HEAP32[($0 + 24 | 0) >> 2] | 0;
       $8 = HEAP32[($0 + 20 | 0) >> 2] | 0;
       $16 = 0;
       HEAP8[($6 + 22 | 0) >> 0] = $16;
       HEAP8[($6 + 23 | 0) >> 0] = $16 >>> 8 | 0;
       HEAP8[($6 + 24 | 0) >> 0] = $16 >>> 16 | 0;
       HEAP8[($6 + 25 | 0) >> 0] = $16 >>> 24 | 0;
       $3 = 0;
       label$11 : {
        if (($8 | 0) <= (0 | 0)) {
         break label$11
        }
        $7 = 0;
        $3 = 0;
        label$12 : while (1) {
         $3 = (HEAP32[(((($3 >>> 24 | 0) ^ (HEAPU8[($6 + $7 | 0) >> 0] | 0) | 0) << 2 | 0) + 5376 | 0) >> 2] | 0) ^ ($3 << 8 | 0) | 0;
         $7 = $7 + 1 | 0;
         if (($7 | 0) != ($8 | 0)) {
          continue label$12
         }
         break label$12;
        };
       }
       $11 = $6 + 22 | 0;
       label$13 : {
        if (($10 | 0) <= (0 | 0)) {
         break label$13
        }
        $7 = $6 + $8 | 0;
        label$14 : while (1) {
         $3 = (HEAP32[(((($3 >>> 24 | 0) ^ (HEAPU8[($7 + $4 | 0) >> 0] | 0) | 0) << 2 | 0) + 5376 | 0) >> 2] | 0) ^ ($3 << 8 | 0) | 0;
         $4 = $4 + 1 | 0;
         if (($4 | 0) != ($10 | 0)) {
          continue label$14
         }
         break label$14;
        };
       }
       HEAP8[($6 + 22 | 0) >> 0] = $3;
       HEAP8[($6 + 23 | 0) >> 0] = $3 >>> 8 | 0;
       HEAP8[($6 + 24 | 0) >> 0] = $3 >>> 16 | 0;
       HEAP8[($6 + 25 | 0) >> 0] = $3 >>> 24 | 0;
       $17 = $11;
       if ((HEAP32[($2 + 12 | 0) >> 2] | 0 | 0) == (HEAPU8[$17 >> 0] | 0 | ((HEAPU8[($17 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($17 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($17 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0 | 0)) {
        break label$6
       }
       $18 = $11;
       $19 = $9;
       HEAP8[$18 >> 0] = $19;
       HEAP8[($18 + 1 | 0) >> 0] = $19 >>> 8 | 0;
       HEAP8[($18 + 2 | 0) >> 0] = $19 >>> 16 | 0;
       HEAP8[($18 + 3 | 0) >> 0] = $19 >>> 24 | 0;
      }
      i64toi32_i32$0 = 0;
      HEAP32[($0 + 20 | 0) >> 2] = 0;
      HEAP32[($0 + 24 | 0) >> 2] = i64toi32_i32$0;
      $3 = memchr($6 + 1 | 0 | 0, 79 | 0, $5 + -1 | 0 | 0) | 0;
      if (!$3) {
       break label$5
      }
      $4 = HEAP32[$0 >> 2] | 0;
      break label$4;
     }
     $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     label$15 : {
      label$16 : {
       if ($1) {
        break label$16
       }
       $7 = HEAP32[($0 + 24 | 0) >> 2] | 0;
       $3 = HEAP32[($0 + 20 | 0) >> 2] | 0;
       break label$15;
      }
      $7 = (HEAP32[$0 >> 2] | 0) + $4 | 0;
      HEAP32[$1 >> 2] = $7;
      $3 = HEAP32[($0 + 20 | 0) >> 2] | 0;
      HEAP32[($1 + 4 | 0) >> 2] = $3;
      HEAP32[($1 + 8 | 0) >> 2] = $7 + $3 | 0;
      $7 = HEAP32[($0 + 24 | 0) >> 2] | 0;
      HEAP32[($1 + 12 | 0) >> 2] = $7;
     }
     HEAP32[($0 + 24 | 0) >> 2] = 0;
     i64toi32_i32$0 = 0;
     HEAP32[($0 + 16 | 0) >> 2] = 0;
     HEAP32[($0 + 20 | 0) >> 2] = i64toi32_i32$0;
     $3 = $7 + $3 | 0;
     HEAP32[($0 + 12 | 0) >> 2] = $3 + $4 | 0;
     break label$3;
    }
    $4 = HEAP32[$0 >> 2] | 0;
    $3 = $4 + (HEAP32[($0 + 8 | 0) >> 2] | 0) | 0;
   }
   HEAP32[($0 + 12 | 0) >> 2] = $3 - $4 | 0;
   $3 = $6 - $3 | 0;
  }
  label$17 : {
   $13 = $2 + 16 | 0;
   if ($13 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $13;
  }
  return $3 | 0;
 }
 
 function ogg_sync_pageout($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = 0;
  label$1 : {
   if ((HEAP32[($0 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     $2 = ogg_sync_pageseek($0 | 0, $1 | 0) | 0;
     if (($2 | 0) <= (0 | 0)) {
      break label$3
     }
     return 1 | 0;
    }
    label$4 : {
     if ($2) {
      break label$4
     }
     return 0 | 0;
    }
    if (HEAP32[($0 + 16 | 0) >> 2] | 0) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0 + 16 | 0) >> 2] = 1;
   $2 = -1;
  }
  return $2 | 0;
 }
 
 function ogg_stream_pagein($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $3 = 0, $2 = 0, $6 = 0, $11 = 0, $12 = 0, $10 = 0, i64toi32_i32$0 = 0, $13 = 0, $8 = 0, i64toi32_i32$1 = 0, $7 = 0, $5 = 0, $9 = 0, $14 = 0, $14$hi = 0;
  $2 = -1;
  label$1 : {
   if (!$0) {
    break label$1
   }
   $3 = HEAP32[$0 >> 2] | 0;
   if (!$3) {
    break label$1
   }
   $4 = HEAP32[$1 >> 2] | 0;
   $5 = HEAPU8[($4 + 5 | 0) >> 0] | 0;
   $6 = HEAP32[($1 + 12 | 0) >> 2] | 0;
   $7 = HEAP32[($1 + 8 | 0) >> 2] | 0;
   $8 = HEAPU8[($4 + 26 | 0) >> 0] | 0;
   $9 = HEAPU8[($4 + 18 | 0) >> 0] | 0 | ((HEAPU8[($4 + 19 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($4 + 20 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($4 + 21 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $10 = HEAPU8[($4 + 14 | 0) >> 0] | 0 | ((HEAPU8[($4 + 15 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($4 + 16 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($4 + 17 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$0 = HEAPU8[($4 + 6 | 0) >> 0] | 0 | ((HEAPU8[($4 + 7 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($4 + 8 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($4 + 9 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$1 = HEAPU8[($4 + 10 | 0) >> 0] | 0 | ((HEAPU8[($4 + 11 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($4 + 12 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($4 + 13 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $14 = i64toi32_i32$0;
   $14$hi = i64toi32_i32$1;
   $11 = HEAPU8[($4 + 4 | 0) >> 0] | 0;
   $1 = HEAP32[($0 + 36 | 0) >> 2] | 0;
   label$2 : {
    $12 = HEAP32[($0 + 12 | 0) >> 2] | 0;
    if (!$12) {
     break label$2
    }
    $13 = (HEAP32[($0 + 8 | 0) >> 2] | 0) - $12 | 0;
    HEAP32[($0 + 8 | 0) >> 2] = $13;
    label$3 : {
     if (!$13) {
      break label$3
     }
     memmove($3 | 0, $3 + $12 | 0 | 0, $13 | 0) | 0;
    }
    HEAP32[($0 + 12 | 0) >> 2] = 0;
   }
   label$4 : {
    if (!$1) {
     break label$4
    }
    $3 = 0;
    label$5 : {
     $12 = (HEAP32[($0 + 28 | 0) >> 2] | 0) - $1 | 0;
     if (!$12) {
      break label$5
     }
     $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
     memmove($3 | 0, $3 + ($1 << 2 | 0) | 0 | 0, $12 << 2 | 0 | 0) | 0;
     $3 = HEAP32[($0 + 20 | 0) >> 2] | 0;
     memmove($3 | 0, $3 + ($1 << 3 | 0) | 0 | 0, ((HEAP32[($0 + 28 | 0) >> 2] | 0) - $1 | 0) << 3 | 0 | 0) | 0;
     $3 = (HEAP32[($0 + 28 | 0) >> 2] | 0) - $1 | 0;
    }
    HEAP32[($0 + 28 | 0) >> 2] = $3;
    HEAP32[($0 + 36 | 0) >> 2] = 0;
    HEAP32[($0 + 32 | 0) >> 2] = (HEAP32[($0 + 32 | 0) >> 2] | 0) - $1 | 0;
   }
   if ($11 & 255 | 0) {
    break label$1
   }
   if (($10 | 0) != (HEAP32[($0 + 336 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   if (_os_lacing_expand($0 | 0, $8 + 1 | 0 | 0) | 0) {
    break label$1
   }
   $11 = $5 & 1 | 0;
   label$6 : {
    $13 = HEAP32[($0 + 340 | 0) >> 2] | 0;
    if (($9 | 0) == ($13 | 0)) {
     break label$6
    }
    label$7 : {
     $10 = HEAP32[($0 + 32 | 0) >> 2] | 0;
     $3 = HEAP32[($0 + 28 | 0) >> 2] | 0;
     if (($10 | 0) >= ($3 | 0)) {
      break label$7
     }
     $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     $12 = HEAP32[($0 + 16 | 0) >> 2] | 0;
     $1 = $10;
     label$8 : while (1) {
      $2 = $2 - (HEAPU8[($12 + ($1 << 2 | 0) | 0) >> 0] | 0) | 0;
      $1 = $1 + 1 | 0;
      if (($1 | 0) < ($3 | 0)) {
       continue label$8
      }
      break label$8;
     };
     HEAP32[($0 + 8 | 0) >> 2] = $2;
    }
    HEAP32[($0 + 28 | 0) >> 2] = $10;
    if (($13 | 0) == (-1 | 0)) {
     break label$6
    }
    $1 = $10 + 1 | 0;
    HEAP32[($0 + 28 | 0) >> 2] = $1;
    HEAP32[((HEAP32[($0 + 16 | 0) >> 2] | 0) + ($10 << 2 | 0) | 0) >> 2] = 1024;
    HEAP32[($0 + 32 | 0) >> 2] = $1;
   }
   $10 = $5 & 2 | 0;
   $2 = 0;
   label$9 : {
    if (!$11) {
     break label$9
    }
    label$10 : {
     $1 = HEAP32[($0 + 28 | 0) >> 2] | 0;
     if (($1 | 0) < (1 | 0)) {
      break label$10
     }
     if ((HEAP32[((($1 << 2 | 0) + (HEAP32[($0 + 16 | 0) >> 2] | 0) | 0) + -4 | 0) >> 2] | 0 | 0) != (1024 | 0)) {
      break label$9
     }
    }
    $10 = 0;
    label$11 : {
     if ($8) {
      break label$11
     }
     $2 = 0;
     break label$9;
    }
    $1 = 0;
    label$12 : while (1) {
     $2 = $1 + 1 | 0;
     $1 = HEAPU8[(($1 + $4 | 0) + 27 | 0) >> 0] | 0;
     $6 = $6 - $1 | 0;
     $7 = $7 + $1 | 0;
     if (($1 | 0) != (255 | 0)) {
      break label$9
     }
     $1 = $2;
     if (($1 | 0) != ($8 | 0)) {
      continue label$12
     }
     break label$12;
    };
    $2 = $8;
   }
   label$13 : {
    if (!$6) {
     break label$13
    }
    label$14 : {
     label$15 : {
      $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      $1 = HEAP32[($0 + 8 | 0) >> 2] | 0;
      if (($3 - $6 | 0 | 0) <= ($1 | 0)) {
       break label$15
      }
      $3 = HEAP32[$0 >> 2] | 0;
      break label$14;
     }
     label$16 : {
      if (($3 | 0) <= (2147483647 - $6 | 0 | 0)) {
       break label$16
      }
      label$17 : {
       $4 = HEAP32[$0 >> 2] | 0;
       if (!$4) {
        break label$17
       }
       dlfree($4 | 0);
      }
      label$18 : {
       $4 = HEAP32[($0 + 16 | 0) >> 2] | 0;
       if (!$4) {
        break label$18
       }
       dlfree($4 | 0);
      }
      label$19 : {
       $4 = HEAP32[($0 + 20 | 0) >> 2] | 0;
       if (!$4) {
        break label$19
       }
       dlfree($4 | 0);
      }
      memset($0 | 0, 0 | 0, 360 | 0) | 0;
      return -1 | 0;
     }
     label$20 : {
      $1 = $3 + $6 | 0;
      $1 = ($1 | 0) < (2147482623 | 0) ? $1 + 1024 | 0 : $1;
      $3 = dlrealloc(HEAP32[$0 >> 2] | 0 | 0, $1 | 0) | 0;
      if ($3) {
       break label$20
      }
      label$21 : {
       $4 = HEAP32[$0 >> 2] | 0;
       if (!$4) {
        break label$21
       }
       dlfree($4 | 0);
      }
      label$22 : {
       $4 = HEAP32[($0 + 16 | 0) >> 2] | 0;
       if (!$4) {
        break label$22
       }
       dlfree($4 | 0);
      }
      label$23 : {
       $4 = HEAP32[($0 + 20 | 0) >> 2] | 0;
       if (!$4) {
        break label$23
       }
       dlfree($4 | 0);
      }
      memset($0 | 0, 0 | 0, 360 | 0) | 0;
      return -1 | 0;
     }
     HEAP32[$0 >> 2] = $3;
     HEAP32[($0 + 4 | 0) >> 2] = $1;
     $1 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    }
    memcpy($3 + $1 | 0 | 0, $7 | 0, $6 | 0) | 0;
    HEAP32[($0 + 8 | 0) >> 2] = (HEAP32[($0 + 8 | 0) >> 2] | 0) + $6 | 0;
   }
   $13 = $5 & 4 | 0;
   label$24 : {
    if (($2 | 0) >= ($8 | 0)) {
     break label$24
    }
    $3 = HEAP32[($0 + 20 | 0) >> 2] | 0;
    $12 = HEAP32[($0 + 16 | 0) >> 2] | 0;
    $11 = HEAP32[($0 + 28 | 0) >> 2] | 0;
    $1 = $12 + ($11 << 2 | 0) | 0;
    $6 = HEAPU8[(($2 + $4 | 0) + 27 | 0) >> 0] | 0;
    HEAP32[$1 >> 2] = $6;
    i64toi32_i32$0 = $3 + ($11 << 3 | 0) | 0;
    i64toi32_i32$1 = -1;
    HEAP32[i64toi32_i32$0 >> 2] = -1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    label$25 : {
     if (!$10) {
      break label$25
     }
     HEAP32[$1 >> 2] = $6 | 256 | 0;
    }
    $1 = $11 + 1 | 0;
    HEAP32[($0 + 28 | 0) >> 2] = $1;
    $2 = $2 + 1 | 0;
    label$26 : {
     label$27 : {
      if (($6 | 0) != (255 | 0)) {
       break label$27
      }
      $11 = -1;
      break label$26;
     }
     HEAP32[($0 + 32 | 0) >> 2] = $1;
    }
    label$28 : {
     if (($2 | 0) == ($8 | 0)) {
      break label$28
     }
     label$29 : while (1) {
      $7 = HEAPU8[(($2 + $4 | 0) + 27 | 0) >> 0] | 0;
      HEAP32[($12 + ($1 << 2 | 0) | 0) >> 2] = $7;
      i64toi32_i32$0 = $3 + ($1 << 3 | 0) | 0;
      i64toi32_i32$1 = -1;
      HEAP32[i64toi32_i32$0 >> 2] = -1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $6 = $1 + 1 | 0;
      HEAP32[($0 + 28 | 0) >> 2] = $6;
      $2 = $2 + 1 | 0;
      label$30 : {
       if (($7 | 0) == (255 | 0)) {
        break label$30
       }
       HEAP32[($0 + 32 | 0) >> 2] = $6;
       $11 = $1;
      }
      $1 = $6;
      if (($2 | 0) != ($8 | 0)) {
       continue label$29
      }
      break label$29;
     };
    }
    if (($11 | 0) == (-1 | 0)) {
     break label$24
    }
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$0 = (HEAP32[($0 + 20 | 0) >> 2] | 0) + ($11 << 3 | 0) | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $14;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   }
   label$31 : {
    if (!$13) {
     break label$31
    }
    HEAP32[($0 + 328 | 0) >> 2] = 1;
    $4 = HEAP32[($0 + 28 | 0) >> 2] | 0;
    if (($4 | 0) < (1 | 0)) {
     break label$31
    }
    $4 = (($4 << 2 | 0) + (HEAP32[($0 + 16 | 0) >> 2] | 0) | 0) + -4 | 0;
    HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 0 | 512 | 0;
   }
   HEAP32[($0 + 340 | 0) >> 2] = $9 + 1 | 0;
   $2 = 0;
  }
  return $2 | 0;
 }
 
 function ogg_sync_reset($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  label$1 : {
   if ((HEAP32[($0 + 4 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
    break label$1
   }
   return -1 | 0;
  }
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[($0 + 8 | 0) >> 2] = 0;
  HEAP32[($0 + 12 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0 + 24 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  return 0 | 0;
 }
 
 function ogg_stream_reset($0) {
  $0 = $0 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $1 = 0;
  $1 = -1;
  label$1 : {
   if (!$0) {
    break label$1
   }
   if (!(HEAP32[$0 >> 2] | 0)) {
    break label$1
   }
   i64toi32_i32$1 = $0;
   i64toi32_i32$0 = 0;
   HEAP32[($0 + 344 | 0) >> 2] = 0;
   HEAP32[($0 + 348 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($0 + 340 | 0) >> 2] = -1;
   $1 = 0;
   HEAP32[($0 + 332 | 0) >> 2] = 0;
   i64toi32_i32$1 = $0;
   i64toi32_i32$0 = 0;
   HEAP32[($0 + 324 | 0) >> 2] = 0;
   HEAP32[($0 + 328 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($0 + 36 | 0) >> 2] = 0;
   i64toi32_i32$1 = $0;
   i64toi32_i32$0 = 0;
   HEAP32[($0 + 28 | 0) >> 2] = 0;
   HEAP32[($0 + 32 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $0;
   i64toi32_i32$0 = 0;
   HEAP32[($0 + 8 | 0) >> 2] = 0;
   HEAP32[($0 + 12 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $0 + 352 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
  return $1 | 0;
 }
 
 function ogg_stream_packetout($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, $8 = 0, i64toi32_i32$1 = 0, $4 = 0, $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $7 = 0, $6 = 0, $9 = 0, $3 = 0, $5 = 0, $9$hi = 0, $36 = 0, $94 = 0, $95 = 0;
  $2 = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   $3 = HEAP32[$0 >> 2] | 0;
   if (!$3) {
    break label$1
   }
   $4 = HEAP32[($0 + 36 | 0) >> 2] | 0;
   if ((HEAP32[($0 + 32 | 0) >> 2] | 0 | 0) <= ($4 | 0)) {
    break label$1
   }
   label$2 : {
    $5 = HEAP32[($0 + 16 | 0) >> 2] | 0;
    $6 = HEAP32[($5 + ($4 << 2 | 0) | 0) >> 2] | 0;
    if (!($6 & 1024 | 0)) {
     break label$2
    }
    HEAP32[($0 + 36 | 0) >> 2] = $4 + 1 | 0;
    $36 = $0;
    i64toi32_i32$2 = $0;
    i64toi32_i32$0 = HEAP32[($0 + 344 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($0 + 348 | 0) >> 2] | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    i64toi32_i32$2 = $36;
    HEAP32[(i64toi32_i32$2 + 344 | 0) >> 2] = i64toi32_i32$4;
    HEAP32[(i64toi32_i32$2 + 348 | 0) >> 2] = i64toi32_i32$5;
    return -1 | 0;
   }
   $2 = $6 & 512 | 0;
   $7 = 255;
   label$3 : {
    label$4 : {
     $8 = $6 & 255 | 0;
     if (($8 | 0) == (255 | 0)) {
      break label$4
     }
     $7 = $8;
     break label$3;
    }
    label$5 : while (1) {
     $4 = $4 + 1 | 0;
     $8 = HEAP32[($5 + ($4 << 2 | 0) | 0) >> 2] | 0;
     $2 = $8 & 512 | 0 ? 512 : $2;
     $8 = $8 & 255 | 0;
     $7 = $8 + $7 | 0;
     if (($8 | 0) == (255 | 0)) {
      continue label$5
     }
     break label$5;
    };
   }
   label$6 : {
    label$7 : {
     if ($1) {
      break label$7
     }
     i64toi32_i32$1 = $0;
     i64toi32_i32$5 = HEAP32[($0 + 344 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($0 + 348 | 0) >> 2] | 0;
     $9 = i64toi32_i32$5;
     $9$hi = i64toi32_i32$2;
     $8 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     break label$6;
    }
    HEAP32[($1 + 8 | 0) >> 2] = $6 & 256 | 0;
    HEAP32[($1 + 12 | 0) >> 2] = $2;
    $8 = HEAP32[($0 + 12 | 0) >> 2] | 0;
    HEAP32[$1 >> 2] = $3 + $8 | 0;
    i64toi32_i32$1 = $0;
    i64toi32_i32$2 = HEAP32[($0 + 344 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($0 + 348 | 0) >> 2] | 0;
    $9 = i64toi32_i32$2;
    $9$hi = i64toi32_i32$5;
    i64toi32_i32$2 = $1;
    HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] = $9;
    HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] = i64toi32_i32$5;
    i64toi32_i32$1 = (HEAP32[($0 + 20 | 0) >> 2] | 0) + ($4 << 3 | 0) | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    HEAP32[($1 + 4 | 0) >> 2] = $7;
    $94 = i64toi32_i32$5;
    i64toi32_i32$5 = $1;
    HEAP32[(i64toi32_i32$5 + 16 | 0) >> 2] = $94;
    HEAP32[(i64toi32_i32$5 + 20 | 0) >> 2] = i64toi32_i32$2;
   }
   $95 = $0;
   i64toi32_i32$2 = $9$hi;
   i64toi32_i32$1 = $9;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = 1;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   i64toi32_i32$1 = $95;
   HEAP32[(i64toi32_i32$1 + 344 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(i64toi32_i32$1 + 348 | 0) >> 2] = i64toi32_i32$4;
   $2 = 1;
   HEAP32[($0 + 36 | 0) >> 2] = $4 + 1 | 0;
   HEAP32[($0 + 12 | 0) >> 2] = $8 + $7 | 0;
  }
  return $2 | 0;
 }
 
 function qsort($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $8 = 0, $7 = 0, $5 = 0, $6 = 0, $10 = 0, $9 = 0, $39 = 0, $132 = 0;
  label$1 : {
   $4 = global$0 - 208 | 0;
   $9 = $4;
   if ($4 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $9;
  }
  HEAP32[($4 + 8 | 0) >> 2] = 1;
  HEAP32[($4 + 12 | 0) >> 2] = 0;
  label$3 : {
   $5 = Math_imul($2, $1);
   if (!$5) {
    break label$3
   }
   HEAP32[($4 + 16 | 0) >> 2] = $2;
   HEAP32[($4 + 20 | 0) >> 2] = $2;
   $6 = 0 - $2 | 0;
   $1 = $2;
   $7 = $1;
   $8 = 2;
   label$4 : while (1) {
    $39 = $7 + $2 | 0;
    $7 = $1;
    $1 = $39 + $1 | 0;
    HEAP32[(($4 + 16 | 0) + ($8 << 2 | 0) | 0) >> 2] = $1;
    $8 = $8 + 1 | 0;
    if ($1 >>> 0 < $5 >>> 0) {
     continue label$4
    }
    break label$4;
   };
   label$5 : {
    label$6 : {
     $7 = ($0 + $5 | 0) + $6 | 0;
     if ($7 >>> 0 > $0 >>> 0) {
      break label$6
     }
     $8 = 1;
     $1 = 1;
     break label$5;
    }
    $8 = 1;
    $1 = 1;
    label$7 : while (1) {
     label$8 : {
      label$9 : {
       if (($8 & 3 | 0 | 0) != (3 | 0)) {
        break label$9
       }
       sift($0 | 0, $2 | 0, $3 | 0, $1 | 0, $4 + 16 | 0 | 0);
       shr($4 + 8 | 0 | 0, 2 | 0);
       $1 = $1 + 2 | 0;
       break label$8;
      }
      label$10 : {
       label$11 : {
        $8 = $1 + -1 | 0;
        if ((HEAP32[(($4 + 16 | 0) + ($8 << 2 | 0) | 0) >> 2] | 0) >>> 0 < ($7 - $0 | 0) >>> 0) {
         break label$11
        }
        trinkle($0 | 0, $2 | 0, $3 | 0, $4 + 8 | 0 | 0, $1 | 0, 0 | 0, $4 + 16 | 0 | 0);
        break label$10;
       }
       sift($0 | 0, $2 | 0, $3 | 0, $1 | 0, $4 + 16 | 0 | 0);
      }
      label$12 : {
       if (($1 | 0) != (1 | 0)) {
        break label$12
       }
       shl($4 + 8 | 0 | 0, 1 | 0);
       $1 = 0;
       break label$8;
      }
      shl($4 + 8 | 0 | 0, $8 | 0);
      $1 = 1;
     }
     $8 = HEAP32[($4 + 8 | 0) >> 2] | 0 | 1 | 0;
     HEAP32[($4 + 8 | 0) >> 2] = $8;
     $0 = $0 + $2 | 0;
     if ($0 >>> 0 < $7 >>> 0) {
      continue label$7
     }
     break label$7;
    };
   }
   trinkle($0 | 0, $2 | 0, $3 | 0, $4 + 8 | 0 | 0, $1 | 0, 0 | 0, $4 + 16 | 0 | 0);
   label$13 : while (1) {
    label$14 : {
     label$15 : {
      label$16 : {
       label$17 : {
        if (($1 | 0) != (1 | 0)) {
         break label$17
        }
        if (($8 | 0) != (1 | 0)) {
         break label$17
        }
        if (HEAP32[($4 + 12 | 0) >> 2] | 0) {
         break label$16
        }
        break label$3;
       }
       if (($1 | 0) > (1 | 0)) {
        break label$15
       }
      }
      $132 = $4 + 8 | 0;
      $8 = pntz($4 + 8 | 0 | 0) | 0;
      shr($132 | 0, $8 | 0);
      $1 = $8 + $1 | 0;
      $8 = HEAP32[($4 + 8 | 0) >> 2] | 0;
      break label$14;
     }
     shl($4 + 8 | 0 | 0, 2 | 0);
     HEAP32[($4 + 8 | 0) >> 2] = (HEAP32[($4 + 8 | 0) >> 2] | 0) ^ 7 | 0;
     shr($4 + 8 | 0 | 0, 1 | 0);
     $5 = $0 + $6 | 0;
     $7 = $1 + -2 | 0;
     trinkle($5 - (HEAP32[(($4 + 16 | 0) + ($7 << 2 | 0) | 0) >> 2] | 0) | 0 | 0, $2 | 0, $3 | 0, $4 + 8 | 0 | 0, $1 + -1 | 0 | 0, 1 | 0, $4 + 16 | 0 | 0);
     shl($4 + 8 | 0 | 0, 1 | 0);
     $8 = HEAP32[($4 + 8 | 0) >> 2] | 0 | 1 | 0;
     HEAP32[($4 + 8 | 0) >> 2] = $8;
     trinkle($5 | 0, $2 | 0, $3 | 0, $4 + 8 | 0 | 0, $7 | 0, 1 | 0, $4 + 16 | 0 | 0);
     $1 = $7;
    }
    $0 = $0 + $6 | 0;
    continue label$13;
   };
  }
  label$18 : {
   $10 = $4 + 208 | 0;
   if ($10 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $10;
  }
 }
 
 function sift($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $8 = 0, $6 = 0, $9 = 0, $10 = 0, $12 = 0, $11 = 0, $7 = 0;
  label$1 : {
   $5 = global$0 - 240 | 0;
   $11 = $5;
   if ($5 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $11;
  }
  HEAP32[$5 >> 2] = $0;
  $6 = 1;
  label$3 : {
   if (($3 | 0) < (2 | 0)) {
    break label$3
   }
   $7 = 0 - $1 | 0;
   $6 = 1;
   $8 = $0;
   label$4 : while (1) {
    label$5 : {
     $9 = $8 + $7 | 0;
     $10 = $3 + -2 | 0;
     $8 = $9 - (HEAP32[($4 + ($10 << 2 | 0) | 0) >> 2] | 0) | 0;
     if ((FUNCTION_TABLE[$2]($0, $8) | 0 | 0) < (0 | 0)) {
      break label$5
     }
     if ((FUNCTION_TABLE[$2]($0, $9) | 0 | 0) > (-1 | 0)) {
      break label$3
     }
    }
    $0 = $5 + ($6 << 2 | 0) | 0;
    label$6 : {
     label$7 : {
      if ((FUNCTION_TABLE[$2]($8, $9) | 0 | 0) < (0 | 0)) {
       break label$7
      }
      HEAP32[$0 >> 2] = $8;
      $10 = $3 + -1 | 0;
      break label$6;
     }
     HEAP32[$0 >> 2] = $9;
     $8 = $9;
    }
    $6 = $6 + 1 | 0;
    if (($10 | 0) < (2 | 0)) {
     break label$3
    }
    $0 = HEAP32[$5 >> 2] | 0;
    $3 = $10;
    continue label$4;
   };
  }
  cycle($1 | 0, $5 | 0, $6 | 0);
  label$8 : {
   $12 = $5 + 240 | 0;
   if ($12 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $12;
  }
 }
 
 function shr($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  label$1 : {
   label$2 : {
    if ($1 >>> 0 > 31 >>> 0) {
     break label$2
    }
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    $3 = HEAP32[$0 >> 2] | 0;
    break label$1;
   }
   $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   $2 = 0;
   HEAP32[($0 + 4 | 0) >> 2] = 0;
   HEAP32[$0 >> 2] = $3;
   $1 = $1 + -32 | 0;
  }
  HEAP32[($0 + 4 | 0) >> 2] = $2 >>> $1 | 0;
  HEAP32[$0 >> 2] = $2 << (32 - $1 | 0) | 0 | ($3 >>> $1 | 0) | 0;
 }
 
 function trinkle($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0, $9 = 0, $11 = 0, $13 = 0, $12 = 0, $10 = 0, $84 = 0;
  label$1 : {
   $7 = global$0 - 240 | 0;
   $12 = $7;
   if ($7 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $12;
  }
  $8 = HEAP32[$3 >> 2] | 0;
  HEAP32[($7 + 232 | 0) >> 2] = $8;
  $3 = HEAP32[($3 + 4 | 0) >> 2] | 0;
  HEAP32[$7 >> 2] = $0;
  HEAP32[($7 + 236 | 0) >> 2] = $3;
  $9 = 1;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       if (($8 | 0) != (1 | 0)) {
        break label$7
       }
       if (!$3) {
        break label$6
       }
      }
      $9 = 1;
      $8 = $0 - (HEAP32[($6 + ($4 << 2 | 0) | 0) >> 2] | 0) | 0;
      if ((FUNCTION_TABLE[$2]($8, $0) | 0 | 0) < (1 | 0)) {
       break label$6
      }
      $10 = 0 - $1 | 0;
      $11 = !$5;
      $9 = 1;
      label$8 : {
       label$9 : while (1) {
        $3 = $8;
        label$10 : {
         if (!($11 & 1 | 0)) {
          break label$10
         }
         if (($4 | 0) < (2 | 0)) {
          break label$10
         }
         $8 = HEAP32[((($4 << 2 | 0) + $6 | 0) + -8 | 0) >> 2] | 0;
         $11 = $0 + $10 | 0;
         if ((FUNCTION_TABLE[$2]($11, $3) | 0 | 0) > (-1 | 0)) {
          break label$8
         }
         if ((FUNCTION_TABLE[$2]($11 - $8 | 0, $3) | 0 | 0) > (-1 | 0)) {
          break label$8
         }
        }
        HEAP32[($7 + ($9 << 2 | 0) | 0) >> 2] = $3;
        $84 = $7 + 232 | 0;
        $0 = pntz($7 + 232 | 0 | 0) | 0;
        shr($84 | 0, $0 | 0);
        $9 = $9 + 1 | 0;
        $4 = $0 + $4 | 0;
        label$11 : {
         if ((HEAP32[($7 + 232 | 0) >> 2] | 0 | 0) != (1 | 0)) {
          break label$11
         }
         if (!(HEAP32[($7 + 236 | 0) >> 2] | 0)) {
          break label$4
         }
        }
        $5 = 0;
        $11 = 1;
        $0 = $3;
        $8 = $3 - (HEAP32[($6 + ($4 << 2 | 0) | 0) >> 2] | 0) | 0;
        if ((FUNCTION_TABLE[$2]($8, HEAP32[$7 >> 2] | 0) | 0 | 0) > (0 | 0)) {
         continue label$9
        }
        break label$5;
       };
      }
      $3 = $0;
      break label$4;
     }
     $3 = $0;
    }
    if ($5) {
     break label$3
    }
   }
   cycle($1 | 0, $7 | 0, $9 | 0);
   sift($3 | 0, $1 | 0, $2 | 0, $4 | 0, $6 | 0);
  }
  label$12 : {
   $13 = $7 + 240 | 0;
   if ($13 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $13;
  }
 }
 
 function shl($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  label$1 : {
   label$2 : {
    if ($1 >>> 0 > 31 >>> 0) {
     break label$2
    }
    $2 = HEAP32[$0 >> 2] | 0;
    $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    break label$1;
   }
   $3 = HEAP32[$0 >> 2] | 0;
   HEAP32[($0 + 4 | 0) >> 2] = $3;
   $2 = 0;
   HEAP32[$0 >> 2] = 0;
   $1 = $1 + -32 | 0;
  }
  HEAP32[$0 >> 2] = $2 << $1 | 0;
  HEAP32[($0 + 4 | 0) >> 2] = $2 >>> (32 - $1 | 0) | 0 | ($3 << $1 | 0) | 0;
 }
 
 function pntz($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   $1 = __wasm_ctz_i32((HEAP32[$0 >> 2] | 0) + -1 | 0 | 0) | 0;
   if ($1) {
    break label$1
   }
   $0 = __wasm_ctz_i32(HEAP32[($0 + 4 | 0) >> 2] | 0 | 0) | 0;
   return ($0 ? $0 + 32 | 0 : 0) | 0;
  }
  return $1 | 0;
 }
 
 function cycle($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $3 = 0, $6 = 0, $7 = 0, $4 = 0, $9 = 0, $8 = 0;
  label$1 : {
   $3 = global$0 - 256 | 0;
   $8 = $3;
   if ($3 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $8;
  }
  label$3 : {
   if (($2 | 0) < (2 | 0)) {
    break label$3
   }
   $4 = $1 + ($2 << 2 | 0) | 0;
   HEAP32[$4 >> 2] = $3;
   if (!$0) {
    break label$3
   }
   $5 = $3;
   label$4 : while (1) {
    $6 = $0 >>> 0 < 256 >>> 0 ? $0 : 256;
    memcpy($5 | 0, HEAP32[$1 >> 2] | 0 | 0, $6 | 0) | 0;
    $5 = 0;
    label$5 : while (1) {
     $7 = $1 + ($5 << 2 | 0) | 0;
     $5 = $5 + 1 | 0;
     memcpy(HEAP32[$7 >> 2] | 0 | 0, HEAP32[($1 + ($5 << 2 | 0) | 0) >> 2] | 0 | 0, $6 | 0) | 0;
     HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + $6 | 0;
     if (($5 | 0) != ($2 | 0)) {
      continue label$5
     }
     break label$5;
    };
    $0 = $0 - $6 | 0;
    if (!$0) {
     break label$3
    }
    $5 = HEAP32[$4 >> 2] | 0;
    continue label$4;
   };
  }
  label$6 : {
   $9 = $3 + 256 | 0;
   if ($9 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $9;
  }
 }
 
 function FLAC__format_sample_rate_is_valid($0) {
  $0 = $0 | 0;
  return ($0 + -1 | 0) >>> 0 < 655350 >>> 0 | 0;
 }
 
 function FLAC__format_blocksize_is_subset($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return $0 >>> 0 < 16385 >>> 0 & ($0 >>> 0 < 4609 >>> 0 | $1 >>> 0 > 48e3 >>> 0 | 0) | 0 | 0;
 }
 
 function FLAC__format_sample_rate_is_subset($0) {
  $0 = $0 | 0;
  label$1 : {
   if (($0 + -1 | 0) >>> 0 > 655349 >>> 0) {
    break label$1
   }
   return !(($0 >>> 0) % (10 >>> 0) | 0) | ($0 >>> 0 < 65536 >>> 0 | !(($0 >>> 0) % (1e3 >>> 0) | 0) | 0) | 0 | 0;
  }
  return 0 | 0;
 }
 
 function FLAC__format_seektable_is_legal($0) {
  $0 = $0 | 0;
  var i64toi32_i32$0 = 0, $4$hi = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $4 = 0, $1 = 0, $3 = 0, $5$hi = 0, $2 = 0, $5 = 0;
  label$1 : {
   $1 = HEAP32[$0 >> 2] | 0;
   if ($1) {
    break label$1
   }
   return 1 | 0;
  }
  $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
  $0 = 0;
  i64toi32_i32$0 = 0;
  $4 = 0;
  $4$hi = i64toi32_i32$0;
  $3 = 1;
  label$2 : while (1) {
   i64toi32_i32$0 = $4$hi;
   $5 = $4;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $2 + Math_imul($0, 24) | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $4 = i64toi32_i32$0;
   $4$hi = i64toi32_i32$1;
   label$3 : {
    if ($3 & 1 | 0) {
     break label$3
    }
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$2 = $4;
    i64toi32_i32$0 = -1;
    if ((i64toi32_i32$2 | 0) == (-1 | 0) & ($4$hi | 0) == (i64toi32_i32$0 | 0) | 0) {
     break label$3
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $5$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$0 = $5;
    if ($4$hi >>> 0 > i64toi32_i32$1 >>> 0 | (($4$hi | 0) == (i64toi32_i32$1 | 0) & $4 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$3
    }
    return 0 | 0;
   }
   $3 = 0;
   $0 = $0 + 1 | 0;
   if ($0 >>> 0 < $1 >>> 0) {
    continue label$2
   }
   break label$2;
  };
  return 1 | 0;
 }
 
 function FLAC__format_seektable_sort($0) {
  $0 = $0 | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $2 = 0, i64toi32_i32$0 = 0, $3 = 0, $4 = 0, $1 = 0, i64toi32_i32$2 = 0, $5 = 0, $6$hi = 0, $6 = 0, $40 = 0, $40$hi = 0, $48 = 0, $53 = 0, $58 = 0;
  $1 = 0;
  label$1 : {
   $2 = HEAP32[$0 >> 2] | 0;
   if (!$2) {
    break label$1
   }
   $3 = global$2;
   qsort(HEAP32[($0 + 4 | 0) >> 2] | 0 | 0, $2 | 0, 24 | 0, $3 + 0 | 0 | 0);
   if (!(HEAP32[$0 >> 2] | 0)) {
    break label$1
   }
   $1 = 1;
   label$2 : {
    $4 = HEAP32[$0 >> 2] | 0;
    if ($4 >>> 0 <= 1 >>> 0) {
     break label$2
    }
    $3 = 1;
    label$3 : while (1) {
     label$4 : {
      label$5 : {
       $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       $2 = $5 + Math_imul($3, 24) | 0;
       i64toi32_i32$2 = $2;
       i64toi32_i32$0 = HEAP32[$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($2 + 4 | 0) >> 2] | 0;
       $6 = i64toi32_i32$0;
       $6$hi = i64toi32_i32$1;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$0 = -1;
       i64toi32_i32$3 = -1;
       if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) | 0) {
        break label$5
       }
       i64toi32_i32$2 = $6$hi;
       i64toi32_i32$3 = (Math_imul($1, 24) + $5 | 0) + -24 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
       $40 = i64toi32_i32$2;
       $40$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $6$hi;
       i64toi32_i32$3 = $6;
       i64toi32_i32$2 = $40$hi;
       i64toi32_i32$0 = $40;
       if ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) | 0) {
        break label$4
       }
      }
      $4 = $5 + Math_imul($1, 24) | 0;
      i64toi32_i32$0 = $2;
      i64toi32_i32$3 = HEAP32[$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($2 + 4 | 0) >> 2] | 0;
      $48 = i64toi32_i32$3;
      i64toi32_i32$3 = $4;
      HEAP32[i64toi32_i32$3 >> 2] = $48;
      HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$0 = $2 + 16 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $53 = i64toi32_i32$1;
      i64toi32_i32$1 = $4 + 16 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $53;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$3;
      i64toi32_i32$0 = $2 + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $58 = i64toi32_i32$3;
      i64toi32_i32$3 = $4 + 8 | 0;
      HEAP32[i64toi32_i32$3 >> 2] = $58;
      HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$1;
      $1 = $1 + 1 | 0;
      $4 = HEAP32[$0 >> 2] | 0;
     }
     $3 = $3 + 1 | 0;
     if ($3 >>> 0 < $4 >>> 0) {
      continue label$3
     }
     break label$3;
    };
   }
   if ($1 >>> 0 >= $4 >>> 0) {
    break label$1
   }
   $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   $2 = $1;
   label$6 : while (1) {
    $3 = $5 + Math_imul($2, 24) | 0;
    HEAP32[($3 + 16 | 0) >> 2] = 0;
    i64toi32_i32$3 = $3;
    i64toi32_i32$1 = 0;
    HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$1 = -1;
    HEAP32[i64toi32_i32$3 >> 2] = -1;
    HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$1;
    $2 = $2 + 1 | 0;
    if (($2 | 0) != ($4 | 0)) {
     continue label$6
    }
    break label$6;
   };
  }
  return $1 | 0;
 }
 
 function seekpoint_compare_($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2 = 0, $3 = 0, $2$hi = 0, $3$hi = 0, $11 = 0;
  i64toi32_i32$2 = $0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $2 = i64toi32_i32$0;
  $2$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $3 = i64toi32_i32$1;
  $3$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = $3$hi;
  $11 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < $3 >>> 0 | 0) | 0 ? -1 : 1;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = i64toi32_i32$1;
  i64toi32_i32$1 = $3;
  return (($2 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? 0 : $11) | 0;
 }
 
 function utf8len_($0) {
  $0 = $0 | 0;
  var $2 = 0, $1 = 0, $3 = 0, $4 = 0;
  $1 = 1;
  label$1 : {
   label$2 : {
    $2 = HEAPU8[$0 >> 0] | 0;
    if (!($2 & 128 | 0)) {
     break label$2
    }
    label$3 : {
     if (($2 & 224 | 0 | 0) != (192 | 0)) {
      break label$3
     }
     if (((HEAPU8[($0 + 1 | 0) >> 0] | 0) & 192 | 0 | 0) != (128 | 0)) {
      break label$3
     }
     return (($2 & 254 | 0 | 0) != (192 | 0)) << 1 | 0 | 0;
    }
    label$4 : {
     if (($2 & 240 | 0 | 0) != (224 | 0)) {
      break label$4
     }
     $3 = HEAPU8[($0 + 1 | 0) >> 0] | 0;
     if (($3 & 192 | 0 | 0) != (128 | 0)) {
      break label$4
     }
     $4 = HEAPU8[($0 + 2 | 0) >> 0] | 0;
     if (($4 & 192 | 0 | 0) != (128 | 0)) {
      break label$4
     }
     $1 = 0;
     label$5 : {
      if (($2 | 0) != (224 | 0)) {
       break label$5
      }
      if (($3 & 224 | 0 | 0) == (128 | 0)) {
       break label$2
      }
     }
     label$6 : {
      $0 = $2 + -237 | 0;
      if ($0 >>> 0 > 2 >>> 0) {
       break label$6
      }
      label$7 : {
       switch ($0 | 0) {
       default:
        if (($3 & 224 | 0 | 0) != (160 | 0)) {
         break label$6
        }
        break label$2;
       case 1:
        break label$6;
       case 2:
        break label$7;
       };
      }
      if (($3 | 0) != (191 | 0)) {
       break label$6
      }
      if (($4 & 254 | 0 | 0) == (190 | 0)) {
       break label$2
      }
     }
     return 3 | 0;
    }
    label$9 : {
     if (($2 & 248 | 0 | 0) != (240 | 0)) {
      break label$9
     }
     $1 = HEAPU8[($0 + 1 | 0) >> 0] | 0;
     if (($1 & 192 | 0 | 0) != (128 | 0)) {
      break label$9
     }
     if (((HEAPU8[($0 + 2 | 0) >> 0] | 0) & 192 | 0 | 0) != (128 | 0)) {
      break label$9
     }
     if (((HEAPU8[($0 + 3 | 0) >> 0] | 0) & 192 | 0 | 0) == (128 | 0)) {
      break label$1
     }
    }
    label$10 : {
     if (($2 & 252 | 0 | 0) != (248 | 0)) {
      break label$10
     }
     $1 = HEAPU8[($0 + 1 | 0) >> 0] | 0;
     if (($1 & 192 | 0 | 0) != (128 | 0)) {
      break label$10
     }
     if (((HEAPU8[($0 + 2 | 0) >> 0] | 0) & 192 | 0 | 0) != (128 | 0)) {
      break label$10
     }
     if (((HEAPU8[($0 + 3 | 0) >> 0] | 0) & 192 | 0 | 0) != (128 | 0)) {
      break label$10
     }
     if (((HEAPU8[($0 + 4 | 0) >> 0] | 0) & 192 | 0 | 0) != (128 | 0)) {
      break label$10
     }
     return (($2 | 0) == (248 | 0) ? (($1 & 248 | 0 | 0) == (128 | 0) ? 0 : 5) : 5) | 0;
    }
    $1 = 0;
    if (($2 & 254 | 0 | 0) != (252 | 0)) {
     break label$2
    }
    $3 = HEAPU8[($0 + 1 | 0) >> 0] | 0;
    if (($3 & 192 | 0 | 0) != (128 | 0)) {
     break label$2
    }
    if (((HEAPU8[($0 + 2 | 0) >> 0] | 0) & 192 | 0 | 0) != (128 | 0)) {
     break label$2
    }
    if (((HEAPU8[($0 + 3 | 0) >> 0] | 0) & 192 | 0 | 0) != (128 | 0)) {
     break label$2
    }
    if (((HEAPU8[($0 + 4 | 0) >> 0] | 0) & 192 | 0 | 0) != (128 | 0)) {
     break label$2
    }
    if (((HEAPU8[($0 + 5 | 0) >> 0] | 0) & 192 | 0 | 0) != (128 | 0)) {
     break label$2
    }
    $1 = ($2 | 0) == (252 | 0) ? (($3 & 252 | 0 | 0) == (128 | 0) ? 0 : 6) : 6;
   }
   return $1 | 0;
  }
  return (($2 | 0) == (240 | 0) ? (($1 & 240 | 0 | 0) != (128 | 0)) << 2 | 0 : 4) | 0;
 }
 
 function FLAC__format_cuesheet_is_legal($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $3 = 0, $4 = 0, i64toi32_i32$0 = 0, $7 = 0, i64toi32_i32$3 = 0, $6 = 0, $5 = 0, $8 = 0, $9 = 0, $9$hi = 0, $15 = 0, $16 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            if (!$1) {
             break label$10
            }
            label$11 : {
             i64toi32_i32$2 = $0;
             i64toi32_i32$0 = HEAP32[($0 + 136 | 0) >> 2] | 0;
             i64toi32_i32$1 = HEAP32[($0 + 140 | 0) >> 2] | 0;
             $9 = i64toi32_i32$0;
             $9$hi = i64toi32_i32$1;
             i64toi32_i32$2 = i64toi32_i32$0;
             i64toi32_i32$0 = 0;
             i64toi32_i32$3 = 88199;
             if (i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
              break label$11
             }
             $0 = 0;
             if (!$2) {
              break label$1
             }
             HEAP32[$2 >> 2] = global$1 + 6712 | 0;
             return 0 | 0;
            }
            i64toi32_i32$2 = $9$hi;
            i64toi32_i32$1 = 0;
            i64toi32_i32$1 = __wasm_i64_urem($9 | 0, i64toi32_i32$2 | 0, 588 | 0, i64toi32_i32$1 | 0) | 0;
            i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
            if (!(i64toi32_i32$1 | i64toi32_i32$2 | 0)) {
             break label$9
            }
            $0 = 0;
            if (!$2) {
             break label$1
            }
            HEAP32[$2 >> 2] = global$1 + 6777 | 0;
            return 0 | 0;
           }
           $3 = HEAP32[($0 + 148 | 0) >> 2] | 0;
           if ($3) {
            break label$8
           }
           break label$2;
          }
          $4 = HEAP32[($0 + 148 | 0) >> 2] | 0;
          if (!$4) {
           break label$2
          }
          $5 = HEAP32[($0 + 152 | 0) >> 2] | 0;
          $6 = $4 + -1 | 0;
          if ((HEAPU8[(($5 + ($6 << 5 | 0) | 0) + 8 | 0) >> 0] | 0 | 0) != (170 | 0)) {
           break label$4
          }
          $3 = 0;
          label$12 : while (1) {
           $0 = $5 + ($3 << 5 | 0) | 0;
           $1 = HEAPU8[($0 + 8 | 0) >> 0] | 0;
           if (!$1) {
            break label$3
           }
           label$13 : {
            if (($1 | 0) == (170 | 0)) {
             break label$13
            }
            if ($1 >>> 0 < 100 >>> 0) {
             break label$13
            }
            $0 = 0;
            if (!$2) {
             break label$1
            }
            HEAP32[$2 >> 2] = global$1 + 7003 | 0;
            return 0 | 0;
           }
           label$14 : {
            i64toi32_i32$3 = $0;
            i64toi32_i32$2 = HEAP32[$0 >> 2] | 0;
            i64toi32_i32$1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
            $15 = i64toi32_i32$2;
            i64toi32_i32$2 = 0;
            i64toi32_i32$2 = __wasm_i64_urem($15 | 0, i64toi32_i32$1 | 0, 588 | 0, i64toi32_i32$2 | 0) | 0;
            i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
            if (!(i64toi32_i32$2 | i64toi32_i32$1 | 0)) {
             break label$14
            }
            $0 = 0;
            if (!$2) {
             break label$1
            }
            label$15 : {
             if (($3 | 0) != ($6 | 0)) {
              break label$15
             }
             HEAP32[$2 >> 2] = global$1 + 7052 | 0;
             return 0 | 0;
            }
            HEAP32[$2 >> 2] = global$1 + 7124 | 0;
            return 0 | 0;
           }
           $7 = HEAPU8[($0 + 23 | 0) >> 0] | 0;
           label$16 : {
            label$17 : {
             label$18 : {
              label$19 : {
               if ($3 >>> 0 >= $6 >>> 0) {
                break label$19
               }
               if (!$7) {
                break label$5
               }
               if ((HEAPU8[((HEAP32[($0 + 24 | 0) >> 2] | 0) + 8 | 0) >> 0] | 0) >>> 0 < 2 >>> 0) {
                break label$18
               }
               break label$6;
              }
              if (!$7) {
               break label$17
              }
             }
             $8 = HEAP32[($0 + 24 | 0) >> 2] | 0;
             $0 = 0;
             label$20 : while (1) {
              $1 = $8 + ($0 << 4 | 0) | 0;
              i64toi32_i32$3 = $1;
              i64toi32_i32$1 = HEAP32[$1 >> 2] | 0;
              i64toi32_i32$2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
              $16 = i64toi32_i32$1;
              i64toi32_i32$1 = 0;
              i64toi32_i32$1 = __wasm_i64_urem($16 | 0, i64toi32_i32$2 | 0, 588 | 0, i64toi32_i32$1 | 0) | 0;
              i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
              i64toi32_i32$3 = i64toi32_i32$1;
              i64toi32_i32$1 = 0;
              i64toi32_i32$0 = 0;
              if ((i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0) {
               break label$16
              }
              label$21 : {
               if (!$0) {
                break label$21
               }
               if (((HEAPU8[($1 + -8 | 0) >> 0] | 0) + 1 | 0 | 0) != (HEAPU8[($1 + 8 | 0) >> 0] | 0 | 0)) {
                break label$7
               }
              }
              $0 = $0 + 1 | 0;
              if ($0 >>> 0 < $7 >>> 0) {
               continue label$20
              }
              break label$20;
             };
            }
            $0 = 1;
            $3 = $3 + 1 | 0;
            if (($3 | 0) != ($4 | 0)) {
             continue label$12
            }
            break label$1;
           }
           break label$12;
          };
          $0 = 0;
          if (!$2) {
           break label$1
          }
          HEAP32[$2 >> 2] = global$1 + 7296 | 0;
          return 0 | 0;
         }
         $6 = $3 + -1 | 0;
         $5 = HEAP32[($0 + 152 | 0) >> 2] | 0;
         $4 = 0;
         label$22 : while (1) {
          $0 = $5 + ($4 << 5 | 0) | 0;
          if (!(HEAPU8[($0 + 8 | 0) >> 0] | 0)) {
           break label$3
          }
          $7 = HEAPU8[($0 + 23 | 0) >> 0] | 0;
          label$23 : {
           label$24 : {
            label$25 : {
             if ($4 >>> 0 >= $6 >>> 0) {
              break label$25
             }
             if (!$7) {
              break label$5
             }
             if ((HEAPU8[((HEAP32[($0 + 24 | 0) >> 2] | 0) + 8 | 0) >> 0] | 0) >>> 0 > 1 >>> 0) {
              break label$6
             }
             break label$24;
            }
            if (!$7) {
             break label$23
            }
           }
           $8 = $0 + 24 | 0;
           $0 = 0;
           label$26 : while (1) {
            label$27 : {
             if (!$0) {
              break label$27
             }
             $1 = (HEAP32[$8 >> 2] | 0) + ($0 << 4 | 0) | 0;
             if (((HEAPU8[($1 + -8 | 0) >> 0] | 0) + 1 | 0 | 0) != (HEAPU8[($1 + 8 | 0) >> 0] | 0 | 0)) {
              break label$7
             }
            }
            $0 = $0 + 1 | 0;
            if ($0 >>> 0 < $7 >>> 0) {
             continue label$26
            }
            break label$26;
           };
          }
          $0 = 1;
          $4 = $4 + 1 | 0;
          if (($4 | 0) != ($3 | 0)) {
           continue label$22
          }
          break label$1;
         };
        }
        $0 = 0;
        if (!$2) {
         break label$1
        }
        HEAP32[$2 >> 2] = global$1 + 7371 | 0;
        break label$1;
       }
       $0 = 0;
       if (!$2) {
        break label$1
       }
       HEAP32[$2 >> 2] = global$1 + 7244 | 0;
       return 0 | 0;
      }
      $0 = 0;
      if (!$2) {
       break label$1
      }
      HEAP32[$2 >> 2] = global$1 + 7193 | 0;
      return 0 | 0;
     }
     $0 = 0;
     if (!$2) {
      break label$1
     }
     HEAP32[$2 >> 2] = global$1 + 6902 | 0;
     return 0 | 0;
    }
    $0 = 0;
    if (!$2) {
     break label$1
    }
    HEAP32[$2 >> 2] = global$1 + 6963 | 0;
    return 0 | 0;
   }
   $0 = 0;
   if (!$2) {
    break label$1
   }
   HEAP32[$2 >> 2] = global$1 + 6848 | 0;
   return 0 | 0;
  }
  return $0 | 0;
 }
 
 function FLAC__format_picture_is_legal($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0, $4 = 0;
  label$1 : {
   label$2 : {
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    $3 = HEAPU8[$2 >> 0] | 0;
    if (!$3) {
     break label$2
    }
    label$3 : {
     label$4 : while (1) {
      if ((($3 + -32 | 0) & 255 | 0) >>> 0 >= 95 >>> 0) {
       break label$3
      }
      $2 = $2 + 1 | 0;
      $3 = HEAPU8[$2 >> 0] | 0;
      if (!$3) {
       break label$2
      }
      continue label$4;
     };
    }
    $4 = 0;
    if (!$1) {
     break label$1
    }
    HEAP32[$1 >> 2] = global$1 + 7420 | 0;
    return 0 | 0;
   }
   $4 = 1;
   $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   if (!(HEAPU8[$3 >> 0] | 0)) {
    break label$1
   }
   label$5 : while (1) {
    label$6 : {
     $2 = utf8len_($3 | 0) | 0;
     if ($2) {
      break label$6
     }
     $4 = 0;
     if (!$1) {
      break label$1
     }
     HEAP32[$1 >> 2] = global$1 + 7494 | 0;
     return 0 | 0;
    }
    $3 = $3 + $2 | 0;
    if (HEAPU8[$3 >> 0] | 0) {
     continue label$5
    }
    break label$5;
   };
  }
  return $4 | 0;
 }
 
 function FLAC__format_get_max_rice_partition_order_from_blocksize_limited_max_and_predictor_order($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  label$1 : {
   label$2 : while (1) {
    $3 = $0;
    if (!$3) {
     break label$1
    }
    $0 = $3 + -1 | 0;
    if (($1 >>> $3 | 0) >>> 0 <= $2 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $3 | 0;
 }
 
 function FLAC__format_get_max_rice_partition_order_from_blocksize($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = 0;
  label$1 : {
   label$2 : {
    if ($0 & 1 | 0) {
     break label$2
    }
    label$3 : while (1) {
     $1 = $1 + 1 | 0;
     $2 = $0 & 2 | 0;
     $0 = $0 >>> 1 | 0;
     if (!$2) {
      continue label$3
     }
     break label$3;
    };
    $0 = 15;
    if ($1 >>> 0 > 14 >>> 0) {
     break label$1
    }
   }
   $0 = $1;
  }
  return $0 | 0;
 }
 
 function FLAC__format_entropy_coding_method_partitioned_rice_contents_init($0) {
  $0 = $0 | 0;
  HEAP32[($0 + 8 | 0) >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[($0 + 4 | 0) >> 2] = 0;
 }
 
 function FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   $1 = HEAP32[$0 >> 2] | 0;
   if (!$1) {
    break label$1
   }
   dlfree($1 | 0);
  }
  label$2 : {
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   if (!$1) {
    break label$2
   }
   dlfree($1 | 0);
  }
  HEAP32[($0 + 8 | 0) >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[($0 + 4 | 0) >> 2] = 0;
 }
 
 function FLAC__format_entropy_coding_method_partitioned_rice_contents_ensure_size($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $2 = 0, $3 = 0, $5 = 0;
  $2 = 1;
  label$1 : {
   if ((HEAP32[($0 + 8 | 0) >> 2] | 0) >>> 0 >= $1 >>> 0) {
    break label$1
   }
   $2 = HEAP32[$0 >> 2] | 0;
   $3 = 4 << $1 | 0;
   $4 = dlrealloc($2 | 0, $3 | 0) | 0;
   label$2 : {
    if ($1 >>> 0 > 29 >>> 0) {
     break label$2
    }
    if ($4) {
     break label$2
    }
    dlfree($2 | 0);
   }
   HEAP32[$0 >> 2] = $4;
   $2 = 0;
   if (!$4) {
    break label$1
   }
   $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   $4 = dlrealloc($5 | 0, $3 | 0) | 0;
   label$3 : {
    if ($1 >>> 0 > 29 >>> 0) {
     break label$3
    }
    if ($4) {
     break label$3
    }
    dlfree($5 | 0);
   }
   HEAP32[($0 + 4 | 0) >> 2] = $4;
   if (!$4) {
    break label$1
   }
   memset($4 | 0, 0 | 0, $3 | 0) | 0;
   HEAP32[($0 + 8 | 0) >> 2] = $1;
   $2 = 1;
  }
  return $2 | 0;
 }
 
 function FLAC__ogg_encoder_aspect_init($0) {
  $0 = $0 | 0;
  var i64toi32_i32$0 = 0, $1 = 0;
  $1 = 0;
  label$1 : {
   if (ogg_stream_init($0 + 8 | 0 | 0, HEAP32[$0 >> 2] | 0 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   HEAP32[($0 + 392 | 0) >> 2] = 0;
   HEAP32[($0 + 396 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = 1;
   HEAP32[($0 + 384 | 0) >> 2] = 0;
   HEAP32[($0 + 388 | 0) >> 2] = i64toi32_i32$0;
   $1 = 1;
  }
  return $1 | 0;
 }
 
 function FLAC__ogg_encoder_aspect_finish($0) {
  $0 = $0 | 0;
  ogg_stream_clear($0 + 8 | 0 | 0) | 0;
 }
 
 function FLAC__ogg_encoder_aspect_set_serial_number($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 >> 2] = $1;
 }
 
 function FLAC__ogg_encoder_aspect_set_defaults($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0;
  i64toi32_i32$1 = $0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
 }
 
 function FLAC__ogg_encoder_aspect_write_callback_wrapper($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, $9 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $13$hi = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, i64toi32_i32$3 = 0, $10 = 0, $13 = 0, $39 = 0, $12 = 0, $11 = 0, $32 = 0, $34$hi = 0, $67 = 0, $72 = 0, $77 = 0, $82 = 0, $85 = 0, $166 = 0, $168$hi = 0;
  label$1 : {
   $9 = global$0 - 96 | 0;
   $11 = $9;
   if ($9 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $11;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     if (!(HEAP32[($0 + 384 | 0) >> 2] | 0)) {
      break label$5
     }
     i64toi32_i32$1 = $9 + 72 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $10 = $9 + 80 | 0;
     i64toi32_i32$1 = $10;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $9 + 88 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $9;
     i64toi32_i32$0 = 0;
     HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] = i64toi32_i32$0;
     $32 = $10;
     i64toi32_i32$2 = $0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 392 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 396 | 0) >> 2] | 0;
     $34$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $13 = $3;
     $13$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $34$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$3 = $3;
     i64toi32_i32$4 = i64toi32_i32$2 + $3 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < $3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$2 = $32;
     HEAP32[i64toi32_i32$2 >> 2] = i64toi32_i32$4;
     HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
     label$6 : {
      label$7 : {
       label$8 : {
        if (!(HEAP32[($0 + 388 | 0) >> 2] | 0)) {
         break label$8
        }
        if (($2 | 0) != (38 | 0)) {
         break label$6
        }
        HEAP8[$9 >> 0] = HEAPU8[global$3 >> 0] | 0;
        $30 = HEAP32[global$4 >> 2] | 0;
        $2 = HEAPU8[$30 >> 0] | 0 | ((HEAPU8[($30 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($30 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($30 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        $39 = 1;
        HEAP8[($9 + 5 | 0) >> 0] = $39;
        HEAP8[($9 + 6 | 0) >> 0] = $39 >>> 8 | 0;
        HEAP8[($9 + 1 | 0) >> 0] = $2;
        HEAP8[($9 + 2 | 0) >> 0] = $2 >>> 8 | 0;
        HEAP8[($9 + 3 | 0) >> 0] = $2 >>> 16 | 0;
        HEAP8[($9 + 4 | 0) >> 0] = $2 >>> 24 | 0;
        $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
        $31 = global$5;
        $33 = HEAPU8[$31 >> 0] | 0 | ((HEAPU8[($31 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($31 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($31 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        HEAP8[($9 + 9 | 0) >> 0] = $33;
        HEAP8[($9 + 10 | 0) >> 0] = $33 >>> 8 | 0;
        HEAP8[($9 + 11 | 0) >> 0] = $33 >>> 16 | 0;
        HEAP8[($9 + 12 | 0) >> 0] = $33 >>> 24 | 0;
        HEAP8[($9 + 8 | 0) >> 0] = $2;
        HEAP8[($9 + 7 | 0) >> 0] = $2 >>> 8 | 0;
        i64toi32_i32$1 = $1 + 30 | 0;
        i64toi32_i32$5 = HEAPU8[i64toi32_i32$1 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        i64toi32_i32$2 = HEAPU8[(i64toi32_i32$1 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        $67 = i64toi32_i32$5;
        i64toi32_i32$5 = $9 + 43 | 0;
        $34 = $67;
        HEAP8[i64toi32_i32$5 >> 0] = $34;
        HEAP8[(i64toi32_i32$5 + 1 | 0) >> 0] = $34 >>> 8 | 0;
        HEAP8[(i64toi32_i32$5 + 2 | 0) >> 0] = $34 >>> 16 | 0;
        HEAP8[(i64toi32_i32$5 + 3 | 0) >> 0] = $34 >>> 24 | 0;
        HEAP8[(i64toi32_i32$5 + 4 | 0) >> 0] = i64toi32_i32$2;
        HEAP8[(i64toi32_i32$5 + 5 | 0) >> 0] = i64toi32_i32$2 >>> 8 | 0;
        HEAP8[(i64toi32_i32$5 + 6 | 0) >> 0] = i64toi32_i32$2 >>> 16 | 0;
        HEAP8[(i64toi32_i32$5 + 7 | 0) >> 0] = i64toi32_i32$2 >>> 24 | 0;
        i64toi32_i32$1 = $1 + 24 | 0;
        i64toi32_i32$2 = HEAPU8[i64toi32_i32$1 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        i64toi32_i32$5 = HEAPU8[(i64toi32_i32$1 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        $72 = i64toi32_i32$2;
        i64toi32_i32$2 = $9 + 37 | 0;
        $35 = $72;
        HEAP8[i64toi32_i32$2 >> 0] = $35;
        HEAP8[(i64toi32_i32$2 + 1 | 0) >> 0] = $35 >>> 8 | 0;
        HEAP8[(i64toi32_i32$2 + 2 | 0) >> 0] = $35 >>> 16 | 0;
        HEAP8[(i64toi32_i32$2 + 3 | 0) >> 0] = $35 >>> 24 | 0;
        HEAP8[(i64toi32_i32$2 + 4 | 0) >> 0] = i64toi32_i32$5;
        HEAP8[(i64toi32_i32$2 + 5 | 0) >> 0] = i64toi32_i32$5 >>> 8 | 0;
        HEAP8[(i64toi32_i32$2 + 6 | 0) >> 0] = i64toi32_i32$5 >>> 16 | 0;
        HEAP8[(i64toi32_i32$2 + 7 | 0) >> 0] = i64toi32_i32$5 >>> 24 | 0;
        i64toi32_i32$1 = $1 + 16 | 0;
        i64toi32_i32$5 = HEAPU8[i64toi32_i32$1 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        i64toi32_i32$2 = HEAPU8[(i64toi32_i32$1 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        $77 = i64toi32_i32$5;
        i64toi32_i32$5 = $9 + 29 | 0;
        $36 = $77;
        HEAP8[i64toi32_i32$5 >> 0] = $36;
        HEAP8[(i64toi32_i32$5 + 1 | 0) >> 0] = $36 >>> 8 | 0;
        HEAP8[(i64toi32_i32$5 + 2 | 0) >> 0] = $36 >>> 16 | 0;
        HEAP8[(i64toi32_i32$5 + 3 | 0) >> 0] = $36 >>> 24 | 0;
        HEAP8[(i64toi32_i32$5 + 4 | 0) >> 0] = i64toi32_i32$2;
        HEAP8[(i64toi32_i32$5 + 5 | 0) >> 0] = i64toi32_i32$2 >>> 8 | 0;
        HEAP8[(i64toi32_i32$5 + 6 | 0) >> 0] = i64toi32_i32$2 >>> 16 | 0;
        HEAP8[(i64toi32_i32$5 + 7 | 0) >> 0] = i64toi32_i32$2 >>> 24 | 0;
        i64toi32_i32$1 = $1 + 8 | 0;
        i64toi32_i32$2 = HEAPU8[i64toi32_i32$1 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        i64toi32_i32$5 = HEAPU8[(i64toi32_i32$1 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        $82 = i64toi32_i32$2;
        i64toi32_i32$2 = $9 + 21 | 0;
        $37 = $82;
        HEAP8[i64toi32_i32$2 >> 0] = $37;
        HEAP8[(i64toi32_i32$2 + 1 | 0) >> 0] = $37 >>> 8 | 0;
        HEAP8[(i64toi32_i32$2 + 2 | 0) >> 0] = $37 >>> 16 | 0;
        HEAP8[(i64toi32_i32$2 + 3 | 0) >> 0] = $37 >>> 24 | 0;
        HEAP8[(i64toi32_i32$2 + 4 | 0) >> 0] = i64toi32_i32$5;
        HEAP8[(i64toi32_i32$2 + 5 | 0) >> 0] = i64toi32_i32$5 >>> 8 | 0;
        HEAP8[(i64toi32_i32$2 + 6 | 0) >> 0] = i64toi32_i32$5 >>> 16 | 0;
        HEAP8[(i64toi32_i32$2 + 7 | 0) >> 0] = i64toi32_i32$5 >>> 24 | 0;
        i64toi32_i32$1 = $1;
        i64toi32_i32$5 = HEAPU8[i64toi32_i32$1 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        i64toi32_i32$2 = HEAPU8[(i64toi32_i32$1 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        $85 = i64toi32_i32$5;
        i64toi32_i32$5 = $9;
        $38 = $85;
        HEAP8[(i64toi32_i32$5 + 13 | 0) >> 0] = $38;
        HEAP8[(i64toi32_i32$5 + 14 | 0) >> 0] = $38 >>> 8 | 0;
        HEAP8[(i64toi32_i32$5 + 15 | 0) >> 0] = $38 >>> 16 | 0;
        HEAP8[(i64toi32_i32$5 + 16 | 0) >> 0] = $38 >>> 24 | 0;
        HEAP8[(i64toi32_i32$5 + 17 | 0) >> 0] = i64toi32_i32$2;
        HEAP8[(i64toi32_i32$5 + 18 | 0) >> 0] = i64toi32_i32$2 >>> 8 | 0;
        HEAP8[(i64toi32_i32$5 + 19 | 0) >> 0] = i64toi32_i32$2 >>> 16 | 0;
        HEAP8[(i64toi32_i32$5 + 20 | 0) >> 0] = i64toi32_i32$2 >>> 24 | 0;
        i64toi32_i32$2 = 1;
        HEAP32[(i64toi32_i32$5 + 68 | 0) >> 2] = 51;
        HEAP32[(i64toi32_i32$5 + 72 | 0) >> 2] = i64toi32_i32$2;
        HEAP32[(i64toi32_i32$5 + 64 | 0) >> 2] = i64toi32_i32$5;
        HEAP32[($0 + 388 | 0) >> 2] = 0;
        break label$7;
       }
       HEAP32[($9 + 68 | 0) >> 2] = $2;
       HEAP32[($9 + 64 | 0) >> 2] = $1;
      }
      label$9 : {
       if (!$5) {
        break label$9
       }
       HEAP32[($9 + 76 | 0) >> 2] = 1;
      }
      $1 = $0 + 8 | 0;
      if (ogg_stream_packetin($1 | 0, $9 + 64 | 0 | 0) | 0) {
       break label$6
      }
      $2 = $0 + 368 | 0;
      label$10 : {
       if ($3) {
        break label$10
       }
       label$11 : while (1) {
        if (!(ogg_stream_flush($1 | 0, $2 | 0) | 0)) {
         break label$4
        }
        if (FUNCTION_TABLE[$6]($7, HEAP32[($0 + 368 | 0) >> 2] | 0, HEAP32[($0 + 372 | 0) >> 2] | 0, 0, $4, $8) | 0) {
         break label$6
        }
        if (!(FUNCTION_TABLE[$6]($7, HEAP32[($0 + 376 | 0) >> 2] | 0, HEAP32[($0 + 380 | 0) >> 2] | 0, 0, $4, $8) | 0)) {
         continue label$11
        }
        break label$6;
       };
      }
      label$12 : while (1) {
       if (!(ogg_stream_pageout($1 | 0, $2 | 0) | 0)) {
        break label$4
       }
       if (FUNCTION_TABLE[$6]($7, HEAP32[($0 + 368 | 0) >> 2] | 0, HEAP32[($0 + 372 | 0) >> 2] | 0, 0, $4, $8) | 0) {
        break label$6
       }
       if (!(FUNCTION_TABLE[$6]($7, HEAP32[($0 + 376 | 0) >> 2] | 0, HEAP32[($0 + 380 | 0) >> 2] | 0, 0, $4, $8) | 0)) {
        continue label$12
       }
       break label$12;
      };
     }
     $6 = 1;
     break label$3;
    }
    $6 = 1;
    if (($2 | 0) != (4 | 0)) {
     break label$3
    }
    if ($4 | $3 | 0) {
     break label$3
    }
    $4 = global$5;
    if ((HEAPU8[$1 >> 0] | 0 | ((HEAPU8[($1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0 | 0) != (HEAPU8[$4 >> 0] | 0 | ((HEAPU8[($4 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($4 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($4 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0 | 0)) {
     break label$3
    }
    HEAP32[($0 + 384 | 0) >> 2] = 1;
    i64toi32_i32$2 = 0;
    $13 = $3;
    $13$hi = i64toi32_i32$2;
   }
   $166 = $0;
   i64toi32_i32$1 = $0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 392 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 396 | 0) >> 2] | 0;
   $168$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $13$hi;
   i64toi32_i32$5 = $168$hi;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$2 = $13$hi;
   i64toi32_i32$3 = $13;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   i64toi32_i32$1 = $166;
   HEAP32[(i64toi32_i32$1 + 392 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(i64toi32_i32$1 + 396 | 0) >> 2] = i64toi32_i32$4;
   $6 = 0;
  }
  label$13 : {
   $12 = $9 + 96 | 0;
   if ($12 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $12;
  }
  return $6 | 0;
 }
 
 function FLAC__bitreader_new() {
  return dlcalloc(1 | 0, 44 | 0) | 0 | 0;
 }
 
 function FLAC__bitreader_delete($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   $1 = HEAP32[$0 >> 2] | 0;
   if (!$1) {
    break label$1
   }
   dlfree($1 | 0);
  }
  dlfree($0 | 0);
 }
 
 function FLAC__bitreader_free($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1 = 0;
  label$1 : {
   $1 = HEAP32[$0 >> 2] | 0;
   if (!$1) {
    break label$1
   }
   dlfree($1 | 0);
  }
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function FLAC__bitreader_init($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $3 = 0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[($0 + 8 | 0) >> 2] = 0;
  HEAP32[($0 + 12 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0 + 4 | 0) >> 2] = 2048;
  i64toi32_i32$1 = $0 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $3 = dlmalloc(8192 | 0) | 0;
  HEAP32[$0 >> 2] = $3;
  label$1 : {
   if ($3) {
    break label$1
   }
   return 0 | 0;
  }
  HEAP32[($0 + 40 | 0) >> 2] = $2;
  HEAP32[($0 + 36 | 0) >> 2] = $1;
  return 1 | 0;
 }
 
 function FLAC__bitreader_clear($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  return 1 | 0;
 }
 
 function FLAC__bitreader_reset_read_crc16($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$1 = 0;
  HEAP32[($0 + 24 | 0) >> 2] = $1;
  i64toi32_i32$1 = HEAP32[($0 + 20 | 0) >> 2] | 0;
  HEAP32[($0 + 28 | 0) >> 2] = HEAP32[($0 + 16 | 0) >> 2] | 0;
  HEAP32[($0 + 32 | 0) >> 2] = i64toi32_i32$1;
 }
 
 function FLAC__bitreader_get_read_crc16($0) {
  $0 = $0 | 0;
  var $4 = 0, $2 = 0, $5 = 0, $3 = 0, $6 = 0, $1 = 0, $7 = 0;
  label$1 : {
   label$2 : {
    $1 = HEAP32[($0 + 16 | 0) >> 2] | 0;
    $2 = HEAP32[($0 + 28 | 0) >> 2] | 0;
    if ($1 >>> 0 > $2 >>> 0) {
     break label$2
    }
    $3 = $2;
    break label$1;
   }
   label$3 : {
    $4 = HEAP32[($0 + 32 | 0) >> 2] | 0;
    if ($4) {
     break label$3
    }
    $3 = $2;
    break label$1;
   }
   $3 = $2 + 1 | 0;
   HEAP32[($0 + 28 | 0) >> 2] = $3;
   $5 = HEAP32[($0 + 24 | 0) >> 2] | 0;
   label$4 : {
    if ($4 >>> 0 > 31 >>> 0) {
     break label$4
    }
    $6 = HEAP32[((HEAP32[$0 >> 2] | 0) + ($2 << 2 | 0) | 0) >> 2] | 0;
    label$5 : while (1) {
     $5 = (($5 << 8 | 0) & 65280 | 0) ^ (HEAPU16[(global$6 + (((($6 >>> (24 - $4 | 0) | 0) & 255 | 0) ^ ($5 >>> 8 | 0) | 0) << 1 | 0) | 0) >> 1] | 0) | 0;
     $2 = $4 >>> 0 < 24 >>> 0;
     $7 = $4 + 8 | 0;
     $4 = $7;
     if ($2) {
      continue label$5
     }
     break label$5;
    };
    HEAP32[($0 + 32 | 0) >> 2] = $7;
   }
   HEAP32[($0 + 32 | 0) >> 2] = 0;
   HEAP32[($0 + 24 | 0) >> 2] = $5;
  }
  $4 = FLAC__crc16_update_words32((HEAP32[$0 >> 2] | 0) + ($3 << 2 | 0) | 0 | 0, $1 - $3 | 0 | 0, HEAPU16[($0 + 24 | 0) >> 1] | 0 | 0) | 0;
  HEAP32[($0 + 28 | 0) >> 2] = 0;
  HEAP32[($0 + 24 | 0) >> 2] = $4;
  label$6 : {
   $2 = HEAP32[($0 + 20 | 0) >> 2] | 0;
   if (!$2) {
    break label$6
   }
   $5 = HEAP32[($0 + 32 | 0) >> 2] | 0;
   if ($5 >>> 0 >= $2 >>> 0) {
    break label$6
   }
   $6 = HEAP32[((HEAP32[$0 >> 2] | 0) + ((HEAP32[($0 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
   label$7 : while (1) {
    $4 = (($4 << 8 | 0) & 65280 | 0) ^ (HEAPU16[(global$6 + ((($4 >>> 8 | 0) ^ (($6 >>> (24 - $5 | 0) | 0) & 255 | 0) | 0) << 1 | 0) | 0) >> 1] | 0) | 0;
    $5 = $5 + 8 | 0;
    if ($5 >>> 0 < $2 >>> 0) {
     continue label$7
    }
    break label$7;
   };
   HEAP32[($0 + 32 | 0) >> 2] = $5;
   HEAP32[($0 + 24 | 0) >> 2] = $4;
  }
  return $4 | 0;
 }
 
 function FLAC__bitreader_is_consumed_byte_aligned($0) {
  $0 = $0 | 0;
  return !((HEAPU8[($0 + 20 | 0) >> 0] | 0) & 7 | 0) | 0;
 }
 
 function FLAC__bitreader_bits_left_for_byte_alignment($0) {
  $0 = $0 | 0;
  return 8 - ((HEAP32[($0 + 20 | 0) >> 2] | 0) & 7 | 0) | 0 | 0;
 }
 
 function FLAC__bitreader_get_input_bits_unconsumed($0) {
  $0 = $0 | 0;
  return ((((HEAP32[($0 + 8 | 0) >> 2] | 0) - (HEAP32[($0 + 16 | 0) >> 2] | 0) | 0) << 5 | 0) + ((HEAP32[($0 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) - (HEAP32[($0 + 20 | 0) >> 2] | 0) | 0 | 0;
 }
 
 function FLAC__bitreader_read_raw_uint32($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $4 = 0, $3 = 0, $6 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$2) {
      break label$3
     }
     label$4 : {
      label$5 : while (1) {
       $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
       $4 = HEAP32[($0 + 16 | 0) >> 2] | 0;
       $5 = HEAP32[($0 + 20 | 0) >> 2] | 0;
       if ((((($3 - $4 | 0) << 5 | 0) + ((HEAP32[($0 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) - $5 | 0) >>> 0 >= $2 >>> 0) {
        break label$4
       }
       if (bitreader_read_from_client_($0 | 0) | 0) {
        continue label$5
       }
       break label$5;
      };
      return 0 | 0;
     }
     label$6 : {
      if ($3 >>> 0 <= $4 >>> 0) {
       break label$6
      }
      label$7 : {
       if (!$5) {
        break label$7
       }
       $6 = HEAP32[$0 >> 2] | 0;
       $4 = (HEAP32[($6 + ($4 << 2 | 0) | 0) >> 2] | 0) & (-1 >>> $5 | 0) | 0;
       label$8 : {
        $3 = 32 - $5 | 0;
        if ($3 >>> 0 <= $2 >>> 0) {
         break label$8
        }
        HEAP32[$1 >> 2] = $4 >>> ($3 - $2 | 0) | 0;
        HEAP32[($0 + 20 | 0) >> 2] = (HEAP32[($0 + 20 | 0) >> 2] | 0) + $2 | 0;
        break label$2;
       }
       HEAP32[$1 >> 2] = $4;
       HEAP32[($0 + 20 | 0) >> 2] = 0;
       $5 = 1;
       HEAP32[($0 + 16 | 0) >> 2] = (HEAP32[($0 + 16 | 0) >> 2] | 0) + 1 | 0;
       $2 = $2 - $3 | 0;
       if (!$2) {
        break label$1
       }
       $5 = (HEAP32[$1 >> 2] | 0) << $2 | 0;
       HEAP32[$1 >> 2] = $5;
       HEAP32[$1 >> 2] = (HEAP32[($6 + ((HEAP32[($0 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) >>> (32 - $2 | 0) | 0 | $5 | 0;
       HEAP32[($0 + 20 | 0) >> 2] = $2;
       return 1 | 0;
      }
      $5 = HEAP32[((HEAP32[$0 >> 2] | 0) + ($4 << 2 | 0) | 0) >> 2] | 0;
      label$9 : {
       if ($2 >>> 0 > 31 >>> 0) {
        break label$9
       }
       HEAP32[$1 >> 2] = $5 >>> (32 - $2 | 0) | 0;
       HEAP32[($0 + 20 | 0) >> 2] = $2;
       break label$2;
      }
      HEAP32[$1 >> 2] = $5;
      HEAP32[($0 + 16 | 0) >> 2] = (HEAP32[($0 + 16 | 0) >> 2] | 0) + 1 | 0;
      return 1 | 0;
     }
     $4 = HEAP32[((HEAP32[$0 >> 2] | 0) + ($4 << 2 | 0) | 0) >> 2] | 0;
     label$10 : {
      if (!$5) {
       break label$10
      }
      HEAP32[$1 >> 2] = ($4 & (-1 >>> $5 | 0) | 0) >>> (32 - ($2 + $5 | 0) | 0) | 0;
      HEAP32[($0 + 20 | 0) >> 2] = (HEAP32[($0 + 20 | 0) >> 2] | 0) + $2 | 0;
      break label$2;
     }
     HEAP32[$1 >> 2] = $4 >>> (32 - $2 | 0) | 0;
     HEAP32[($0 + 20 | 0) >> 2] = (HEAP32[($0 + 20 | 0) >> 2] | 0) + $2 | 0;
     break label$2;
    }
    HEAP32[$1 >> 2] = 0;
   }
   $5 = 1;
  }
  return $5 | 0;
 }
 
 function bitreader_read_from_client_($0) {
  $0 = $0 | 0;
  var $3 = 0, $6 = 0, $4 = 0, $7 = 0, $8 = 0, $1 = 0, $5 = 0, $2 = 0, $10 = 0, $9 = 0, $186 = 0;
  label$1 : {
   $1 = global$0 - 16 | 0;
   $9 = $1;
   if ($1 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $9;
  }
  label$3 : {
   label$4 : {
    $2 = HEAP32[($0 + 16 | 0) >> 2] | 0;
    if ($2) {
     break label$4
    }
    $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    break label$3;
   }
   label$5 : {
    label$6 : {
     $4 = HEAP32[($0 + 28 | 0) >> 2] | 0;
     if ($2 >>> 0 > $4 >>> 0) {
      break label$6
     }
     $5 = $4;
     break label$5;
    }
    label$7 : {
     $3 = HEAP32[($0 + 32 | 0) >> 2] | 0;
     if ($3) {
      break label$7
     }
     $5 = $4;
     break label$5;
    }
    $5 = $4 + 1 | 0;
    HEAP32[($0 + 28 | 0) >> 2] = $5;
    $6 = HEAP32[($0 + 24 | 0) >> 2] | 0;
    label$8 : {
     if ($3 >>> 0 > 31 >>> 0) {
      break label$8
     }
     $7 = HEAP32[((HEAP32[$0 >> 2] | 0) + ($4 << 2 | 0) | 0) >> 2] | 0;
     label$9 : while (1) {
      $6 = (($6 << 8 | 0) & 65280 | 0) ^ (HEAPU16[(global$6 + (((($7 >>> (24 - $3 | 0) | 0) & 255 | 0) ^ ($6 >>> 8 | 0) | 0) << 1 | 0) | 0) >> 1] | 0) | 0;
      $4 = $3 >>> 0 < 24 >>> 0;
      $8 = $3 + 8 | 0;
      $3 = $8;
      if ($4) {
       continue label$9
      }
      break label$9;
     };
     HEAP32[($0 + 32 | 0) >> 2] = $8;
    }
    HEAP32[($0 + 32 | 0) >> 2] = 0;
    HEAP32[($0 + 24 | 0) >> 2] = $6;
   }
   $3 = FLAC__crc16_update_words32((HEAP32[$0 >> 2] | 0) + ($5 << 2 | 0) | 0 | 0, $2 - $5 | 0 | 0, HEAPU16[($0 + 24 | 0) >> 1] | 0 | 0) | 0;
   HEAP32[($0 + 28 | 0) >> 2] = 0;
   HEAP32[($0 + 24 | 0) >> 2] = $3;
   $6 = HEAP32[$0 >> 2] | 0;
   $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
   memmove($6 | 0, $6 + ($3 << 2 | 0) | 0 | 0, (((HEAP32[($0 + 8 | 0) >> 2] | 0) - $3 | 0) + ((HEAP32[($0 + 12 | 0) >> 2] | 0 | 0) != (0 | 0)) | 0) << 2 | 0 | 0) | 0;
   HEAP32[($0 + 16 | 0) >> 2] = 0;
   $3 = (HEAP32[($0 + 8 | 0) >> 2] | 0) - $3 | 0;
   HEAP32[($0 + 8 | 0) >> 2] = $3;
  }
  $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
  $7 = (((HEAP32[($0 + 4 | 0) >> 2] | 0) - $3 | 0) << 2 | 0) - $4 | 0;
  HEAP32[($1 + 12 | 0) >> 2] = $7;
  $6 = 0;
  label$10 : {
   if (!$7) {
    break label$10
   }
   $7 = (HEAP32[$0 >> 2] | 0) + ($3 << 2 | 0) | 0;
   $8 = $7 + $4 | 0;
   label$11 : {
    if (!$4) {
     break label$11
    }
    $3 = HEAP32[$7 >> 2] | 0;
    HEAP32[$7 >> 2] = $3 << 24 | 0 | (($3 << 8 | 0) & 16711680 | 0) | 0 | (($3 >>> 8 | 0) & 65280 | 0 | ($3 >>> 24 | 0) | 0) | 0;
   }
   if (!(FUNCTION_TABLE[HEAP32[($0 + 36 | 0) >> 2] | 0]($8, $1 + 12 | 0, HEAP32[($0 + 40 | 0) >> 2] | 0) | 0)) {
    break label$10
   }
   label$12 : {
    $6 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
    $7 = $6 << 2 | 0;
    $8 = HEAP32[($1 + 12 | 0) >> 2] | 0;
    $4 = ((($3 + $7 | 0) + $8 | 0) + 3 | 0) >>> 2 | 0;
    if ($6 >>> 0 >= $4 >>> 0) {
     break label$12
    }
    $7 = HEAP32[$0 >> 2] | 0;
    label$13 : while (1) {
     $3 = $7 + ($6 << 2 | 0) | 0;
     $186 = $3;
     $3 = HEAP32[$3 >> 2] | 0;
     HEAP32[$186 >> 2] = $3 << 24 | 0 | (($3 << 8 | 0) & 16711680 | 0) | 0 | (($3 >>> 8 | 0) & 65280 | 0 | ($3 >>> 24 | 0) | 0) | 0;
     $6 = $6 + 1 | 0;
     if (($6 | 0) != ($4 | 0)) {
      continue label$13
     }
     break label$13;
    };
    $7 = (HEAP32[($0 + 8 | 0) >> 2] | 0) << 2 | 0;
    $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
   }
   $3 = ($3 + $8 | 0) + $7 | 0;
   HEAP32[($0 + 12 | 0) >> 2] = $3 & 3 | 0;
   HEAP32[($0 + 8 | 0) >> 2] = $3 >>> 2 | 0;
   $6 = 1;
  }
  label$14 : {
   $10 = $1 + 16 | 0;
   if ($10 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $10;
  }
  return $6 | 0;
 }
 
 function FLAC__bitreader_read_raw_int32($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $5 = 0, $4 = 0;
  label$1 : {
   $3 = global$0 - 16 | 0;
   $4 = $3;
   if ($3 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $4;
  }
  label$3 : {
   label$4 : {
    if (FLAC__bitreader_read_raw_uint32($0 | 0, $3 + 12 | 0 | 0, $2 | 0) | 0) {
     break label$4
    }
    $0 = 0;
    break label$3;
   }
   $0 = 1;
   $2 = 1 << ($2 + -1 | 0) | 0;
   HEAP32[$1 >> 2] = ((HEAP32[($3 + 12 | 0) >> 2] | 0) ^ $2 | 0) - $2 | 0;
  }
  label$5 : {
   $5 = $3 + 16 | 0;
   if ($5 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $5;
  }
  return $0 | 0;
 }
 
 function FLAC__bitreader_read_raw_uint64($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$0 = 0, $3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $7 = 0, i64toi32_i32$3 = 0, $7$hi = 0, $4 = 0, $17 = 0, $6 = 0, $5 = 0, $29 = 0, $36 = 0, $36$hi = 0;
  label$1 : {
   $3 = global$0 - 16 | 0;
   $5 = $3;
   if ($3 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $5;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     if ($2 >>> 0 < 33 >>> 0) {
      break label$5
     }
     $4 = 0;
     if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $3 + 12 | 0 | 0, $2 + -32 | 0 | 0) | 0)) {
      break label$3
     }
     if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $3 + 8 | 0 | 0, 32 | 0) | 0)) {
      break label$3
     }
     $29 = $1;
     i64toi32_i32$2 = $3;
     i64toi32_i32$0 = HEAP32[($3 + 12 | 0) >> 2] | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $17 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $17 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     }
     $7 = $17;
     $7$hi = i64toi32_i32$0;
     i64toi32_i32$2 = $29;
     HEAP32[i64toi32_i32$2 >> 2] = $7;
     HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $3;
     i64toi32_i32$0 = HEAP32[($3 + 8 | 0) >> 2] | 0;
     i64toi32_i32$2 = 0;
     $36 = i64toi32_i32$0;
     $36$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $7$hi;
     i64toi32_i32$1 = $7;
     i64toi32_i32$0 = $36$hi;
     i64toi32_i32$3 = $36;
     i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
     $7 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     $7$hi = i64toi32_i32$0;
     break label$4;
    }
    label$6 : {
     if (FLAC__bitreader_read_raw_uint32($0 | 0, $3 + 8 | 0 | 0, $2 | 0) | 0) {
      break label$6
     }
     $4 = 0;
     break label$3;
    }
    i64toi32_i32$2 = $3;
    i64toi32_i32$0 = HEAP32[($3 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = 0;
    $7 = i64toi32_i32$0;
    $7$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $7$hi;
   i64toi32_i32$0 = $1;
   HEAP32[i64toi32_i32$0 >> 2] = $7;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $4 = 1;
  }
  label$7 : {
   $6 = $3 + 16 | 0;
   if ($6 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $6;
  }
  return $4 | 0;
 }
 
 function FLAC__bitreader_read_uint32_little_endian($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $4 = 0, $3 = 0, $6 = 0, $5 = 0;
  label$1 : {
   $2 = global$0 - 16 | 0;
   $5 = $2;
   if ($2 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $5;
  }
  $3 = 0;
  HEAP32[($2 + 8 | 0) >> 2] = 0;
  label$3 : {
   if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $2 + 8 | 0 | 0, 8 | 0) | 0)) {
    break label$3
   }
   if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $2 + 12 | 0 | 0, 8 | 0) | 0)) {
    break label$3
   }
   $4 = HEAP32[($2 + 8 | 0) >> 2] | 0 | ((HEAP32[($2 + 12 | 0) >> 2] | 0) << 8 | 0) | 0;
   HEAP32[($2 + 8 | 0) >> 2] = $4;
   if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $2 + 12 | 0 | 0, 8 | 0) | 0)) {
    break label$3
   }
   $4 = (HEAP32[($2 + 12 | 0) >> 2] | 0) << 16 | 0 | $4 | 0;
   HEAP32[($2 + 8 | 0) >> 2] = $4;
   if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $2 + 12 | 0 | 0, 8 | 0) | 0)) {
    break label$3
   }
   $0 = (HEAP32[($2 + 12 | 0) >> 2] | 0) << 24 | 0 | $4 | 0;
   HEAP32[($2 + 8 | 0) >> 2] = $0;
   HEAP32[$1 >> 2] = $0;
   $3 = 1;
  }
  label$4 : {
   $6 = $2 + 16 | 0;
   if ($6 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $6;
  }
  return $3 | 0;
 }
 
 function FLAC__bitreader_skip_bits_no_crc($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $2 = 0, $3 = 0, $5 = 0, $7 = 0, $6 = 0;
  label$1 : {
   $2 = global$0 - 16 | 0;
   $6 = $2;
   if ($2 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $6;
  }
  $3 = 1;
  label$3 : {
   if (!$1) {
    break label$3
   }
   label$4 : {
    label$5 : {
     $4 = (HEAP32[($0 + 20 | 0) >> 2] | 0) & 7 | 0;
     if (!$4) {
      break label$5
     }
     $4 = 8 - $4 | 0;
     $4 = $4 >>> 0 < $1 >>> 0 ? $4 : $1;
     if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $2 + 8 | 0 | 0, $4 | 0) | 0)) {
      break label$4
     }
     $1 = $1 - $4 | 0;
    }
    label$6 : {
     $4 = $1 >>> 3 | 0;
     if (!$4) {
      break label$6
     }
     label$7 : {
      label$8 : while (1) {
       label$9 : {
        if (HEAP32[($0 + 20 | 0) >> 2] | 0) {
         break label$9
        }
        label$10 : {
         if ($4 >>> 0 <= 3 >>> 0) {
          break label$10
         }
         label$11 : while (1) {
          label$12 : {
           label$13 : {
            $5 = HEAP32[($0 + 16 | 0) >> 2] | 0;
            if ($5 >>> 0 >= (HEAP32[($0 + 8 | 0) >> 2] | 0) >>> 0) {
             break label$13
            }
            HEAP32[($0 + 16 | 0) >> 2] = $5 + 1 | 0;
            $4 = $4 + -4 | 0;
            break label$12;
           }
           if (!(bitreader_read_from_client_($0 | 0) | 0)) {
            break label$4
           }
          }
          if ($4 >>> 0 > 3 >>> 0) {
           continue label$11
          }
          break label$11;
         };
         if (!$4) {
          break label$7
         }
        }
        label$14 : while (1) {
         if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $2 + 12 | 0 | 0, 8 | 0) | 0)) {
          break label$4
         }
         $4 = $4 + -1 | 0;
         if (!$4) {
          break label$7
         }
         continue label$14;
        };
       }
       if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $2 + 12 | 0 | 0, 8 | 0) | 0)) {
        break label$4
       }
       $4 = $4 + -1 | 0;
       if ($4) {
        continue label$8
       }
       break label$8;
      };
     }
     $1 = $1 & 7 | 0;
    }
    if (!$1) {
     break label$3
    }
    if (FLAC__bitreader_read_raw_uint32($0 | 0, $2 + 8 | 0 | 0, $1 | 0) | 0) {
     break label$3
    }
   }
   $3 = 0;
  }
  label$15 : {
   $7 = $2 + 16 | 0;
   if ($7 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $7;
  }
  return $3 | 0;
 }
 
 function FLAC__bitreader_skip_byte_block_aligned_no_crc($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $6 = 0, $5 = 0;
  label$1 : {
   $2 = global$0 - 16 | 0;
   $5 = $2;
   if ($2 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $5;
  }
  $3 = 1;
  label$3 : {
   if (!$1) {
    break label$3
   }
   label$4 : {
    label$5 : while (1) {
     label$6 : {
      if (HEAP32[($0 + 20 | 0) >> 2] | 0) {
       break label$6
      }
      label$7 : {
       if ($1 >>> 0 < 4 >>> 0) {
        break label$7
       }
       label$8 : while (1) {
        label$9 : {
         label$10 : {
          $4 = HEAP32[($0 + 16 | 0) >> 2] | 0;
          if ($4 >>> 0 >= (HEAP32[($0 + 8 | 0) >> 2] | 0) >>> 0) {
           break label$10
          }
          HEAP32[($0 + 16 | 0) >> 2] = $4 + 1 | 0;
          $1 = $1 + -4 | 0;
          break label$9;
         }
         if (!(bitreader_read_from_client_($0 | 0) | 0)) {
          break label$4
         }
        }
        if ($1 >>> 0 > 3 >>> 0) {
         continue label$8
        }
        break label$8;
       };
       if ($1) {
        break label$7
       }
       $3 = 1;
       break label$3;
      }
      label$11 : while (1) {
       if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $2 + 12 | 0 | 0, 8 | 0) | 0)) {
        break label$4
       }
       $1 = $1 + -1 | 0;
       if ($1) {
        continue label$11
       }
       break label$3;
      };
     }
     if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $2 + 12 | 0 | 0, 8 | 0) | 0)) {
      break label$4
     }
     $1 = $1 + -1 | 0;
     if ($1) {
      continue label$5
     }
     break label$3;
    };
   }
   $3 = 0;
  }
  label$12 : {
   $6 = $2 + 16 | 0;
   if ($6 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $6;
  }
  return $3 | 0;
 }
 
 function FLAC__bitreader_read_byte_block_aligned_no_crc($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0, $7 = 0, $6 = 0, $5 = 0;
  label$1 : {
   $3 = global$0 - 16 | 0;
   $5 = $3;
   if ($3 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $5;
  }
  label$3 : {
   label$4 : {
    if ($2) {
     break label$4
    }
    $4 = 1;
    break label$3;
   }
   label$5 : while (1) {
    label$6 : {
     if (HEAP32[($0 + 20 | 0) >> 2] | 0) {
      break label$6
     }
     label$7 : {
      if ($2 >>> 0 < 4 >>> 0) {
       break label$7
      }
      label$8 : while (1) {
       label$9 : {
        label$10 : {
         $4 = HEAP32[($0 + 16 | 0) >> 2] | 0;
         if ($4 >>> 0 >= (HEAP32[($0 + 8 | 0) >> 2] | 0) >>> 0) {
          break label$10
         }
         HEAP32[($0 + 16 | 0) >> 2] = $4 + 1 | 0;
         $4 = HEAP32[((HEAP32[$0 >> 2] | 0) + ($4 << 2 | 0) | 0) >> 2] | 0;
         $7 = $4 << 24 | 0 | (($4 << 8 | 0) & 16711680 | 0) | 0 | (($4 >>> 8 | 0) & 65280 | 0 | ($4 >>> 24 | 0) | 0) | 0;
         HEAP8[$1 >> 0] = $7;
         HEAP8[($1 + 1 | 0) >> 0] = $7 >>> 8 | 0;
         HEAP8[($1 + 2 | 0) >> 0] = $7 >>> 16 | 0;
         HEAP8[($1 + 3 | 0) >> 0] = $7 >>> 24 | 0;
         $2 = $2 + -4 | 0;
         $1 = $1 + 4 | 0;
         break label$9;
        }
        if (bitreader_read_from_client_($0 | 0) | 0) {
         break label$9
        }
        $4 = 0;
        break label$3;
       }
       if ($2 >>> 0 > 3 >>> 0) {
        continue label$8
       }
       break label$8;
      };
      if ($2) {
       break label$7
      }
      $4 = 1;
      break label$3;
     }
     label$11 : while (1) {
      label$12 : {
       if (FLAC__bitreader_read_raw_uint32($0 | 0, $3 + 12 | 0 | 0, 8 | 0) | 0) {
        break label$12
       }
       $4 = 0;
       break label$3;
      }
      HEAP8[$1 >> 0] = HEAP32[($3 + 12 | 0) >> 2] | 0;
      $4 = 1;
      $1 = $1 + 1 | 0;
      $2 = $2 + -1 | 0;
      if ($2) {
       continue label$11
      }
      break label$3;
     };
    }
    label$13 : {
     if (FLAC__bitreader_read_raw_uint32($0 | 0, $3 + 12 | 0 | 0, 8 | 0) | 0) {
      break label$13
     }
     $4 = 0;
     break label$3;
    }
    HEAP8[$1 >> 0] = HEAP32[($3 + 12 | 0) >> 2] | 0;
    $4 = 1;
    $1 = $1 + 1 | 0;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue label$5
    }
    break label$5;
   };
  }
  label$14 : {
   $6 = $3 + 16 | 0;
   if ($6 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $6;
  }
  return $4 | 0;
 }
 
 function FLAC__bitreader_read_unary_unsigned($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0, $4 = 0;
  HEAP32[$1 >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      $2 = HEAP32[($0 + 16 | 0) >> 2] | 0;
      if ($2 >>> 0 < (HEAP32[($0 + 8 | 0) >> 2] | 0) >>> 0) {
       break label$4
      }
      $3 = HEAP32[($0 + 20 | 0) >> 2] | 0;
      break label$3;
     }
     $3 = HEAP32[($0 + 20 | 0) >> 2] | 0;
     $4 = HEAP32[$0 >> 2] | 0;
     label$5 : while (1) {
      label$6 : {
       $2 = (HEAP32[($4 + ($2 << 2 | 0) | 0) >> 2] | 0) << $3 | 0;
       if (!$2) {
        break label$6
       }
       $3 = Math_clz32($2);
       HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + $3 | 0;
       $2 = 1;
       $3 = ($3 + (HEAP32[($0 + 20 | 0) >> 2] | 0) | 0) + 1 | 0;
       HEAP32[($0 + 20 | 0) >> 2] = $3;
       if ($3 >>> 0 < 32 >>> 0) {
        break label$1
       }
       HEAP32[($0 + 20 | 0) >> 2] = 0;
       HEAP32[($0 + 16 | 0) >> 2] = (HEAP32[($0 + 16 | 0) >> 2] | 0) + 1 | 0;
       return 1 | 0;
      }
      HEAP32[$1 >> 2] = ((HEAP32[$1 >> 2] | 0) - $3 | 0) + 32 | 0;
      $3 = 0;
      HEAP32[($0 + 20 | 0) >> 2] = 0;
      $2 = (HEAP32[($0 + 16 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($0 + 16 | 0) >> 2] = $2;
      if ($2 >>> 0 < (HEAP32[($0 + 8 | 0) >> 2] | 0) >>> 0) {
       continue label$5
      }
      break label$5;
     };
    }
    label$7 : {
     $4 = (HEAP32[($0 + 12 | 0) >> 2] | 0) << 3 | 0;
     if ($4 >>> 0 <= $3 >>> 0) {
      break label$7
     }
     label$8 : {
      $2 = ((HEAP32[((HEAP32[$0 >> 2] | 0) + ($2 << 2 | 0) | 0) >> 2] | 0) & (-1 << (32 - $4 | 0) | 0) | 0) << $3 | 0;
      if (!$2) {
       break label$8
      }
      $3 = Math_clz32($2);
      HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + $3 | 0;
      HEAP32[($0 + 20 | 0) >> 2] = ($3 + (HEAP32[($0 + 20 | 0) >> 2] | 0) | 0) + 1 | 0;
      return 1 | 0;
     }
     HEAP32[$1 >> 2] = ($4 - $3 | 0) + (HEAP32[$1 >> 2] | 0) | 0;
     HEAP32[($0 + 20 | 0) >> 2] = $4;
    }
    if (bitreader_read_from_client_($0 | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
   $2 = 0;
  }
  return $2 | 0;
 }
 
 function FLAC__bitreader_read_rice_signed_block($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $7 = 0, $12 = 0, $13 = 0, $4 = 0, $9 = 0, $15 = 0, $8 = 0, $6 = 0, $10 = 0, $5 = 0, $11 = 0, $14 = 0, $17 = 0, $16 = 0;
  label$1 : {
   $4 = global$0 - 16 | 0;
   $16 = $4;
   if ($4 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $16;
  }
  $5 = $1 + ($2 << 2 | 0) | 0;
  label$3 : {
   label$4 : {
    if ($3) {
     break label$4
    }
    $6 = 1;
    if (($2 | 0) < (1 | 0)) {
     break label$3
    }
    label$5 : while (1) {
     label$6 : {
      if (FLAC__bitreader_read_unary_unsigned($0 | 0, $4 + 8 | 0 | 0) | 0) {
       break label$6
      }
      $6 = 0;
      break label$3;
     }
     $6 = 1;
     $2 = HEAP32[($4 + 8 | 0) >> 2] | 0;
     HEAP32[$1 >> 2] = ($2 >>> 1 | 0) ^ (0 - ($2 & 1 | 0) | 0) | 0;
     $1 = $1 + 4 | 0;
     if ($1 >>> 0 < $5 >>> 0) {
      continue label$5
     }
     break label$3;
    };
   }
   $6 = 0;
   label$7 : {
    label$8 : {
     label$9 : {
      $7 = HEAP32[($0 + 16 | 0) >> 2] | 0;
      $8 = HEAP32[($0 + 8 | 0) >> 2] | 0;
      if ($7 >>> 0 < $8 >>> 0) {
       break label$9
      }
      $9 = 0;
      break label$8;
     }
     $10 = HEAP32[$0 >> 2] | 0;
     $11 = HEAP32[($0 + 20 | 0) >> 2] | 0;
     $12 = (HEAP32[($10 + ($7 << 2 | 0) | 0) >> 2] | 0) << $11 | 0;
     $2 = 0;
     break label$7;
    }
    $2 = 1;
   }
   label$10 : while (1) {
    label$11 : {
     label$12 : {
      label$13 : {
       label$14 : {
        label$15 : {
         switch ($2 | 0) {
         case 0:
          $13 = 32 - $11 | 0;
          label$17 : {
           label$18 : {
            if ($1 >>> 0 >= $5 >>> 0) {
             break label$18
            }
            $14 = 32 - $3 | 0;
            label$19 : while (1) {
             $2 = $7;
             $9 = $13;
             label$20 : {
              label$21 : {
               if (!$12) {
                break label$21
               }
               $2 = $7;
               $9 = Math_clz32($12);
               $15 = $9;
               break label$20;
              }
              label$22 : while (1) {
               $2 = $2 + 1 | 0;
               if ($2 >>> 0 >= $8 >>> 0) {
                break label$17
               }
               $12 = HEAP32[($10 + ($2 << 2 | 0) | 0) >> 2] | 0;
               $15 = Math_clz32($12);
               $9 = $15 + $9 | 0;
               if (!$12) {
                continue label$22
               }
               break label$22;
              };
             }
             $12 = ($12 << $15 | 0) << 1 | 0;
             $15 = $12 >>> $14 | 0;
             HEAP32[($4 + 8 | 0) >> 2] = $9;
             label$23 : {
              label$24 : {
               $13 = (($9 ^ -1 | 0) + $13 | 0) & 31 | 0;
               if ($13 >>> 0 < $3 >>> 0) {
                break label$24
               }
               $12 = $12 << $3 | 0;
               $13 = $13 - $3 | 0;
               $7 = $2;
               break label$23;
              }
              $7 = $2 + 1 | 0;
              if ($7 >>> 0 >= $8 >>> 0) {
               break label$14
              }
              $2 = HEAP32[($10 + ($7 << 2 | 0) | 0) >> 2] | 0;
              $13 = $13 + $14 | 0;
              $12 = $2 << (32 - $13 | 0) | 0;
              $15 = $2 >>> $13 | 0 | $15 | 0;
             }
             HEAP32[($4 + 12 | 0) >> 2] = $15;
             $2 = $15 | ($9 << $3 | 0) | 0;
             HEAP32[$1 >> 2] = ($2 >>> 1 | 0) ^ (0 - ($2 & 1 | 0) | 0) | 0;
             $1 = $1 + 4 | 0;
             if ($1 >>> 0 < $5 >>> 0) {
              continue label$19
             }
             break label$19;
            };
           }
           $2 = $7 >>> 0 < $8 >>> 0;
           HEAP32[($0 + 16 | 0) >> 2] = $7 + ($2 & !$13 | 0) | 0;
           HEAP32[($0 + 20 | 0) >> 2] = 32 - ($13 ? $13 : $2 << 5 | 0) | 0;
           $6 = 1;
           break label$3;
          }
          HEAP32[($0 + 20 | 0) >> 2] = 0;
          $2 = $7 + 1 | 0;
          HEAP32[($0 + 16 | 0) >> 2] = $8 >>> 0 > $2 >>> 0 ? $8 : $2;
          break label$12;
         default:
          break label$15;
         };
        }
        if (!(FLAC__bitreader_read_unary_unsigned($0 | 0, $4 + 8 | 0 | 0) | 0)) {
         break label$3
        }
        $9 = (HEAP32[($4 + 8 | 0) >> 2] | 0) + $9 | 0;
        HEAP32[($4 + 8 | 0) >> 2] = $9;
        $15 = 0;
        $13 = 0;
        break label$13;
       }
       HEAP32[($0 + 16 | 0) >> 2] = $7;
       HEAP32[($0 + 20 | 0) >> 2] = 0;
      }
      if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $4 + 12 | 0 | 0, $3 - $13 | 0 | 0) | 0)) {
       break label$3
      }
      $2 = $9 << $3 | 0;
      $12 = HEAP32[($4 + 12 | 0) >> 2] | 0 | $15 | 0;
      HEAP32[($4 + 12 | 0) >> 2] = $12;
      $9 = 0;
      $2 = $2 | $12 | 0;
      HEAP32[$1 >> 2] = ($2 >>> 1 | 0) ^ (0 - ($2 & 1 | 0) | 0) | 0;
      $10 = HEAP32[$0 >> 2] | 0;
      $7 = HEAP32[($0 + 16 | 0) >> 2] | 0;
      $11 = HEAP32[($0 + 20 | 0) >> 2] | 0;
      $12 = (HEAP32[($10 + ($7 << 2 | 0) | 0) >> 2] | 0) << $11 | 0;
      $8 = HEAP32[($0 + 8 | 0) >> 2] | 0;
      $1 = $1 + 4 | 0;
      if ($1 >>> 0 >= $5 >>> 0) {
       break label$11
      }
      if ($7 >>> 0 < $8 >>> 0) {
       break label$11
      }
     }
     $2 = 1;
     continue label$10;
    }
    $2 = 0;
    continue label$10;
   };
  }
  label$25 : {
   $17 = $4 + 16 | 0;
   if ($17 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $17;
  }
  return $6 | 0;
 }
 
 function FLAC__bitreader_read_utf8_uint32($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $4 = 0, $5 = 0, $9 = 0, $11 = 0, $10 = 0;
  label$1 : {
   $4 = global$0 - 16 | 0;
   $10 = $4;
   if ($4 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $10;
  }
  $5 = 0;
  label$3 : {
   if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $4 + 12 | 0 | 0, 8 | 0) | 0)) {
    break label$3
   }
   $6 = HEAP32[($4 + 12 | 0) >> 2] | 0;
   label$4 : {
    if (!$2) {
     break label$4
    }
    $7 = HEAP32[$3 >> 2] | 0;
    HEAP32[$3 >> 2] = $7 + 1 | 0;
    HEAP8[($2 + $7 | 0) >> 0] = $6;
   }
   label$5 : {
    label$6 : {
     label$7 : {
      label$8 : {
       if (!($6 & 128 | 0)) {
        break label$8
       }
       label$9 : {
        label$10 : {
         if (!($6 & 192 | 0)) {
          break label$10
         }
         if ($6 & 32 | 0) {
          break label$10
         }
         $8 = 1;
         $7 = 31;
         break label$9;
        }
        label$11 : {
         if (!($6 & 224 | 0)) {
          break label$11
         }
         if ($6 & 16 | 0) {
          break label$11
         }
         $8 = 2;
         $7 = 15;
         break label$9;
        }
        label$12 : {
         if (!($6 & 240 | 0)) {
          break label$12
         }
         if ($6 & 8 | 0) {
          break label$12
         }
         $8 = 3;
         $7 = 7;
         break label$9;
        }
        label$13 : {
         if (!($6 & 248 | 0)) {
          break label$13
         }
         $8 = 4;
         $7 = 3;
         if (!($6 & 4 | 0)) {
          break label$9
         }
        }
        if (!($6 & 252 | 0)) {
         break label$7
        }
        if ($6 & 2 | 0) {
         break label$7
        }
        $8 = 5;
        $7 = 1;
       }
       $6 = $6 & $7 | 0;
       label$14 : {
        if (!$2) {
         break label$14
        }
        label$15 : while (1) {
         if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $4 + 12 | 0 | 0, 8 | 0) | 0)) {
          break label$3
         }
         $7 = HEAP32[($4 + 12 | 0) >> 2] | 0;
         $9 = HEAP32[$3 >> 2] | 0;
         HEAP32[$3 >> 2] = $9 + 1 | 0;
         HEAP8[($2 + $9 | 0) >> 0] = $7;
         if (($7 & 192 | 0 | 0) != (128 | 0)) {
          break label$6
         }
         $6 = $7 & 63 | 0 | ($6 << 6 | 0) | 0;
         $8 = $8 + -1 | 0;
         if ($8) {
          continue label$15
         }
         break label$8;
        };
       }
       label$16 : while (1) {
        if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $4 + 12 | 0 | 0, 8 | 0) | 0)) {
         break label$3
        }
        $7 = HEAP32[($4 + 12 | 0) >> 2] | 0;
        if (($7 & 192 | 0 | 0) != (128 | 0)) {
         break label$6
        }
        $6 = $7 & 63 | 0 | ($6 << 6 | 0) | 0;
        $8 = $8 + -1 | 0;
        if ($8) {
         continue label$16
        }
        break label$16;
       };
      }
      HEAP32[$1 >> 2] = $6;
      break label$5;
     }
     HEAP32[$1 >> 2] = -1;
     break label$5;
    }
    HEAP32[$1 >> 2] = -1;
   }
   $5 = 1;
  }
  label$17 : {
   $11 = $4 + 16 | 0;
   if ($11 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $11;
  }
  return $5 | 0;
 }
 
 function FLAC__bitreader_read_utf8_uint64($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0, i64toi32_i32$1 = 0, $5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $4 = 0, i64toi32_i32$3 = 0, $10 = 0, $10$hi = 0, $7 = 0, $21 = 0, $22 = 0, $9 = 0, $8 = 0, $104$hi = 0, $107$hi = 0, $122$hi = 0, $125$hi = 0;
  label$1 : {
   $4 = global$0 - 16 | 0;
   $8 = $4;
   if ($4 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $8;
  }
  label$3 : {
   label$4 : {
    if (FLAC__bitreader_read_raw_uint32($0 | 0, $4 + 12 | 0 | 0, 8 | 0) | 0) {
     break label$4
    }
    $5 = 0;
    break label$3;
   }
   $6 = HEAP32[($4 + 12 | 0) >> 2] | 0;
   label$5 : {
    if (!$2) {
     break label$5
    }
    $5 = HEAP32[$3 >> 2] | 0;
    HEAP32[$3 >> 2] = $5 + 1 | 0;
    HEAP8[($2 + $5 | 0) >> 0] = $6;
   }
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       label$10 : {
        if (!($6 & 128 | 0)) {
         break label$10
        }
        label$11 : {
         if (!($6 & 192 | 0)) {
          break label$11
         }
         if ($6 & 32 | 0) {
          break label$11
         }
         $6 = $6 & 31 | 0;
         $5 = 1;
         break label$9;
        }
        label$12 : {
         if (!($6 & 224 | 0)) {
          break label$12
         }
         if ($6 & 16 | 0) {
          break label$12
         }
         $6 = $6 & 15 | 0;
         $5 = 2;
         break label$9;
        }
        label$13 : {
         if (!($6 & 240 | 0)) {
          break label$13
         }
         if ($6 & 8 | 0) {
          break label$13
         }
         $6 = $6 & 7 | 0;
         $5 = 3;
         break label$9;
        }
        label$14 : {
         if (!($6 & 248 | 0)) {
          break label$14
         }
         if ($6 & 4 | 0) {
          break label$14
         }
         $6 = $6 & 3 | 0;
         $5 = 4;
         break label$9;
        }
        label$15 : {
         if (!($6 & 252 | 0)) {
          break label$15
         }
         if ($6 & 2 | 0) {
          break label$15
         }
         $6 = $6 & 1 | 0;
         $5 = 5;
         break label$9;
        }
        $5 = 1;
        label$16 : {
         if (!($6 & 254 | 0)) {
          break label$16
         }
         if ($6 & 1 | 0) {
          break label$16
         }
         $5 = 6;
         $6 = 0;
         break label$9;
        }
        i64toi32_i32$1 = $1;
        i64toi32_i32$0 = -1;
        HEAP32[i64toi32_i32$1 >> 2] = -1;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        break label$3;
       }
       i64toi32_i32$0 = 0;
       $10 = $6;
       $10$hi = i64toi32_i32$0;
       break label$8;
      }
      i64toi32_i32$0 = 0;
      $10 = $6;
      $10$hi = i64toi32_i32$0;
      label$17 : {
       if (!$2) {
        break label$17
       }
       label$18 : while (1) {
        label$19 : {
         if (FLAC__bitreader_read_raw_uint32($0 | 0, $4 + 12 | 0 | 0, 8 | 0) | 0) {
          break label$19
         }
         $5 = 0;
         break label$3;
        }
        $6 = HEAP32[($4 + 12 | 0) >> 2] | 0;
        $7 = HEAP32[$3 >> 2] | 0;
        HEAP32[$3 >> 2] = $7 + 1 | 0;
        HEAP8[($2 + $7 | 0) >> 0] = $6;
        if (($6 & 192 | 0 | 0) != (128 | 0)) {
         break label$7
        }
        i64toi32_i32$0 = $10$hi;
        i64toi32_i32$2 = $10;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 6;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         $21 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
         $21 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        $104$hi = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        $107$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $104$hi;
        i64toi32_i32$0 = $21;
        i64toi32_i32$2 = $107$hi;
        i64toi32_i32$3 = $6 & 63 | 0;
        i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
        $10 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
        $10$hi = i64toi32_i32$2;
        $5 = $5 + -1 | 0;
        if ($5) {
         continue label$18
        }
        break label$8;
       };
      }
      label$20 : while (1) {
       label$21 : {
        if (FLAC__bitreader_read_raw_uint32($0 | 0, $4 + 12 | 0 | 0, 8 | 0) | 0) {
         break label$21
        }
        $5 = 0;
        break label$3;
       }
       $6 = HEAP32[($4 + 12 | 0) >> 2] | 0;
       if (($6 & 192 | 0 | 0) != (128 | 0)) {
        break label$7
       }
       i64toi32_i32$2 = $10$hi;
       i64toi32_i32$1 = $10;
       i64toi32_i32$0 = 0;
       i64toi32_i32$3 = 6;
       i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
        $22 = 0;
       } else {
        i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
        $22 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       }
       $122$hi = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       $125$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $122$hi;
       i64toi32_i32$2 = $22;
       i64toi32_i32$1 = $125$hi;
       i64toi32_i32$3 = $6 & 63 | 0;
       i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
       $10 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
       $10$hi = i64toi32_i32$1;
       $5 = $5 + -1 | 0;
       if ($5) {
        continue label$20
       }
       break label$20;
      };
     }
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$2 = $1;
     HEAP32[i64toi32_i32$2 >> 2] = $10;
     HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
     break label$6;
    }
    i64toi32_i32$2 = $1;
    i64toi32_i32$1 = -1;
    HEAP32[i64toi32_i32$2 >> 2] = -1;
    HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
   }
   $5 = 1;
  }
  label$22 : {
   $9 = $4 + 16 | 0;
   if ($9 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $9;
  }
  return $5 | 0;
 }
 
 function FLAC__ogg_decoder_aspect_init($0) {
  $0 = $0 | 0;
  var i64toi32_i32$0 = 0, $1 = 0;
  $1 = 0;
  label$1 : {
   if (ogg_stream_init($0 + 8 | 0 | 0, HEAP32[($0 + 4 | 0) >> 2] | 0 | 0) | 0) {
    break label$1
   }
   if (ogg_sync_init($0 + 368 | 0 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$0 = -1;
   HEAP32[($0 + 396 | 0) >> 2] = -1;
   HEAP32[($0 + 400 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   HEAP32[($0 + 408 | 0) >> 2] = 0;
   HEAP32[($0 + 412 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($0 + 404 | 0) >> 2] = HEAP32[$0 >> 2] | 0;
   $1 = 1;
  }
  return $1 | 0;
 }
 
 function FLAC__ogg_decoder_aspect_finish($0) {
  $0 = $0 | 0;
  ogg_sync_clear($0 + 368 | 0 | 0) | 0;
  ogg_stream_clear($0 + 8 | 0 | 0) | 0;
 }
 
 function FLAC__ogg_decoder_aspect_set_serial_number($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[($0 + 4 | 0) >> 2] = $1;
  HEAP32[$0 >> 2] = 0;
 }
 
 function FLAC__ogg_decoder_aspect_set_defaults($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 1;
 }
 
 function FLAC__ogg_decoder_aspect_flush($0) {
  $0 = $0 | 0;
  ogg_stream_reset($0 + 8 | 0 | 0) | 0;
  ogg_sync_reset($0 + 368 | 0 | 0) | 0;
  HEAP32[($0 + 408 | 0) >> 2] = 0;
  HEAP32[($0 + 412 | 0) >> 2] = 0;
 }
 
 function FLAC__ogg_decoder_aspect_reset($0) {
  $0 = $0 | 0;
  ogg_stream_reset($0 + 8 | 0 | 0) | 0;
  ogg_sync_reset($0 + 368 | 0 | 0) | 0;
  HEAP32[($0 + 408 | 0) >> 2] = 0;
  HEAP32[($0 + 412 | 0) >> 2] = 0;
  label$1 : {
   if (!(HEAP32[$0 >> 2] | 0)) {
    break label$1
   }
   HEAP32[($0 + 404 | 0) >> 2] = 1;
  }
 }
 
 function FLAC__ogg_decoder_aspect_read_callback_wrapper($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $8 = 0, $15 = 0, $16 = 0, $6 = 0, $7 = 0, $20 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $18 = 0, $19 = 0, $17 = 0, $13 = 0, $14 = 0;
  label$1 : {
   $6 = global$0 - 16 | 0;
   $17 = $6;
   if ($6 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $17;
  }
  $7 = HEAP32[$2 >> 2] | 0;
  HEAP32[$2 >> 2] = 0;
  $8 = 0;
  label$3 : {
   if (!$7) {
    break label$3
   }
   $9 = $0 + 416 | 0;
   $10 = $0 + 368 | 0;
   $11 = $0 + 440 | 0;
   $12 = $0 + 8 | 0;
   $13 = HEAP32[global$4 >> 2] | 0;
   $14 = (HEAPU8[global$3 >> 0] | 0) & 255 | 0;
   $8 = 0;
   label$4 : while (1) {
    if (HEAP32[($0 + 408 | 0) >> 2] | 0) {
     break label$3
    }
    label$5 : {
     label$6 : {
      label$7 : {
       if (!(HEAP32[($0 + 412 | 0) >> 2] | 0)) {
        break label$7
       }
       label$8 : {
        if (!(HEAP32[($0 + 432 | 0) >> 2] | 0)) {
         break label$8
        }
        $15 = HEAP32[($0 + 440 | 0) >> 2] | 0;
        label$9 : {
         $16 = HEAP32[($0 + 444 | 0) >> 2] | 0;
         $8 = $7 - $8 | 0;
         if ($16 >>> 0 > $8 >>> 0) {
          break label$9
         }
         $8 = memcpy($1 | 0, $15 | 0, $16 | 0) | 0;
         HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $16 | 0;
         HEAP32[($0 + 432 | 0) >> 2] = 0;
         $1 = $8 + $16 | 0;
         break label$5;
        }
        $16 = memcpy($1 | 0, $15 | 0, $8 | 0) | 0;
        HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $8 | 0;
        HEAP32[($0 + 440 | 0) >> 2] = (HEAP32[($0 + 440 | 0) >> 2] | 0) + $8 | 0;
        HEAP32[($0 + 444 | 0) >> 2] = (HEAP32[($0 + 444 | 0) >> 2] | 0) - $8 | 0;
        $1 = $16 + $8 | 0;
        break label$5;
       }
       label$10 : {
        $8 = ogg_stream_packetout($12 | 0, $11 | 0) | 0;
        if (($8 | 0) < (1 | 0)) {
         break label$10
        }
        HEAP32[($0 + 432 | 0) >> 2] = 1;
        $16 = HEAP32[($0 + 444 | 0) >> 2] | 0;
        if (($16 | 0) < (1 | 0)) {
         break label$5
        }
        $8 = HEAP32[$11 >> 2] | 0;
        if ((HEAPU8[$8 >> 0] | 0 | 0) != ($14 | 0)) {
         break label$5
        }
        $15 = 3;
        if (($16 | 0) < (9 | 0)) {
         break label$6
        }
        $20 = $13;
        if ((HEAPU8[($8 + 1 | 0) >> 0] | 0 | ((HEAPU8[($8 + 2 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($8 + 3 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($8 + 4 | 0) >> 0] | 0) << 24 | 0) | 0) | 0 | 0) != (HEAPU8[$20 >> 0] | 0 | ((HEAPU8[($20 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($20 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($20 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0 | 0)) {
         break label$6
        }
        $15 = HEAPU8[($8 + 5 | 0) >> 0] | 0;
        HEAP32[($0 + 396 | 0) >> 2] = $15;
        HEAP32[($0 + 400 | 0) >> 2] = HEAPU8[($8 + 6 | 0) >> 0] | 0;
        label$11 : {
         if (($15 | 0) == (1 | 0)) {
          break label$11
         }
         $15 = 4;
         break label$6;
        }
        HEAP32[($0 + 444 | 0) >> 2] = $16 + -9 | 0;
        HEAP32[($0 + 440 | 0) >> 2] = $8 + 9 | 0;
        break label$5;
       }
       label$12 : {
        if (!$8) {
         break label$12
        }
        $15 = 2;
        break label$6;
       }
       HEAP32[($0 + 412 | 0) >> 2] = 0;
       break label$5;
      }
      label$13 : {
       $8 = ogg_sync_pageout($10 | 0, $9 | 0) | 0;
       if (($8 | 0) < (1 | 0)) {
        break label$13
       }
       label$14 : {
        if (!(HEAP32[($0 + 404 | 0) >> 2] | 0)) {
         break label$14
        }
        $8 = ogg_page_serialno($9 | 0) | 0;
        HEAP32[($0 + 404 | 0) >> 2] = 0;
        HEAP32[($0 + 344 | 0) >> 2] = $8;
        HEAP32[($0 + 4 | 0) >> 2] = $8;
       }
       if (ogg_stream_pagein($12 | 0, $9 | 0) | 0) {
        break label$5
       }
       HEAP32[($0 + 432 | 0) >> 2] = 0;
       HEAP32[($0 + 412 | 0) >> 2] = 1;
       break label$5;
      }
      label$15 : {
       if (!$8) {
        break label$15
       }
       $15 = 2;
       break label$6;
      }
      label$16 : {
       $8 = $7 - (HEAP32[$2 >> 2] | 0) | 0;
       $8 = $8 >>> 0 > 8192 >>> 0 ? $8 : 8192;
       $16 = ogg_sync_buffer($10 | 0, $8 | 0) | 0;
       if ($16) {
        break label$16
       }
       $15 = 7;
       break label$6;
      }
      HEAP32[($6 + 12 | 0) >> 2] = $8;
      label$17 : {
       $15 = FUNCTION_TABLE[$3]($4, $16, $6 + 12 | 0, $5) | 0;
       $8 = $15 + -1 | 0;
       if ($8 >>> 0 > 4 >>> 0) {
        break label$17
       }
       label$18 : {
        switch ($8 | 0) {
        case 1:
        case 2:
        case 3:
         break label$17;
        case 4:
         break label$6;
        default:
         break label$18;
        };
       }
       HEAP32[($0 + 408 | 0) >> 2] = 1;
      }
      if ((ogg_sync_wrote($10 | 0, HEAP32[($6 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) > (-1 | 0)) {
       break label$5
      }
      $15 = 6;
     }
     label$19 : {
      $18 = $6 + 16 | 0;
      if ($18 >>> 0 < global$85 >>> 0) {
       __handle_stack_overflow()
      }
      global$0 = $18;
     }
     return $15 | 0;
    }
    $8 = HEAP32[$2 >> 2] | 0;
    if ($7 >>> 0 > $8 >>> 0) {
     continue label$4
    }
    break label$4;
   };
  }
  $0 = HEAP32[($0 + 408 | 0) >> 2] | 0;
  label$21 : {
   $19 = $6 + 16 | 0;
   if ($19 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $19;
  }
  return !$8 & ($0 | 0) != (0 | 0) | 0 | 0;
 }
 
 function FLAC__MD5Init($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = -271733879;
  HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] = 1732584193;
  HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 72 | 0;
  i64toi32_i32$0 = 271733878;
  HEAP32[i64toi32_i32$1 >> 2] = -1732584194;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 88 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function FLAC__MD5Final($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $2 = 0, $3 = 0, $10 = 0, $11 = 0, $4 = 0, $49 = 0, $52 = 0;
  $2 = (HEAP32[($1 + 80 | 0) >> 2] | 0) & 63 | 0;
  $3 = $1 + $2 | 0;
  HEAP8[$3 >> 0] = 128;
  $3 = $3 + 1 | 0;
  $4 = 56;
  label$1 : {
   label$2 : {
    if ($2 >>> 0 >= 56 >>> 0) {
     break label$2
    }
    $4 = 55 - $2 | 0;
    break label$1;
   }
   memset($3 | 0, 0 | 0, $2 ^ 63 | 0 | 0) | 0;
   FLAC__MD5Transform($1 + 64 | 0 | 0, $1 | 0);
   $3 = $1;
  }
  memset($3 | 0, 0 | 0, $4 | 0) | 0;
  $2 = HEAP32[($1 + 80 | 0) >> 2] | 0;
  HEAP32[($1 + 56 | 0) >> 2] = $2 << 3 | 0;
  HEAP32[($1 + 60 | 0) >> 2] = (HEAP32[($1 + 84 | 0) >> 2] | 0) << 3 | 0 | ($2 >>> 29 | 0) | 0;
  FLAC__MD5Transform($1 + 64 | 0 | 0, $1 | 0);
  i64toi32_i32$2 = $1 + 72 | 0;
  i64toi32_i32$0 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $49 = i64toi32_i32$0;
  i64toi32_i32$0 = $0 + 8 | 0;
  $10 = $49;
  HEAP8[i64toi32_i32$0 >> 0] = $10;
  HEAP8[(i64toi32_i32$0 + 1 | 0) >> 0] = $10 >>> 8 | 0;
  HEAP8[(i64toi32_i32$0 + 2 | 0) >> 0] = $10 >>> 16 | 0;
  HEAP8[(i64toi32_i32$0 + 3 | 0) >> 0] = $10 >>> 24 | 0;
  HEAP8[(i64toi32_i32$0 + 4 | 0) >> 0] = i64toi32_i32$1;
  HEAP8[(i64toi32_i32$0 + 5 | 0) >> 0] = i64toi32_i32$1 >>> 8 | 0;
  HEAP8[(i64toi32_i32$0 + 6 | 0) >> 0] = i64toi32_i32$1 >>> 16 | 0;
  HEAP8[(i64toi32_i32$0 + 7 | 0) >> 0] = i64toi32_i32$1 >>> 24 | 0;
  i64toi32_i32$2 = $1;
  i64toi32_i32$1 = HEAPU8[($1 + 64 | 0) >> 0] | 0 | ((HEAPU8[($1 + 65 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($1 + 66 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($1 + 67 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  i64toi32_i32$0 = HEAPU8[($1 + 68 | 0) >> 0] | 0 | ((HEAPU8[($1 + 69 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($1 + 70 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($1 + 71 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $52 = i64toi32_i32$1;
  i64toi32_i32$1 = $0;
  $11 = $52;
  HEAP8[i64toi32_i32$1 >> 0] = $11;
  HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $11 >>> 8 | 0;
  HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $11 >>> 16 | 0;
  HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $11 >>> 24 | 0;
  HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
  HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
  HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
  HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
  label$3 : {
   $0 = HEAP32[($1 + 88 | 0) >> 2] | 0;
   if (!$0) {
    break label$3
   }
   dlfree($0 | 0);
   i64toi32_i32$1 = $1;
   i64toi32_i32$0 = 0;
   HEAP32[($1 + 88 | 0) >> 2] = 0;
   HEAP32[($1 + 92 | 0) >> 2] = i64toi32_i32$0;
  }
  memset($1 | 0, 0 | 0, 96 | 0) | 0;
 }
 
 function FLAC__MD5Transform($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $14 = 0, $17 = 0, $18 = 0, $19 = 0, $13 = 0, $12 = 0, $26 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $11 = 0, $15 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $10 = 0, $83 = 0, $88 = 0, $93 = 0, $146 = 0, $151 = 0, $156 = 0, $209 = 0, $214 = 0, $219 = 0, $272 = 0, $277 = 0, $282 = 0, $335 = 0, $338 = 0, $341 = 0, $394 = 0, $397 = 0, $400 = 0, $453 = 0, $456 = 0, $459 = 0, $512 = 0, $515 = 0, $546 = 0, $568 = 0, $571 = 0, $574 = 0, $597 = 0, $619 = 0, $622 = 0, $625 = 0, $648 = 0, $670 = 0, $673 = 0, $676 = 0, $699 = 0, $721 = 0, $724 = 0, $740 = 0, $773 = 0, $776 = 0, $779 = 0, $828 = 0, $831 = 0, $834 = 0, $883 = 0, $886 = 0, $889 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2 = HEAP32[($1 + 16 | 0) >> 2] | 0;
  $3 = HEAP32[($1 + 32 | 0) >> 2] | 0;
  $4 = HEAP32[($1 + 48 | 0) >> 2] | 0;
  $5 = HEAP32[$1 >> 2] | 0;
  $6 = HEAP32[($1 + 36 | 0) >> 2] | 0;
  $7 = HEAP32[($1 + 52 | 0) >> 2] | 0;
  $8 = HEAP32[($1 + 4 | 0) >> 2] | 0;
  $9 = HEAP32[($1 + 20 | 0) >> 2] | 0;
  $10 = HEAP32[$0 >> 2] | 0;
  $11 = HEAP32[($0 + 12 | 0) >> 2] | 0;
  $12 = HEAP32[($0 + 8 | 0) >> 2] | 0;
  $13 = HEAP32[($0 + 4 | 0) >> 2] | 0;
  $14 = (__wasm_rotl_i32((($5 + $10 | 0) + ((($11 ^ $12 | 0) & $13 | 0) ^ $11 | 0) | 0) + -680876936 | 0 | 0, 7 | 0) | 0) + $13 | 0;
  $83 = $2 + $14 | 0;
  $15 = HEAP32[($1 + 12 | 0) >> 2] | 0;
  $88 = $13 + $15 | 0;
  $16 = HEAP32[($1 + 8 | 0) >> 2] | 0;
  $93 = $12 + $16 | 0;
  $17 = (__wasm_rotl_i32((($11 + $8 | 0) + (($14 & ($12 ^ $13 | 0) | 0) ^ $12 | 0) | 0) + -389564586 | 0 | 0, 12 | 0) | 0) + $14 | 0;
  $18 = (__wasm_rotl_i32(($93 + (($17 & ($14 ^ $13 | 0) | 0) ^ $13 | 0) | 0) + 606105819 | 0 | 0, 17 | 0) | 0) + $17 | 0;
  $14 = (__wasm_rotl_i32(($88 + (($18 & ($17 ^ $14 | 0) | 0) ^ $14 | 0) | 0) + -1044525330 | 0 | 0, 22 | 0) | 0) + $18 | 0;
  $19 = (__wasm_rotl_i32(($83 + (($14 & ($18 ^ $17 | 0) | 0) ^ $17 | 0) | 0) + -176418897 | 0 | 0, 7 | 0) | 0) + $14 | 0;
  $146 = $3 + $19 | 0;
  $20 = HEAP32[($1 + 28 | 0) >> 2] | 0;
  $151 = $20 + $14 | 0;
  $21 = HEAP32[($1 + 24 | 0) >> 2] | 0;
  $156 = $21 + $18 | 0;
  $17 = (__wasm_rotl_i32((($9 + $17 | 0) + (($19 & ($14 ^ $18 | 0) | 0) ^ $18 | 0) | 0) + 1200080426 | 0 | 0, 12 | 0) | 0) + $19 | 0;
  $14 = (__wasm_rotl_i32(($156 + (($17 & ($19 ^ $14 | 0) | 0) ^ $14 | 0) | 0) + -1473231341 | 0 | 0, 17 | 0) | 0) + $17 | 0;
  $18 = (__wasm_rotl_i32(($151 + (($14 & ($17 ^ $19 | 0) | 0) ^ $19 | 0) | 0) + -45705983 | 0 | 0, 22 | 0) | 0) + $14 | 0;
  $19 = (__wasm_rotl_i32(($146 + (($18 & ($14 ^ $17 | 0) | 0) ^ $17 | 0) | 0) + 1770035416 | 0 | 0, 7 | 0) | 0) + $18 | 0;
  $209 = $4 + $19 | 0;
  $22 = HEAP32[($1 + 44 | 0) >> 2] | 0;
  $214 = $22 + $18 | 0;
  $23 = HEAP32[($1 + 40 | 0) >> 2] | 0;
  $219 = $23 + $14 | 0;
  $14 = (__wasm_rotl_i32((($6 + $17 | 0) + (($19 & ($18 ^ $14 | 0) | 0) ^ $14 | 0) | 0) + -1958414417 | 0 | 0, 12 | 0) | 0) + $19 | 0;
  $17 = (__wasm_rotl_i32(($219 + (($14 & ($19 ^ $18 | 0) | 0) ^ $18 | 0) | 0) + -42063 | 0 | 0, 17 | 0) | 0) + $14 | 0;
  $18 = (__wasm_rotl_i32(($214 + (($17 & ($14 ^ $19 | 0) | 0) ^ $19 | 0) | 0) + -1990404162 | 0 | 0, 22 | 0) | 0) + $17 | 0;
  $19 = (__wasm_rotl_i32(($209 + (($18 & ($17 ^ $14 | 0) | 0) ^ $14 | 0) | 0) + 1804603682 | 0 | 0, 7 | 0) | 0) + $18 | 0;
  $272 = $8 + $19 | 0;
  $24 = HEAP32[($1 + 60 | 0) >> 2] | 0;
  $277 = $24 + $18 | 0;
  $25 = HEAP32[($1 + 56 | 0) >> 2] | 0;
  $282 = $25 + $17 | 0;
  $26 = (__wasm_rotl_i32((($7 + $14 | 0) + (($19 & ($18 ^ $17 | 0) | 0) ^ $17 | 0) | 0) + -40341101 | 0 | 0, 12 | 0) | 0) + $19 | 0;
  $1 = (__wasm_rotl_i32(($282 + (($26 & ($19 ^ $18 | 0) | 0) ^ $18 | 0) | 0) + -1502002290 | 0 | 0, 17 | 0) | 0) + $26 | 0;
  $14 = (__wasm_rotl_i32(($277 + (($1 & ($26 ^ $19 | 0) | 0) ^ $19 | 0) | 0) + 1236535329 | 0 | 0, 22 | 0) | 0) + $1 | 0;
  $17 = (__wasm_rotl_i32(($272 + ((($14 ^ $1 | 0) & $26 | 0) ^ $1 | 0) | 0) + -165796510 | 0 | 0, 5 | 0) | 0) + $14 | 0;
  $335 = $9 + $17 | 0;
  $338 = $5 + $14 | 0;
  $341 = $22 + $1 | 0;
  $1 = (__wasm_rotl_i32((($21 + $26 | 0) + ((($17 ^ $14 | 0) & $1 | 0) ^ $14 | 0) | 0) + -1069501632 | 0 | 0, 9 | 0) | 0) + $17 | 0;
  $14 = (__wasm_rotl_i32(($341 + ((($1 ^ $17 | 0) & $14 | 0) ^ $17 | 0) | 0) + 643717713 | 0 | 0, 14 | 0) | 0) + $1 | 0;
  $17 = (__wasm_rotl_i32(($338 + ((($14 ^ $1 | 0) & $17 | 0) ^ $1 | 0) | 0) + -373897302 | 0 | 0, 20 | 0) | 0) + $14 | 0;
  $18 = (__wasm_rotl_i32(($335 + ((($17 ^ $14 | 0) & $1 | 0) ^ $14 | 0) | 0) + -701558691 | 0 | 0, 5 | 0) | 0) + $17 | 0;
  $394 = $6 + $18 | 0;
  $397 = $2 + $17 | 0;
  $400 = $24 + $14 | 0;
  $1 = (__wasm_rotl_i32((($23 + $1 | 0) + ((($18 ^ $17 | 0) & $14 | 0) ^ $17 | 0) | 0) + 38016083 | 0 | 0, 9 | 0) | 0) + $18 | 0;
  $14 = (__wasm_rotl_i32(($400 + ((($1 ^ $18 | 0) & $17 | 0) ^ $18 | 0) | 0) + -660478335 | 0 | 0, 14 | 0) | 0) + $1 | 0;
  $17 = (__wasm_rotl_i32(($397 + ((($14 ^ $1 | 0) & $18 | 0) ^ $1 | 0) | 0) + -405537848 | 0 | 0, 20 | 0) | 0) + $14 | 0;
  $18 = (__wasm_rotl_i32(($394 + ((($17 ^ $14 | 0) & $1 | 0) ^ $14 | 0) | 0) + 568446438 | 0 | 0, 5 | 0) | 0) + $17 | 0;
  $453 = $7 + $18 | 0;
  $456 = $3 + $17 | 0;
  $459 = $15 + $14 | 0;
  $1 = (__wasm_rotl_i32((($25 + $1 | 0) + ((($18 ^ $17 | 0) & $14 | 0) ^ $17 | 0) | 0) + -1019803690 | 0 | 0, 9 | 0) | 0) + $18 | 0;
  $14 = (__wasm_rotl_i32(($459 + ((($1 ^ $18 | 0) & $17 | 0) ^ $18 | 0) | 0) + -187363961 | 0 | 0, 14 | 0) | 0) + $1 | 0;
  $17 = (__wasm_rotl_i32(($456 + ((($14 ^ $1 | 0) & $18 | 0) ^ $1 | 0) | 0) + 1163531501 | 0 | 0, 20 | 0) | 0) + $14 | 0;
  $18 = (__wasm_rotl_i32(($453 + ((($17 ^ $14 | 0) & $1 | 0) ^ $14 | 0) | 0) + -1444681467 | 0 | 0, 5 | 0) | 0) + $17 | 0;
  $512 = $9 + $18 | 0;
  $515 = $20 + $14 | 0;
  $1 = (__wasm_rotl_i32((($16 + $1 | 0) + ((($18 ^ $17 | 0) & $14 | 0) ^ $17 | 0) | 0) + -51403784 | 0 | 0, 9 | 0) | 0) + $18 | 0;
  $19 = (__wasm_rotl_i32(($515 + ((($1 ^ $18 | 0) & $17 | 0) ^ $18 | 0) | 0) + 1735328473 | 0 | 0, 14 | 0) | 0) + $1 | 0;
  $14 = $19 ^ $1 | 0;
  $546 = $14;
  $14 = (__wasm_rotl_i32((($4 + $17 | 0) + (($14 & $18 | 0) ^ $1 | 0) | 0) + -1926607734 | 0 | 0, 20 | 0) | 0) + $19 | 0;
  $17 = (__wasm_rotl_i32(($512 + ($546 ^ $14 | 0) | 0) + -378558 | 0 | 0, 4 | 0) | 0) + $14 | 0;
  $568 = $8 + $17 | 0;
  $571 = $22 + $19 | 0;
  $574 = $17 ^ $14 | 0;
  $1 = (__wasm_rotl_i32((($3 + $1 | 0) + (($14 ^ $19 | 0) ^ $17 | 0) | 0) + -2022574463 | 0 | 0, 11 | 0) | 0) + $17 | 0;
  $18 = (__wasm_rotl_i32(($571 + ($574 ^ $1 | 0) | 0) + 1839030562 | 0 | 0, 16 | 0) | 0) + $1 | 0;
  $597 = $18 ^ $1 | 0;
  $14 = (__wasm_rotl_i32((($25 + $14 | 0) + (($1 ^ $17 | 0) ^ $18 | 0) | 0) + -35309556 | 0 | 0, 23 | 0) | 0) + $18 | 0;
  $17 = (__wasm_rotl_i32(($568 + ($597 ^ $14 | 0) | 0) + -1530992060 | 0 | 0, 4 | 0) | 0) + $14 | 0;
  $619 = $7 + $17 | 0;
  $622 = $20 + $18 | 0;
  $625 = $17 ^ $14 | 0;
  $1 = (__wasm_rotl_i32((($2 + $1 | 0) + (($14 ^ $18 | 0) ^ $17 | 0) | 0) + 1272893353 | 0 | 0, 11 | 0) | 0) + $17 | 0;
  $18 = (__wasm_rotl_i32(($622 + ($625 ^ $1 | 0) | 0) + -155497632 | 0 | 0, 16 | 0) | 0) + $1 | 0;
  $648 = $18 ^ $1 | 0;
  $14 = (__wasm_rotl_i32((($23 + $14 | 0) + (($1 ^ $17 | 0) ^ $18 | 0) | 0) + -1094730640 | 0 | 0, 23 | 0) | 0) + $18 | 0;
  $17 = (__wasm_rotl_i32(($619 + ($648 ^ $14 | 0) | 0) + 681279174 | 0 | 0, 4 | 0) | 0) + $14 | 0;
  $670 = $6 + $17 | 0;
  $673 = $15 + $18 | 0;
  $676 = $17 ^ $14 | 0;
  $1 = (__wasm_rotl_i32((($5 + $1 | 0) + (($14 ^ $18 | 0) ^ $17 | 0) | 0) + -358537222 | 0 | 0, 11 | 0) | 0) + $17 | 0;
  $18 = (__wasm_rotl_i32(($673 + ($676 ^ $1 | 0) | 0) + -722521979 | 0 | 0, 16 | 0) | 0) + $1 | 0;
  $699 = $18 ^ $1 | 0;
  $14 = (__wasm_rotl_i32((($21 + $14 | 0) + (($1 ^ $17 | 0) ^ $18 | 0) | 0) + 76029189 | 0 | 0, 23 | 0) | 0) + $18 | 0;
  $17 = (__wasm_rotl_i32(($670 + ($699 ^ $14 | 0) | 0) + -640364487 | 0 | 0, 4 | 0) | 0) + $14 | 0;
  $721 = $5 + $17 | 0;
  $724 = $16 + $14 | 0;
  $1 = (__wasm_rotl_i32((($4 + $1 | 0) + (($14 ^ $18 | 0) ^ $17 | 0) | 0) + -421815835 | 0 | 0, 11 | 0) | 0) + $17 | 0;
  $740 = $1 ^ $17 | 0;
  $14 = (__wasm_rotl_i32((($24 + $18 | 0) + (($17 ^ $14 | 0) ^ $1 | 0) | 0) + 530742520 | 0 | 0, 16 | 0) | 0) + $1 | 0;
  $17 = (__wasm_rotl_i32(($724 + ($740 ^ $14 | 0) | 0) + -995338651 | 0 | 0, 23 | 0) | 0) + $14 | 0;
  $18 = (__wasm_rotl_i32(($721 + (($17 | ($1 ^ -1 | 0) | 0) ^ $14 | 0) | 0) + -198630844 | 0 | 0, 6 | 0) | 0) + $17 | 0;
  $773 = $4 + $18 | 0;
  $776 = $9 + $17 | 0;
  $779 = $25 + $14 | 0;
  $1 = (__wasm_rotl_i32((($20 + $1 | 0) + (($18 | ($14 ^ -1 | 0) | 0) ^ $17 | 0) | 0) + 1126891415 | 0 | 0, 10 | 0) | 0) + $18 | 0;
  $14 = (__wasm_rotl_i32(($779 + (($1 | ($17 ^ -1 | 0) | 0) ^ $18 | 0) | 0) + -1416354905 | 0 | 0, 15 | 0) | 0) + $1 | 0;
  $17 = (__wasm_rotl_i32(($776 + (($14 | ($18 ^ -1 | 0) | 0) ^ $1 | 0) | 0) + -57434055 | 0 | 0, 21 | 0) | 0) + $14 | 0;
  $18 = (__wasm_rotl_i32(($773 + (($17 | ($1 ^ -1 | 0) | 0) ^ $14 | 0) | 0) + 1700485571 | 0 | 0, 6 | 0) | 0) + $17 | 0;
  $828 = $3 + $18 | 0;
  $831 = $8 + $17 | 0;
  $834 = $23 + $14 | 0;
  $1 = (__wasm_rotl_i32((($15 + $1 | 0) + (($18 | ($14 ^ -1 | 0) | 0) ^ $17 | 0) | 0) + -1894986606 | 0 | 0, 10 | 0) | 0) + $18 | 0;
  $14 = (__wasm_rotl_i32(($834 + (($1 | ($17 ^ -1 | 0) | 0) ^ $18 | 0) | 0) + -1051523 | 0 | 0, 15 | 0) | 0) + $1 | 0;
  $17 = (__wasm_rotl_i32(($831 + (($14 | ($18 ^ -1 | 0) | 0) ^ $1 | 0) | 0) + -2054922799 | 0 | 0, 21 | 0) | 0) + $14 | 0;
  $18 = (__wasm_rotl_i32(($828 + (($17 | ($1 ^ -1 | 0) | 0) ^ $14 | 0) | 0) + 1873313359 | 0 | 0, 6 | 0) | 0) + $17 | 0;
  $883 = $2 + $18 | 0;
  $886 = $7 + $17 | 0;
  $889 = $21 + $14 | 0;
  $1 = (__wasm_rotl_i32((($24 + $1 | 0) + (($18 | ($14 ^ -1 | 0) | 0) ^ $17 | 0) | 0) + -30611744 | 0 | 0, 10 | 0) | 0) + $18 | 0;
  $14 = (__wasm_rotl_i32(($889 + (($1 | ($17 ^ -1 | 0) | 0) ^ $18 | 0) | 0) + -1560198380 | 0 | 0, 15 | 0) | 0) + $1 | 0;
  $17 = (__wasm_rotl_i32(($886 + (($14 | ($18 ^ -1 | 0) | 0) ^ $1 | 0) | 0) + 1309151649 | 0 | 0, 21 | 0) | 0) + $14 | 0;
  $18 = (__wasm_rotl_i32(($883 + (($17 | ($1 ^ -1 | 0) | 0) ^ $14 | 0) | 0) + -145523070 | 0 | 0, 6 | 0) | 0) + $17 | 0;
  HEAP32[$0 >> 2] = $18 + $10 | 0;
  $1 = (__wasm_rotl_i32((($22 + $1 | 0) + (($18 | ($14 ^ -1 | 0) | 0) ^ $17 | 0) | 0) + -1120210379 | 0 | 0, 10 | 0) | 0) + $18 | 0;
  HEAP32[($0 + 12 | 0) >> 2] = $11 + $1 | 0;
  $14 = (__wasm_rotl_i32((($16 + $14 | 0) + (($1 | ($17 ^ -1 | 0) | 0) ^ $18 | 0) | 0) + 718787259 | 0 | 0, 15 | 0) | 0) + $1 | 0;
  HEAP32[($0 + 8 | 0) >> 2] = $12 + $14 | 0;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = ($14 + $13 | 0) + (__wasm_rotl_i32((($6 + $17 | 0) + (($14 | ($18 ^ -1 | 0) | 0) ^ $1 | 0) | 0) + -343485551 | 0 | 0, 21 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
 }
 
 function FLAC__MD5Accumulate($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $6 = 0, $7 = 0, $9 = 0, i64toi32_i32$4 = 0, $10 = 0, $8 = 0, $11 = 0, i64toi32_i32$3 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $12 = 0, $13 = 0, $39 = 0, $40 = 0, $15$hi = 0, $17$hi = 0, $22$hi = 0, $27$hi = 0, $911 = 0, $916 = 0, $921 = 0, $926 = 0, $931 = 0, $936 = 0, $941 = 0, $946 = 0;
  $5 = 0;
  label$1 : {
   i64toi32_i32$0 = 0;
   $15$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $17$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $15$hi;
   i64toi32_i32$1 = $17$hi;
   i64toi32_i32$1 = __wasm_i64_mul($4 | 0, i64toi32_i32$0 | 0, $2 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $39 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $39 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   if ($39) {
    break label$1
   }
   i64toi32_i32$1 = 0;
   $22$hi = i64toi32_i32$1;
   $6 = Math_imul($4, $2);
   i64toi32_i32$1 = 0;
   $27$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $22$hi;
   i64toi32_i32$2 = $27$hi;
   i64toi32_i32$2 = __wasm_i64_mul($3 | 0, i64toi32_i32$1 | 0, $6 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $40 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $40 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   if ($40) {
    break label$1
   }
   $7 = HEAP32[($0 + 88 | 0) >> 2] | 0;
   label$2 : {
    label$3 : {
     $8 = Math_imul($6, $3);
     if ((HEAP32[($0 + 92 | 0) >> 2] | 0) >>> 0 < $8 >>> 0) {
      break label$3
     }
     $5 = $7;
     break label$2;
    }
    label$4 : {
     label$5 : {
      $5 = dlrealloc($7 | 0, $8 | 0) | 0;
      if ($5) {
       break label$5
      }
      dlfree($7 | 0);
      $5 = dlmalloc($8 | 0) | 0;
      HEAP32[($0 + 88 | 0) >> 2] = $5;
      if ($5) {
       break label$4
      }
      HEAP32[($0 + 92 | 0) >> 2] = 0;
      return 0 | 0;
     }
     HEAP32[($0 + 88 | 0) >> 2] = $5;
    }
    HEAP32[($0 + 92 | 0) >> 2] = $8;
   }
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       label$10 : {
        label$11 : {
         label$12 : {
          label$13 : {
           label$14 : {
            label$15 : {
             label$16 : {
              label$17 : {
               label$18 : {
                label$19 : {
                 label$20 : {
                  label$21 : {
                   label$22 : {
                    label$23 : {
                     label$24 : {
                      label$25 : {
                       $6 = Math_imul($4, 100) + $2 | 0;
                       if (($6 | 0) > (300 | 0)) {
                        break label$25
                       }
                       $7 = $6 + -101 | 0;
                       if ($7 >>> 0 <= 7 >>> 0) {
                        break label$19
                       }
                       $6 = $6 + -201 | 0;
                       if ($6 >>> 0 > 7 >>> 0) {
                        break label$17
                       }
                       switch ($6 | 0) {
                       case 2:
                       case 4:
                       case 6:
                        break label$17;
                       case 1:
                        break label$21;
                       case 3:
                        break label$22;
                       case 5:
                        break label$23;
                       case 7:
                        break label$24;
                       default:
                        break label$20;
                       };
                      }
                      $7 = $6 + -401 | 0;
                      if ($7 >>> 0 <= 7 >>> 0) {
                       break label$18
                      }
                      $6 = $6 + -301 | 0;
                      if ($6 >>> 0 > 1 >>> 0) {
                       break label$17
                      }
                      label$26 : {
                       switch ($6 | 0) {
                       case 1:
                        if (!$3) {
                         break label$6
                        }
                        $2 = 0;
                        label$28 : while (1) {
                         $6 = $2 << 2 | 0;
                         $4 = HEAP32[((HEAP32[$1 >> 2] | 0) + $6 | 0) >> 2] | 0;
                         HEAP8[$5 >> 0] = $4;
                         HEAP8[($5 + 2 | 0) >> 0] = $4 >>> 16 | 0;
                         HEAP8[($5 + 1 | 0) >> 0] = $4 >>> 8 | 0;
                         $4 = HEAP32[((HEAP32[($1 + 4 | 0) >> 2] | 0) + $6 | 0) >> 2] | 0;
                         HEAP8[($5 + 3 | 0) >> 0] = $4;
                         HEAP8[($5 + 5 | 0) >> 0] = $4 >>> 16 | 0;
                         HEAP8[($5 + 4 | 0) >> 0] = $4 >>> 8 | 0;
                         $5 = $5 + 6 | 0;
                         $2 = $2 + 1 | 0;
                         if (($2 | 0) != ($3 | 0)) {
                          continue label$28
                         }
                         break label$6;
                        };
                       default:
                        break label$26;
                       };
                      }
                      if (!$3) {
                       break label$6
                      }
                      $2 = 0;
                      label$29 : while (1) {
                       $4 = HEAP32[((HEAP32[$1 >> 2] | 0) + ($2 << 2 | 0) | 0) >> 2] | 0;
                       HEAP8[$5 >> 0] = $4;
                       HEAP8[($5 + 2 | 0) >> 0] = $4 >>> 16 | 0;
                       HEAP8[($5 + 1 | 0) >> 0] = $4 >>> 8 | 0;
                       $5 = $5 + 3 | 0;
                       $2 = $2 + 1 | 0;
                       if (($2 | 0) != ($3 | 0)) {
                        continue label$29
                       }
                       break label$6;
                      };
                     }
                     if (!$3) {
                      break label$6
                     }
                     $4 = HEAP32[($1 + 28 | 0) >> 2] | 0;
                     $6 = HEAP32[($1 + 24 | 0) >> 2] | 0;
                     $7 = HEAP32[($1 + 20 | 0) >> 2] | 0;
                     $9 = HEAP32[($1 + 16 | 0) >> 2] | 0;
                     $10 = HEAP32[($1 + 12 | 0) >> 2] | 0;
                     $11 = HEAP32[($1 + 8 | 0) >> 2] | 0;
                     $12 = HEAP32[($1 + 4 | 0) >> 2] | 0;
                     $13 = HEAP32[$1 >> 2] | 0;
                     $2 = 0;
                     label$30 : while (1) {
                      $1 = $2 << 2 | 0;
                      HEAP16[$5 >> 1] = HEAP32[($13 + $1 | 0) >> 2] | 0;
                      HEAP16[($5 + 2 | 0) >> 1] = HEAP32[($12 + $1 | 0) >> 2] | 0;
                      HEAP16[($5 + 4 | 0) >> 1] = HEAP32[($11 + $1 | 0) >> 2] | 0;
                      HEAP16[($5 + 6 | 0) >> 1] = HEAP32[($10 + $1 | 0) >> 2] | 0;
                      HEAP16[($5 + 8 | 0) >> 1] = HEAP32[($9 + $1 | 0) >> 2] | 0;
                      HEAP16[($5 + 10 | 0) >> 1] = HEAP32[($7 + $1 | 0) >> 2] | 0;
                      HEAP16[($5 + 12 | 0) >> 1] = HEAP32[($6 + $1 | 0) >> 2] | 0;
                      HEAP16[($5 + 14 | 0) >> 1] = HEAP32[($4 + $1 | 0) >> 2] | 0;
                      $5 = $5 + 16 | 0;
                      $2 = $2 + 1 | 0;
                      if (($2 | 0) != ($3 | 0)) {
                       continue label$30
                      }
                      break label$6;
                     };
                    }
                    if (!$3) {
                     break label$6
                    }
                    $4 = HEAP32[($1 + 20 | 0) >> 2] | 0;
                    $6 = HEAP32[($1 + 16 | 0) >> 2] | 0;
                    $7 = HEAP32[($1 + 12 | 0) >> 2] | 0;
                    $9 = HEAP32[($1 + 8 | 0) >> 2] | 0;
                    $10 = HEAP32[($1 + 4 | 0) >> 2] | 0;
                    $11 = HEAP32[$1 >> 2] | 0;
                    $2 = 0;
                    label$31 : while (1) {
                     $1 = $2 << 2 | 0;
                     HEAP16[$5 >> 1] = HEAP32[($11 + $1 | 0) >> 2] | 0;
                     HEAP16[($5 + 2 | 0) >> 1] = HEAP32[($10 + $1 | 0) >> 2] | 0;
                     HEAP16[($5 + 4 | 0) >> 1] = HEAP32[($9 + $1 | 0) >> 2] | 0;
                     HEAP16[($5 + 6 | 0) >> 1] = HEAP32[($7 + $1 | 0) >> 2] | 0;
                     HEAP16[($5 + 8 | 0) >> 1] = HEAP32[($6 + $1 | 0) >> 2] | 0;
                     HEAP16[($5 + 10 | 0) >> 1] = HEAP32[($4 + $1 | 0) >> 2] | 0;
                     $5 = $5 + 12 | 0;
                     $2 = $2 + 1 | 0;
                     if (($2 | 0) != ($3 | 0)) {
                      continue label$31
                     }
                     break label$6;
                    };
                   }
                   if (!$3) {
                    break label$6
                   }
                   $4 = HEAP32[($1 + 12 | 0) >> 2] | 0;
                   $6 = HEAP32[($1 + 8 | 0) >> 2] | 0;
                   $7 = HEAP32[($1 + 4 | 0) >> 2] | 0;
                   $9 = HEAP32[$1 >> 2] | 0;
                   $2 = 0;
                   label$32 : while (1) {
                    $1 = $2 << 2 | 0;
                    HEAP16[$5 >> 1] = HEAP32[($9 + $1 | 0) >> 2] | 0;
                    HEAP16[($5 + 2 | 0) >> 1] = HEAP32[($7 + $1 | 0) >> 2] | 0;
                    HEAP16[($5 + 4 | 0) >> 1] = HEAP32[($6 + $1 | 0) >> 2] | 0;
                    HEAP16[($5 + 6 | 0) >> 1] = HEAP32[($4 + $1 | 0) >> 2] | 0;
                    $5 = $5 + 8 | 0;
                    $2 = $2 + 1 | 0;
                    if (($2 | 0) != ($3 | 0)) {
                     continue label$32
                    }
                    break label$6;
                   };
                  }
                  if (!$3) {
                   break label$6
                  }
                  $4 = HEAP32[($1 + 4 | 0) >> 2] | 0;
                  $6 = HEAP32[$1 >> 2] | 0;
                  $1 = 0;
                  label$33 : while (1) {
                   $2 = $1 << 2 | 0;
                   HEAP16[$5 >> 1] = HEAP32[($6 + $2 | 0) >> 2] | 0;
                   HEAP16[($5 + 2 | 0) >> 1] = HEAP32[($4 + $2 | 0) >> 2] | 0;
                   $5 = $5 + 4 | 0;
                   $1 = $1 + 1 | 0;
                   if (($1 | 0) != ($3 | 0)) {
                    continue label$33
                   }
                   break label$6;
                  };
                 }
                 if (!$3) {
                  break label$6
                 }
                 $2 = HEAP32[$1 >> 2] | 0;
                 $1 = 0;
                 label$34 : while (1) {
                  HEAP16[$5 >> 1] = HEAP32[($2 + ($1 << 2 | 0) | 0) >> 2] | 0;
                  $5 = $5 + 2 | 0;
                  $1 = $1 + 1 | 0;
                  if (($1 | 0) != ($3 | 0)) {
                   continue label$34
                  }
                  break label$6;
                 };
                }
                switch ($7 | 0) {
                case 7:
                 break label$12;
                case 5:
                 break label$13;
                case 3:
                 break label$14;
                case 1:
                 break label$15;
                case 2:
                case 4:
                case 6:
                 break label$17;
                default:
                 break label$16;
                };
               }
               switch ($7 | 0) {
               case 1:
                break label$10;
               case 2:
               case 4:
               case 6:
                break label$17;
               case 7:
                break label$7;
               case 5:
                break label$8;
               case 3:
                break label$9;
               default:
                break label$11;
               };
              }
              $4 = $4 + -1 | 0;
              if ($4 >>> 0 > 3 >>> 0) {
               break label$6
              }
              label$35 : {
               switch ($4 | 0) {
               case 3:
                if (!$2) {
                 break label$6
                }
                if (!$3) {
                 break label$6
                }
                $7 = 0;
                label$39 : while (1) {
                 $4 = 0;
                 $6 = $5;
                 label$40 : while (1) {
                  HEAP32[$6 >> 2] = HEAP32[((HEAP32[($1 + ($4 << 2 | 0) | 0) >> 2] | 0) + ($7 << 2 | 0) | 0) >> 2] | 0;
                  $6 = $6 + 4 | 0;
                  $4 = $4 + 1 | 0;
                  if (($4 | 0) != ($2 | 0)) {
                   continue label$40
                  }
                  break label$40;
                 };
                 $5 = $5 + ($2 << 2 | 0) | 0;
                 $7 = $7 + 1 | 0;
                 if (($7 | 0) != ($3 | 0)) {
                  continue label$39
                 }
                 break label$6;
                };
               case 2:
                if (!$2) {
                 break label$6
                }
                if (!$3) {
                 break label$6
                }
                $10 = Math_imul($2, 3);
                $9 = 0;
                label$41 : while (1) {
                 $6 = 0;
                 $4 = $5;
                 label$42 : while (1) {
                  $7 = HEAP32[((HEAP32[($1 + ($6 << 2 | 0) | 0) >> 2] | 0) + ($9 << 2 | 0) | 0) >> 2] | 0;
                  HEAP8[$4 >> 0] = $7;
                  HEAP8[($4 + 2 | 0) >> 0] = $7 >>> 16 | 0;
                  HEAP8[($4 + 1 | 0) >> 0] = $7 >>> 8 | 0;
                  $4 = $4 + 3 | 0;
                  $6 = $6 + 1 | 0;
                  if (($6 | 0) != ($2 | 0)) {
                   continue label$42
                  }
                  break label$42;
                 };
                 $5 = $5 + $10 | 0;
                 $9 = $9 + 1 | 0;
                 if (($9 | 0) != ($3 | 0)) {
                  continue label$41
                 }
                 break label$6;
                };
               case 1:
                if (!$2) {
                 break label$6
                }
                if (!$3) {
                 break label$6
                }
                $7 = 0;
                label$43 : while (1) {
                 $4 = 0;
                 $6 = $5;
                 label$44 : while (1) {
                  HEAP16[$6 >> 1] = HEAP32[((HEAP32[($1 + ($4 << 2 | 0) | 0) >> 2] | 0) + ($7 << 2 | 0) | 0) >> 2] | 0;
                  $6 = $6 + 2 | 0;
                  $4 = $4 + 1 | 0;
                  if (($4 | 0) != ($2 | 0)) {
                   continue label$44
                  }
                  break label$44;
                 };
                 $5 = $5 + ($2 << 1 | 0) | 0;
                 $7 = $7 + 1 | 0;
                 if (($7 | 0) != ($3 | 0)) {
                  continue label$43
                 }
                 break label$6;
                };
               default:
                break label$35;
               };
              }
              if (!$2) {
               break label$6
              }
              if (!$3) {
               break label$6
              }
              $7 = 0;
              label$45 : while (1) {
               $4 = 0;
               $6 = $5;
               label$46 : while (1) {
                HEAP8[$6 >> 0] = HEAP32[((HEAP32[($1 + ($4 << 2 | 0) | 0) >> 2] | 0) + ($7 << 2 | 0) | 0) >> 2] | 0;
                $6 = $6 + 1 | 0;
                $4 = $4 + 1 | 0;
                if (($4 | 0) != ($2 | 0)) {
                 continue label$46
                }
                break label$46;
               };
               $5 = $5 + $2 | 0;
               $7 = $7 + 1 | 0;
               if (($7 | 0) != ($3 | 0)) {
                continue label$45
               }
               break label$6;
              };
             }
             if (!$3) {
              break label$6
             }
             $2 = 0;
             label$47 : while (1) {
              HEAP8[$5 >> 0] = HEAP32[((HEAP32[$1 >> 2] | 0) + ($2 << 2 | 0) | 0) >> 2] | 0;
              $5 = $5 + 1 | 0;
              $2 = $2 + 1 | 0;
              if (($2 | 0) != ($3 | 0)) {
               continue label$47
              }
              break label$6;
             };
            }
            if (!$3) {
             break label$6
            }
            $2 = 0;
            label$48 : while (1) {
             $4 = $2 << 2 | 0;
             HEAP8[$5 >> 0] = HEAP32[((HEAP32[$1 >> 2] | 0) + $4 | 0) >> 2] | 0;
             HEAP8[($5 + 1 | 0) >> 0] = HEAP32[((HEAP32[($1 + 4 | 0) >> 2] | 0) + $4 | 0) >> 2] | 0;
             $5 = $5 + 2 | 0;
             $2 = $2 + 1 | 0;
             if (($2 | 0) != ($3 | 0)) {
              continue label$48
             }
             break label$6;
            };
           }
           if (!$3) {
            break label$6
           }
           $4 = 0;
           label$49 : while (1) {
            $2 = $4 << 2 | 0;
            HEAP8[$5 >> 0] = HEAP32[((HEAP32[$1 >> 2] | 0) + $2 | 0) >> 2] | 0;
            HEAP8[($5 + 1 | 0) >> 0] = HEAP32[((HEAP32[($1 + 4 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0;
            HEAP8[($5 + 2 | 0) >> 0] = HEAP32[((HEAP32[($1 + 8 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0;
            HEAP8[($5 + 3 | 0) >> 0] = HEAP32[((HEAP32[($1 + 12 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0;
            $5 = $5 + 4 | 0;
            $4 = $4 + 1 | 0;
            if (($4 | 0) != ($3 | 0)) {
             continue label$49
            }
            break label$6;
           };
          }
          if (!$3) {
           break label$6
          }
          $4 = 0;
          label$50 : while (1) {
           $2 = $4 << 2 | 0;
           HEAP8[$5 >> 0] = HEAP32[((HEAP32[$1 >> 2] | 0) + $2 | 0) >> 2] | 0;
           HEAP8[($5 + 1 | 0) >> 0] = HEAP32[((HEAP32[($1 + 4 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0;
           HEAP8[($5 + 2 | 0) >> 0] = HEAP32[((HEAP32[($1 + 8 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0;
           HEAP8[($5 + 3 | 0) >> 0] = HEAP32[((HEAP32[($1 + 12 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0;
           HEAP8[($5 + 4 | 0) >> 0] = HEAP32[((HEAP32[($1 + 16 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0;
           HEAP8[($5 + 5 | 0) >> 0] = HEAP32[((HEAP32[($1 + 20 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0;
           $5 = $5 + 6 | 0;
           $4 = $4 + 1 | 0;
           if (($4 | 0) != ($3 | 0)) {
            continue label$50
           }
           break label$6;
          };
         }
         if (!$3) {
          break label$6
         }
         $4 = 0;
         label$51 : while (1) {
          $2 = $4 << 2 | 0;
          HEAP8[$5 >> 0] = HEAP32[((HEAP32[$1 >> 2] | 0) + $2 | 0) >> 2] | 0;
          HEAP8[($5 + 1 | 0) >> 0] = HEAP32[((HEAP32[($1 + 4 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0;
          HEAP8[($5 + 2 | 0) >> 0] = HEAP32[((HEAP32[($1 + 8 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0;
          HEAP8[($5 + 3 | 0) >> 0] = HEAP32[((HEAP32[($1 + 12 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0;
          HEAP8[($5 + 4 | 0) >> 0] = HEAP32[((HEAP32[($1 + 16 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0;
          HEAP8[($5 + 5 | 0) >> 0] = HEAP32[((HEAP32[($1 + 20 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0;
          HEAP8[($5 + 6 | 0) >> 0] = HEAP32[((HEAP32[($1 + 24 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0;
          HEAP8[($5 + 7 | 0) >> 0] = HEAP32[((HEAP32[($1 + 28 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0;
          $5 = $5 + 8 | 0;
          $4 = $4 + 1 | 0;
          if (($4 | 0) != ($3 | 0)) {
           continue label$51
          }
          break label$6;
         };
        }
        if (!$3) {
         break label$6
        }
        $2 = HEAP32[$1 >> 2] | 0;
        $1 = 0;
        label$52 : while (1) {
         HEAP32[$5 >> 2] = HEAP32[($2 + ($1 << 2 | 0) | 0) >> 2] | 0;
         $5 = $5 + 4 | 0;
         $1 = $1 + 1 | 0;
         if (($1 | 0) != ($3 | 0)) {
          continue label$52
         }
         break label$6;
        };
       }
       if (!$3) {
        break label$6
       }
       $4 = HEAP32[($1 + 4 | 0) >> 2] | 0;
       $6 = HEAP32[$1 >> 2] | 0;
       $1 = 0;
       label$53 : while (1) {
        $2 = $1 << 2 | 0;
        HEAP32[$5 >> 2] = HEAP32[($6 + $2 | 0) >> 2] | 0;
        HEAP32[($5 + 4 | 0) >> 2] = HEAP32[($4 + $2 | 0) >> 2] | 0;
        $5 = $5 + 8 | 0;
        $1 = $1 + 1 | 0;
        if (($1 | 0) != ($3 | 0)) {
         continue label$53
        }
        break label$6;
       };
      }
      if (!$3) {
       break label$6
      }
      $4 = HEAP32[($1 + 12 | 0) >> 2] | 0;
      $6 = HEAP32[($1 + 8 | 0) >> 2] | 0;
      $7 = HEAP32[($1 + 4 | 0) >> 2] | 0;
      $9 = HEAP32[$1 >> 2] | 0;
      $2 = 0;
      label$54 : while (1) {
       $1 = $2 << 2 | 0;
       HEAP32[$5 >> 2] = HEAP32[($9 + $1 | 0) >> 2] | 0;
       HEAP32[($5 + 4 | 0) >> 2] = HEAP32[($7 + $1 | 0) >> 2] | 0;
       HEAP32[($5 + 8 | 0) >> 2] = HEAP32[($6 + $1 | 0) >> 2] | 0;
       HEAP32[($5 + 12 | 0) >> 2] = HEAP32[($4 + $1 | 0) >> 2] | 0;
       $5 = $5 + 16 | 0;
       $2 = $2 + 1 | 0;
       if (($2 | 0) != ($3 | 0)) {
        continue label$54
       }
       break label$6;
      };
     }
     if (!$3) {
      break label$6
     }
     $4 = HEAP32[($1 + 20 | 0) >> 2] | 0;
     $6 = HEAP32[($1 + 16 | 0) >> 2] | 0;
     $7 = HEAP32[($1 + 12 | 0) >> 2] | 0;
     $9 = HEAP32[($1 + 8 | 0) >> 2] | 0;
     $10 = HEAP32[($1 + 4 | 0) >> 2] | 0;
     $11 = HEAP32[$1 >> 2] | 0;
     $2 = 0;
     label$55 : while (1) {
      $1 = $2 << 2 | 0;
      HEAP32[$5 >> 2] = HEAP32[($11 + $1 | 0) >> 2] | 0;
      HEAP32[($5 + 4 | 0) >> 2] = HEAP32[($10 + $1 | 0) >> 2] | 0;
      HEAP32[($5 + 8 | 0) >> 2] = HEAP32[($9 + $1 | 0) >> 2] | 0;
      HEAP32[($5 + 12 | 0) >> 2] = HEAP32[($7 + $1 | 0) >> 2] | 0;
      HEAP32[($5 + 16 | 0) >> 2] = HEAP32[($6 + $1 | 0) >> 2] | 0;
      HEAP32[($5 + 20 | 0) >> 2] = HEAP32[($4 + $1 | 0) >> 2] | 0;
      $5 = $5 + 24 | 0;
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($3 | 0)) {
       continue label$55
      }
      break label$6;
     };
    }
    if (!$3) {
     break label$6
    }
    $4 = HEAP32[($1 + 28 | 0) >> 2] | 0;
    $6 = HEAP32[($1 + 24 | 0) >> 2] | 0;
    $7 = HEAP32[($1 + 20 | 0) >> 2] | 0;
    $9 = HEAP32[($1 + 16 | 0) >> 2] | 0;
    $10 = HEAP32[($1 + 12 | 0) >> 2] | 0;
    $11 = HEAP32[($1 + 8 | 0) >> 2] | 0;
    $12 = HEAP32[($1 + 4 | 0) >> 2] | 0;
    $13 = HEAP32[$1 >> 2] | 0;
    $2 = 0;
    label$56 : while (1) {
     $1 = $2 << 2 | 0;
     HEAP32[$5 >> 2] = HEAP32[($13 + $1 | 0) >> 2] | 0;
     HEAP32[($5 + 4 | 0) >> 2] = HEAP32[($12 + $1 | 0) >> 2] | 0;
     HEAP32[($5 + 8 | 0) >> 2] = HEAP32[($11 + $1 | 0) >> 2] | 0;
     HEAP32[($5 + 12 | 0) >> 2] = HEAP32[($10 + $1 | 0) >> 2] | 0;
     HEAP32[($5 + 16 | 0) >> 2] = HEAP32[($9 + $1 | 0) >> 2] | 0;
     HEAP32[($5 + 20 | 0) >> 2] = HEAP32[($7 + $1 | 0) >> 2] | 0;
     HEAP32[($5 + 24 | 0) >> 2] = HEAP32[($6 + $1 | 0) >> 2] | 0;
     HEAP32[($5 + 28 | 0) >> 2] = HEAP32[($4 + $1 | 0) >> 2] | 0;
     $5 = $5 + 32 | 0;
     $2 = $2 + 1 | 0;
     if (($2 | 0) != ($3 | 0)) {
      continue label$56
     }
     break label$56;
    };
   }
   $5 = HEAP32[($0 + 80 | 0) >> 2] | 0;
   $2 = $5 + $8 | 0;
   HEAP32[($0 + 80 | 0) >> 2] = $2;
   $1 = HEAP32[($0 + 88 | 0) >> 2] | 0;
   label$57 : {
    if ($2 >>> 0 >= $5 >>> 0) {
     break label$57
    }
    $2 = $0 + 84 | 0;
    HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1 | 0;
   }
   $2 = ($0 + ($5 | -64 | 0) | 0) + 64 | 0;
   label$58 : {
    label$59 : {
     $3 = 64 - ($5 & 63 | 0) | 0;
     if ($8 >>> 0 >= $3 >>> 0) {
      break label$59
     }
     memcpy($2 | 0, $1 | 0, $8 | 0) | 0;
     break label$58;
    }
    memcpy($2 | 0, $1 | 0, $3 | 0) | 0;
    $2 = $0 + 64 | 0;
    FLAC__MD5Transform($2 | 0, $0 | 0);
    $5 = $1 + $3 | 0;
    label$60 : {
     $1 = $8 - $3 | 0;
     if ($1 >>> 0 < 64 >>> 0) {
      break label$60
     }
     label$61 : while (1) {
      i64toi32_i32$1 = $5;
      i64toi32_i32$2 = HEAPU8[$5 >> 0] | 0 | ((HEAPU8[($5 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($5 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($5 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      i64toi32_i32$0 = HEAPU8[($5 + 4 | 0) >> 0] | 0 | ((HEAPU8[($5 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($5 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($5 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      $911 = i64toi32_i32$2;
      i64toi32_i32$2 = $0;
      $31 = $911;
      HEAP8[$0 >> 0] = $31;
      HEAP8[($0 + 1 | 0) >> 0] = $31 >>> 8 | 0;
      HEAP8[($0 + 2 | 0) >> 0] = $31 >>> 16 | 0;
      HEAP8[($0 + 3 | 0) >> 0] = $31 >>> 24 | 0;
      HEAP8[($0 + 4 | 0) >> 0] = i64toi32_i32$0;
      HEAP8[($0 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
      HEAP8[($0 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
      HEAP8[($0 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
      i64toi32_i32$1 = $5 + 56 | 0;
      i64toi32_i32$0 = HEAPU8[i64toi32_i32$1 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      i64toi32_i32$2 = HEAPU8[(i64toi32_i32$1 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      $916 = i64toi32_i32$0;
      i64toi32_i32$0 = $0 + 56 | 0;
      $32 = $916;
      HEAP8[i64toi32_i32$0 >> 0] = $32;
      HEAP8[(i64toi32_i32$0 + 1 | 0) >> 0] = $32 >>> 8 | 0;
      HEAP8[(i64toi32_i32$0 + 2 | 0) >> 0] = $32 >>> 16 | 0;
      HEAP8[(i64toi32_i32$0 + 3 | 0) >> 0] = $32 >>> 24 | 0;
      HEAP8[(i64toi32_i32$0 + 4 | 0) >> 0] = i64toi32_i32$2;
      HEAP8[(i64toi32_i32$0 + 5 | 0) >> 0] = i64toi32_i32$2 >>> 8 | 0;
      HEAP8[(i64toi32_i32$0 + 6 | 0) >> 0] = i64toi32_i32$2 >>> 16 | 0;
      HEAP8[(i64toi32_i32$0 + 7 | 0) >> 0] = i64toi32_i32$2 >>> 24 | 0;
      i64toi32_i32$1 = $5 + 48 | 0;
      i64toi32_i32$2 = HEAPU8[i64toi32_i32$1 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      i64toi32_i32$0 = HEAPU8[(i64toi32_i32$1 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      $921 = i64toi32_i32$2;
      i64toi32_i32$2 = $0 + 48 | 0;
      $33 = $921;
      HEAP8[i64toi32_i32$2 >> 0] = $33;
      HEAP8[(i64toi32_i32$2 + 1 | 0) >> 0] = $33 >>> 8 | 0;
      HEAP8[(i64toi32_i32$2 + 2 | 0) >> 0] = $33 >>> 16 | 0;
      HEAP8[(i64toi32_i32$2 + 3 | 0) >> 0] = $33 >>> 24 | 0;
      HEAP8[(i64toi32_i32$2 + 4 | 0) >> 0] = i64toi32_i32$0;
      HEAP8[(i64toi32_i32$2 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
      HEAP8[(i64toi32_i32$2 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
      HEAP8[(i64toi32_i32$2 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
      i64toi32_i32$1 = $5 + 40 | 0;
      i64toi32_i32$0 = HEAPU8[i64toi32_i32$1 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      i64toi32_i32$2 = HEAPU8[(i64toi32_i32$1 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      $926 = i64toi32_i32$0;
      i64toi32_i32$0 = $0 + 40 | 0;
      $34 = $926;
      HEAP8[i64toi32_i32$0 >> 0] = $34;
      HEAP8[(i64toi32_i32$0 + 1 | 0) >> 0] = $34 >>> 8 | 0;
      HEAP8[(i64toi32_i32$0 + 2 | 0) >> 0] = $34 >>> 16 | 0;
      HEAP8[(i64toi32_i32$0 + 3 | 0) >> 0] = $34 >>> 24 | 0;
      HEAP8[(i64toi32_i32$0 + 4 | 0) >> 0] = i64toi32_i32$2;
      HEAP8[(i64toi32_i32$0 + 5 | 0) >> 0] = i64toi32_i32$2 >>> 8 | 0;
      HEAP8[(i64toi32_i32$0 + 6 | 0) >> 0] = i64toi32_i32$2 >>> 16 | 0;
      HEAP8[(i64toi32_i32$0 + 7 | 0) >> 0] = i64toi32_i32$2 >>> 24 | 0;
      i64toi32_i32$1 = $5 + 32 | 0;
      i64toi32_i32$2 = HEAPU8[i64toi32_i32$1 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      i64toi32_i32$0 = HEAPU8[(i64toi32_i32$1 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      $931 = i64toi32_i32$2;
      i64toi32_i32$2 = $0 + 32 | 0;
      $35 = $931;
      HEAP8[i64toi32_i32$2 >> 0] = $35;
      HEAP8[(i64toi32_i32$2 + 1 | 0) >> 0] = $35 >>> 8 | 0;
      HEAP8[(i64toi32_i32$2 + 2 | 0) >> 0] = $35 >>> 16 | 0;
      HEAP8[(i64toi32_i32$2 + 3 | 0) >> 0] = $35 >>> 24 | 0;
      HEAP8[(i64toi32_i32$2 + 4 | 0) >> 0] = i64toi32_i32$0;
      HEAP8[(i64toi32_i32$2 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
      HEAP8[(i64toi32_i32$2 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
      HEAP8[(i64toi32_i32$2 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
      i64toi32_i32$1 = $5 + 24 | 0;
      i64toi32_i32$0 = HEAPU8[i64toi32_i32$1 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      i64toi32_i32$2 = HEAPU8[(i64toi32_i32$1 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      $936 = i64toi32_i32$0;
      i64toi32_i32$0 = $0 + 24 | 0;
      $36 = $936;
      HEAP8[i64toi32_i32$0 >> 0] = $36;
      HEAP8[(i64toi32_i32$0 + 1 | 0) >> 0] = $36 >>> 8 | 0;
      HEAP8[(i64toi32_i32$0 + 2 | 0) >> 0] = $36 >>> 16 | 0;
      HEAP8[(i64toi32_i32$0 + 3 | 0) >> 0] = $36 >>> 24 | 0;
      HEAP8[(i64toi32_i32$0 + 4 | 0) >> 0] = i64toi32_i32$2;
      HEAP8[(i64toi32_i32$0 + 5 | 0) >> 0] = i64toi32_i32$2 >>> 8 | 0;
      HEAP8[(i64toi32_i32$0 + 6 | 0) >> 0] = i64toi32_i32$2 >>> 16 | 0;
      HEAP8[(i64toi32_i32$0 + 7 | 0) >> 0] = i64toi32_i32$2 >>> 24 | 0;
      i64toi32_i32$1 = $5 + 16 | 0;
      i64toi32_i32$2 = HEAPU8[i64toi32_i32$1 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      i64toi32_i32$0 = HEAPU8[(i64toi32_i32$1 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      $941 = i64toi32_i32$2;
      i64toi32_i32$2 = $0 + 16 | 0;
      $37 = $941;
      HEAP8[i64toi32_i32$2 >> 0] = $37;
      HEAP8[(i64toi32_i32$2 + 1 | 0) >> 0] = $37 >>> 8 | 0;
      HEAP8[(i64toi32_i32$2 + 2 | 0) >> 0] = $37 >>> 16 | 0;
      HEAP8[(i64toi32_i32$2 + 3 | 0) >> 0] = $37 >>> 24 | 0;
      HEAP8[(i64toi32_i32$2 + 4 | 0) >> 0] = i64toi32_i32$0;
      HEAP8[(i64toi32_i32$2 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
      HEAP8[(i64toi32_i32$2 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
      HEAP8[(i64toi32_i32$2 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
      i64toi32_i32$1 = $5 + 8 | 0;
      i64toi32_i32$0 = HEAPU8[i64toi32_i32$1 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      i64toi32_i32$2 = HEAPU8[(i64toi32_i32$1 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      $946 = i64toi32_i32$0;
      i64toi32_i32$0 = $0 + 8 | 0;
      $38 = $946;
      HEAP8[i64toi32_i32$0 >> 0] = $38;
      HEAP8[(i64toi32_i32$0 + 1 | 0) >> 0] = $38 >>> 8 | 0;
      HEAP8[(i64toi32_i32$0 + 2 | 0) >> 0] = $38 >>> 16 | 0;
      HEAP8[(i64toi32_i32$0 + 3 | 0) >> 0] = $38 >>> 24 | 0;
      HEAP8[(i64toi32_i32$0 + 4 | 0) >> 0] = i64toi32_i32$2;
      HEAP8[(i64toi32_i32$0 + 5 | 0) >> 0] = i64toi32_i32$2 >>> 8 | 0;
      HEAP8[(i64toi32_i32$0 + 6 | 0) >> 0] = i64toi32_i32$2 >>> 16 | 0;
      HEAP8[(i64toi32_i32$0 + 7 | 0) >> 0] = i64toi32_i32$2 >>> 24 | 0;
      FLAC__MD5Transform($2 | 0, $0 | 0);
      $5 = $5 + 64 | 0;
      $1 = $1 + -64 | 0;
      if ($1 >>> 0 > 63 >>> 0) {
       continue label$61
      }
      break label$61;
     };
    }
    memcpy($0 | 0, $5 | 0, $1 | 0) | 0;
   }
   $5 = 1;
  }
  return $5 | 0;
 }
 
 function __stdio_read($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $7 = 0;
  label$1 : {
   $3 = global$0 - 32 | 0;
   $7 = $3;
   if ($3 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $7;
  }
  HEAP32[($3 + 16 | 0) >> 2] = $1;
  $4 = HEAP32[($0 + 48 | 0) >> 2] | 0;
  HEAP32[($3 + 20 | 0) >> 2] = $2 - (($4 | 0) != (0 | 0)) | 0;
  $5 = HEAP32[($0 + 44 | 0) >> 2] | 0;
  HEAP32[($3 + 28 | 0) >> 2] = $4;
  HEAP32[($3 + 24 | 0) >> 2] = $5;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      if (!(__wasi_syscall_ret(__wasi_fd_read(HEAP32[($0 + 60 | 0) >> 2] | 0 | 0, $3 + 16 | 0 | 0, 2 | 0, $3 + 12 | 0 | 0) | 0 | 0) | 0)) {
       break label$6
      }
      $2 = -1;
      HEAP32[($3 + 12 | 0) >> 2] = -1;
      break label$5;
     }
     $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
     if (($4 | 0) > (0 | 0)) {
      break label$4
     }
     $2 = $4;
    }
    HEAP32[$0 >> 2] = ($2 & 48 | 0) ^ 16 | 0 | (HEAP32[$0 >> 2] | 0) | 0;
    break label$3;
   }
   label$7 : {
    $6 = HEAP32[($3 + 20 | 0) >> 2] | 0;
    if ($4 >>> 0 > $6 >>> 0) {
     break label$7
    }
    $2 = $4;
    break label$3;
   }
   $5 = HEAP32[($0 + 44 | 0) >> 2] | 0;
   HEAP32[($0 + 4 | 0) >> 2] = $5;
   HEAP32[($0 + 8 | 0) >> 2] = $5 + ($4 - $6 | 0) | 0;
   if (!(HEAP32[($0 + 48 | 0) >> 2] | 0)) {
    break label$3
   }
   HEAP32[($0 + 4 | 0) >> 2] = $5 + 1 | 0;
   HEAP8[(($2 + $1 | 0) + -1 | 0) >> 0] = HEAPU8[$5 >> 0] | 0;
  }
  label$8 : {
   $8 = $3 + 32 | 0;
   if ($8 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $8;
  }
  return $2 | 0;
 }
 
 function fflush($0) {
  $0 = $0 | 0;
  var $2 = 0, $1 = 0;
  label$1 : {
   label$2 : {
    if (!$0) {
     break label$2
    }
    label$3 : {
     if ((HEAP32[($0 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
      break label$3
     }
     return __fflush_unlocked($0 | 0) | 0 | 0;
    }
    $1 = __lockfile($0 | 0) | 0;
    $2 = __fflush_unlocked($0 | 0) | 0;
    if (!$1) {
     break label$1
    }
    __unlockfile($0 | 0);
    return $2 | 0;
   }
   $2 = 0;
   label$4 : {
    if (!(HEAP32[(0 + 11160 | 0) >> 2] | 0)) {
     break label$4
    }
    $2 = fflush(HEAP32[(0 + 11160 | 0) >> 2] | 0 | 0) | 0;
   }
   label$5 : {
    $0 = HEAP32[(__ofl_lock() | 0) >> 2] | 0;
    if (!$0) {
     break label$5
    }
    label$6 : while (1) {
     $1 = 0;
     label$7 : {
      if ((HEAP32[($0 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$7
      }
      $1 = __lockfile($0 | 0) | 0;
     }
     label$8 : {
      if ((HEAP32[($0 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0 + 28 | 0) >> 2] | 0) >>> 0) {
       break label$8
      }
      $2 = __fflush_unlocked($0 | 0) | 0 | $2 | 0;
     }
     label$9 : {
      if (!$1) {
       break label$9
      }
      __unlockfile($0 | 0);
     }
     $0 = HEAP32[($0 + 56 | 0) >> 2] | 0;
     if ($0) {
      continue label$6
     }
     break label$6;
    };
   }
   __ofl_unlock();
  }
  return $2 | 0;
 }
 
 function __fflush_unlocked($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1 = 0, $2 = 0;
  label$1 : {
   if ((HEAP32[($0 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0 + 28 | 0) >> 2] | 0) >>> 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($0 + 36 | 0) >> 2] | 0]($0, 0, 0) | 0;
   if (HEAP32[($0 + 20 | 0) >> 2] | 0) {
    break label$1
   }
   return -1 | 0;
  }
  label$2 : {
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   if ($1 >>> 0 >= $2 >>> 0) {
    break label$2
   }
   i64toi32_i32$1 = $1 - $2 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   i64toi32_i32$0 = FUNCTION_TABLE[HEAP32[($0 + 40 | 0) >> 2] | 0]($0, i64toi32_i32$1, i64toi32_i32$0, 1) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  }
  HEAP32[($0 + 28 | 0) >> 2] = 0;
  i64toi32_i32$0 = $0;
  i64toi32_i32$1 = 0;
  HEAP32[($0 + 16 | 0) >> 2] = 0;
  HEAP32[($0 + 20 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $0;
  i64toi32_i32$1 = 0;
  HEAP32[($0 + 4 | 0) >> 2] = 0;
  HEAP32[($0 + 8 | 0) >> 2] = i64toi32_i32$1;
  return 0 | 0;
 }
 
 function dummy_1($0) {
  $0 = $0 | 0;
 }
 
 function fclose($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0, $4 = 0, $1 = 0, $2 = 0;
  $1 = 0;
  label$1 : {
   if ((HEAP32[($0 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $1 = __lockfile($0 | 0) | 0;
  }
  dummy_1($0 | 0);
  label$2 : {
   $2 = (HEAP32[$0 >> 2] | 0) & 1 | 0;
   if ($2) {
    break label$2
   }
   $3 = __ofl_lock() | 0;
   label$3 : {
    $4 = HEAP32[($0 + 52 | 0) >> 2] | 0;
    if (!$4) {
     break label$3
    }
    HEAP32[($4 + 56 | 0) >> 2] = HEAP32[($0 + 56 | 0) >> 2] | 0;
   }
   label$4 : {
    $5 = HEAP32[($0 + 56 | 0) >> 2] | 0;
    if (!$5) {
     break label$4
    }
    HEAP32[($5 + 52 | 0) >> 2] = $4;
   }
   label$5 : {
    if ((HEAP32[$3 >> 2] | 0 | 0) != ($0 | 0)) {
     break label$5
    }
    HEAP32[$3 >> 2] = $5;
   }
   __ofl_unlock();
  }
  $3 = fflush($0 | 0) | 0;
  $4 = FUNCTION_TABLE[HEAP32[($0 + 12 | 0) >> 2] | 0]($0) | 0;
  label$6 : {
   $5 = HEAP32[($0 + 96 | 0) >> 2] | 0;
   if (!$5) {
    break label$6
   }
   dlfree($5 | 0);
  }
  $3 = $4 | $3 | 0;
  label$7 : {
   if ($2) {
    break label$7
   }
   dlfree($0 | 0);
   return $3 | 0;
  }
  label$8 : {
   if (!$1) {
    break label$8
   }
   __unlockfile($0 | 0);
  }
  return $3 | 0;
 }
 
 function memcmp($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0;
  $3 = 0;
  label$1 : {
   if (!$2) {
    break label$1
   }
   label$2 : {
    label$3 : while (1) {
     $4 = HEAPU8[$0 >> 0] | 0;
     $5 = HEAPU8[$1 >> 0] | 0;
     if (($4 | 0) != ($5 | 0)) {
      break label$2
     }
     $1 = $1 + 1 | 0;
     $0 = $0 + 1 | 0;
     $2 = $2 + -1 | 0;
     if ($2) {
      continue label$3
     }
     break label$1;
    };
   }
   $3 = $4 - $5 | 0;
  }
  return $3 | 0;
 }
 
 function FLAC__cpu_info($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 3;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 56 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 48 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 40 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function lround($0) {
  $0 = +$0;
  label$1 : {
   $0 = +round(+$0);
   if (!(Math_abs($0) < 2147483648.0)) {
    break label$1
   }
   return ~~$0 | 0;
  }
  return -2147483648 | 0;
 }
 
 function log($0) {
  $0 = +$0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $5 = 0.0, $4 = 0, $1 = 0, $4$hi = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $27 = 0, $28 = 0, $6 = 0.0, $50 = 0.0, $55$hi = 0, $57 = 0, $57$hi = 0, $61 = 0.0, $63 = 0.0, $68 = 0.0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       wasm2js_scratch_store_f64(+$0);
       i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
       $4 = wasm2js_scratch_load_i32(0 | 0) | 0;
       $4$hi = i64toi32_i32$0;
       i64toi32_i32$2 = $4;
       i64toi32_i32$1 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
        $20 = 1
       } else {
        if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
         if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
          $21 = 0
         } else {
          $21 = 1
         }
         $22 = $21;
        } else {
         $22 = 0
        }
        $20 = $22;
       }
       if ($20) {
        break label$5
       }
       i64toi32_i32$2 = $4$hi;
       i64toi32_i32$3 = $4;
       i64toi32_i32$0 = 0;
       i64toi32_i32$1 = 32;
       i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = 0;
        $23 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
        $23 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
       }
       $1 = $23;
       if ($1 >>> 0 > 1048575 >>> 0) {
        break label$4
       }
      }
      label$6 : {
       i64toi32_i32$0 = $4$hi;
       i64toi32_i32$2 = $4;
       i64toi32_i32$3 = 2147483647;
       i64toi32_i32$1 = -1;
       i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = 0;
       if ((i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | 0) {
        break label$6
       }
       return +(-1.0 / ($0 * $0));
      }
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$1 = $4;
      i64toi32_i32$3 = -1;
      i64toi32_i32$2 = -1;
      if ((i64toi32_i32$0 | 0) > (i64toi32_i32$3 | 0)) {
       $24 = 1
      } else {
       if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$3 | 0)) {
        if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$2 >>> 0) {
         $25 = 0
        } else {
         $25 = 1
        }
        $26 = $25;
       } else {
        $26 = 0
       }
       $24 = $26;
      }
      if ($24) {
       break label$3
      }
      return +(($0 - $0) / 0.0);
     }
     if ($1 >>> 0 > 2146435071 >>> 0) {
      break label$1
     }
     $2 = 1072693248;
     $3 = -1023;
     label$7 : {
      if (($1 | 0) == (1072693248 | 0)) {
       break label$7
      }
      $2 = $1;
      break label$2;
     }
     i64toi32_i32$1 = $4$hi;
     if ($4) {
      break label$2
     }
     return +(0.0);
    }
    wasm2js_scratch_store_f64(+($0 * 18014398509481984.0));
    i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $4 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $4;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $27 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $27 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $2 = $27;
    $3 = -1077;
   }
   $1 = $2 + 614242 | 0;
   $5 = +($3 + ($1 >>> 20 | 0) | 0 | 0);
   $50 = $5 * .6931471803691238;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = ($1 & 1048575 | 0) + 1072079006 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $28 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $28 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $55$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$0 = $4;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   $57 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   $57$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $55$hi;
   i64toi32_i32$2 = $28;
   i64toi32_i32$0 = $57$hi;
   i64toi32_i32$3 = $57;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$2 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $0 = +wasm2js_scratch_load_f64() + -1.0;
   $61 = $0;
   $63 = $5 * 1.9082149292705877e-10;
   $5 = $0 / ($0 + 2.0);
   $68 = $5;
   $6 = $0 * ($0 * .5);
   $5 = $5 * $5;
   $0 = $5 * $5;
   $0 = $50 + ($61 + ($63 + $68 * ($6 + ($0 * ($0 * ($0 * .15313837699209373 + .22222198432149784) + .3999999999940942) + $5 * ($0 * ($0 * ($0 * .14798198605116586 + .1818357216161805) + .2857142874366239) + .6666666666666735))) - $6));
  }
  return +$0;
 }
 
 function FLAC__lpc_window_data($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  label$1 : {
   if (!$3) {
    break label$1
   }
   $4 = 0;
   label$2 : while (1) {
    $5 = $4 << 2 | 0;
    HEAPF32[($2 + $5 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($1 + $5 | 0) >> 2]) * Math_fround(HEAP32[($0 + $5 | 0) >> 2] | 0 | 0));
    $4 = $4 + 1 | 0;
    if (($4 | 0) != ($3 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function FLAC__lpc_compute_autocorrelation($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $5 = 0, $7 = 0, $8 = 0, $9 = Math_fround(0), $4 = 0, $6 = 0;
  $4 = $1 - $2 | 0;
  label$1 : {
   label$2 : {
    if ($2) {
     break label$2
    }
    $5 = 0;
    label$3 : while (1) {
     $5 = $5 + 1 | 0;
     if ($5 >>> 0 <= $4 >>> 0) {
      continue label$3
     }
     break label$1;
    };
   }
   $5 = 0;
   $6 = memset($3 | 0, 0 | 0, $2 << 2 | 0 | 0) | 0;
   label$4 : while (1) {
    $9 = Math_fround(HEAPF32[($0 + ($5 << 2 | 0) | 0) >> 2]);
    $7 = 0;
    label$5 : while (1) {
     $8 = $6 + ($7 << 2 | 0) | 0;
     HEAPF32[$8 >> 2] = Math_fround(Math_fround(HEAPF32[$8 >> 2]) + Math_fround($9 * Math_fround(HEAPF32[($0 + (($7 + $5 | 0) << 2 | 0) | 0) >> 2])));
     $7 = $7 + 1 | 0;
     if (($7 | 0) != ($2 | 0)) {
      continue label$5
     }
     break label$5;
    };
    $5 = $5 + 1 | 0;
    if ($5 >>> 0 <= $4 >>> 0) {
     continue label$4
    }
    break label$4;
   };
  }
  label$6 : {
   if ($5 >>> 0 >= $1 >>> 0) {
    break label$6
   }
   label$7 : while (1) {
    label$8 : {
     $2 = $1 - $5 | 0;
     if (!$2) {
      break label$8
     }
     $9 = Math_fround(HEAPF32[($0 + ($5 << 2 | 0) | 0) >> 2]);
     $7 = 0;
     label$9 : while (1) {
      $8 = $3 + ($7 << 2 | 0) | 0;
      HEAPF32[$8 >> 2] = Math_fround(Math_fround(HEAPF32[$8 >> 2]) + Math_fround($9 * Math_fround(HEAPF32[($0 + (($7 + $5 | 0) << 2 | 0) | 0) >> 2])));
      $7 = $7 + 1 | 0;
      if ($7 >>> 0 < $2 >>> 0) {
       continue label$9
      }
      break label$9;
     };
    }
    $5 = $5 + 1 | 0;
    if (($5 | 0) != ($1 | 0)) {
     continue label$7
    }
    break label$7;
   };
  }
 }
 
 function FLAC__lpc_compute_lp_coefficients($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $9 = 0, $14 = 0.0, $6 = 0, $4 = 0, $13 = 0.0, $10 = 0, $15 = 0.0, $7 = 0, $8 = 0, $12 = 0, $11 = 0, $5 = 0, $79 = 0;
  label$1 : {
   $4 = global$0 - 256 | 0;
   $11 = $4;
   if ($4 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $11;
  }
  $5 = HEAP32[$1 >> 2] | 0;
  $13 = +Math_fround(HEAPF32[$0 >> 2]);
  $6 = 0;
  label$3 : {
   label$4 : while (1) {
    if (($6 | 0) == ($5 | 0)) {
     break label$3
    }
    $7 = $6 + 1 | 0;
    $14 = +Math_fround(-Math_fround(HEAPF32[($0 + ($7 << 2 | 0) | 0) >> 2]));
    label$5 : {
     label$6 : {
      if (!$6) {
       break label$6
      }
      $8 = $6 >>> 1 | 0;
      $9 = 0;
      label$7 : while (1) {
       $14 = $14 - +HEAPF64[($4 + ($9 << 3 | 0) | 0) >> 3] * +Math_fround(HEAPF32[($0 + (($6 - $9 | 0) << 2 | 0) | 0) >> 2]);
       $9 = $9 + 1 | 0;
       if (($9 | 0) != ($6 | 0)) {
        continue label$7
       }
       break label$7;
      };
      $14 = $14 / $13;
      HEAPF64[($4 + ($6 << 3 | 0) | 0) >> 3] = $14;
      $9 = 0;
      label$8 : {
       if (!$8) {
        break label$8
       }
       label$9 : while (1) {
        $10 = $4 + ($9 << 3 | 0) | 0;
        $79 = $10;
        $15 = +HEAPF64[$10 >> 3];
        $10 = $4 + (($6 + ($9 ^ -1 | 0) | 0) << 3 | 0) | 0;
        HEAPF64[$79 >> 3] = $15 + $14 * +HEAPF64[$10 >> 3];
        HEAPF64[$10 >> 3] = $14 * $15 + +HEAPF64[$10 >> 3];
        $9 = $9 + 1 | 0;
        if (($9 | 0) != ($8 | 0)) {
         continue label$9
        }
        break label$9;
       };
      }
      if (!($6 & 1 | 0)) {
       break label$5
      }
      $9 = $4 + ($8 << 3 | 0) | 0;
      $15 = +HEAPF64[$9 >> 3];
      HEAPF64[$9 >> 3] = $15 + $14 * $15;
      break label$5;
     }
     $14 = $14 / $13;
     HEAPF64[($4 + ($6 << 3 | 0) | 0) >> 3] = $14;
    }
    $14 = 1.0 - $14 * $14;
    $9 = 0;
    label$10 : while (1) {
     HEAPF32[(($2 + ($6 << 7 | 0) | 0) + ($9 << 2 | 0) | 0) >> 2] = Math_fround(-Math_fround(+HEAPF64[($4 + ($9 << 3 | 0) | 0) >> 3]));
     $9 = $9 + 1 | 0;
     if ($9 >>> 0 <= $6 >>> 0) {
      continue label$10
     }
     break label$10;
    };
    $13 = $13 * $14;
    HEAPF64[($3 + ($6 << 3 | 0) | 0) >> 3] = $13;
    $6 = $7;
    if ($13 != 0.0) {
     continue label$4
    }
    break label$4;
   };
   HEAP32[$1 >> 2] = $7;
  }
  label$11 : {
   $12 = $4 + 256 | 0;
   if ($12 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $12;
  }
 }
 
 function FLAC__lpc_quantize_coefficients($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $6 = 0, $14 = 0.0, $5 = 0, $10 = 0, $7 = 0, $9 = 0, $8 = 0, $15 = 0.0, $12 = 0, $11 = 0, $87 = 0, $13 = Math_fround(0), $132 = 0;
  label$1 : {
   $5 = global$0 - 16 | 0;
   $11 = $5;
   if ($5 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $11;
  }
  label$3 : {
   label$4 : {
    if ($1) {
     break label$4
    }
    $2 = 2;
    break label$3;
   }
   $6 = $2 + -1 | 0;
   $7 = 1 << $6 | 0;
   $8 = $7 + -1 | 0;
   $2 = 0;
   $9 = 0 - $7 | 0;
   $14 = 0.0;
   label$5 : while (1) {
    $15 = +Math_fround(Math_abs(Math_fround(HEAPF32[($0 + ($2 << 2 | 0) | 0) >> 2])));
    $14 = $14 < $15 ? $15 : $14;
    $2 = $2 + 1 | 0;
    if (($2 | 0) != ($1 | 0)) {
     continue label$5
    }
    break label$5;
   };
   $2 = 2;
   if ($14 <= 0.0) {
    break label$3
   }
   +frexp(+$14, $5 + 12 | 0 | 0);
   $2 = HEAP32[($5 + 12 | 0) >> 2] | 0;
   HEAP32[($5 + 12 | 0) >> 2] = $2 + -1 | 0;
   $6 = $6 - $2 | 0;
   HEAP32[$4 >> 2] = $6;
   label$6 : {
    label$7 : {
     $10 = -1 << ((HEAP32[global$7 >> 2] | 0) + -1 | 0) | 0;
     $2 = $10 ^ -1 | 0;
     if (($6 | 0) <= ($2 | 0)) {
      break label$7
     }
     HEAP32[$4 >> 2] = $2;
     $6 = $2;
     break label$6;
    }
    if (($6 | 0) >= ($10 | 0)) {
     break label$6
    }
    $2 = 1;
    break label$3;
   }
   $2 = 0;
   label$8 : {
    if (($6 | 0) < (0 | 0)) {
     break label$8
    }
    $14 = 0.0;
    label$9 : while (1) {
     $10 = $2 << 2 | 0;
     $87 = $3 + $10 | 0;
     $14 = $14 + +Math_fround(Math_fround(HEAPF32[($0 + $10 | 0) >> 2]) * Math_fround(1 << $6 | 0 | 0));
     $6 = lround(+$14) | 0;
     $6 = ($6 | 0) < ($7 | 0) ? (($6 | 0) < ($9 | 0) ? $9 : $6) : $8;
     HEAP32[$87 >> 2] = $6;
     label$10 : {
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($1 | 0)) {
       break label$10
      }
      $2 = 0;
      break label$3;
     }
     $14 = $14 - +($6 | 0);
     $6 = HEAP32[$4 >> 2] | 0;
     continue label$9;
    };
   }
   $2 = 0;
   $13 = Math_fround(1 << (0 - $6 | 0) | 0 | 0);
   $14 = 0.0;
   label$11 : while (1) {
    $6 = $2 << 2 | 0;
    $132 = $3 + $6 | 0;
    $14 = $14 + +Math_fround(Math_fround(HEAPF32[($0 + $6 | 0) >> 2]) / $13);
    $6 = lround(+$14) | 0;
    $6 = ($6 | 0) < ($7 | 0) ? (($6 | 0) < ($9 | 0) ? $9 : $6) : $8;
    HEAP32[$132 >> 2] = $6;
    $14 = $14 - +($6 | 0);
    $2 = $2 + 1 | 0;
    if (($2 | 0) != ($1 | 0)) {
     continue label$11
    }
    break label$11;
   };
   $2 = 0;
   HEAP32[$4 >> 2] = 0;
  }
  label$12 : {
   $12 = $5 + 16 | 0;
   if ($12 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $12;
  }
  return $2 | 0;
 }
 
 function FLAC__lpc_compute_residual_from_qlp_coefficients($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $26 = 0, $25 = 0, $24 = 0, $23 = 0, $22 = 0, $21 = 0, $20 = 0, $19 = 0, $18 = 0, $17 = 0, $16 = 0, $14 = 0, $15 = 0, $12 = 0, $13 = 0, $10 = 0, $11 = 0, $9 = 0, $8 = 0, $7 = 0, $27 = 0, $438 = 0, $28 = 0, $29 = 0, $573 = 0, $696 = 0, $811 = 0, $918 = 0, $1013 = 0, $1096 = 0, $1171 = 0, $1236 = 0, $1291 = 0, $1337 = 0, $1369 = 0;
  label$1 : {
   label$2 : {
    if ($3 >>> 0 < 13 >>> 0) {
     break label$2
    }
    if (($1 | 0) < (1 | 0)) {
     break label$1
    }
    $6 = 0;
    $7 = $3 + -13 | 0;
    $8 = $7 >>> 0 > 19 >>> 0;
    label$3 : while (1) {
     $3 = 0;
     label$4 : {
      if ($8) {
       break label$4
      }
      $9 = 0;
      $10 = 0;
      $11 = 0;
      $12 = 0;
      $13 = 0;
      $14 = 0;
      $15 = 0;
      $16 = 0;
      $17 = 0;
      $18 = 0;
      $19 = 0;
      $20 = 0;
      $21 = 0;
      $22 = 0;
      $23 = 0;
      $24 = 0;
      $25 = 0;
      $3 = 0;
      $26 = 0;
      label$5 : {
       switch ($7 | 0) {
       case 19:
        $9 = Math_imul(HEAP32[((($6 << 2 | 0) + $0 | 0) + -128 | 0) >> 2] | 0, HEAP32[($2 + 124 | 0) >> 2] | 0);
       case 18:
        $10 = Math_imul(HEAP32[((($6 << 2 | 0) + $0 | 0) + -124 | 0) >> 2] | 0, HEAP32[($2 + 120 | 0) >> 2] | 0) + $9 | 0;
       case 17:
        $11 = Math_imul(HEAP32[((($6 << 2 | 0) + $0 | 0) + -120 | 0) >> 2] | 0, HEAP32[($2 + 116 | 0) >> 2] | 0) + $10 | 0;
       case 16:
        $12 = Math_imul(HEAP32[((($6 << 2 | 0) + $0 | 0) + -116 | 0) >> 2] | 0, HEAP32[($2 + 112 | 0) >> 2] | 0) + $11 | 0;
       case 15:
        $13 = Math_imul(HEAP32[((($6 << 2 | 0) + $0 | 0) + -112 | 0) >> 2] | 0, HEAP32[($2 + 108 | 0) >> 2] | 0) + $12 | 0;
       case 14:
        $14 = Math_imul(HEAP32[((($6 << 2 | 0) + $0 | 0) + -108 | 0) >> 2] | 0, HEAP32[($2 + 104 | 0) >> 2] | 0) + $13 | 0;
       case 13:
        $15 = Math_imul(HEAP32[((($6 << 2 | 0) + $0 | 0) + -104 | 0) >> 2] | 0, HEAP32[($2 + 100 | 0) >> 2] | 0) + $14 | 0;
       case 12:
        $16 = Math_imul(HEAP32[((($6 << 2 | 0) + $0 | 0) + -100 | 0) >> 2] | 0, HEAP32[($2 + 96 | 0) >> 2] | 0) + $15 | 0;
       case 11:
        $17 = Math_imul(HEAP32[((($6 << 2 | 0) + $0 | 0) + -96 | 0) >> 2] | 0, HEAP32[($2 + 92 | 0) >> 2] | 0) + $16 | 0;
       case 10:
        $18 = Math_imul(HEAP32[((($6 << 2 | 0) + $0 | 0) + -92 | 0) >> 2] | 0, HEAP32[($2 + 88 | 0) >> 2] | 0) + $17 | 0;
       case 9:
        $19 = Math_imul(HEAP32[((($6 << 2 | 0) + $0 | 0) + -88 | 0) >> 2] | 0, HEAP32[($2 + 84 | 0) >> 2] | 0) + $18 | 0;
       case 8:
        $20 = Math_imul(HEAP32[((($6 << 2 | 0) + $0 | 0) + -84 | 0) >> 2] | 0, HEAP32[($2 + 80 | 0) >> 2] | 0) + $19 | 0;
       case 7:
        $21 = Math_imul(HEAP32[((($6 << 2 | 0) + $0 | 0) + -80 | 0) >> 2] | 0, HEAP32[($2 + 76 | 0) >> 2] | 0) + $20 | 0;
       case 6:
        $22 = Math_imul(HEAP32[((($6 << 2 | 0) + $0 | 0) + -76 | 0) >> 2] | 0, HEAP32[($2 + 72 | 0) >> 2] | 0) + $21 | 0;
       case 5:
        $23 = Math_imul(HEAP32[((($6 << 2 | 0) + $0 | 0) + -72 | 0) >> 2] | 0, HEAP32[($2 + 68 | 0) >> 2] | 0) + $22 | 0;
       case 4:
        $24 = Math_imul(HEAP32[((($6 << 2 | 0) + $0 | 0) + -68 | 0) >> 2] | 0, HEAP32[($2 + 64 | 0) >> 2] | 0) + $23 | 0;
       case 3:
        $25 = Math_imul(HEAP32[((($6 << 2 | 0) + $0 | 0) + -64 | 0) >> 2] | 0, HEAP32[($2 + 60 | 0) >> 2] | 0) + $24 | 0;
       case 2:
        $3 = Math_imul(HEAP32[((($6 << 2 | 0) + $0 | 0) + -60 | 0) >> 2] | 0, HEAP32[($2 + 56 | 0) >> 2] | 0) + $25 | 0;
       case 1:
        $26 = Math_imul(HEAP32[((($6 << 2 | 0) + $0 | 0) + -56 | 0) >> 2] | 0, HEAP32[($2 + 52 | 0) >> 2] | 0) + $3 | 0;
        break;
       default:
        break label$5;
       };
      }
      $3 = ($6 << 2 | 0) + $0 | 0;
      $3 = ((((((((((((Math_imul(HEAP32[($3 + -52 | 0) >> 2] | 0, HEAP32[($2 + 48 | 0) >> 2] | 0) + $26 | 0) + Math_imul(HEAP32[($3 + -48 | 0) >> 2] | 0, HEAP32[($2 + 44 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($3 + -44 | 0) >> 2] | 0, HEAP32[($2 + 40 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($3 + -40 | 0) >> 2] | 0, HEAP32[($2 + 36 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($3 + -36 | 0) >> 2] | 0, HEAP32[($2 + 32 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($3 + -32 | 0) >> 2] | 0, HEAP32[($2 + 28 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($3 + -28 | 0) >> 2] | 0, HEAP32[($2 + 24 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($3 + -24 | 0) >> 2] | 0, HEAP32[($2 + 20 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($3 + -20 | 0) >> 2] | 0, HEAP32[($2 + 16 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($3 + -16 | 0) >> 2] | 0, HEAP32[($2 + 12 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($3 + -12 | 0) >> 2] | 0, HEAP32[($2 + 8 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($3 + -8 | 0) >> 2] | 0, HEAP32[($2 + 4 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($3 + -4 | 0) >> 2] | 0, HEAP32[$2 >> 2] | 0) | 0;
     }
     $26 = $6 << 2 | 0;
     HEAP32[($5 + $26 | 0) >> 2] = (HEAP32[($0 + $26 | 0) >> 2] | 0) - ($3 >> $4 | 0) | 0;
     $6 = $6 + 1 | 0;
     if (($6 | 0) != ($1 | 0)) {
      continue label$3
     }
     break label$1;
    };
   }
   label$25 : {
    if ($3 >>> 0 < 9 >>> 0) {
     break label$25
    }
    label$26 : {
     if ($3 >>> 0 < 11 >>> 0) {
      break label$26
     }
     label$27 : {
      if (($3 | 0) == (12 | 0)) {
       break label$27
      }
      if (($1 | 0) < (1 | 0)) {
       break label$1
      }
      $18 = HEAP32[($0 + -4 | 0) >> 2] | 0;
      $6 = HEAP32[($0 + -8 | 0) >> 2] | 0;
      $3 = HEAP32[($0 + -12 | 0) >> 2] | 0;
      $26 = HEAP32[($0 + -16 | 0) >> 2] | 0;
      $25 = HEAP32[($0 + -20 | 0) >> 2] | 0;
      $24 = HEAP32[($0 + -24 | 0) >> 2] | 0;
      $23 = HEAP32[($0 + -28 | 0) >> 2] | 0;
      $22 = HEAP32[($0 + -32 | 0) >> 2] | 0;
      $21 = HEAP32[($0 + -36 | 0) >> 2] | 0;
      $20 = HEAP32[($0 + -40 | 0) >> 2] | 0;
      $17 = HEAP32[($0 + -44 | 0) >> 2] | 0;
      $16 = HEAP32[$2 >> 2] | 0;
      $15 = HEAP32[($2 + 4 | 0) >> 2] | 0;
      $14 = HEAP32[($2 + 8 | 0) >> 2] | 0;
      $13 = HEAP32[($2 + 12 | 0) >> 2] | 0;
      $12 = HEAP32[($2 + 16 | 0) >> 2] | 0;
      $11 = HEAP32[($2 + 20 | 0) >> 2] | 0;
      $10 = HEAP32[($2 + 24 | 0) >> 2] | 0;
      $9 = HEAP32[($2 + 28 | 0) >> 2] | 0;
      $8 = HEAP32[($2 + 32 | 0) >> 2] | 0;
      $7 = HEAP32[($2 + 36 | 0) >> 2] | 0;
      $27 = HEAP32[($2 + 40 | 0) >> 2] | 0;
      $2 = 0;
      label$28 : while (1) {
       $19 = $20;
       $20 = $21;
       $21 = $22;
       $22 = $23;
       $23 = $24;
       $24 = $25;
       $25 = $26;
       $26 = $3;
       $3 = $6;
       $6 = $18;
       $18 = $2 << 2 | 0;
       $438 = $5 + $18 | 0;
       $18 = HEAP32[($0 + $18 | 0) >> 2] | 0;
       HEAP32[$438 >> 2] = $18 - (((((((((((Math_imul($19, $7) + Math_imul($17, $27) | 0) + Math_imul($20, $8) | 0) + Math_imul($21, $9) | 0) + Math_imul($22, $10) | 0) + Math_imul($23, $11) | 0) + Math_imul($24, $12) | 0) + Math_imul($25, $13) | 0) + Math_imul($26, $14) | 0) + Math_imul($3, $15) | 0) + Math_imul($6, $16) | 0) >> $4 | 0) | 0;
       $17 = $19;
       $2 = $2 + 1 | 0;
       if (($2 | 0) != ($1 | 0)) {
        continue label$28
       }
       break label$1;
      };
     }
     if (($1 | 0) < (1 | 0)) {
      break label$1
     }
     $17 = HEAP32[($0 + -4 | 0) >> 2] | 0;
     $6 = HEAP32[($0 + -8 | 0) >> 2] | 0;
     $3 = HEAP32[($0 + -12 | 0) >> 2] | 0;
     $26 = HEAP32[($0 + -16 | 0) >> 2] | 0;
     $25 = HEAP32[($0 + -20 | 0) >> 2] | 0;
     $24 = HEAP32[($0 + -24 | 0) >> 2] | 0;
     $23 = HEAP32[($0 + -28 | 0) >> 2] | 0;
     $22 = HEAP32[($0 + -32 | 0) >> 2] | 0;
     $21 = HEAP32[($0 + -36 | 0) >> 2] | 0;
     $20 = HEAP32[($0 + -40 | 0) >> 2] | 0;
     $19 = HEAP32[($0 + -44 | 0) >> 2] | 0;
     $16 = HEAP32[($0 + -48 | 0) >> 2] | 0;
     $15 = HEAP32[$2 >> 2] | 0;
     $14 = HEAP32[($2 + 4 | 0) >> 2] | 0;
     $13 = HEAP32[($2 + 8 | 0) >> 2] | 0;
     $12 = HEAP32[($2 + 12 | 0) >> 2] | 0;
     $11 = HEAP32[($2 + 16 | 0) >> 2] | 0;
     $10 = HEAP32[($2 + 20 | 0) >> 2] | 0;
     $9 = HEAP32[($2 + 24 | 0) >> 2] | 0;
     $8 = HEAP32[($2 + 28 | 0) >> 2] | 0;
     $7 = HEAP32[($2 + 32 | 0) >> 2] | 0;
     $27 = HEAP32[($2 + 36 | 0) >> 2] | 0;
     $28 = HEAP32[($2 + 40 | 0) >> 2] | 0;
     $29 = HEAP32[($2 + 44 | 0) >> 2] | 0;
     $2 = 0;
     label$29 : while (1) {
      $18 = $19;
      $19 = $20;
      $20 = $21;
      $21 = $22;
      $22 = $23;
      $23 = $24;
      $24 = $25;
      $25 = $26;
      $26 = $3;
      $3 = $6;
      $6 = $17;
      $17 = $2 << 2 | 0;
      $573 = $5 + $17 | 0;
      $17 = HEAP32[($0 + $17 | 0) >> 2] | 0;
      HEAP32[$573 >> 2] = $17 - ((((((((((((Math_imul($18, $28) + Math_imul($16, $29) | 0) + Math_imul($19, $27) | 0) + Math_imul($20, $7) | 0) + Math_imul($21, $8) | 0) + Math_imul($22, $9) | 0) + Math_imul($23, $10) | 0) + Math_imul($24, $11) | 0) + Math_imul($25, $12) | 0) + Math_imul($26, $13) | 0) + Math_imul($3, $14) | 0) + Math_imul($6, $15) | 0) >> $4 | 0) | 0;
      $16 = $18;
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($1 | 0)) {
       continue label$29
      }
      break label$1;
     };
    }
    label$30 : {
     if (($3 | 0) == (10 | 0)) {
      break label$30
     }
     if (($1 | 0) < (1 | 0)) {
      break label$1
     }
     $20 = HEAP32[($0 + -4 | 0) >> 2] | 0;
     $6 = HEAP32[($0 + -8 | 0) >> 2] | 0;
     $3 = HEAP32[($0 + -12 | 0) >> 2] | 0;
     $26 = HEAP32[($0 + -16 | 0) >> 2] | 0;
     $25 = HEAP32[($0 + -20 | 0) >> 2] | 0;
     $24 = HEAP32[($0 + -24 | 0) >> 2] | 0;
     $23 = HEAP32[($0 + -28 | 0) >> 2] | 0;
     $22 = HEAP32[($0 + -32 | 0) >> 2] | 0;
     $19 = HEAP32[($0 + -36 | 0) >> 2] | 0;
     $18 = HEAP32[$2 >> 2] | 0;
     $17 = HEAP32[($2 + 4 | 0) >> 2] | 0;
     $16 = HEAP32[($2 + 8 | 0) >> 2] | 0;
     $15 = HEAP32[($2 + 12 | 0) >> 2] | 0;
     $14 = HEAP32[($2 + 16 | 0) >> 2] | 0;
     $13 = HEAP32[($2 + 20 | 0) >> 2] | 0;
     $12 = HEAP32[($2 + 24 | 0) >> 2] | 0;
     $11 = HEAP32[($2 + 28 | 0) >> 2] | 0;
     $10 = HEAP32[($2 + 32 | 0) >> 2] | 0;
     $2 = 0;
     label$31 : while (1) {
      $21 = $22;
      $22 = $23;
      $23 = $24;
      $24 = $25;
      $25 = $26;
      $26 = $3;
      $3 = $6;
      $6 = $20;
      $20 = $2 << 2 | 0;
      $696 = $5 + $20 | 0;
      $20 = HEAP32[($0 + $20 | 0) >> 2] | 0;
      HEAP32[$696 >> 2] = $20 - (((((((((Math_imul($21, $11) + Math_imul($19, $10) | 0) + Math_imul($22, $12) | 0) + Math_imul($23, $13) | 0) + Math_imul($24, $14) | 0) + Math_imul($25, $15) | 0) + Math_imul($26, $16) | 0) + Math_imul($3, $17) | 0) + Math_imul($6, $18) | 0) >> $4 | 0) | 0;
      $19 = $21;
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($1 | 0)) {
       continue label$31
      }
      break label$1;
     };
    }
    if (($1 | 0) < (1 | 0)) {
     break label$1
    }
    $19 = HEAP32[($0 + -4 | 0) >> 2] | 0;
    $6 = HEAP32[($0 + -8 | 0) >> 2] | 0;
    $3 = HEAP32[($0 + -12 | 0) >> 2] | 0;
    $26 = HEAP32[($0 + -16 | 0) >> 2] | 0;
    $25 = HEAP32[($0 + -20 | 0) >> 2] | 0;
    $24 = HEAP32[($0 + -24 | 0) >> 2] | 0;
    $23 = HEAP32[($0 + -28 | 0) >> 2] | 0;
    $22 = HEAP32[($0 + -32 | 0) >> 2] | 0;
    $21 = HEAP32[($0 + -36 | 0) >> 2] | 0;
    $18 = HEAP32[($0 + -40 | 0) >> 2] | 0;
    $17 = HEAP32[$2 >> 2] | 0;
    $16 = HEAP32[($2 + 4 | 0) >> 2] | 0;
    $15 = HEAP32[($2 + 8 | 0) >> 2] | 0;
    $14 = HEAP32[($2 + 12 | 0) >> 2] | 0;
    $13 = HEAP32[($2 + 16 | 0) >> 2] | 0;
    $12 = HEAP32[($2 + 20 | 0) >> 2] | 0;
    $11 = HEAP32[($2 + 24 | 0) >> 2] | 0;
    $10 = HEAP32[($2 + 28 | 0) >> 2] | 0;
    $9 = HEAP32[($2 + 32 | 0) >> 2] | 0;
    $8 = HEAP32[($2 + 36 | 0) >> 2] | 0;
    $2 = 0;
    label$32 : while (1) {
     $20 = $21;
     $21 = $22;
     $22 = $23;
     $23 = $24;
     $24 = $25;
     $25 = $26;
     $26 = $3;
     $3 = $6;
     $6 = $19;
     $19 = $2 << 2 | 0;
     $811 = $5 + $19 | 0;
     $19 = HEAP32[($0 + $19 | 0) >> 2] | 0;
     HEAP32[$811 >> 2] = $19 - ((((((((((Math_imul($20, $9) + Math_imul($18, $8) | 0) + Math_imul($21, $10) | 0) + Math_imul($22, $11) | 0) + Math_imul($23, $12) | 0) + Math_imul($24, $13) | 0) + Math_imul($25, $14) | 0) + Math_imul($26, $15) | 0) + Math_imul($3, $16) | 0) + Math_imul($6, $17) | 0) >> $4 | 0) | 0;
     $18 = $20;
     $2 = $2 + 1 | 0;
     if (($2 | 0) != ($1 | 0)) {
      continue label$32
     }
     break label$1;
    };
   }
   label$33 : {
    if ($3 >>> 0 < 5 >>> 0) {
     break label$33
    }
    label$34 : {
     if ($3 >>> 0 < 7 >>> 0) {
      break label$34
     }
     label$35 : {
      if (($3 | 0) == (8 | 0)) {
       break label$35
      }
      if (($1 | 0) < (1 | 0)) {
       break label$1
      }
      $22 = HEAP32[($0 + -4 | 0) >> 2] | 0;
      $6 = HEAP32[($0 + -8 | 0) >> 2] | 0;
      $3 = HEAP32[($0 + -12 | 0) >> 2] | 0;
      $26 = HEAP32[($0 + -16 | 0) >> 2] | 0;
      $25 = HEAP32[($0 + -20 | 0) >> 2] | 0;
      $24 = HEAP32[($0 + -24 | 0) >> 2] | 0;
      $21 = HEAP32[($0 + -28 | 0) >> 2] | 0;
      $20 = HEAP32[$2 >> 2] | 0;
      $19 = HEAP32[($2 + 4 | 0) >> 2] | 0;
      $18 = HEAP32[($2 + 8 | 0) >> 2] | 0;
      $17 = HEAP32[($2 + 12 | 0) >> 2] | 0;
      $16 = HEAP32[($2 + 16 | 0) >> 2] | 0;
      $15 = HEAP32[($2 + 20 | 0) >> 2] | 0;
      $14 = HEAP32[($2 + 24 | 0) >> 2] | 0;
      $2 = 0;
      label$36 : while (1) {
       $23 = $24;
       $24 = $25;
       $25 = $26;
       $26 = $3;
       $3 = $6;
       $6 = $22;
       $22 = $2 << 2 | 0;
       $918 = $5 + $22 | 0;
       $22 = HEAP32[($0 + $22 | 0) >> 2] | 0;
       HEAP32[$918 >> 2] = $22 - (((((((Math_imul($23, $15) + Math_imul($21, $14) | 0) + Math_imul($24, $16) | 0) + Math_imul($25, $17) | 0) + Math_imul($26, $18) | 0) + Math_imul($3, $19) | 0) + Math_imul($6, $20) | 0) >> $4 | 0) | 0;
       $21 = $23;
       $2 = $2 + 1 | 0;
       if (($2 | 0) != ($1 | 0)) {
        continue label$36
       }
       break label$1;
      };
     }
     if (($1 | 0) < (1 | 0)) {
      break label$1
     }
     $21 = HEAP32[($0 + -4 | 0) >> 2] | 0;
     $6 = HEAP32[($0 + -8 | 0) >> 2] | 0;
     $3 = HEAP32[($0 + -12 | 0) >> 2] | 0;
     $26 = HEAP32[($0 + -16 | 0) >> 2] | 0;
     $25 = HEAP32[($0 + -20 | 0) >> 2] | 0;
     $24 = HEAP32[($0 + -24 | 0) >> 2] | 0;
     $23 = HEAP32[($0 + -28 | 0) >> 2] | 0;
     $20 = HEAP32[($0 + -32 | 0) >> 2] | 0;
     $19 = HEAP32[$2 >> 2] | 0;
     $18 = HEAP32[($2 + 4 | 0) >> 2] | 0;
     $17 = HEAP32[($2 + 8 | 0) >> 2] | 0;
     $16 = HEAP32[($2 + 12 | 0) >> 2] | 0;
     $15 = HEAP32[($2 + 16 | 0) >> 2] | 0;
     $14 = HEAP32[($2 + 20 | 0) >> 2] | 0;
     $13 = HEAP32[($2 + 24 | 0) >> 2] | 0;
     $12 = HEAP32[($2 + 28 | 0) >> 2] | 0;
     $2 = 0;
     label$37 : while (1) {
      $22 = $23;
      $23 = $24;
      $24 = $25;
      $25 = $26;
      $26 = $3;
      $3 = $6;
      $6 = $21;
      $21 = $2 << 2 | 0;
      $1013 = $5 + $21 | 0;
      $21 = HEAP32[($0 + $21 | 0) >> 2] | 0;
      HEAP32[$1013 >> 2] = $21 - ((((((((Math_imul($22, $13) + Math_imul($20, $12) | 0) + Math_imul($23, $14) | 0) + Math_imul($24, $15) | 0) + Math_imul($25, $16) | 0) + Math_imul($26, $17) | 0) + Math_imul($3, $18) | 0) + Math_imul($6, $19) | 0) >> $4 | 0) | 0;
      $20 = $22;
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($1 | 0)) {
       continue label$37
      }
      break label$1;
     };
    }
    label$38 : {
     if (($3 | 0) == (6 | 0)) {
      break label$38
     }
     if (($1 | 0) < (1 | 0)) {
      break label$1
     }
     $24 = HEAP32[($0 + -4 | 0) >> 2] | 0;
     $6 = HEAP32[($0 + -8 | 0) >> 2] | 0;
     $3 = HEAP32[($0 + -12 | 0) >> 2] | 0;
     $26 = HEAP32[($0 + -16 | 0) >> 2] | 0;
     $23 = HEAP32[($0 + -20 | 0) >> 2] | 0;
     $22 = HEAP32[$2 >> 2] | 0;
     $21 = HEAP32[($2 + 4 | 0) >> 2] | 0;
     $20 = HEAP32[($2 + 8 | 0) >> 2] | 0;
     $19 = HEAP32[($2 + 12 | 0) >> 2] | 0;
     $18 = HEAP32[($2 + 16 | 0) >> 2] | 0;
     $2 = 0;
     label$39 : while (1) {
      $25 = $26;
      $26 = $3;
      $3 = $6;
      $6 = $24;
      $24 = $2 << 2 | 0;
      $1096 = $5 + $24 | 0;
      $24 = HEAP32[($0 + $24 | 0) >> 2] | 0;
      HEAP32[$1096 >> 2] = $24 - (((((Math_imul($25, $19) + Math_imul($23, $18) | 0) + Math_imul($26, $20) | 0) + Math_imul($3, $21) | 0) + Math_imul($6, $22) | 0) >> $4 | 0) | 0;
      $23 = $25;
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($1 | 0)) {
       continue label$39
      }
      break label$1;
     };
    }
    if (($1 | 0) < (1 | 0)) {
     break label$1
    }
    $23 = HEAP32[($0 + -4 | 0) >> 2] | 0;
    $6 = HEAP32[($0 + -8 | 0) >> 2] | 0;
    $3 = HEAP32[($0 + -12 | 0) >> 2] | 0;
    $26 = HEAP32[($0 + -16 | 0) >> 2] | 0;
    $25 = HEAP32[($0 + -20 | 0) >> 2] | 0;
    $22 = HEAP32[($0 + -24 | 0) >> 2] | 0;
    $21 = HEAP32[$2 >> 2] | 0;
    $20 = HEAP32[($2 + 4 | 0) >> 2] | 0;
    $19 = HEAP32[($2 + 8 | 0) >> 2] | 0;
    $18 = HEAP32[($2 + 12 | 0) >> 2] | 0;
    $17 = HEAP32[($2 + 16 | 0) >> 2] | 0;
    $16 = HEAP32[($2 + 20 | 0) >> 2] | 0;
    $2 = 0;
    label$40 : while (1) {
     $24 = $25;
     $25 = $26;
     $26 = $3;
     $3 = $6;
     $6 = $23;
     $23 = $2 << 2 | 0;
     $1171 = $5 + $23 | 0;
     $23 = HEAP32[($0 + $23 | 0) >> 2] | 0;
     HEAP32[$1171 >> 2] = $23 - ((((((Math_imul($24, $17) + Math_imul($22, $16) | 0) + Math_imul($25, $18) | 0) + Math_imul($26, $19) | 0) + Math_imul($3, $20) | 0) + Math_imul($6, $21) | 0) >> $4 | 0) | 0;
     $22 = $24;
     $2 = $2 + 1 | 0;
     if (($2 | 0) != ($1 | 0)) {
      continue label$40
     }
     break label$1;
    };
   }
   label$41 : {
    if ($3 >>> 0 < 3 >>> 0) {
     break label$41
    }
    label$42 : {
     if (($3 | 0) == (4 | 0)) {
      break label$42
     }
     if (($1 | 0) < (1 | 0)) {
      break label$1
     }
     $26 = HEAP32[($0 + -4 | 0) >> 2] | 0;
     $6 = HEAP32[($0 + -8 | 0) >> 2] | 0;
     $25 = HEAP32[($0 + -12 | 0) >> 2] | 0;
     $24 = HEAP32[$2 >> 2] | 0;
     $23 = HEAP32[($2 + 4 | 0) >> 2] | 0;
     $22 = HEAP32[($2 + 8 | 0) >> 2] | 0;
     $2 = 0;
     label$43 : while (1) {
      $3 = $6;
      $6 = $26;
      $26 = $2 << 2 | 0;
      $1236 = $5 + $26 | 0;
      $26 = HEAP32[($0 + $26 | 0) >> 2] | 0;
      HEAP32[$1236 >> 2] = $26 - (((Math_imul($3, $23) + Math_imul($25, $22) | 0) + Math_imul($6, $24) | 0) >> $4 | 0) | 0;
      $25 = $3;
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($1 | 0)) {
       continue label$43
      }
      break label$1;
     };
    }
    if (($1 | 0) < (1 | 0)) {
     break label$1
    }
    $25 = HEAP32[($0 + -4 | 0) >> 2] | 0;
    $6 = HEAP32[($0 + -8 | 0) >> 2] | 0;
    $3 = HEAP32[($0 + -12 | 0) >> 2] | 0;
    $24 = HEAP32[($0 + -16 | 0) >> 2] | 0;
    $23 = HEAP32[$2 >> 2] | 0;
    $22 = HEAP32[($2 + 4 | 0) >> 2] | 0;
    $21 = HEAP32[($2 + 8 | 0) >> 2] | 0;
    $20 = HEAP32[($2 + 12 | 0) >> 2] | 0;
    $2 = 0;
    label$44 : while (1) {
     $26 = $3;
     $3 = $6;
     $6 = $25;
     $25 = $2 << 2 | 0;
     $1291 = $5 + $25 | 0;
     $25 = HEAP32[($0 + $25 | 0) >> 2] | 0;
     HEAP32[$1291 >> 2] = $25 - ((((Math_imul($26, $21) + Math_imul($24, $20) | 0) + Math_imul($3, $22) | 0) + Math_imul($6, $23) | 0) >> $4 | 0) | 0;
     $24 = $26;
     $2 = $2 + 1 | 0;
     if (($2 | 0) != ($1 | 0)) {
      continue label$44
     }
     break label$1;
    };
   }
   label$45 : {
    if (($3 | 0) == (2 | 0)) {
     break label$45
    }
    if (($1 | 0) < (1 | 0)) {
     break label$1
    }
    $6 = HEAP32[($0 + -4 | 0) >> 2] | 0;
    $26 = HEAP32[$2 >> 2] | 0;
    $2 = 0;
    label$46 : while (1) {
     $3 = Math_imul($6, $26);
     $6 = $2 << 2 | 0;
     $1337 = $5 + $6 | 0;
     $6 = HEAP32[($0 + $6 | 0) >> 2] | 0;
     HEAP32[$1337 >> 2] = $6 - ($3 >> $4 | 0) | 0;
     $2 = $2 + 1 | 0;
     if (($2 | 0) != ($1 | 0)) {
      continue label$46
     }
     break label$1;
    };
   }
   if (($1 | 0) < (1 | 0)) {
    break label$1
   }
   $3 = HEAP32[($0 + -4 | 0) >> 2] | 0;
   $26 = HEAP32[($0 + -8 | 0) >> 2] | 0;
   $25 = HEAP32[$2 >> 2] | 0;
   $24 = HEAP32[($2 + 4 | 0) >> 2] | 0;
   $2 = 0;
   label$47 : while (1) {
    $6 = $3;
    $3 = $2 << 2 | 0;
    $1369 = $5 + $3 | 0;
    $3 = HEAP32[($0 + $3 | 0) >> 2] | 0;
    HEAP32[$1369 >> 2] = $3 - ((Math_imul($6, $25) + Math_imul($26, $24) | 0) >> $4 | 0) | 0;
    $26 = $6;
    $2 = $2 + 1 | 0;
    if (($2 | 0) != ($1 | 0)) {
     continue label$47
    }
    break label$47;
   };
  }
 }
 
 function FLAC__lpc_compute_residual_from_qlp_coefficients_wide($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $19$hi = 0, $6 = 0, $19 = 0, $8 = 0, $7 = 0, $10 = 0, $11 = 0, $18$hi = 0, $12 = 0, $20$hi = 0, $13 = 0, $21$hi = 0, $22$hi = 0, $18 = 0, $14 = 0, $23$hi = 0, $20 = 0, $24$hi = 0, $21 = 0, $16 = 0, $22 = 0, $25$hi = 0, $23 = 0, $9 = 0, $26$hi = 0, $24 = 0, $25 = 0, $27$hi = 0, $15 = 0, $26 = 0, $28$hi = 0, $27 = 0, $28 = 0, $29$hi = 0, $29 = 0, $17 = 0, $558 = 0, $559 = 0, $30$hi = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $48 = 0, $48$hi = 0, $50 = 0, $50$hi = 0, $57 = 0, $57$hi = 0, $59 = 0, $59$hi = 0, $60$hi = 0, $68 = 0, $68$hi = 0, $70 = 0, $70$hi = 0, $71$hi = 0, $79 = 0, $79$hi = 0, $81 = 0, $81$hi = 0, $82$hi = 0, $90 = 0, $90$hi = 0, $92 = 0, $92$hi = 0, $93$hi = 0, $101 = 0, $101$hi = 0, $103 = 0, $103$hi = 0, $104$hi = 0, $112 = 0, $112$hi = 0, $114 = 0, $114$hi = 0, $115$hi = 0, $123 = 0, $123$hi = 0, $125 = 0, $125$hi = 0, $126$hi = 0, $134 = 0, $134$hi = 0, $136 = 0, $136$hi = 0, $137$hi = 0, $145 = 0, $145$hi = 0, $147 = 0, $147$hi = 0, $148$hi = 0, $156 = 0, $156$hi = 0, $158 = 0, $158$hi = 0, $159$hi = 0, $167 = 0, $167$hi = 0, $169 = 0, $169$hi = 0, $170$hi = 0, $178 = 0, $178$hi = 0, $180 = 0, $180$hi = 0, $181$hi = 0, $189 = 0, $189$hi = 0, $191 = 0, $191$hi = 0, $192$hi = 0, $200 = 0, $200$hi = 0, $202 = 0, $202$hi = 0, $203$hi = 0, $211 = 0, $211$hi = 0, $213 = 0, $213$hi = 0, $214$hi = 0, $222 = 0, $222$hi = 0, $224 = 0, $224$hi = 0, $225$hi = 0, $233 = 0, $233$hi = 0, $235 = 0, $235$hi = 0, $236$hi = 0, $244 = 0, $244$hi = 0, $246 = 0, $246$hi = 0, $247$hi = 0, $256 = 0, $256$hi = 0, $258 = 0, $258$hi = 0, $259$hi = 0, $261$hi = 0, $264 = 0, $264$hi = 0, $266 = 0, $266$hi = 0, $267 = 0, $267$hi = 0, $268$hi = 0, $271 = 0, $271$hi = 0, $273 = 0, $273$hi = 0, $274 = 0, $274$hi = 0, $275$hi = 0, $278 = 0, $278$hi = 0, $280 = 0, $280$hi = 0, $281 = 0, $281$hi = 0, $282$hi = 0, $285 = 0, $285$hi = 0, $287 = 0, $287$hi = 0, $288 = 0, $288$hi = 0, $289$hi = 0, $292 = 0, $292$hi = 0, $294 = 0, $294$hi = 0, $295 = 0, $295$hi = 0, $296$hi = 0, $299 = 0, $299$hi = 0, $301 = 0, $301$hi = 0, $302 = 0, $302$hi = 0, $303$hi = 0, $306 = 0, $306$hi = 0, $308 = 0, $308$hi = 0, $309 = 0, $309$hi = 0, $310$hi = 0, $313 = 0, $313$hi = 0, $315 = 0, $315$hi = 0, $316 = 0, $316$hi = 0, $317$hi = 0, $320 = 0, $320$hi = 0, $322 = 0, $322$hi = 0, $323 = 0, $323$hi = 0, $324$hi = 0, $327 = 0, $327$hi = 0, $329 = 0, $329$hi = 0, $330 = 0, $330$hi = 0, $331$hi = 0, $334 = 0, $334$hi = 0, $336 = 0, $336$hi = 0, $337 = 0, $337$hi = 0, $338$hi = 0, $341 = 0, $341$hi = 0, $343 = 0, $343$hi = 0, $344 = 0, $344$hi = 0, $350 = 0, $354 = 0, $444 = 0, $449 = 0, $451$hi = 0, $453 = 0, $453$hi = 0, $455$hi = 0, $457 = 0, $457$hi = 0, $458$hi = 0, $460$hi = 0, $462 = 0, $462$hi = 0, $463$hi = 0, $465$hi = 0, $467 = 0, $467$hi = 0, $468$hi = 0, $470$hi = 0, $472 = 0, $472$hi = 0, $473$hi = 0, $475$hi = 0, $477 = 0, $477$hi = 0, $478$hi = 0, $480$hi = 0, $482 = 0, $482$hi = 0, $483$hi = 0, $485$hi = 0, $487 = 0, $487$hi = 0, $488$hi = 0, $490$hi = 0, $492 = 0, $492$hi = 0, $493$hi = 0, $495$hi = 0, $497 = 0, $497$hi = 0, $498$hi = 0, $500$hi = 0, $502 = 0, $502$hi = 0, $503$hi = 0, $30 = 0, $593 = 0, $598 = 0, $600$hi = 0, $602 = 0, $602$hi = 0, $604$hi = 0, $606 = 0, $606$hi = 0, $607$hi = 0, $609$hi = 0, $611 = 0, $611$hi = 0, $612$hi = 0, $614$hi = 0, $616 = 0, $616$hi = 0, $617$hi = 0, $619$hi = 0, $621 = 0, $621$hi = 0, $622$hi = 0, $624$hi = 0, $626 = 0, $626$hi = 0, $627$hi = 0, $629$hi = 0, $631 = 0, $631$hi = 0, $632$hi = 0, $634$hi = 0, $636 = 0, $636$hi = 0, $637$hi = 0, $639$hi = 0, $641 = 0, $641$hi = 0, $642$hi = 0, $644$hi = 0, $646 = 0, $646$hi = 0, $647$hi = 0, $649$hi = 0, $651 = 0, $651$hi = 0, $652$hi = 0, $654$hi = 0, $656 = 0, $656$hi = 0, $657$hi = 0, $731 = 0, $736 = 0, $738$hi = 0, $740 = 0, $740$hi = 0, $742$hi = 0, $744 = 0, $744$hi = 0, $745$hi = 0, $747$hi = 0, $749 = 0, $749$hi = 0, $750$hi = 0, $752$hi = 0, $754 = 0, $754$hi = 0, $755$hi = 0, $757$hi = 0, $759 = 0, $759$hi = 0, $760$hi = 0, $762$hi = 0, $764 = 0, $764$hi = 0, $765$hi = 0, $767$hi = 0, $769 = 0, $769$hi = 0, $770$hi = 0, $772$hi = 0, $774 = 0, $774$hi = 0, $775$hi = 0, $777$hi = 0, $779 = 0, $779$hi = 0, $780$hi = 0, $858 = 0, $863 = 0, $865$hi = 0, $867 = 0, $867$hi = 0, $869$hi = 0, $871 = 0, $871$hi = 0, $872$hi = 0, $874$hi = 0, $876 = 0, $876$hi = 0, $877$hi = 0, $879$hi = 0, $881 = 0, $881$hi = 0, $882$hi = 0, $884$hi = 0, $886 = 0, $886$hi = 0, $887$hi = 0, $889$hi = 0, $891 = 0, $891$hi = 0, $892$hi = 0, $894$hi = 0, $896 = 0, $896$hi = 0, $897$hi = 0, $899$hi = 0, $901 = 0, $901$hi = 0, $902$hi = 0, $904$hi = 0, $906 = 0, $906$hi = 0, $907$hi = 0, $909$hi = 0, $911 = 0, $911$hi = 0, $912$hi = 0, $978 = 0, $983 = 0, $985$hi = 0, $987 = 0, $987$hi = 0, $989$hi = 0, $991 = 0, $991$hi = 0, $992$hi = 0, $994$hi = 0, $996 = 0, $996$hi = 0, $997$hi = 0, $999$hi = 0, $1001 = 0, $1001$hi = 0, $1002$hi = 0, $1004$hi = 0, $1006 = 0, $1006$hi = 0, $1007$hi = 0, $1009$hi = 0, $1011 = 0, $1011$hi = 0, $1012$hi = 0, $1014$hi = 0, $1016 = 0, $1016$hi = 0, $1017$hi = 0, $1083 = 0, $1088 = 0, $1090$hi = 0, $1092 = 0, $1092$hi = 0, $1094$hi = 0, $1096 = 0, $1096$hi = 0, $1097$hi = 0, $1099$hi = 0, $1101 = 0, $1101$hi = 0, $1102$hi = 0, $1104$hi = 0, $1106 = 0, $1106$hi = 0, $1107$hi = 0, $1109$hi = 0, $1111 = 0, $1111$hi = 0, $1112$hi = 0, $1114$hi = 0, $1116 = 0, $1116$hi = 0, $1117$hi = 0, $1119$hi = 0, $1121 = 0, $1121$hi = 0, $1122$hi = 0, $1124$hi = 0, $1126 = 0, $1126$hi = 0, $1127$hi = 0, $1177 = 0, $1182 = 0, $1184$hi = 0, $1186 = 0, $1186$hi = 0, $1188$hi = 0, $1190 = 0, $1190$hi = 0, $1191$hi = 0, $1193$hi = 0, $1195 = 0, $1195$hi = 0, $1196$hi = 0, $1198$hi = 0, $1200 = 0, $1200$hi = 0, $1201$hi = 0, $1203$hi = 0, $1205 = 0, $1205$hi = 0, $1206$hi = 0, $1260 = 0, $1265 = 0, $1267$hi = 0, $1269 = 0, $1269$hi = 0, $1271$hi = 0, $1273 = 0, $1273$hi = 0, $1274$hi = 0, $1276$hi = 0, $1278 = 0, $1278$hi = 0, $1279$hi = 0, $1281$hi = 0, $1283 = 0, $1283$hi = 0, $1284$hi = 0, $1286$hi = 0, $1288 = 0, $1288$hi = 0, $1289$hi = 0, $1291$hi = 0, $1293 = 0, $1293$hi = 0, $1294$hi = 0, $1334 = 0, $1339 = 0, $1341$hi = 0, $1343 = 0, $1343$hi = 0, $1345$hi = 0, $1347 = 0, $1347$hi = 0, $1348$hi = 0, $1350$hi = 0, $1352 = 0, $1352$hi = 0, $1353$hi = 0, $1395 = 0, $1400 = 0, $1402$hi = 0, $1404 = 0, $1404$hi = 0, $1406$hi = 0, $1408 = 0, $1408$hi = 0, $1409$hi = 0, $1411$hi = 0, $1413 = 0, $1413$hi = 0, $1414$hi = 0, $1416$hi = 0, $1418 = 0, $1418$hi = 0, $1419$hi = 0, $1445 = 0, $1450 = 0, $1452$hi = 0, $1454$hi = 0, $1484 = 0, $1489 = 0, $1491$hi = 0, $1493 = 0, $1493$hi = 0, $1495$hi = 0, $1497 = 0, $1497$hi = 0, $1498$hi = 0;
  label$1 : {
   label$2 : {
    if ($3 >>> 0 < 13 >>> 0) {
     break label$2
    }
    if (($1 | 0) < (1 | 0)) {
     break label$1
    }
    i64toi32_i32$0 = 0;
    $18 = $4;
    $18$hi = i64toi32_i32$0;
    $6 = 0;
    $7 = $3 + -13 | 0;
    $8 = $7 >>> 0 > 19 >>> 0;
    label$3 : while (1) {
     i64toi32_i32$0 = 0;
     $19 = 0;
     $19$hi = i64toi32_i32$0;
     label$4 : {
      if ($8) {
       break label$4
      }
      label$5 : {
       switch ($7 | 0) {
       case 19:
        i64toi32_i32$2 = (($6 << 2 | 0) + $0 | 0) + -128 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
        $48 = i64toi32_i32$0;
        $48$hi = i64toi32_i32$1;
        i64toi32_i32$2 = $2;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 124 | 0) >> 2] | 0;
        i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
        $50 = i64toi32_i32$1;
        $50$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $48$hi;
        i64toi32_i32$1 = $50$hi;
        i64toi32_i32$1 = __wasm_i64_mul($48 | 0, i64toi32_i32$0 | 0, $50 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        $19 = i64toi32_i32$1;
        $19$hi = i64toi32_i32$0;
       case 18:
        i64toi32_i32$2 = (($6 << 2 | 0) + $0 | 0) + -124 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
        $57 = i64toi32_i32$0;
        $57$hi = i64toi32_i32$1;
        i64toi32_i32$2 = $2;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 120 | 0) >> 2] | 0;
        i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
        $59 = i64toi32_i32$1;
        $59$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $57$hi;
        i64toi32_i32$1 = $59$hi;
        i64toi32_i32$1 = __wasm_i64_mul($57 | 0, i64toi32_i32$0 | 0, $59 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        $60$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $19$hi;
        i64toi32_i32$0 = $60$hi;
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$1 = $19$hi;
        i64toi32_i32$3 = $19;
        i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $19 = i64toi32_i32$4;
        $19$hi = i64toi32_i32$5;
       case 17:
        i64toi32_i32$0 = (($6 << 2 | 0) + $0 | 0) + -120 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
        i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
        $68 = i64toi32_i32$5;
        $68$hi = i64toi32_i32$2;
        i64toi32_i32$0 = $2;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 116 | 0) >> 2] | 0;
        i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
        $70 = i64toi32_i32$2;
        $70$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $68$hi;
        i64toi32_i32$2 = $70$hi;
        i64toi32_i32$2 = __wasm_i64_mul($68 | 0, i64toi32_i32$5 | 0, $70 | 0, i64toi32_i32$2 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $71$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $19$hi;
        i64toi32_i32$5 = $71$hi;
        i64toi32_i32$0 = i64toi32_i32$2;
        i64toi32_i32$2 = $19$hi;
        i64toi32_i32$3 = $19;
        i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $19 = i64toi32_i32$1;
        $19$hi = i64toi32_i32$4;
       case 16:
        i64toi32_i32$5 = (($6 << 2 | 0) + $0 | 0) + -116 | 0;
        i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
        i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
        $79 = i64toi32_i32$4;
        $79$hi = i64toi32_i32$0;
        i64toi32_i32$5 = $2;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 112 | 0) >> 2] | 0;
        i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
        $81 = i64toi32_i32$0;
        $81$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $79$hi;
        i64toi32_i32$0 = $81$hi;
        i64toi32_i32$0 = __wasm_i64_mul($79 | 0, i64toi32_i32$4 | 0, $81 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $82$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $19$hi;
        i64toi32_i32$4 = $82$hi;
        i64toi32_i32$5 = i64toi32_i32$0;
        i64toi32_i32$0 = $19$hi;
        i64toi32_i32$3 = $19;
        i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
        i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
        }
        $19 = i64toi32_i32$2;
        $19$hi = i64toi32_i32$1;
       case 15:
        i64toi32_i32$4 = (($6 << 2 | 0) + $0 | 0) + -112 | 0;
        i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
        i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
        $90 = i64toi32_i32$1;
        $90$hi = i64toi32_i32$5;
        i64toi32_i32$4 = $2;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 108 | 0) >> 2] | 0;
        i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
        $92 = i64toi32_i32$5;
        $92$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $90$hi;
        i64toi32_i32$5 = $92$hi;
        i64toi32_i32$5 = __wasm_i64_mul($90 | 0, i64toi32_i32$1 | 0, $92 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $93$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $19$hi;
        i64toi32_i32$1 = $93$hi;
        i64toi32_i32$4 = i64toi32_i32$5;
        i64toi32_i32$5 = $19$hi;
        i64toi32_i32$3 = $19;
        i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
        i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
        }
        $19 = i64toi32_i32$0;
        $19$hi = i64toi32_i32$2;
       case 14:
        i64toi32_i32$1 = (($6 << 2 | 0) + $0 | 0) + -108 | 0;
        i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
        $101 = i64toi32_i32$2;
        $101$hi = i64toi32_i32$4;
        i64toi32_i32$1 = $2;
        i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 104 | 0) >> 2] | 0;
        i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
        $103 = i64toi32_i32$4;
        $103$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $101$hi;
        i64toi32_i32$4 = $103$hi;
        i64toi32_i32$4 = __wasm_i64_mul($101 | 0, i64toi32_i32$2 | 0, $103 | 0, i64toi32_i32$4 | 0) | 0;
        i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
        $104$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $19$hi;
        i64toi32_i32$2 = $104$hi;
        i64toi32_i32$1 = i64toi32_i32$4;
        i64toi32_i32$4 = $19$hi;
        i64toi32_i32$3 = $19;
        i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
        }
        $19 = i64toi32_i32$5;
        $19$hi = i64toi32_i32$0;
       case 13:
        i64toi32_i32$2 = (($6 << 2 | 0) + $0 | 0) + -104 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
        $112 = i64toi32_i32$0;
        $112$hi = i64toi32_i32$1;
        i64toi32_i32$2 = $2;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 100 | 0) >> 2] | 0;
        i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
        $114 = i64toi32_i32$1;
        $114$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $112$hi;
        i64toi32_i32$1 = $114$hi;
        i64toi32_i32$1 = __wasm_i64_mul($112 | 0, i64toi32_i32$0 | 0, $114 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        $115$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $19$hi;
        i64toi32_i32$0 = $115$hi;
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$1 = $19$hi;
        i64toi32_i32$3 = $19;
        i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $19 = i64toi32_i32$4;
        $19$hi = i64toi32_i32$5;
       case 12:
        i64toi32_i32$0 = (($6 << 2 | 0) + $0 | 0) + -100 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
        i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
        $123 = i64toi32_i32$5;
        $123$hi = i64toi32_i32$2;
        i64toi32_i32$0 = $2;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
        i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
        $125 = i64toi32_i32$2;
        $125$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $123$hi;
        i64toi32_i32$2 = $125$hi;
        i64toi32_i32$2 = __wasm_i64_mul($123 | 0, i64toi32_i32$5 | 0, $125 | 0, i64toi32_i32$2 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $126$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $19$hi;
        i64toi32_i32$5 = $126$hi;
        i64toi32_i32$0 = i64toi32_i32$2;
        i64toi32_i32$2 = $19$hi;
        i64toi32_i32$3 = $19;
        i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $19 = i64toi32_i32$1;
        $19$hi = i64toi32_i32$4;
       case 11:
        i64toi32_i32$5 = (($6 << 2 | 0) + $0 | 0) + -96 | 0;
        i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
        i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
        $134 = i64toi32_i32$4;
        $134$hi = i64toi32_i32$0;
        i64toi32_i32$5 = $2;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 92 | 0) >> 2] | 0;
        i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
        $136 = i64toi32_i32$0;
        $136$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $134$hi;
        i64toi32_i32$0 = $136$hi;
        i64toi32_i32$0 = __wasm_i64_mul($134 | 0, i64toi32_i32$4 | 0, $136 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $137$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $19$hi;
        i64toi32_i32$4 = $137$hi;
        i64toi32_i32$5 = i64toi32_i32$0;
        i64toi32_i32$0 = $19$hi;
        i64toi32_i32$3 = $19;
        i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
        i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
        }
        $19 = i64toi32_i32$2;
        $19$hi = i64toi32_i32$1;
       case 10:
        i64toi32_i32$4 = (($6 << 2 | 0) + $0 | 0) + -92 | 0;
        i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
        i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
        $145 = i64toi32_i32$1;
        $145$hi = i64toi32_i32$5;
        i64toi32_i32$4 = $2;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 88 | 0) >> 2] | 0;
        i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
        $147 = i64toi32_i32$5;
        $147$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $145$hi;
        i64toi32_i32$5 = $147$hi;
        i64toi32_i32$5 = __wasm_i64_mul($145 | 0, i64toi32_i32$1 | 0, $147 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $148$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $19$hi;
        i64toi32_i32$1 = $148$hi;
        i64toi32_i32$4 = i64toi32_i32$5;
        i64toi32_i32$5 = $19$hi;
        i64toi32_i32$3 = $19;
        i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
        i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
        }
        $19 = i64toi32_i32$0;
        $19$hi = i64toi32_i32$2;
       case 9:
        i64toi32_i32$1 = (($6 << 2 | 0) + $0 | 0) + -88 | 0;
        i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
        $156 = i64toi32_i32$2;
        $156$hi = i64toi32_i32$4;
        i64toi32_i32$1 = $2;
        i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] | 0;
        i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
        $158 = i64toi32_i32$4;
        $158$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $156$hi;
        i64toi32_i32$4 = $158$hi;
        i64toi32_i32$4 = __wasm_i64_mul($156 | 0, i64toi32_i32$2 | 0, $158 | 0, i64toi32_i32$4 | 0) | 0;
        i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
        $159$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $19$hi;
        i64toi32_i32$2 = $159$hi;
        i64toi32_i32$1 = i64toi32_i32$4;
        i64toi32_i32$4 = $19$hi;
        i64toi32_i32$3 = $19;
        i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
        }
        $19 = i64toi32_i32$5;
        $19$hi = i64toi32_i32$0;
       case 8:
        i64toi32_i32$2 = (($6 << 2 | 0) + $0 | 0) + -84 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
        $167 = i64toi32_i32$0;
        $167$hi = i64toi32_i32$1;
        i64toi32_i32$2 = $2;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 80 | 0) >> 2] | 0;
        i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
        $169 = i64toi32_i32$1;
        $169$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $167$hi;
        i64toi32_i32$1 = $169$hi;
        i64toi32_i32$1 = __wasm_i64_mul($167 | 0, i64toi32_i32$0 | 0, $169 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        $170$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $19$hi;
        i64toi32_i32$0 = $170$hi;
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$1 = $19$hi;
        i64toi32_i32$3 = $19;
        i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $19 = i64toi32_i32$4;
        $19$hi = i64toi32_i32$5;
       case 7:
        i64toi32_i32$0 = (($6 << 2 | 0) + $0 | 0) + -80 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
        i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
        $178 = i64toi32_i32$5;
        $178$hi = i64toi32_i32$2;
        i64toi32_i32$0 = $2;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 76 | 0) >> 2] | 0;
        i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
        $180 = i64toi32_i32$2;
        $180$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $178$hi;
        i64toi32_i32$2 = $180$hi;
        i64toi32_i32$2 = __wasm_i64_mul($178 | 0, i64toi32_i32$5 | 0, $180 | 0, i64toi32_i32$2 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $181$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $19$hi;
        i64toi32_i32$5 = $181$hi;
        i64toi32_i32$0 = i64toi32_i32$2;
        i64toi32_i32$2 = $19$hi;
        i64toi32_i32$3 = $19;
        i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $19 = i64toi32_i32$1;
        $19$hi = i64toi32_i32$4;
       case 6:
        i64toi32_i32$5 = (($6 << 2 | 0) + $0 | 0) + -76 | 0;
        i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
        i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
        $189 = i64toi32_i32$4;
        $189$hi = i64toi32_i32$0;
        i64toi32_i32$5 = $2;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 72 | 0) >> 2] | 0;
        i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
        $191 = i64toi32_i32$0;
        $191$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $189$hi;
        i64toi32_i32$0 = $191$hi;
        i64toi32_i32$0 = __wasm_i64_mul($189 | 0, i64toi32_i32$4 | 0, $191 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $192$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $19$hi;
        i64toi32_i32$4 = $192$hi;
        i64toi32_i32$5 = i64toi32_i32$0;
        i64toi32_i32$0 = $19$hi;
        i64toi32_i32$3 = $19;
        i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
        i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
        }
        $19 = i64toi32_i32$2;
        $19$hi = i64toi32_i32$1;
       case 5:
        i64toi32_i32$4 = (($6 << 2 | 0) + $0 | 0) + -72 | 0;
        i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
        i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
        $200 = i64toi32_i32$1;
        $200$hi = i64toi32_i32$5;
        i64toi32_i32$4 = $2;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 68 | 0) >> 2] | 0;
        i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
        $202 = i64toi32_i32$5;
        $202$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $200$hi;
        i64toi32_i32$5 = $202$hi;
        i64toi32_i32$5 = __wasm_i64_mul($200 | 0, i64toi32_i32$1 | 0, $202 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $203$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $19$hi;
        i64toi32_i32$1 = $203$hi;
        i64toi32_i32$4 = i64toi32_i32$5;
        i64toi32_i32$5 = $19$hi;
        i64toi32_i32$3 = $19;
        i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
        i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
        }
        $19 = i64toi32_i32$0;
        $19$hi = i64toi32_i32$2;
       case 4:
        i64toi32_i32$1 = (($6 << 2 | 0) + $0 | 0) + -68 | 0;
        i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
        $211 = i64toi32_i32$2;
        $211$hi = i64toi32_i32$4;
        i64toi32_i32$1 = $2;
        i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
        i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
        $213 = i64toi32_i32$4;
        $213$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $211$hi;
        i64toi32_i32$4 = $213$hi;
        i64toi32_i32$4 = __wasm_i64_mul($211 | 0, i64toi32_i32$2 | 0, $213 | 0, i64toi32_i32$4 | 0) | 0;
        i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
        $214$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $19$hi;
        i64toi32_i32$2 = $214$hi;
        i64toi32_i32$1 = i64toi32_i32$4;
        i64toi32_i32$4 = $19$hi;
        i64toi32_i32$3 = $19;
        i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
        }
        $19 = i64toi32_i32$5;
        $19$hi = i64toi32_i32$0;
       case 3:
        i64toi32_i32$2 = (($6 << 2 | 0) + $0 | 0) + -64 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
        $222 = i64toi32_i32$0;
        $222$hi = i64toi32_i32$1;
        i64toi32_i32$2 = $2;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 60 | 0) >> 2] | 0;
        i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
        $224 = i64toi32_i32$1;
        $224$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $222$hi;
        i64toi32_i32$1 = $224$hi;
        i64toi32_i32$1 = __wasm_i64_mul($222 | 0, i64toi32_i32$0 | 0, $224 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        $225$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $19$hi;
        i64toi32_i32$0 = $225$hi;
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$1 = $19$hi;
        i64toi32_i32$3 = $19;
        i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $19 = i64toi32_i32$4;
        $19$hi = i64toi32_i32$5;
       case 2:
        i64toi32_i32$0 = (($6 << 2 | 0) + $0 | 0) + -60 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
        i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
        $233 = i64toi32_i32$5;
        $233$hi = i64toi32_i32$2;
        i64toi32_i32$0 = $2;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 56 | 0) >> 2] | 0;
        i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
        $235 = i64toi32_i32$2;
        $235$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $233$hi;
        i64toi32_i32$2 = $235$hi;
        i64toi32_i32$2 = __wasm_i64_mul($233 | 0, i64toi32_i32$5 | 0, $235 | 0, i64toi32_i32$2 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $236$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $19$hi;
        i64toi32_i32$5 = $236$hi;
        i64toi32_i32$0 = i64toi32_i32$2;
        i64toi32_i32$2 = $19$hi;
        i64toi32_i32$3 = $19;
        i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $19 = i64toi32_i32$1;
        $19$hi = i64toi32_i32$4;
       case 1:
        i64toi32_i32$5 = (($6 << 2 | 0) + $0 | 0) + -56 | 0;
        i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
        i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
        $244 = i64toi32_i32$4;
        $244$hi = i64toi32_i32$0;
        i64toi32_i32$5 = $2;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 52 | 0) >> 2] | 0;
        i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
        $246 = i64toi32_i32$0;
        $246$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $244$hi;
        i64toi32_i32$0 = $246$hi;
        i64toi32_i32$0 = __wasm_i64_mul($244 | 0, i64toi32_i32$4 | 0, $246 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $247$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $19$hi;
        i64toi32_i32$4 = $247$hi;
        i64toi32_i32$5 = i64toi32_i32$0;
        i64toi32_i32$0 = $19$hi;
        i64toi32_i32$3 = $19;
        i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
        i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
        }
        $19 = i64toi32_i32$2;
        $19$hi = i64toi32_i32$1;
        break;
       default:
        break label$5;
       };
      }
      $3 = ($6 << 2 | 0) + $0 | 0;
      i64toi32_i32$4 = $3 + -52 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
      $256 = i64toi32_i32$1;
      $256$hi = i64toi32_i32$5;
      i64toi32_i32$4 = $2;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 48 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
      $258 = i64toi32_i32$5;
      $258$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $256$hi;
      i64toi32_i32$5 = $258$hi;
      i64toi32_i32$5 = __wasm_i64_mul($256 | 0, i64toi32_i32$1 | 0, $258 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $259$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$1 = $259$hi;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$3 = $19;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $261$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $3 + -48 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
      $264 = i64toi32_i32$2;
      $264$hi = i64toi32_i32$4;
      i64toi32_i32$1 = $2;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
      $266 = i64toi32_i32$4;
      $266$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $264$hi;
      i64toi32_i32$4 = $266$hi;
      i64toi32_i32$4 = __wasm_i64_mul($264 | 0, i64toi32_i32$2 | 0, $266 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $267 = i64toi32_i32$4;
      $267$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $261$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$4 = $267$hi;
      i64toi32_i32$3 = $267;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $268$hi = i64toi32_i32$0;
      i64toi32_i32$2 = $3 + -44 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
      $271 = i64toi32_i32$0;
      $271$hi = i64toi32_i32$1;
      i64toi32_i32$2 = $2;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 40 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $273 = i64toi32_i32$1;
      $273$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $271$hi;
      i64toi32_i32$1 = $273$hi;
      i64toi32_i32$1 = __wasm_i64_mul($271 | 0, i64toi32_i32$0 | 0, $273 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $274 = i64toi32_i32$1;
      $274$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $268$hi;
      i64toi32_i32$2 = i64toi32_i32$5;
      i64toi32_i32$1 = $274$hi;
      i64toi32_i32$3 = $274;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $275$hi = i64toi32_i32$5;
      i64toi32_i32$0 = $3 + -40 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
      $278 = i64toi32_i32$5;
      $278$hi = i64toi32_i32$2;
      i64toi32_i32$0 = $2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
      $280 = i64toi32_i32$2;
      $280$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $278$hi;
      i64toi32_i32$2 = $280$hi;
      i64toi32_i32$2 = __wasm_i64_mul($278 | 0, i64toi32_i32$5 | 0, $280 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $281 = i64toi32_i32$2;
      $281$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $275$hi;
      i64toi32_i32$0 = i64toi32_i32$4;
      i64toi32_i32$2 = $281$hi;
      i64toi32_i32$3 = $281;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $282$hi = i64toi32_i32$4;
      i64toi32_i32$5 = $3 + -36 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
      $285 = i64toi32_i32$4;
      $285$hi = i64toi32_i32$0;
      i64toi32_i32$5 = $2;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 32 | 0) >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
      $287 = i64toi32_i32$0;
      $287$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $285$hi;
      i64toi32_i32$0 = $287$hi;
      i64toi32_i32$0 = __wasm_i64_mul($285 | 0, i64toi32_i32$4 | 0, $287 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $288 = i64toi32_i32$0;
      $288$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $282$hi;
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$0 = $288$hi;
      i64toi32_i32$3 = $288;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $289$hi = i64toi32_i32$1;
      i64toi32_i32$4 = $3 + -32 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
      $292 = i64toi32_i32$1;
      $292$hi = i64toi32_i32$5;
      i64toi32_i32$4 = $2;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 28 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
      $294 = i64toi32_i32$5;
      $294$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $292$hi;
      i64toi32_i32$5 = $294$hi;
      i64toi32_i32$5 = __wasm_i64_mul($292 | 0, i64toi32_i32$1 | 0, $294 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $295 = i64toi32_i32$5;
      $295$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $289$hi;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$5 = $295$hi;
      i64toi32_i32$3 = $295;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $296$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $3 + -28 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
      $299 = i64toi32_i32$2;
      $299$hi = i64toi32_i32$4;
      i64toi32_i32$1 = $2;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
      $301 = i64toi32_i32$4;
      $301$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $299$hi;
      i64toi32_i32$4 = $301$hi;
      i64toi32_i32$4 = __wasm_i64_mul($299 | 0, i64toi32_i32$2 | 0, $301 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $302 = i64toi32_i32$4;
      $302$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $296$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$4 = $302$hi;
      i64toi32_i32$3 = $302;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $303$hi = i64toi32_i32$0;
      i64toi32_i32$2 = $3 + -24 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
      $306 = i64toi32_i32$0;
      $306$hi = i64toi32_i32$1;
      i64toi32_i32$2 = $2;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $308 = i64toi32_i32$1;
      $308$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $306$hi;
      i64toi32_i32$1 = $308$hi;
      i64toi32_i32$1 = __wasm_i64_mul($306 | 0, i64toi32_i32$0 | 0, $308 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $309 = i64toi32_i32$1;
      $309$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $303$hi;
      i64toi32_i32$2 = i64toi32_i32$5;
      i64toi32_i32$1 = $309$hi;
      i64toi32_i32$3 = $309;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $310$hi = i64toi32_i32$5;
      i64toi32_i32$0 = $3 + -20 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
      $313 = i64toi32_i32$5;
      $313$hi = i64toi32_i32$2;
      i64toi32_i32$0 = $2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
      $315 = i64toi32_i32$2;
      $315$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $313$hi;
      i64toi32_i32$2 = $315$hi;
      i64toi32_i32$2 = __wasm_i64_mul($313 | 0, i64toi32_i32$5 | 0, $315 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $316 = i64toi32_i32$2;
      $316$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $310$hi;
      i64toi32_i32$0 = i64toi32_i32$4;
      i64toi32_i32$2 = $316$hi;
      i64toi32_i32$3 = $316;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $317$hi = i64toi32_i32$4;
      i64toi32_i32$5 = $3 + -16 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
      $320 = i64toi32_i32$4;
      $320$hi = i64toi32_i32$0;
      i64toi32_i32$5 = $2;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
      $322 = i64toi32_i32$0;
      $322$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $320$hi;
      i64toi32_i32$0 = $322$hi;
      i64toi32_i32$0 = __wasm_i64_mul($320 | 0, i64toi32_i32$4 | 0, $322 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $323 = i64toi32_i32$0;
      $323$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $317$hi;
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$0 = $323$hi;
      i64toi32_i32$3 = $323;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $324$hi = i64toi32_i32$1;
      i64toi32_i32$4 = $3 + -12 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
      $327 = i64toi32_i32$1;
      $327$hi = i64toi32_i32$5;
      i64toi32_i32$4 = $2;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
      $329 = i64toi32_i32$5;
      $329$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $327$hi;
      i64toi32_i32$5 = $329$hi;
      i64toi32_i32$5 = __wasm_i64_mul($327 | 0, i64toi32_i32$1 | 0, $329 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $330 = i64toi32_i32$5;
      $330$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $324$hi;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$5 = $330$hi;
      i64toi32_i32$3 = $330;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $331$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $3 + -8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
      $334 = i64toi32_i32$2;
      $334$hi = i64toi32_i32$4;
      i64toi32_i32$1 = $2;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
      $336 = i64toi32_i32$4;
      $336$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $334$hi;
      i64toi32_i32$4 = $336$hi;
      i64toi32_i32$4 = __wasm_i64_mul($334 | 0, i64toi32_i32$2 | 0, $336 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $337 = i64toi32_i32$4;
      $337$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $331$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$4 = $337$hi;
      i64toi32_i32$3 = $337;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $338$hi = i64toi32_i32$0;
      i64toi32_i32$2 = $3 + -4 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
      $341 = i64toi32_i32$0;
      $341$hi = i64toi32_i32$1;
      i64toi32_i32$2 = $2;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $343 = i64toi32_i32$1;
      $343$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $341$hi;
      i64toi32_i32$1 = $343$hi;
      i64toi32_i32$1 = __wasm_i64_mul($341 | 0, i64toi32_i32$0 | 0, $343 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $344 = i64toi32_i32$1;
      $344$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $338$hi;
      i64toi32_i32$2 = i64toi32_i32$5;
      i64toi32_i32$1 = $344$hi;
      i64toi32_i32$3 = $344;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $19 = i64toi32_i32$4;
      $19$hi = i64toi32_i32$5;
     }
     $3 = $6 << 2 | 0;
     $350 = $5 + $3 | 0;
     $354 = HEAP32[($0 + $3 | 0) >> 2] | 0;
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$5 = $18$hi;
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$0 = $19;
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$3 = $18;
     i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
      $558 = i64toi32_i32$5 >> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$5 >> i64toi32_i32$1 | 0;
      $558 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
     }
     HEAP32[$350 >> 2] = $354 - $558 | 0;
     $6 = $6 + 1 | 0;
     if (($6 | 0) != ($1 | 0)) {
      continue label$3
     }
     break label$1;
    };
   }
   label$25 : {
    if ($3 >>> 0 < 9 >>> 0) {
     break label$25
    }
    label$26 : {
     if ($3 >>> 0 < 11 >>> 0) {
      break label$26
     }
     label$27 : {
      if (($3 | 0) == (12 | 0)) {
       break label$27
      }
      if (($1 | 0) < (1 | 0)) {
       break label$1
      }
      $9 = HEAP32[($0 + -4 | 0) >> 2] | 0;
      $6 = HEAP32[($0 + -8 | 0) >> 2] | 0;
      $3 = HEAP32[($0 + -12 | 0) >> 2] | 0;
      $8 = HEAP32[($0 + -16 | 0) >> 2] | 0;
      $7 = HEAP32[($0 + -20 | 0) >> 2] | 0;
      $10 = HEAP32[($0 + -24 | 0) >> 2] | 0;
      $11 = HEAP32[($0 + -28 | 0) >> 2] | 0;
      $12 = HEAP32[($0 + -32 | 0) >> 2] | 0;
      $13 = HEAP32[($0 + -36 | 0) >> 2] | 0;
      $14 = HEAP32[($0 + -40 | 0) >> 2] | 0;
      $15 = HEAP32[($0 + -44 | 0) >> 2] | 0;
      i64toi32_i32$2 = 0;
      $19 = $4;
      $19$hi = i64toi32_i32$2;
      i64toi32_i32$5 = $2;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $18 = i64toi32_i32$2;
      $18$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $20 = i64toi32_i32$0;
      $20$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $21 = i64toi32_i32$2;
      $21$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $22 = i64toi32_i32$0;
      $22$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 16 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $23 = i64toi32_i32$2;
      $23$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 20 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $24 = i64toi32_i32$0;
      $24$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 24 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $25 = i64toi32_i32$2;
      $25$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 28 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $26 = i64toi32_i32$0;
      $26$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 32 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $27 = i64toi32_i32$2;
      $27$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 36 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $28 = i64toi32_i32$0;
      $28$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 40 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $29 = i64toi32_i32$2;
      $29$hi = i64toi32_i32$0;
      $2 = 0;
      label$28 : while (1) {
       $16 = $14;
       $14 = $13;
       $13 = $12;
       $12 = $11;
       $11 = $10;
       $10 = $7;
       $7 = $8;
       $8 = $3;
       $3 = $6;
       $6 = $9;
       $9 = $2 << 2 | 0;
       $444 = $5 + $9 | 0;
       $9 = HEAP32[($0 + $9 | 0) >> 2] | 0;
       $449 = $9;
       i64toi32_i32$2 = $16;
       i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
       $451$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $28$hi;
       i64toi32_i32$0 = $451$hi;
       i64toi32_i32$2 = $28$hi;
       i64toi32_i32$2 = __wasm_i64_mul($16 | 0, i64toi32_i32$0 | 0, $28 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $453 = i64toi32_i32$2;
       $453$hi = i64toi32_i32$0;
       i64toi32_i32$2 = $15;
       i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
       $455$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $29$hi;
       i64toi32_i32$0 = $455$hi;
       i64toi32_i32$2 = $29$hi;
       i64toi32_i32$2 = __wasm_i64_mul($15 | 0, i64toi32_i32$0 | 0, $29 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $457 = i64toi32_i32$2;
       $457$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $453$hi;
       i64toi32_i32$5 = $453;
       i64toi32_i32$2 = $457$hi;
       i64toi32_i32$3 = $457;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $458$hi = i64toi32_i32$4;
       i64toi32_i32$5 = $14;
       i64toi32_i32$4 = i64toi32_i32$5 >> 31 | 0;
       $460$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $27$hi;
       i64toi32_i32$4 = $460$hi;
       i64toi32_i32$5 = $27$hi;
       i64toi32_i32$5 = __wasm_i64_mul($14 | 0, i64toi32_i32$4 | 0, $27 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $462 = i64toi32_i32$5;
       $462$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $458$hi;
       i64toi32_i32$0 = i64toi32_i32$1;
       i64toi32_i32$5 = $462$hi;
       i64toi32_i32$3 = $462;
       i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $463$hi = i64toi32_i32$1;
       i64toi32_i32$0 = $13;
       i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
       $465$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $26$hi;
       i64toi32_i32$1 = $465$hi;
       i64toi32_i32$0 = $26$hi;
       i64toi32_i32$0 = __wasm_i64_mul($13 | 0, i64toi32_i32$1 | 0, $26 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $467 = i64toi32_i32$0;
       $467$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $463$hi;
       i64toi32_i32$4 = i64toi32_i32$2;
       i64toi32_i32$0 = $467$hi;
       i64toi32_i32$3 = $467;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $468$hi = i64toi32_i32$2;
       i64toi32_i32$4 = $12;
       i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
       $470$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $25$hi;
       i64toi32_i32$2 = $470$hi;
       i64toi32_i32$4 = $25$hi;
       i64toi32_i32$4 = __wasm_i64_mul($12 | 0, i64toi32_i32$2 | 0, $25 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $472 = i64toi32_i32$4;
       $472$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $468$hi;
       i64toi32_i32$1 = i64toi32_i32$5;
       i64toi32_i32$4 = $472$hi;
       i64toi32_i32$3 = $472;
       i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $473$hi = i64toi32_i32$5;
       i64toi32_i32$1 = $11;
       i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
       $475$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $24$hi;
       i64toi32_i32$5 = $475$hi;
       i64toi32_i32$1 = $24$hi;
       i64toi32_i32$1 = __wasm_i64_mul($11 | 0, i64toi32_i32$5 | 0, $24 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $477 = i64toi32_i32$1;
       $477$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $473$hi;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$1 = $477$hi;
       i64toi32_i32$3 = $477;
       i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $478$hi = i64toi32_i32$0;
       i64toi32_i32$2 = $10;
       i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
       $480$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $23$hi;
       i64toi32_i32$0 = $480$hi;
       i64toi32_i32$2 = $23$hi;
       i64toi32_i32$2 = __wasm_i64_mul($10 | 0, i64toi32_i32$0 | 0, $23 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $482 = i64toi32_i32$2;
       $482$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $478$hi;
       i64toi32_i32$5 = i64toi32_i32$4;
       i64toi32_i32$2 = $482$hi;
       i64toi32_i32$3 = $482;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $483$hi = i64toi32_i32$4;
       i64toi32_i32$5 = $7;
       i64toi32_i32$4 = i64toi32_i32$5 >> 31 | 0;
       $485$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $22$hi;
       i64toi32_i32$4 = $485$hi;
       i64toi32_i32$5 = $22$hi;
       i64toi32_i32$5 = __wasm_i64_mul($7 | 0, i64toi32_i32$4 | 0, $22 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $487 = i64toi32_i32$5;
       $487$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $483$hi;
       i64toi32_i32$0 = i64toi32_i32$1;
       i64toi32_i32$5 = $487$hi;
       i64toi32_i32$3 = $487;
       i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $488$hi = i64toi32_i32$1;
       i64toi32_i32$0 = $8;
       i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
       $490$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $21$hi;
       i64toi32_i32$1 = $490$hi;
       i64toi32_i32$0 = $21$hi;
       i64toi32_i32$0 = __wasm_i64_mul($8 | 0, i64toi32_i32$1 | 0, $21 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $492 = i64toi32_i32$0;
       $492$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $488$hi;
       i64toi32_i32$4 = i64toi32_i32$2;
       i64toi32_i32$0 = $492$hi;
       i64toi32_i32$3 = $492;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $493$hi = i64toi32_i32$2;
       i64toi32_i32$4 = $3;
       i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
       $495$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $20$hi;
       i64toi32_i32$2 = $495$hi;
       i64toi32_i32$4 = $20$hi;
       i64toi32_i32$4 = __wasm_i64_mul($3 | 0, i64toi32_i32$2 | 0, $20 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $497 = i64toi32_i32$4;
       $497$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $493$hi;
       i64toi32_i32$1 = i64toi32_i32$5;
       i64toi32_i32$4 = $497$hi;
       i64toi32_i32$3 = $497;
       i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $498$hi = i64toi32_i32$5;
       i64toi32_i32$1 = $6;
       i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
       $500$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $18$hi;
       i64toi32_i32$5 = $500$hi;
       i64toi32_i32$1 = $18$hi;
       i64toi32_i32$1 = __wasm_i64_mul($6 | 0, i64toi32_i32$5 | 0, $18 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $502 = i64toi32_i32$1;
       $502$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $498$hi;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$1 = $502$hi;
       i64toi32_i32$3 = $502;
       i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $503$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $19$hi;
       i64toi32_i32$0 = $503$hi;
       i64toi32_i32$5 = i64toi32_i32$4;
       i64toi32_i32$2 = $19$hi;
       i64toi32_i32$3 = $19;
       i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
        $559 = i64toi32_i32$0 >> i64toi32_i32$1 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$0 >> i64toi32_i32$1 | 0;
        $559 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
       }
       HEAP32[$444 >> 2] = $449 - $559 | 0;
       $15 = $16;
       $2 = $2 + 1 | 0;
       if (($2 | 0) != ($1 | 0)) {
        continue label$28
       }
       break label$1;
      };
     }
     if (($1 | 0) < (1 | 0)) {
      break label$1
     }
     $15 = HEAP32[($0 + -4 | 0) >> 2] | 0;
     $6 = HEAP32[($0 + -8 | 0) >> 2] | 0;
     $3 = HEAP32[($0 + -12 | 0) >> 2] | 0;
     $8 = HEAP32[($0 + -16 | 0) >> 2] | 0;
     $7 = HEAP32[($0 + -20 | 0) >> 2] | 0;
     $10 = HEAP32[($0 + -24 | 0) >> 2] | 0;
     $11 = HEAP32[($0 + -28 | 0) >> 2] | 0;
     $12 = HEAP32[($0 + -32 | 0) >> 2] | 0;
     $13 = HEAP32[($0 + -36 | 0) >> 2] | 0;
     $14 = HEAP32[($0 + -40 | 0) >> 2] | 0;
     $16 = HEAP32[($0 + -44 | 0) >> 2] | 0;
     $17 = HEAP32[($0 + -48 | 0) >> 2] | 0;
     i64toi32_i32$2 = 0;
     $19 = $4;
     $19$hi = i64toi32_i32$2;
     i64toi32_i32$0 = $2;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
     $18 = i64toi32_i32$2;
     $18$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
     $20 = i64toi32_i32$5;
     $20$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
     i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
     $21 = i64toi32_i32$2;
     $21$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
     $22 = i64toi32_i32$5;
     $22$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
     i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
     $23 = i64toi32_i32$2;
     $23$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
     $24 = i64toi32_i32$5;
     $24$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] | 0;
     i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
     $25 = i64toi32_i32$2;
     $25$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
     $26 = i64toi32_i32$5;
     $26$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
     i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
     $27 = i64toi32_i32$2;
     $27$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
     $28 = i64toi32_i32$5;
     $28$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 40 | 0) >> 2] | 0;
     i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
     $29 = i64toi32_i32$2;
     $29$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 44 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
     $30 = i64toi32_i32$5;
     $30$hi = i64toi32_i32$2;
     $2 = 0;
     label$29 : while (1) {
      $9 = $16;
      $16 = $14;
      $14 = $13;
      $13 = $12;
      $12 = $11;
      $11 = $10;
      $10 = $7;
      $7 = $8;
      $8 = $3;
      $3 = $6;
      $6 = $15;
      $15 = $2 << 2 | 0;
      $593 = $5 + $15 | 0;
      $15 = HEAP32[($0 + $15 | 0) >> 2] | 0;
      $598 = $15;
      i64toi32_i32$5 = $9;
      i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
      $600$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $29$hi;
      i64toi32_i32$2 = $600$hi;
      i64toi32_i32$5 = $29$hi;
      i64toi32_i32$5 = __wasm_i64_mul($9 | 0, i64toi32_i32$2 | 0, $29 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $602 = i64toi32_i32$5;
      $602$hi = i64toi32_i32$2;
      i64toi32_i32$5 = $17;
      i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
      $604$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $30$hi;
      i64toi32_i32$2 = $604$hi;
      i64toi32_i32$5 = $30$hi;
      i64toi32_i32$5 = __wasm_i64_mul($17 | 0, i64toi32_i32$2 | 0, $30 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $606 = i64toi32_i32$5;
      $606$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $602$hi;
      i64toi32_i32$0 = $602;
      i64toi32_i32$5 = $606$hi;
      i64toi32_i32$3 = $606;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $607$hi = i64toi32_i32$4;
      i64toi32_i32$0 = $16;
      i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
      $609$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $28$hi;
      i64toi32_i32$4 = $609$hi;
      i64toi32_i32$0 = $28$hi;
      i64toi32_i32$0 = __wasm_i64_mul($16 | 0, i64toi32_i32$4 | 0, $28 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $611 = i64toi32_i32$0;
      $611$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $607$hi;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$0 = $611$hi;
      i64toi32_i32$3 = $611;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $612$hi = i64toi32_i32$1;
      i64toi32_i32$2 = $14;
      i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
      $614$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $27$hi;
      i64toi32_i32$1 = $614$hi;
      i64toi32_i32$2 = $27$hi;
      i64toi32_i32$2 = __wasm_i64_mul($14 | 0, i64toi32_i32$1 | 0, $27 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $616 = i64toi32_i32$2;
      $616$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $612$hi;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$2 = $616$hi;
      i64toi32_i32$3 = $616;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $617$hi = i64toi32_i32$5;
      i64toi32_i32$4 = $13;
      i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
      $619$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $26$hi;
      i64toi32_i32$5 = $619$hi;
      i64toi32_i32$4 = $26$hi;
      i64toi32_i32$4 = __wasm_i64_mul($13 | 0, i64toi32_i32$5 | 0, $26 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $621 = i64toi32_i32$4;
      $621$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $617$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$4 = $621$hi;
      i64toi32_i32$3 = $621;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $622$hi = i64toi32_i32$0;
      i64toi32_i32$1 = $12;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $624$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $25$hi;
      i64toi32_i32$0 = $624$hi;
      i64toi32_i32$1 = $25$hi;
      i64toi32_i32$1 = __wasm_i64_mul($12 | 0, i64toi32_i32$0 | 0, $25 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $626 = i64toi32_i32$1;
      $626$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $622$hi;
      i64toi32_i32$5 = i64toi32_i32$2;
      i64toi32_i32$1 = $626$hi;
      i64toi32_i32$3 = $626;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $627$hi = i64toi32_i32$2;
      i64toi32_i32$5 = $11;
      i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
      $629$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $24$hi;
      i64toi32_i32$2 = $629$hi;
      i64toi32_i32$5 = $24$hi;
      i64toi32_i32$5 = __wasm_i64_mul($11 | 0, i64toi32_i32$2 | 0, $24 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $631 = i64toi32_i32$5;
      $631$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $627$hi;
      i64toi32_i32$0 = i64toi32_i32$4;
      i64toi32_i32$5 = $631$hi;
      i64toi32_i32$3 = $631;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $632$hi = i64toi32_i32$4;
      i64toi32_i32$0 = $10;
      i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
      $634$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $23$hi;
      i64toi32_i32$4 = $634$hi;
      i64toi32_i32$0 = $23$hi;
      i64toi32_i32$0 = __wasm_i64_mul($10 | 0, i64toi32_i32$4 | 0, $23 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $636 = i64toi32_i32$0;
      $636$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $632$hi;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$0 = $636$hi;
      i64toi32_i32$3 = $636;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $637$hi = i64toi32_i32$1;
      i64toi32_i32$2 = $7;
      i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
      $639$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $22$hi;
      i64toi32_i32$1 = $639$hi;
      i64toi32_i32$2 = $22$hi;
      i64toi32_i32$2 = __wasm_i64_mul($7 | 0, i64toi32_i32$1 | 0, $22 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $641 = i64toi32_i32$2;
      $641$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $637$hi;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$2 = $641$hi;
      i64toi32_i32$3 = $641;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $642$hi = i64toi32_i32$5;
      i64toi32_i32$4 = $8;
      i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
      $644$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $21$hi;
      i64toi32_i32$5 = $644$hi;
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$4 = __wasm_i64_mul($8 | 0, i64toi32_i32$5 | 0, $21 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $646 = i64toi32_i32$4;
      $646$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $642$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$4 = $646$hi;
      i64toi32_i32$3 = $646;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $647$hi = i64toi32_i32$0;
      i64toi32_i32$1 = $3;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $649$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $20$hi;
      i64toi32_i32$0 = $649$hi;
      i64toi32_i32$1 = $20$hi;
      i64toi32_i32$1 = __wasm_i64_mul($3 | 0, i64toi32_i32$0 | 0, $20 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $651 = i64toi32_i32$1;
      $651$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $647$hi;
      i64toi32_i32$5 = i64toi32_i32$2;
      i64toi32_i32$1 = $651$hi;
      i64toi32_i32$3 = $651;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $652$hi = i64toi32_i32$2;
      i64toi32_i32$5 = $6;
      i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
      $654$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$2 = $654$hi;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = __wasm_i64_mul($6 | 0, i64toi32_i32$2 | 0, $18 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $656 = i64toi32_i32$5;
      $656$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $652$hi;
      i64toi32_i32$0 = i64toi32_i32$4;
      i64toi32_i32$5 = $656$hi;
      i64toi32_i32$3 = $656;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $657$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$4 = $657$hi;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$3 = $19;
      i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
       $560 = i64toi32_i32$4 >> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$4 >> i64toi32_i32$5 | 0;
       $560 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
      }
      HEAP32[$593 >> 2] = $598 - $560 | 0;
      $17 = $9;
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($1 | 0)) {
       continue label$29
      }
      break label$1;
     };
    }
    label$30 : {
     if (($3 | 0) == (10 | 0)) {
      break label$30
     }
     if (($1 | 0) < (1 | 0)) {
      break label$1
     }
     $14 = HEAP32[($0 + -4 | 0) >> 2] | 0;
     $6 = HEAP32[($0 + -8 | 0) >> 2] | 0;
     $3 = HEAP32[($0 + -12 | 0) >> 2] | 0;
     $8 = HEAP32[($0 + -16 | 0) >> 2] | 0;
     $7 = HEAP32[($0 + -20 | 0) >> 2] | 0;
     $10 = HEAP32[($0 + -24 | 0) >> 2] | 0;
     $11 = HEAP32[($0 + -28 | 0) >> 2] | 0;
     $12 = HEAP32[($0 + -32 | 0) >> 2] | 0;
     $16 = HEAP32[($0 + -36 | 0) >> 2] | 0;
     i64toi32_i32$0 = 0;
     $19 = $4;
     $19$hi = i64toi32_i32$0;
     i64toi32_i32$4 = $2;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
     $18 = i64toi32_i32$0;
     $18$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
     $20 = i64toi32_i32$2;
     $20$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
     $21 = i64toi32_i32$0;
     $21$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
     $22 = i64toi32_i32$2;
     $22$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 16 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
     $23 = i64toi32_i32$0;
     $23$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 20 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
     $24 = i64toi32_i32$2;
     $24$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 24 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
     $25 = i64toi32_i32$0;
     $25$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 28 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
     $26 = i64toi32_i32$2;
     $26$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 32 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
     $27 = i64toi32_i32$0;
     $27$hi = i64toi32_i32$2;
     $2 = 0;
     label$31 : while (1) {
      $13 = $12;
      $12 = $11;
      $11 = $10;
      $10 = $7;
      $7 = $8;
      $8 = $3;
      $3 = $6;
      $6 = $14;
      $14 = $2 << 2 | 0;
      $731 = $5 + $14 | 0;
      $14 = HEAP32[($0 + $14 | 0) >> 2] | 0;
      $736 = $14;
      i64toi32_i32$0 = $13;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $738$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $26$hi;
      i64toi32_i32$2 = $738$hi;
      i64toi32_i32$0 = $26$hi;
      i64toi32_i32$0 = __wasm_i64_mul($13 | 0, i64toi32_i32$2 | 0, $26 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $740 = i64toi32_i32$0;
      $740$hi = i64toi32_i32$2;
      i64toi32_i32$0 = $16;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $742$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $27$hi;
      i64toi32_i32$2 = $742$hi;
      i64toi32_i32$0 = $27$hi;
      i64toi32_i32$0 = __wasm_i64_mul($16 | 0, i64toi32_i32$2 | 0, $27 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $744 = i64toi32_i32$0;
      $744$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $740$hi;
      i64toi32_i32$4 = $740;
      i64toi32_i32$0 = $744$hi;
      i64toi32_i32$3 = $744;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $745$hi = i64toi32_i32$1;
      i64toi32_i32$4 = $12;
      i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
      $747$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $25$hi;
      i64toi32_i32$1 = $747$hi;
      i64toi32_i32$4 = $25$hi;
      i64toi32_i32$4 = __wasm_i64_mul($12 | 0, i64toi32_i32$1 | 0, $25 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $749 = i64toi32_i32$4;
      $749$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $745$hi;
      i64toi32_i32$2 = i64toi32_i32$5;
      i64toi32_i32$4 = $749$hi;
      i64toi32_i32$3 = $749;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $750$hi = i64toi32_i32$5;
      i64toi32_i32$2 = $11;
      i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
      $752$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $24$hi;
      i64toi32_i32$5 = $752$hi;
      i64toi32_i32$2 = $24$hi;
      i64toi32_i32$2 = __wasm_i64_mul($11 | 0, i64toi32_i32$5 | 0, $24 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $754 = i64toi32_i32$2;
      $754$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $750$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$2 = $754$hi;
      i64toi32_i32$3 = $754;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $755$hi = i64toi32_i32$0;
      i64toi32_i32$1 = $10;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $757$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $23$hi;
      i64toi32_i32$0 = $757$hi;
      i64toi32_i32$1 = $23$hi;
      i64toi32_i32$1 = __wasm_i64_mul($10 | 0, i64toi32_i32$0 | 0, $23 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $759 = i64toi32_i32$1;
      $759$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $755$hi;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$1 = $759$hi;
      i64toi32_i32$3 = $759;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $760$hi = i64toi32_i32$4;
      i64toi32_i32$5 = $7;
      i64toi32_i32$4 = i64toi32_i32$5 >> 31 | 0;
      $762$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $22$hi;
      i64toi32_i32$4 = $762$hi;
      i64toi32_i32$5 = $22$hi;
      i64toi32_i32$5 = __wasm_i64_mul($7 | 0, i64toi32_i32$4 | 0, $22 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $764 = i64toi32_i32$5;
      $764$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $760$hi;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$5 = $764$hi;
      i64toi32_i32$3 = $764;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $765$hi = i64toi32_i32$2;
      i64toi32_i32$0 = $8;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $767$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $21$hi;
      i64toi32_i32$2 = $767$hi;
      i64toi32_i32$0 = $21$hi;
      i64toi32_i32$0 = __wasm_i64_mul($8 | 0, i64toi32_i32$2 | 0, $21 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $769 = i64toi32_i32$0;
      $769$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $765$hi;
      i64toi32_i32$4 = i64toi32_i32$1;
      i64toi32_i32$0 = $769$hi;
      i64toi32_i32$3 = $769;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $770$hi = i64toi32_i32$1;
      i64toi32_i32$4 = $3;
      i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
      $772$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $20$hi;
      i64toi32_i32$1 = $772$hi;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$4 = __wasm_i64_mul($3 | 0, i64toi32_i32$1 | 0, $20 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $774 = i64toi32_i32$4;
      $774$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $770$hi;
      i64toi32_i32$2 = i64toi32_i32$5;
      i64toi32_i32$4 = $774$hi;
      i64toi32_i32$3 = $774;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $775$hi = i64toi32_i32$5;
      i64toi32_i32$2 = $6;
      i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
      $777$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $777$hi;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$2 = __wasm_i64_mul($6 | 0, i64toi32_i32$5 | 0, $18 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $779 = i64toi32_i32$2;
      $779$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $775$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$2 = $779$hi;
      i64toi32_i32$3 = $779;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $780$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$0 = $780$hi;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$3 = $19;
      i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
       $561 = i64toi32_i32$0 >> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$0 >> i64toi32_i32$2 | 0;
       $561 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$2 | 0) | 0;
      }
      HEAP32[$731 >> 2] = $736 - $561 | 0;
      $16 = $13;
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($1 | 0)) {
       continue label$31
      }
      break label$1;
     };
    }
    if (($1 | 0) < (1 | 0)) {
     break label$1
    }
    $16 = HEAP32[($0 + -4 | 0) >> 2] | 0;
    $6 = HEAP32[($0 + -8 | 0) >> 2] | 0;
    $3 = HEAP32[($0 + -12 | 0) >> 2] | 0;
    $8 = HEAP32[($0 + -16 | 0) >> 2] | 0;
    $7 = HEAP32[($0 + -20 | 0) >> 2] | 0;
    $10 = HEAP32[($0 + -24 | 0) >> 2] | 0;
    $11 = HEAP32[($0 + -28 | 0) >> 2] | 0;
    $12 = HEAP32[($0 + -32 | 0) >> 2] | 0;
    $13 = HEAP32[($0 + -36 | 0) >> 2] | 0;
    $9 = HEAP32[($0 + -40 | 0) >> 2] | 0;
    i64toi32_i32$1 = 0;
    $19 = $4;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $2;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
    $18 = i64toi32_i32$1;
    $18$hi = i64toi32_i32$5;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
    $20 = i64toi32_i32$5;
    $20$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
    $21 = i64toi32_i32$1;
    $21$hi = i64toi32_i32$5;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
    $22 = i64toi32_i32$5;
    $22$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
    $23 = i64toi32_i32$1;
    $23$hi = i64toi32_i32$5;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
    $24 = i64toi32_i32$5;
    $24$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
    $25 = i64toi32_i32$1;
    $25$hi = i64toi32_i32$5;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
    $26 = i64toi32_i32$5;
    $26$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
    $27 = i64toi32_i32$1;
    $27$hi = i64toi32_i32$5;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
    $28 = i64toi32_i32$5;
    $28$hi = i64toi32_i32$1;
    $2 = 0;
    label$32 : while (1) {
     $14 = $13;
     $13 = $12;
     $12 = $11;
     $11 = $10;
     $10 = $7;
     $7 = $8;
     $8 = $3;
     $3 = $6;
     $6 = $16;
     $16 = $2 << 2 | 0;
     $858 = $5 + $16 | 0;
     $16 = HEAP32[($0 + $16 | 0) >> 2] | 0;
     $863 = $16;
     i64toi32_i32$5 = $14;
     i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
     $865$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $27$hi;
     i64toi32_i32$1 = $865$hi;
     i64toi32_i32$5 = $27$hi;
     i64toi32_i32$5 = __wasm_i64_mul($14 | 0, i64toi32_i32$1 | 0, $27 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $867 = i64toi32_i32$5;
     $867$hi = i64toi32_i32$1;
     i64toi32_i32$5 = $9;
     i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
     $869$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $28$hi;
     i64toi32_i32$1 = $869$hi;
     i64toi32_i32$5 = $28$hi;
     i64toi32_i32$5 = __wasm_i64_mul($9 | 0, i64toi32_i32$1 | 0, $28 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $871 = i64toi32_i32$5;
     $871$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $867$hi;
     i64toi32_i32$0 = $867;
     i64toi32_i32$5 = $871$hi;
     i64toi32_i32$3 = $871;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $872$hi = i64toi32_i32$4;
     i64toi32_i32$0 = $13;
     i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
     $874$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $26$hi;
     i64toi32_i32$4 = $874$hi;
     i64toi32_i32$0 = $26$hi;
     i64toi32_i32$0 = __wasm_i64_mul($13 | 0, i64toi32_i32$4 | 0, $26 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $876 = i64toi32_i32$0;
     $876$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $872$hi;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$0 = $876$hi;
     i64toi32_i32$3 = $876;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $877$hi = i64toi32_i32$2;
     i64toi32_i32$1 = $12;
     i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
     $879$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $25$hi;
     i64toi32_i32$2 = $879$hi;
     i64toi32_i32$1 = $25$hi;
     i64toi32_i32$1 = __wasm_i64_mul($12 | 0, i64toi32_i32$2 | 0, $25 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $881 = i64toi32_i32$1;
     $881$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $877$hi;
     i64toi32_i32$4 = i64toi32_i32$5;
     i64toi32_i32$1 = $881$hi;
     i64toi32_i32$3 = $881;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $882$hi = i64toi32_i32$5;
     i64toi32_i32$4 = $11;
     i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
     $884$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $24$hi;
     i64toi32_i32$5 = $884$hi;
     i64toi32_i32$4 = $24$hi;
     i64toi32_i32$4 = __wasm_i64_mul($11 | 0, i64toi32_i32$5 | 0, $24 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $886 = i64toi32_i32$4;
     $886$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $882$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$4 = $886$hi;
     i64toi32_i32$3 = $886;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $887$hi = i64toi32_i32$0;
     i64toi32_i32$2 = $10;
     i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
     $889$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $23$hi;
     i64toi32_i32$0 = $889$hi;
     i64toi32_i32$2 = $23$hi;
     i64toi32_i32$2 = __wasm_i64_mul($10 | 0, i64toi32_i32$0 | 0, $23 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $891 = i64toi32_i32$2;
     $891$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $887$hi;
     i64toi32_i32$5 = i64toi32_i32$1;
     i64toi32_i32$2 = $891$hi;
     i64toi32_i32$3 = $891;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $892$hi = i64toi32_i32$1;
     i64toi32_i32$5 = $7;
     i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
     $894$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $22$hi;
     i64toi32_i32$1 = $894$hi;
     i64toi32_i32$5 = $22$hi;
     i64toi32_i32$5 = __wasm_i64_mul($7 | 0, i64toi32_i32$1 | 0, $22 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $896 = i64toi32_i32$5;
     $896$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $892$hi;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$5 = $896$hi;
     i64toi32_i32$3 = $896;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $897$hi = i64toi32_i32$4;
     i64toi32_i32$0 = $8;
     i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
     $899$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $21$hi;
     i64toi32_i32$4 = $899$hi;
     i64toi32_i32$0 = $21$hi;
     i64toi32_i32$0 = __wasm_i64_mul($8 | 0, i64toi32_i32$4 | 0, $21 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $901 = i64toi32_i32$0;
     $901$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $897$hi;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$0 = $901$hi;
     i64toi32_i32$3 = $901;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $902$hi = i64toi32_i32$2;
     i64toi32_i32$1 = $3;
     i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
     $904$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $20$hi;
     i64toi32_i32$2 = $904$hi;
     i64toi32_i32$1 = $20$hi;
     i64toi32_i32$1 = __wasm_i64_mul($3 | 0, i64toi32_i32$2 | 0, $20 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $906 = i64toi32_i32$1;
     $906$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $902$hi;
     i64toi32_i32$4 = i64toi32_i32$5;
     i64toi32_i32$1 = $906$hi;
     i64toi32_i32$3 = $906;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $907$hi = i64toi32_i32$5;
     i64toi32_i32$4 = $6;
     i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
     $909$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $18$hi;
     i64toi32_i32$5 = $909$hi;
     i64toi32_i32$4 = $18$hi;
     i64toi32_i32$4 = __wasm_i64_mul($6 | 0, i64toi32_i32$5 | 0, $18 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $911 = i64toi32_i32$4;
     $911$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $907$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$4 = $911$hi;
     i64toi32_i32$3 = $911;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $912$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $19$hi;
     i64toi32_i32$0 = $912$hi;
     i64toi32_i32$5 = i64toi32_i32$1;
     i64toi32_i32$2 = $19$hi;
     i64toi32_i32$3 = $19;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $562 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
      $562 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
     }
     HEAP32[$858 >> 2] = $863 - $562 | 0;
     $9 = $14;
     $2 = $2 + 1 | 0;
     if (($2 | 0) != ($1 | 0)) {
      continue label$32
     }
     break label$1;
    };
   }
   label$33 : {
    if ($3 >>> 0 < 5 >>> 0) {
     break label$33
    }
    label$34 : {
     if ($3 >>> 0 < 7 >>> 0) {
      break label$34
     }
     label$35 : {
      if (($3 | 0) == (8 | 0)) {
       break label$35
      }
      if (($1 | 0) < (1 | 0)) {
       break label$1
      }
      $12 = HEAP32[($0 + -4 | 0) >> 2] | 0;
      $6 = HEAP32[($0 + -8 | 0) >> 2] | 0;
      $3 = HEAP32[($0 + -12 | 0) >> 2] | 0;
      $8 = HEAP32[($0 + -16 | 0) >> 2] | 0;
      $7 = HEAP32[($0 + -20 | 0) >> 2] | 0;
      $10 = HEAP32[($0 + -24 | 0) >> 2] | 0;
      $13 = HEAP32[($0 + -28 | 0) >> 2] | 0;
      i64toi32_i32$2 = 0;
      $19 = $4;
      $19$hi = i64toi32_i32$2;
      i64toi32_i32$0 = $2;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
      $18 = i64toi32_i32$2;
      $18$hi = i64toi32_i32$5;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
      $20 = i64toi32_i32$5;
      $20$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
      $21 = i64toi32_i32$2;
      $21$hi = i64toi32_i32$5;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
      $22 = i64toi32_i32$5;
      $22$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
      $23 = i64toi32_i32$2;
      $23$hi = i64toi32_i32$5;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
      $24 = i64toi32_i32$5;
      $24$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
      $25 = i64toi32_i32$2;
      $25$hi = i64toi32_i32$5;
      $2 = 0;
      label$36 : while (1) {
       $11 = $10;
       $10 = $7;
       $7 = $8;
       $8 = $3;
       $3 = $6;
       $6 = $12;
       $12 = $2 << 2 | 0;
       $978 = $5 + $12 | 0;
       $12 = HEAP32[($0 + $12 | 0) >> 2] | 0;
       $983 = $12;
       i64toi32_i32$2 = $11;
       i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
       $985$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $24$hi;
       i64toi32_i32$5 = $985$hi;
       i64toi32_i32$2 = $24$hi;
       i64toi32_i32$2 = __wasm_i64_mul($11 | 0, i64toi32_i32$5 | 0, $24 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $987 = i64toi32_i32$2;
       $987$hi = i64toi32_i32$5;
       i64toi32_i32$2 = $13;
       i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
       $989$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $25$hi;
       i64toi32_i32$5 = $989$hi;
       i64toi32_i32$2 = $25$hi;
       i64toi32_i32$2 = __wasm_i64_mul($13 | 0, i64toi32_i32$5 | 0, $25 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $991 = i64toi32_i32$2;
       $991$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $987$hi;
       i64toi32_i32$0 = $987;
       i64toi32_i32$2 = $991$hi;
       i64toi32_i32$3 = $991;
       i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $992$hi = i64toi32_i32$1;
       i64toi32_i32$0 = $10;
       i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
       $994$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $23$hi;
       i64toi32_i32$1 = $994$hi;
       i64toi32_i32$0 = $23$hi;
       i64toi32_i32$0 = __wasm_i64_mul($10 | 0, i64toi32_i32$1 | 0, $23 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $996 = i64toi32_i32$0;
       $996$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $992$hi;
       i64toi32_i32$5 = i64toi32_i32$4;
       i64toi32_i32$0 = $996$hi;
       i64toi32_i32$3 = $996;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $997$hi = i64toi32_i32$4;
       i64toi32_i32$5 = $7;
       i64toi32_i32$4 = i64toi32_i32$5 >> 31 | 0;
       $999$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $22$hi;
       i64toi32_i32$4 = $999$hi;
       i64toi32_i32$5 = $22$hi;
       i64toi32_i32$5 = __wasm_i64_mul($7 | 0, i64toi32_i32$4 | 0, $22 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $1001 = i64toi32_i32$5;
       $1001$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $997$hi;
       i64toi32_i32$1 = i64toi32_i32$2;
       i64toi32_i32$5 = $1001$hi;
       i64toi32_i32$3 = $1001;
       i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $1002$hi = i64toi32_i32$2;
       i64toi32_i32$1 = $8;
       i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
       $1004$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $21$hi;
       i64toi32_i32$2 = $1004$hi;
       i64toi32_i32$1 = $21$hi;
       i64toi32_i32$1 = __wasm_i64_mul($8 | 0, i64toi32_i32$2 | 0, $21 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $1006 = i64toi32_i32$1;
       $1006$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $1002$hi;
       i64toi32_i32$4 = i64toi32_i32$0;
       i64toi32_i32$1 = $1006$hi;
       i64toi32_i32$3 = $1006;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $1007$hi = i64toi32_i32$0;
       i64toi32_i32$4 = $3;
       i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
       $1009$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $20$hi;
       i64toi32_i32$0 = $1009$hi;
       i64toi32_i32$4 = $20$hi;
       i64toi32_i32$4 = __wasm_i64_mul($3 | 0, i64toi32_i32$0 | 0, $20 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $1011 = i64toi32_i32$4;
       $1011$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $1007$hi;
       i64toi32_i32$2 = i64toi32_i32$5;
       i64toi32_i32$4 = $1011$hi;
       i64toi32_i32$3 = $1011;
       i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $1012$hi = i64toi32_i32$5;
       i64toi32_i32$2 = $6;
       i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
       $1014$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $18$hi;
       i64toi32_i32$5 = $1014$hi;
       i64toi32_i32$2 = $18$hi;
       i64toi32_i32$2 = __wasm_i64_mul($6 | 0, i64toi32_i32$5 | 0, $18 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $1016 = i64toi32_i32$2;
       $1016$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $1012$hi;
       i64toi32_i32$0 = i64toi32_i32$1;
       i64toi32_i32$2 = $1016$hi;
       i64toi32_i32$3 = $1016;
       i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $1017$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $19$hi;
       i64toi32_i32$1 = $1017$hi;
       i64toi32_i32$5 = i64toi32_i32$4;
       i64toi32_i32$0 = $19$hi;
       i64toi32_i32$3 = $19;
       i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
        $563 = i64toi32_i32$1 >> i64toi32_i32$2 | 0;
       } else {
        i64toi32_i32$0 = i64toi32_i32$1 >> i64toi32_i32$2 | 0;
        $563 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$2 | 0) | 0;
       }
       HEAP32[$978 >> 2] = $983 - $563 | 0;
       $13 = $11;
       $2 = $2 + 1 | 0;
       if (($2 | 0) != ($1 | 0)) {
        continue label$36
       }
       break label$1;
      };
     }
     if (($1 | 0) < (1 | 0)) {
      break label$1
     }
     $13 = HEAP32[($0 + -4 | 0) >> 2] | 0;
     $6 = HEAP32[($0 + -8 | 0) >> 2] | 0;
     $3 = HEAP32[($0 + -12 | 0) >> 2] | 0;
     $8 = HEAP32[($0 + -16 | 0) >> 2] | 0;
     $7 = HEAP32[($0 + -20 | 0) >> 2] | 0;
     $10 = HEAP32[($0 + -24 | 0) >> 2] | 0;
     $11 = HEAP32[($0 + -28 | 0) >> 2] | 0;
     $14 = HEAP32[($0 + -32 | 0) >> 2] | 0;
     i64toi32_i32$0 = 0;
     $19 = $4;
     $19$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $2;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
     $18 = i64toi32_i32$0;
     $18$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
     $20 = i64toi32_i32$5;
     $20$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
     i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
     $21 = i64toi32_i32$0;
     $21$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
     $22 = i64toi32_i32$5;
     $22$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
     i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
     $23 = i64toi32_i32$0;
     $23$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
     $24 = i64toi32_i32$5;
     $24$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
     i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
     $25 = i64toi32_i32$0;
     $25$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
     $26 = i64toi32_i32$5;
     $26$hi = i64toi32_i32$0;
     $2 = 0;
     label$37 : while (1) {
      $12 = $11;
      $11 = $10;
      $10 = $7;
      $7 = $8;
      $8 = $3;
      $3 = $6;
      $6 = $13;
      $13 = $2 << 2 | 0;
      $1083 = $5 + $13 | 0;
      $13 = HEAP32[($0 + $13 | 0) >> 2] | 0;
      $1088 = $13;
      i64toi32_i32$5 = $12;
      i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
      $1090$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $25$hi;
      i64toi32_i32$0 = $1090$hi;
      i64toi32_i32$5 = $25$hi;
      i64toi32_i32$5 = __wasm_i64_mul($12 | 0, i64toi32_i32$0 | 0, $25 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $1092 = i64toi32_i32$5;
      $1092$hi = i64toi32_i32$0;
      i64toi32_i32$5 = $14;
      i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
      $1094$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $26$hi;
      i64toi32_i32$0 = $1094$hi;
      i64toi32_i32$5 = $26$hi;
      i64toi32_i32$5 = __wasm_i64_mul($14 | 0, i64toi32_i32$0 | 0, $26 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $1096 = i64toi32_i32$5;
      $1096$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1092$hi;
      i64toi32_i32$1 = $1092;
      i64toi32_i32$5 = $1096$hi;
      i64toi32_i32$3 = $1096;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $1097$hi = i64toi32_i32$4;
      i64toi32_i32$1 = $11;
      i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
      $1099$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $24$hi;
      i64toi32_i32$4 = $1099$hi;
      i64toi32_i32$1 = $24$hi;
      i64toi32_i32$1 = __wasm_i64_mul($11 | 0, i64toi32_i32$4 | 0, $24 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $1101 = i64toi32_i32$1;
      $1101$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1097$hi;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$1 = $1101$hi;
      i64toi32_i32$3 = $1101;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $1102$hi = i64toi32_i32$2;
      i64toi32_i32$0 = $10;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $1104$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $23$hi;
      i64toi32_i32$2 = $1104$hi;
      i64toi32_i32$0 = $23$hi;
      i64toi32_i32$0 = __wasm_i64_mul($10 | 0, i64toi32_i32$2 | 0, $23 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $1106 = i64toi32_i32$0;
      $1106$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1102$hi;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$0 = $1106$hi;
      i64toi32_i32$3 = $1106;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $1107$hi = i64toi32_i32$5;
      i64toi32_i32$4 = $7;
      i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
      $1109$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $22$hi;
      i64toi32_i32$5 = $1109$hi;
      i64toi32_i32$4 = $22$hi;
      i64toi32_i32$4 = __wasm_i64_mul($7 | 0, i64toi32_i32$5 | 0, $22 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $1111 = i64toi32_i32$4;
      $1111$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $1107$hi;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$4 = $1111$hi;
      i64toi32_i32$3 = $1111;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $1112$hi = i64toi32_i32$1;
      i64toi32_i32$2 = $8;
      i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
      $1114$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$1 = $1114$hi;
      i64toi32_i32$2 = $21$hi;
      i64toi32_i32$2 = __wasm_i64_mul($8 | 0, i64toi32_i32$1 | 0, $21 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $1116 = i64toi32_i32$2;
      $1116$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1112$hi;
      i64toi32_i32$5 = i64toi32_i32$0;
      i64toi32_i32$2 = $1116$hi;
      i64toi32_i32$3 = $1116;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $1117$hi = i64toi32_i32$0;
      i64toi32_i32$5 = $3;
      i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
      $1119$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $20$hi;
      i64toi32_i32$0 = $1119$hi;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$5 = __wasm_i64_mul($3 | 0, i64toi32_i32$0 | 0, $20 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $1121 = i64toi32_i32$5;
      $1121$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1117$hi;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$5 = $1121$hi;
      i64toi32_i32$3 = $1121;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $1122$hi = i64toi32_i32$4;
      i64toi32_i32$1 = $6;
      i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
      $1124$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$4 = $1124$hi;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$1 = __wasm_i64_mul($6 | 0, i64toi32_i32$4 | 0, $18 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $1126 = i64toi32_i32$1;
      $1126$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1122$hi;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$1 = $1126$hi;
      i64toi32_i32$3 = $1126;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $1127$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$2 = $1127$hi;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$3 = $19;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
       $564 = i64toi32_i32$2 >> i64toi32_i32$1 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$2 >> i64toi32_i32$1 | 0;
       $564 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
      }
      HEAP32[$1083 >> 2] = $1088 - $564 | 0;
      $14 = $12;
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($1 | 0)) {
       continue label$37
      }
      break label$1;
     };
    }
    label$38 : {
     if (($3 | 0) == (6 | 0)) {
      break label$38
     }
     if (($1 | 0) < (1 | 0)) {
      break label$1
     }
     $10 = HEAP32[($0 + -4 | 0) >> 2] | 0;
     $6 = HEAP32[($0 + -8 | 0) >> 2] | 0;
     $3 = HEAP32[($0 + -12 | 0) >> 2] | 0;
     $8 = HEAP32[($0 + -16 | 0) >> 2] | 0;
     $11 = HEAP32[($0 + -20 | 0) >> 2] | 0;
     i64toi32_i32$0 = 0;
     $19 = $4;
     $19$hi = i64toi32_i32$0;
     i64toi32_i32$2 = $2;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
     $18 = i64toi32_i32$0;
     $18$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
     $20 = i64toi32_i32$4;
     $20$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
     i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
     $21 = i64toi32_i32$0;
     $21$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
     $22 = i64toi32_i32$4;
     $22$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
     i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
     $23 = i64toi32_i32$0;
     $23$hi = i64toi32_i32$4;
     $2 = 0;
     label$39 : while (1) {
      $7 = $8;
      $8 = $3;
      $3 = $6;
      $6 = $10;
      $10 = $2 << 2 | 0;
      $1177 = $5 + $10 | 0;
      $10 = HEAP32[($0 + $10 | 0) >> 2] | 0;
      $1182 = $10;
      i64toi32_i32$0 = $7;
      i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
      $1184$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $22$hi;
      i64toi32_i32$4 = $1184$hi;
      i64toi32_i32$0 = $22$hi;
      i64toi32_i32$0 = __wasm_i64_mul($7 | 0, i64toi32_i32$4 | 0, $22 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $1186 = i64toi32_i32$0;
      $1186$hi = i64toi32_i32$4;
      i64toi32_i32$0 = $11;
      i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
      $1188$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $23$hi;
      i64toi32_i32$4 = $1188$hi;
      i64toi32_i32$0 = $23$hi;
      i64toi32_i32$0 = __wasm_i64_mul($11 | 0, i64toi32_i32$4 | 0, $23 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $1190 = i64toi32_i32$0;
      $1190$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1186$hi;
      i64toi32_i32$2 = $1186;
      i64toi32_i32$0 = $1190$hi;
      i64toi32_i32$3 = $1190;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $1191$hi = i64toi32_i32$5;
      i64toi32_i32$2 = $8;
      i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
      $1193$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $21$hi;
      i64toi32_i32$5 = $1193$hi;
      i64toi32_i32$2 = $21$hi;
      i64toi32_i32$2 = __wasm_i64_mul($8 | 0, i64toi32_i32$5 | 0, $21 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $1195 = i64toi32_i32$2;
      $1195$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $1191$hi;
      i64toi32_i32$4 = i64toi32_i32$1;
      i64toi32_i32$2 = $1195$hi;
      i64toi32_i32$3 = $1195;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $1196$hi = i64toi32_i32$1;
      i64toi32_i32$4 = $3;
      i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
      $1198$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $20$hi;
      i64toi32_i32$1 = $1198$hi;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$4 = __wasm_i64_mul($3 | 0, i64toi32_i32$1 | 0, $20 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $1200 = i64toi32_i32$4;
      $1200$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1196$hi;
      i64toi32_i32$5 = i64toi32_i32$0;
      i64toi32_i32$4 = $1200$hi;
      i64toi32_i32$3 = $1200;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $1201$hi = i64toi32_i32$0;
      i64toi32_i32$5 = $6;
      i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
      $1203$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = $1203$hi;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = __wasm_i64_mul($6 | 0, i64toi32_i32$0 | 0, $18 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $1205 = i64toi32_i32$5;
      $1205$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1201$hi;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$5 = $1205$hi;
      i64toi32_i32$3 = $1205;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $1206$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$2 = $1206$hi;
      i64toi32_i32$0 = i64toi32_i32$4;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$3 = $19;
      i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
       $565 = i64toi32_i32$2 >> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >> i64toi32_i32$5 | 0;
       $565 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$5 | 0) | 0;
      }
      HEAP32[$1177 >> 2] = $1182 - $565 | 0;
      $11 = $7;
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($1 | 0)) {
       continue label$39
      }
      break label$1;
     };
    }
    if (($1 | 0) < (1 | 0)) {
     break label$1
    }
    $11 = HEAP32[($0 + -4 | 0) >> 2] | 0;
    $6 = HEAP32[($0 + -8 | 0) >> 2] | 0;
    $3 = HEAP32[($0 + -12 | 0) >> 2] | 0;
    $8 = HEAP32[($0 + -16 | 0) >> 2] | 0;
    $7 = HEAP32[($0 + -20 | 0) >> 2] | 0;
    $12 = HEAP32[($0 + -24 | 0) >> 2] | 0;
    i64toi32_i32$1 = 0;
    $19 = $4;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $2;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $18 = i64toi32_i32$1;
    $18$hi = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $20 = i64toi32_i32$0;
    $20$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $21 = i64toi32_i32$1;
    $21$hi = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $22 = i64toi32_i32$0;
    $22$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $23 = i64toi32_i32$1;
    $23$hi = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $24 = i64toi32_i32$0;
    $24$hi = i64toi32_i32$1;
    $2 = 0;
    label$40 : while (1) {
     $10 = $7;
     $7 = $8;
     $8 = $3;
     $3 = $6;
     $6 = $11;
     $11 = $2 << 2 | 0;
     $1260 = $5 + $11 | 0;
     $11 = HEAP32[($0 + $11 | 0) >> 2] | 0;
     $1265 = $11;
     i64toi32_i32$0 = $10;
     i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
     $1267$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $23$hi;
     i64toi32_i32$1 = $1267$hi;
     i64toi32_i32$0 = $23$hi;
     i64toi32_i32$0 = __wasm_i64_mul($10 | 0, i64toi32_i32$1 | 0, $23 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $1269 = i64toi32_i32$0;
     $1269$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $12;
     i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
     $1271$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $24$hi;
     i64toi32_i32$1 = $1271$hi;
     i64toi32_i32$0 = $24$hi;
     i64toi32_i32$0 = __wasm_i64_mul($12 | 0, i64toi32_i32$1 | 0, $24 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $1273 = i64toi32_i32$0;
     $1273$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1269$hi;
     i64toi32_i32$2 = $1269;
     i64toi32_i32$0 = $1273$hi;
     i64toi32_i32$3 = $1273;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $1274$hi = i64toi32_i32$4;
     i64toi32_i32$2 = $7;
     i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
     $1276$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $22$hi;
     i64toi32_i32$4 = $1276$hi;
     i64toi32_i32$2 = $22$hi;
     i64toi32_i32$2 = __wasm_i64_mul($7 | 0, i64toi32_i32$4 | 0, $22 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $1278 = i64toi32_i32$2;
     $1278$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1274$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$2 = $1278$hi;
     i64toi32_i32$3 = $1278;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $1279$hi = i64toi32_i32$5;
     i64toi32_i32$1 = $8;
     i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
     $1281$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $21$hi;
     i64toi32_i32$5 = $1281$hi;
     i64toi32_i32$1 = $21$hi;
     i64toi32_i32$1 = __wasm_i64_mul($8 | 0, i64toi32_i32$5 | 0, $21 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $1283 = i64toi32_i32$1;
     $1283$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $1279$hi;
     i64toi32_i32$4 = i64toi32_i32$0;
     i64toi32_i32$1 = $1283$hi;
     i64toi32_i32$3 = $1283;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $1284$hi = i64toi32_i32$0;
     i64toi32_i32$4 = $3;
     i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
     $1286$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $20$hi;
     i64toi32_i32$0 = $1286$hi;
     i64toi32_i32$4 = $20$hi;
     i64toi32_i32$4 = __wasm_i64_mul($3 | 0, i64toi32_i32$0 | 0, $20 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $1288 = i64toi32_i32$4;
     $1288$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1284$hi;
     i64toi32_i32$5 = i64toi32_i32$2;
     i64toi32_i32$4 = $1288$hi;
     i64toi32_i32$3 = $1288;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $1289$hi = i64toi32_i32$2;
     i64toi32_i32$5 = $6;
     i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
     $1291$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$2 = $1291$hi;
     i64toi32_i32$5 = $18$hi;
     i64toi32_i32$5 = __wasm_i64_mul($6 | 0, i64toi32_i32$2 | 0, $18 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $1293 = i64toi32_i32$5;
     $1293$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1289$hi;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$5 = $1293$hi;
     i64toi32_i32$3 = $1293;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $1294$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $19$hi;
     i64toi32_i32$1 = $1294$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$0 = $19$hi;
     i64toi32_i32$3 = $19;
     i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $566 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
      $566 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
     }
     HEAP32[$1260 >> 2] = $1265 - $566 | 0;
     $12 = $10;
     $2 = $2 + 1 | 0;
     if (($2 | 0) != ($1 | 0)) {
      continue label$40
     }
     break label$1;
    };
   }
   label$41 : {
    if ($3 >>> 0 < 3 >>> 0) {
     break label$41
    }
    label$42 : {
     if (($3 | 0) == (4 | 0)) {
      break label$42
     }
     if (($1 | 0) < (1 | 0)) {
      break label$1
     }
     $8 = HEAP32[($0 + -4 | 0) >> 2] | 0;
     $6 = HEAP32[($0 + -8 | 0) >> 2] | 0;
     $7 = HEAP32[($0 + -12 | 0) >> 2] | 0;
     i64toi32_i32$0 = 0;
     $19 = $4;
     $19$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $2;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
     $18 = i64toi32_i32$0;
     $18$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
     $20 = i64toi32_i32$2;
     $20$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
     $21 = i64toi32_i32$0;
     $21$hi = i64toi32_i32$2;
     $2 = 0;
     label$43 : while (1) {
      $3 = $6;
      $6 = $8;
      $8 = $2 << 2 | 0;
      $1334 = $5 + $8 | 0;
      $8 = HEAP32[($0 + $8 | 0) >> 2] | 0;
      $1339 = $8;
      i64toi32_i32$0 = $3;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $1341$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $20$hi;
      i64toi32_i32$2 = $1341$hi;
      i64toi32_i32$0 = $20$hi;
      i64toi32_i32$0 = __wasm_i64_mul($3 | 0, i64toi32_i32$2 | 0, $20 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $1343 = i64toi32_i32$0;
      $1343$hi = i64toi32_i32$2;
      i64toi32_i32$0 = $7;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $1345$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $21$hi;
      i64toi32_i32$2 = $1345$hi;
      i64toi32_i32$0 = $21$hi;
      i64toi32_i32$0 = __wasm_i64_mul($7 | 0, i64toi32_i32$2 | 0, $21 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $1347 = i64toi32_i32$0;
      $1347$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1343$hi;
      i64toi32_i32$1 = $1343;
      i64toi32_i32$0 = $1347$hi;
      i64toi32_i32$3 = $1347;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $1348$hi = i64toi32_i32$4;
      i64toi32_i32$1 = $6;
      i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
      $1350$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$4 = $1350$hi;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$1 = __wasm_i64_mul($6 | 0, i64toi32_i32$4 | 0, $18 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $1352 = i64toi32_i32$1;
      $1352$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1348$hi;
      i64toi32_i32$2 = i64toi32_i32$5;
      i64toi32_i32$1 = $1352$hi;
      i64toi32_i32$3 = $1352;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $1353$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$5 = $1353$hi;
      i64toi32_i32$4 = i64toi32_i32$0;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$3 = $19;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
       $567 = i64toi32_i32$5 >> i64toi32_i32$1 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$5 >> i64toi32_i32$1 | 0;
       $567 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
      }
      HEAP32[$1334 >> 2] = $1339 - $567 | 0;
      $7 = $3;
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($1 | 0)) {
       continue label$43
      }
      break label$1;
     };
    }
    if (($1 | 0) < (1 | 0)) {
     break label$1
    }
    $7 = HEAP32[($0 + -4 | 0) >> 2] | 0;
    $6 = HEAP32[($0 + -8 | 0) >> 2] | 0;
    $3 = HEAP32[($0 + -12 | 0) >> 2] | 0;
    $10 = HEAP32[($0 + -16 | 0) >> 2] | 0;
    i64toi32_i32$2 = 0;
    $19 = $4;
    $19$hi = i64toi32_i32$2;
    i64toi32_i32$5 = $2;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
    $18 = i64toi32_i32$2;
    $18$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
    $20 = i64toi32_i32$4;
    $20$hi = i64toi32_i32$2;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] | 0;
    i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
    $21 = i64toi32_i32$2;
    $21$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] | 0;
    i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
    $22 = i64toi32_i32$4;
    $22$hi = i64toi32_i32$2;
    $2 = 0;
    label$44 : while (1) {
     $8 = $3;
     $3 = $6;
     $6 = $7;
     $7 = $2 << 2 | 0;
     $1395 = $5 + $7 | 0;
     $7 = HEAP32[($0 + $7 | 0) >> 2] | 0;
     $1400 = $7;
     i64toi32_i32$4 = $8;
     i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
     $1402$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$2 = $1402$hi;
     i64toi32_i32$4 = $21$hi;
     i64toi32_i32$4 = __wasm_i64_mul($8 | 0, i64toi32_i32$2 | 0, $21 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $1404 = i64toi32_i32$4;
     $1404$hi = i64toi32_i32$2;
     i64toi32_i32$4 = $10;
     i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
     $1406$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $22$hi;
     i64toi32_i32$2 = $1406$hi;
     i64toi32_i32$4 = $22$hi;
     i64toi32_i32$4 = __wasm_i64_mul($10 | 0, i64toi32_i32$2 | 0, $22 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $1408 = i64toi32_i32$4;
     $1408$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1404$hi;
     i64toi32_i32$5 = $1404;
     i64toi32_i32$4 = $1408$hi;
     i64toi32_i32$3 = $1408;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $1409$hi = i64toi32_i32$0;
     i64toi32_i32$5 = $3;
     i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
     $1411$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $20$hi;
     i64toi32_i32$0 = $1411$hi;
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$5 = __wasm_i64_mul($3 | 0, i64toi32_i32$0 | 0, $20 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $1413 = i64toi32_i32$5;
     $1413$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1409$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$5 = $1413$hi;
     i64toi32_i32$3 = $1413;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $1414$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $6;
     i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
     $1416$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$1 = $1416$hi;
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$2 = __wasm_i64_mul($6 | 0, i64toi32_i32$1 | 0, $18 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $1418 = i64toi32_i32$2;
     $1418$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1414$hi;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$2 = $1418$hi;
     i64toi32_i32$3 = $1418;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $1419$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $19$hi;
     i64toi32_i32$4 = $1419$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$0 = $19$hi;
     i64toi32_i32$3 = $19;
     i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
      $568 = i64toi32_i32$4 >> i64toi32_i32$2 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$4 >> i64toi32_i32$2 | 0;
      $568 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
     }
     HEAP32[$1395 >> 2] = $1400 - $568 | 0;
     $10 = $8;
     $2 = $2 + 1 | 0;
     if (($2 | 0) != ($1 | 0)) {
      continue label$44
     }
     break label$1;
    };
   }
   label$45 : {
    if (($3 | 0) == (2 | 0)) {
     break label$45
    }
    if (($1 | 0) < (1 | 0)) {
     break label$1
    }
    $6 = HEAP32[($0 + -4 | 0) >> 2] | 0;
    i64toi32_i32$0 = 0;
    $19 = $4;
    $19$hi = i64toi32_i32$0;
    i64toi32_i32$4 = $2;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $18 = i64toi32_i32$0;
    $18$hi = i64toi32_i32$1;
    $2 = 0;
    label$46 : while (1) {
     $3 = $2 << 2 | 0;
     $1445 = $5 + $3 | 0;
     $3 = HEAP32[($0 + $3 | 0) >> 2] | 0;
     $1450 = $3;
     i64toi32_i32$0 = $6;
     i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
     $1452$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$1 = $1452$hi;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$0 = __wasm_i64_mul($6 | 0, i64toi32_i32$1 | 0, $18 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $1454$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $19$hi;
     i64toi32_i32$1 = $1454$hi;
     i64toi32_i32$4 = i64toi32_i32$0;
     i64toi32_i32$0 = $19$hi;
     i64toi32_i32$3 = $19;
     i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $569 = i64toi32_i32$1 >> i64toi32_i32$2 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$1 >> i64toi32_i32$2 | 0;
      $569 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
     }
     HEAP32[$1445 >> 2] = $1450 - $569 | 0;
     $6 = $3;
     $2 = $2 + 1 | 0;
     if (($2 | 0) != ($1 | 0)) {
      continue label$46
     }
     break label$1;
    };
   }
   if (($1 | 0) < (1 | 0)) {
    break label$1
   }
   $3 = HEAP32[($0 + -4 | 0) >> 2] | 0;
   $8 = HEAP32[($0 + -8 | 0) >> 2] | 0;
   i64toi32_i32$0 = 0;
   $19 = $4;
   $19$hi = i64toi32_i32$0;
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
   $18 = i64toi32_i32$0;
   $18$hi = i64toi32_i32$4;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
   $20 = i64toi32_i32$4;
   $20$hi = i64toi32_i32$0;
   $2 = 0;
   label$47 : while (1) {
    $6 = $3;
    $3 = $2 << 2 | 0;
    $1484 = $5 + $3 | 0;
    $3 = HEAP32[($0 + $3 | 0) >> 2] | 0;
    $1489 = $3;
    i64toi32_i32$4 = $6;
    i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
    $1491$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $18$hi;
    i64toi32_i32$0 = $1491$hi;
    i64toi32_i32$4 = $18$hi;
    i64toi32_i32$4 = __wasm_i64_mul($6 | 0, i64toi32_i32$0 | 0, $18 | 0, i64toi32_i32$4 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $1493 = i64toi32_i32$4;
    $1493$hi = i64toi32_i32$0;
    i64toi32_i32$4 = $8;
    i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
    $1495$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $20$hi;
    i64toi32_i32$0 = $1495$hi;
    i64toi32_i32$4 = $20$hi;
    i64toi32_i32$4 = __wasm_i64_mul($8 | 0, i64toi32_i32$0 | 0, $20 | 0, i64toi32_i32$4 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $1497 = i64toi32_i32$4;
    $1497$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1493$hi;
    i64toi32_i32$1 = $1493;
    i64toi32_i32$4 = $1497$hi;
    i64toi32_i32$3 = $1497;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $1498$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$5 = $1498$hi;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$3 = $19;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
     $570 = i64toi32_i32$5 >> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$5 >> i64toi32_i32$4 | 0;
     $570 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    HEAP32[$1484 >> 2] = $1489 - $570 | 0;
    $8 = $6;
    $2 = $2 + 1 | 0;
    if (($2 | 0) != ($1 | 0)) {
     continue label$47
    }
    break label$47;
   };
  }
 }
 
 function FLAC__lpc_restore_signal($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $26 = 0, $25 = 0, $24 = 0, $23 = 0, $22 = 0, $21 = 0, $20 = 0, $19 = 0, $18 = 0, $17 = 0, $16 = 0, $15 = 0, $13 = 0, $14 = 0, $11 = 0, $12 = 0, $9 = 0, $10 = 0, $7 = 0, $8 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
  label$1 : {
   label$2 : {
    if ($3 >>> 0 < 13 >>> 0) {
     break label$2
    }
    if (($1 | 0) < (1 | 0)) {
     break label$1
    }
    $6 = 0;
    $7 = $3 + -13 | 0;
    $8 = $7 >>> 0 > 19 >>> 0;
    label$3 : while (1) {
     $3 = 0;
     label$4 : {
      if ($8) {
       break label$4
      }
      $9 = 0;
      $10 = 0;
      $11 = 0;
      $12 = 0;
      $13 = 0;
      $14 = 0;
      $15 = 0;
      $16 = 0;
      $17 = 0;
      $18 = 0;
      $19 = 0;
      $20 = 0;
      $21 = 0;
      $22 = 0;
      $23 = 0;
      $24 = 0;
      $25 = 0;
      $3 = 0;
      $26 = 0;
      label$5 : {
       switch ($7 | 0) {
       case 19:
        $9 = Math_imul(HEAP32[((($6 << 2 | 0) + $5 | 0) + -128 | 0) >> 2] | 0, HEAP32[($2 + 124 | 0) >> 2] | 0);
       case 18:
        $10 = Math_imul(HEAP32[((($6 << 2 | 0) + $5 | 0) + -124 | 0) >> 2] | 0, HEAP32[($2 + 120 | 0) >> 2] | 0) + $9 | 0;
       case 17:
        $11 = Math_imul(HEAP32[((($6 << 2 | 0) + $5 | 0) + -120 | 0) >> 2] | 0, HEAP32[($2 + 116 | 0) >> 2] | 0) + $10 | 0;
       case 16:
        $12 = Math_imul(HEAP32[((($6 << 2 | 0) + $5 | 0) + -116 | 0) >> 2] | 0, HEAP32[($2 + 112 | 0) >> 2] | 0) + $11 | 0;
       case 15:
        $13 = Math_imul(HEAP32[((($6 << 2 | 0) + $5 | 0) + -112 | 0) >> 2] | 0, HEAP32[($2 + 108 | 0) >> 2] | 0) + $12 | 0;
       case 14:
        $14 = Math_imul(HEAP32[((($6 << 2 | 0) + $5 | 0) + -108 | 0) >> 2] | 0, HEAP32[($2 + 104 | 0) >> 2] | 0) + $13 | 0;
       case 13:
        $15 = Math_imul(HEAP32[((($6 << 2 | 0) + $5 | 0) + -104 | 0) >> 2] | 0, HEAP32[($2 + 100 | 0) >> 2] | 0) + $14 | 0;
       case 12:
        $16 = Math_imul(HEAP32[((($6 << 2 | 0) + $5 | 0) + -100 | 0) >> 2] | 0, HEAP32[($2 + 96 | 0) >> 2] | 0) + $15 | 0;
       case 11:
        $17 = Math_imul(HEAP32[((($6 << 2 | 0) + $5 | 0) + -96 | 0) >> 2] | 0, HEAP32[($2 + 92 | 0) >> 2] | 0) + $16 | 0;
       case 10:
        $18 = Math_imul(HEAP32[((($6 << 2 | 0) + $5 | 0) + -92 | 0) >> 2] | 0, HEAP32[($2 + 88 | 0) >> 2] | 0) + $17 | 0;
       case 9:
        $19 = Math_imul(HEAP32[((($6 << 2 | 0) + $5 | 0) + -88 | 0) >> 2] | 0, HEAP32[($2 + 84 | 0) >> 2] | 0) + $18 | 0;
       case 8:
        $20 = Math_imul(HEAP32[((($6 << 2 | 0) + $5 | 0) + -84 | 0) >> 2] | 0, HEAP32[($2 + 80 | 0) >> 2] | 0) + $19 | 0;
       case 7:
        $21 = Math_imul(HEAP32[((($6 << 2 | 0) + $5 | 0) + -80 | 0) >> 2] | 0, HEAP32[($2 + 76 | 0) >> 2] | 0) + $20 | 0;
       case 6:
        $22 = Math_imul(HEAP32[((($6 << 2 | 0) + $5 | 0) + -76 | 0) >> 2] | 0, HEAP32[($2 + 72 | 0) >> 2] | 0) + $21 | 0;
       case 5:
        $23 = Math_imul(HEAP32[((($6 << 2 | 0) + $5 | 0) + -72 | 0) >> 2] | 0, HEAP32[($2 + 68 | 0) >> 2] | 0) + $22 | 0;
       case 4:
        $24 = Math_imul(HEAP32[((($6 << 2 | 0) + $5 | 0) + -68 | 0) >> 2] | 0, HEAP32[($2 + 64 | 0) >> 2] | 0) + $23 | 0;
       case 3:
        $25 = Math_imul(HEAP32[((($6 << 2 | 0) + $5 | 0) + -64 | 0) >> 2] | 0, HEAP32[($2 + 60 | 0) >> 2] | 0) + $24 | 0;
       case 2:
        $3 = Math_imul(HEAP32[((($6 << 2 | 0) + $5 | 0) + -60 | 0) >> 2] | 0, HEAP32[($2 + 56 | 0) >> 2] | 0) + $25 | 0;
       case 1:
        $26 = Math_imul(HEAP32[((($6 << 2 | 0) + $5 | 0) + -56 | 0) >> 2] | 0, HEAP32[($2 + 52 | 0) >> 2] | 0) + $3 | 0;
        break;
       default:
        break label$5;
       };
      }
      $3 = ($6 << 2 | 0) + $5 | 0;
      $3 = ((((((((((((Math_imul(HEAP32[($3 + -52 | 0) >> 2] | 0, HEAP32[($2 + 48 | 0) >> 2] | 0) + $26 | 0) + Math_imul(HEAP32[($3 + -48 | 0) >> 2] | 0, HEAP32[($2 + 44 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($3 + -44 | 0) >> 2] | 0, HEAP32[($2 + 40 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($3 + -40 | 0) >> 2] | 0, HEAP32[($2 + 36 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($3 + -36 | 0) >> 2] | 0, HEAP32[($2 + 32 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($3 + -32 | 0) >> 2] | 0, HEAP32[($2 + 28 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($3 + -28 | 0) >> 2] | 0, HEAP32[($2 + 24 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($3 + -24 | 0) >> 2] | 0, HEAP32[($2 + 20 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($3 + -20 | 0) >> 2] | 0, HEAP32[($2 + 16 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($3 + -16 | 0) >> 2] | 0, HEAP32[($2 + 12 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($3 + -12 | 0) >> 2] | 0, HEAP32[($2 + 8 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($3 + -8 | 0) >> 2] | 0, HEAP32[($2 + 4 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($3 + -4 | 0) >> 2] | 0, HEAP32[$2 >> 2] | 0) | 0;
     }
     $26 = $6 << 2 | 0;
     HEAP32[($5 + $26 | 0) >> 2] = (HEAP32[($0 + $26 | 0) >> 2] | 0) + ($3 >> $4 | 0) | 0;
     $6 = $6 + 1 | 0;
     if (($6 | 0) != ($1 | 0)) {
      continue label$3
     }
     break label$1;
    };
   }
   label$25 : {
    if ($3 >>> 0 < 9 >>> 0) {
     break label$25
    }
    label$26 : {
     if ($3 >>> 0 < 11 >>> 0) {
      break label$26
     }
     label$27 : {
      if (($3 | 0) == (12 | 0)) {
       break label$27
      }
      if (($1 | 0) < (1 | 0)) {
       break label$1
      }
      $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
      $3 = HEAP32[($5 + -8 | 0) >> 2] | 0;
      $26 = HEAP32[($5 + -12 | 0) >> 2] | 0;
      $25 = HEAP32[($5 + -16 | 0) >> 2] | 0;
      $24 = HEAP32[($5 + -20 | 0) >> 2] | 0;
      $23 = HEAP32[($5 + -24 | 0) >> 2] | 0;
      $22 = HEAP32[($5 + -28 | 0) >> 2] | 0;
      $21 = HEAP32[($5 + -32 | 0) >> 2] | 0;
      $20 = HEAP32[($5 + -36 | 0) >> 2] | 0;
      $19 = HEAP32[($5 + -40 | 0) >> 2] | 0;
      $18 = HEAP32[($5 + -44 | 0) >> 2] | 0;
      $15 = HEAP32[$2 >> 2] | 0;
      $14 = HEAP32[($2 + 4 | 0) >> 2] | 0;
      $13 = HEAP32[($2 + 8 | 0) >> 2] | 0;
      $12 = HEAP32[($2 + 12 | 0) >> 2] | 0;
      $11 = HEAP32[($2 + 16 | 0) >> 2] | 0;
      $10 = HEAP32[($2 + 20 | 0) >> 2] | 0;
      $9 = HEAP32[($2 + 24 | 0) >> 2] | 0;
      $8 = HEAP32[($2 + 28 | 0) >> 2] | 0;
      $7 = HEAP32[($2 + 32 | 0) >> 2] | 0;
      $27 = HEAP32[($2 + 36 | 0) >> 2] | 0;
      $28 = HEAP32[($2 + 40 | 0) >> 2] | 0;
      $2 = 0;
      label$28 : while (1) {
       $17 = $2 << 2 | 0;
       $16 = $19;
       $19 = $20;
       $20 = $21;
       $21 = $22;
       $22 = $23;
       $23 = $24;
       $24 = $25;
       $25 = $26;
       $26 = $3;
       $3 = $6;
       $6 = (((((((((((Math_imul($16, $27) + Math_imul($18, $28) | 0) + Math_imul($19, $7) | 0) + Math_imul($20, $8) | 0) + Math_imul($21, $9) | 0) + Math_imul($22, $10) | 0) + Math_imul($23, $11) | 0) + Math_imul($24, $12) | 0) + Math_imul($25, $13) | 0) + Math_imul($26, $14) | 0) + Math_imul($3, $15) | 0) >> $4 | 0) + (HEAP32[($0 + $17 | 0) >> 2] | 0) | 0;
       HEAP32[($5 + $17 | 0) >> 2] = $6;
       $18 = $16;
       $2 = $2 + 1 | 0;
       if (($2 | 0) != ($1 | 0)) {
        continue label$28
       }
       break label$1;
      };
     }
     if (($1 | 0) < (1 | 0)) {
      break label$1
     }
     $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
     $3 = HEAP32[($5 + -8 | 0) >> 2] | 0;
     $26 = HEAP32[($5 + -12 | 0) >> 2] | 0;
     $25 = HEAP32[($5 + -16 | 0) >> 2] | 0;
     $24 = HEAP32[($5 + -20 | 0) >> 2] | 0;
     $23 = HEAP32[($5 + -24 | 0) >> 2] | 0;
     $22 = HEAP32[($5 + -28 | 0) >> 2] | 0;
     $21 = HEAP32[($5 + -32 | 0) >> 2] | 0;
     $20 = HEAP32[($5 + -36 | 0) >> 2] | 0;
     $19 = HEAP32[($5 + -40 | 0) >> 2] | 0;
     $18 = HEAP32[($5 + -44 | 0) >> 2] | 0;
     $17 = HEAP32[($5 + -48 | 0) >> 2] | 0;
     $14 = HEAP32[$2 >> 2] | 0;
     $13 = HEAP32[($2 + 4 | 0) >> 2] | 0;
     $12 = HEAP32[($2 + 8 | 0) >> 2] | 0;
     $11 = HEAP32[($2 + 12 | 0) >> 2] | 0;
     $10 = HEAP32[($2 + 16 | 0) >> 2] | 0;
     $9 = HEAP32[($2 + 20 | 0) >> 2] | 0;
     $8 = HEAP32[($2 + 24 | 0) >> 2] | 0;
     $7 = HEAP32[($2 + 28 | 0) >> 2] | 0;
     $27 = HEAP32[($2 + 32 | 0) >> 2] | 0;
     $28 = HEAP32[($2 + 36 | 0) >> 2] | 0;
     $29 = HEAP32[($2 + 40 | 0) >> 2] | 0;
     $30 = HEAP32[($2 + 44 | 0) >> 2] | 0;
     $2 = 0;
     label$29 : while (1) {
      $16 = $2 << 2 | 0;
      $15 = $18;
      $18 = $19;
      $19 = $20;
      $20 = $21;
      $21 = $22;
      $22 = $23;
      $23 = $24;
      $24 = $25;
      $25 = $26;
      $26 = $3;
      $3 = $6;
      $6 = ((((((((((((Math_imul($15, $29) + Math_imul($17, $30) | 0) + Math_imul($18, $28) | 0) + Math_imul($19, $27) | 0) + Math_imul($20, $7) | 0) + Math_imul($21, $8) | 0) + Math_imul($22, $9) | 0) + Math_imul($23, $10) | 0) + Math_imul($24, $11) | 0) + Math_imul($25, $12) | 0) + Math_imul($26, $13) | 0) + Math_imul($3, $14) | 0) >> $4 | 0) + (HEAP32[($0 + $16 | 0) >> 2] | 0) | 0;
      HEAP32[($5 + $16 | 0) >> 2] = $6;
      $17 = $15;
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($1 | 0)) {
       continue label$29
      }
      break label$1;
     };
    }
    label$30 : {
     if (($3 | 0) == (10 | 0)) {
      break label$30
     }
     if (($1 | 0) < (1 | 0)) {
      break label$1
     }
     $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
     $3 = HEAP32[($5 + -8 | 0) >> 2] | 0;
     $26 = HEAP32[($5 + -12 | 0) >> 2] | 0;
     $25 = HEAP32[($5 + -16 | 0) >> 2] | 0;
     $24 = HEAP32[($5 + -20 | 0) >> 2] | 0;
     $23 = HEAP32[($5 + -24 | 0) >> 2] | 0;
     $22 = HEAP32[($5 + -28 | 0) >> 2] | 0;
     $21 = HEAP32[($5 + -32 | 0) >> 2] | 0;
     $20 = HEAP32[($5 + -36 | 0) >> 2] | 0;
     $17 = HEAP32[$2 >> 2] | 0;
     $16 = HEAP32[($2 + 4 | 0) >> 2] | 0;
     $15 = HEAP32[($2 + 8 | 0) >> 2] | 0;
     $14 = HEAP32[($2 + 12 | 0) >> 2] | 0;
     $13 = HEAP32[($2 + 16 | 0) >> 2] | 0;
     $12 = HEAP32[($2 + 20 | 0) >> 2] | 0;
     $11 = HEAP32[($2 + 24 | 0) >> 2] | 0;
     $10 = HEAP32[($2 + 28 | 0) >> 2] | 0;
     $9 = HEAP32[($2 + 32 | 0) >> 2] | 0;
     $2 = 0;
     label$31 : while (1) {
      $19 = $2 << 2 | 0;
      $18 = $21;
      $21 = $22;
      $22 = $23;
      $23 = $24;
      $24 = $25;
      $25 = $26;
      $26 = $3;
      $3 = $6;
      $6 = (((((((((Math_imul($18, $10) + Math_imul($20, $9) | 0) + Math_imul($21, $11) | 0) + Math_imul($22, $12) | 0) + Math_imul($23, $13) | 0) + Math_imul($24, $14) | 0) + Math_imul($25, $15) | 0) + Math_imul($26, $16) | 0) + Math_imul($3, $17) | 0) >> $4 | 0) + (HEAP32[($0 + $19 | 0) >> 2] | 0) | 0;
      HEAP32[($5 + $19 | 0) >> 2] = $6;
      $20 = $18;
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($1 | 0)) {
       continue label$31
      }
      break label$1;
     };
    }
    if (($1 | 0) < (1 | 0)) {
     break label$1
    }
    $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
    $3 = HEAP32[($5 + -8 | 0) >> 2] | 0;
    $26 = HEAP32[($5 + -12 | 0) >> 2] | 0;
    $25 = HEAP32[($5 + -16 | 0) >> 2] | 0;
    $24 = HEAP32[($5 + -20 | 0) >> 2] | 0;
    $23 = HEAP32[($5 + -24 | 0) >> 2] | 0;
    $22 = HEAP32[($5 + -28 | 0) >> 2] | 0;
    $21 = HEAP32[($5 + -32 | 0) >> 2] | 0;
    $20 = HEAP32[($5 + -36 | 0) >> 2] | 0;
    $19 = HEAP32[($5 + -40 | 0) >> 2] | 0;
    $16 = HEAP32[$2 >> 2] | 0;
    $15 = HEAP32[($2 + 4 | 0) >> 2] | 0;
    $14 = HEAP32[($2 + 8 | 0) >> 2] | 0;
    $13 = HEAP32[($2 + 12 | 0) >> 2] | 0;
    $12 = HEAP32[($2 + 16 | 0) >> 2] | 0;
    $11 = HEAP32[($2 + 20 | 0) >> 2] | 0;
    $10 = HEAP32[($2 + 24 | 0) >> 2] | 0;
    $9 = HEAP32[($2 + 28 | 0) >> 2] | 0;
    $8 = HEAP32[($2 + 32 | 0) >> 2] | 0;
    $7 = HEAP32[($2 + 36 | 0) >> 2] | 0;
    $2 = 0;
    label$32 : while (1) {
     $18 = $2 << 2 | 0;
     $17 = $20;
     $20 = $21;
     $21 = $22;
     $22 = $23;
     $23 = $24;
     $24 = $25;
     $25 = $26;
     $26 = $3;
     $3 = $6;
     $6 = ((((((((((Math_imul($17, $8) + Math_imul($19, $7) | 0) + Math_imul($20, $9) | 0) + Math_imul($21, $10) | 0) + Math_imul($22, $11) | 0) + Math_imul($23, $12) | 0) + Math_imul($24, $13) | 0) + Math_imul($25, $14) | 0) + Math_imul($26, $15) | 0) + Math_imul($3, $16) | 0) >> $4 | 0) + (HEAP32[($0 + $18 | 0) >> 2] | 0) | 0;
     HEAP32[($5 + $18 | 0) >> 2] = $6;
     $19 = $17;
     $2 = $2 + 1 | 0;
     if (($2 | 0) != ($1 | 0)) {
      continue label$32
     }
     break label$1;
    };
   }
   label$33 : {
    if ($3 >>> 0 < 5 >>> 0) {
     break label$33
    }
    label$34 : {
     if ($3 >>> 0 < 7 >>> 0) {
      break label$34
     }
     label$35 : {
      if (($3 | 0) == (8 | 0)) {
       break label$35
      }
      if (($1 | 0) < (1 | 0)) {
       break label$1
      }
      $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
      $3 = HEAP32[($5 + -8 | 0) >> 2] | 0;
      $26 = HEAP32[($5 + -12 | 0) >> 2] | 0;
      $25 = HEAP32[($5 + -16 | 0) >> 2] | 0;
      $24 = HEAP32[($5 + -20 | 0) >> 2] | 0;
      $23 = HEAP32[($5 + -24 | 0) >> 2] | 0;
      $22 = HEAP32[($5 + -28 | 0) >> 2] | 0;
      $19 = HEAP32[$2 >> 2] | 0;
      $18 = HEAP32[($2 + 4 | 0) >> 2] | 0;
      $17 = HEAP32[($2 + 8 | 0) >> 2] | 0;
      $16 = HEAP32[($2 + 12 | 0) >> 2] | 0;
      $15 = HEAP32[($2 + 16 | 0) >> 2] | 0;
      $14 = HEAP32[($2 + 20 | 0) >> 2] | 0;
      $13 = HEAP32[($2 + 24 | 0) >> 2] | 0;
      $2 = 0;
      label$36 : while (1) {
       $21 = $2 << 2 | 0;
       $20 = $23;
       $23 = $24;
       $24 = $25;
       $25 = $26;
       $26 = $3;
       $3 = $6;
       $6 = (((((((Math_imul($20, $14) + Math_imul($22, $13) | 0) + Math_imul($23, $15) | 0) + Math_imul($24, $16) | 0) + Math_imul($25, $17) | 0) + Math_imul($26, $18) | 0) + Math_imul($3, $19) | 0) >> $4 | 0) + (HEAP32[($0 + $21 | 0) >> 2] | 0) | 0;
       HEAP32[($5 + $21 | 0) >> 2] = $6;
       $22 = $20;
       $2 = $2 + 1 | 0;
       if (($2 | 0) != ($1 | 0)) {
        continue label$36
       }
       break label$1;
      };
     }
     if (($1 | 0) < (1 | 0)) {
      break label$1
     }
     $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
     $3 = HEAP32[($5 + -8 | 0) >> 2] | 0;
     $26 = HEAP32[($5 + -12 | 0) >> 2] | 0;
     $25 = HEAP32[($5 + -16 | 0) >> 2] | 0;
     $24 = HEAP32[($5 + -20 | 0) >> 2] | 0;
     $23 = HEAP32[($5 + -24 | 0) >> 2] | 0;
     $22 = HEAP32[($5 + -28 | 0) >> 2] | 0;
     $21 = HEAP32[($5 + -32 | 0) >> 2] | 0;
     $18 = HEAP32[$2 >> 2] | 0;
     $17 = HEAP32[($2 + 4 | 0) >> 2] | 0;
     $16 = HEAP32[($2 + 8 | 0) >> 2] | 0;
     $15 = HEAP32[($2 + 12 | 0) >> 2] | 0;
     $14 = HEAP32[($2 + 16 | 0) >> 2] | 0;
     $13 = HEAP32[($2 + 20 | 0) >> 2] | 0;
     $12 = HEAP32[($2 + 24 | 0) >> 2] | 0;
     $11 = HEAP32[($2 + 28 | 0) >> 2] | 0;
     $2 = 0;
     label$37 : while (1) {
      $20 = $2 << 2 | 0;
      $19 = $22;
      $22 = $23;
      $23 = $24;
      $24 = $25;
      $25 = $26;
      $26 = $3;
      $3 = $6;
      $6 = ((((((((Math_imul($19, $12) + Math_imul($21, $11) | 0) + Math_imul($22, $13) | 0) + Math_imul($23, $14) | 0) + Math_imul($24, $15) | 0) + Math_imul($25, $16) | 0) + Math_imul($26, $17) | 0) + Math_imul($3, $18) | 0) >> $4 | 0) + (HEAP32[($0 + $20 | 0) >> 2] | 0) | 0;
      HEAP32[($5 + $20 | 0) >> 2] = $6;
      $21 = $19;
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($1 | 0)) {
       continue label$37
      }
      break label$1;
     };
    }
    label$38 : {
     if (($3 | 0) == (6 | 0)) {
      break label$38
     }
     if (($1 | 0) < (1 | 0)) {
      break label$1
     }
     $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
     $3 = HEAP32[($5 + -8 | 0) >> 2] | 0;
     $26 = HEAP32[($5 + -12 | 0) >> 2] | 0;
     $25 = HEAP32[($5 + -16 | 0) >> 2] | 0;
     $24 = HEAP32[($5 + -20 | 0) >> 2] | 0;
     $21 = HEAP32[$2 >> 2] | 0;
     $20 = HEAP32[($2 + 4 | 0) >> 2] | 0;
     $19 = HEAP32[($2 + 8 | 0) >> 2] | 0;
     $18 = HEAP32[($2 + 12 | 0) >> 2] | 0;
     $17 = HEAP32[($2 + 16 | 0) >> 2] | 0;
     $2 = 0;
     label$39 : while (1) {
      $23 = $2 << 2 | 0;
      $22 = $25;
      $25 = $26;
      $26 = $3;
      $3 = $6;
      $6 = (((((Math_imul($22, $18) + Math_imul($24, $17) | 0) + Math_imul($25, $19) | 0) + Math_imul($26, $20) | 0) + Math_imul($3, $21) | 0) >> $4 | 0) + (HEAP32[($0 + $23 | 0) >> 2] | 0) | 0;
      HEAP32[($5 + $23 | 0) >> 2] = $6;
      $24 = $22;
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($1 | 0)) {
       continue label$39
      }
      break label$1;
     };
    }
    if (($1 | 0) < (1 | 0)) {
     break label$1
    }
    $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
    $3 = HEAP32[($5 + -8 | 0) >> 2] | 0;
    $26 = HEAP32[($5 + -12 | 0) >> 2] | 0;
    $25 = HEAP32[($5 + -16 | 0) >> 2] | 0;
    $24 = HEAP32[($5 + -20 | 0) >> 2] | 0;
    $23 = HEAP32[($5 + -24 | 0) >> 2] | 0;
    $20 = HEAP32[$2 >> 2] | 0;
    $19 = HEAP32[($2 + 4 | 0) >> 2] | 0;
    $18 = HEAP32[($2 + 8 | 0) >> 2] | 0;
    $17 = HEAP32[($2 + 12 | 0) >> 2] | 0;
    $16 = HEAP32[($2 + 16 | 0) >> 2] | 0;
    $15 = HEAP32[($2 + 20 | 0) >> 2] | 0;
    $2 = 0;
    label$40 : while (1) {
     $22 = $2 << 2 | 0;
     $21 = $24;
     $24 = $25;
     $25 = $26;
     $26 = $3;
     $3 = $6;
     $6 = ((((((Math_imul($21, $16) + Math_imul($23, $15) | 0) + Math_imul($24, $17) | 0) + Math_imul($25, $18) | 0) + Math_imul($26, $19) | 0) + Math_imul($3, $20) | 0) >> $4 | 0) + (HEAP32[($0 + $22 | 0) >> 2] | 0) | 0;
     HEAP32[($5 + $22 | 0) >> 2] = $6;
     $23 = $21;
     $2 = $2 + 1 | 0;
     if (($2 | 0) != ($1 | 0)) {
      continue label$40
     }
     break label$1;
    };
   }
   label$41 : {
    if ($3 >>> 0 < 3 >>> 0) {
     break label$41
    }
    label$42 : {
     if (($3 | 0) == (4 | 0)) {
      break label$42
     }
     if (($1 | 0) < (1 | 0)) {
      break label$1
     }
     $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
     $3 = HEAP32[($5 + -8 | 0) >> 2] | 0;
     $26 = HEAP32[($5 + -12 | 0) >> 2] | 0;
     $23 = HEAP32[$2 >> 2] | 0;
     $22 = HEAP32[($2 + 4 | 0) >> 2] | 0;
     $21 = HEAP32[($2 + 8 | 0) >> 2] | 0;
     $2 = 0;
     label$43 : while (1) {
      $25 = $2 << 2 | 0;
      $24 = $3;
      $3 = $6;
      $6 = (((Math_imul($24, $22) + Math_imul($26, $21) | 0) + Math_imul($3, $23) | 0) >> $4 | 0) + (HEAP32[($0 + $25 | 0) >> 2] | 0) | 0;
      HEAP32[($5 + $25 | 0) >> 2] = $6;
      $26 = $24;
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($1 | 0)) {
       continue label$43
      }
      break label$1;
     };
    }
    if (($1 | 0) < (1 | 0)) {
     break label$1
    }
    $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
    $3 = HEAP32[($5 + -8 | 0) >> 2] | 0;
    $26 = HEAP32[($5 + -12 | 0) >> 2] | 0;
    $25 = HEAP32[($5 + -16 | 0) >> 2] | 0;
    $22 = HEAP32[$2 >> 2] | 0;
    $21 = HEAP32[($2 + 4 | 0) >> 2] | 0;
    $20 = HEAP32[($2 + 8 | 0) >> 2] | 0;
    $19 = HEAP32[($2 + 12 | 0) >> 2] | 0;
    $2 = 0;
    label$44 : while (1) {
     $24 = $2 << 2 | 0;
     $23 = $26;
     $26 = $3;
     $3 = $6;
     $6 = ((((Math_imul($23, $20) + Math_imul($25, $19) | 0) + Math_imul($26, $21) | 0) + Math_imul($3, $22) | 0) >> $4 | 0) + (HEAP32[($0 + $24 | 0) >> 2] | 0) | 0;
     HEAP32[($5 + $24 | 0) >> 2] = $6;
     $25 = $23;
     $2 = $2 + 1 | 0;
     if (($2 | 0) != ($1 | 0)) {
      continue label$44
     }
     break label$1;
    };
   }
   label$45 : {
    if (($3 | 0) == (2 | 0)) {
     break label$45
    }
    if (($1 | 0) < (1 | 0)) {
     break label$1
    }
    $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
    $26 = HEAP32[$2 >> 2] | 0;
    $2 = 0;
    label$46 : while (1) {
     $3 = $2 << 2 | 0;
     $6 = (Math_imul($6, $26) >> $4 | 0) + (HEAP32[($0 + $3 | 0) >> 2] | 0) | 0;
     HEAP32[($5 + $3 | 0) >> 2] = $6;
     $2 = $2 + 1 | 0;
     if (($2 | 0) != ($1 | 0)) {
      continue label$46
     }
     break label$1;
    };
   }
   if (($1 | 0) < (1 | 0)) {
    break label$1
   }
   $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
   $3 = HEAP32[($5 + -8 | 0) >> 2] | 0;
   $24 = HEAP32[$2 >> 2] | 0;
   $23 = HEAP32[($2 + 4 | 0) >> 2] | 0;
   $2 = 0;
   label$47 : while (1) {
    $26 = $2 << 2 | 0;
    $25 = $6;
    $6 = ((Math_imul($6, $24) + Math_imul($3, $23) | 0) >> $4 | 0) + (HEAP32[($0 + $26 | 0) >> 2] | 0) | 0;
    HEAP32[($5 + $26 | 0) >> 2] = $6;
    $3 = $25;
    $2 = $2 + 1 | 0;
    if (($2 | 0) != ($1 | 0)) {
     continue label$47
    }
    break label$47;
   };
  }
 }
 
 function FLAC__lpc_restore_signal_wide($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $18$hi = 0, $6 = 0, $7 = 0, $18 = 0, $9 = 0, $17$hi = 0, $10 = 0, $8 = 0, $11 = 0, $19$hi = 0, $20$hi = 0, $12 = 0, $21$hi = 0, $17 = 0, $13 = 0, $22$hi = 0, $19 = 0, $23$hi = 0, $20 = 0, $14 = 0, $21 = 0, $24$hi = 0, $22 = 0, $25$hi = 0, $23 = 0, $15 = 0, $24 = 0, $26$hi = 0, $25 = 0, $27$hi = 0, $16 = 0, $26 = 0, $27 = 0, $28$hi = 0, $28 = 0, $557 = 0, $558 = 0, $29$hi = 0, $559 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $47 = 0, $47$hi = 0, $49 = 0, $49$hi = 0, $56 = 0, $56$hi = 0, $58 = 0, $58$hi = 0, $59$hi = 0, $67 = 0, $67$hi = 0, $69 = 0, $69$hi = 0, $70$hi = 0, $78 = 0, $78$hi = 0, $80 = 0, $80$hi = 0, $81$hi = 0, $89 = 0, $89$hi = 0, $91 = 0, $91$hi = 0, $92$hi = 0, $100 = 0, $100$hi = 0, $102 = 0, $102$hi = 0, $103$hi = 0, $111 = 0, $111$hi = 0, $113 = 0, $113$hi = 0, $114$hi = 0, $122 = 0, $122$hi = 0, $124 = 0, $124$hi = 0, $125$hi = 0, $133 = 0, $133$hi = 0, $135 = 0, $135$hi = 0, $136$hi = 0, $144 = 0, $144$hi = 0, $146 = 0, $146$hi = 0, $147$hi = 0, $155 = 0, $155$hi = 0, $157 = 0, $157$hi = 0, $158$hi = 0, $166 = 0, $166$hi = 0, $168 = 0, $168$hi = 0, $169$hi = 0, $177 = 0, $177$hi = 0, $179 = 0, $179$hi = 0, $180$hi = 0, $188 = 0, $188$hi = 0, $190 = 0, $190$hi = 0, $191$hi = 0, $199 = 0, $199$hi = 0, $201 = 0, $201$hi = 0, $202$hi = 0, $210 = 0, $210$hi = 0, $212 = 0, $212$hi = 0, $213$hi = 0, $221 = 0, $221$hi = 0, $223 = 0, $223$hi = 0, $224$hi = 0, $232 = 0, $232$hi = 0, $234 = 0, $234$hi = 0, $235$hi = 0, $243 = 0, $243$hi = 0, $245 = 0, $245$hi = 0, $246$hi = 0, $255 = 0, $255$hi = 0, $257 = 0, $257$hi = 0, $258$hi = 0, $260$hi = 0, $263 = 0, $263$hi = 0, $265 = 0, $265$hi = 0, $266 = 0, $266$hi = 0, $267$hi = 0, $270 = 0, $270$hi = 0, $272 = 0, $272$hi = 0, $273 = 0, $273$hi = 0, $274$hi = 0, $277 = 0, $277$hi = 0, $279 = 0, $279$hi = 0, $280 = 0, $280$hi = 0, $281$hi = 0, $284 = 0, $284$hi = 0, $286 = 0, $286$hi = 0, $287 = 0, $287$hi = 0, $288$hi = 0, $291 = 0, $291$hi = 0, $293 = 0, $293$hi = 0, $294 = 0, $294$hi = 0, $295$hi = 0, $298 = 0, $298$hi = 0, $300 = 0, $300$hi = 0, $301 = 0, $301$hi = 0, $302$hi = 0, $305 = 0, $305$hi = 0, $307 = 0, $307$hi = 0, $308 = 0, $308$hi = 0, $309$hi = 0, $312 = 0, $312$hi = 0, $314 = 0, $314$hi = 0, $315 = 0, $315$hi = 0, $316$hi = 0, $319 = 0, $319$hi = 0, $321 = 0, $321$hi = 0, $322 = 0, $322$hi = 0, $323$hi = 0, $326 = 0, $326$hi = 0, $328 = 0, $328$hi = 0, $329 = 0, $329$hi = 0, $330$hi = 0, $333 = 0, $333$hi = 0, $335 = 0, $335$hi = 0, $336 = 0, $336$hi = 0, $337$hi = 0, $340 = 0, $340$hi = 0, $342 = 0, $342$hi = 0, $343 = 0, $343$hi = 0, $349 = 0, $353 = 0, $433 = 0, $437 = 0, $440$hi = 0, $442 = 0, $442$hi = 0, $444$hi = 0, $446 = 0, $446$hi = 0, $447$hi = 0, $450$hi = 0, $452 = 0, $452$hi = 0, $453$hi = 0, $456$hi = 0, $458 = 0, $458$hi = 0, $459$hi = 0, $462$hi = 0, $464 = 0, $464$hi = 0, $465$hi = 0, $468$hi = 0, $470 = 0, $470$hi = 0, $471$hi = 0, $474$hi = 0, $476 = 0, $476$hi = 0, $477$hi = 0, $480$hi = 0, $482 = 0, $482$hi = 0, $483$hi = 0, $486$hi = 0, $488 = 0, $488$hi = 0, $489$hi = 0, $492$hi = 0, $494 = 0, $494$hi = 0, $495$hi = 0, $498$hi = 0, $500 = 0, $500$hi = 0, $501$hi = 0, $29 = 0, $581 = 0, $585 = 0, $588$hi = 0, $590 = 0, $590$hi = 0, $592$hi = 0, $594 = 0, $594$hi = 0, $595$hi = 0, $598$hi = 0, $600 = 0, $600$hi = 0, $601$hi = 0, $604$hi = 0, $606 = 0, $606$hi = 0, $607$hi = 0, $610$hi = 0, $612 = 0, $612$hi = 0, $613$hi = 0, $616$hi = 0, $618 = 0, $618$hi = 0, $619$hi = 0, $622$hi = 0, $624 = 0, $624$hi = 0, $625$hi = 0, $628$hi = 0, $630 = 0, $630$hi = 0, $631$hi = 0, $634$hi = 0, $636 = 0, $636$hi = 0, $637$hi = 0, $640$hi = 0, $642 = 0, $642$hi = 0, $643$hi = 0, $646$hi = 0, $648 = 0, $648$hi = 0, $649$hi = 0, $652$hi = 0, $654 = 0, $654$hi = 0, $655$hi = 0, $722 = 0, $726 = 0, $729$hi = 0, $731 = 0, $731$hi = 0, $733$hi = 0, $735 = 0, $735$hi = 0, $736$hi = 0, $739$hi = 0, $741 = 0, $741$hi = 0, $742$hi = 0, $745$hi = 0, $747 = 0, $747$hi = 0, $748$hi = 0, $751$hi = 0, $753 = 0, $753$hi = 0, $754$hi = 0, $757$hi = 0, $759 = 0, $759$hi = 0, $760$hi = 0, $763$hi = 0, $765 = 0, $765$hi = 0, $766$hi = 0, $769$hi = 0, $771 = 0, $771$hi = 0, $772$hi = 0, $775$hi = 0, $777 = 0, $777$hi = 0, $778$hi = 0, $848 = 0, $852 = 0, $855$hi = 0, $857 = 0, $857$hi = 0, $859$hi = 0, $861 = 0, $861$hi = 0, $862$hi = 0, $865$hi = 0, $867 = 0, $867$hi = 0, $868$hi = 0, $871$hi = 0, $873 = 0, $873$hi = 0, $874$hi = 0, $877$hi = 0, $879 = 0, $879$hi = 0, $880$hi = 0, $883$hi = 0, $885 = 0, $885$hi = 0, $886$hi = 0, $889$hi = 0, $891 = 0, $891$hi = 0, $892$hi = 0, $895$hi = 0, $897 = 0, $897$hi = 0, $898$hi = 0, $901$hi = 0, $903 = 0, $903$hi = 0, $904$hi = 0, $907$hi = 0, $909 = 0, $909$hi = 0, $910$hi = 0, $971 = 0, $975 = 0, $978$hi = 0, $980 = 0, $980$hi = 0, $982$hi = 0, $984 = 0, $984$hi = 0, $985$hi = 0, $988$hi = 0, $990 = 0, $990$hi = 0, $991$hi = 0, $994$hi = 0, $996 = 0, $996$hi = 0, $997$hi = 0, $1000$hi = 0, $1002 = 0, $1002$hi = 0, $1003$hi = 0, $1006$hi = 0, $1008 = 0, $1008$hi = 0, $1009$hi = 0, $1012$hi = 0, $1014 = 0, $1014$hi = 0, $1015$hi = 0, $1075 = 0, $1079 = 0, $1082$hi = 0, $1084 = 0, $1084$hi = 0, $1086$hi = 0, $1088 = 0, $1088$hi = 0, $1089$hi = 0, $1092$hi = 0, $1094 = 0, $1094$hi = 0, $1095$hi = 0, $1098$hi = 0, $1100 = 0, $1100$hi = 0, $1101$hi = 0, $1104$hi = 0, $1106 = 0, $1106$hi = 0, $1107$hi = 0, $1110$hi = 0, $1112 = 0, $1112$hi = 0, $1113$hi = 0, $1116$hi = 0, $1118 = 0, $1118$hi = 0, $1119$hi = 0, $1122$hi = 0, $1124 = 0, $1124$hi = 0, $1125$hi = 0, $1172 = 0, $1176 = 0, $1179$hi = 0, $1181 = 0, $1181$hi = 0, $1183$hi = 0, $1185 = 0, $1185$hi = 0, $1186$hi = 0, $1189$hi = 0, $1191 = 0, $1191$hi = 0, $1192$hi = 0, $1195$hi = 0, $1197 = 0, $1197$hi = 0, $1198$hi = 0, $1201$hi = 0, $1203 = 0, $1203$hi = 0, $1204$hi = 0, $1254 = 0, $1258 = 0, $1261$hi = 0, $1263 = 0, $1263$hi = 0, $1265$hi = 0, $1267 = 0, $1267$hi = 0, $1268$hi = 0, $1271$hi = 0, $1273 = 0, $1273$hi = 0, $1274$hi = 0, $1277$hi = 0, $1279 = 0, $1279$hi = 0, $1280$hi = 0, $1283$hi = 0, $1285 = 0, $1285$hi = 0, $1286$hi = 0, $1289$hi = 0, $1291 = 0, $1291$hi = 0, $1292$hi = 0, $1331 = 0, $1335 = 0, $1338$hi = 0, $1340 = 0, $1340$hi = 0, $1342$hi = 0, $1344 = 0, $1344$hi = 0, $1345$hi = 0, $1348$hi = 0, $1350 = 0, $1350$hi = 0, $1351$hi = 0, $1391 = 0, $1395 = 0, $1398$hi = 0, $1400 = 0, $1400$hi = 0, $1402$hi = 0, $1404 = 0, $1404$hi = 0, $1405$hi = 0, $1408$hi = 0, $1410 = 0, $1410$hi = 0, $1411$hi = 0, $1414$hi = 0, $1416 = 0, $1416$hi = 0, $1417$hi = 0, $1444 = 0, $1448 = 0, $1450$hi = 0, $1452$hi = 0, $1481 = 0, $1485 = 0, $1488$hi = 0, $1490 = 0, $1490$hi = 0, $1492$hi = 0, $1494 = 0, $1494$hi = 0, $1495$hi = 0;
  label$1 : {
   label$2 : {
    if ($3 >>> 0 < 13 >>> 0) {
     break label$2
    }
    if (($1 | 0) < (1 | 0)) {
     break label$1
    }
    i64toi32_i32$0 = 0;
    $17 = $4;
    $17$hi = i64toi32_i32$0;
    $6 = 0;
    $7 = $3 + -13 | 0;
    $8 = $7 >>> 0 > 19 >>> 0;
    label$3 : while (1) {
     i64toi32_i32$0 = 0;
     $18 = 0;
     $18$hi = i64toi32_i32$0;
     label$4 : {
      if ($8) {
       break label$4
      }
      label$5 : {
       switch ($7 | 0) {
       case 19:
        i64toi32_i32$2 = (($6 << 2 | 0) + $5 | 0) + -128 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
        $47 = i64toi32_i32$0;
        $47$hi = i64toi32_i32$1;
        i64toi32_i32$2 = $2;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 124 | 0) >> 2] | 0;
        i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
        $49 = i64toi32_i32$1;
        $49$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $47$hi;
        i64toi32_i32$1 = $49$hi;
        i64toi32_i32$1 = __wasm_i64_mul($47 | 0, i64toi32_i32$0 | 0, $49 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        $18 = i64toi32_i32$1;
        $18$hi = i64toi32_i32$0;
       case 18:
        i64toi32_i32$2 = (($6 << 2 | 0) + $5 | 0) + -124 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
        $56 = i64toi32_i32$0;
        $56$hi = i64toi32_i32$1;
        i64toi32_i32$2 = $2;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 120 | 0) >> 2] | 0;
        i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
        $58 = i64toi32_i32$1;
        $58$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $56$hi;
        i64toi32_i32$1 = $58$hi;
        i64toi32_i32$1 = __wasm_i64_mul($56 | 0, i64toi32_i32$0 | 0, $58 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        $59$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $18$hi;
        i64toi32_i32$0 = $59$hi;
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$1 = $18$hi;
        i64toi32_i32$3 = $18;
        i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $18 = i64toi32_i32$4;
        $18$hi = i64toi32_i32$5;
       case 17:
        i64toi32_i32$0 = (($6 << 2 | 0) + $5 | 0) + -120 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
        i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
        $67 = i64toi32_i32$5;
        $67$hi = i64toi32_i32$2;
        i64toi32_i32$0 = $2;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 116 | 0) >> 2] | 0;
        i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
        $69 = i64toi32_i32$2;
        $69$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $67$hi;
        i64toi32_i32$2 = $69$hi;
        i64toi32_i32$2 = __wasm_i64_mul($67 | 0, i64toi32_i32$5 | 0, $69 | 0, i64toi32_i32$2 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $70$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $18$hi;
        i64toi32_i32$5 = $70$hi;
        i64toi32_i32$0 = i64toi32_i32$2;
        i64toi32_i32$2 = $18$hi;
        i64toi32_i32$3 = $18;
        i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $18 = i64toi32_i32$1;
        $18$hi = i64toi32_i32$4;
       case 16:
        i64toi32_i32$5 = (($6 << 2 | 0) + $5 | 0) + -116 | 0;
        i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
        i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
        $78 = i64toi32_i32$4;
        $78$hi = i64toi32_i32$0;
        i64toi32_i32$5 = $2;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 112 | 0) >> 2] | 0;
        i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
        $80 = i64toi32_i32$0;
        $80$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $78$hi;
        i64toi32_i32$0 = $80$hi;
        i64toi32_i32$0 = __wasm_i64_mul($78 | 0, i64toi32_i32$4 | 0, $80 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $81$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $18$hi;
        i64toi32_i32$4 = $81$hi;
        i64toi32_i32$5 = i64toi32_i32$0;
        i64toi32_i32$0 = $18$hi;
        i64toi32_i32$3 = $18;
        i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
        i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
        }
        $18 = i64toi32_i32$2;
        $18$hi = i64toi32_i32$1;
       case 15:
        i64toi32_i32$4 = (($6 << 2 | 0) + $5 | 0) + -112 | 0;
        i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
        i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
        $89 = i64toi32_i32$1;
        $89$hi = i64toi32_i32$5;
        i64toi32_i32$4 = $2;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 108 | 0) >> 2] | 0;
        i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
        $91 = i64toi32_i32$5;
        $91$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $89$hi;
        i64toi32_i32$5 = $91$hi;
        i64toi32_i32$5 = __wasm_i64_mul($89 | 0, i64toi32_i32$1 | 0, $91 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $92$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $18$hi;
        i64toi32_i32$1 = $92$hi;
        i64toi32_i32$4 = i64toi32_i32$5;
        i64toi32_i32$5 = $18$hi;
        i64toi32_i32$3 = $18;
        i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
        i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
        }
        $18 = i64toi32_i32$0;
        $18$hi = i64toi32_i32$2;
       case 14:
        i64toi32_i32$1 = (($6 << 2 | 0) + $5 | 0) + -108 | 0;
        i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
        $100 = i64toi32_i32$2;
        $100$hi = i64toi32_i32$4;
        i64toi32_i32$1 = $2;
        i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 104 | 0) >> 2] | 0;
        i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
        $102 = i64toi32_i32$4;
        $102$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $100$hi;
        i64toi32_i32$4 = $102$hi;
        i64toi32_i32$4 = __wasm_i64_mul($100 | 0, i64toi32_i32$2 | 0, $102 | 0, i64toi32_i32$4 | 0) | 0;
        i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
        $103$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $18$hi;
        i64toi32_i32$2 = $103$hi;
        i64toi32_i32$1 = i64toi32_i32$4;
        i64toi32_i32$4 = $18$hi;
        i64toi32_i32$3 = $18;
        i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
        }
        $18 = i64toi32_i32$5;
        $18$hi = i64toi32_i32$0;
       case 13:
        i64toi32_i32$2 = (($6 << 2 | 0) + $5 | 0) + -104 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
        $111 = i64toi32_i32$0;
        $111$hi = i64toi32_i32$1;
        i64toi32_i32$2 = $2;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 100 | 0) >> 2] | 0;
        i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
        $113 = i64toi32_i32$1;
        $113$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $111$hi;
        i64toi32_i32$1 = $113$hi;
        i64toi32_i32$1 = __wasm_i64_mul($111 | 0, i64toi32_i32$0 | 0, $113 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        $114$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $18$hi;
        i64toi32_i32$0 = $114$hi;
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$1 = $18$hi;
        i64toi32_i32$3 = $18;
        i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $18 = i64toi32_i32$4;
        $18$hi = i64toi32_i32$5;
       case 12:
        i64toi32_i32$0 = (($6 << 2 | 0) + $5 | 0) + -100 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
        i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
        $122 = i64toi32_i32$5;
        $122$hi = i64toi32_i32$2;
        i64toi32_i32$0 = $2;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
        i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
        $124 = i64toi32_i32$2;
        $124$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $122$hi;
        i64toi32_i32$2 = $124$hi;
        i64toi32_i32$2 = __wasm_i64_mul($122 | 0, i64toi32_i32$5 | 0, $124 | 0, i64toi32_i32$2 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $125$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $18$hi;
        i64toi32_i32$5 = $125$hi;
        i64toi32_i32$0 = i64toi32_i32$2;
        i64toi32_i32$2 = $18$hi;
        i64toi32_i32$3 = $18;
        i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $18 = i64toi32_i32$1;
        $18$hi = i64toi32_i32$4;
       case 11:
        i64toi32_i32$5 = (($6 << 2 | 0) + $5 | 0) + -96 | 0;
        i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
        i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
        $133 = i64toi32_i32$4;
        $133$hi = i64toi32_i32$0;
        i64toi32_i32$5 = $2;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 92 | 0) >> 2] | 0;
        i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
        $135 = i64toi32_i32$0;
        $135$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $133$hi;
        i64toi32_i32$0 = $135$hi;
        i64toi32_i32$0 = __wasm_i64_mul($133 | 0, i64toi32_i32$4 | 0, $135 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $136$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $18$hi;
        i64toi32_i32$4 = $136$hi;
        i64toi32_i32$5 = i64toi32_i32$0;
        i64toi32_i32$0 = $18$hi;
        i64toi32_i32$3 = $18;
        i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
        i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
        }
        $18 = i64toi32_i32$2;
        $18$hi = i64toi32_i32$1;
       case 10:
        i64toi32_i32$4 = (($6 << 2 | 0) + $5 | 0) + -92 | 0;
        i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
        i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
        $144 = i64toi32_i32$1;
        $144$hi = i64toi32_i32$5;
        i64toi32_i32$4 = $2;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 88 | 0) >> 2] | 0;
        i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
        $146 = i64toi32_i32$5;
        $146$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $144$hi;
        i64toi32_i32$5 = $146$hi;
        i64toi32_i32$5 = __wasm_i64_mul($144 | 0, i64toi32_i32$1 | 0, $146 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $147$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $18$hi;
        i64toi32_i32$1 = $147$hi;
        i64toi32_i32$4 = i64toi32_i32$5;
        i64toi32_i32$5 = $18$hi;
        i64toi32_i32$3 = $18;
        i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
        i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
        }
        $18 = i64toi32_i32$0;
        $18$hi = i64toi32_i32$2;
       case 9:
        i64toi32_i32$1 = (($6 << 2 | 0) + $5 | 0) + -88 | 0;
        i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
        $155 = i64toi32_i32$2;
        $155$hi = i64toi32_i32$4;
        i64toi32_i32$1 = $2;
        i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] | 0;
        i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
        $157 = i64toi32_i32$4;
        $157$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $155$hi;
        i64toi32_i32$4 = $157$hi;
        i64toi32_i32$4 = __wasm_i64_mul($155 | 0, i64toi32_i32$2 | 0, $157 | 0, i64toi32_i32$4 | 0) | 0;
        i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
        $158$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $18$hi;
        i64toi32_i32$2 = $158$hi;
        i64toi32_i32$1 = i64toi32_i32$4;
        i64toi32_i32$4 = $18$hi;
        i64toi32_i32$3 = $18;
        i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
        }
        $18 = i64toi32_i32$5;
        $18$hi = i64toi32_i32$0;
       case 8:
        i64toi32_i32$2 = (($6 << 2 | 0) + $5 | 0) + -84 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
        $166 = i64toi32_i32$0;
        $166$hi = i64toi32_i32$1;
        i64toi32_i32$2 = $2;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 80 | 0) >> 2] | 0;
        i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
        $168 = i64toi32_i32$1;
        $168$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $166$hi;
        i64toi32_i32$1 = $168$hi;
        i64toi32_i32$1 = __wasm_i64_mul($166 | 0, i64toi32_i32$0 | 0, $168 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        $169$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $18$hi;
        i64toi32_i32$0 = $169$hi;
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$1 = $18$hi;
        i64toi32_i32$3 = $18;
        i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $18 = i64toi32_i32$4;
        $18$hi = i64toi32_i32$5;
       case 7:
        i64toi32_i32$0 = (($6 << 2 | 0) + $5 | 0) + -80 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
        i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
        $177 = i64toi32_i32$5;
        $177$hi = i64toi32_i32$2;
        i64toi32_i32$0 = $2;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 76 | 0) >> 2] | 0;
        i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
        $179 = i64toi32_i32$2;
        $179$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $177$hi;
        i64toi32_i32$2 = $179$hi;
        i64toi32_i32$2 = __wasm_i64_mul($177 | 0, i64toi32_i32$5 | 0, $179 | 0, i64toi32_i32$2 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $180$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $18$hi;
        i64toi32_i32$5 = $180$hi;
        i64toi32_i32$0 = i64toi32_i32$2;
        i64toi32_i32$2 = $18$hi;
        i64toi32_i32$3 = $18;
        i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $18 = i64toi32_i32$1;
        $18$hi = i64toi32_i32$4;
       case 6:
        i64toi32_i32$5 = (($6 << 2 | 0) + $5 | 0) + -76 | 0;
        i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
        i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
        $188 = i64toi32_i32$4;
        $188$hi = i64toi32_i32$0;
        i64toi32_i32$5 = $2;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 72 | 0) >> 2] | 0;
        i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
        $190 = i64toi32_i32$0;
        $190$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $188$hi;
        i64toi32_i32$0 = $190$hi;
        i64toi32_i32$0 = __wasm_i64_mul($188 | 0, i64toi32_i32$4 | 0, $190 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $191$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $18$hi;
        i64toi32_i32$4 = $191$hi;
        i64toi32_i32$5 = i64toi32_i32$0;
        i64toi32_i32$0 = $18$hi;
        i64toi32_i32$3 = $18;
        i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
        i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
        }
        $18 = i64toi32_i32$2;
        $18$hi = i64toi32_i32$1;
       case 5:
        i64toi32_i32$4 = (($6 << 2 | 0) + $5 | 0) + -72 | 0;
        i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
        i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
        $199 = i64toi32_i32$1;
        $199$hi = i64toi32_i32$5;
        i64toi32_i32$4 = $2;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 68 | 0) >> 2] | 0;
        i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
        $201 = i64toi32_i32$5;
        $201$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $199$hi;
        i64toi32_i32$5 = $201$hi;
        i64toi32_i32$5 = __wasm_i64_mul($199 | 0, i64toi32_i32$1 | 0, $201 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $202$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $18$hi;
        i64toi32_i32$1 = $202$hi;
        i64toi32_i32$4 = i64toi32_i32$5;
        i64toi32_i32$5 = $18$hi;
        i64toi32_i32$3 = $18;
        i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
        i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
        }
        $18 = i64toi32_i32$0;
        $18$hi = i64toi32_i32$2;
       case 4:
        i64toi32_i32$1 = (($6 << 2 | 0) + $5 | 0) + -68 | 0;
        i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
        $210 = i64toi32_i32$2;
        $210$hi = i64toi32_i32$4;
        i64toi32_i32$1 = $2;
        i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
        i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
        $212 = i64toi32_i32$4;
        $212$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $210$hi;
        i64toi32_i32$4 = $212$hi;
        i64toi32_i32$4 = __wasm_i64_mul($210 | 0, i64toi32_i32$2 | 0, $212 | 0, i64toi32_i32$4 | 0) | 0;
        i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
        $213$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $18$hi;
        i64toi32_i32$2 = $213$hi;
        i64toi32_i32$1 = i64toi32_i32$4;
        i64toi32_i32$4 = $18$hi;
        i64toi32_i32$3 = $18;
        i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
        }
        $18 = i64toi32_i32$5;
        $18$hi = i64toi32_i32$0;
       case 3:
        i64toi32_i32$2 = (($6 << 2 | 0) + $5 | 0) + -64 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
        $221 = i64toi32_i32$0;
        $221$hi = i64toi32_i32$1;
        i64toi32_i32$2 = $2;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 60 | 0) >> 2] | 0;
        i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
        $223 = i64toi32_i32$1;
        $223$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $221$hi;
        i64toi32_i32$1 = $223$hi;
        i64toi32_i32$1 = __wasm_i64_mul($221 | 0, i64toi32_i32$0 | 0, $223 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        $224$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $18$hi;
        i64toi32_i32$0 = $224$hi;
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$1 = $18$hi;
        i64toi32_i32$3 = $18;
        i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $18 = i64toi32_i32$4;
        $18$hi = i64toi32_i32$5;
       case 2:
        i64toi32_i32$0 = (($6 << 2 | 0) + $5 | 0) + -60 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
        i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
        $232 = i64toi32_i32$5;
        $232$hi = i64toi32_i32$2;
        i64toi32_i32$0 = $2;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 56 | 0) >> 2] | 0;
        i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
        $234 = i64toi32_i32$2;
        $234$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $232$hi;
        i64toi32_i32$2 = $234$hi;
        i64toi32_i32$2 = __wasm_i64_mul($232 | 0, i64toi32_i32$5 | 0, $234 | 0, i64toi32_i32$2 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $235$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $18$hi;
        i64toi32_i32$5 = $235$hi;
        i64toi32_i32$0 = i64toi32_i32$2;
        i64toi32_i32$2 = $18$hi;
        i64toi32_i32$3 = $18;
        i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $18 = i64toi32_i32$1;
        $18$hi = i64toi32_i32$4;
       case 1:
        i64toi32_i32$5 = (($6 << 2 | 0) + $5 | 0) + -56 | 0;
        i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
        i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
        $243 = i64toi32_i32$4;
        $243$hi = i64toi32_i32$0;
        i64toi32_i32$5 = $2;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 52 | 0) >> 2] | 0;
        i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
        $245 = i64toi32_i32$0;
        $245$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $243$hi;
        i64toi32_i32$0 = $245$hi;
        i64toi32_i32$0 = __wasm_i64_mul($243 | 0, i64toi32_i32$4 | 0, $245 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $246$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $18$hi;
        i64toi32_i32$4 = $246$hi;
        i64toi32_i32$5 = i64toi32_i32$0;
        i64toi32_i32$0 = $18$hi;
        i64toi32_i32$3 = $18;
        i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
        i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
        }
        $18 = i64toi32_i32$2;
        $18$hi = i64toi32_i32$1;
        break;
       default:
        break label$5;
       };
      }
      $3 = ($6 << 2 | 0) + $5 | 0;
      i64toi32_i32$4 = $3 + -52 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
      $255 = i64toi32_i32$1;
      $255$hi = i64toi32_i32$5;
      i64toi32_i32$4 = $2;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 48 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
      $257 = i64toi32_i32$5;
      $257$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $255$hi;
      i64toi32_i32$5 = $257$hi;
      i64toi32_i32$5 = __wasm_i64_mul($255 | 0, i64toi32_i32$1 | 0, $257 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $258$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$1 = $258$hi;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$3 = $18;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $260$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $3 + -48 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
      $263 = i64toi32_i32$2;
      $263$hi = i64toi32_i32$4;
      i64toi32_i32$1 = $2;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
      $265 = i64toi32_i32$4;
      $265$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $263$hi;
      i64toi32_i32$4 = $265$hi;
      i64toi32_i32$4 = __wasm_i64_mul($263 | 0, i64toi32_i32$2 | 0, $265 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $266 = i64toi32_i32$4;
      $266$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $260$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$4 = $266$hi;
      i64toi32_i32$3 = $266;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $267$hi = i64toi32_i32$0;
      i64toi32_i32$2 = $3 + -44 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
      $270 = i64toi32_i32$0;
      $270$hi = i64toi32_i32$1;
      i64toi32_i32$2 = $2;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 40 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $272 = i64toi32_i32$1;
      $272$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $270$hi;
      i64toi32_i32$1 = $272$hi;
      i64toi32_i32$1 = __wasm_i64_mul($270 | 0, i64toi32_i32$0 | 0, $272 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $273 = i64toi32_i32$1;
      $273$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $267$hi;
      i64toi32_i32$2 = i64toi32_i32$5;
      i64toi32_i32$1 = $273$hi;
      i64toi32_i32$3 = $273;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $274$hi = i64toi32_i32$5;
      i64toi32_i32$0 = $3 + -40 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
      $277 = i64toi32_i32$5;
      $277$hi = i64toi32_i32$2;
      i64toi32_i32$0 = $2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
      $279 = i64toi32_i32$2;
      $279$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $277$hi;
      i64toi32_i32$2 = $279$hi;
      i64toi32_i32$2 = __wasm_i64_mul($277 | 0, i64toi32_i32$5 | 0, $279 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $280 = i64toi32_i32$2;
      $280$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $274$hi;
      i64toi32_i32$0 = i64toi32_i32$4;
      i64toi32_i32$2 = $280$hi;
      i64toi32_i32$3 = $280;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $281$hi = i64toi32_i32$4;
      i64toi32_i32$5 = $3 + -36 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
      $284 = i64toi32_i32$4;
      $284$hi = i64toi32_i32$0;
      i64toi32_i32$5 = $2;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 32 | 0) >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
      $286 = i64toi32_i32$0;
      $286$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $284$hi;
      i64toi32_i32$0 = $286$hi;
      i64toi32_i32$0 = __wasm_i64_mul($284 | 0, i64toi32_i32$4 | 0, $286 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $287 = i64toi32_i32$0;
      $287$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $281$hi;
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$0 = $287$hi;
      i64toi32_i32$3 = $287;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $288$hi = i64toi32_i32$1;
      i64toi32_i32$4 = $3 + -32 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
      $291 = i64toi32_i32$1;
      $291$hi = i64toi32_i32$5;
      i64toi32_i32$4 = $2;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 28 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
      $293 = i64toi32_i32$5;
      $293$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $291$hi;
      i64toi32_i32$5 = $293$hi;
      i64toi32_i32$5 = __wasm_i64_mul($291 | 0, i64toi32_i32$1 | 0, $293 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $294 = i64toi32_i32$5;
      $294$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $288$hi;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$5 = $294$hi;
      i64toi32_i32$3 = $294;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $295$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $3 + -28 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
      $298 = i64toi32_i32$2;
      $298$hi = i64toi32_i32$4;
      i64toi32_i32$1 = $2;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
      $300 = i64toi32_i32$4;
      $300$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $298$hi;
      i64toi32_i32$4 = $300$hi;
      i64toi32_i32$4 = __wasm_i64_mul($298 | 0, i64toi32_i32$2 | 0, $300 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $301 = i64toi32_i32$4;
      $301$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $295$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$4 = $301$hi;
      i64toi32_i32$3 = $301;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $302$hi = i64toi32_i32$0;
      i64toi32_i32$2 = $3 + -24 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
      $305 = i64toi32_i32$0;
      $305$hi = i64toi32_i32$1;
      i64toi32_i32$2 = $2;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $307 = i64toi32_i32$1;
      $307$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $305$hi;
      i64toi32_i32$1 = $307$hi;
      i64toi32_i32$1 = __wasm_i64_mul($305 | 0, i64toi32_i32$0 | 0, $307 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $308 = i64toi32_i32$1;
      $308$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $302$hi;
      i64toi32_i32$2 = i64toi32_i32$5;
      i64toi32_i32$1 = $308$hi;
      i64toi32_i32$3 = $308;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $309$hi = i64toi32_i32$5;
      i64toi32_i32$0 = $3 + -20 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
      $312 = i64toi32_i32$5;
      $312$hi = i64toi32_i32$2;
      i64toi32_i32$0 = $2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
      $314 = i64toi32_i32$2;
      $314$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $312$hi;
      i64toi32_i32$2 = $314$hi;
      i64toi32_i32$2 = __wasm_i64_mul($312 | 0, i64toi32_i32$5 | 0, $314 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $315 = i64toi32_i32$2;
      $315$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $309$hi;
      i64toi32_i32$0 = i64toi32_i32$4;
      i64toi32_i32$2 = $315$hi;
      i64toi32_i32$3 = $315;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $316$hi = i64toi32_i32$4;
      i64toi32_i32$5 = $3 + -16 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
      $319 = i64toi32_i32$4;
      $319$hi = i64toi32_i32$0;
      i64toi32_i32$5 = $2;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
      $321 = i64toi32_i32$0;
      $321$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $319$hi;
      i64toi32_i32$0 = $321$hi;
      i64toi32_i32$0 = __wasm_i64_mul($319 | 0, i64toi32_i32$4 | 0, $321 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $322 = i64toi32_i32$0;
      $322$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $316$hi;
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$0 = $322$hi;
      i64toi32_i32$3 = $322;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $323$hi = i64toi32_i32$1;
      i64toi32_i32$4 = $3 + -12 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
      $326 = i64toi32_i32$1;
      $326$hi = i64toi32_i32$5;
      i64toi32_i32$4 = $2;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
      $328 = i64toi32_i32$5;
      $328$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $326$hi;
      i64toi32_i32$5 = $328$hi;
      i64toi32_i32$5 = __wasm_i64_mul($326 | 0, i64toi32_i32$1 | 0, $328 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $329 = i64toi32_i32$5;
      $329$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $323$hi;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$5 = $329$hi;
      i64toi32_i32$3 = $329;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $330$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $3 + -8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
      $333 = i64toi32_i32$2;
      $333$hi = i64toi32_i32$4;
      i64toi32_i32$1 = $2;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
      $335 = i64toi32_i32$4;
      $335$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $333$hi;
      i64toi32_i32$4 = $335$hi;
      i64toi32_i32$4 = __wasm_i64_mul($333 | 0, i64toi32_i32$2 | 0, $335 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $336 = i64toi32_i32$4;
      $336$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $330$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$4 = $336$hi;
      i64toi32_i32$3 = $336;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $337$hi = i64toi32_i32$0;
      i64toi32_i32$2 = $3 + -4 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
      $340 = i64toi32_i32$0;
      $340$hi = i64toi32_i32$1;
      i64toi32_i32$2 = $2;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $342 = i64toi32_i32$1;
      $342$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $340$hi;
      i64toi32_i32$1 = $342$hi;
      i64toi32_i32$1 = __wasm_i64_mul($340 | 0, i64toi32_i32$0 | 0, $342 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $343 = i64toi32_i32$1;
      $343$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $337$hi;
      i64toi32_i32$2 = i64toi32_i32$5;
      i64toi32_i32$1 = $343$hi;
      i64toi32_i32$3 = $343;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $18 = i64toi32_i32$4;
      $18$hi = i64toi32_i32$5;
     }
     $3 = $6 << 2 | 0;
     $349 = $5 + $3 | 0;
     $353 = HEAP32[($0 + $3 | 0) >> 2] | 0;
     i64toi32_i32$5 = $18$hi;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$5 = $18$hi;
     i64toi32_i32$0 = $18;
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$3 = $17;
     i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
      $557 = i64toi32_i32$5 >> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$5 >> i64toi32_i32$1 | 0;
      $557 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
     }
     HEAP32[$349 >> 2] = $353 + $557 | 0;
     $6 = $6 + 1 | 0;
     if (($6 | 0) != ($1 | 0)) {
      continue label$3
     }
     break label$1;
    };
   }
   label$25 : {
    if ($3 >>> 0 < 9 >>> 0) {
     break label$25
    }
    label$26 : {
     if ($3 >>> 0 < 11 >>> 0) {
      break label$26
     }
     label$27 : {
      if (($3 | 0) == (12 | 0)) {
       break label$27
      }
      if (($1 | 0) < (1 | 0)) {
       break label$1
      }
      $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
      $3 = HEAP32[($5 + -8 | 0) >> 2] | 0;
      $8 = HEAP32[($5 + -12 | 0) >> 2] | 0;
      $7 = HEAP32[($5 + -16 | 0) >> 2] | 0;
      $9 = HEAP32[($5 + -20 | 0) >> 2] | 0;
      $10 = HEAP32[($5 + -24 | 0) >> 2] | 0;
      $11 = HEAP32[($5 + -28 | 0) >> 2] | 0;
      $12 = HEAP32[($5 + -32 | 0) >> 2] | 0;
      $13 = HEAP32[($5 + -36 | 0) >> 2] | 0;
      $14 = HEAP32[($5 + -40 | 0) >> 2] | 0;
      $15 = HEAP32[($5 + -44 | 0) >> 2] | 0;
      i64toi32_i32$2 = 0;
      $18 = $4;
      $18$hi = i64toi32_i32$2;
      i64toi32_i32$5 = $2;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $17 = i64toi32_i32$2;
      $17$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $19 = i64toi32_i32$0;
      $19$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $20 = i64toi32_i32$2;
      $20$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $21 = i64toi32_i32$0;
      $21$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 16 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $22 = i64toi32_i32$2;
      $22$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 20 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $23 = i64toi32_i32$0;
      $23$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 24 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $24 = i64toi32_i32$2;
      $24$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 28 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $25 = i64toi32_i32$0;
      $25$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 32 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $26 = i64toi32_i32$2;
      $26$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 36 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $27 = i64toi32_i32$0;
      $27$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 40 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $28 = i64toi32_i32$2;
      $28$hi = i64toi32_i32$0;
      $2 = 0;
      label$28 : while (1) {
       $16 = $2 << 2 | 0;
       $433 = $5 + $16 | 0;
       $437 = HEAP32[($0 + $16 | 0) >> 2] | 0;
       $16 = $14;
       i64toi32_i32$2 = $14;
       i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
       $440$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $27$hi;
       i64toi32_i32$0 = $440$hi;
       i64toi32_i32$2 = $27$hi;
       i64toi32_i32$2 = __wasm_i64_mul($14 | 0, i64toi32_i32$0 | 0, $27 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $442 = i64toi32_i32$2;
       $442$hi = i64toi32_i32$0;
       i64toi32_i32$2 = $15;
       i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
       $444$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $28$hi;
       i64toi32_i32$0 = $444$hi;
       i64toi32_i32$2 = $28$hi;
       i64toi32_i32$2 = __wasm_i64_mul($15 | 0, i64toi32_i32$0 | 0, $28 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $446 = i64toi32_i32$2;
       $446$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $442$hi;
       i64toi32_i32$5 = $442;
       i64toi32_i32$2 = $446$hi;
       i64toi32_i32$3 = $446;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $447$hi = i64toi32_i32$4;
       $14 = $13;
       i64toi32_i32$5 = $13;
       i64toi32_i32$4 = i64toi32_i32$5 >> 31 | 0;
       $450$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $26$hi;
       i64toi32_i32$4 = $450$hi;
       i64toi32_i32$5 = $26$hi;
       i64toi32_i32$5 = __wasm_i64_mul($13 | 0, i64toi32_i32$4 | 0, $26 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $452 = i64toi32_i32$5;
       $452$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $447$hi;
       i64toi32_i32$0 = i64toi32_i32$1;
       i64toi32_i32$5 = $452$hi;
       i64toi32_i32$3 = $452;
       i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $453$hi = i64toi32_i32$1;
       $13 = $12;
       i64toi32_i32$0 = $12;
       i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
       $456$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $25$hi;
       i64toi32_i32$1 = $456$hi;
       i64toi32_i32$0 = $25$hi;
       i64toi32_i32$0 = __wasm_i64_mul($12 | 0, i64toi32_i32$1 | 0, $25 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $458 = i64toi32_i32$0;
       $458$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $453$hi;
       i64toi32_i32$4 = i64toi32_i32$2;
       i64toi32_i32$0 = $458$hi;
       i64toi32_i32$3 = $458;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $459$hi = i64toi32_i32$2;
       $12 = $11;
       i64toi32_i32$4 = $11;
       i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
       $462$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $24$hi;
       i64toi32_i32$2 = $462$hi;
       i64toi32_i32$4 = $24$hi;
       i64toi32_i32$4 = __wasm_i64_mul($11 | 0, i64toi32_i32$2 | 0, $24 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $464 = i64toi32_i32$4;
       $464$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $459$hi;
       i64toi32_i32$1 = i64toi32_i32$5;
       i64toi32_i32$4 = $464$hi;
       i64toi32_i32$3 = $464;
       i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $465$hi = i64toi32_i32$5;
       $11 = $10;
       i64toi32_i32$1 = $10;
       i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
       $468$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $23$hi;
       i64toi32_i32$5 = $468$hi;
       i64toi32_i32$1 = $23$hi;
       i64toi32_i32$1 = __wasm_i64_mul($10 | 0, i64toi32_i32$5 | 0, $23 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $470 = i64toi32_i32$1;
       $470$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $465$hi;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$1 = $470$hi;
       i64toi32_i32$3 = $470;
       i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $471$hi = i64toi32_i32$0;
       $10 = $9;
       i64toi32_i32$2 = $9;
       i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
       $474$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $22$hi;
       i64toi32_i32$0 = $474$hi;
       i64toi32_i32$2 = $22$hi;
       i64toi32_i32$2 = __wasm_i64_mul($9 | 0, i64toi32_i32$0 | 0, $22 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $476 = i64toi32_i32$2;
       $476$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $471$hi;
       i64toi32_i32$5 = i64toi32_i32$4;
       i64toi32_i32$2 = $476$hi;
       i64toi32_i32$3 = $476;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $477$hi = i64toi32_i32$4;
       $9 = $7;
       i64toi32_i32$5 = $7;
       i64toi32_i32$4 = i64toi32_i32$5 >> 31 | 0;
       $480$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $21$hi;
       i64toi32_i32$4 = $480$hi;
       i64toi32_i32$5 = $21$hi;
       i64toi32_i32$5 = __wasm_i64_mul($7 | 0, i64toi32_i32$4 | 0, $21 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $482 = i64toi32_i32$5;
       $482$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $477$hi;
       i64toi32_i32$0 = i64toi32_i32$1;
       i64toi32_i32$5 = $482$hi;
       i64toi32_i32$3 = $482;
       i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $483$hi = i64toi32_i32$1;
       $7 = $8;
       i64toi32_i32$0 = $7;
       i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
       $486$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $20$hi;
       i64toi32_i32$1 = $486$hi;
       i64toi32_i32$0 = $20$hi;
       i64toi32_i32$0 = __wasm_i64_mul($7 | 0, i64toi32_i32$1 | 0, $20 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $488 = i64toi32_i32$0;
       $488$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $483$hi;
       i64toi32_i32$4 = i64toi32_i32$2;
       i64toi32_i32$0 = $488$hi;
       i64toi32_i32$3 = $488;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $489$hi = i64toi32_i32$2;
       $8 = $3;
       i64toi32_i32$4 = $3;
       i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
       $492$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $19$hi;
       i64toi32_i32$2 = $492$hi;
       i64toi32_i32$4 = $19$hi;
       i64toi32_i32$4 = __wasm_i64_mul($3 | 0, i64toi32_i32$2 | 0, $19 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $494 = i64toi32_i32$4;
       $494$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $489$hi;
       i64toi32_i32$1 = i64toi32_i32$5;
       i64toi32_i32$4 = $494$hi;
       i64toi32_i32$3 = $494;
       i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $495$hi = i64toi32_i32$5;
       $3 = $6;
       i64toi32_i32$1 = $3;
       i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
       $498$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $17$hi;
       i64toi32_i32$5 = $498$hi;
       i64toi32_i32$1 = $17$hi;
       i64toi32_i32$1 = __wasm_i64_mul($3 | 0, i64toi32_i32$5 | 0, $17 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $500 = i64toi32_i32$1;
       $500$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $495$hi;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$1 = $500$hi;
       i64toi32_i32$3 = $500;
       i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $501$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $18$hi;
       i64toi32_i32$0 = $501$hi;
       i64toi32_i32$5 = i64toi32_i32$4;
       i64toi32_i32$2 = $18$hi;
       i64toi32_i32$3 = $18;
       i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
        $558 = i64toi32_i32$0 >> i64toi32_i32$1 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$0 >> i64toi32_i32$1 | 0;
        $558 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
       }
       $6 = $437 + $558 | 0;
       HEAP32[$433 >> 2] = $6;
       $15 = $16;
       $2 = $2 + 1 | 0;
       if (($2 | 0) != ($1 | 0)) {
        continue label$28
       }
       break label$1;
      };
     }
     if (($1 | 0) < (1 | 0)) {
      break label$1
     }
     $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
     $3 = HEAP32[($5 + -8 | 0) >> 2] | 0;
     $8 = HEAP32[($5 + -12 | 0) >> 2] | 0;
     $7 = HEAP32[($5 + -16 | 0) >> 2] | 0;
     $9 = HEAP32[($5 + -20 | 0) >> 2] | 0;
     $10 = HEAP32[($5 + -24 | 0) >> 2] | 0;
     $11 = HEAP32[($5 + -28 | 0) >> 2] | 0;
     $12 = HEAP32[($5 + -32 | 0) >> 2] | 0;
     $13 = HEAP32[($5 + -36 | 0) >> 2] | 0;
     $14 = HEAP32[($5 + -40 | 0) >> 2] | 0;
     $15 = HEAP32[($5 + -44 | 0) >> 2] | 0;
     $16 = HEAP32[($5 + -48 | 0) >> 2] | 0;
     i64toi32_i32$2 = 0;
     $18 = $4;
     $18$hi = i64toi32_i32$2;
     i64toi32_i32$0 = $2;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
     $17 = i64toi32_i32$2;
     $17$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
     $19 = i64toi32_i32$5;
     $19$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
     i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
     $20 = i64toi32_i32$2;
     $20$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
     $21 = i64toi32_i32$5;
     $21$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
     i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
     $22 = i64toi32_i32$2;
     $22$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
     $23 = i64toi32_i32$5;
     $23$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] | 0;
     i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
     $24 = i64toi32_i32$2;
     $24$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
     $25 = i64toi32_i32$5;
     $25$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
     i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
     $26 = i64toi32_i32$2;
     $26$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
     $27 = i64toi32_i32$5;
     $27$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 40 | 0) >> 2] | 0;
     i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
     $28 = i64toi32_i32$2;
     $28$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 44 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
     $29 = i64toi32_i32$5;
     $29$hi = i64toi32_i32$2;
     $2 = 0;
     label$29 : while (1) {
      $4 = $2 << 2 | 0;
      $581 = $5 + $4 | 0;
      $585 = HEAP32[($0 + $4 | 0) >> 2] | 0;
      $4 = $15;
      i64toi32_i32$5 = $4;
      i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
      $588$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $28$hi;
      i64toi32_i32$2 = $588$hi;
      i64toi32_i32$5 = $28$hi;
      i64toi32_i32$5 = __wasm_i64_mul($4 | 0, i64toi32_i32$2 | 0, $28 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $590 = i64toi32_i32$5;
      $590$hi = i64toi32_i32$2;
      i64toi32_i32$5 = $16;
      i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
      $592$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $29$hi;
      i64toi32_i32$2 = $592$hi;
      i64toi32_i32$5 = $29$hi;
      i64toi32_i32$5 = __wasm_i64_mul($16 | 0, i64toi32_i32$2 | 0, $29 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $594 = i64toi32_i32$5;
      $594$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $590$hi;
      i64toi32_i32$0 = $590;
      i64toi32_i32$5 = $594$hi;
      i64toi32_i32$3 = $594;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $595$hi = i64toi32_i32$4;
      $15 = $14;
      i64toi32_i32$0 = $14;
      i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
      $598$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $27$hi;
      i64toi32_i32$4 = $598$hi;
      i64toi32_i32$0 = $27$hi;
      i64toi32_i32$0 = __wasm_i64_mul($14 | 0, i64toi32_i32$4 | 0, $27 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $600 = i64toi32_i32$0;
      $600$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $595$hi;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$0 = $600$hi;
      i64toi32_i32$3 = $600;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $601$hi = i64toi32_i32$1;
      $14 = $13;
      i64toi32_i32$2 = $13;
      i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
      $604$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $26$hi;
      i64toi32_i32$1 = $604$hi;
      i64toi32_i32$2 = $26$hi;
      i64toi32_i32$2 = __wasm_i64_mul($13 | 0, i64toi32_i32$1 | 0, $26 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $606 = i64toi32_i32$2;
      $606$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $601$hi;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$2 = $606$hi;
      i64toi32_i32$3 = $606;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $607$hi = i64toi32_i32$5;
      $13 = $12;
      i64toi32_i32$4 = $12;
      i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
      $610$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $25$hi;
      i64toi32_i32$5 = $610$hi;
      i64toi32_i32$4 = $25$hi;
      i64toi32_i32$4 = __wasm_i64_mul($12 | 0, i64toi32_i32$5 | 0, $25 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $612 = i64toi32_i32$4;
      $612$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $607$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$4 = $612$hi;
      i64toi32_i32$3 = $612;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $613$hi = i64toi32_i32$0;
      $12 = $11;
      i64toi32_i32$1 = $11;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $616$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $24$hi;
      i64toi32_i32$0 = $616$hi;
      i64toi32_i32$1 = $24$hi;
      i64toi32_i32$1 = __wasm_i64_mul($11 | 0, i64toi32_i32$0 | 0, $24 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $618 = i64toi32_i32$1;
      $618$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $613$hi;
      i64toi32_i32$5 = i64toi32_i32$2;
      i64toi32_i32$1 = $618$hi;
      i64toi32_i32$3 = $618;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $619$hi = i64toi32_i32$2;
      $11 = $10;
      i64toi32_i32$5 = $10;
      i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
      $622$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $23$hi;
      i64toi32_i32$2 = $622$hi;
      i64toi32_i32$5 = $23$hi;
      i64toi32_i32$5 = __wasm_i64_mul($10 | 0, i64toi32_i32$2 | 0, $23 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $624 = i64toi32_i32$5;
      $624$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $619$hi;
      i64toi32_i32$0 = i64toi32_i32$4;
      i64toi32_i32$5 = $624$hi;
      i64toi32_i32$3 = $624;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $625$hi = i64toi32_i32$4;
      $10 = $9;
      i64toi32_i32$0 = $9;
      i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
      $628$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $22$hi;
      i64toi32_i32$4 = $628$hi;
      i64toi32_i32$0 = $22$hi;
      i64toi32_i32$0 = __wasm_i64_mul($9 | 0, i64toi32_i32$4 | 0, $22 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $630 = i64toi32_i32$0;
      $630$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $625$hi;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$0 = $630$hi;
      i64toi32_i32$3 = $630;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $631$hi = i64toi32_i32$1;
      $9 = $7;
      i64toi32_i32$2 = $7;
      i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
      $634$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$1 = $634$hi;
      i64toi32_i32$2 = $21$hi;
      i64toi32_i32$2 = __wasm_i64_mul($7 | 0, i64toi32_i32$1 | 0, $21 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $636 = i64toi32_i32$2;
      $636$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $631$hi;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$2 = $636$hi;
      i64toi32_i32$3 = $636;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $637$hi = i64toi32_i32$5;
      $7 = $8;
      i64toi32_i32$4 = $7;
      i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
      $640$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$5 = $640$hi;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$4 = __wasm_i64_mul($7 | 0, i64toi32_i32$5 | 0, $20 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $642 = i64toi32_i32$4;
      $642$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $637$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$4 = $642$hi;
      i64toi32_i32$3 = $642;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $643$hi = i64toi32_i32$0;
      $8 = $3;
      i64toi32_i32$1 = $3;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $646$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$0 = $646$hi;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$1 = __wasm_i64_mul($3 | 0, i64toi32_i32$0 | 0, $19 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $648 = i64toi32_i32$1;
      $648$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $643$hi;
      i64toi32_i32$5 = i64toi32_i32$2;
      i64toi32_i32$1 = $648$hi;
      i64toi32_i32$3 = $648;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $649$hi = i64toi32_i32$2;
      $3 = $6;
      i64toi32_i32$5 = $3;
      i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
      $652$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$2 = $652$hi;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$5 = __wasm_i64_mul($3 | 0, i64toi32_i32$2 | 0, $17 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $654 = i64toi32_i32$5;
      $654$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $649$hi;
      i64toi32_i32$0 = i64toi32_i32$4;
      i64toi32_i32$5 = $654$hi;
      i64toi32_i32$3 = $654;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $655$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$4 = $655$hi;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$3 = $18;
      i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
       $559 = i64toi32_i32$4 >> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$4 >> i64toi32_i32$5 | 0;
       $559 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
      }
      $6 = $585 + $559 | 0;
      HEAP32[$581 >> 2] = $6;
      $16 = $4;
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($1 | 0)) {
       continue label$29
      }
      break label$1;
     };
    }
    label$30 : {
     if (($3 | 0) == (10 | 0)) {
      break label$30
     }
     if (($1 | 0) < (1 | 0)) {
      break label$1
     }
     $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
     $3 = HEAP32[($5 + -8 | 0) >> 2] | 0;
     $8 = HEAP32[($5 + -12 | 0) >> 2] | 0;
     $7 = HEAP32[($5 + -16 | 0) >> 2] | 0;
     $9 = HEAP32[($5 + -20 | 0) >> 2] | 0;
     $10 = HEAP32[($5 + -24 | 0) >> 2] | 0;
     $11 = HEAP32[($5 + -28 | 0) >> 2] | 0;
     $12 = HEAP32[($5 + -32 | 0) >> 2] | 0;
     $13 = HEAP32[($5 + -36 | 0) >> 2] | 0;
     i64toi32_i32$0 = 0;
     $18 = $4;
     $18$hi = i64toi32_i32$0;
     i64toi32_i32$4 = $2;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
     $17 = i64toi32_i32$0;
     $17$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
     $19 = i64toi32_i32$2;
     $19$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
     $20 = i64toi32_i32$0;
     $20$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
     $21 = i64toi32_i32$2;
     $21$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 16 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
     $22 = i64toi32_i32$0;
     $22$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 20 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
     $23 = i64toi32_i32$2;
     $23$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 24 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
     $24 = i64toi32_i32$0;
     $24$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 28 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
     $25 = i64toi32_i32$2;
     $25$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 32 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
     $26 = i64toi32_i32$0;
     $26$hi = i64toi32_i32$2;
     $2 = 0;
     label$31 : while (1) {
      $14 = $2 << 2 | 0;
      $722 = $5 + $14 | 0;
      $726 = HEAP32[($0 + $14 | 0) >> 2] | 0;
      $14 = $12;
      i64toi32_i32$0 = $12;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $729$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $25$hi;
      i64toi32_i32$2 = $729$hi;
      i64toi32_i32$0 = $25$hi;
      i64toi32_i32$0 = __wasm_i64_mul($12 | 0, i64toi32_i32$2 | 0, $25 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $731 = i64toi32_i32$0;
      $731$hi = i64toi32_i32$2;
      i64toi32_i32$0 = $13;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $733$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $26$hi;
      i64toi32_i32$2 = $733$hi;
      i64toi32_i32$0 = $26$hi;
      i64toi32_i32$0 = __wasm_i64_mul($13 | 0, i64toi32_i32$2 | 0, $26 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $735 = i64toi32_i32$0;
      $735$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $731$hi;
      i64toi32_i32$4 = $731;
      i64toi32_i32$0 = $735$hi;
      i64toi32_i32$3 = $735;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $736$hi = i64toi32_i32$1;
      $12 = $11;
      i64toi32_i32$4 = $11;
      i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
      $739$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $24$hi;
      i64toi32_i32$1 = $739$hi;
      i64toi32_i32$4 = $24$hi;
      i64toi32_i32$4 = __wasm_i64_mul($11 | 0, i64toi32_i32$1 | 0, $24 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $741 = i64toi32_i32$4;
      $741$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $736$hi;
      i64toi32_i32$2 = i64toi32_i32$5;
      i64toi32_i32$4 = $741$hi;
      i64toi32_i32$3 = $741;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $742$hi = i64toi32_i32$5;
      $11 = $10;
      i64toi32_i32$2 = $10;
      i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
      $745$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $23$hi;
      i64toi32_i32$5 = $745$hi;
      i64toi32_i32$2 = $23$hi;
      i64toi32_i32$2 = __wasm_i64_mul($10 | 0, i64toi32_i32$5 | 0, $23 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $747 = i64toi32_i32$2;
      $747$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $742$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$2 = $747$hi;
      i64toi32_i32$3 = $747;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $748$hi = i64toi32_i32$0;
      $10 = $9;
      i64toi32_i32$1 = $9;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $751$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $22$hi;
      i64toi32_i32$0 = $751$hi;
      i64toi32_i32$1 = $22$hi;
      i64toi32_i32$1 = __wasm_i64_mul($9 | 0, i64toi32_i32$0 | 0, $22 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $753 = i64toi32_i32$1;
      $753$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $748$hi;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$1 = $753$hi;
      i64toi32_i32$3 = $753;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $754$hi = i64toi32_i32$4;
      $9 = $7;
      i64toi32_i32$5 = $7;
      i64toi32_i32$4 = i64toi32_i32$5 >> 31 | 0;
      $757$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$4 = $757$hi;
      i64toi32_i32$5 = $21$hi;
      i64toi32_i32$5 = __wasm_i64_mul($7 | 0, i64toi32_i32$4 | 0, $21 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $759 = i64toi32_i32$5;
      $759$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $754$hi;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$5 = $759$hi;
      i64toi32_i32$3 = $759;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $760$hi = i64toi32_i32$2;
      $7 = $8;
      i64toi32_i32$0 = $7;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $763$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $20$hi;
      i64toi32_i32$2 = $763$hi;
      i64toi32_i32$0 = $20$hi;
      i64toi32_i32$0 = __wasm_i64_mul($7 | 0, i64toi32_i32$2 | 0, $20 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $765 = i64toi32_i32$0;
      $765$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $760$hi;
      i64toi32_i32$4 = i64toi32_i32$1;
      i64toi32_i32$0 = $765$hi;
      i64toi32_i32$3 = $765;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $766$hi = i64toi32_i32$1;
      $8 = $3;
      i64toi32_i32$4 = $3;
      i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
      $769$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$1 = $769$hi;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$4 = __wasm_i64_mul($3 | 0, i64toi32_i32$1 | 0, $19 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $771 = i64toi32_i32$4;
      $771$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $766$hi;
      i64toi32_i32$2 = i64toi32_i32$5;
      i64toi32_i32$4 = $771$hi;
      i64toi32_i32$3 = $771;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $772$hi = i64toi32_i32$5;
      $3 = $6;
      i64toi32_i32$2 = $3;
      i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
      $775$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$5 = $775$hi;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$2 = __wasm_i64_mul($3 | 0, i64toi32_i32$5 | 0, $17 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $777 = i64toi32_i32$2;
      $777$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $772$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$2 = $777$hi;
      i64toi32_i32$3 = $777;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $778$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = $778$hi;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$3 = $18;
      i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
       $560 = i64toi32_i32$0 >> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$0 >> i64toi32_i32$2 | 0;
       $560 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$2 | 0) | 0;
      }
      $6 = $726 + $560 | 0;
      HEAP32[$722 >> 2] = $6;
      $13 = $14;
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($1 | 0)) {
       continue label$31
      }
      break label$1;
     };
    }
    if (($1 | 0) < (1 | 0)) {
     break label$1
    }
    $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
    $3 = HEAP32[($5 + -8 | 0) >> 2] | 0;
    $8 = HEAP32[($5 + -12 | 0) >> 2] | 0;
    $7 = HEAP32[($5 + -16 | 0) >> 2] | 0;
    $9 = HEAP32[($5 + -20 | 0) >> 2] | 0;
    $10 = HEAP32[($5 + -24 | 0) >> 2] | 0;
    $11 = HEAP32[($5 + -28 | 0) >> 2] | 0;
    $12 = HEAP32[($5 + -32 | 0) >> 2] | 0;
    $13 = HEAP32[($5 + -36 | 0) >> 2] | 0;
    $14 = HEAP32[($5 + -40 | 0) >> 2] | 0;
    i64toi32_i32$1 = 0;
    $18 = $4;
    $18$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $2;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
    $17 = i64toi32_i32$1;
    $17$hi = i64toi32_i32$5;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
    $19 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
    $20 = i64toi32_i32$1;
    $20$hi = i64toi32_i32$5;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
    $21 = i64toi32_i32$5;
    $21$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
    $22 = i64toi32_i32$1;
    $22$hi = i64toi32_i32$5;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
    $23 = i64toi32_i32$5;
    $23$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
    $24 = i64toi32_i32$1;
    $24$hi = i64toi32_i32$5;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
    $25 = i64toi32_i32$5;
    $25$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
    $26 = i64toi32_i32$1;
    $26$hi = i64toi32_i32$5;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
    $27 = i64toi32_i32$5;
    $27$hi = i64toi32_i32$1;
    $2 = 0;
    label$32 : while (1) {
     $15 = $2 << 2 | 0;
     $848 = $5 + $15 | 0;
     $852 = HEAP32[($0 + $15 | 0) >> 2] | 0;
     $15 = $13;
     i64toi32_i32$5 = $13;
     i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
     $855$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $26$hi;
     i64toi32_i32$1 = $855$hi;
     i64toi32_i32$5 = $26$hi;
     i64toi32_i32$5 = __wasm_i64_mul($13 | 0, i64toi32_i32$1 | 0, $26 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $857 = i64toi32_i32$5;
     $857$hi = i64toi32_i32$1;
     i64toi32_i32$5 = $14;
     i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
     $859$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $27$hi;
     i64toi32_i32$1 = $859$hi;
     i64toi32_i32$5 = $27$hi;
     i64toi32_i32$5 = __wasm_i64_mul($14 | 0, i64toi32_i32$1 | 0, $27 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $861 = i64toi32_i32$5;
     $861$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $857$hi;
     i64toi32_i32$0 = $857;
     i64toi32_i32$5 = $861$hi;
     i64toi32_i32$3 = $861;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $862$hi = i64toi32_i32$4;
     $13 = $12;
     i64toi32_i32$0 = $12;
     i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
     $865$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $25$hi;
     i64toi32_i32$4 = $865$hi;
     i64toi32_i32$0 = $25$hi;
     i64toi32_i32$0 = __wasm_i64_mul($12 | 0, i64toi32_i32$4 | 0, $25 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $867 = i64toi32_i32$0;
     $867$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $862$hi;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$0 = $867$hi;
     i64toi32_i32$3 = $867;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $868$hi = i64toi32_i32$2;
     $12 = $11;
     i64toi32_i32$1 = $11;
     i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
     $871$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $24$hi;
     i64toi32_i32$2 = $871$hi;
     i64toi32_i32$1 = $24$hi;
     i64toi32_i32$1 = __wasm_i64_mul($11 | 0, i64toi32_i32$2 | 0, $24 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $873 = i64toi32_i32$1;
     $873$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $868$hi;
     i64toi32_i32$4 = i64toi32_i32$5;
     i64toi32_i32$1 = $873$hi;
     i64toi32_i32$3 = $873;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $874$hi = i64toi32_i32$5;
     $11 = $10;
     i64toi32_i32$4 = $10;
     i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
     $877$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $23$hi;
     i64toi32_i32$5 = $877$hi;
     i64toi32_i32$4 = $23$hi;
     i64toi32_i32$4 = __wasm_i64_mul($10 | 0, i64toi32_i32$5 | 0, $23 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $879 = i64toi32_i32$4;
     $879$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $874$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$4 = $879$hi;
     i64toi32_i32$3 = $879;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $880$hi = i64toi32_i32$0;
     $10 = $9;
     i64toi32_i32$2 = $9;
     i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
     $883$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $22$hi;
     i64toi32_i32$0 = $883$hi;
     i64toi32_i32$2 = $22$hi;
     i64toi32_i32$2 = __wasm_i64_mul($9 | 0, i64toi32_i32$0 | 0, $22 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $885 = i64toi32_i32$2;
     $885$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $880$hi;
     i64toi32_i32$5 = i64toi32_i32$1;
     i64toi32_i32$2 = $885$hi;
     i64toi32_i32$3 = $885;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $886$hi = i64toi32_i32$1;
     $9 = $7;
     i64toi32_i32$5 = $7;
     i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
     $889$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $21$hi;
     i64toi32_i32$1 = $889$hi;
     i64toi32_i32$5 = $21$hi;
     i64toi32_i32$5 = __wasm_i64_mul($7 | 0, i64toi32_i32$1 | 0, $21 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $891 = i64toi32_i32$5;
     $891$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $886$hi;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$5 = $891$hi;
     i64toi32_i32$3 = $891;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $892$hi = i64toi32_i32$4;
     $7 = $8;
     i64toi32_i32$0 = $7;
     i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
     $895$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $20$hi;
     i64toi32_i32$4 = $895$hi;
     i64toi32_i32$0 = $20$hi;
     i64toi32_i32$0 = __wasm_i64_mul($7 | 0, i64toi32_i32$4 | 0, $20 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $897 = i64toi32_i32$0;
     $897$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $892$hi;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$0 = $897$hi;
     i64toi32_i32$3 = $897;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $898$hi = i64toi32_i32$2;
     $8 = $3;
     i64toi32_i32$1 = $3;
     i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
     $901$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $19$hi;
     i64toi32_i32$2 = $901$hi;
     i64toi32_i32$1 = $19$hi;
     i64toi32_i32$1 = __wasm_i64_mul($3 | 0, i64toi32_i32$2 | 0, $19 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $903 = i64toi32_i32$1;
     $903$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $898$hi;
     i64toi32_i32$4 = i64toi32_i32$5;
     i64toi32_i32$1 = $903$hi;
     i64toi32_i32$3 = $903;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $904$hi = i64toi32_i32$5;
     $3 = $6;
     i64toi32_i32$4 = $3;
     i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
     $907$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$5 = $907$hi;
     i64toi32_i32$4 = $17$hi;
     i64toi32_i32$4 = __wasm_i64_mul($3 | 0, i64toi32_i32$5 | 0, $17 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $909 = i64toi32_i32$4;
     $909$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $904$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$4 = $909$hi;
     i64toi32_i32$3 = $909;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $910$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$0 = $910$hi;
     i64toi32_i32$5 = i64toi32_i32$1;
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$3 = $18;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $561 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
      $561 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
     }
     $6 = $852 + $561 | 0;
     HEAP32[$848 >> 2] = $6;
     $14 = $15;
     $2 = $2 + 1 | 0;
     if (($2 | 0) != ($1 | 0)) {
      continue label$32
     }
     break label$1;
    };
   }
   label$33 : {
    if ($3 >>> 0 < 5 >>> 0) {
     break label$33
    }
    label$34 : {
     if ($3 >>> 0 < 7 >>> 0) {
      break label$34
     }
     label$35 : {
      if (($3 | 0) == (8 | 0)) {
       break label$35
      }
      if (($1 | 0) < (1 | 0)) {
       break label$1
      }
      $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
      $3 = HEAP32[($5 + -8 | 0) >> 2] | 0;
      $8 = HEAP32[($5 + -12 | 0) >> 2] | 0;
      $7 = HEAP32[($5 + -16 | 0) >> 2] | 0;
      $9 = HEAP32[($5 + -20 | 0) >> 2] | 0;
      $10 = HEAP32[($5 + -24 | 0) >> 2] | 0;
      $11 = HEAP32[($5 + -28 | 0) >> 2] | 0;
      i64toi32_i32$2 = 0;
      $18 = $4;
      $18$hi = i64toi32_i32$2;
      i64toi32_i32$0 = $2;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
      $17 = i64toi32_i32$2;
      $17$hi = i64toi32_i32$5;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
      $19 = i64toi32_i32$5;
      $19$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
      $20 = i64toi32_i32$2;
      $20$hi = i64toi32_i32$5;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
      $21 = i64toi32_i32$5;
      $21$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
      $22 = i64toi32_i32$2;
      $22$hi = i64toi32_i32$5;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
      $23 = i64toi32_i32$5;
      $23$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
      $24 = i64toi32_i32$2;
      $24$hi = i64toi32_i32$5;
      $2 = 0;
      label$36 : while (1) {
       $12 = $2 << 2 | 0;
       $971 = $5 + $12 | 0;
       $975 = HEAP32[($0 + $12 | 0) >> 2] | 0;
       $12 = $10;
       i64toi32_i32$2 = $10;
       i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
       $978$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $23$hi;
       i64toi32_i32$5 = $978$hi;
       i64toi32_i32$2 = $23$hi;
       i64toi32_i32$2 = __wasm_i64_mul($10 | 0, i64toi32_i32$5 | 0, $23 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $980 = i64toi32_i32$2;
       $980$hi = i64toi32_i32$5;
       i64toi32_i32$2 = $11;
       i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
       $982$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $24$hi;
       i64toi32_i32$5 = $982$hi;
       i64toi32_i32$2 = $24$hi;
       i64toi32_i32$2 = __wasm_i64_mul($11 | 0, i64toi32_i32$5 | 0, $24 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $984 = i64toi32_i32$2;
       $984$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $980$hi;
       i64toi32_i32$0 = $980;
       i64toi32_i32$2 = $984$hi;
       i64toi32_i32$3 = $984;
       i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $985$hi = i64toi32_i32$1;
       $10 = $9;
       i64toi32_i32$0 = $9;
       i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
       $988$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $22$hi;
       i64toi32_i32$1 = $988$hi;
       i64toi32_i32$0 = $22$hi;
       i64toi32_i32$0 = __wasm_i64_mul($9 | 0, i64toi32_i32$1 | 0, $22 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $990 = i64toi32_i32$0;
       $990$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $985$hi;
       i64toi32_i32$5 = i64toi32_i32$4;
       i64toi32_i32$0 = $990$hi;
       i64toi32_i32$3 = $990;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $991$hi = i64toi32_i32$4;
       $9 = $7;
       i64toi32_i32$5 = $7;
       i64toi32_i32$4 = i64toi32_i32$5 >> 31 | 0;
       $994$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $21$hi;
       i64toi32_i32$4 = $994$hi;
       i64toi32_i32$5 = $21$hi;
       i64toi32_i32$5 = __wasm_i64_mul($7 | 0, i64toi32_i32$4 | 0, $21 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $996 = i64toi32_i32$5;
       $996$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $991$hi;
       i64toi32_i32$1 = i64toi32_i32$2;
       i64toi32_i32$5 = $996$hi;
       i64toi32_i32$3 = $996;
       i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $997$hi = i64toi32_i32$2;
       $7 = $8;
       i64toi32_i32$1 = $7;
       i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
       $1000$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $20$hi;
       i64toi32_i32$2 = $1000$hi;
       i64toi32_i32$1 = $20$hi;
       i64toi32_i32$1 = __wasm_i64_mul($7 | 0, i64toi32_i32$2 | 0, $20 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $1002 = i64toi32_i32$1;
       $1002$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $997$hi;
       i64toi32_i32$4 = i64toi32_i32$0;
       i64toi32_i32$1 = $1002$hi;
       i64toi32_i32$3 = $1002;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $1003$hi = i64toi32_i32$0;
       $8 = $3;
       i64toi32_i32$4 = $3;
       i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
       $1006$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $19$hi;
       i64toi32_i32$0 = $1006$hi;
       i64toi32_i32$4 = $19$hi;
       i64toi32_i32$4 = __wasm_i64_mul($3 | 0, i64toi32_i32$0 | 0, $19 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $1008 = i64toi32_i32$4;
       $1008$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $1003$hi;
       i64toi32_i32$2 = i64toi32_i32$5;
       i64toi32_i32$4 = $1008$hi;
       i64toi32_i32$3 = $1008;
       i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $1009$hi = i64toi32_i32$5;
       $3 = $6;
       i64toi32_i32$2 = $3;
       i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
       $1012$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $17$hi;
       i64toi32_i32$5 = $1012$hi;
       i64toi32_i32$2 = $17$hi;
       i64toi32_i32$2 = __wasm_i64_mul($3 | 0, i64toi32_i32$5 | 0, $17 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $1014 = i64toi32_i32$2;
       $1014$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $1009$hi;
       i64toi32_i32$0 = i64toi32_i32$1;
       i64toi32_i32$2 = $1014$hi;
       i64toi32_i32$3 = $1014;
       i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $1015$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $18$hi;
       i64toi32_i32$1 = $1015$hi;
       i64toi32_i32$5 = i64toi32_i32$4;
       i64toi32_i32$0 = $18$hi;
       i64toi32_i32$3 = $18;
       i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
        $562 = i64toi32_i32$1 >> i64toi32_i32$2 | 0;
       } else {
        i64toi32_i32$0 = i64toi32_i32$1 >> i64toi32_i32$2 | 0;
        $562 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$2 | 0) | 0;
       }
       $6 = $975 + $562 | 0;
       HEAP32[$971 >> 2] = $6;
       $11 = $12;
       $2 = $2 + 1 | 0;
       if (($2 | 0) != ($1 | 0)) {
        continue label$36
       }
       break label$1;
      };
     }
     if (($1 | 0) < (1 | 0)) {
      break label$1
     }
     $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
     $3 = HEAP32[($5 + -8 | 0) >> 2] | 0;
     $8 = HEAP32[($5 + -12 | 0) >> 2] | 0;
     $7 = HEAP32[($5 + -16 | 0) >> 2] | 0;
     $9 = HEAP32[($5 + -20 | 0) >> 2] | 0;
     $10 = HEAP32[($5 + -24 | 0) >> 2] | 0;
     $11 = HEAP32[($5 + -28 | 0) >> 2] | 0;
     $12 = HEAP32[($5 + -32 | 0) >> 2] | 0;
     i64toi32_i32$0 = 0;
     $18 = $4;
     $18$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $2;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
     $17 = i64toi32_i32$0;
     $17$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
     $19 = i64toi32_i32$5;
     $19$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
     i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
     $20 = i64toi32_i32$0;
     $20$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
     $21 = i64toi32_i32$5;
     $21$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
     i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
     $22 = i64toi32_i32$0;
     $22$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
     $23 = i64toi32_i32$5;
     $23$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
     i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
     $24 = i64toi32_i32$0;
     $24$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
     $25 = i64toi32_i32$5;
     $25$hi = i64toi32_i32$0;
     $2 = 0;
     label$37 : while (1) {
      $13 = $2 << 2 | 0;
      $1075 = $5 + $13 | 0;
      $1079 = HEAP32[($0 + $13 | 0) >> 2] | 0;
      $13 = $11;
      i64toi32_i32$5 = $11;
      i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
      $1082$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $24$hi;
      i64toi32_i32$0 = $1082$hi;
      i64toi32_i32$5 = $24$hi;
      i64toi32_i32$5 = __wasm_i64_mul($11 | 0, i64toi32_i32$0 | 0, $24 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $1084 = i64toi32_i32$5;
      $1084$hi = i64toi32_i32$0;
      i64toi32_i32$5 = $12;
      i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
      $1086$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $25$hi;
      i64toi32_i32$0 = $1086$hi;
      i64toi32_i32$5 = $25$hi;
      i64toi32_i32$5 = __wasm_i64_mul($12 | 0, i64toi32_i32$0 | 0, $25 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $1088 = i64toi32_i32$5;
      $1088$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1084$hi;
      i64toi32_i32$1 = $1084;
      i64toi32_i32$5 = $1088$hi;
      i64toi32_i32$3 = $1088;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $1089$hi = i64toi32_i32$4;
      $11 = $10;
      i64toi32_i32$1 = $10;
      i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
      $1092$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $23$hi;
      i64toi32_i32$4 = $1092$hi;
      i64toi32_i32$1 = $23$hi;
      i64toi32_i32$1 = __wasm_i64_mul($10 | 0, i64toi32_i32$4 | 0, $23 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $1094 = i64toi32_i32$1;
      $1094$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1089$hi;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$1 = $1094$hi;
      i64toi32_i32$3 = $1094;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $1095$hi = i64toi32_i32$2;
      $10 = $9;
      i64toi32_i32$0 = $9;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $1098$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $22$hi;
      i64toi32_i32$2 = $1098$hi;
      i64toi32_i32$0 = $22$hi;
      i64toi32_i32$0 = __wasm_i64_mul($9 | 0, i64toi32_i32$2 | 0, $22 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $1100 = i64toi32_i32$0;
      $1100$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1095$hi;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$0 = $1100$hi;
      i64toi32_i32$3 = $1100;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $1101$hi = i64toi32_i32$5;
      $9 = $7;
      i64toi32_i32$4 = $7;
      i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
      $1104$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $21$hi;
      i64toi32_i32$5 = $1104$hi;
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$4 = __wasm_i64_mul($7 | 0, i64toi32_i32$5 | 0, $21 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $1106 = i64toi32_i32$4;
      $1106$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $1101$hi;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$4 = $1106$hi;
      i64toi32_i32$3 = $1106;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $1107$hi = i64toi32_i32$1;
      $7 = $8;
      i64toi32_i32$2 = $7;
      i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
      $1110$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $20$hi;
      i64toi32_i32$1 = $1110$hi;
      i64toi32_i32$2 = $20$hi;
      i64toi32_i32$2 = __wasm_i64_mul($7 | 0, i64toi32_i32$1 | 0, $20 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $1112 = i64toi32_i32$2;
      $1112$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1107$hi;
      i64toi32_i32$5 = i64toi32_i32$0;
      i64toi32_i32$2 = $1112$hi;
      i64toi32_i32$3 = $1112;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $1113$hi = i64toi32_i32$0;
      $8 = $3;
      i64toi32_i32$5 = $3;
      i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
      $1116$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$0 = $1116$hi;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$5 = __wasm_i64_mul($3 | 0, i64toi32_i32$0 | 0, $19 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $1118 = i64toi32_i32$5;
      $1118$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1113$hi;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$5 = $1118$hi;
      i64toi32_i32$3 = $1118;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $1119$hi = i64toi32_i32$4;
      $3 = $6;
      i64toi32_i32$1 = $3;
      i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
      $1122$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = $1122$hi;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$1 = __wasm_i64_mul($3 | 0, i64toi32_i32$4 | 0, $17 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $1124 = i64toi32_i32$1;
      $1124$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1119$hi;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$1 = $1124$hi;
      i64toi32_i32$3 = $1124;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $1125$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$2 = $1125$hi;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$3 = $18;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
       $563 = i64toi32_i32$2 >> i64toi32_i32$1 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$2 >> i64toi32_i32$1 | 0;
       $563 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
      }
      $6 = $1079 + $563 | 0;
      HEAP32[$1075 >> 2] = $6;
      $12 = $13;
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($1 | 0)) {
       continue label$37
      }
      break label$1;
     };
    }
    label$38 : {
     if (($3 | 0) == (6 | 0)) {
      break label$38
     }
     if (($1 | 0) < (1 | 0)) {
      break label$1
     }
     $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
     $3 = HEAP32[($5 + -8 | 0) >> 2] | 0;
     $8 = HEAP32[($5 + -12 | 0) >> 2] | 0;
     $7 = HEAP32[($5 + -16 | 0) >> 2] | 0;
     $9 = HEAP32[($5 + -20 | 0) >> 2] | 0;
     i64toi32_i32$0 = 0;
     $18 = $4;
     $18$hi = i64toi32_i32$0;
     i64toi32_i32$2 = $2;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
     $17 = i64toi32_i32$0;
     $17$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
     $19 = i64toi32_i32$4;
     $19$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
     i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
     $20 = i64toi32_i32$0;
     $20$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
     $21 = i64toi32_i32$4;
     $21$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
     i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
     $22 = i64toi32_i32$0;
     $22$hi = i64toi32_i32$4;
     $2 = 0;
     label$39 : while (1) {
      $10 = $2 << 2 | 0;
      $1172 = $5 + $10 | 0;
      $1176 = HEAP32[($0 + $10 | 0) >> 2] | 0;
      $10 = $7;
      i64toi32_i32$0 = $7;
      i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
      $1179$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$4 = $1179$hi;
      i64toi32_i32$0 = $21$hi;
      i64toi32_i32$0 = __wasm_i64_mul($7 | 0, i64toi32_i32$4 | 0, $21 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $1181 = i64toi32_i32$0;
      $1181$hi = i64toi32_i32$4;
      i64toi32_i32$0 = $9;
      i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
      $1183$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $22$hi;
      i64toi32_i32$4 = $1183$hi;
      i64toi32_i32$0 = $22$hi;
      i64toi32_i32$0 = __wasm_i64_mul($9 | 0, i64toi32_i32$4 | 0, $22 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $1185 = i64toi32_i32$0;
      $1185$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1181$hi;
      i64toi32_i32$2 = $1181;
      i64toi32_i32$0 = $1185$hi;
      i64toi32_i32$3 = $1185;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $1186$hi = i64toi32_i32$5;
      $7 = $8;
      i64toi32_i32$2 = $7;
      i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
      $1189$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$5 = $1189$hi;
      i64toi32_i32$2 = $20$hi;
      i64toi32_i32$2 = __wasm_i64_mul($7 | 0, i64toi32_i32$5 | 0, $20 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $1191 = i64toi32_i32$2;
      $1191$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $1186$hi;
      i64toi32_i32$4 = i64toi32_i32$1;
      i64toi32_i32$2 = $1191$hi;
      i64toi32_i32$3 = $1191;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $1192$hi = i64toi32_i32$1;
      $8 = $3;
      i64toi32_i32$4 = $3;
      i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
      $1195$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$1 = $1195$hi;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$4 = __wasm_i64_mul($3 | 0, i64toi32_i32$1 | 0, $19 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $1197 = i64toi32_i32$4;
      $1197$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1192$hi;
      i64toi32_i32$5 = i64toi32_i32$0;
      i64toi32_i32$4 = $1197$hi;
      i64toi32_i32$3 = $1197;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $1198$hi = i64toi32_i32$0;
      $3 = $6;
      i64toi32_i32$5 = $3;
      i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
      $1201$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$0 = $1201$hi;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$5 = __wasm_i64_mul($3 | 0, i64toi32_i32$0 | 0, $17 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $1203 = i64toi32_i32$5;
      $1203$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1198$hi;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$5 = $1203$hi;
      i64toi32_i32$3 = $1203;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $1204$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$2 = $1204$hi;
      i64toi32_i32$0 = i64toi32_i32$4;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$3 = $18;
      i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
       $564 = i64toi32_i32$2 >> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >> i64toi32_i32$5 | 0;
       $564 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$5 | 0) | 0;
      }
      $6 = $1176 + $564 | 0;
      HEAP32[$1172 >> 2] = $6;
      $9 = $10;
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($1 | 0)) {
       continue label$39
      }
      break label$1;
     };
    }
    if (($1 | 0) < (1 | 0)) {
     break label$1
    }
    $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
    $3 = HEAP32[($5 + -8 | 0) >> 2] | 0;
    $8 = HEAP32[($5 + -12 | 0) >> 2] | 0;
    $7 = HEAP32[($5 + -16 | 0) >> 2] | 0;
    $9 = HEAP32[($5 + -20 | 0) >> 2] | 0;
    $10 = HEAP32[($5 + -24 | 0) >> 2] | 0;
    i64toi32_i32$1 = 0;
    $18 = $4;
    $18$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $2;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $17 = i64toi32_i32$1;
    $17$hi = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $19 = i64toi32_i32$0;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $20 = i64toi32_i32$1;
    $20$hi = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $21 = i64toi32_i32$0;
    $21$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $22 = i64toi32_i32$1;
    $22$hi = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $23 = i64toi32_i32$0;
    $23$hi = i64toi32_i32$1;
    $2 = 0;
    label$40 : while (1) {
     $11 = $2 << 2 | 0;
     $1254 = $5 + $11 | 0;
     $1258 = HEAP32[($0 + $11 | 0) >> 2] | 0;
     $11 = $9;
     i64toi32_i32$0 = $9;
     i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
     $1261$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $22$hi;
     i64toi32_i32$1 = $1261$hi;
     i64toi32_i32$0 = $22$hi;
     i64toi32_i32$0 = __wasm_i64_mul($9 | 0, i64toi32_i32$1 | 0, $22 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $1263 = i64toi32_i32$0;
     $1263$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $10;
     i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
     $1265$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $23$hi;
     i64toi32_i32$1 = $1265$hi;
     i64toi32_i32$0 = $23$hi;
     i64toi32_i32$0 = __wasm_i64_mul($10 | 0, i64toi32_i32$1 | 0, $23 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $1267 = i64toi32_i32$0;
     $1267$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1263$hi;
     i64toi32_i32$2 = $1263;
     i64toi32_i32$0 = $1267$hi;
     i64toi32_i32$3 = $1267;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $1268$hi = i64toi32_i32$4;
     $9 = $7;
     i64toi32_i32$2 = $7;
     i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
     $1271$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $21$hi;
     i64toi32_i32$4 = $1271$hi;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$2 = __wasm_i64_mul($7 | 0, i64toi32_i32$4 | 0, $21 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $1273 = i64toi32_i32$2;
     $1273$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1268$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$2 = $1273$hi;
     i64toi32_i32$3 = $1273;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $1274$hi = i64toi32_i32$5;
     $7 = $8;
     i64toi32_i32$1 = $7;
     i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
     $1277$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$5 = $1277$hi;
     i64toi32_i32$1 = $20$hi;
     i64toi32_i32$1 = __wasm_i64_mul($7 | 0, i64toi32_i32$5 | 0, $20 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $1279 = i64toi32_i32$1;
     $1279$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $1274$hi;
     i64toi32_i32$4 = i64toi32_i32$0;
     i64toi32_i32$1 = $1279$hi;
     i64toi32_i32$3 = $1279;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $1280$hi = i64toi32_i32$0;
     $8 = $3;
     i64toi32_i32$4 = $3;
     i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
     $1283$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $19$hi;
     i64toi32_i32$0 = $1283$hi;
     i64toi32_i32$4 = $19$hi;
     i64toi32_i32$4 = __wasm_i64_mul($3 | 0, i64toi32_i32$0 | 0, $19 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $1285 = i64toi32_i32$4;
     $1285$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1280$hi;
     i64toi32_i32$5 = i64toi32_i32$2;
     i64toi32_i32$4 = $1285$hi;
     i64toi32_i32$3 = $1285;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $1286$hi = i64toi32_i32$2;
     $3 = $6;
     i64toi32_i32$5 = $3;
     i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
     $1289$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$2 = $1289$hi;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$5 = __wasm_i64_mul($3 | 0, i64toi32_i32$2 | 0, $17 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $1291 = i64toi32_i32$5;
     $1291$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1286$hi;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$5 = $1291$hi;
     i64toi32_i32$3 = $1291;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $1292$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$1 = $1292$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$3 = $18;
     i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $565 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
      $565 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
     }
     $6 = $1258 + $565 | 0;
     HEAP32[$1254 >> 2] = $6;
     $10 = $11;
     $2 = $2 + 1 | 0;
     if (($2 | 0) != ($1 | 0)) {
      continue label$40
     }
     break label$1;
    };
   }
   label$41 : {
    if ($3 >>> 0 < 3 >>> 0) {
     break label$41
    }
    label$42 : {
     if (($3 | 0) == (4 | 0)) {
      break label$42
     }
     if (($1 | 0) < (1 | 0)) {
      break label$1
     }
     $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
     $3 = HEAP32[($5 + -8 | 0) >> 2] | 0;
     $8 = HEAP32[($5 + -12 | 0) >> 2] | 0;
     i64toi32_i32$0 = 0;
     $18 = $4;
     $18$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $2;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
     $17 = i64toi32_i32$0;
     $17$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
     $19 = i64toi32_i32$2;
     $19$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
     $20 = i64toi32_i32$0;
     $20$hi = i64toi32_i32$2;
     $2 = 0;
     label$43 : while (1) {
      $7 = $2 << 2 | 0;
      $1331 = $5 + $7 | 0;
      $1335 = HEAP32[($0 + $7 | 0) >> 2] | 0;
      $7 = $3;
      i64toi32_i32$0 = $3;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $1338$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$2 = $1338$hi;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$0 = __wasm_i64_mul($3 | 0, i64toi32_i32$2 | 0, $19 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $1340 = i64toi32_i32$0;
      $1340$hi = i64toi32_i32$2;
      i64toi32_i32$0 = $8;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $1342$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $20$hi;
      i64toi32_i32$2 = $1342$hi;
      i64toi32_i32$0 = $20$hi;
      i64toi32_i32$0 = __wasm_i64_mul($8 | 0, i64toi32_i32$2 | 0, $20 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $1344 = i64toi32_i32$0;
      $1344$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1340$hi;
      i64toi32_i32$1 = $1340;
      i64toi32_i32$0 = $1344$hi;
      i64toi32_i32$3 = $1344;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $1345$hi = i64toi32_i32$4;
      $3 = $6;
      i64toi32_i32$1 = $3;
      i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
      $1348$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = $1348$hi;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$1 = __wasm_i64_mul($3 | 0, i64toi32_i32$4 | 0, $17 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $1350 = i64toi32_i32$1;
      $1350$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1345$hi;
      i64toi32_i32$2 = i64toi32_i32$5;
      i64toi32_i32$1 = $1350$hi;
      i64toi32_i32$3 = $1350;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $1351$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $1351$hi;
      i64toi32_i32$4 = i64toi32_i32$0;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$3 = $18;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
       $566 = i64toi32_i32$5 >> i64toi32_i32$1 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$5 >> i64toi32_i32$1 | 0;
       $566 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
      }
      $6 = $1335 + $566 | 0;
      HEAP32[$1331 >> 2] = $6;
      $8 = $7;
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($1 | 0)) {
       continue label$43
      }
      break label$1;
     };
    }
    if (($1 | 0) < (1 | 0)) {
     break label$1
    }
    $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
    $3 = HEAP32[($5 + -8 | 0) >> 2] | 0;
    $8 = HEAP32[($5 + -12 | 0) >> 2] | 0;
    $7 = HEAP32[($5 + -16 | 0) >> 2] | 0;
    i64toi32_i32$2 = 0;
    $18 = $4;
    $18$hi = i64toi32_i32$2;
    i64toi32_i32$5 = $2;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
    $17 = i64toi32_i32$2;
    $17$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
    $19 = i64toi32_i32$4;
    $19$hi = i64toi32_i32$2;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] | 0;
    i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
    $20 = i64toi32_i32$2;
    $20$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] | 0;
    i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
    $21 = i64toi32_i32$4;
    $21$hi = i64toi32_i32$2;
    $2 = 0;
    label$44 : while (1) {
     $9 = $2 << 2 | 0;
     $1391 = $5 + $9 | 0;
     $1395 = HEAP32[($0 + $9 | 0) >> 2] | 0;
     $9 = $8;
     i64toi32_i32$4 = $9;
     i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
     $1398$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $20$hi;
     i64toi32_i32$2 = $1398$hi;
     i64toi32_i32$4 = $20$hi;
     i64toi32_i32$4 = __wasm_i64_mul($9 | 0, i64toi32_i32$2 | 0, $20 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $1400 = i64toi32_i32$4;
     $1400$hi = i64toi32_i32$2;
     i64toi32_i32$4 = $7;
     i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
     $1402$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$2 = $1402$hi;
     i64toi32_i32$4 = $21$hi;
     i64toi32_i32$4 = __wasm_i64_mul($7 | 0, i64toi32_i32$2 | 0, $21 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $1404 = i64toi32_i32$4;
     $1404$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1400$hi;
     i64toi32_i32$5 = $1400;
     i64toi32_i32$4 = $1404$hi;
     i64toi32_i32$3 = $1404;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $1405$hi = i64toi32_i32$0;
     $8 = $3;
     i64toi32_i32$5 = $3;
     i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
     $1408$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $19$hi;
     i64toi32_i32$0 = $1408$hi;
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$5 = __wasm_i64_mul($3 | 0, i64toi32_i32$0 | 0, $19 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $1410 = i64toi32_i32$5;
     $1410$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1405$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$5 = $1410$hi;
     i64toi32_i32$3 = $1410;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $1411$hi = i64toi32_i32$1;
     $3 = $6;
     i64toi32_i32$2 = $3;
     i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
     $1414$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$1 = $1414$hi;
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$2 = __wasm_i64_mul($3 | 0, i64toi32_i32$1 | 0, $17 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $1416 = i64toi32_i32$2;
     $1416$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1411$hi;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$2 = $1416$hi;
     i64toi32_i32$3 = $1416;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $1417$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $18$hi;
     i64toi32_i32$4 = $1417$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$3 = $18;
     i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
      $567 = i64toi32_i32$4 >> i64toi32_i32$2 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$4 >> i64toi32_i32$2 | 0;
      $567 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
     }
     $6 = $1395 + $567 | 0;
     HEAP32[$1391 >> 2] = $6;
     $7 = $9;
     $2 = $2 + 1 | 0;
     if (($2 | 0) != ($1 | 0)) {
      continue label$44
     }
     break label$1;
    };
   }
   label$45 : {
    if (($3 | 0) == (2 | 0)) {
     break label$45
    }
    if (($1 | 0) < (1 | 0)) {
     break label$1
    }
    $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
    i64toi32_i32$0 = 0;
    $18 = $4;
    $18$hi = i64toi32_i32$0;
    i64toi32_i32$4 = $2;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $17 = i64toi32_i32$0;
    $17$hi = i64toi32_i32$1;
    $2 = 0;
    label$46 : while (1) {
     $3 = $2 << 2 | 0;
     $1444 = $5 + $3 | 0;
     $1448 = HEAP32[($0 + $3 | 0) >> 2] | 0;
     i64toi32_i32$0 = $6;
     i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
     $1450$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$1 = $1450$hi;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$0 = __wasm_i64_mul($6 | 0, i64toi32_i32$1 | 0, $17 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $1452$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$1 = $1452$hi;
     i64toi32_i32$4 = i64toi32_i32$0;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$3 = $18;
     i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $568 = i64toi32_i32$1 >> i64toi32_i32$2 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$1 >> i64toi32_i32$2 | 0;
      $568 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
     }
     $6 = $1448 + $568 | 0;
     HEAP32[$1444 >> 2] = $6;
     $2 = $2 + 1 | 0;
     if (($2 | 0) != ($1 | 0)) {
      continue label$46
     }
     break label$1;
    };
   }
   if (($1 | 0) < (1 | 0)) {
    break label$1
   }
   $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
   $3 = HEAP32[($5 + -8 | 0) >> 2] | 0;
   i64toi32_i32$0 = 0;
   $18 = $4;
   $18$hi = i64toi32_i32$0;
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
   $17 = i64toi32_i32$0;
   $17$hi = i64toi32_i32$4;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
   $19 = i64toi32_i32$4;
   $19$hi = i64toi32_i32$0;
   $2 = 0;
   label$47 : while (1) {
    $8 = $2 << 2 | 0;
    $1481 = $5 + $8 | 0;
    $1485 = HEAP32[($0 + $8 | 0) >> 2] | 0;
    $8 = $6;
    i64toi32_i32$4 = $6;
    i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
    $1488$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $17$hi;
    i64toi32_i32$0 = $1488$hi;
    i64toi32_i32$4 = $17$hi;
    i64toi32_i32$4 = __wasm_i64_mul($6 | 0, i64toi32_i32$0 | 0, $17 | 0, i64toi32_i32$4 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $1490 = i64toi32_i32$4;
    $1490$hi = i64toi32_i32$0;
    i64toi32_i32$4 = $3;
    i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
    $1492$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $19$hi;
    i64toi32_i32$0 = $1492$hi;
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$4 = __wasm_i64_mul($3 | 0, i64toi32_i32$0 | 0, $19 | 0, i64toi32_i32$4 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $1494 = i64toi32_i32$4;
    $1494$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1490$hi;
    i64toi32_i32$1 = $1490;
    i64toi32_i32$4 = $1494$hi;
    i64toi32_i32$3 = $1494;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $1495$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$5 = $1495$hi;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$1 = $18$hi;
    i64toi32_i32$3 = $18;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
     $569 = i64toi32_i32$5 >> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$5 >> i64toi32_i32$4 | 0;
     $569 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $6 = $1485 + $569 | 0;
    HEAP32[$1481 >> 2] = $6;
    $3 = $8;
    $2 = $2 + 1 | 0;
    if (($2 | 0) != ($1 | 0)) {
     continue label$47
    }
    break label$47;
   };
  }
 }
 
 function FLAC__lpc_compute_expected_bits_per_residual_sample($0, $1) {
  $0 = +$0;
  $1 = $1 | 0;
  label$1 : {
   if ($0 > 0.0 ^ 1 | 0) {
    break label$1
   }
   $0 = +log(+(.5 / +($1 >>> 0) * $0)) * .5 / .6931471805599453;
   return +($0 >= 0.0 ? $0 : 0.0);
  }
  return +($0 < 0.0 ? 1.e+32 : 0.0);
 }
 
 function FLAC__lpc_compute_best_order($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $10 = 0.0, $4 = 0, $5 = 0, $9 = 0.0, $6 = 0, $7 = 0, $8 = 0.0;
  $4 = 1;
  label$1 : {
   if (!$1) {
    break label$1
   }
   $8 = .5 / +($2 >>> 0);
   $5 = 0;
   $9 = 4294967295.0;
   $6 = 0;
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      $10 = +HEAPF64[($0 + ($5 << 3 | 0) | 0) >> 3];
      if ($10 > 0.0 ^ 1 | 0) {
       break label$4
      }
      $10 = +log(+($8 * $10)) * .5 / .6931471805599453;
      $10 = $10 >= 0.0 ? $10 : 0.0;
      break label$3;
     }
     $10 = $10 < 0.0 ? 1.e+32 : 0.0;
    }
    $10 = $10 * +(($2 - $4 | 0) >>> 0) + +(Math_imul($4, $3) >>> 0);
    $7 = $10 < $9;
    $9 = $7 ? $10 : $9;
    $6 = $7 ? $5 : $6;
    $4 = $4 + 1 | 0;
    $5 = $5 + 1 | 0;
    if (($5 | 0) != ($1 | 0)) {
     continue label$2
    }
    break label$2;
   };
   $4 = $6 + 1 | 0;
  }
  return $4 | 0;
 }
 
 function strlen($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = $0;
  label$1 : {
   label$2 : {
    if (!($0 & 3 | 0)) {
     break label$2
    }
    label$3 : {
     if (HEAPU8[$0 >> 0] | 0) {
      break label$3
     }
     return $0 - $0 | 0 | 0;
    }
    $1 = $0;
    label$4 : while (1) {
     $1 = $1 + 1 | 0;
     if (!($1 & 3 | 0)) {
      break label$2
     }
     if (!(HEAPU8[$1 >> 0] | 0)) {
      break label$1
     }
     continue label$4;
    };
   }
   label$5 : while (1) {
    $2 = $1;
    $1 = $1 + 4 | 0;
    $3 = HEAP32[$2 >> 2] | 0;
    if (!((($3 ^ -1 | 0) & ($3 + -16843009 | 0) | 0) & -2139062144 | 0)) {
     continue label$5
    }
    break label$5;
   };
   label$6 : {
    if ($3 & 255 | 0) {
     break label$6
    }
    return $2 - $0 | 0 | 0;
   }
   label$7 : while (1) {
    $3 = HEAPU8[($2 + 1 | 0) >> 0] | 0;
    $1 = $2 + 1 | 0;
    $2 = $1;
    if ($3) {
     continue label$7
    }
    break label$7;
   };
  }
  return $1 - $0 | 0 | 0;
 }
 
 function __strchrnul($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0;
  label$1 : {
   label$2 : {
    $2 = $1 & 255 | 0;
    if (!$2) {
     break label$2
    }
    label$3 : {
     if (!($0 & 3 | 0)) {
      break label$3
     }
     label$4 : while (1) {
      $3 = HEAPU8[$0 >> 0] | 0;
      if (!$3) {
       break label$1
      }
      if (($3 | 0) == ($1 & 255 | 0 | 0)) {
       break label$1
      }
      $0 = $0 + 1 | 0;
      if ($0 & 3 | 0) {
       continue label$4
      }
      break label$4;
     };
    }
    label$5 : {
     $3 = HEAP32[$0 >> 2] | 0;
     if ((($3 ^ -1 | 0) & ($3 + -16843009 | 0) | 0) & -2139062144 | 0) {
      break label$5
     }
     $2 = Math_imul($2, 16843009);
     label$6 : while (1) {
      $3 = $3 ^ $2 | 0;
      if ((($3 ^ -1 | 0) & ($3 + -16843009 | 0) | 0) & -2139062144 | 0) {
       break label$5
      }
      $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      $0 = $0 + 4 | 0;
      if (!((($3 ^ -1 | 0) & ($3 + -16843009 | 0) | 0) & -2139062144 | 0)) {
       continue label$6
      }
      break label$6;
     };
    }
    label$7 : {
     label$8 : while (1) {
      $3 = $0;
      $2 = HEAPU8[$3 >> 0] | 0;
      if (!$2) {
       break label$7
      }
      $0 = $3 + 1 | 0;
      if (($2 | 0) != ($1 & 255 | 0 | 0)) {
       continue label$8
      }
      break label$8;
     };
    }
    return $3 | 0;
   }
   return $0 + (strlen($0 | 0) | 0) | 0 | 0;
  }
  return $0 | 0;
 }
 
 function strchr($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $0 = __strchrnul($0 | 0, $1 | 0) | 0;
  return ((HEAPU8[$0 >> 0] | 0 | 0) == ($1 & 255 | 0 | 0) ? $0 : 0) | 0;
 }
 
 function FLAC__memory_alloc_aligned_int32_array($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = 0;
  label$1 : {
   if ($0 >>> 0 > 1073741823 >>> 0) {
    break label$1
   }
   $0 = dlmalloc(($0 ? $0 << 2 | 0 : 1) | 0) | 0;
   if (!$0) {
    break label$1
   }
   label$2 : {
    $3 = HEAP32[$1 >> 2] | 0;
    if (!$3) {
     break label$2
    }
    dlfree($3 | 0);
   }
   HEAP32[$1 >> 2] = $0;
   HEAP32[$2 >> 2] = $0;
   $3 = 1;
  }
  return $3 | 0;
 }
 
 function FLAC__memory_alloc_aligned_uint64_array($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = 0;
  label$1 : {
   if ($0 >>> 0 > 536870911 >>> 0) {
    break label$1
   }
   $0 = dlmalloc(($0 ? $0 << 3 | 0 : 1) | 0) | 0;
   if (!$0) {
    break label$1
   }
   label$2 : {
    $3 = HEAP32[$1 >> 2] | 0;
    if (!$3) {
     break label$2
    }
    dlfree($3 | 0);
   }
   HEAP32[$1 >> 2] = $0;
   HEAP32[$2 >> 2] = $0;
   $3 = 1;
  }
  return $3 | 0;
 }
 
 function FLAC__memory_alloc_aligned_unsigned_array($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = 0;
  label$1 : {
   if ($0 >>> 0 > 1073741823 >>> 0) {
    break label$1
   }
   $0 = dlmalloc(($0 ? $0 << 2 | 0 : 1) | 0) | 0;
   if (!$0) {
    break label$1
   }
   label$2 : {
    $3 = HEAP32[$1 >> 2] | 0;
    if (!$3) {
     break label$2
    }
    dlfree($3 | 0);
   }
   HEAP32[$1 >> 2] = $0;
   HEAP32[$2 >> 2] = $0;
   $3 = 1;
  }
  return $3 | 0;
 }
 
 function FLAC__memory_alloc_aligned_real_array($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = 0;
  label$1 : {
   if ($0 >>> 0 > 1073741823 >>> 0) {
    break label$1
   }
   $0 = dlmalloc(($0 ? $0 << 2 | 0 : 1) | 0) | 0;
   if (!$0) {
    break label$1
   }
   label$2 : {
    $3 = HEAP32[$1 >> 2] | 0;
    if (!$3) {
     break label$2
    }
    dlfree($3 | 0);
   }
   HEAP32[$1 >> 2] = $0;
   HEAP32[$2 >> 2] = $0;
   $3 = 1;
  }
  return $3 | 0;
 }
 
 function safe_malloc_mul_2op_p($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $2 = 0, i64toi32_i32$3 = 0, $10 = 0, $8$hi = 0, $10$hi = 0, i64toi32_i32$2 = 0;
  label$1 : {
   label$2 : {
    if (!$0) {
     break label$2
    }
    if ($1) {
     break label$1
    }
   }
   return dlmalloc(1 | 0) | 0 | 0;
  }
  $2 = 0;
  label$3 : {
   i64toi32_i32$0 = 0;
   $8$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $10$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $8$hi;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$1 = __wasm_i64_mul($1 | 0, i64toi32_i32$0 | 0, $0 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $10 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $10 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   if ($10) {
    break label$3
   }
   $2 = dlmalloc(Math_imul($1, $0) | 0) | 0;
  }
  return $2 | 0;
 }
 
 function FLAC__fixed_compute_best_predictor($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $10 = 0, $11 = 0, $7 = 0, $8 = 0, $6 = 0, $9 = 0, $5 = 0, $13 = 0, $16 = 0, $4 = 0, $17 = Math_fround(0), $18 = Math_fround(0), $3 = 0, $15 = 0, $12 = 0, $14 = 0, $101 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $3 = 0;
  $4 = 0;
  $5 = 0;
  $6 = 0;
  $7 = 0;
  $8 = 0;
  label$1 : {
   if (!$1) {
    break label$1
   }
   $9 = HEAP32[($0 + -12 | 0) >> 2] | 0;
   $10 = HEAP32[($0 + -8 | 0) >> 2] | 0;
   $11 = HEAP32[($0 + -4 | 0) >> 2] | 0;
   $12 = $11 - $10 | 0;
   $13 = ($9 - $10 | 0) + $12 | 0;
   $14 = ((($9 << 1 | 0) - $10 | 0) - (HEAP32[($0 + -16 | 0) >> 2] | 0) | 0) + $13 | 0;
   $15 = 0;
   $8 = 0;
   $7 = 0;
   $6 = 0;
   $5 = 0;
   $4 = 0;
   label$2 : while (1) {
    $10 = HEAP32[($0 + ($15 << 2 | 0) | 0) >> 2] | 0;
    $9 = $10 >> 31 | 0;
    $4 = (($10 + $9 | 0) ^ $9 | 0) + $4 | 0;
    $9 = $10 - $11 | 0;
    $16 = $9 >> 31 | 0;
    $5 = (($9 + $16 | 0) ^ $16 | 0) + $5 | 0;
    $16 = $9 - $12 | 0;
    $11 = $16 >> 31 | 0;
    $6 = (($16 + $11 | 0) ^ $11 | 0) + $6 | 0;
    $13 = $16 - $13 | 0;
    $11 = $13 >> 31 | 0;
    $7 = (($13 + $11 | 0) ^ $11 | 0) + $7 | 0;
    $11 = $13 - $14 | 0;
    $101 = $11;
    $11 = $11 >> 31 | 0;
    $8 = (($101 + $11 | 0) ^ $11 | 0) + $8 | 0;
    $11 = $10;
    $12 = $9;
    $14 = $13;
    $13 = $16;
    $15 = $15 + 1 | 0;
    if (($15 | 0) != ($1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  label$3 : {
   $10 = $5 >>> 0 < $6 >>> 0 ? $5 : $6;
   $10 = $10 >>> 0 < $7 >>> 0 ? $10 : $7;
   if ($4 >>> 0 < ($10 >>> 0 < $8 >>> 0 ? $10 : $8) >>> 0) {
    break label$3
   }
   $3 = 1;
   $10 = $6 >>> 0 < $7 >>> 0 ? $6 : $7;
   if ($5 >>> 0 < ($10 >>> 0 < $8 >>> 0 ? $10 : $8) >>> 0) {
    break label$3
   }
   $10 = $7 >>> 0 < $8 >>> 0;
   $3 = $6 >>> 0 < ($10 ? $7 : $8) >>> 0 ? 2 : $10 ? 3 : 4;
  }
  $17 = Math_fround(0.0);
  $18 = Math_fround(0.0);
  label$4 : {
   if (!$4) {
    break label$4
   }
   $18 = Math_fround(+log(+(+($4 >>> 0) * .6931471805599453 / +($1 >>> 0))) / .6931471805599453);
  }
  HEAPF32[$2 >> 2] = $18;
  label$5 : {
   if (!$5) {
    break label$5
   }
   $17 = Math_fround(+log(+(+($5 >>> 0) * .6931471805599453 / +($1 >>> 0))) / .6931471805599453);
  }
  HEAPF32[($2 + 4 | 0) >> 2] = $17;
  $17 = Math_fround(0.0);
  $18 = Math_fround(0.0);
  label$6 : {
   if (!$6) {
    break label$6
   }
   $18 = Math_fround(+log(+(+($6 >>> 0) * .6931471805599453 / +($1 >>> 0))) / .6931471805599453);
  }
  HEAPF32[($2 + 8 | 0) >> 2] = $18;
  label$7 : {
   if (!$7) {
    break label$7
   }
   $17 = Math_fround(+log(+(+($7 >>> 0) * .6931471805599453 / +($1 >>> 0))) / .6931471805599453);
  }
  HEAPF32[($2 + 12 | 0) >> 2] = $17;
  label$8 : {
   if ($8) {
    break label$8
   }
   HEAPF32[($2 + 16 | 0) >> 2] = Math_fround(0.0);
   return $3 | 0;
  }
  (wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(+log(+(+($8 >>> 0) * .6931471805599453 / +($1 >>> 0))) / .6931471805599453)), HEAPF32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_f32$0;
  return $3 | 0;
 }
 
 function FLAC__fixed_compute_best_predictor_wide($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $4 = 0, $5 = 0, i64toi32_i32$5 = 0, $13$hi = 0, $14$hi = 0, $15$hi = 0, $12$hi = 0, $3 = 0, $13 = 0, $14 = 0, $11$hi = 0, $12 = 0, $15 = 0, $7 = 0, $16$hi = 0, $10 = 0, $11 = 0, $16 = 0, $17 = Math_fround(0), $18 = Math_fround(0), $9 = 0, $6 = 0, $8 = 0, $60$hi = 0, $73$hi = 0, $86$hi = 0, $99$hi = 0, $105 = 0, $112$hi = 0, $141 = 0, $141$hi = 0, $155 = 0, $155$hi = 0, $166 = 0, $166$hi = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  label$1 : {
   label$2 : {
    if ($1) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    $11 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $12 = 0;
    $12$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $13 = 0;
    $13$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $14 = 0;
    $14$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $15 = 0;
    $15$hi = i64toi32_i32$0;
    break label$1;
   }
   $3 = HEAP32[($0 + -12 | 0) >> 2] | 0;
   $4 = HEAP32[($0 + -8 | 0) >> 2] | 0;
   $5 = HEAP32[($0 + -4 | 0) >> 2] | 0;
   $6 = $5 - $4 | 0;
   $7 = ($3 - $4 | 0) + $6 | 0;
   $8 = ((($3 << 1 | 0) - $4 | 0) - (HEAP32[($0 + -16 | 0) >> 2] | 0) | 0) + $7 | 0;
   i64toi32_i32$0 = 0;
   $15 = 0;
   $15$hi = i64toi32_i32$0;
   $9 = 0;
   i64toi32_i32$0 = 0;
   $14 = 0;
   $14$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $13 = 0;
   $13$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $12 = 0;
   $12$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $11 = 0;
   $11$hi = i64toi32_i32$0;
   label$3 : while (1) {
    i64toi32_i32$0 = $11$hi;
    $4 = HEAP32[($0 + ($9 << 2 | 0) | 0) >> 2] | 0;
    $3 = $4 >> 31 | 0;
    i64toi32_i32$0 = 0;
    $60$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$2 = $11;
    i64toi32_i32$1 = $60$hi;
    i64toi32_i32$3 = ($4 + $3 | 0) ^ $3 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $11 = i64toi32_i32$4;
    $11$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $12$hi;
    $3 = $4 - $5 | 0;
    $10 = $3 >> 31 | 0;
    i64toi32_i32$5 = 0;
    $73$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $12$hi;
    i64toi32_i32$0 = $12;
    i64toi32_i32$2 = $73$hi;
    i64toi32_i32$3 = ($3 + $10 | 0) ^ $10 | 0;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $12 = i64toi32_i32$1;
    $12$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $13$hi;
    $10 = $3 - $6 | 0;
    $5 = $10 >> 31 | 0;
    i64toi32_i32$4 = 0;
    $86$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $13$hi;
    i64toi32_i32$5 = $13;
    i64toi32_i32$0 = $86$hi;
    i64toi32_i32$3 = ($10 + $5 | 0) ^ $5 | 0;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $13 = i64toi32_i32$2;
    $13$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $14$hi;
    $7 = $10 - $7 | 0;
    $5 = $7 >> 31 | 0;
    i64toi32_i32$1 = 0;
    $99$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$4 = $14;
    i64toi32_i32$5 = $99$hi;
    i64toi32_i32$3 = ($7 + $5 | 0) ^ $5 | 0;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $14 = i64toi32_i32$0;
    $14$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $15$hi;
    $5 = $7 - $8 | 0;
    $105 = $5;
    $5 = $5 >> 31 | 0;
    i64toi32_i32$2 = 0;
    $112$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $15$hi;
    i64toi32_i32$1 = $15;
    i64toi32_i32$4 = $112$hi;
    i64toi32_i32$3 = ($105 + $5 | 0) ^ $5 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $15 = i64toi32_i32$5;
    $15$hi = i64toi32_i32$0;
    $5 = $4;
    $6 = $3;
    $8 = $7;
    $7 = $10;
    $9 = $9 + 1 | 0;
    if (($9 | 0) != ($1 | 0)) {
     continue label$3
    }
    break label$3;
   };
  }
  $4 = 0;
  label$4 : {
   i64toi32_i32$0 = $11$hi;
   i64toi32_i32$0 = $12$hi;
   i64toi32_i32$0 = $13$hi;
   i64toi32_i32$0 = $12$hi;
   i64toi32_i32$0 = $13$hi;
   i64toi32_i32$0 = $12$hi;
   i64toi32_i32$2 = $12;
   i64toi32_i32$1 = $13$hi;
   i64toi32_i32$3 = $13;
   i64toi32_i32$4 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$4 ? $12 : i64toi32_i32$3;
   i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$0;
   $16 = i64toi32_i32$1;
   $16$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $14$hi;
   i64toi32_i32$3 = $16$hi;
   i64toi32_i32$3 = $14$hi;
   i64toi32_i32$3 = $16$hi;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$1 = $14$hi;
   i64toi32_i32$2 = $14;
   i64toi32_i32$0 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$4 = i64toi32_i32$3;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$0 ? $16 : i64toi32_i32$2;
   i64toi32_i32$2 = i64toi32_i32$0 ? i64toi32_i32$4 : i64toi32_i32$3;
   $16 = i64toi32_i32$1;
   $16$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $15$hi;
   i64toi32_i32$2 = $16$hi;
   i64toi32_i32$2 = $15$hi;
   i64toi32_i32$2 = $16$hi;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$1 = $15$hi;
   i64toi32_i32$4 = $15;
   i64toi32_i32$3 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$3 ? $16 : i64toi32_i32$4;
   i64toi32_i32$4 = i64toi32_i32$3 ? i64toi32_i32$0 : i64toi32_i32$2;
   $141 = i64toi32_i32$1;
   $141$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $11$hi;
   i64toi32_i32$3 = $11;
   i64toi32_i32$1 = $141$hi;
   i64toi32_i32$0 = $141;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
    break label$4
   }
   $4 = 1;
   i64toi32_i32$3 = $12$hi;
   i64toi32_i32$3 = $13$hi;
   i64toi32_i32$3 = $14$hi;
   i64toi32_i32$3 = $13$hi;
   i64toi32_i32$3 = $14$hi;
   i64toi32_i32$3 = $13$hi;
   i64toi32_i32$0 = $13;
   i64toi32_i32$4 = $14$hi;
   i64toi32_i32$1 = $14;
   i64toi32_i32$2 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$3;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$4 = i64toi32_i32$2 ? $13 : i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$2 ? i64toi32_i32$0 : i64toi32_i32$3;
   $16 = i64toi32_i32$4;
   $16$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $15$hi;
   i64toi32_i32$1 = $16$hi;
   i64toi32_i32$1 = $15$hi;
   i64toi32_i32$1 = $16$hi;
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$4 = $15$hi;
   i64toi32_i32$0 = $15;
   i64toi32_i32$3 = i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$4 = i64toi32_i32$3 ? $16 : i64toi32_i32$0;
   i64toi32_i32$0 = i64toi32_i32$3 ? i64toi32_i32$2 : i64toi32_i32$1;
   $155 = i64toi32_i32$4;
   $155$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $12$hi;
   i64toi32_i32$3 = $12;
   i64toi32_i32$4 = $155$hi;
   i64toi32_i32$2 = $155;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
    break label$4
   }
   i64toi32_i32$3 = $14$hi;
   i64toi32_i32$3 = $15$hi;
   i64toi32_i32$3 = $14$hi;
   i64toi32_i32$2 = $14;
   i64toi32_i32$0 = $15$hi;
   i64toi32_i32$4 = $15;
   $4 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$2 = $13$hi;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $4;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$0 = i64toi32_i32$1 ? $14 : i64toi32_i32$4;
   i64toi32_i32$4 = i64toi32_i32$1 ? i64toi32_i32$2 : i64toi32_i32$3;
   $166 = i64toi32_i32$0;
   $166$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $13$hi;
   i64toi32_i32$1 = $13;
   i64toi32_i32$0 = $166$hi;
   i64toi32_i32$2 = $166;
   $4 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0 ? 2 : $4 ? 3 : 4;
  }
  $17 = Math_fround(0.0);
  $18 = Math_fround(0.0);
  label$5 : {
   i64toi32_i32$1 = $11$hi;
   if (!($11 | i64toi32_i32$1 | 0)) {
    break label$5
   }
   i64toi32_i32$1 = $11$hi;
   i64toi32_i32$4 = $11;
   i64toi32_i32$2 = 0;
   $18 = Math_fround(+log(+((+(i64toi32_i32$4 >>> 0) + 4294967296.0 * +(i64toi32_i32$1 >>> 0)) * .6931471805599453 / +($1 >>> 0))) / .6931471805599453);
  }
  HEAPF32[$2 >> 2] = $18;
  label$6 : {
   i64toi32_i32$1 = $12$hi;
   if (!($12 | i64toi32_i32$1 | 0)) {
    break label$6
   }
   i64toi32_i32$1 = $12$hi;
   i64toi32_i32$4 = $12;
   i64toi32_i32$2 = 0;
   $17 = Math_fround(+log(+((+(i64toi32_i32$4 >>> 0) + 4294967296.0 * +(i64toi32_i32$1 >>> 0)) * .6931471805599453 / +($1 >>> 0))) / .6931471805599453);
  }
  HEAPF32[($2 + 4 | 0) >> 2] = $17;
  $17 = Math_fround(0.0);
  $18 = Math_fround(0.0);
  label$7 : {
   i64toi32_i32$1 = $13$hi;
   if (!($13 | i64toi32_i32$1 | 0)) {
    break label$7
   }
   i64toi32_i32$1 = $13$hi;
   i64toi32_i32$4 = $13;
   i64toi32_i32$2 = 0;
   $18 = Math_fround(+log(+((+(i64toi32_i32$4 >>> 0) + 4294967296.0 * +(i64toi32_i32$1 >>> 0)) * .6931471805599453 / +($1 >>> 0))) / .6931471805599453);
  }
  HEAPF32[($2 + 8 | 0) >> 2] = $18;
  label$8 : {
   i64toi32_i32$1 = $14$hi;
   if (!($14 | i64toi32_i32$1 | 0)) {
    break label$8
   }
   i64toi32_i32$1 = $14$hi;
   i64toi32_i32$4 = $14;
   i64toi32_i32$2 = 0;
   $17 = Math_fround(+log(+((+(i64toi32_i32$4 >>> 0) + 4294967296.0 * +(i64toi32_i32$1 >>> 0)) * .6931471805599453 / +($1 >>> 0))) / .6931471805599453);
  }
  HEAPF32[($2 + 12 | 0) >> 2] = $17;
  label$9 : {
   i64toi32_i32$1 = $15$hi;
   if (!!($15 | i64toi32_i32$1 | 0)) {
    break label$9
   }
   HEAPF32[($2 + 16 | 0) >> 2] = Math_fround(0.0);
   return $4 | 0;
  }
  i64toi32_i32$1 = $15$hi;
  i64toi32_i32$4 = $15;
  i64toi32_i32$2 = 0;
  (wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(+log(+((+(i64toi32_i32$4 >>> 0) + 4294967296.0 * +(i64toi32_i32$1 >>> 0)) * .6931471805599453 / +($1 >>> 0))) / .6931471805599453)), HEAPF32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_f32$0;
  return $4 | 0;
 }
 
 function FLAC__fixed_compute_residual($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $14 = 0, $50 = 0, $80 = 0, $106 = 0;
  label$1 : {
   label$2 : {
    if ($2 >>> 0 > 4 >>> 0) {
     break label$2
    }
    label$3 : {
     switch ($2 | 0) {
     case 4:
      $4 = 0;
      if (($1 | 0) <= (0 | 0)) {
       break label$2
      }
      label$7 : while (1) {
       $2 = $4 << 2 | 0;
       $14 = $3 + $2 | 0;
       $2 = $0 + $2 | 0;
       HEAP32[$14 >> 2] = ((((HEAP32[$2 >> 2] | 0) - ((HEAP32[($2 + -4 | 0) >> 2] | 0) << 2 | 0) | 0) + Math_imul(HEAP32[($2 + -8 | 0) >> 2] | 0, 6) | 0) - ((HEAP32[($2 + -12 | 0) >> 2] | 0) << 2 | 0) | 0) + (HEAP32[($2 + -16 | 0) >> 2] | 0) | 0;
       $4 = $4 + 1 | 0;
       if (($4 | 0) != ($1 | 0)) {
        continue label$7
       }
       break label$2;
      };
     case 3:
      $4 = 0;
      if (($1 | 0) <= (0 | 0)) {
       break label$2
      }
      label$8 : while (1) {
       $2 = $4 << 2 | 0;
       $50 = $3 + $2 | 0;
       $2 = $0 + $2 | 0;
       HEAP32[$50 >> 2] = ((HEAP32[$2 >> 2] | 0) - (HEAP32[($2 + -12 | 0) >> 2] | 0) | 0) + Math_imul((HEAP32[($2 + -8 | 0) >> 2] | 0) - (HEAP32[($2 + -4 | 0) >> 2] | 0) | 0, 3) | 0;
       $4 = $4 + 1 | 0;
       if (($4 | 0) != ($1 | 0)) {
        continue label$8
       }
       break label$2;
      };
     case 2:
      $2 = 0;
      if (($1 | 0) <= (0 | 0)) {
       break label$2
      }
      label$9 : while (1) {
       $4 = $2 << 2 | 0;
       $80 = $3 + $4 | 0;
       $4 = $0 + $4 | 0;
       HEAP32[$80 >> 2] = ((HEAP32[$4 >> 2] | 0) - ((HEAP32[($4 + -4 | 0) >> 2] | 0) << 1 | 0) | 0) + (HEAP32[($4 + -8 | 0) >> 2] | 0) | 0;
       $2 = $2 + 1 | 0;
       if (($2 | 0) != ($1 | 0)) {
        continue label$9
       }
       break label$2;
      };
     case 1:
      break label$3;
     default:
      break label$1;
     };
    }
    $2 = 0;
    if (($1 | 0) <= (0 | 0)) {
     break label$2
    }
    label$10 : while (1) {
     $4 = $2 << 2 | 0;
     $106 = $3 + $4 | 0;
     $4 = $0 + $4 | 0;
     HEAP32[$106 >> 2] = (HEAP32[$4 >> 2] | 0) - (HEAP32[($4 + -4 | 0) >> 2] | 0) | 0;
     $2 = $2 + 1 | 0;
     if (($2 | 0) != ($1 | 0)) {
      continue label$10
     }
     break label$10;
    };
   }
   return;
  }
  memcpy($3 | 0, $0 | 0, $1 << 2 | 0 | 0) | 0;
 }
 
 function FLAC__fixed_restore_signal($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $7 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $71 = 0;
  label$1 : {
   label$2 : {
    if ($2 >>> 0 > 4 >>> 0) {
     break label$2
    }
    label$3 : {
     switch ($2 | 0) {
     case 4:
      if (($1 | 0) < (1 | 0)) {
       break label$2
      }
      $4 = HEAP32[($3 + -12 | 0) >> 2] | 0;
      $5 = HEAP32[($3 + -4 | 0) >> 2] | 0;
      $2 = 0;
      label$7 : while (1) {
       $6 = $2 << 2 | 0;
       $7 = $3 + $6 | 0;
       $8 = HEAP32[($7 + -8 | 0) >> 2] | 0;
       $5 = ((Math_imul($8, -6) + (HEAP32[($0 + $6 | 0) >> 2] | 0) | 0) - (HEAP32[($7 + -16 | 0) >> 2] | 0) | 0) + (($4 + $5 | 0) << 2 | 0) | 0;
       HEAP32[$7 >> 2] = $5;
       $4 = $8;
       $2 = $2 + 1 | 0;
       if (($2 | 0) != ($1 | 0)) {
        continue label$7
       }
       break label$2;
      };
     case 3:
      if (($1 | 0) < (1 | 0)) {
       break label$2
      }
      $7 = HEAP32[($3 + -12 | 0) >> 2] | 0;
      $4 = HEAP32[($3 + -4 | 0) >> 2] | 0;
      $2 = 0;
      label$8 : while (1) {
       $5 = $2 << 2 | 0;
       $6 = $3 + $5 | 0;
       $71 = $7 + (HEAP32[($0 + $5 | 0) >> 2] | 0) | 0;
       $7 = HEAP32[($6 + -8 | 0) >> 2] | 0;
       $4 = $71 + Math_imul($4 - $7 | 0, 3) | 0;
       HEAP32[$6 >> 2] = $4;
       $2 = $2 + 1 | 0;
       if (($2 | 0) != ($1 | 0)) {
        continue label$8
       }
       break label$2;
      };
     case 2:
      if (($1 | 0) < (1 | 0)) {
       break label$2
      }
      $7 = HEAP32[($3 + -4 | 0) >> 2] | 0;
      $2 = 0;
      label$9 : while (1) {
       $4 = $2 << 2 | 0;
       $5 = $3 + $4 | 0;
       $7 = (($7 << 1 | 0) + (HEAP32[($0 + $4 | 0) >> 2] | 0) | 0) - (HEAP32[($5 + -8 | 0) >> 2] | 0) | 0;
       HEAP32[$5 >> 2] = $7;
       $2 = $2 + 1 | 0;
       if (($2 | 0) != ($1 | 0)) {
        continue label$9
       }
       break label$2;
      };
     case 1:
      break label$3;
     default:
      break label$1;
     };
    }
    if (($1 | 0) < (1 | 0)) {
     break label$2
    }
    $7 = HEAP32[($3 + -4 | 0) >> 2] | 0;
    $2 = 0;
    label$10 : while (1) {
     $4 = $2 << 2 | 0;
     $7 = $7 + (HEAP32[($0 + $4 | 0) >> 2] | 0) | 0;
     HEAP32[($3 + $4 | 0) >> 2] = $7;
     $2 = $2 + 1 | 0;
     if (($2 | 0) != ($1 | 0)) {
      continue label$10
     }
     break label$10;
    };
   }
   return;
  }
  memcpy($3 | 0, $0 | 0, $1 << 2 | 0 | 0) | 0;
 }
 
 function __toread($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = HEAPU8[($0 + 74 | 0) >> 0] | 0;
  HEAP8[($0 + 74 | 0) >> 0] = $1 + -1 | 0 | $1 | 0;
  label$1 : {
   if ((HEAP32[($0 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0 + 28 | 0) >> 2] | 0) >>> 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($0 + 36 | 0) >> 2] | 0]($0, 0, 0) | 0;
  }
  HEAP32[($0 + 28 | 0) >> 2] = 0;
  HEAP32[($0 + 16 | 0) >> 2] = 0;
  HEAP32[($0 + 20 | 0) >> 2] = 0;
  label$2 : {
   $1 = HEAP32[$0 >> 2] | 0;
   if (!($1 & 4 | 0)) {
    break label$2
   }
   HEAP32[$0 >> 2] = $1 | 32 | 0;
   return -1 | 0;
  }
  $2 = (HEAP32[($0 + 44 | 0) >> 2] | 0) + (HEAP32[($0 + 48 | 0) >> 2] | 0) | 0;
  HEAP32[($0 + 8 | 0) >> 2] = $2;
  HEAP32[($0 + 4 | 0) >> 2] = $2;
  return ($1 << 27 | 0) >> 31 | 0 | 0;
 }
 
 function FLAC__stream_decoder_new() {
  var i64toi32_i32$1 = 0, $2 = 0, i64toi32_i32$0 = 0, $1 = 0, $0 = 0, $3 = 0, $4 = 0;
  label$1 : {
   $0 = dlcalloc(1 | 0, 8 | 0) | 0;
   if (!$0) {
    break label$1
   }
   $1 = dlcalloc(1 | 0, 504 | 0) | 0;
   HEAP32[$0 >> 2] = $1;
   label$2 : {
    if (!$1) {
     break label$2
    }
    $2 = dlcalloc(1 | 0, 6160 | 0) | 0;
    HEAP32[($0 + 4 | 0) >> 2] = $2;
    label$3 : {
     if (!$2) {
      break label$3
     }
     $3 = FLAC__bitreader_new() | 0;
     HEAP32[($2 + 56 | 0) >> 2] = $3;
     label$4 : {
      if (!$3) {
       break label$4
      }
      HEAP32[($2 + 1128 | 0) >> 2] = 16;
      $4 = dlmalloc(((HEAP32[global$8 >> 2] | 0) << 1 | 0) & -16 | 0 | 0) | 0;
      HEAP32[($2 + 1120 | 0) >> 2] = $4;
      label$5 : {
       if (!$4) {
        break label$5
       }
       HEAP32[($2 + 252 | 0) >> 2] = 0;
       i64toi32_i32$1 = $2;
       i64toi32_i32$0 = 0;
       HEAP32[($2 + 220 | 0) >> 2] = 0;
       HEAP32[($2 + 224 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 3616 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 3608 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 3600 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 3592 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 60 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 68 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 76 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 84 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 92 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 100 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 108 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 116 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       FLAC__format_entropy_coding_method_partitioned_rice_contents_init($2 + 124 | 0 | 0);
       FLAC__format_entropy_coding_method_partitioned_rice_contents_init($2 + 136 | 0 | 0);
       FLAC__format_entropy_coding_method_partitioned_rice_contents_init($2 + 148 | 0 | 0);
       FLAC__format_entropy_coding_method_partitioned_rice_contents_init($2 + 160 | 0 | 0);
       FLAC__format_entropy_coding_method_partitioned_rice_contents_init($2 + 172 | 0 | 0);
       FLAC__format_entropy_coding_method_partitioned_rice_contents_init($2 + 184 | 0 | 0);
       FLAC__format_entropy_coding_method_partitioned_rice_contents_init($2 + 196 | 0 | 0);
       FLAC__format_entropy_coding_method_partitioned_rice_contents_init($2 + 208 | 0 | 0);
       i64toi32_i32$1 = $2;
       i64toi32_i32$0 = 0;
       HEAP32[($2 + 48 | 0) >> 2] = 0;
       HEAP32[($2 + 52 | 0) >> 2] = i64toi32_i32$0;
       memset($2 + 608 | 0 | 0, 0 | 0, 512 | 0) | 0;
       HEAP32[($2 + 1124 | 0) >> 2] = 0;
       HEAP32[($2 + 608 | 0) >> 2] = 1;
       HEAP32[($2 + 32 | 0) >> 2] = 0;
       i64toi32_i32$1 = $2 + 24 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 16 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 8 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2;
       i64toi32_i32$0 = 0;
       HEAP32[$2 >> 2] = 0;
       HEAP32[($2 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($1 + 28 | 0) >> 2] = 0;
       FLAC__ogg_decoder_aspect_set_defaults($1 + 32 | 0 | 0);
       HEAP32[$1 >> 2] = 9;
       return $0 | 0;
      }
      FLAC__bitreader_delete($3 | 0);
     }
     dlfree($2 | 0);
    }
    dlfree($1 | 0);
   }
   dlfree($0 | 0);
  }
  return 0 | 0;
 }
 
 function FLAC__stream_decoder_delete($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   FLAC__stream_decoder_finish($0 | 0) | 0;
   label$2 : {
    $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    $2 = HEAP32[($1 + 1120 | 0) >> 2] | 0;
    if (!$2) {
     break label$2
    }
    dlfree($2 | 0);
    $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   }
   FLAC__bitreader_delete(HEAP32[($1 + 56 | 0) >> 2] | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 124 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 136 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 148 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 160 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 172 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 184 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 196 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 208 | 0 | 0);
   dlfree(HEAP32[($0 + 4 | 0) >> 2] | 0 | 0);
   dlfree(HEAP32[$0 >> 2] | 0 | 0);
   dlfree($0 | 0);
  }
 }
 
 function FLAC__stream_decoder_finish($0) {
  $0 = $0 | 0;
  var $2 = 0, $3 = 0, $1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  $1 = 1;
  label$1 : {
   if ((HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0) == (9 | 0)) {
    break label$1
   }
   $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   FLAC__MD5Final($2 + 3732 | 0 | 0, $2 + 3636 | 0 | 0);
   dlfree(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 452 | 0) >> 2] | 0 | 0);
   HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 452 | 0) >> 2] = 0;
   $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($2 + 252 | 0) >> 2] = 0;
   FLAC__bitreader_free(HEAP32[($2 + 56 | 0) >> 2] | 0 | 0);
   $1 = $0 + 4 | 0;
   label$2 : {
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    $3 = HEAP32[($2 + 60 | 0) >> 2] | 0;
    if (!$3) {
     break label$2
    }
    dlfree($3 + -16 | 0 | 0);
    HEAP32[((HEAP32[$1 >> 2] | 0) + 60 | 0) >> 2] = 0;
    $2 = HEAP32[$1 >> 2] | 0;
   }
   label$3 : {
    $3 = HEAP32[($2 + 3592 | 0) >> 2] | 0;
    if (!$3) {
     break label$3
    }
    dlfree($3 | 0);
    HEAP32[((HEAP32[$1 >> 2] | 0) + 92 | 0) >> 2] = 0;
    HEAP32[((HEAP32[$1 >> 2] | 0) + 3592 | 0) >> 2] = 0;
    $2 = HEAP32[$1 >> 2] | 0;
   }
   label$4 : {
    $3 = HEAP32[($2 + 64 | 0) >> 2] | 0;
    if (!$3) {
     break label$4
    }
    dlfree($3 + -16 | 0 | 0);
    HEAP32[((HEAP32[$1 >> 2] | 0) + 64 | 0) >> 2] = 0;
    $2 = HEAP32[$1 >> 2] | 0;
   }
   label$5 : {
    $3 = HEAP32[($2 + 3596 | 0) >> 2] | 0;
    if (!$3) {
     break label$5
    }
    dlfree($3 | 0);
    HEAP32[((HEAP32[$1 >> 2] | 0) + 96 | 0) >> 2] = 0;
    HEAP32[((HEAP32[$1 >> 2] | 0) + 3596 | 0) >> 2] = 0;
    $2 = HEAP32[$1 >> 2] | 0;
   }
   label$6 : {
    $3 = HEAP32[($2 + 68 | 0) >> 2] | 0;
    if (!$3) {
     break label$6
    }
    dlfree($3 + -16 | 0 | 0);
    HEAP32[((HEAP32[$1 >> 2] | 0) + 68 | 0) >> 2] = 0;
    $2 = HEAP32[$1 >> 2] | 0;
   }
   label$7 : {
    $3 = HEAP32[($2 + 3600 | 0) >> 2] | 0;
    if (!$3) {
     break label$7
    }
    dlfree($3 | 0);
    HEAP32[((HEAP32[$1 >> 2] | 0) + 100 | 0) >> 2] = 0;
    HEAP32[((HEAP32[$1 >> 2] | 0) + 3600 | 0) >> 2] = 0;
    $2 = HEAP32[$1 >> 2] | 0;
   }
   label$8 : {
    $3 = HEAP32[($2 + 72 | 0) >> 2] | 0;
    if (!$3) {
     break label$8
    }
    dlfree($3 + -16 | 0 | 0);
    HEAP32[((HEAP32[$1 >> 2] | 0) + 72 | 0) >> 2] = 0;
    $2 = HEAP32[$1 >> 2] | 0;
   }
   label$9 : {
    $3 = HEAP32[($2 + 3604 | 0) >> 2] | 0;
    if (!$3) {
     break label$9
    }
    dlfree($3 | 0);
    HEAP32[((HEAP32[$1 >> 2] | 0) + 104 | 0) >> 2] = 0;
    HEAP32[((HEAP32[$1 >> 2] | 0) + 3604 | 0) >> 2] = 0;
    $2 = HEAP32[$1 >> 2] | 0;
   }
   label$10 : {
    $3 = HEAP32[($2 + 76 | 0) >> 2] | 0;
    if (!$3) {
     break label$10
    }
    dlfree($3 + -16 | 0 | 0);
    HEAP32[((HEAP32[$1 >> 2] | 0) + 76 | 0) >> 2] = 0;
    $2 = HEAP32[$1 >> 2] | 0;
   }
   label$11 : {
    $3 = HEAP32[($2 + 3608 | 0) >> 2] | 0;
    if (!$3) {
     break label$11
    }
    dlfree($3 | 0);
    HEAP32[((HEAP32[$1 >> 2] | 0) + 108 | 0) >> 2] = 0;
    HEAP32[((HEAP32[$1 >> 2] | 0) + 3608 | 0) >> 2] = 0;
    $2 = HEAP32[$1 >> 2] | 0;
   }
   label$12 : {
    $3 = HEAP32[($2 + 80 | 0) >> 2] | 0;
    if (!$3) {
     break label$12
    }
    dlfree($3 + -16 | 0 | 0);
    HEAP32[((HEAP32[$1 >> 2] | 0) + 80 | 0) >> 2] = 0;
    $2 = HEAP32[$1 >> 2] | 0;
   }
   label$13 : {
    $3 = HEAP32[($2 + 3612 | 0) >> 2] | 0;
    if (!$3) {
     break label$13
    }
    dlfree($3 | 0);
    HEAP32[((HEAP32[$1 >> 2] | 0) + 112 | 0) >> 2] = 0;
    HEAP32[((HEAP32[$1 >> 2] | 0) + 3612 | 0) >> 2] = 0;
    $2 = HEAP32[$1 >> 2] | 0;
   }
   label$14 : {
    $3 = HEAP32[($2 + 84 | 0) >> 2] | 0;
    if (!$3) {
     break label$14
    }
    dlfree($3 + -16 | 0 | 0);
    HEAP32[((HEAP32[$1 >> 2] | 0) + 84 | 0) >> 2] = 0;
    $2 = HEAP32[$1 >> 2] | 0;
   }
   label$15 : {
    $3 = HEAP32[($2 + 3616 | 0) >> 2] | 0;
    if (!$3) {
     break label$15
    }
    dlfree($3 | 0);
    HEAP32[((HEAP32[$1 >> 2] | 0) + 116 | 0) >> 2] = 0;
    HEAP32[((HEAP32[$1 >> 2] | 0) + 3616 | 0) >> 2] = 0;
    $2 = HEAP32[$1 >> 2] | 0;
   }
   label$16 : {
    $3 = HEAP32[($2 + 88 | 0) >> 2] | 0;
    if (!$3) {
     break label$16
    }
    dlfree($3 + -16 | 0 | 0);
    HEAP32[((HEAP32[$1 >> 2] | 0) + 88 | 0) >> 2] = 0;
    $2 = HEAP32[$1 >> 2] | 0;
   }
   label$17 : {
    $3 = HEAP32[($2 + 3620 | 0) >> 2] | 0;
    if (!$3) {
     break label$17
    }
    dlfree($3 | 0);
    HEAP32[((HEAP32[$1 >> 2] | 0) + 120 | 0) >> 2] = 0;
    HEAP32[((HEAP32[$1 >> 2] | 0) + 3620 | 0) >> 2] = 0;
    $2 = HEAP32[$1 >> 2] | 0;
   }
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = 0;
   HEAP32[($2 + 220 | 0) >> 2] = 0;
   HEAP32[($2 + 224 | 0) >> 2] = i64toi32_i32$0;
   label$18 : {
    if (!(HEAP32[$2 >> 2] | 0)) {
     break label$18
    }
    FLAC__ogg_decoder_aspect_finish((HEAP32[$0 >> 2] | 0) + 32 | 0 | 0);
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   }
   label$19 : {
    $3 = HEAP32[($2 + 52 | 0) >> 2] | 0;
    if (!$3) {
     break label$19
    }
    label$20 : {
     if (($3 | 0) == (HEAP32[global$9 >> 2] | 0 | 0)) {
      break label$20
     }
     fclose($3 | 0) | 0;
     $2 = HEAP32[$1 >> 2] | 0;
    }
    HEAP32[($2 + 52 | 0) >> 2] = 0;
   }
   $1 = 1;
   label$21 : {
    if (!(HEAP32[($2 + 3624 | 0) >> 2] | 0)) {
     break label$21
    }
    $1 = !(memcmp($2 + 312 | 0 | 0, $2 + 3732 | 0 | 0, 16 | 0) | 0);
   }
   HEAP32[($2 + 48 | 0) >> 2] = 0;
   HEAP32[($2 + 3632 | 0) >> 2] = 0;
   memset($2 + 608 | 0 | 0, 0 | 0, 512 | 0) | 0;
   HEAP32[($2 + 32 | 0) >> 2] = 0;
   i64toi32_i32$1 = $2 + 24 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $2 + 16 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $2 + 8 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = 0;
   HEAP32[$2 >> 2] = 0;
   HEAP32[($2 + 4 | 0) >> 2] = i64toi32_i32$0;
   $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($2 + 1124 | 0) >> 2] = 0;
   HEAP32[($2 + 608 | 0) >> 2] = 1;
   $2 = HEAP32[$0 >> 2] | 0;
   HEAP32[($2 + 28 | 0) >> 2] = 0;
   FLAC__ogg_decoder_aspect_set_defaults($2 + 32 | 0 | 0);
   HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 9;
  }
  return $1 | 0;
 }
 
 function FLAC__stream_decoder_init_stream($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  return init_stream_internal_($0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, 0 | 0) | 0 | 0;
 }
 
 function init_stream_internal_($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  $10 = $10 | 0;
  var $11 = 0, i64toi32_i32$0 = 0, $12 = 0;
  $11 = 5;
  label$1 : {
   label$2 : {
    $12 = HEAP32[$0 >> 2] | 0;
    if ((HEAP32[$12 >> 2] | 0 | 0) != (9 | 0)) {
     break label$2
    }
    $11 = 2;
    if (!$1) {
     break label$2
    }
    if (!$6) {
     break label$2
    }
    if (!$8) {
     break label$2
    }
    label$3 : {
     if (!$2) {
      break label$3
     }
     if (!$3) {
      break label$2
     }
     if (!$4) {
      break label$2
     }
     if (!$5) {
      break label$2
     }
    }
    $11 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    HEAP32[$11 >> 2] = $10;
    label$4 : {
     if (!$10) {
      break label$4
     }
     if (!(FLAC__ogg_decoder_aspect_init($12 + 32 | 0 | 0) | 0)) {
      break label$1
     }
     $11 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    }
    FLAC__cpu_info($11 + 3524 | 0 | 0);
    $11 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    $10 = global$10;
    HEAP32[($11 + 44 | 0) >> 2] = $10;
    HEAP32[($11 + 40 | 0) >> 2] = global$11;
    HEAP32[($11 + 36 | 0) >> 2] = $10;
    $10 = global$2;
    label$5 : {
     if (FLAC__bitreader_init(HEAP32[($11 + 56 | 0) >> 2] | 0 | 0, $10 + 6 | 0 | 0, $0 | 0) | 0) {
      break label$5
     }
     HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
     return 3 | 0;
    }
    $11 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    HEAP32[($11 + 48 | 0) >> 2] = $9;
    HEAP32[($11 + 32 | 0) >> 2] = $8;
    HEAP32[($11 + 28 | 0) >> 2] = $7;
    HEAP32[($11 + 24 | 0) >> 2] = $6;
    HEAP32[($11 + 20 | 0) >> 2] = $5;
    HEAP32[($11 + 16 | 0) >> 2] = $4;
    HEAP32[($11 + 12 | 0) >> 2] = $3;
    HEAP32[($11 + 8 | 0) >> 2] = $2;
    HEAP32[($11 + 4 | 0) >> 2] = $1;
    HEAP32[($11 + 3520 | 0) >> 2] = 0;
    HEAP32[($11 + 248 | 0) >> 2] = 0;
    i64toi32_i32$0 = 0;
    HEAP32[($11 + 240 | 0) >> 2] = 0;
    HEAP32[($11 + 244 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    HEAP32[($11 + 228 | 0) >> 2] = 0;
    HEAP32[($11 + 232 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($11 + 3624 | 0) >> 2] = HEAP32[((HEAP32[$0 >> 2] | 0) + 28 | 0) >> 2] | 0;
    i64toi32_i32$0 = 0;
    HEAP32[($11 + 3628 | 0) >> 2] = 1;
    HEAP32[($11 + 3632 | 0) >> 2] = i64toi32_i32$0;
    $11 = FLAC__stream_decoder_reset($0 | 0) | 0 ? 0 : 3;
   }
   return $11 | 0;
  }
  HEAP32[((HEAP32[$0 >> 2] | 0) + 4 | 0) >> 2] = 4;
  return 4 | 0;
 }
 
 function read_callback_($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  label$1 : {
   $3 = HEAP32[($2 + 4 | 0) >> 2] | 0;
   if (HEAP32[$3 >> 2] | 0) {
    break label$1
   }
   $4 = HEAP32[($3 + 20 | 0) >> 2] | 0;
   if (!$4) {
    break label$1
   }
   if (!(FUNCTION_TABLE[$4]($2, HEAP32[($3 + 48 | 0) >> 2] | 0) | 0)) {
    break label$1
   }
   HEAP32[$1 >> 2] = 0;
   HEAP32[(HEAP32[$2 >> 2] | 0) >> 2] = 4;
   return 0 | 0;
  }
  label$2 : {
   label$3 : {
    label$4 : {
     if (!(HEAP32[$1 >> 2] | 0)) {
      break label$4
     }
     label$5 : {
      $3 = HEAP32[($2 + 4 | 0) >> 2] | 0;
      if (!(HEAP32[($3 + 3632 | 0) >> 2] | 0)) {
       break label$5
      }
      if ((HEAP32[($3 + 6152 | 0) >> 2] | 0) >>> 0 < 21 >>> 0) {
       break label$5
      }
      HEAP32[(HEAP32[$2 >> 2] | 0) >> 2] = 7;
      break label$3;
     }
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         label$10 : {
          if (!(HEAP32[$3 >> 2] | 0)) {
           break label$10
          }
          $4 = global$2;
          $3 = FLAC__ogg_decoder_aspect_read_callback_wrapper((HEAP32[$2 >> 2] | 0) + 32 | 0 | 0, $0 | 0, $1 | 0, $4 + 7 | 0 | 0, $2 | 0, HEAP32[($3 + 48 | 0) >> 2] | 0 | 0) | 0;
          if ($3 >>> 0 > 2 >>> 0) {
           break label$9
          }
          $0 = 0;
          switch ($3 | 0) {
          case 1:
           break label$8;
          default:
           break label$7;
          };
         }
         $0 = FUNCTION_TABLE[HEAP32[($3 + 4 | 0) >> 2] | 0]($2, $0, $1, HEAP32[($3 + 48 | 0) >> 2] | 0) | 0;
         if (($0 | 0) != (2 | 0)) {
          break label$7
         }
        }
        HEAP32[(HEAP32[$2 >> 2] | 0) >> 2] = 7;
        break label$3;
       }
       $3 = 1;
       if (!(HEAP32[$1 >> 2] | 0)) {
        break label$6
       }
       break label$2;
      }
      $3 = 1;
      if (HEAP32[$1 >> 2] | 0) {
       break label$2
      }
      $3 = 1;
      if (($0 | 0) == (1 | 0)) {
       break label$6
      }
      $1 = HEAP32[($2 + 4 | 0) >> 2] | 0;
      if (HEAP32[$1 >> 2] | 0) {
       break label$2
      }
      $0 = HEAP32[($1 + 20 | 0) >> 2] | 0;
      if (!$0) {
       break label$2
      }
      if (!(FUNCTION_TABLE[$0]($2, HEAP32[($1 + 48 | 0) >> 2] | 0) | 0)) {
       break label$2
      }
     }
     HEAP32[(HEAP32[$2 >> 2] | 0) >> 2] = 4;
     break label$3;
    }
    HEAP32[(HEAP32[$2 >> 2] | 0) >> 2] = 7;
   }
   $3 = 0;
  }
  return $3 | 0;
 }
 
 function FLAC__stream_decoder_reset($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, i64toi32_i32$0 = 0, $3 = 0;
  label$1 : {
   label$2 : {
    $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    if (HEAP32[($1 + 3628 | 0) >> 2] | 0) {
     break label$2
    }
    $2 = 0;
    if ((HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0) == (9 | 0)) {
     break label$1
    }
   }
   HEAP32[($1 + 3624 | 0) >> 2] = 0;
   i64toi32_i32$0 = 0;
   HEAP32[($1 + 240 | 0) >> 2] = 0;
   HEAP32[($1 + 244 | 0) >> 2] = i64toi32_i32$0;
   label$3 : {
    if (!(HEAP32[$1 >> 2] | 0)) {
     break label$3
    }
    FLAC__ogg_decoder_aspect_flush((HEAP32[$0 >> 2] | 0) + 32 | 0 | 0);
    $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   }
   $1 = FLAC__bitreader_clear(HEAP32[($1 + 56 | 0) >> 2] | 0 | 0) | 0;
   $2 = HEAP32[$0 >> 2] | 0;
   label$4 : {
    if ($1) {
     break label$4
    }
    HEAP32[$2 >> 2] = 8;
    return 0 | 0;
   }
   HEAP32[$2 >> 2] = 2;
   label$5 : {
    $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    if (!(HEAP32[$1 >> 2] | 0)) {
     break label$5
    }
    FLAC__ogg_decoder_aspect_reset($2 + 32 | 0 | 0);
    $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   }
   label$6 : {
    label$7 : {
     if (HEAP32[($1 + 3628 | 0) >> 2] | 0) {
      break label$7
     }
     $3 = global$9;
     $2 = 0;
     if ((HEAP32[($1 + 52 | 0) >> 2] | 0 | 0) == (HEAP32[$3 >> 2] | 0 | 0)) {
      break label$1
     }
     $3 = HEAP32[($1 + 8 | 0) >> 2] | 0;
     if (!$3) {
      break label$6
     }
     i64toi32_i32$0 = 0;
     if ((FUNCTION_TABLE[$3]($0, 0, i64toi32_i32$0, HEAP32[($1 + 48 | 0) >> 2] | 0) | 0 | 0) == (1 | 0)) {
      break label$1
     }
     $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     break label$6;
    }
    HEAP32[($1 + 3628 | 0) >> 2] = 0;
   }
   HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 0;
   HEAP32[($1 + 248 | 0) >> 2] = 0;
   dlfree(HEAP32[($1 + 452 | 0) >> 2] | 0 | 0);
   HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 452 | 0) >> 2] = 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 252 | 0) >> 2] = 0;
   HEAP32[($1 + 3624 | 0) >> 2] = HEAP32[((HEAP32[$0 >> 2] | 0) + 28 | 0) >> 2] | 0;
   i64toi32_i32$0 = 0;
   HEAP32[($1 + 228 | 0) >> 2] = 0;
   HEAP32[($1 + 232 | 0) >> 2] = i64toi32_i32$0;
   FLAC__MD5Init($1 + 3636 | 0 | 0);
   $0 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($0 + 6152 | 0) >> 2] = 0;
   i64toi32_i32$0 = 0;
   HEAP32[($0 + 6136 | 0) >> 2] = 0;
   HEAP32[($0 + 6140 | 0) >> 2] = i64toi32_i32$0;
   $2 = 1;
  }
  return $2 | 0;
 }
 
 function FLAC__stream_decoder_init_ogg_stream($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  return init_stream_internal_($0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, 1 | 0) | 0 | 0;
 }
 
 function FLAC__stream_decoder_set_ogg_serial_number($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = 0;
  label$1 : {
   $0 = HEAP32[$0 >> 2] | 0;
   if ((HEAP32[$0 >> 2] | 0 | 0) != (9 | 0)) {
    break label$1
   }
   FLAC__ogg_decoder_aspect_set_serial_number($0 + 32 | 0 | 0, $1 | 0);
   $2 = 1;
  }
  return $2 | 0;
 }
 
 function FLAC__stream_decoder_set_md5_checking($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = 0;
  label$1 : {
   $0 = HEAP32[$0 >> 2] | 0;
   if ((HEAP32[$0 >> 2] | 0 | 0) != (9 | 0)) {
    break label$1
   }
   HEAP32[($0 + 28 | 0) >> 2] = $1;
   $2 = 1;
  }
  return $2 | 0;
 }
 
 function FLAC__stream_decoder_get_state($0) {
  $0 = $0 | 0;
  return HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function FLAC__stream_decoder_get_md5_checking($0) {
  $0 = $0 | 0;
  return HEAP32[((HEAP32[$0 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0;
 }
 
 function FLAC__stream_decoder_process_single($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, $5 = 0;
  label$1 : {
   $1 = global$0 - 16 | 0;
   $5 = $1;
   if ($1 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $5;
  }
  $2 = 1;
  label$3 : {
   label$4 : while (1) {
    $3 = 0;
    $4 = HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0;
    if ($4 >>> 0 > 7 >>> 0) {
     break label$3
    }
    label$5 : {
     label$6 : {
      switch ($4 | 0) {
      default:
       if (find_metadata_($0 | 0) | 0) {
        continue label$4
       }
       $2 = 0;
       break label$5;
      case 1:
       $3 = (read_metadata_($0 | 0) | 0 | 0) != (0 | 0);
       break label$3;
      case 2:
       if (frame_sync_($0 | 0) | 0) {
        continue label$4
       }
       break label$5;
      case 5:
      case 6:
       break label$3;
      case 4:
      case 7:
       break label$5;
      case 3:
       break label$6;
      };
     }
     label$10 : {
      if (read_frame_($0 | 0, $1 + 12 | 0 | 0, 1 | 0) | 0) {
       break label$10
      }
      $2 = 0;
      break label$5;
     }
     if (!(HEAP32[($1 + 12 | 0) >> 2] | 0)) {
      continue label$4
     }
    }
    break label$4;
   };
   $3 = $2;
  }
  label$11 : {
   $6 = $1 + 16 | 0;
   if ($6 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $6;
  }
  return $3 | 0;
 }
 
 function find_metadata_($0) {
  $0 = $0 | 0;
  var $1 = 0, $4 = 0, $3 = 0, $6 = 0, $5 = 0, $2 = 0, $9 = 0, $8 = 0, $7 = 0;
  label$1 : {
   $1 = global$0 - 16 | 0;
   $8 = $1;
   if ($1 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $8;
  }
  $2 = 1;
  $3 = 0;
  label$3 : {
   label$4 : while (1) {
    $4 = 0;
    label$5 : {
     label$6 : while (1) {
      label$7 : {
       label$8 : {
        $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
        if (!(HEAP32[($5 + 3520 | 0) >> 2] | 0)) {
         break label$8
        }
        $6 = HEAPU8[($5 + 3590 | 0) >> 0] | 0;
        HEAP32[($1 + 8 | 0) >> 2] = $6;
        HEAP32[($5 + 3520 | 0) >> 2] = 0;
        break label$7;
       }
       label$9 : {
        if (FLAC__bitreader_read_raw_uint32(HEAP32[($5 + 56 | 0) >> 2] | 0 | 0, $1 + 8 | 0 | 0, 8 | 0) | 0) {
         break label$9
        }
        $3 = 0;
        break label$3;
       }
       $6 = HEAP32[($1 + 8 | 0) >> 2] | 0;
      }
      label$10 : {
       if (($6 | 0) != (HEAPU8[(global$5 + $3 | 0) >> 0] | 0 | 0)) {
        break label$10
       }
       $2 = 1;
       $3 = $3 + 1 | 0;
       break label$5;
      }
      $3 = 0;
      if (($4 | 0) == (3 | 0)) {
       break label$3
      }
      label$11 : {
       if (($6 | 0) != (HEAPU8[((global$1 + 7540 | 0) + $4 | 0) >> 0] | 0 | 0)) {
        break label$11
       }
       $3 = 0;
       $4 = $4 + 1 | 0;
       if (($4 | 0) != (3 | 0)) {
        continue label$6
       }
       label$12 : {
        label$13 : {
         if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 + 12 | 0 | 0, 24 | 0) | 0)) {
          break label$13
         }
         if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 + 12 | 0 | 0, 8 | 0) | 0)) {
          break label$13
         }
         $6 = HEAP32[($1 + 12 | 0) >> 2] | 0;
         if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 + 12 | 0 | 0, 8 | 0) | 0)) {
          break label$13
         }
         $5 = HEAP32[($1 + 12 | 0) >> 2] | 0;
         if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 + 12 | 0 | 0, 8 | 0) | 0)) {
          break label$13
         }
         $7 = HEAP32[($1 + 12 | 0) >> 2] | 0;
         if (FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 + 12 | 0 | 0, 8 | 0) | 0) {
          break label$12
         }
        }
        $3 = 0;
        break label$3;
       }
       $3 = 0;
       if (FLAC__bitreader_skip_byte_block_aligned_no_crc(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, ($7 << 7 | 0) & 16256 | 0 | (($5 & 127 | 0 | (($6 << 7 | 0) & 16256 | 0) | 0) << 14 | 0) | 0 | ((HEAP32[($1 + 12 | 0) >> 2] | 0) & 127 | 0) | 0 | 0) | 0) {
        continue label$6
       }
       break label$3;
      }
      break label$6;
     };
     label$14 : {
      if (($6 | 0) != (255 | 0)) {
       break label$14
      }
      HEAP8[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 3588 | 0) >> 0] = 255;
      if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 + 8 | 0 | 0, 8 | 0) | 0)) {
       break label$3
      }
      label$15 : {
       $4 = HEAP32[($1 + 8 | 0) >> 2] | 0;
       if (($4 | 0) != (255 | 0)) {
        break label$15
       }
       $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       HEAP32[($4 + 3520 | 0) >> 2] = 1;
       HEAP8[($4 + 3590 | 0) >> 0] = 255;
       break label$14;
      }
      if (($4 & -2 | 0 | 0) != (248 | 0)) {
       break label$14
      }
      HEAP8[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 3589 | 0) >> 0] = $4;
      HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 3;
      $3 = 1;
      break label$3;
     }
     $3 = 0;
     label$16 : {
      if ($2) {
       break label$16
      }
      $2 = 0;
      break label$5;
     }
     $2 = 0;
     $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     if (HEAP32[($4 + 3632 | 0) >> 2] | 0) {
      break label$5
     }
     $3 = 0;
     FUNCTION_TABLE[HEAP32[($4 + 32 | 0) >> 2] | 0]($0, 0, HEAP32[($4 + 48 | 0) >> 2] | 0);
     $2 = 0;
    }
    if ($3 >>> 0 < 4 >>> 0) {
     continue label$4
    }
    break label$4;
   };
   $3 = 1;
   HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 1;
  }
  label$17 : {
   $9 = $1 + 16 | 0;
   if ($9 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $9;
  }
  return $3 | 0;
 }
 
 function read_metadata_($0) {
  $0 = $0 | 0;
  var $2 = 0, $7 = 0, $5 = 0, $4 = 0, $6 = 0, $1 = 0, $9 = 0, $8 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $10 = 0, i64toi32_i32$0 = 0, $12 = 0, $14 = 0, $11 = 0, i64toi32_i32$4 = 0, $3 = 0, $13 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $15 = 0, $44 = 0, $18 = 0, $24 = 0, $23 = 0, $190 = 0, $192 = 0, $334 = 0, $349 = 0, $492 = 0, $527 = 0, $567 = 0, $739 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $969 = 0, $1008 = 0, $1077 = 0, $1256$hi = 0, $1259$hi = 0;
  label$1 : {
   $1 = global$0 - 192 | 0;
   $23 = $1;
   if ($1 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $23;
  }
  label$3 : {
   label$4 : {
    if (FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 + 184 | 0 | 0, HEAP32[global$12 >> 2] | 0 | 0) | 0) {
     break label$4
    }
    $2 = 0;
    break label$3;
   }
   $2 = 0;
   $3 = HEAP32[($1 + 184 | 0) >> 2] | 0;
   $4 = $0 + 4 | 0;
   if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 + 180 | 0 | 0, HEAP32[global$13 >> 2] | 0 | 0) | 0)) {
    break label$3
   }
   if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 + 176 | 0 | 0, HEAP32[global$14 >> 2] | 0 | 0) | 0)) {
    break label$3
   }
   $5 = ($3 | 0) != (0 | 0);
   label$5 : {
    label$6 : {
     label$7 : {
      label$8 : {
       label$9 : {
        $2 = HEAP32[($1 + 180 | 0) >> 2] | 0;
        if ($2 >>> 0 > 3 >>> 0) {
         break label$9
        }
        label$10 : {
         label$11 : {
          switch ($2 | 0) {
          default:
           $6 = HEAP32[($1 + 176 | 0) >> 2] | 0;
           $2 = 0;
           $7 = HEAP32[$4 >> 2] | 0;
           HEAP32[($7 + 256 | 0) >> 2] = 0;
           HEAP32[($7 + 264 | 0) >> 2] = $6;
           HEAP32[($7 + 260 | 0) >> 2] = $5;
           $5 = global$15;
           $5 = HEAP32[$5 >> 2] | 0;
           if (!(FLAC__bitreader_read_raw_uint32(HEAP32[($7 + 56 | 0) >> 2] | 0 | 0, $1 | 0, $5 | 0) | 0)) {
            break label$3
           }
           HEAP32[((HEAP32[$4 >> 2] | 0) + 272 | 0) >> 2] = HEAP32[$1 >> 2] | 0;
           $7 = global$16;
           $8 = HEAP32[$7 >> 2] | 0;
           if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 | 0, $8 | 0) | 0)) {
            break label$3
           }
           HEAP32[((HEAP32[$4 >> 2] | 0) + 276 | 0) >> 2] = HEAP32[$1 >> 2] | 0;
           $7 = global$17;
           $9 = HEAP32[$7 >> 2] | 0;
           if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 | 0, $9 | 0) | 0)) {
            break label$3
           }
           HEAP32[((HEAP32[$4 >> 2] | 0) + 280 | 0) >> 2] = HEAP32[$1 >> 2] | 0;
           $7 = global$18;
           $10 = HEAP32[$7 >> 2] | 0;
           if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 | 0, $10 | 0) | 0)) {
            break label$3
           }
           HEAP32[((HEAP32[$4 >> 2] | 0) + 284 | 0) >> 2] = HEAP32[$1 >> 2] | 0;
           $7 = global$19;
           $11 = HEAP32[$7 >> 2] | 0;
           if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 | 0, $11 | 0) | 0)) {
            break label$3
           }
           HEAP32[((HEAP32[$4 >> 2] | 0) + 288 | 0) >> 2] = HEAP32[$1 >> 2] | 0;
           $7 = global$20;
           $12 = HEAP32[$7 >> 2] | 0;
           if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 | 0, $12 | 0) | 0)) {
            break label$3
           }
           HEAP32[((HEAP32[$4 >> 2] | 0) + 292 | 0) >> 2] = (HEAP32[$1 >> 2] | 0) + 1 | 0;
           $7 = global$21;
           $13 = HEAP32[$7 >> 2] | 0;
           if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 | 0, $13 | 0) | 0)) {
            break label$3
           }
           HEAP32[((HEAP32[$4 >> 2] | 0) + 296 | 0) >> 2] = (HEAP32[$1 >> 2] | 0) + 1 | 0;
           $7 = HEAP32[$4 >> 2] | 0;
           $14 = global$22;
           $190 = HEAP32[($7 + 56 | 0) >> 2] | 0;
           $192 = $7 + 304 | 0;
           $7 = HEAP32[$14 >> 2] | 0;
           if (!(FLAC__bitreader_read_raw_uint64($190 | 0, $192 | 0, $7 | 0) | 0)) {
            break label$3
           }
           $14 = HEAP32[$4 >> 2] | 0;
           if (!(FLAC__bitreader_read_byte_block_aligned_no_crc(HEAP32[($14 + 56 | 0) >> 2] | 0 | 0, $14 + 312 | 0 | 0, 16 | 0) | 0)) {
            break label$3
           }
           label$13 : {
            if (FLAC__bitreader_skip_byte_block_aligned_no_crc(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $6 - ((((((((($5 + $8 | 0) + $9 | 0) + $10 | 0) + $11 | 0) + $12 | 0) + $13 | 0) + $7 | 0) + 128 | 0) >>> 3 | 0) | 0 | 0) | 0) {
             break label$13
            }
            $2 = 0;
            break label$3;
           }
           $2 = HEAP32[$4 >> 2] | 0;
           HEAP32[($2 + 248 | 0) >> 2] = 1;
           label$14 : {
            if (memcmp($2 + 312 | 0 | 0, global$1 + 7543 | 0 | 0, 16 | 0) | 0) {
             break label$14
            }
            HEAP32[($2 + 3624 | 0) >> 2] = 0;
           }
           if (HEAP32[($2 + 3632 | 0) >> 2] | 0) {
            break label$10
           }
           if (!(HEAP32[($2 + 608 | 0) >> 2] | 0)) {
            break label$10
           }
           $7 = HEAP32[($2 + 28 | 0) >> 2] | 0;
           if (!$7) {
            break label$10
           }
           FUNCTION_TABLE[$7]($0, $2 + 256 | 0, HEAP32[($2 + 48 | 0) >> 2] | 0);
           break label$10;
          case 3:
           break label$11;
          case 1:
          case 2:
           break label$9;
          };
         }
         $2 = HEAP32[$4 >> 2] | 0;
         HEAP32[($2 + 252 | 0) >> 2] = 0;
         $10 = HEAP32[($1 + 176 | 0) >> 2] | 0;
         HEAP32[($2 + 448 | 0) >> 2] = ($10 >>> 0) / (18 >>> 0) | 0;
         HEAP32[($2 + 440 | 0) >> 2] = $10;
         HEAP32[($2 + 436 | 0) >> 2] = $5;
         HEAP32[($2 + 432 | 0) >> 2] = 3;
         $2 = HEAP32[$4 >> 2] | 0;
         $5 = HEAP32[($2 + 452 | 0) >> 2] | 0;
         label$15 : {
          label$16 : {
           $7 = HEAP32[($2 + 448 | 0) >> 2] | 0;
           if (!$7) {
            break label$16
           }
           label$17 : {
            i64toi32_i32$0 = 0;
            i64toi32_i32$1 = 0;
            i64toi32_i32$1 = __wasm_i64_mul($7 | 0, i64toi32_i32$0 | 0, 24 | 0, i64toi32_i32$1 | 0) | 0;
            i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
            i64toi32_i32$2 = i64toi32_i32$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$3 = 32;
            i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
             i64toi32_i32$1 = 0;
             $44 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
            } else {
             i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
             $44 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
            }
            if ($44) {
             break label$17
            }
            label$18 : {
             $2 = dlrealloc($5 | 0, Math_imul($7, 24) | 0) | 0;
             if (!$2) {
              break label$18
             }
             HEAP32[((HEAP32[$4 >> 2] | 0) + 452 | 0) >> 2] = $2;
             break label$15;
            }
            dlfree($5 | 0);
            $2 = HEAP32[$4 >> 2] | 0;
           }
           HEAP32[($2 + 452 | 0) >> 2] = 0;
           break label$6;
          }
          $2 = dlrealloc($5 | 0, 0 | 0) | 0;
          HEAP32[((HEAP32[$4 >> 2] | 0) + 452 | 0) >> 2] = $2;
          if (!$2) {
           break label$6
          }
         }
         label$19 : {
          label$20 : {
           $2 = HEAP32[$4 >> 2] | 0;
           if (HEAP32[($2 + 448 | 0) >> 2] | 0) {
            break label$20
           }
           $7 = 0;
           break label$19;
          }
          $9 = HEAP32[global$23 >> 2] | 0;
          $8 = HEAP32[global$24 >> 2] | 0;
          $6 = HEAP32[global$25 >> 2] | 0;
          $7 = 0;
          label$21 : while (1) {
           if (!(FLAC__bitreader_read_raw_uint64(HEAP32[($2 + 56 | 0) >> 2] | 0 | 0, $1 | 0, $6 | 0) | 0)) {
            break label$5
           }
           $2 = HEAP32[$4 >> 2] | 0;
           $5 = Math_imul($7, 24);
           i64toi32_i32$0 = $1;
           i64toi32_i32$1 = HEAP32[$1 >> 2] | 0;
           i64toi32_i32$2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
           $334 = i64toi32_i32$1;
           i64toi32_i32$1 = (HEAP32[($2 + 452 | 0) >> 2] | 0) + $5 | 0;
           HEAP32[i64toi32_i32$1 >> 2] = $334;
           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
           if (!(FLAC__bitreader_read_raw_uint64(HEAP32[($2 + 56 | 0) >> 2] | 0 | 0, $1 | 0, $8 | 0) | 0)) {
            break label$5
           }
           $2 = HEAP32[$4 >> 2] | 0;
           i64toi32_i32$0 = $1;
           i64toi32_i32$2 = HEAP32[$1 >> 2] | 0;
           i64toi32_i32$1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
           $349 = i64toi32_i32$2;
           i64toi32_i32$2 = (HEAP32[($2 + 452 | 0) >> 2] | 0) + $5 | 0;
           HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $349;
           HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
           if (!(FLAC__bitreader_read_raw_uint32(HEAP32[($2 + 56 | 0) >> 2] | 0 | 0, $1 + 188 | 0 | 0, $9 | 0) | 0)) {
            break label$5
           }
           $2 = HEAP32[$4 >> 2] | 0;
           HEAP32[(((HEAP32[($2 + 452 | 0) >> 2] | 0) + $5 | 0) + 16 | 0) >> 2] = HEAP32[($1 + 188 | 0) >> 2] | 0;
           $7 = $7 + 1 | 0;
           $5 = HEAP32[($2 + 448 | 0) >> 2] | 0;
           if ($7 >>> 0 < $5 >>> 0) {
            continue label$21
           }
           break label$21;
          };
          $7 = Math_imul($5, -18);
         }
         label$22 : {
          $7 = $7 + $10 | 0;
          if (!$7) {
           break label$22
          }
          if (!(FLAC__bitreader_skip_byte_block_aligned_no_crc(HEAP32[($2 + 56 | 0) >> 2] | 0 | 0, $7 | 0) | 0)) {
           break label$5
          }
          $2 = HEAP32[$4 >> 2] | 0;
         }
         HEAP32[($2 + 252 | 0) >> 2] = 1;
         if (HEAP32[($2 + 3632 | 0) >> 2] | 0) {
          break label$10
         }
         if (!(HEAP32[($2 + 620 | 0) >> 2] | 0)) {
          break label$10
         }
         $7 = HEAP32[($2 + 28 | 0) >> 2] | 0;
         if (!$7) {
          break label$10
         }
         FUNCTION_TABLE[$7]($0, $2 + 432 | 0, HEAP32[($2 + 48 | 0) >> 2] | 0);
        }
        if (!$3) {
         break label$7
        }
        break label$8;
       }
       $8 = HEAP32[$4 >> 2] | 0;
       $10 = HEAP32[(($8 + ($2 << 2 | 0) | 0) + 608 | 0) >> 2] | 0;
       $6 = HEAP32[($1 + 176 | 0) >> 2] | 0;
       $7 = memset($1 | 0, 0 | 0, 176 | 0) | 0;
       HEAP32[($7 + 8 | 0) >> 2] = $6;
       HEAP32[$7 >> 2] = $2;
       HEAP32[($7 + 4 | 0) >> 2] = $5;
       $11 = !$10;
       label$23 : {
        label$24 : {
         label$25 : {
          if (($2 | 0) != (2 | 0)) {
           break label$25
          }
          $2 = global$8;
          $9 = $7 + 16 | 0;
          $5 = (HEAP32[$2 >> 2] | 0) >>> 3 | 0;
          if (!(FLAC__bitreader_read_byte_block_aligned_no_crc(HEAP32[($8 + 56 | 0) >> 2] | 0 | 0, $9 | 0, $5 | 0) | 0)) {
           break label$24
          }
          label$26 : {
           if ($6 >>> 0 >= $5 >>> 0) {
            break label$26
           }
           HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
           $2 = 0;
           break label$3;
          }
          $6 = $6 - $5 | 0;
          $8 = HEAP32[$4 >> 2] | 0;
          $12 = HEAP32[($8 + 1124 | 0) >> 2] | 0;
          if (!$12) {
           break label$25
          }
          $14 = HEAP32[($8 + 1120 | 0) >> 2] | 0;
          $2 = 0;
          label$27 : {
           label$28 : while (1) {
            if (!(memcmp($14 + Math_imul($2, $5) | 0 | 0, $9 | 0, $5 | 0) | 0)) {
             break label$27
            }
            $2 = $2 + 1 | 0;
            if (($2 | 0) == ($12 | 0)) {
             break label$25
            }
            continue label$28;
           };
          }
          $11 = ($10 | 0) != (0 | 0);
         }
         label$29 : {
          if (!$11) {
           break label$29
          }
          if (!(FLAC__bitreader_skip_byte_block_aligned_no_crc(HEAP32[($8 + 56 | 0) >> 2] | 0 | 0, $6 | 0) | 0)) {
           break label$24
          }
          break label$23;
         }
         label$30 : {
          label$31 : {
           label$32 : {
            label$33 : {
             label$34 : {
              label$35 : {
               $2 = HEAP32[($7 + 180 | 0) >> 2] | 0;
               if ($2 >>> 0 > 6 >>> 0) {
                break label$35
               }
               label$36 : {
                switch ($2 | 0) {
                case 1:
                 if (FLAC__bitreader_skip_byte_block_aligned_no_crc(HEAP32[($8 + 56 | 0) >> 2] | 0 | 0, $6 | 0) | 0) {
                  break label$33
                 }
                 $9 = 0;
                 break label$30;
                case 2:
                 if (!$6) {
                  break label$34
                 }
                 $492 = $7 + 20 | 0;
                 $2 = dlmalloc($6 | 0) | 0;
                 HEAP32[$492 >> 2] = $2;
                 label$41 : {
                  if ($2) {
                   break label$41
                  }
                  HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
                  $9 = 0;
                  break label$30;
                 }
                 if (FLAC__bitreader_read_byte_block_aligned_no_crc(HEAP32[($8 + 56 | 0) >> 2] | 0 | 0, $2 | 0, $6 | 0) | 0) {
                  break label$33
                 }
                 $9 = 0;
                 break label$30;
                case 4:
                 label$42 : {
                  if ($6 >>> 0 < 8 >>> 0) {
                   break label$42
                  }
                  $9 = 0;
                  if (!(FLAC__bitreader_read_uint32_little_endian(HEAP32[($8 + 56 | 0) >> 2] | 0 | 0, $7 + 16 | 0 | 0) | 0)) {
                   break label$30
                  }
                  $6 = $6 + -8 | 0;
                  label$43 : {
                   label$44 : {
                    $2 = HEAP32[($7 + 16 | 0) >> 2] | 0;
                    if (!$2) {
                     break label$44
                    }
                    label$45 : {
                     if ($6 >>> 0 >= $2 >>> 0) {
                      break label$45
                     }
                     i64toi32_i32$2 = $7;
                     i64toi32_i32$1 = 0;
                     HEAP32[($7 + 16 | 0) >> 2] = 0;
                     HEAP32[($7 + 20 | 0) >> 2] = i64toi32_i32$1;
                     break label$42;
                    }
                    label$46 : {
                     label$47 : {
                      label$48 : {
                       if (($2 | 0) != (-1 | 0)) {
                        break label$48
                       }
                       HEAP32[($7 + 20 | 0) >> 2] = 0;
                       break label$47;
                      }
                      $527 = $7 + 20 | 0;
                      $5 = dlmalloc($2 + 1 | 0 | 0) | 0;
                      HEAP32[$527 >> 2] = $5;
                      if ($5) {
                       break label$46
                      }
                     }
                     HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
                     break label$30;
                    }
                    if (!(FLAC__bitreader_read_byte_block_aligned_no_crc(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $5 | 0, $2 | 0) | 0)) {
                     break label$30
                    }
                    $6 = $6 - $2 | 0;
                    HEAP8[((HEAP32[($7 + 20 | 0) >> 2] | 0) + (HEAP32[($7 + 16 | 0) >> 2] | 0) | 0) >> 0] = 0;
                    break label$43;
                   }
                   HEAP32[($7 + 20 | 0) >> 2] = 0;
                  }
                  if (!(FLAC__bitreader_read_uint32_little_endian(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $7 + 24 | 0 | 0) | 0)) {
                   break label$30
                  }
                  label$49 : {
                   $2 = HEAP32[($7 + 24 | 0) >> 2] | 0;
                   if ($2 >>> 0 < 100001 >>> 0) {
                    break label$49
                   }
                   $9 = 0;
                   HEAP32[($7 + 24 | 0) >> 2] = 0;
                   break label$30;
                  }
                  if (!$2) {
                   break label$42
                  }
                  $567 = $7 + 28 | 0;
                  $5 = safe_malloc_mul_2op_p($2 | 0, 8 | 0) | 0;
                  HEAP32[$567 >> 2] = $5;
                  if (!$5) {
                   break label$32
                  }
                  if (!(HEAP32[($7 + 24 | 0) >> 2] | 0)) {
                   break label$42
                  }
                  i64toi32_i32$2 = $5;
                  i64toi32_i32$1 = 0;
                  HEAP32[$5 >> 2] = 0;
                  HEAP32[($5 + 4 | 0) >> 2] = i64toi32_i32$1;
                  $2 = 0;
                  label$50 : {
                   if ($6 >>> 0 < 4 >>> 0) {
                    break label$50
                   }
                   label$51 : while (1) {
                    if (!(FLAC__bitreader_read_uint32_little_endian(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $5 | 0) | 0)) {
                     break label$31
                    }
                    $6 = $6 + -4 | 0;
                    label$52 : {
                     label$53 : {
                      $9 = HEAP32[($7 + 28 | 0) >> 2] | 0;
                      $10 = $2 << 3 | 0;
                      $5 = $9 + $10 | 0;
                      $8 = HEAP32[$5 >> 2] | 0;
                      if (!$8) {
                       break label$53
                      }
                      if ($6 >>> 0 < $8 >>> 0) {
                       break label$50
                      }
                      label$54 : {
                       label$55 : {
                        label$56 : {
                         if (($8 | 0) != (-1 | 0)) {
                          break label$56
                         }
                         HEAP32[(($9 + ($2 << 3 | 0) | 0) + 4 | 0) >> 2] = 0;
                         break label$55;
                        }
                        $9 = dlmalloc($8 + 1 | 0 | 0) | 0;
                        HEAP32[($5 + 4 | 0) >> 2] = $9;
                        if ($9) {
                         break label$54
                        }
                       }
                       HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
                       break label$31;
                      }
                      $6 = $6 - $8 | 0;
                      memset($9 | 0, 0 | 0, HEAP32[$5 >> 2] | 0 | 0) | 0;
                      $5 = FLAC__bitreader_read_byte_block_aligned_no_crc(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0, HEAP32[$5 >> 2] | 0 | 0) | 0;
                      $9 = (HEAP32[($7 + 28 | 0) >> 2] | 0) + $10 | 0;
                      $8 = HEAP32[($9 + 4 | 0) >> 2] | 0;
                      label$57 : {
                       if ($5) {
                        break label$57
                       }
                       dlfree($8 | 0);
                       HEAP32[(((HEAP32[($7 + 28 | 0) >> 2] | 0) + ($2 << 3 | 0) | 0) + 4 | 0) >> 2] = 0;
                       break label$50;
                      }
                      HEAP8[($8 + (HEAP32[$9 >> 2] | 0) | 0) >> 0] = 0;
                      break label$52;
                     }
                     HEAP32[($5 + 4 | 0) >> 2] = 0;
                    }
                    $2 = $2 + 1 | 0;
                    if ($2 >>> 0 >= (HEAP32[($7 + 24 | 0) >> 2] | 0) >>> 0) {
                     break label$42
                    }
                    $5 = (HEAP32[($7 + 28 | 0) >> 2] | 0) + ($2 << 3 | 0) | 0;
                    i64toi32_i32$2 = $5;
                    i64toi32_i32$1 = 0;
                    HEAP32[$5 >> 2] = 0;
                    HEAP32[($5 + 4 | 0) >> 2] = i64toi32_i32$1;
                    if ($6 >>> 0 >= 4 >>> 0) {
                     continue label$51
                    }
                    break label$51;
                   };
                  }
                  HEAP32[($7 + 24 | 0) >> 2] = $2;
                 }
                 if (!$6) {
                  break label$33
                 }
                 label$58 : {
                  if (HEAP32[($7 + 24 | 0) >> 2] | 0) {
                   break label$58
                  }
                  $2 = $7 + 28 | 0;
                  dlfree(HEAP32[$2 >> 2] | 0 | 0);
                  HEAP32[$2 >> 2] = 0;
                 }
                 if (FLAC__bitreader_skip_byte_block_aligned_no_crc(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $6 | 0) | 0) {
                  break label$33
                 }
                 $9 = 0;
                 break label$30;
                case 5:
                 $9 = 0;
                 $2 = memset($7 + 16 | 0 | 0, 0 | 0, 160 | 0) | 0;
                 $5 = global$26;
                 if (!(FLAC__bitreader_read_byte_block_aligned_no_crc(HEAP32[($8 + 56 | 0) >> 2] | 0 | 0, $2 | 0, (HEAP32[$5 >> 2] | 0) >>> 3 | 0 | 0) | 0)) {
                  break label$30
                 }
                 if (!(FLAC__bitreader_read_raw_uint64(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $7 + 152 | 0 | 0, HEAP32[global$27 >> 2] | 0 | 0) | 0)) {
                  break label$30
                 }
                 if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $7 + 188 | 0 | 0, HEAP32[global$28 >> 2] | 0 | 0) | 0)) {
                  break label$30
                 }
                 HEAP32[($7 + 160 | 0) >> 2] = (HEAP32[($7 + 188 | 0) >> 2] | 0 | 0) != (0 | 0);
                 if (!(FLAC__bitreader_skip_bits_no_crc(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, HEAP32[global$29 >> 2] | 0 | 0) | 0)) {
                  break label$30
                 }
                 if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $7 + 188 | 0 | 0, HEAP32[global$30 >> 2] | 0 | 0) | 0)) {
                  break label$30
                 }
                 $2 = HEAP32[($7 + 188 | 0) >> 2] | 0;
                 HEAP32[($7 + 164 | 0) >> 2] = $2;
                 if (!$2) {
                  break label$33
                 }
                 $739 = $7 + 168 | 0;
                 $2 = dlcalloc($2 | 0, 32 | 0) | 0;
                 HEAP32[$739 >> 2] = $2;
                 label$59 : {
                  if (!$2) {
                   break label$59
                  }
                  $6 = global$31;
                  $8 = global$32;
                  $10 = global$33;
                  $12 = global$34;
                  $14 = global$35;
                  $13 = global$36;
                  $15 = global$37;
                  $16 = global$38;
                  $17 = global$39;
                  $5 = global$40;
                  $18 = HEAP32[$5 >> 2] | 0;
                  if (!(FLAC__bitreader_read_raw_uint64(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $2 | 0, $18 | 0) | 0)) {
                   break label$30
                  }
                  $19 = (HEAP32[$6 >> 2] | 0) >>> 3 | 0;
                  $11 = HEAP32[$8 >> 2] | 0;
                  $10 = HEAP32[$10 >> 2] | 0;
                  $8 = HEAP32[$12 >> 2] | 0;
                  $20 = HEAP32[$14 >> 2] | 0;
                  $21 = HEAP32[$13 >> 2] | 0;
                  $22 = HEAP32[$15 >> 2] | 0;
                  $15 = HEAP32[$16 >> 2] | 0;
                  $13 = HEAP32[$17 >> 2] | 0;
                  $6 = 0;
                  label$60 : while (1) {
                   if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $7 + 188 | 0 | 0, $13 | 0) | 0)) {
                    break label$30
                   }
                   $2 = $2 + ($6 << 5 | 0) | 0;
                   HEAP8[($2 + 8 | 0) >> 0] = HEAP32[($7 + 188 | 0) >> 2] | 0;
                   if (!(FLAC__bitreader_read_byte_block_aligned_no_crc(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $2 + 9 | 0 | 0, $19 | 0) | 0)) {
                    break label$30
                   }
                   if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $7 + 188 | 0 | 0, $15 | 0) | 0)) {
                    break label$30
                   }
                   HEAP8[($2 + 22 | 0) >> 0] = (HEAPU8[($2 + 22 | 0) >> 0] | 0) & 254 | 0 | ((HEAPU8[($7 + 188 | 0) >> 0] | 0) & 1 | 0) | 0;
                   if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $7 + 188 | 0 | 0, $22 | 0) | 0)) {
                    break label$30
                   }
                   $5 = $2 + 22 | 0;
                   HEAP8[$5 >> 0] = ((HEAPU8[($7 + 188 | 0) >> 0] | 0) << 1 | 0) & 2 | 0 | ((HEAPU8[$5 >> 0] | 0) & 253 | 0) | 0;
                   if (!(FLAC__bitreader_skip_bits_no_crc(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $21 | 0) | 0)) {
                    break label$30
                   }
                   if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $7 + 188 | 0 | 0, $20 | 0) | 0)) {
                    break label$30
                   }
                   $5 = HEAP32[($7 + 188 | 0) >> 2] | 0;
                   HEAP8[($2 + 23 | 0) >> 0] = $5;
                   label$61 : {
                    $5 = $5 & 255 | 0;
                    if (!$5) {
                     break label$61
                    }
                    $5 = dlcalloc($5 | 0, 16 | 0) | 0;
                    HEAP32[($2 + 24 | 0) >> 2] = $5;
                    label$62 : {
                     label$63 : {
                      if (!$5) {
                       break label$63
                      }
                      $12 = $2 + 23 | 0;
                      if (!(HEAPU8[$12 >> 0] | 0)) {
                       break label$61
                      }
                      if (!(FLAC__bitreader_read_raw_uint64(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $5 | 0, $8 | 0) | 0)) {
                       break label$30
                      }
                      $14 = $2 + 24 | 0;
                      $2 = 0;
                      break label$62;
                     }
                     HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
                     break label$30;
                    }
                    label$64 : while (1) {
                     if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $7 + 188 | 0 | 0, $10 | 0) | 0)) {
                      break label$30
                     }
                     HEAP8[(($5 + ($2 << 4 | 0) | 0) + 8 | 0) >> 0] = HEAP32[($7 + 188 | 0) >> 2] | 0;
                     if (!(FLAC__bitreader_skip_bits_no_crc(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $11 | 0) | 0)) {
                      break label$30
                     }
                     $2 = $2 + 1 | 0;
                     if ($2 >>> 0 >= (HEAPU8[$12 >> 0] | 0) >>> 0) {
                      break label$61
                     }
                     $5 = HEAP32[$14 >> 2] | 0;
                     if (!(FLAC__bitreader_read_raw_uint64(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $5 + ($2 << 4 | 0) | 0 | 0, $8 | 0) | 0)) {
                      break label$30
                     }
                     continue label$64;
                    };
                   }
                   $6 = $6 + 1 | 0;
                   if ($6 >>> 0 >= (HEAP32[($7 + 164 | 0) >> 2] | 0) >>> 0) {
                    break label$33
                   }
                   $2 = HEAP32[($7 + 168 | 0) >> 2] | 0;
                   if (FLAC__bitreader_read_raw_uint64(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $2 + ($6 << 5 | 0) | 0 | 0, $18 | 0) | 0) {
                    continue label$60
                   }
                   break label$30;
                  };
                 }
                 HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
                 break label$30;
                case 6:
                 break label$36;
                default:
                 break label$33;
                };
               }
               label$65 : {
                if (!(FLAC__bitreader_read_raw_uint32(HEAP32[($8 + 56 | 0) >> 2] | 0 | 0, $7 + 188 | 0 | 0, HEAP32[global$41 >> 2] | 0 | 0) | 0)) {
                 break label$65
                }
                HEAP32[($7 + 16 | 0) >> 2] = HEAP32[($7 + 188 | 0) >> 2] | 0;
                if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $7 + 188 | 0 | 0, HEAP32[global$42 >> 2] | 0 | 0) | 0)) {
                 break label$65
                }
                label$66 : {
                 label$67 : {
                  label$68 : {
                   $2 = HEAP32[($7 + 188 | 0) >> 2] | 0;
                   if (($2 | 0) != (-1 | 0)) {
                    break label$68
                   }
                   HEAP32[($7 + 20 | 0) >> 2] = 0;
                   break label$67;
                  }
                  $969 = $7 + 20 | 0;
                  $5 = dlmalloc($2 + 1 | 0 | 0) | 0;
                  HEAP32[$969 >> 2] = $5;
                  if ($5) {
                   break label$66
                  }
                 }
                 HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
                 $9 = 0;
                 break label$30;
                }
                label$69 : {
                 label$70 : {
                  if ($2) {
                   break label$70
                  }
                  $2 = 0;
                  break label$69;
                 }
                 if (!(FLAC__bitreader_read_byte_block_aligned_no_crc(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $5 | 0, $2 | 0) | 0)) {
                  break label$65
                 }
                 $2 = HEAP32[($7 + 188 | 0) >> 2] | 0;
                 $5 = HEAP32[($7 + 20 | 0) >> 2] | 0;
                }
                HEAP8[($5 + $2 | 0) >> 0] = 0;
                if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $7 + 188 | 0 | 0, HEAP32[global$43 >> 2] | 0 | 0) | 0)) {
                 break label$65
                }
                label$71 : {
                 label$72 : {
                  label$73 : {
                   $2 = HEAP32[($7 + 188 | 0) >> 2] | 0;
                   if (($2 | 0) != (-1 | 0)) {
                    break label$73
                   }
                   HEAP32[($7 + 24 | 0) >> 2] = 0;
                   break label$72;
                  }
                  $1008 = $7 + 24 | 0;
                  $5 = dlmalloc($2 + 1 | 0 | 0) | 0;
                  HEAP32[$1008 >> 2] = $5;
                  if ($5) {
                   break label$71
                  }
                 }
                 HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
                 $9 = 0;
                 break label$30;
                }
                label$74 : {
                 label$75 : {
                  if ($2) {
                   break label$75
                  }
                  $2 = 0;
                  break label$74;
                 }
                 if (!(FLAC__bitreader_read_byte_block_aligned_no_crc(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $5 | 0, $2 | 0) | 0)) {
                  break label$65
                 }
                 $2 = HEAP32[($7 + 188 | 0) >> 2] | 0;
                 $5 = HEAP32[($7 + 24 | 0) >> 2] | 0;
                }
                HEAP8[($5 + $2 | 0) >> 0] = 0;
                if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $7 + 28 | 0 | 0, HEAP32[global$44 >> 2] | 0 | 0) | 0)) {
                 break label$65
                }
                if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $7 + 32 | 0 | 0, HEAP32[global$45 >> 2] | 0 | 0) | 0)) {
                 break label$65
                }
                if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $7 + 36 | 0 | 0, HEAP32[global$46 >> 2] | 0 | 0) | 0)) {
                 break label$65
                }
                if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $7 + 40 | 0 | 0, HEAP32[global$47 >> 2] | 0 | 0) | 0)) {
                 break label$65
                }
                if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $7 + 44 | 0 | 0, HEAP32[global$48 >> 2] | 0 | 0) | 0)) {
                 break label$65
                }
                $1077 = $7 + 48 | 0;
                $2 = HEAP32[($7 + 44 | 0) >> 2] | 0;
                $5 = dlmalloc(($2 ? $2 : 1) | 0) | 0;
                HEAP32[$1077 >> 2] = $5;
                label$76 : {
                 if ($5) {
                  break label$76
                 }
                 HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
                 $9 = 0;
                 break label$30;
                }
                if (!$2) {
                 break label$33
                }
                if (FLAC__bitreader_read_byte_block_aligned_no_crc(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $5 | 0, $2 | 0) | 0) {
                 break label$33
                }
               }
               $9 = 0;
               break label$30;
              }
              label$77 : {
               label$78 : {
                if (!$6) {
                 break label$78
                }
                $2 = dlmalloc($6 | 0) | 0;
                HEAP32[($7 + 16 | 0) >> 2] = $2;
                if ($2) {
                 break label$77
                }
                HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
                $9 = 0;
                break label$30;
               }
               HEAP32[($7 + 16 | 0) >> 2] = 0;
               break label$33;
              }
              if (FLAC__bitreader_read_byte_block_aligned_no_crc(HEAP32[($8 + 56 | 0) >> 2] | 0 | 0, $2 | 0, $6 | 0) | 0) {
               break label$33
              }
              $9 = 0;
              break label$30;
             }
             HEAP32[($7 + 20 | 0) >> 2] = 0;
            }
            $9 = 1;
            $2 = HEAP32[$4 >> 2] | 0;
            if (HEAP32[($2 + 3632 | 0) >> 2] | 0) {
             break label$30
            }
            $5 = HEAP32[($2 + 28 | 0) >> 2] | 0;
            if (!$5) {
             break label$30
            }
            FUNCTION_TABLE[$5]($0, $7, HEAP32[($2 + 48 | 0) >> 2] | 0);
            break label$30;
           }
           $9 = 0;
           HEAP32[($7 + 24 | 0) >> 2] = 0;
           HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
           break label$30;
          }
          HEAP32[($7 + 24 | 0) >> 2] = $2;
          $9 = 0;
         }
         label$79 : {
          label$80 : {
           $2 = (HEAP32[($7 + 180 | 0) >> 2] | 0) + -1 | 0;
           if ($2 >>> 0 > 5 >>> 0) {
            break label$80
           }
           label$81 : {
            switch ($2 | 0) {
            case 1:
             $2 = HEAP32[($7 + 20 | 0) >> 2] | 0;
             if (!$2) {
              break label$79
             }
             dlfree($2 | 0);
             break label$79;
            case 3:
             label$85 : {
              $2 = HEAP32[($7 + 20 | 0) >> 2] | 0;
              if (!$2) {
               break label$85
              }
              dlfree($2 | 0);
             }
             label$86 : {
              $5 = HEAP32[($7 + 24 | 0) >> 2] | 0;
              if (!$5) {
               break label$86
              }
              $2 = 0;
              label$87 : while (1) {
               label$88 : {
                $6 = HEAP32[(((HEAP32[($7 + 28 | 0) >> 2] | 0) + ($2 << 3 | 0) | 0) + 4 | 0) >> 2] | 0;
                if (!$6) {
                 break label$88
                }
                dlfree($6 | 0);
                $5 = HEAP32[($7 + 24 | 0) >> 2] | 0;
               }
               $2 = $2 + 1 | 0;
               if ($2 >>> 0 < $5 >>> 0) {
                continue label$87
               }
               break label$87;
              };
             }
             $2 = HEAP32[($7 + 28 | 0) >> 2] | 0;
             if (!$2) {
              break label$79
             }
             dlfree($2 | 0);
             break label$79;
            case 4:
             label$89 : {
              $5 = HEAP32[($7 + 164 | 0) >> 2] | 0;
              if (!$5) {
               break label$89
              }
              $2 = 0;
              label$90 : while (1) {
               label$91 : {
                $6 = HEAP32[(((HEAP32[($7 + 168 | 0) >> 2] | 0) + ($2 << 5 | 0) | 0) + 24 | 0) >> 2] | 0;
                if (!$6) {
                 break label$91
                }
                dlfree($6 | 0);
                $5 = HEAP32[($7 + 164 | 0) >> 2] | 0;
               }
               $2 = $2 + 1 | 0;
               if ($2 >>> 0 < $5 >>> 0) {
                continue label$90
               }
               break label$90;
              };
             }
             $2 = HEAP32[($7 + 168 | 0) >> 2] | 0;
             if (!$2) {
              break label$79
             }
             dlfree($2 | 0);
             break label$79;
            case 2:
             break label$80;
            case 5:
             break label$81;
            default:
             break label$79;
            };
           }
           label$92 : {
            $2 = HEAP32[($7 + 20 | 0) >> 2] | 0;
            if (!$2) {
             break label$92
            }
            dlfree($2 | 0);
           }
           label$93 : {
            $2 = HEAP32[($7 + 24 | 0) >> 2] | 0;
            if (!$2) {
             break label$93
            }
            dlfree($2 | 0);
           }
           $2 = HEAP32[($7 + 48 | 0) >> 2] | 0;
           if (!$2) {
            break label$79
           }
           dlfree($2 | 0);
           break label$79;
          }
          $2 = HEAP32[($7 + 16 | 0) >> 2] | 0;
          if (!$2) {
           break label$79
          }
          dlfree($2 | 0);
         }
         if ($9) {
          break label$23
         }
        }
        $2 = 0;
        break label$3;
       }
       if (!$3) {
        break label$7
       }
      }
      label$94 : {
       label$95 : {
        $2 = HEAP32[$4 >> 2] | 0;
        if (HEAP32[$2 >> 2] | 0) {
         break label$95
        }
        $3 = HEAP32[($2 + 12 | 0) >> 2] | 0;
        if (!$3) {
         break label$95
        }
        $7 = $2 + 6136 | 0;
        if (FUNCTION_TABLE[$3]($0, $7, HEAP32[($2 + 48 | 0) >> 2] | 0) | 0) {
         break label$95
        }
        if (!(FLAC__bitreader_is_consumed_byte_aligned(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) | 0)) {
         break label$95
        }
        $4 = FLAC__bitreader_get_input_bits_unconsumed(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) | 0;
        i64toi32_i32$0 = $7;
        i64toi32_i32$1 = HEAP32[$7 >> 2] | 0;
        i64toi32_i32$2 = HEAP32[($7 + 4 | 0) >> 2] | 0;
        $1256$hi = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        $1259$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $1256$hi;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$1 = $1259$hi;
        i64toi32_i32$3 = $4 >>> 3 | 0;
        i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
        i64toi32_i32$5 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
        i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
        i64toi32_i32$0 = $7;
        HEAP32[$7 >> 2] = i64toi32_i32$4;
        HEAP32[($7 + 4 | 0) >> 2] = i64toi32_i32$5;
        break label$94;
       }
       i64toi32_i32$0 = HEAP32[$4 >> 2] | 0;
       i64toi32_i32$5 = 0;
       HEAP32[(i64toi32_i32$0 + 6136 | 0) >> 2] = 0;
       HEAP32[(i64toi32_i32$0 + 6140 | 0) >> 2] = i64toi32_i32$5;
      }
      HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
     }
     $2 = 1;
     break label$3;
    }
    HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
   }
   $2 = 0;
  }
  label$96 : {
   $24 = $1 + 192 | 0;
   if ($24 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $24;
  }
  return $2 | 0;
 }
 
 function frame_sync_($0) {
  $0 = $0 | 0;
  var $2 = 0, $1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4 = 0, i64toi32_i32$2 = 0, $7$hi = 0, $6 = 0, $5 = 0, $7 = 0, $26$hi = 0, $3 = 0;
  label$1 : {
   $1 = global$0 - 16 | 0;
   $5 = $1;
   if ($1 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $5;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     if (!(HEAP32[($2 + 248 | 0) >> 2] | 0)) {
      break label$5
     }
     i64toi32_i32$2 = $2 + 304 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $7 = i64toi32_i32$0;
     $7$hi = i64toi32_i32$1;
     if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
      break label$5
     }
     i64toi32_i32$2 = $2;
     i64toi32_i32$1 = HEAP32[($2 + 240 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($2 + 244 | 0) >> 2] | 0;
     $26$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $7$hi;
     i64toi32_i32$0 = $26$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = $7$hi;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < $7 >>> 0 | 0) | 0) {
      break label$5
     }
     HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 4;
     break label$4;
    }
    label$6 : {
     if (FLAC__bitreader_is_consumed_byte_aligned(HEAP32[($2 + 56 | 0) >> 2] | 0 | 0) | 0) {
      break label$6
     }
     $2 = HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0;
     if (FLAC__bitreader_read_raw_uint32($2 | 0, $1 + 12 | 0 | 0, FLAC__bitreader_bits_left_for_byte_alignment($2 | 0) | 0 | 0) | 0) {
      break label$6
     }
     $0 = 0;
     break label$3;
    }
    $2 = 1;
    label$7 : while (1) {
     $3 = $2;
     label$8 : {
      label$9 : {
       $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       if (!(HEAP32[($2 + 3520 | 0) >> 2] | 0)) {
        break label$9
       }
       $4 = HEAPU8[($2 + 3590 | 0) >> 0] | 0;
       HEAP32[($1 + 12 | 0) >> 2] = $4;
       HEAP32[($2 + 3520 | 0) >> 2] = 0;
       break label$8;
      }
      label$10 : {
       if (FLAC__bitreader_read_raw_uint32(HEAP32[($2 + 56 | 0) >> 2] | 0 | 0, $1 + 12 | 0 | 0, 8 | 0) | 0) {
        break label$10
       }
       $0 = 0;
       break label$3;
      }
      $4 = HEAP32[($1 + 12 | 0) >> 2] | 0;
     }
     label$11 : {
      if (($4 | 0) != (255 | 0)) {
       break label$11
      }
      HEAP8[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 3588 | 0) >> 0] = 255;
      label$12 : {
       if (FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 + 12 | 0 | 0, 8 | 0) | 0) {
        break label$12
       }
       $0 = 0;
       break label$3;
      }
      label$13 : {
       $2 = HEAP32[($1 + 12 | 0) >> 2] | 0;
       if (($2 | 0) != (255 | 0)) {
        break label$13
       }
       $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       HEAP32[($2 + 3520 | 0) >> 2] = 1;
       HEAP8[($2 + 3590 | 0) >> 0] = 255;
       break label$11;
      }
      if (($2 & -2 | 0 | 0) != (248 | 0)) {
       break label$11
      }
      HEAP8[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 3589 | 0) >> 0] = $2;
      HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 3;
      break label$4;
     }
     $2 = 0;
     if (!$3) {
      continue label$7
     }
     $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     if (HEAP32[($4 + 3632 | 0) >> 2] | 0) {
      continue label$7
     }
     $2 = 0;
     FUNCTION_TABLE[HEAP32[($4 + 32 | 0) >> 2] | 0]($0, 0, HEAP32[($4 + 48 | 0) >> 2] | 0);
     continue label$7;
    };
   }
   $0 = 1;
  }
  label$14 : {
   $6 = $1 + 16 | 0;
   if ($6 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $6;
  }
  return $0 | 0;
 }
 
 function read_frame_($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $7 = 0, $6 = 0, $5 = 0, $10 = 0, $3 = 0, $11 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $8 = 0, $9 = 0, $4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, $18 = 0, i64toi32_i32$4 = 0, $19 = 0, $21 = 0, $25$hi = 0, $25 = 0, $17 = 0, $20 = 0, $27$hi = 0, $22 = 0, $12 = 0, $14 = 0, $15 = 0, $26$hi = 0, $27 = 0, $24 = 0, $23 = 0, $501$hi = 0, $503$hi = 0, $504 = 0, $517 = 0, $519$hi = 0, $521$hi = 0, $522 = 0, $538 = 0, $540$hi = 0, $542$hi = 0, $56 = 0, $543 = 0, $13 = 0, $16 = 0, $1769 = 0, $1865 = 0, $1871$hi = 0, $26 = 0, $1934 = 0, $1936 = 0, $1936$hi = 0, $1938 = 0, $1938$hi = 0;
  label$1 : {
   $3 = global$0 - 64 | 0;
   $23 = $3;
   if ($3 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $23;
  }
  $4 = 0;
  HEAP32[$1 >> 2] = 0;
  $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
  $6 = HEAPU8[($5 + 3588 | 0) >> 0] | 0;
  $7 = global$6;
  $6 = HEAPU16[($7 + ($6 << 1 | 0) | 0) >> 1] | 0;
  FLAC__bitreader_reset_read_crc16(HEAP32[($5 + 56 | 0) >> 2] | 0 | 0, (HEAPU16[($7 + ((($6 >>> 8 | 0) ^ (HEAPU8[($5 + 3589 | 0) >> 0] | 0) | 0) << 1 | 0) | 0) >> 1] | 0) ^ (($6 << 8 | 0) & 65280 | 0) | 0 | 0);
  $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
  HEAP8[($3 + 32 | 0) >> 0] = HEAPU8[($5 + 3588 | 0) >> 0] | 0;
  $7 = HEAPU8[($5 + 3589 | 0) >> 0] | 0;
  HEAP32[($3 + 12 | 0) >> 2] = 2;
  HEAP8[($3 + 33 | 0) >> 0] = $7;
  label$3 : {
   if (!(FLAC__bitreader_read_raw_uint32(HEAP32[($5 + 56 | 0) >> 2] | 0 | 0, $3 + 28 | 0 | 0, 8 | 0) | 0)) {
    break label$3
   }
   $5 = $0 + 4 | 0;
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       $6 = HEAP32[($3 + 28 | 0) >> 2] | 0;
       if (($6 | 0) == (255 | 0)) {
        break label$7
       }
       HEAP8[($3 + 34 | 0) >> 0] = $6;
       HEAP32[($3 + 12 | 0) >> 2] = 3;
       if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[$5 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $3 + 28 | 0 | 0, 8 | 0) | 0)) {
        break label$3
       }
       $6 = HEAP32[($3 + 28 | 0) >> 2] | 0;
       if (($6 | 0) == (255 | 0)) {
        break label$7
       }
       $4 = ($7 >>> 1 | 0) & 1 | 0;
       $7 = HEAP32[($3 + 12 | 0) >> 2] | 0;
       HEAP8[(($3 + 32 | 0) + $7 | 0) >> 0] = $6;
       $8 = 1;
       HEAP32[($3 + 12 | 0) >> 2] = $7 + 1 | 0;
       $7 = HEAPU8[($3 + 34 | 0) >> 0] | 0;
       $6 = $7 >>> 4 | 0;
       HEAP32[($3 + 28 | 0) >> 2] = $6;
       label$8 : {
        label$9 : {
         label$10 : {
          label$11 : {
           switch ($6 | 0) {
           case 8:
           case 9:
           case 10:
           case 11:
           case 12:
           case 13:
           case 14:
           case 15:
            HEAP32[((HEAP32[$5 >> 2] | 0) + 1136 | 0) >> 2] = 256 << ($6 + -8 | 0) | 0;
            break label$10;
           case 2:
           case 3:
           case 4:
           case 5:
            HEAP32[((HEAP32[$5 >> 2] | 0) + 1136 | 0) >> 2] = 576 << ($6 + -2 | 0) | 0;
            break label$10;
           case 1:
            break label$11;
           case 6:
           case 7:
            break label$9;
           default:
            break label$8;
           };
          }
          HEAP32[((HEAP32[$5 >> 2] | 0) + 1136 | 0) >> 2] = 192;
         }
         $6 = 0;
        }
        $8 = $4;
       }
       $4 = $7 & 15 | 0;
       HEAP32[($3 + 28 | 0) >> 2] = $4;
       label$14 : {
        label$15 : {
         label$16 : {
          switch ($4 | 0) {
          default:
           $4 = 0;
           $7 = HEAP32[$5 >> 2] | 0;
           if (HEAP32[($7 + 248 | 0) >> 2] | 0) {
            break label$15
           }
           $8 = 1;
           break label$14;
          case 1:
           HEAP32[((HEAP32[$5 >> 2] | 0) + 1140 | 0) >> 2] = 88200;
           $4 = 0;
           break label$14;
          case 2:
           HEAP32[((HEAP32[$5 >> 2] | 0) + 1140 | 0) >> 2] = 176400;
           $4 = 0;
           break label$14;
          case 3:
           HEAP32[((HEAP32[$5 >> 2] | 0) + 1140 | 0) >> 2] = 192e3;
           $4 = 0;
           break label$14;
          case 4:
           HEAP32[((HEAP32[$5 >> 2] | 0) + 1140 | 0) >> 2] = 8e3;
           $4 = 0;
           break label$14;
          case 5:
           HEAP32[((HEAP32[$5 >> 2] | 0) + 1140 | 0) >> 2] = 16e3;
           $4 = 0;
           break label$14;
          case 6:
           HEAP32[((HEAP32[$5 >> 2] | 0) + 1140 | 0) >> 2] = 22050;
           $4 = 0;
           break label$14;
          case 7:
           HEAP32[((HEAP32[$5 >> 2] | 0) + 1140 | 0) >> 2] = 24e3;
           $4 = 0;
           break label$14;
          case 8:
           HEAP32[((HEAP32[$5 >> 2] | 0) + 1140 | 0) >> 2] = 32e3;
           $4 = 0;
           break label$14;
          case 9:
           HEAP32[((HEAP32[$5 >> 2] | 0) + 1140 | 0) >> 2] = 44100;
           $4 = 0;
           break label$14;
          case 10:
           HEAP32[((HEAP32[$5 >> 2] | 0) + 1140 | 0) >> 2] = 48e3;
           $4 = 0;
           break label$14;
          case 11:
           HEAP32[((HEAP32[$5 >> 2] | 0) + 1140 | 0) >> 2] = 96e3;
           $4 = 0;
           break label$14;
          case 12:
          case 13:
          case 14:
           break label$14;
          case 15:
           break label$16;
          };
         }
         label$29 : {
          $7 = HEAP32[$5 >> 2] | 0;
          if (HEAP32[($7 + 3632 | 0) >> 2] | 0) {
           break label$29
          }
          FUNCTION_TABLE[HEAP32[($7 + 32 | 0) >> 2] | 0]($0, 1, HEAP32[($7 + 48 | 0) >> 2] | 0);
         }
         $7 = HEAP32[$0 >> 2] | 0;
         HEAP32[$7 >> 2] = 2;
         break label$6;
        }
        HEAP32[($7 + 1140 | 0) >> 2] = HEAP32[($7 + 288 | 0) >> 2] | 0;
       }
       $9 = HEAPU8[($3 + 35 | 0) >> 0] | 0;
       $10 = $9 >>> 4 | 0;
       HEAP32[($3 + 28 | 0) >> 2] = $10;
       label$30 : {
        label$31 : {
         label$32 : {
          if (!($10 & 8 | 0)) {
           break label$32
          }
          $7 = HEAP32[$5 >> 2] | 0;
          HEAP32[($7 + 1144 | 0) >> 2] = 2;
          $11 = 1;
          label$33 : {
           $10 = $10 & 7 | 0;
           if ($10 >>> 0 <= 2 >>> 0) {
            break label$33
           }
           $8 = 1;
           break label$30;
          }
          label$34 : {
           switch ($10 | 0) {
           case 1:
            $11 = 2;
            break label$31;
           case 2:
            break label$34;
           default:
            break label$31;
           };
          }
          $11 = 3;
          break label$31;
         }
         $7 = HEAP32[$5 >> 2] | 0;
         HEAP32[($7 + 1144 | 0) >> 2] = $10 + 1 | 0;
         $11 = 0;
        }
        HEAP32[($7 + 1148 | 0) >> 2] = $11;
       }
       $10 = ($9 >>> 1 | 0) & 7 | 0;
       HEAP32[($3 + 28 | 0) >> 2] = $10;
       $11 = 1;
       label$36 : {
        label$37 : {
         label$38 : {
          switch ($10 | 0) {
          default:
           $11 = 1;
           if (!(HEAP32[($7 + 248 | 0) >> 2] | 0)) {
            break label$36
           }
           HEAP32[($7 + 1152 | 0) >> 2] = HEAP32[($7 + 296 | 0) >> 2] | 0;
           break label$37;
          case 1:
           HEAP32[($7 + 1152 | 0) >> 2] = 8;
           break label$37;
          case 2:
           HEAP32[($7 + 1152 | 0) >> 2] = 12;
           break label$37;
          case 4:
           HEAP32[($7 + 1152 | 0) >> 2] = 16;
           break label$37;
          case 5:
           HEAP32[($7 + 1152 | 0) >> 2] = 20;
           break label$37;
          case 3:
          case 7:
           break label$36;
          case 6:
           break label$38;
          };
         }
         HEAP32[($7 + 1152 | 0) >> 2] = 24;
        }
        $11 = $8;
       }
       label$44 : {
        label$45 : {
         label$46 : {
          if ((HEAPU8[($3 + 33 | 0) >> 0] | 0) & 1 | 0) {
           break label$46
          }
          if (!(HEAP32[($7 + 248 | 0) >> 2] | 0)) {
           break label$45
          }
          if ((HEAP32[($7 + 272 | 0) >> 2] | 0 | 0) == (HEAP32[($7 + 276 | 0) >> 2] | 0 | 0)) {
           break label$45
          }
         }
         if (!(FLAC__bitreader_read_utf8_uint64(HEAP32[($7 + 56 | 0) >> 2] | 0 | 0, $3 + 16 | 0 | 0, $3 + 32 | 0 | 0, $3 + 12 | 0 | 0) | 0)) {
          break label$5
         }
         label$47 : {
          i64toi32_i32$2 = $3;
          i64toi32_i32$0 = HEAP32[($3 + 16 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($3 + 20 | 0) >> 2] | 0;
          $25 = i64toi32_i32$0;
          $25$hi = i64toi32_i32$1;
          i64toi32_i32$2 = i64toi32_i32$0;
          i64toi32_i32$0 = -1;
          i64toi32_i32$3 = -1;
          if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
           break label$47
          }
          $6 = HEAPU8[(((HEAP32[($3 + 12 | 0) >> 2] | 0) + ($3 + 32 | 0) | 0) + -1 | 0) >> 0] | 0;
          $7 = HEAP32[$5 >> 2] | 0;
          HEAP32[($7 + 3520 | 0) >> 2] = 1;
          HEAP8[($7 + 3590 | 0) >> 0] = $6;
          label$48 : {
           if (HEAP32[($7 + 3632 | 0) >> 2] | 0) {
            break label$48
           }
           FUNCTION_TABLE[HEAP32[($7 + 32 | 0) >> 2] | 0]($0, 1, HEAP32[($7 + 48 | 0) >> 2] | 0);
          }
          $7 = HEAP32[$0 >> 2] | 0;
          HEAP32[$7 >> 2] = 2;
          break label$6;
         }
         $7 = HEAP32[$5 >> 2] | 0;
         i64toi32_i32$2 = $25$hi;
         i64toi32_i32$1 = $7 + 1160 | 0;
         HEAP32[i64toi32_i32$1 >> 2] = $25;
         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
         HEAP32[($7 + 1156 | 0) >> 2] = 1;
         break label$44;
        }
        if (!(FLAC__bitreader_read_utf8_uint32(HEAP32[($7 + 56 | 0) >> 2] | 0 | 0, $3 + 28 | 0 | 0, $3 + 32 | 0 | 0, $3 + 12 | 0 | 0) | 0)) {
         break label$5
        }
        label$49 : {
         $7 = HEAP32[($3 + 28 | 0) >> 2] | 0;
         if (($7 | 0) != (-1 | 0)) {
          break label$49
         }
         $6 = HEAPU8[(((HEAP32[($3 + 12 | 0) >> 2] | 0) + ($3 + 32 | 0) | 0) + -1 | 0) >> 0] | 0;
         $7 = HEAP32[$5 >> 2] | 0;
         HEAP32[($7 + 3520 | 0) >> 2] = 1;
         HEAP8[($7 + 3590 | 0) >> 0] = $6;
         label$50 : {
          if (HEAP32[($7 + 3632 | 0) >> 2] | 0) {
           break label$50
          }
          FUNCTION_TABLE[HEAP32[($7 + 32 | 0) >> 2] | 0]($0, 1, HEAP32[($7 + 48 | 0) >> 2] | 0);
         }
         $7 = HEAP32[$0 >> 2] | 0;
         HEAP32[$7 >> 2] = 2;
         break label$6;
        }
        $10 = HEAP32[$5 >> 2] | 0;
        HEAP32[($10 + 1160 | 0) >> 2] = $7;
        HEAP32[($10 + 1156 | 0) >> 2] = 0;
       }
       $7 = HEAP32[$5 >> 2] | 0;
       label$51 : {
        if (!$6) {
         break label$51
        }
        if (!(FLAC__bitreader_read_raw_uint32(HEAP32[($7 + 56 | 0) >> 2] | 0 | 0, $3 + 28 | 0 | 0, 8 | 0) | 0)) {
         break label$5
        }
        $7 = HEAP32[($3 + 12 | 0) >> 2] | 0;
        $10 = HEAP32[($3 + 28 | 0) >> 2] | 0;
        HEAP8[(($3 + 32 | 0) + $7 | 0) >> 0] = $10;
        HEAP32[($3 + 12 | 0) >> 2] = $7 + 1 | 0;
        label$52 : {
         if (($6 | 0) != (7 | 0)) {
          break label$52
         }
         if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[$5 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $3 + 8 | 0 | 0, 8 | 0) | 0)) {
          break label$5
         }
         $7 = HEAP32[($3 + 12 | 0) >> 2] | 0;
         $6 = HEAP32[($3 + 8 | 0) >> 2] | 0;
         HEAP8[(($3 + 32 | 0) + $7 | 0) >> 0] = $6;
         HEAP32[($3 + 12 | 0) >> 2] = $7 + 1 | 0;
         $10 = $6 | ((HEAP32[($3 + 28 | 0) >> 2] | 0) << 8 | 0) | 0;
         HEAP32[($3 + 28 | 0) >> 2] = $10;
        }
        $7 = HEAP32[$5 >> 2] | 0;
        HEAP32[($7 + 1136 | 0) >> 2] = $10 + 1 | 0;
       }
       label$53 : {
        if (!$4) {
         break label$53
        }
        if (!(FLAC__bitreader_read_raw_uint32(HEAP32[($7 + 56 | 0) >> 2] | 0 | 0, $3 + 28 | 0 | 0, 8 | 0) | 0)) {
         break label$5
        }
        $7 = HEAP32[($3 + 12 | 0) >> 2] | 0;
        $6 = HEAP32[($3 + 28 | 0) >> 2] | 0;
        HEAP8[(($3 + 32 | 0) + $7 | 0) >> 0] = $6;
        HEAP32[($3 + 12 | 0) >> 2] = $7 + 1 | 0;
        label$54 : {
         label$55 : {
          if (($4 | 0) == (12 | 0)) {
           break label$55
          }
          if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[$5 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $3 + 8 | 0 | 0, 8 | 0) | 0)) {
           break label$5
          }
          $7 = HEAP32[($3 + 12 | 0) >> 2] | 0;
          $6 = HEAP32[($3 + 8 | 0) >> 2] | 0;
          HEAP8[(($3 + 32 | 0) + $7 | 0) >> 0] = $6;
          HEAP32[($3 + 12 | 0) >> 2] = $7 + 1 | 0;
          $6 = $6 | ((HEAP32[($3 + 28 | 0) >> 2] | 0) << 8 | 0) | 0;
          HEAP32[($3 + 28 | 0) >> 2] = $6;
          if (($4 | 0) == (13 | 0)) {
           break label$54
          }
          $6 = Math_imul($6, 10);
          break label$54;
         }
         $6 = Math_imul($6, 1e3);
        }
        $7 = HEAP32[$5 >> 2] | 0;
        HEAP32[($7 + 1140 | 0) >> 2] = $6;
       }
       if (!(FLAC__bitreader_read_raw_uint32(HEAP32[($7 + 56 | 0) >> 2] | 0 | 0, $3 + 28 | 0 | 0, 8 | 0) | 0)) {
        break label$5
       }
       $6 = HEAPU8[($3 + 28 | 0) >> 0] | 0;
       $4 = FLAC__crc8($3 + 32 | 0 | 0, HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
       $7 = HEAP32[$5 >> 2] | 0;
       label$56 : {
        if (($4 | 0) == ($6 | 0)) {
         break label$56
        }
        label$57 : {
         if (HEAP32[($7 + 3632 | 0) >> 2] | 0) {
          break label$57
         }
         FUNCTION_TABLE[HEAP32[($7 + 32 | 0) >> 2] | 0]($0, 1, HEAP32[($7 + 48 | 0) >> 2] | 0);
        }
        $7 = HEAP32[$0 >> 2] | 0;
        HEAP32[$7 >> 2] = 2;
        break label$6;
       }
       HEAP32[($7 + 232 | 0) >> 2] = 0;
       label$58 : {
        label$59 : {
         label$60 : {
          if (HEAP32[($7 + 1156 | 0) >> 2] | 0) {
           break label$60
          }
          $4 = $7 + 1160 | 0;
          $6 = HEAP32[$4 >> 2] | 0;
          HEAP32[($3 + 28 | 0) >> 2] = $6;
          HEAP32[($7 + 1156 | 0) >> 2] = 1;
          label$61 : {
           $10 = HEAP32[($7 + 228 | 0) >> 2] | 0;
           if (!$10) {
            break label$61
           }
           i64toi32_i32$2 = 0;
           $501$hi = i64toi32_i32$2;
           i64toi32_i32$2 = 0;
           $503$hi = i64toi32_i32$2;
           i64toi32_i32$2 = $501$hi;
           i64toi32_i32$1 = $503$hi;
           i64toi32_i32$1 = __wasm_i64_mul($10 | 0, i64toi32_i32$2 | 0, $6 | 0, i64toi32_i32$1 | 0) | 0;
           i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
           $504 = i64toi32_i32$1;
           i64toi32_i32$1 = $4;
           HEAP32[i64toi32_i32$1 >> 2] = $504;
           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
           break label$60;
          }
          label$62 : {
           if (!(HEAP32[($7 + 248 | 0) >> 2] | 0)) {
            break label$62
           }
           $4 = HEAP32[($7 + 272 | 0) >> 2] | 0;
           if (($4 | 0) != (HEAP32[($7 + 276 | 0) >> 2] | 0 | 0)) {
            break label$59
           }
           $517 = $7 + 1160 | 0;
           i64toi32_i32$2 = 0;
           $519$hi = i64toi32_i32$2;
           i64toi32_i32$2 = 0;
           $521$hi = i64toi32_i32$2;
           i64toi32_i32$2 = $519$hi;
           i64toi32_i32$1 = $521$hi;
           i64toi32_i32$1 = __wasm_i64_mul($4 | 0, i64toi32_i32$2 | 0, $6 | 0, i64toi32_i32$1 | 0) | 0;
           i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
           $522 = i64toi32_i32$1;
           i64toi32_i32$1 = $517;
           HEAP32[i64toi32_i32$1 >> 2] = $522;
           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
           $7 = HEAP32[$5 >> 2] | 0;
           HEAP32[($7 + 232 | 0) >> 2] = HEAP32[($7 + 276 | 0) >> 2] | 0;
           break label$60;
          }
          label$63 : {
           if ($6) {
            break label$63
           }
           i64toi32_i32$1 = $7 + 1160 | 0;
           i64toi32_i32$2 = 0;
           HEAP32[i64toi32_i32$1 >> 2] = 0;
           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
           $7 = HEAP32[$5 >> 2] | 0;
           HEAP32[($7 + 232 | 0) >> 2] = HEAP32[($7 + 1136 | 0) >> 2] | 0;
           break label$60;
          }
          $538 = $7 + 1160 | 0;
          i64toi32_i32$3 = $7;
          i64toi32_i32$2 = HEAP32[($7 + 1136 | 0) >> 2] | 0;
          i64toi32_i32$1 = 0;
          $540$hi = i64toi32_i32$1;
          i64toi32_i32$1 = 0;
          $542$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $540$hi;
          $56 = i64toi32_i32$2;
          i64toi32_i32$2 = $542$hi;
          i64toi32_i32$2 = __wasm_i64_mul($56 | 0, i64toi32_i32$1 | 0, $6 | 0, i64toi32_i32$2 | 0) | 0;
          i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
          $543 = i64toi32_i32$2;
          i64toi32_i32$2 = $538;
          HEAP32[i64toi32_i32$2 >> 2] = $543;
          HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
         }
         label$64 : {
          if ($9 & 1 | 0) {
           break label$64
          }
          if (!$11) {
           break label$58
          }
         }
         $7 = HEAP32[$5 >> 2] | 0;
        }
        label$65 : {
         label$66 : {
          if (HEAP32[($7 + 3632 | 0) >> 2] | 0) {
           break label$66
          }
          FUNCTION_TABLE[HEAP32[($7 + 32 | 0) >> 2] | 0]($0, 3, HEAP32[($7 + 48 | 0) >> 2] | 0);
          break label$65;
         }
         HEAP32[($7 + 6152 | 0) >> 2] = (HEAP32[($7 + 6152 | 0) >> 2] | 0) + 1 | 0;
        }
        $7 = HEAP32[$0 >> 2] | 0;
        HEAP32[$7 >> 2] = 2;
        break label$6;
       }
       $7 = HEAP32[$0 >> 2] | 0;
       break label$6;
      }
      $7 = HEAP32[$5 >> 2] | 0;
      HEAP32[($7 + 3520 | 0) >> 2] = 1;
      HEAP8[($7 + 3590 | 0) >> 0] = 255;
      label$67 : {
       if (HEAP32[($7 + 3632 | 0) >> 2] | 0) {
        break label$67
       }
       FUNCTION_TABLE[HEAP32[($7 + 32 | 0) >> 2] | 0]($0, 1, HEAP32[($7 + 48 | 0) >> 2] | 0);
      }
      $7 = HEAP32[$0 >> 2] | 0;
      HEAP32[$7 >> 2] = 2;
     }
     $4 = 1;
     if ((HEAP32[$7 >> 2] | 0 | 0) == (2 | 0)) {
      break label$3
     }
     $7 = HEAP32[$5 >> 2] | 0;
     $10 = HEAP32[($7 + 1144 | 0) >> 2] | 0;
     label$68 : {
      label$69 : {
       $11 = HEAP32[($7 + 1136 | 0) >> 2] | 0;
       if ((HEAP32[($7 + 220 | 0) >> 2] | 0) >>> 0 < $11 >>> 0) {
        break label$69
       }
       if ((HEAP32[($7 + 224 | 0) >> 2] | 0) >>> 0 >= $10 >>> 0) {
        break label$68
       }
      }
      label$70 : {
       $6 = HEAP32[($7 + 60 | 0) >> 2] | 0;
       if (!$6) {
        break label$70
       }
       dlfree($6 + -16 | 0 | 0);
       HEAP32[((HEAP32[$5 >> 2] | 0) + 60 | 0) >> 2] = 0;
       $7 = HEAP32[$5 >> 2] | 0;
      }
      label$71 : {
       $6 = HEAP32[($7 + 3592 | 0) >> 2] | 0;
       if (!$6) {
        break label$71
       }
       dlfree($6 | 0);
       HEAP32[((HEAP32[$5 >> 2] | 0) + 92 | 0) >> 2] = 0;
       HEAP32[((HEAP32[$5 >> 2] | 0) + 3592 | 0) >> 2] = 0;
       $7 = HEAP32[$5 >> 2] | 0;
      }
      label$72 : {
       $6 = HEAP32[($7 + 64 | 0) >> 2] | 0;
       if (!$6) {
        break label$72
       }
       dlfree($6 + -16 | 0 | 0);
       HEAP32[((HEAP32[$5 >> 2] | 0) + 64 | 0) >> 2] = 0;
       $7 = HEAP32[$5 >> 2] | 0;
      }
      label$73 : {
       $6 = HEAP32[($7 + 3596 | 0) >> 2] | 0;
       if (!$6) {
        break label$73
       }
       dlfree($6 | 0);
       HEAP32[((HEAP32[$5 >> 2] | 0) + 96 | 0) >> 2] = 0;
       HEAP32[((HEAP32[$5 >> 2] | 0) + 3596 | 0) >> 2] = 0;
       $7 = HEAP32[$5 >> 2] | 0;
      }
      label$74 : {
       $6 = HEAP32[($7 + 68 | 0) >> 2] | 0;
       if (!$6) {
        break label$74
       }
       dlfree($6 + -16 | 0 | 0);
       HEAP32[((HEAP32[$5 >> 2] | 0) + 68 | 0) >> 2] = 0;
       $7 = HEAP32[$5 >> 2] | 0;
      }
      label$75 : {
       $6 = HEAP32[($7 + 3600 | 0) >> 2] | 0;
       if (!$6) {
        break label$75
       }
       dlfree($6 | 0);
       HEAP32[((HEAP32[$5 >> 2] | 0) + 100 | 0) >> 2] = 0;
       HEAP32[((HEAP32[$5 >> 2] | 0) + 3600 | 0) >> 2] = 0;
       $7 = HEAP32[$5 >> 2] | 0;
      }
      label$76 : {
       $6 = HEAP32[($7 + 72 | 0) >> 2] | 0;
       if (!$6) {
        break label$76
       }
       dlfree($6 + -16 | 0 | 0);
       HEAP32[((HEAP32[$5 >> 2] | 0) + 72 | 0) >> 2] = 0;
       $7 = HEAP32[$5 >> 2] | 0;
      }
      label$77 : {
       $6 = HEAP32[($7 + 3604 | 0) >> 2] | 0;
       if (!$6) {
        break label$77
       }
       dlfree($6 | 0);
       HEAP32[((HEAP32[$5 >> 2] | 0) + 104 | 0) >> 2] = 0;
       HEAP32[((HEAP32[$5 >> 2] | 0) + 3604 | 0) >> 2] = 0;
       $7 = HEAP32[$5 >> 2] | 0;
      }
      label$78 : {
       $6 = HEAP32[($7 + 76 | 0) >> 2] | 0;
       if (!$6) {
        break label$78
       }
       dlfree($6 + -16 | 0 | 0);
       HEAP32[((HEAP32[$5 >> 2] | 0) + 76 | 0) >> 2] = 0;
       $7 = HEAP32[$5 >> 2] | 0;
      }
      label$79 : {
       $6 = HEAP32[($7 + 3608 | 0) >> 2] | 0;
       if (!$6) {
        break label$79
       }
       dlfree($6 | 0);
       HEAP32[((HEAP32[$5 >> 2] | 0) + 108 | 0) >> 2] = 0;
       HEAP32[((HEAP32[$5 >> 2] | 0) + 3608 | 0) >> 2] = 0;
       $7 = HEAP32[$5 >> 2] | 0;
      }
      label$80 : {
       $6 = HEAP32[($7 + 80 | 0) >> 2] | 0;
       if (!$6) {
        break label$80
       }
       dlfree($6 + -16 | 0 | 0);
       HEAP32[((HEAP32[$5 >> 2] | 0) + 80 | 0) >> 2] = 0;
       $7 = HEAP32[$5 >> 2] | 0;
      }
      label$81 : {
       $6 = HEAP32[($7 + 3612 | 0) >> 2] | 0;
       if (!$6) {
        break label$81
       }
       dlfree($6 | 0);
       HEAP32[((HEAP32[$5 >> 2] | 0) + 112 | 0) >> 2] = 0;
       HEAP32[((HEAP32[$5 >> 2] | 0) + 3612 | 0) >> 2] = 0;
       $7 = HEAP32[$5 >> 2] | 0;
      }
      label$82 : {
       $6 = HEAP32[($7 + 84 | 0) >> 2] | 0;
       if (!$6) {
        break label$82
       }
       dlfree($6 + -16 | 0 | 0);
       HEAP32[((HEAP32[$5 >> 2] | 0) + 84 | 0) >> 2] = 0;
       $7 = HEAP32[$5 >> 2] | 0;
      }
      label$83 : {
       $6 = HEAP32[($7 + 3616 | 0) >> 2] | 0;
       if (!$6) {
        break label$83
       }
       dlfree($6 | 0);
       HEAP32[((HEAP32[$5 >> 2] | 0) + 116 | 0) >> 2] = 0;
       HEAP32[((HEAP32[$5 >> 2] | 0) + 3616 | 0) >> 2] = 0;
       $7 = HEAP32[$5 >> 2] | 0;
      }
      label$84 : {
       $6 = HEAP32[($7 + 88 | 0) >> 2] | 0;
       if (!$6) {
        break label$84
       }
       dlfree($6 + -16 | 0 | 0);
       HEAP32[((HEAP32[$5 >> 2] | 0) + 88 | 0) >> 2] = 0;
       $7 = HEAP32[$5 >> 2] | 0;
      }
      label$85 : {
       $7 = HEAP32[($7 + 3620 | 0) >> 2] | 0;
       if (!$7) {
        break label$85
       }
       dlfree($7 | 0);
       HEAP32[((HEAP32[$5 >> 2] | 0) + 120 | 0) >> 2] = 0;
       HEAP32[((HEAP32[$5 >> 2] | 0) + 3620 | 0) >> 2] = 0;
      }
      label$86 : {
       if (!$10) {
        break label$86
       }
       if ($11 >>> 0 > -5 >>> 0) {
        break label$4
       }
       $7 = $11 + 4 | 0;
       if (($7 & 1073741823 | 0 | 0) != ($7 | 0)) {
        break label$4
       }
       $9 = $7 << 2 | 0;
       $6 = 0;
       label$87 : while (1) {
        $7 = dlmalloc($9 | 0) | 0;
        if (!$7) {
         break label$4
        }
        i64toi32_i32$2 = $7;
        i64toi32_i32$1 = 0;
        HEAP32[$7 >> 2] = 0;
        HEAP32[($7 + 4 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = $7 + 8 | 0;
        i64toi32_i32$1 = 0;
        HEAP32[i64toi32_i32$2 >> 2] = 0;
        HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
        $8 = $6 << 2 | 0;
        HEAP32[(((HEAP32[$5 >> 2] | 0) + $8 | 0) + 60 | 0) >> 2] = $7 + 16 | 0;
        label$88 : {
         $7 = (HEAP32[$5 >> 2] | 0) + $8 | 0;
         if (!(FLAC__memory_alloc_aligned_int32_array($11 | 0, $7 + 3592 | 0 | 0, $7 + 92 | 0 | 0) | 0)) {
          break label$88
         }
         $6 = $6 + 1 | 0;
         if (($6 | 0) == ($10 | 0)) {
          break label$86
         }
         continue label$87;
        }
        break label$87;
       };
       HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
       break label$5;
      }
      $7 = HEAP32[$5 >> 2] | 0;
      HEAP32[($7 + 224 | 0) >> 2] = $10;
      HEAP32[($7 + 220 | 0) >> 2] = $11;
      $10 = HEAP32[($7 + 1144 | 0) >> 2] | 0;
     }
     label$89 : {
      label$90 : {
       if (!$10) {
        break label$90
       }
       $12 = HEAP32[global$49 >> 2] | 0;
       $13 = (-1 << $12 | 0) ^ -1 | 0;
       $14 = HEAP32[global$50 >> 2] | 0;
       $15 = HEAP32[global$51 >> 2] | 0;
       $16 = HEAP32[global$7 >> 2] | 0;
       $8 = 0;
       label$91 : while (1) {
        $6 = HEAP32[($7 + 1152 | 0) >> 2] | 0;
        label$92 : {
         $10 = (HEAP32[($7 + 1148 | 0) >> 2] | 0) + -1 | 0;
         if ($10 >>> 0 > 2 >>> 0) {
          break label$92
         }
         label$93 : {
          switch ($10 | 0) {
          default:
           $6 = $6 + (($8 | 0) == (1 | 0)) | 0;
           break label$92;
          case 1:
           $6 = $6 + !$8 | 0;
           break label$92;
          case 2:
           break label$93;
          };
         }
         $6 = $6 + (($8 | 0) == (1 | 0)) | 0;
        }
        if (!(FLAC__bitreader_read_raw_uint32(HEAP32[($7 + 56 | 0) >> 2] | 0 | 0, $3 + 28 | 0 | 0, 8 | 0) | 0)) {
         break label$5
        }
        $7 = HEAP32[($3 + 28 | 0) >> 2] | 0;
        HEAP32[($3 + 28 | 0) >> 2] = $7 & 254 | 0;
        label$96 : {
         label$97 : {
          $17 = $7 & 1 | 0;
          if (!$17) {
           break label$97
          }
          if (!(FLAC__bitreader_read_unary_unsigned(HEAP32[((HEAP32[$5 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $3 + 32 | 0 | 0) | 0)) {
           break label$5
          }
          $7 = HEAP32[$5 >> 2] | 0;
          $10 = (HEAP32[($3 + 32 | 0) >> 2] | 0) + 1 | 0;
          HEAP32[(($7 + Math_imul($8, 292) | 0) + 1464 | 0) >> 2] = $10;
          if ($6 >>> 0 <= $10 >>> 0) {
           break label$5
          }
          $6 = $6 - $10 | 0;
          break label$96;
         }
         $7 = HEAP32[$5 >> 2] | 0;
         HEAP32[(($7 + Math_imul($8, 292) | 0) + 1464 | 0) >> 2] = 0;
        }
        label$98 : {
         label$99 : {
          $10 = HEAP32[($3 + 28 | 0) >> 2] | 0;
          if (!($10 & 128 | 0)) {
           break label$99
          }
          label$100 : {
           if (HEAP32[($7 + 3632 | 0) >> 2] | 0) {
            break label$100
           }
           FUNCTION_TABLE[HEAP32[($7 + 32 | 0) >> 2] | 0]($0, 0, HEAP32[($7 + 48 | 0) >> 2] | 0);
          }
          HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
          break label$98;
         }
         label$101 : {
          label$102 : {
           label$103 : {
            if ($10 >>> 0 > 2 >>> 0) {
             break label$103
            }
            label$104 : {
             switch ($10 | 0) {
             default:
              $10 = HEAP32[(($7 + ($8 << 2 | 0) | 0) + 60 | 0) >> 2] | 0;
              $11 = $7 + Math_imul($8, 292) | 0;
              HEAP32[($11 + 1176 | 0) >> 2] = 0;
              if (!(FLAC__bitreader_read_raw_int32(HEAP32[($7 + 56 | 0) >> 2] | 0 | 0, $3 + 32 | 0 | 0, $6 | 0) | 0)) {
               break label$5
              }
              HEAP32[($11 + 1180 | 0) >> 2] = HEAP32[($3 + 32 | 0) >> 2] | 0;
              if (!$2) {
               break label$102
              }
              $7 = 0;
              $6 = HEAP32[$5 >> 2] | 0;
              if (!(HEAP32[($6 + 1136 | 0) >> 2] | 0)) {
               break label$102
              }
              label$106 : while (1) {
               HEAP32[($10 + ($7 << 2 | 0) | 0) >> 2] = HEAP32[($3 + 32 | 0) >> 2] | 0;
               $7 = $7 + 1 | 0;
               if ($7 >>> 0 < (HEAP32[($6 + 1136 | 0) >> 2] | 0) >>> 0) {
                continue label$106
               }
               break label$102;
              };
             case 1:
              break label$103;
             case 2:
              break label$104;
             };
            }
            $10 = ($7 + 1136 | 0) + Math_imul($8, 292) | 0;
            $18 = $10 + 44 | 0;
            $19 = $8 << 2 | 0;
            $11 = HEAP32[(($7 + $19 | 0) + 92 | 0) >> 2] | 0;
            HEAP32[$18 >> 2] = $11;
            HEAP32[($10 + 40 | 0) >> 2] = 1;
            $10 = 0;
            label$107 : {
             if (!(HEAP32[($7 + 1136 | 0) >> 2] | 0)) {
              break label$107
             }
             label$108 : while (1) {
              if (!(FLAC__bitreader_read_raw_int32(HEAP32[($7 + 56 | 0) >> 2] | 0 | 0, $3 + 32 | 0 | 0, $6 | 0) | 0)) {
               break label$5
              }
              HEAP32[($11 + ($10 << 2 | 0) | 0) >> 2] = HEAP32[($3 + 32 | 0) >> 2] | 0;
              $10 = $10 + 1 | 0;
              $7 = HEAP32[$5 >> 2] | 0;
              $9 = HEAP32[($7 + 1136 | 0) >> 2] | 0;
              if ($10 >>> 0 < $9 >>> 0) {
               continue label$108
              }
              break label$108;
             };
             $10 = $9 << 2 | 0;
            }
            if (!$2) {
             break label$102
            }
            memcpy(HEAP32[(($7 + $19 | 0) + 60 | 0) >> 2] | 0 | 0, HEAP32[$18 >> 2] | 0 | 0, $10 | 0) | 0;
            break label$102;
           }
           label$109 : {
            if ($10 >>> 0 > 15 >>> 0) {
             break label$109
            }
            label$110 : {
             label$111 : {
              if (HEAP32[($7 + 3632 | 0) >> 2] | 0) {
               break label$111
              }
              FUNCTION_TABLE[HEAP32[($7 + 32 | 0) >> 2] | 0]($0, 3, HEAP32[($7 + 48 | 0) >> 2] | 0);
              break label$110;
             }
             HEAP32[($7 + 6152 | 0) >> 2] = (HEAP32[($7 + 6152 | 0) >> 2] | 0) + 1 | 0;
            }
            HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
            break label$98;
           }
           label$112 : {
            if ($10 >>> 0 > 24 >>> 0) {
             break label$112
            }
            $18 = $7 + Math_imul($8, 292) | 0;
            HEAP32[($18 + 1176 | 0) >> 2] = 2;
            $19 = $8 << 2 | 0;
            $9 = HEAP32[(($7 + $19 | 0) + 92 | 0) >> 2] | 0;
            $11 = ($10 >>> 1 | 0) & 7 | 0;
            HEAP32[($18 + 1192 | 0) >> 2] = $11;
            HEAP32[($18 + 1212 | 0) >> 2] = $9;
            $10 = HEAP32[($7 + 56 | 0) >> 2] | 0;
            label$113 : {
             if (!$11) {
              break label$113
             }
             $9 = $18 + 1196 | 0;
             $7 = 0;
             label$114 : while (1) {
              if (!(FLAC__bitreader_read_raw_int32($10 | 0, $3 + 32 | 0 | 0, $6 | 0) | 0)) {
               break label$5
              }
              HEAP32[($9 + ($7 << 2 | 0) | 0) >> 2] = HEAP32[($3 + 32 | 0) >> 2] | 0;
              $10 = HEAP32[((HEAP32[$5 >> 2] | 0) + 56 | 0) >> 2] | 0;
              $7 = $7 + 1 | 0;
              if (($7 | 0) != ($11 | 0)) {
               continue label$114
              }
              break label$114;
             };
            }
            if (!(FLAC__bitreader_read_raw_uint32($10 | 0, $3 + 16 | 0 | 0, $15 | 0) | 0)) {
             break label$5
            }
            $10 = $18 + 1180 | 0;
            $6 = HEAP32[($3 + 16 | 0) >> 2] | 0;
            HEAP32[$10 >> 2] = $6;
            $7 = HEAP32[$5 >> 2] | 0;
            label$115 : {
             label$116 : {
              label$117 : {
               if ($6 >>> 0 > 1 >>> 0) {
                break label$117
               }
               if (!(FLAC__bitreader_read_raw_uint32(HEAP32[($7 + 56 | 0) >> 2] | 0 | 0, $3 + 16 | 0 | 0, $14 | 0) | 0)) {
                break label$5
               }
               $7 = HEAP32[$5 >> 2] | 0;
               $6 = HEAP32[($3 + 16 | 0) >> 2] | 0;
               if (((HEAP32[($7 + 1136 | 0) >> 2] | 0) >>> $6 | 0) >>> 0 >= $11 >>> 0) {
                break label$116
               }
               label$118 : {
                if (HEAP32[($7 + 3632 | 0) >> 2] | 0) {
                 break label$118
                }
                FUNCTION_TABLE[HEAP32[($7 + 32 | 0) >> 2] | 0]($0, 0, HEAP32[($7 + 48 | 0) >> 2] | 0);
               }
               HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
               break label$115;
              }
              label$119 : {
               label$120 : {
                if (HEAP32[($7 + 3632 | 0) >> 2] | 0) {
                 break label$120
                }
                FUNCTION_TABLE[HEAP32[($7 + 32 | 0) >> 2] | 0]($0, 3, HEAP32[($7 + 48 | 0) >> 2] | 0);
                break label$119;
               }
               HEAP32[($7 + 6152 | 0) >> 2] = (HEAP32[($7 + 6152 | 0) >> 2] | 0) + 1 | 0;
              }
              HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
              break label$115;
             }
             HEAP32[($18 + 1184 | 0) >> 2] = $6;
             $7 = Math_imul($8, 12);
             HEAP32[($18 + 1188 | 0) >> 2] = ((HEAP32[$5 >> 2] | 0) + $7 | 0) + 124 | 0;
             label$121 : {
              $10 = HEAP32[$10 >> 2] | 0;
              if ($10 >>> 0 >= 2 >>> 0) {
               break label$121
              }
              $9 = HEAP32[($0 + 4 | 0) >> 2] | 0;
              if (!(read_residual_partitioned_rice_($0 | 0, $11 | 0, $6 | 0, ($9 + $7 | 0) + 124 | 0 | 0, HEAP32[(($9 + $19 | 0) + 92 | 0) >> 2] | 0 | 0, ($10 | 0) == (1 | 0) | 0) | 0)) {
               break label$5
              }
             }
             if (!$2) {
              break label$115
             }
             $7 = $11 << 2 | 0;
             memcpy(HEAP32[(((HEAP32[$5 >> 2] | 0) + $19 | 0) + 60 | 0) >> 2] | 0 | 0, $18 + 1196 | 0 | 0, $7 | 0) | 0;
             $6 = HEAP32[$5 >> 2] | 0;
             $10 = $6 + $19 | 0;
             FLAC__fixed_restore_signal(HEAP32[($10 + 92 | 0) >> 2] | 0 | 0, (HEAP32[($6 + 1136 | 0) >> 2] | 0) - $11 | 0 | 0, $11 | 0, (HEAP32[($10 + 60 | 0) >> 2] | 0) + $7 | 0 | 0);
            }
            if ((HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0) == (2 | 0)) {
             break label$98
            }
            if (!$2) {
             break label$98
            }
            if ($17) {
             break label$101
            }
            break label$98;
           }
           label$122 : {
            if ($10 >>> 0 > 63 >>> 0) {
             break label$122
            }
            label$123 : {
             label$124 : {
              if (HEAP32[($7 + 3632 | 0) >> 2] | 0) {
               break label$124
              }
              FUNCTION_TABLE[HEAP32[($7 + 32 | 0) >> 2] | 0]($0, 3, HEAP32[($7 + 48 | 0) >> 2] | 0);
              break label$123;
             }
             HEAP32[($7 + 6152 | 0) >> 2] = (HEAP32[($7 + 6152 | 0) >> 2] | 0) + 1 | 0;
            }
            HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
            break label$98;
           }
           $9 = $7 + Math_imul($8, 292) | 0;
           HEAP32[($9 + 1176 | 0) >> 2] = 3;
           $20 = $8 << 2 | 0;
           $11 = HEAP32[(($7 + $20 | 0) + 92 | 0) >> 2] | 0;
           $18 = ($10 >>> 1 | 0) & 31 | 0;
           $21 = $18 + 1 | 0;
           HEAP32[($9 + 1192 | 0) >> 2] = $21;
           HEAP32[($9 + 1460 | 0) >> 2] = $11;
           $10 = HEAP32[($7 + 56 | 0) >> 2] | 0;
           $7 = 0;
           label$125 : while (1) {
            if (!(FLAC__bitreader_read_raw_int32($10 | 0, $3 + 32 | 0 | 0, $6 | 0) | 0)) {
             break label$5
            }
            HEAP32[(($9 + ($7 << 2 | 0) | 0) + 1332 | 0) >> 2] = HEAP32[($3 + 32 | 0) >> 2] | 0;
            $11 = ($7 | 0) != ($18 | 0);
            $10 = HEAP32[((HEAP32[$5 >> 2] | 0) + 56 | 0) >> 2] | 0;
            $7 = $7 + 1 | 0;
            if ($11) {
             continue label$125
            }
            break label$125;
           };
           if (!(FLAC__bitreader_read_raw_uint32($10 | 0, $3 + 16 | 0 | 0, $12 | 0) | 0)) {
            break label$5
           }
           label$126 : {
            label$127 : {
             $7 = HEAP32[($3 + 16 | 0) >> 2] | 0;
             if (($7 | 0) != ($13 | 0)) {
              break label$127
             }
             label$128 : {
              $7 = HEAP32[$5 >> 2] | 0;
              if (HEAP32[($7 + 3632 | 0) >> 2] | 0) {
               break label$128
              }
              FUNCTION_TABLE[HEAP32[($7 + 32 | 0) >> 2] | 0]($0, 0, HEAP32[($7 + 48 | 0) >> 2] | 0);
             }
             HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
             break label$126;
            }
            $19 = $9 + 1196 | 0;
            HEAP32[$19 >> 2] = $7 + 1 | 0;
            if (!(FLAC__bitreader_read_raw_int32(HEAP32[((HEAP32[$5 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $3 + 32 | 0 | 0, $16 | 0) | 0)) {
             break label$5
            }
            label$129 : {
             $7 = HEAP32[($3 + 32 | 0) >> 2] | 0;
             if (($7 | 0) > (-1 | 0)) {
              break label$129
             }
             label$130 : {
              $7 = HEAP32[$5 >> 2] | 0;
              if (HEAP32[($7 + 3632 | 0) >> 2] | 0) {
               break label$130
              }
              FUNCTION_TABLE[HEAP32[($7 + 32 | 0) >> 2] | 0]($0, 0, HEAP32[($7 + 48 | 0) >> 2] | 0);
             }
             HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
             break label$126;
            }
            $22 = $9 + 1200 | 0;
            HEAP32[$22 >> 2] = $7;
            $10 = HEAP32[((HEAP32[$5 >> 2] | 0) + 56 | 0) >> 2] | 0;
            $7 = 0;
            label$131 : while (1) {
             if (!(FLAC__bitreader_read_raw_int32($10 | 0, $3 + 32 | 0 | 0, HEAP32[$19 >> 2] | 0 | 0) | 0)) {
              break label$5
             }
             HEAP32[(($9 + ($7 << 2 | 0) | 0) + 1204 | 0) >> 2] = HEAP32[($3 + 32 | 0) >> 2] | 0;
             $11 = ($7 | 0) != ($18 | 0);
             $10 = HEAP32[((HEAP32[$5 >> 2] | 0) + 56 | 0) >> 2] | 0;
             $7 = $7 + 1 | 0;
             if ($11) {
              continue label$131
             }
             break label$131;
            };
            if (!(FLAC__bitreader_read_raw_uint32($10 | 0, $3 + 16 | 0 | 0, $15 | 0) | 0)) {
             break label$5
            }
            $11 = $9 + 1180 | 0;
            $10 = HEAP32[($3 + 16 | 0) >> 2] | 0;
            HEAP32[$11 >> 2] = $10;
            $7 = HEAP32[$5 >> 2] | 0;
            label$132 : {
             label$133 : {
              if ($10 >>> 0 > 1 >>> 0) {
               break label$133
              }
              if (!(FLAC__bitreader_read_raw_uint32(HEAP32[($7 + 56 | 0) >> 2] | 0 | 0, $3 + 16 | 0 | 0, $14 | 0) | 0)) {
               break label$5
              }
              $7 = HEAP32[$5 >> 2] | 0;
              $10 = HEAP32[($3 + 16 | 0) >> 2] | 0;
              if (((HEAP32[($7 + 1136 | 0) >> 2] | 0) >>> $10 | 0) >>> 0 > $18 >>> 0) {
               break label$132
              }
              label$134 : {
               if (HEAP32[($7 + 3632 | 0) >> 2] | 0) {
                break label$134
               }
               FUNCTION_TABLE[HEAP32[($7 + 32 | 0) >> 2] | 0]($0, 0, HEAP32[($7 + 48 | 0) >> 2] | 0);
              }
              HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
              break label$126;
             }
             label$135 : {
              label$136 : {
               if (HEAP32[($7 + 3632 | 0) >> 2] | 0) {
                break label$136
               }
               FUNCTION_TABLE[HEAP32[($7 + 32 | 0) >> 2] | 0]($0, 3, HEAP32[($7 + 48 | 0) >> 2] | 0);
               break label$135;
              }
              HEAP32[($7 + 6152 | 0) >> 2] = (HEAP32[($7 + 6152 | 0) >> 2] | 0) + 1 | 0;
             }
             HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
             break label$126;
            }
            HEAP32[($9 + 1184 | 0) >> 2] = $10;
            $7 = Math_imul($8, 12);
            HEAP32[($9 + 1188 | 0) >> 2] = ((HEAP32[$5 >> 2] | 0) + $7 | 0) + 124 | 0;
            label$137 : {
             $11 = HEAP32[$11 >> 2] | 0;
             if ($11 >>> 0 >= 2 >>> 0) {
              break label$137
             }
             $18 = HEAP32[($0 + 4 | 0) >> 2] | 0;
             if (!(read_residual_partitioned_rice_($0 | 0, $21 | 0, $10 | 0, ($18 + $7 | 0) + 124 | 0 | 0, HEAP32[(($18 + $20 | 0) + 92 | 0) >> 2] | 0 | 0, ($11 | 0) == (1 | 0) | 0) | 0)) {
              break label$5
             }
            }
            if (!$2) {
             break label$126
            }
            $10 = $21 << 2 | 0;
            memcpy(HEAP32[(((HEAP32[$5 >> 2] | 0) + $20 | 0) + 60 | 0) >> 2] | 0 | 0, $9 + 1332 | 0 | 0, $10 | 0) | 0;
            label$138 : {
             label$139 : {
              $11 = HEAP32[$19 >> 2] | 0;
              if ((((Math_clz32($21) ^ 31 | 0) + $6 | 0) + $11 | 0) >>> 0 > 32 >>> 0) {
               break label$139
              }
              $7 = HEAP32[$5 >> 2] | 0;
              if ($6 >>> 0 > 16 >>> 0) {
               break label$138
              }
              if ($11 >>> 0 > 16 >>> 0) {
               break label$138
              }
              $6 = $7 + $20 | 0;
              FUNCTION_TABLE[HEAP32[($7 + 44 | 0) >> 2] | 0](HEAP32[($6 + 92 | 0) >> 2] | 0, (HEAP32[($7 + 1136 | 0) >> 2] | 0) - $21 | 0, $9 + 1204 | 0, $21, HEAP32[$22 >> 2] | 0, (HEAP32[($6 + 60 | 0) >> 2] | 0) + $10 | 0);
              break label$126;
             }
             $7 = HEAP32[$5 >> 2] | 0;
             $6 = $7 + $20 | 0;
             FUNCTION_TABLE[HEAP32[($7 + 40 | 0) >> 2] | 0](HEAP32[($6 + 92 | 0) >> 2] | 0, (HEAP32[($7 + 1136 | 0) >> 2] | 0) - $21 | 0, $9 + 1204 | 0, $21, HEAP32[$22 >> 2] | 0, (HEAP32[($6 + 60 | 0) >> 2] | 0) + $10 | 0);
             break label$126;
            }
            $6 = $7 + $20 | 0;
            FUNCTION_TABLE[HEAP32[($7 + 36 | 0) >> 2] | 0](HEAP32[($6 + 92 | 0) >> 2] | 0, (HEAP32[($7 + 1136 | 0) >> 2] | 0) - $21 | 0, $9 + 1204 | 0, $21, HEAP32[$22 >> 2] | 0, (HEAP32[($6 + 60 | 0) >> 2] | 0) + $10 | 0);
           }
           if ((HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0) == (2 | 0)) {
            break label$98
           }
           if (!$2) {
            break label$98
           }
           if (!$17) {
            break label$98
           }
           break label$101;
          }
          if (!$2) {
           break label$98
          }
          if (!$17) {
           break label$98
          }
         }
         $10 = HEAP32[$5 >> 2] | 0;
         $7 = HEAP32[((($10 + 1136 | 0) + Math_imul($8, 292) | 0) + 328 | 0) >> 2] | 0;
         HEAP32[($3 + 28 | 0) >> 2] = $7;
         if (!(HEAP32[($10 + 1136 | 0) >> 2] | 0)) {
          break label$98
         }
         $11 = HEAP32[(($10 + ($8 << 2 | 0) | 0) + 60 | 0) >> 2] | 0;
         HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) << $7 | 0;
         $7 = 1;
         if ((HEAP32[($10 + 1136 | 0) >> 2] | 0) >>> 0 < 2 >>> 0) {
          break label$98
         }
         label$140 : while (1) {
          $6 = $11 + ($7 << 2 | 0) | 0;
          HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) << (HEAP32[($3 + 28 | 0) >> 2] | 0) | 0;
          $7 = $7 + 1 | 0;
          if ($7 >>> 0 < (HEAP32[($10 + 1136 | 0) >> 2] | 0) >>> 0) {
           continue label$140
          }
          break label$140;
         };
        }
        if ((HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0) == (2 | 0)) {
         break label$89
        }
        $8 = $8 + 1 | 0;
        $7 = HEAP32[$5 >> 2] | 0;
        if ($8 >>> 0 < (HEAP32[($7 + 1144 | 0) >> 2] | 0) >>> 0) {
         continue label$91
        }
        break label$91;
       };
      }
      label$141 : {
       if (FLAC__bitreader_is_consumed_byte_aligned(HEAP32[($7 + 56 | 0) >> 2] | 0 | 0) | 0) {
        break label$141
       }
       HEAP32[($3 + 32 | 0) >> 2] = 0;
       $7 = HEAP32[((HEAP32[$5 >> 2] | 0) + 56 | 0) >> 2] | 0;
       if (!(FLAC__bitreader_read_raw_uint32($7 | 0, $3 + 32 | 0 | 0, FLAC__bitreader_bits_left_for_byte_alignment($7 | 0) | 0 | 0) | 0)) {
        break label$5
       }
       if (!(HEAP32[($3 + 32 | 0) >> 2] | 0)) {
        break label$141
       }
       label$142 : {
        $7 = HEAP32[$5 >> 2] | 0;
        if (HEAP32[($7 + 3632 | 0) >> 2] | 0) {
         break label$142
        }
        FUNCTION_TABLE[HEAP32[($7 + 32 | 0) >> 2] | 0]($0, 0, HEAP32[($7 + 48 | 0) >> 2] | 0);
       }
       HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
      }
      if ((HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0) == (2 | 0)) {
       break label$3
      }
      $7 = FLAC__bitreader_get_read_crc16(HEAP32[((HEAP32[$5 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) | 0;
      $4 = 0;
      if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[$5 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $3 + 16 | 0 | 0, HEAP32[global$52 >> 2] | 0 | 0) | 0)) {
       break label$3
      }
      label$143 : {
       label$144 : {
        if ((HEAP32[($3 + 16 | 0) >> 2] | 0 | 0) != ($7 | 0)) {
         break label$144
        }
        if (!$2) {
         break label$143
        }
        $7 = HEAP32[$5 >> 2] | 0;
        $6 = (HEAP32[($7 + 1148 | 0) >> 2] | 0) + -1 | 0;
        if ($6 >>> 0 > 2 >>> 0) {
         break label$143
        }
        label$145 : {
         switch ($6 | 0) {
         case 1:
          if (!(HEAP32[($7 + 1136 | 0) >> 2] | 0)) {
           break label$143
          }
          $11 = HEAP32[($7 + 64 | 0) >> 2] | 0;
          $9 = HEAP32[($7 + 60 | 0) >> 2] | 0;
          $6 = 0;
          label$148 : while (1) {
           $10 = $6 << 2 | 0;
           $8 = $9 + $10 | 0;
           HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + (HEAP32[($11 + $10 | 0) >> 2] | 0) | 0;
           $6 = $6 + 1 | 0;
           if ($6 >>> 0 < (HEAP32[($7 + 1136 | 0) >> 2] | 0) >>> 0) {
            continue label$148
           }
           break label$143;
          };
         default:
          if (!(HEAP32[($7 + 1136 | 0) >> 2] | 0)) {
           break label$143
          }
          $11 = HEAP32[($7 + 64 | 0) >> 2] | 0;
          $9 = HEAP32[($7 + 60 | 0) >> 2] | 0;
          $6 = 0;
          label$149 : while (1) {
           $10 = $6 << 2 | 0;
           $8 = $11 + $10 | 0;
           HEAP32[$8 >> 2] = (HEAP32[($9 + $10 | 0) >> 2] | 0) - (HEAP32[$8 >> 2] | 0) | 0;
           $6 = $6 + 1 | 0;
           if ($6 >>> 0 < (HEAP32[($7 + 1136 | 0) >> 2] | 0) >>> 0) {
            continue label$149
           }
           break label$143;
          };
         case 2:
          break label$145;
         };
        }
        if (!(HEAP32[($7 + 1136 | 0) >> 2] | 0)) {
         break label$143
        }
        $9 = HEAP32[($7 + 64 | 0) >> 2] | 0;
        $17 = HEAP32[($7 + 60 | 0) >> 2] | 0;
        $6 = 0;
        label$150 : while (1) {
         $10 = $6 << 2 | 0;
         $8 = $17 + $10 | 0;
         $1769 = $8;
         $11 = $9 + $10 | 0;
         $10 = HEAP32[$11 >> 2] | 0;
         $8 = $10 & 1 | 0 | ((HEAP32[$8 >> 2] | 0) << 1 | 0) | 0;
         HEAP32[$1769 >> 2] = ($8 + $10 | 0) >> 1 | 0;
         HEAP32[$11 >> 2] = ($8 - $10 | 0) >> 1 | 0;
         $6 = $6 + 1 | 0;
         if ($6 >>> 0 < (HEAP32[($7 + 1136 | 0) >> 2] | 0) >>> 0) {
          continue label$150
         }
         break label$143;
        };
       }
       label$151 : {
        $7 = HEAP32[$5 >> 2] | 0;
        if (HEAP32[($7 + 3632 | 0) >> 2] | 0) {
         break label$151
        }
        FUNCTION_TABLE[HEAP32[($7 + 32 | 0) >> 2] | 0]($0, 2, HEAP32[($7 + 48 | 0) >> 2] | 0);
       }
       if (!$2) {
        break label$143
       }
       $7 = HEAP32[$5 >> 2] | 0;
       if (!(HEAP32[($7 + 1144 | 0) >> 2] | 0)) {
        break label$143
       }
       $6 = 0;
       label$152 : while (1) {
        memset(HEAP32[(($7 + ($6 << 2 | 0) | 0) + 60 | 0) >> 2] | 0 | 0, 0 | 0, (HEAP32[($7 + 1136 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
        $6 = $6 + 1 | 0;
        $7 = HEAP32[$5 >> 2] | 0;
        if ($6 >>> 0 < (HEAP32[($7 + 1144 | 0) >> 2] | 0) >>> 0) {
         continue label$152
        }
        break label$152;
       };
      }
      HEAP32[$1 >> 2] = 1;
      label$153 : {
       $7 = HEAP32[$5 >> 2] | 0;
       $6 = HEAP32[($7 + 232 | 0) >> 2] | 0;
       if (!$6) {
        break label$153
       }
       HEAP32[($7 + 228 | 0) >> 2] = $6;
      }
      $6 = HEAP32[$0 >> 2] | 0;
      $10 = HEAP32[($7 + 1144 | 0) >> 2] | 0;
      HEAP32[($6 + 8 | 0) >> 2] = $10;
      HEAP32[($6 + 12 | 0) >> 2] = HEAP32[($7 + 1148 | 0) >> 2] | 0;
      $11 = HEAP32[($7 + 1152 | 0) >> 2] | 0;
      HEAP32[($6 + 16 | 0) >> 2] = $11;
      HEAP32[($6 + 20 | 0) >> 2] = HEAP32[($7 + 1140 | 0) >> 2] | 0;
      $1 = HEAP32[($7 + 1136 | 0) >> 2] | 0;
      HEAP32[($6 + 24 | 0) >> 2] = $1;
      $1865 = $7;
      i64toi32_i32$3 = $7 + 1160 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $25 = i64toi32_i32$1;
      $25$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      $1871$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $25$hi;
      i64toi32_i32$3 = i64toi32_i32$1;
      i64toi32_i32$1 = $1871$hi;
      i64toi32_i32$0 = $1;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $26 = i64toi32_i32$4;
      $26$hi = i64toi32_i32$5;
      i64toi32_i32$3 = $1865;
      HEAP32[(i64toi32_i32$3 + 240 | 0) >> 2] = i64toi32_i32$4;
      HEAP32[(i64toi32_i32$3 + 244 | 0) >> 2] = i64toi32_i32$5;
      label$154 : {
       if (!$2) {
        break label$154
       }
       $2 = $7 + 60 | 0;
       $8 = $7 + 1136 | 0;
       label$155 : {
        label$156 : {
         label$157 : {
          if (!(HEAP32[($7 + 3632 | 0) >> 2] | 0)) {
           break label$157
          }
          HEAP32[($7 + 6156 | 0) >> 2] = 1;
          i64toi32_i32$2 = $7;
          i64toi32_i32$5 = HEAP32[($7 + 6144 | 0) >> 2] | 0;
          i64toi32_i32$3 = HEAP32[($7 + 6148 | 0) >> 2] | 0;
          $27 = i64toi32_i32$5;
          $27$hi = i64toi32_i32$3;
          memcpy($7 + 3752 | 0 | 0, $8 | 0, 2384 | 0) | 0;
          i64toi32_i32$3 = $25$hi;
          i64toi32_i32$3 = $27$hi;
          i64toi32_i32$2 = i64toi32_i32$5;
          i64toi32_i32$5 = $25$hi;
          i64toi32_i32$0 = $25;
          if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
           break label$154
          }
          i64toi32_i32$2 = $27$hi;
          i64toi32_i32$2 = $26$hi;
          i64toi32_i32$2 = $27$hi;
          i64toi32_i32$0 = $27;
          i64toi32_i32$3 = $26$hi;
          i64toi32_i32$5 = $26;
          if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 >= i64toi32_i32$5 >>> 0 | 0) | 0) {
           break label$154
          }
          $6 = 0;
          $11 = HEAP32[$5 >> 2] | 0;
          HEAP32[($11 + 3632 | 0) >> 2] = 0;
          label$158 : {
           i64toi32_i32$0 = $27$hi;
           i64toi32_i32$0 = $25$hi;
           i64toi32_i32$0 = $27$hi;
           i64toi32_i32$5 = $27;
           i64toi32_i32$2 = $25$hi;
           i64toi32_i32$3 = $25;
           i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
           i64toi32_i32$4 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$2 | 0;
           i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
           $25 = i64toi32_i32$1;
           $25$hi = i64toi32_i32$4;
           $1 = i64toi32_i32$1;
           if (!i64toi32_i32$1) {
            break label$158
           }
           label$159 : {
            if (!$10) {
             break label$159
            }
            label$160 : while (1) {
             $5 = $6 << 2 | 0;
             HEAP32[(($3 + 32 | 0) + $5 | 0) >> 2] = (HEAP32[(($7 + $5 | 0) + 60 | 0) >> 2] | 0) + ($1 << 2 | 0) | 0;
             $6 = $6 + 1 | 0;
             if (($6 | 0) != ($10 | 0)) {
              continue label$160
             }
             break label$160;
            };
           }
           HEAP32[($11 + 3752 | 0) >> 2] = (HEAP32[($11 + 3752 | 0) >> 2] | 0) - $1 | 0;
           $5 = $11 + 3776 | 0;
           $1934 = $5;
           i64toi32_i32$0 = $5;
           i64toi32_i32$4 = HEAP32[$5 >> 2] | 0;
           i64toi32_i32$5 = HEAP32[($5 + 4 | 0) >> 2] | 0;
           $1936 = i64toi32_i32$4;
           $1936$hi = i64toi32_i32$5;
           i64toi32_i32$5 = $25$hi;
           i64toi32_i32$0 = $25;
           i64toi32_i32$4 = 0;
           i64toi32_i32$3 = -1;
           i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
           $1938 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
           $1938$hi = i64toi32_i32$4;
           i64toi32_i32$4 = $1936$hi;
           i64toi32_i32$5 = $1936;
           i64toi32_i32$0 = $1938$hi;
           i64toi32_i32$3 = $1938;
           i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
           i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
           if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
            i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
           }
           i64toi32_i32$5 = $1934;
           HEAP32[i64toi32_i32$5 >> 2] = i64toi32_i32$2;
           HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
           $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
           $5 = FUNCTION_TABLE[HEAP32[($5 + 24 | 0) >> 2] | 0]($0, $5 + 3752 | 0, $3 + 32 | 0, HEAP32[($5 + 48 | 0) >> 2] | 0) | 0;
           break label$156;
          }
          $5 = FUNCTION_TABLE[HEAP32[($11 + 24 | 0) >> 2] | 0]($0, $8, $2, HEAP32[($11 + 48 | 0) >> 2] | 0) | 0;
          break label$156;
         }
         label$161 : {
          label$162 : {
           if (HEAP32[($7 + 248 | 0) >> 2] | 0) {
            break label$162
           }
           HEAP32[($7 + 3624 | 0) >> 2] = 0;
           break label$161;
          }
          if (!(HEAP32[($7 + 3624 | 0) >> 2] | 0)) {
           break label$161
          }
          if (!(FLAC__MD5Accumulate($7 + 3636 | 0 | 0, $2 | 0, $10 | 0, $1 | 0, ($11 + 7 | 0) >>> 3 | 0 | 0) | 0)) {
           break label$155
          }
          $7 = HEAP32[$5 >> 2] | 0;
         }
         $5 = FUNCTION_TABLE[HEAP32[($7 + 24 | 0) >> 2] | 0]($0, $8, $2, HEAP32[($7 + 48 | 0) >> 2] | 0) | 0;
        }
        if (!$5) {
         break label$154
        }
       }
       HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 7;
       break label$3;
      }
      HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
     }
     $4 = 1;
     break label$3;
    }
    $4 = 0;
    break label$3;
   }
   HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
   $4 = 0;
  }
  label$163 : {
   $24 = $3 + 64 | 0;
   if ($24 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $24;
  }
  return $4 | 0;
 }
 
 function read_residual_partitioned_rice_($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $7 = 0, $6 = 0, $8 = 0, $13 = 0, $12 = 0, $9 = 0, $10 = 0, $11 = 0, $15 = 0, $14 = 0;
  label$1 : {
   $6 = global$0 - 16 | 0;
   $14 = $6;
   if ($6 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $14;
  }
  $7 = HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 1136 | 0) >> 2] | 0;
  $8 = global$53;
  $9 = HEAP32[($5 ? global$54 : $8) >> 2] | 0;
  $8 = global$55;
  $10 = HEAP32[($5 ? global$56 : $8) >> 2] | 0;
  label$3 : {
   label$4 : {
    label$5 : {
     if (!(FLAC__format_entropy_coding_method_partitioned_rice_contents_ensure_size($3 | 0, ($2 >>> 0 > 6 >>> 0 ? $2 : 6) | 0) | 0)) {
      break label$5
     }
     $8 = $2 ? $7 >>> $2 | 0 : $7 - $1 | 0;
     $11 = HEAP32[global$57 >> 2] | 0;
     if (!$2) {
      break label$4
     }
     $12 = 0;
     $5 = 0;
     label$6 : while (1) {
      label$7 : {
       if (FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $6 + 12 | 0 | 0, $10 | 0) | 0) {
        break label$7
       }
       $7 = 0;
       break label$3;
      }
      $13 = $12 << 2 | 0;
      HEAP32[((HEAP32[$3 >> 2] | 0) + $13 | 0) >> 2] = HEAP32[($6 + 12 | 0) >> 2] | 0;
      label$8 : {
       label$9 : {
        if ((HEAP32[($6 + 12 | 0) >> 2] | 0) >>> 0 >= $9 >>> 0) {
         break label$9
        }
        $7 = 0;
        HEAP32[((HEAP32[($3 + 4 | 0) >> 2] | 0) + $13 | 0) >> 2] = 0;
        $13 = $8 - ($12 ? 0 : $1) | 0;
        if (!(FLAC__bitreader_read_rice_signed_block(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $4 + ($5 << 2 | 0) | 0 | 0, $13 | 0, HEAP32[($6 + 12 | 0) >> 2] | 0 | 0) | 0)) {
         break label$3
        }
        $5 = $13 + $5 | 0;
        break label$8;
       }
       label$10 : {
        if (FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $6 + 12 | 0 | 0, $11 | 0) | 0) {
         break label$10
        }
        $7 = 0;
        break label$3;
       }
       HEAP32[((HEAP32[($3 + 4 | 0) >> 2] | 0) + $13 | 0) >> 2] = HEAP32[($6 + 12 | 0) >> 2] | 0;
       $7 = $12 ? 0 : $1;
       if ($7 >>> 0 >= $8 >>> 0) {
        break label$8
       }
       $13 = ($8 + $5 | 0) - $7 | 0;
       label$11 : while (1) {
        label$12 : {
         if (FLAC__bitreader_read_raw_int32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $6 + 8 | 0 | 0, HEAP32[($6 + 12 | 0) >> 2] | 0 | 0) | 0) {
          break label$12
         }
         $7 = 0;
         break label$3;
        }
        HEAP32[($4 + ($5 << 2 | 0) | 0) >> 2] = HEAP32[($6 + 8 | 0) >> 2] | 0;
        $5 = $5 + 1 | 0;
        $7 = $7 + 1 | 0;
        if (($7 | 0) != ($8 | 0)) {
         continue label$11
        }
        break label$11;
       };
       $5 = $13;
      }
      $7 = 1;
      $12 = $12 + 1 | 0;
      if (!($12 >>> $2 | 0)) {
       continue label$6
      }
      break label$3;
     };
    }
    HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
    $7 = 0;
    break label$3;
   }
   $7 = 0;
   if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $6 + 12 | 0 | 0, $10 | 0) | 0)) {
    break label$3
   }
   HEAP32[(HEAP32[$3 >> 2] | 0) >> 2] = HEAP32[($6 + 12 | 0) >> 2] | 0;
   label$13 : {
    label$14 : {
     if ((HEAP32[($6 + 12 | 0) >> 2] | 0) >>> 0 < $9 >>> 0) {
      break label$14
     }
     if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $6 + 12 | 0 | 0, $11 | 0) | 0)) {
      break label$3
     }
     HEAP32[(HEAP32[($3 + 4 | 0) >> 2] | 0) >> 2] = HEAP32[($6 + 12 | 0) >> 2] | 0;
     if (!$8) {
      break label$13
     }
     $5 = 0;
     $7 = 0;
     label$15 : while (1) {
      label$16 : {
       if (FLAC__bitreader_read_raw_int32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $6 + 8 | 0 | 0, HEAP32[($6 + 12 | 0) >> 2] | 0 | 0) | 0) {
        break label$16
       }
       $7 = 0;
       break label$3;
      }
      HEAP32[($4 + ($5 << 2 | 0) | 0) >> 2] = HEAP32[($6 + 8 | 0) >> 2] | 0;
      $5 = $5 + 1 | 0;
      $7 = $7 + 1 | 0;
      if (($7 | 0) != ($8 | 0)) {
       continue label$15
      }
      break label$13;
     };
    }
    $7 = 0;
    HEAP32[(HEAP32[($3 + 4 | 0) >> 2] | 0) >> 2] = 0;
    if (!(FLAC__bitreader_read_rice_signed_block(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $4 | 0, $8 | 0, HEAP32[($6 + 12 | 0) >> 2] | 0 | 0) | 0)) {
     break label$3
    }
   }
   $7 = 1;
  }
  label$17 : {
   $15 = $6 + 16 | 0;
   if ($15 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $15;
  }
  return $7 | 0;
 }
 
 function FLAC__stream_decoder_process_until_end_of_metadata($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     $1 = 0;
     $2 = HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0;
     if ($2 >>> 0 > 7 >>> 0) {
      break label$1
     }
     $3 = 1;
     label$4 : {
      label$5 : {
       switch ($2 | 0) {
       default:
        if (find_metadata_($0 | 0) | 0) {
         continue label$3
        }
        break label$4;
       case 5:
       case 6:
        break label$1;
       case 2:
       case 3:
       case 4:
       case 7:
        break label$2;
       case 1:
        break label$5;
       };
      }
      if (read_metadata_($0 | 0) | 0) {
       continue label$3
      }
     }
     break label$3;
    };
    $3 = 0;
   }
   $1 = $3;
  }
  return $1 | 0;
 }
 
 function FLAC__stream_decoder_process_until_end_of_stream($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, $5 = 0;
  label$1 : {
   $1 = global$0 - 16 | 0;
   $5 = $1;
   if ($1 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $5;
  }
  $2 = 1;
  label$3 : {
   label$4 : {
    label$5 : while (1) {
     $3 = 0;
     $4 = HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0;
     if ($4 >>> 0 > 7 >>> 0) {
      break label$3
     }
     label$6 : {
      label$7 : {
       switch ($4 | 0) {
       default:
        if (find_metadata_($0 | 0) | 0) {
         continue label$5
        }
        break label$6;
       case 1:
        if (read_metadata_($0 | 0) | 0) {
         continue label$5
        }
        break label$6;
       case 2:
        if (frame_sync_($0 | 0) | 0) {
         continue label$5
        }
        break label$4;
       case 5:
       case 6:
        break label$3;
       case 4:
       case 7:
        break label$4;
       case 3:
        break label$7;
       };
      }
      if (read_frame_($0 | 0, $1 + 12 | 0 | 0, 1 | 0) | 0) {
       continue label$5
      }
     }
     break label$5;
    };
    $2 = 0;
   }
   $3 = $2;
  }
  label$11 : {
   $6 = $1 + 16 | 0;
   if ($6 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $6;
  }
  return $3 | 0;
 }
 
 function read_callback_proxy_($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  label$1 : {
   $0 = FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0]($0, $1, $2, $3) | 0;
   if ($0 >>> 0 > 2 >>> 0) {
    break label$1
   }
   return HEAP32[((global$1 + 7560 | 0) + ($0 << 2 | 0) | 0) >> 2] | 0 | 0;
  }
  return 5 | 0;
 }
 
 function simple_ogg_page__init($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function simple_ogg_page__clear($0) {
  $0 = $0 | 0;
  var $1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  label$1 : {
   $1 = HEAP32[$0 >> 2] | 0;
   if (!$1) {
    break label$1
   }
   dlfree($1 | 0);
  }
  label$2 : {
   $1 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   if (!$1) {
    break label$2
   }
   dlfree($1 | 0);
  }
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[($0 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function simple_ogg_page__get_at($0, $1, $1$hi, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $10 = 0, $8 = 0, $6 = 0, $7 = 0, i64toi32_i32$0 = 0, $9 = 0, $17 = 0, $12 = 0, $11 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0;
  label$1 : {
   $6 = global$0 - 16 | 0;
   $11 = $6;
   if ($6 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $11;
  }
  $7 = 0;
  label$3 : {
   if (!$3) {
    break label$3
   }
   i64toi32_i32$0 = $1$hi;
   $3 = FUNCTION_TABLE[$3]($0, $1, i64toi32_i32$0, $5) | 0;
   if ($3 >>> 0 > 1 >>> 0) {
    break label$3
   }
   label$4 : {
    switch ($3 | 0) {
    case 1:
     HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 5;
     break label$3;
    default:
     break label$4;
    };
   }
   $3 = dlmalloc(282 | 0) | 0;
   HEAP32[$2 >> 2] = $3;
   label$6 : {
    if ($3) {
     break label$6
    }
    HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
    break label$3;
   }
   $8 = 27;
   label$7 : while (1) {
    HEAP32[($6 + 12 | 0) >> 2] = $8;
    $9 = 5;
    label$8 : {
     label$9 : {
      label$10 : {
       $10 = FUNCTION_TABLE[$4]($0, $3, $6 + 12 | 0, $5) | 0;
       if ($10 >>> 0 > 3 >>> 0) {
        break label$10
       }
       label$11 : {
        switch ($10 | 0) {
        case 2:
         break label$10;
        case 1:
         break label$11;
        case 3:
         break label$3;
        default:
         break label$9;
        };
       }
       $10 = HEAP32[($6 + 12 | 0) >> 2] | 0;
       if ($10) {
        break label$8
       }
       $9 = 2;
      }
      HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = $9;
      break label$3;
     }
     $10 = HEAP32[($6 + 12 | 0) >> 2] | 0;
    }
    $3 = $3 + $10 | 0;
    $8 = $8 - $10 | 0;
    if ($8) {
     continue label$7
    }
    break label$7;
   };
   $3 = HEAP32[$2 >> 2] | 0;
   HEAP32[($2 + 4 | 0) >> 2] = (HEAPU8[($3 + 26 | 0) >> 0] | 0) + 27 | 0;
   label$12 : {
    label$13 : {
     if ((HEAPU8[$3 >> 0] | 0 | ((HEAPU8[($3 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($3 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($3 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0 | 0) != (1399285583 | 0)) {
      break label$13
     }
     if ((HEAPU8[($3 + 5 | 0) >> 0] | 0) & 1 | 0) {
      break label$13
     }
     i64toi32_i32$0 = HEAPU8[($3 + 6 | 0) >> 0] | 0 | ((HEAPU8[($3 + 7 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($3 + 8 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($3 + 9 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     i64toi32_i32$1 = HEAPU8[($3 + 10 | 0) >> 0] | 0 | ((HEAPU8[($3 + 11 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($3 + 12 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($3 + 13 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$2 | 0) != (0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$13
     }
     $8 = HEAPU8[($3 + 26 | 0) >> 0] | 0;
     if ($8) {
      break label$12
     }
    }
    HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
    break label$3;
   }
   $3 = $3 + 27 | 0;
   label$14 : while (1) {
    HEAP32[($6 + 12 | 0) >> 2] = $8;
    $9 = 5;
    label$15 : {
     label$16 : {
      label$17 : {
       $10 = FUNCTION_TABLE[$4]($0, $3, $6 + 12 | 0, $5) | 0;
       if ($10 >>> 0 > 3 >>> 0) {
        break label$17
       }
       label$18 : {
        switch ($10 | 0) {
        case 2:
         break label$17;
        case 1:
         break label$18;
        case 3:
         break label$3;
        default:
         break label$16;
        };
       }
       $10 = HEAP32[($6 + 12 | 0) >> 2] | 0;
       if ($10) {
        break label$15
       }
       $9 = 2;
      }
      HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = $9;
      break label$3;
     }
     $10 = HEAP32[($6 + 12 | 0) >> 2] | 0;
    }
    $3 = $3 + $10 | 0;
    $8 = $8 - $10 | 0;
    if ($8) {
     continue label$14
    }
    break label$14;
   };
   $3 = 0;
   label$19 : {
    label$20 : {
     $10 = HEAP32[$2 >> 2] | 0;
     $8 = HEAPU8[($10 + 26 | 0) >> 0] | 0;
     if (($8 | 0) == (1 | 0)) {
      break label$20
     }
     $8 = $8 + -1 | 0;
     $3 = 0;
     label$21 : while (1) {
      label$22 : {
       if ((HEAPU8[(($3 + $10 | 0) + 27 | 0) >> 0] | 0 | 0) == (255 | 0)) {
        break label$22
       }
       HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
       break label$19;
      }
      $3 = $3 + 1 | 0;
      if ($3 >>> 0 < $8 >>> 0) {
       continue label$21
      }
      break label$21;
     };
    }
    $3 = Math_imul($3, 255) + (HEAPU8[(($3 + $10 | 0) + 27 | 0) >> 0] | 0) | 0;
    HEAP32[($2 + 12 | 0) >> 2] = $3;
    $8 = dlmalloc($3 + !$3 | 0 | 0) | 0;
    HEAP32[($2 + 8 | 0) >> 2] = $8;
    label$23 : {
     if ($8) {
      break label$23
     }
     HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
     break label$19;
    }
    label$24 : {
     if (!$3) {
      break label$24
     }
     label$25 : while (1) {
      HEAP32[($6 + 12 | 0) >> 2] = $3;
      $7 = 5;
      label$26 : {
       label$27 : {
        label$28 : {
         $10 = FUNCTION_TABLE[$4]($0, $8, $6 + 12 | 0, $5) | 0;
         if ($10 >>> 0 > 3 >>> 0) {
          break label$28
         }
         label$29 : {
          switch ($10 | 0) {
          case 3:
           break label$19;
          case 2:
           break label$28;
          case 1:
           break label$29;
          default:
           break label$27;
          };
         }
         $10 = HEAP32[($6 + 12 | 0) >> 2] | 0;
         if ($10) {
          break label$26
         }
         $7 = 2;
        }
        HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = $7;
        break label$19;
       }
       $10 = HEAP32[($6 + 12 | 0) >> 2] | 0;
      }
      $8 = $8 + $10 | 0;
      $3 = $3 - $10 | 0;
      if ($3) {
       continue label$25
      }
      break label$25;
     };
     $10 = HEAP32[$2 >> 2] | 0;
    }
    HEAP32[($6 + 12 | 0) >> 2] = HEAPU8[($10 + 22 | 0) >> 0] | 0 | ((HEAPU8[($10 + 23 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10 + 24 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10 + 25 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    ogg_page_checksum_set($2 | 0);
    label$30 : {
     $17 = HEAP32[$2 >> 2] | 0;
     if ((HEAP32[($6 + 12 | 0) >> 2] | 0 | 0) != (HEAPU8[($17 + 22 | 0) >> 0] | 0 | ((HEAPU8[($17 + 23 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($17 + 24 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($17 + 25 | 0) >> 0] | 0) << 24 | 0) | 0) | 0 | 0)) {
      break label$30
     }
     $7 = 1;
     break label$3;
    }
    HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
   }
   $7 = 0;
  }
  label$31 : {
   $12 = $6 + 16 | 0;
   if ($12 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $12;
  }
  return $7 | 0;
 }
 
 function simple_ogg_page__set_at($0, $1, $1$hi, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, i64toi32_i32$0 = 0;
  $6 = 0;
  label$1 : {
   if (!$3) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   $3 = FUNCTION_TABLE[$3]($0, $1, i64toi32_i32$0, $5) | 0;
   if ($3 >>> 0 > 1 >>> 0) {
    break label$1
   }
   label$2 : {
    switch ($3 | 0) {
    case 1:
     HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 5;
     return 0 | 0;
    default:
     break label$2;
    };
   }
   ogg_page_checksum_set($2 | 0);
   label$4 : {
    if (!(FUNCTION_TABLE[$4]($0, HEAP32[$2 >> 2] | 0, HEAP32[($2 + 4 | 0) >> 2] | 0, 0, 0, $5) | 0)) {
     break label$4
    }
    HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 5;
    return 0 | 0;
   }
   $6 = 0;
   label$5 : {
    if (FUNCTION_TABLE[$4]($0, HEAP32[($2 + 8 | 0) >> 2] | 0, HEAP32[($2 + 12 | 0) >> 2] | 0, 0, 0, $5) | 0) {
     break label$5
    }
    return 1 | 0;
   }
   HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 5;
  }
  return $6 | 0;
 }
 
 function __emscripten_stdout_close($0) {
  $0 = $0 | 0;
  return 0 | 0;
 }
 
 function __emscripten_stdout_seek($0, $1, $1$hi, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  i64toi32_i32$HIGH_BITS = 0;
  return 0 | 0;
 }
 
 function strcmp($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0;
  $2 = HEAPU8[$1 >> 0] | 0;
  label$1 : {
   $3 = HEAPU8[$0 >> 0] | 0;
   if (!$3) {
    break label$1
   }
   if (($3 | 0) != ($2 & 255 | 0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $2 = HEAPU8[($1 + 1 | 0) >> 0] | 0;
    $3 = HEAPU8[($0 + 1 | 0) >> 0] | 0;
    if (!$3) {
     break label$1
    }
    $1 = $1 + 1 | 0;
    $0 = $0 + 1 | 0;
    if (($3 | 0) == ($2 & 255 | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return $3 - ($2 & 255 | 0) | 0 | 0;
 }
 
 function __cos($0, $1) {
  $0 = +$0;
  $1 = +$1;
  var $2 = 0.0, $3 = 0.0, $4 = 0.0, $16 = 0.0;
  $2 = $0 * $0;
  $3 = $2 * .5;
  $4 = 1.0 - $3;
  $16 = 1.0 - $4 - $3;
  $3 = $2 * $2;
  return +($4 + ($16 + ($2 * ($2 * ($2 * ($2 * 2.480158728947673e-05 + -.001388888888887411) + .0416666666666666) + $3 * $3 * ($2 * ($2 * -1.1359647557788195e-11 + 2.087572321298175e-09) + -2.7557314351390663e-07)) - $0 * $1)));
 }
 
 function scalbn($0, $1) {
  $0 = +$0;
  $1 = $1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8 = 0, $32 = 0.0, i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    if (($1 | 0) < (1024 | 0)) {
     break label$2
    }
    $0 = $0 * 8988465674311579538646525.0e283;
    label$3 : {
     if (($1 | 0) >= (2047 | 0)) {
      break label$3
     }
     $1 = $1 + -1023 | 0;
     break label$1;
    }
    $0 = $0 * 8988465674311579538646525.0e283;
    $1 = (($1 | 0) < (3069 | 0) ? $1 : 3069) + -2046 | 0;
    break label$1;
   }
   if (($1 | 0) > (-1023 | 0)) {
    break label$1
   }
   $0 = $0 * 2.2250738585072014e-308;
   label$4 : {
    if (($1 | 0) <= (-2045 | 0)) {
     break label$4
    }
    $1 = $1 + 1022 | 0;
    break label$1;
   }
   $0 = $0 * 2.2250738585072014e-308;
   $1 = (($1 | 0) > (-3066 | 0) ? $1 : -3066) + 2044 | 0;
  }
  $32 = $0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $1 + 1023 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 52;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $8 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $8 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  wasm2js_scratch_store_i32(0 | 0, $8 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
  return +($32 * +wasm2js_scratch_load_f64());
 }
 
 function floor($0) {
  $0 = +$0;
  return +Math_floor($0);
 }
 
 function __rem_pio2_large($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $25 = 0.0, $11 = 0, $6 = 0, $5 = 0, $26 = 0.0, $9 = 0, $14 = 0, $10 = 0, $12 = 0, $20 = 0, $18 = 0, $8 = 0, $27 = 0.0, $21 = 0, $7 = 0, $13 = 0, $16 = 0, $17 = 0, $19 = 0, i64toi32_i32$0 = 0, $23 = 0, $22 = 0, $15 = 0, $212 = 0, $215 = 0, $546 = 0.0, $580 = 0.0, i64toi32_i32$1 = 0, $617 = 0;
  label$1 : {
   $5 = global$0 - 560 | 0;
   $22 = $5;
   if ($5 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $22;
  }
  $6 = ($2 + -3 | 0 | 0) / (24 | 0) | 0;
  $7 = ($6 | 0) > (0 | 0) ? $6 : 0;
  $8 = $2 + Math_imul($7, -24) | 0;
  label$3 : {
   $9 = HEAP32[(($4 << 2 | 0) + 7584 | 0) >> 2] | 0;
   $10 = $3 + -1 | 0;
   if (($9 + $10 | 0 | 0) < (0 | 0)) {
    break label$3
   }
   $11 = $9 + $3 | 0;
   $2 = $7 - $10 | 0;
   $6 = 0;
   label$4 : while (1) {
    label$5 : {
     label$6 : {
      if (($2 | 0) >= (0 | 0)) {
       break label$6
      }
      $25 = 0.0;
      break label$5;
     }
     $25 = +(HEAP32[(($2 << 2 | 0) + 7600 | 0) >> 2] | 0 | 0);
    }
    HEAPF64[(($5 + 320 | 0) + ($6 << 3 | 0) | 0) >> 3] = $25;
    $2 = $2 + 1 | 0;
    $6 = $6 + 1 | 0;
    if (($6 | 0) != ($11 | 0)) {
     continue label$4
    }
    break label$4;
   };
  }
  $12 = $8 + -24 | 0;
  $11 = 0;
  $13 = ($9 | 0) > (0 | 0) ? $9 : 0;
  $14 = ($3 | 0) < (1 | 0);
  label$7 : while (1) {
   label$8 : {
    label$9 : {
     if (!$14) {
      break label$9
     }
     $25 = 0.0;
     break label$8;
    }
    $6 = $11 + $10 | 0;
    $2 = 0;
    $25 = 0.0;
    label$10 : while (1) {
     $25 = $25 + +HEAPF64[($0 + ($2 << 3 | 0) | 0) >> 3] * +HEAPF64[(($5 + 320 | 0) + (($6 - $2 | 0) << 3 | 0) | 0) >> 3];
     $2 = $2 + 1 | 0;
     if (($2 | 0) != ($3 | 0)) {
      continue label$10
     }
     break label$10;
    };
   }
   HEAPF64[($5 + ($11 << 3 | 0) | 0) >> 3] = $25;
   $2 = ($11 | 0) == ($13 | 0);
   $11 = $11 + 1 | 0;
   if (!$2) {
    continue label$7
   }
   break label$7;
  };
  $15 = 23 - $12 | 0;
  $16 = 24 - $12 | 0;
  $11 = $9;
  label$11 : {
   label$12 : while (1) {
    $25 = +HEAPF64[($5 + ($11 << 3 | 0) | 0) >> 3];
    $2 = 0;
    $6 = $11;
    label$13 : {
     $17 = ($11 | 0) < (1 | 0);
     if ($17) {
      break label$13
     }
     label$14 : while (1) {
      $14 = $2 << 2 | 0;
      label$15 : {
       label$16 : {
        $26 = $25 * 5.9604644775390625e-08;
        if (!(Math_abs($26) < 2147483648.0)) {
         break label$16
        }
        $10 = ~~$26;
        break label$15;
       }
       $10 = -2147483648;
      }
      $14 = ($5 + 480 | 0) + $14 | 0;
      label$17 : {
       label$18 : {
        $26 = +($10 | 0);
        $25 = $25 + $26 * -16777216.0;
        if (!(Math_abs($25) < 2147483648.0)) {
         break label$18
        }
        $10 = ~~$25;
        break label$17;
       }
       $10 = -2147483648;
      }
      HEAP32[$14 >> 2] = $10;
      $6 = $6 + -1 | 0;
      $25 = +HEAPF64[($5 + ($6 << 3 | 0) | 0) >> 3] + $26;
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($11 | 0)) {
       continue label$14
      }
      break label$14;
     };
    }
    $25 = +scalbn(+$25, $12 | 0);
    label$19 : {
     label$20 : {
      $25 = $25 + +floor(+($25 * .125)) * -8.0;
      if (!(Math_abs($25) < 2147483648.0)) {
       break label$20
      }
      $18 = ~~$25;
      break label$19;
     }
     $18 = -2147483648;
    }
    $25 = $25 - +($18 | 0);
    label$21 : {
     label$22 : {
      label$23 : {
       label$24 : {
        label$25 : {
         $19 = ($12 | 0) < (1 | 0);
         if ($19) {
          break label$25
         }
         $2 = (($11 << 2 | 0) + ($5 + 480 | 0) | 0) + -4 | 0;
         $212 = $2;
         $2 = HEAP32[$2 >> 2] | 0;
         $215 = $2;
         $2 = $2 >> $16 | 0;
         $6 = $215 - ($2 << $16 | 0) | 0;
         HEAP32[$212 >> 2] = $6;
         $20 = $6 >> $15 | 0;
         $18 = $2 + $18 | 0;
         break label$24;
        }
        if ($12) {
         break label$23
        }
        $20 = (HEAP32[((($11 << 2 | 0) + ($5 + 480 | 0) | 0) + -4 | 0) >> 2] | 0) >> 23 | 0;
       }
       if (($20 | 0) < (1 | 0)) {
        break label$21
       }
       break label$22;
      }
      $20 = 2;
      if (!($25 >= .5 ^ 1 | 0)) {
       break label$22
      }
      $20 = 0;
      break label$21;
     }
     $2 = 0;
     $21 = 0;
     label$26 : {
      if ($17) {
       break label$26
      }
      label$27 : while (1) {
       $10 = ($5 + 480 | 0) + ($2 << 2 | 0) | 0;
       $6 = HEAP32[$10 >> 2] | 0;
       $14 = 16777215;
       label$28 : {
        label$29 : {
         label$30 : {
          if ($21) {
           break label$30
          }
          if (!$6) {
           break label$29
          }
          $21 = 1;
          $14 = 16777216;
         }
         HEAP32[$10 >> 2] = $14 - $6 | 0;
         break label$28;
        }
        $21 = 0;
       }
       $2 = $2 + 1 | 0;
       if (($2 | 0) != ($11 | 0)) {
        continue label$27
       }
       break label$27;
      };
     }
     label$31 : {
      if ($19) {
       break label$31
      }
      $2 = $12 + -1 | 0;
      if ($2 >>> 0 > 1 >>> 0) {
       break label$31
      }
      label$32 : {
       switch ($2 | 0) {
       default:
        $2 = (($11 << 2 | 0) + ($5 + 480 | 0) | 0) + -4 | 0;
        HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) & 8388607 | 0;
        break label$31;
       case 1:
        break label$32;
       };
      }
      $2 = (($11 << 2 | 0) + ($5 + 480 | 0) | 0) + -4 | 0;
      HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) & 4194303 | 0;
     }
     $18 = $18 + 1 | 0;
     if (($20 | 0) != (2 | 0)) {
      break label$21
     }
     $25 = 1.0 - $25;
     $20 = 2;
     if (!$21) {
      break label$21
     }
     $25 = $25 - +scalbn(+(1.0), $12 | 0);
    }
    label$34 : {
     if ($25 != 0.0) {
      break label$34
     }
     $6 = 0;
     $2 = $11;
     label$35 : {
      if (($2 | 0) <= ($9 | 0)) {
       break label$35
      }
      label$36 : while (1) {
       $2 = $2 + -1 | 0;
       $6 = HEAP32[(($5 + 480 | 0) + ($2 << 2 | 0) | 0) >> 2] | 0 | $6 | 0;
       if (($2 | 0) > ($9 | 0)) {
        continue label$36
       }
       break label$36;
      };
      if (!$6) {
       break label$35
      }
      $8 = $12;
      label$37 : while (1) {
       $8 = $8 + -24 | 0;
       $11 = $11 + -1 | 0;
       if (!(HEAP32[(($5 + 480 | 0) + ($11 << 2 | 0) | 0) >> 2] | 0)) {
        continue label$37
       }
       break label$11;
      };
     }
     $2 = 1;
     label$38 : while (1) {
      $6 = $2;
      $2 = $2 + 1 | 0;
      if (!(HEAP32[(($5 + 480 | 0) + (($9 - $6 | 0) << 2 | 0) | 0) >> 2] | 0)) {
       continue label$38
      }
      break label$38;
     };
     $14 = $6 + $11 | 0;
     label$39 : while (1) {
      $6 = $11 + $3 | 0;
      $11 = $11 + 1 | 0;
      HEAPF64[(($5 + 320 | 0) + ($6 << 3 | 0) | 0) >> 3] = +(HEAP32[((($11 + $7 | 0) << 2 | 0) + 7600 | 0) >> 2] | 0 | 0);
      $2 = 0;
      $25 = 0.0;
      label$40 : {
       if (($3 | 0) < (1 | 0)) {
        break label$40
       }
       label$41 : while (1) {
        $25 = $25 + +HEAPF64[($0 + ($2 << 3 | 0) | 0) >> 3] * +HEAPF64[(($5 + 320 | 0) + (($6 - $2 | 0) << 3 | 0) | 0) >> 3];
        $2 = $2 + 1 | 0;
        if (($2 | 0) != ($3 | 0)) {
         continue label$41
        }
        break label$41;
       };
      }
      HEAPF64[($5 + ($11 << 3 | 0) | 0) >> 3] = $25;
      if (($11 | 0) < ($14 | 0)) {
       continue label$39
      }
      break label$39;
     };
     $11 = $14;
     continue label$12;
    }
    break label$12;
   };
   label$42 : {
    label$43 : {
     $25 = +scalbn(+$25, 0 - $12 | 0 | 0);
     if ($25 >= 16777216.0 ^ 1 | 0) {
      break label$43
     }
     $3 = $11 << 2 | 0;
     label$44 : {
      label$45 : {
       $26 = $25 * 5.9604644775390625e-08;
       if (!(Math_abs($26) < 2147483648.0)) {
        break label$45
       }
       $2 = ~~$26;
       break label$44;
      }
      $2 = -2147483648;
     }
     $3 = ($5 + 480 | 0) + $3 | 0;
     label$46 : {
      label$47 : {
       $25 = $25 + +($2 | 0) * -16777216.0;
       if (!(Math_abs($25) < 2147483648.0)) {
        break label$47
       }
       $6 = ~~$25;
       break label$46;
      }
      $6 = -2147483648;
     }
     HEAP32[$3 >> 2] = $6;
     $11 = $11 + 1 | 0;
     break label$42;
    }
    label$48 : {
     label$49 : {
      if (!(Math_abs($25) < 2147483648.0)) {
       break label$49
      }
      $2 = ~~$25;
      break label$48;
     }
     $2 = -2147483648;
    }
    $8 = $12;
   }
   HEAP32[(($5 + 480 | 0) + ($11 << 2 | 0) | 0) >> 2] = $2;
  }
  $25 = +scalbn(+(1.0), $8 | 0);
  label$50 : {
   if (($11 | 0) < (0 | 0)) {
    break label$50
   }
   $2 = $11;
   label$51 : while (1) {
    HEAPF64[($5 + ($2 << 3 | 0) | 0) >> 3] = $25 * +(HEAP32[(($5 + 480 | 0) + ($2 << 2 | 0) | 0) >> 2] | 0 | 0);
    $25 = $25 * 5.9604644775390625e-08;
    $9 = 0;
    $3 = ($2 | 0) > (0 | 0);
    $2 = $2 + -1 | 0;
    if ($3) {
     continue label$51
    }
    break label$51;
   };
   $6 = $11;
   label$52 : while (1) {
    $0 = $13 >>> 0 < $9 >>> 0 ? $13 : $9;
    $14 = $11 - $6 | 0;
    $2 = 0;
    $25 = 0.0;
    label$53 : while (1) {
     $25 = $25 + +HEAPF64[(($2 << 3 | 0) + 10368 | 0) >> 3] * +HEAPF64[($5 + (($2 + $6 | 0) << 3 | 0) | 0) >> 3];
     $3 = ($2 | 0) != ($0 | 0);
     $2 = $2 + 1 | 0;
     if ($3) {
      continue label$53
     }
     break label$53;
    };
    HEAPF64[(($5 + 160 | 0) + ($14 << 3 | 0) | 0) >> 3] = $25;
    $6 = $6 + -1 | 0;
    $2 = ($9 | 0) != ($11 | 0);
    $9 = $9 + 1 | 0;
    if ($2) {
     continue label$52
    }
    break label$52;
   };
  }
  label$54 : {
   if ($4 >>> 0 > 3 >>> 0) {
    break label$54
   }
   label$55 : {
    label$56 : {
     switch ($4 | 0) {
     case 3:
      $27 = 0.0;
      label$59 : {
       if (($11 | 0) < (1 | 0)) {
        break label$59
       }
       $0 = ($5 + 160 | 0) + ($11 << 3 | 0) | 0;
       $25 = +HEAPF64[$0 >> 3];
       $2 = $11;
       label$60 : while (1) {
        $3 = $2 + -1 | 0;
        $6 = ($5 + 160 | 0) + ($3 << 3 | 0) | 0;
        $26 = +HEAPF64[$6 >> 3];
        $546 = $26;
        $26 = $26 + $25;
        HEAPF64[(($5 + 160 | 0) + ($2 << 3 | 0) | 0) >> 3] = $25 + ($546 - $26);
        HEAPF64[$6 >> 3] = $26;
        $6 = ($2 | 0) > (1 | 0);
        $25 = $26;
        $2 = $3;
        if ($6) {
         continue label$60
        }
        break label$60;
       };
       if (($11 | 0) < (2 | 0)) {
        break label$59
       }
       $25 = +HEAPF64[$0 >> 3];
       $2 = $11;
       label$61 : while (1) {
        $3 = $2 + -1 | 0;
        $6 = ($5 + 160 | 0) + ($3 << 3 | 0) | 0;
        $26 = +HEAPF64[$6 >> 3];
        $580 = $26;
        $26 = $26 + $25;
        HEAPF64[(($5 + 160 | 0) + ($2 << 3 | 0) | 0) >> 3] = $25 + ($580 - $26);
        HEAPF64[$6 >> 3] = $26;
        $6 = ($2 | 0) > (2 | 0);
        $25 = $26;
        $2 = $3;
        if ($6) {
         continue label$61
        }
        break label$61;
       };
       $27 = 0.0;
       label$62 : while (1) {
        $27 = $27 + +HEAPF64[(($5 + 160 | 0) + ($11 << 3 | 0) | 0) >> 3];
        $2 = ($11 | 0) > (2 | 0);
        $11 = $11 + -1 | 0;
        if ($2) {
         continue label$62
        }
        break label$62;
       };
      }
      $25 = +HEAPF64[($5 + 160 | 0) >> 3];
      if ($20) {
       break label$55
      }
      HEAPF64[$1 >> 3] = $25;
      i64toi32_i32$0 = HEAP32[($5 + 168 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($5 + 172 | 0) >> 2] | 0;
      HEAPF64[($1 + 16 | 0) >> 3] = $27;
      $617 = i64toi32_i32$0;
      i64toi32_i32$0 = $1;
      HEAP32[($1 + 8 | 0) >> 2] = $617;
      HEAP32[($1 + 12 | 0) >> 2] = i64toi32_i32$1;
      break label$54;
     default:
      $25 = 0.0;
      label$63 : {
       if (($11 | 0) < (0 | 0)) {
        break label$63
       }
       label$64 : while (1) {
        $25 = $25 + +HEAPF64[(($5 + 160 | 0) + ($11 << 3 | 0) | 0) >> 3];
        $2 = ($11 | 0) > (0 | 0);
        $11 = $11 + -1 | 0;
        if ($2) {
         continue label$64
        }
        break label$64;
       };
      }
      HEAPF64[$1 >> 3] = $20 ? -$25 : $25;
      break label$54;
     case 1:
     case 2:
      break label$56;
     };
    }
    $25 = 0.0;
    label$65 : {
     if (($11 | 0) < (0 | 0)) {
      break label$65
     }
     $2 = $11;
     label$66 : while (1) {
      $25 = $25 + +HEAPF64[(($5 + 160 | 0) + ($2 << 3 | 0) | 0) >> 3];
      $3 = ($2 | 0) > (0 | 0);
      $2 = $2 + -1 | 0;
      if ($3) {
       continue label$66
      }
      break label$66;
     };
    }
    HEAPF64[$1 >> 3] = $20 ? -$25 : $25;
    $25 = +HEAPF64[($5 + 160 | 0) >> 3] - $25;
    $2 = 1;
    label$67 : {
     if (($11 | 0) < (1 | 0)) {
      break label$67
     }
     label$68 : while (1) {
      $25 = $25 + +HEAPF64[(($5 + 160 | 0) + ($2 << 3 | 0) | 0) >> 3];
      $3 = ($2 | 0) != ($11 | 0);
      $2 = $2 + 1 | 0;
      if ($3) {
       continue label$68
      }
      break label$68;
     };
    }
    HEAPF64[($1 + 8 | 0) >> 3] = $20 ? -$25 : $25;
    break label$54;
   }
   HEAPF64[$1 >> 3] = -$25;
   $25 = +HEAPF64[($5 + 168 | 0) >> 3];
   HEAPF64[($1 + 16 | 0) >> 3] = -$27;
   HEAPF64[($1 + 8 | 0) >> 3] = -$25;
  }
  label$69 : {
   $23 = $5 + 560 | 0;
   if ($23 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $23;
  }
  return $18 & 7 | 0 | 0;
 }
 
 function __rem_pio2($0, $1) {
  $0 = +$0;
  $1 = $1 | 0;
  var $10 = 0.0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, $4 = 0, i64toi32_i32$4 = 0, $3 = 0, $2 = 0, $11 = 0.0, $9 = 0, $5 = 0, $9$hi = 0, $12 = 0.0, $13 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $6 = 0, $38 = 0, $39 = 0, $40 = 0, $8 = 0, $7 = 0, $158 = 0, $191 = 0, $299 = 0;
  label$1 : {
   $2 = global$0 - 48 | 0;
   $7 = $2;
   if ($2 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $7;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      wasm2js_scratch_store_f64(+$0);
      i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
      $9 = wasm2js_scratch_load_i32(0 | 0) | 0;
      $9$hi = i64toi32_i32$0;
      i64toi32_i32$2 = $9;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $23 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       $23 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
      }
      $3 = $23;
      $4 = $3 & 2147483647 | 0;
      if ($4 >>> 0 > 1074752122 >>> 0) {
       break label$6
      }
      if (($3 & 1048575 | 0 | 0) == (598523 | 0)) {
       break label$5
      }
      label$7 : {
       if ($4 >>> 0 > 1073928572 >>> 0) {
        break label$7
       }
       label$8 : {
        i64toi32_i32$1 = $9$hi;
        i64toi32_i32$0 = $9;
        i64toi32_i32$2 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
         $24 = 1
        } else {
         if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
          if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
           $25 = 0
          } else {
           $25 = 1
          }
          $26 = $25;
         } else {
          $26 = 0
         }
         $24 = $26;
        }
        if ($24) {
         break label$8
        }
        $0 = $0 + -1.5707963267341256;
        $10 = $0 + -6.077100506506192e-11;
        HEAPF64[$1 >> 3] = $10;
        HEAPF64[($1 + 8 | 0) >> 3] = $0 - $10 + -6.077100506506192e-11;
        $4 = 1;
        break label$3;
       }
       $0 = $0 + 1.5707963267341256;
       $10 = $0 + 6.077100506506192e-11;
       HEAPF64[$1 >> 3] = $10;
       HEAPF64[($1 + 8 | 0) >> 3] = $0 - $10 + 6.077100506506192e-11;
       $4 = -1;
       break label$3;
      }
      label$9 : {
       i64toi32_i32$0 = $9$hi;
       i64toi32_i32$3 = $9;
       i64toi32_i32$1 = 0;
       i64toi32_i32$2 = 0;
       if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
        $27 = 1
       } else {
        if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
         if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$2 >>> 0) {
          $28 = 0
         } else {
          $28 = 1
         }
         $29 = $28;
        } else {
         $29 = 0
        }
        $27 = $29;
       }
       if ($27) {
        break label$9
       }
       $0 = $0 + -3.1415926534682512;
       $10 = $0 + -1.2154201013012384e-10;
       HEAPF64[$1 >> 3] = $10;
       HEAPF64[($1 + 8 | 0) >> 3] = $0 - $10 + -1.2154201013012384e-10;
       $4 = 2;
       break label$3;
      }
      $0 = $0 + 3.1415926534682512;
      $10 = $0 + 1.2154201013012384e-10;
      HEAPF64[$1 >> 3] = $10;
      HEAPF64[($1 + 8 | 0) >> 3] = $0 - $10 + 1.2154201013012384e-10;
      $4 = -2;
      break label$3;
     }
     label$10 : {
      if ($4 >>> 0 > 1075594811 >>> 0) {
       break label$10
      }
      label$11 : {
       if ($4 >>> 0 > 1075183036 >>> 0) {
        break label$11
       }
       if (($4 | 0) == (1074977148 | 0)) {
        break label$5
       }
       label$12 : {
        i64toi32_i32$3 = $9$hi;
        i64toi32_i32$2 = $9;
        i64toi32_i32$0 = 0;
        i64toi32_i32$1 = 0;
        if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
         $30 = 1
        } else {
         if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
          if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
           $31 = 0
          } else {
           $31 = 1
          }
          $32 = $31;
         } else {
          $32 = 0
         }
         $30 = $32;
        }
        if ($30) {
         break label$12
        }
        $0 = $0 + -4.712388980202377;
        $10 = $0 + -1.8231301519518578e-10;
        HEAPF64[$1 >> 3] = $10;
        HEAPF64[($1 + 8 | 0) >> 3] = $0 - $10 + -1.8231301519518578e-10;
        $4 = 3;
        break label$3;
       }
       $0 = $0 + 4.712388980202377;
       $10 = $0 + 1.8231301519518578e-10;
       HEAPF64[$1 >> 3] = $10;
       HEAPF64[($1 + 8 | 0) >> 3] = $0 - $10 + 1.8231301519518578e-10;
       $4 = -3;
       break label$3;
      }
      if (($4 | 0) == (1075388923 | 0)) {
       break label$5
      }
      label$13 : {
       i64toi32_i32$2 = $9$hi;
       i64toi32_i32$1 = $9;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 0;
       if ((i64toi32_i32$2 | 0) < (i64toi32_i32$3 | 0)) {
        $33 = 1
       } else {
        if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$3 | 0)) {
         if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$0 >>> 0) {
          $34 = 0
         } else {
          $34 = 1
         }
         $35 = $34;
        } else {
         $35 = 0
        }
        $33 = $35;
       }
       if ($33) {
        break label$13
       }
       $0 = $0 + -6.2831853069365025;
       $10 = $0 + -2.430840202602477e-10;
       HEAPF64[$1 >> 3] = $10;
       HEAPF64[($1 + 8 | 0) >> 3] = $0 - $10 + -2.430840202602477e-10;
       $4 = 4;
       break label$3;
      }
      $0 = $0 + 6.2831853069365025;
      $10 = $0 + 2.430840202602477e-10;
      HEAPF64[$1 >> 3] = $10;
      HEAPF64[($1 + 8 | 0) >> 3] = $0 - $10 + 2.430840202602477e-10;
      $4 = -4;
      break label$3;
     }
     if ($4 >>> 0 > 1094263290 >>> 0) {
      break label$4
     }
    }
    $10 = $0 * .6366197723675814 + 6755399441055744.0 + -6755399441055744.0;
    $11 = $0 + $10 * -1.5707963267341256;
    $12 = $10 * 6.077100506506192e-11;
    $0 = $11 - $12;
    HEAPF64[$1 >> 3] = $0;
    $5 = $4 >>> 20 | 0;
    $158 = $5;
    wasm2js_scratch_store_f64(+$0);
    i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 52;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $36 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $36 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $3 = ($158 - ($36 & 2047 | 0) | 0 | 0) < (17 | 0);
    label$14 : {
     label$15 : {
      if (!(Math_abs($10) < 2147483648.0)) {
       break label$15
      }
      $4 = ~~$10;
      break label$14;
     }
     $4 = -2147483648;
    }
    label$16 : {
     if ($3) {
      break label$16
     }
     $0 = $10 * 6.077100506303966e-11;
     $13 = $11 - $0;
     $12 = $10 * 2.0222662487959506e-21 - ($11 - $13 - $0);
     $0 = $13 - $12;
     HEAPF64[$1 >> 3] = $0;
     label$17 : {
      $191 = $5;
      wasm2js_scratch_store_f64(+$0);
      i64toi32_i32$2 = wasm2js_scratch_load_i32(1 | 0) | 0;
      i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 52;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $37 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $37 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      if (($191 - ($37 & 2047 | 0) | 0 | 0) >= (50 | 0)) {
       break label$17
      }
      $11 = $13;
      break label$16;
     }
     $0 = $10 * 2.0222662487111665e-21;
     $11 = $13 - $0;
     $12 = $10 * 8.4784276603689e-32 - ($13 - $11 - $0);
     $0 = $11 - $12;
     HEAPF64[$1 >> 3] = $0;
    }
    HEAPF64[($1 + 8 | 0) >> 3] = $11 - $0 - $12;
    break label$3;
   }
   label$18 : {
    if ($4 >>> 0 < 2146435072 >>> 0) {
     break label$18
    }
    $0 = $0 - $0;
    HEAPF64[$1 >> 3] = $0;
    HEAPF64[($1 + 8 | 0) >> 3] = $0;
    $4 = 0;
    break label$3;
   }
   i64toi32_i32$0 = $9$hi;
   i64toi32_i32$2 = $9;
   i64toi32_i32$1 = 1048575;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   i64toi32_i32$2 = 1096810496;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$2 | 0);
   $0 = +wasm2js_scratch_load_f64();
   $3 = 0;
   label$19 : while (1) {
    $5 = $3;
    $3 = ($2 + 16 | 0) + ($3 << 3 | 0) | 0;
    label$20 : {
     label$21 : {
      if (!(Math_abs($0) < 2147483648.0)) {
       break label$21
      }
      $6 = ~~$0;
      break label$20;
     }
     $6 = -2147483648;
    }
    $10 = +($6 | 0);
    HEAPF64[$3 >> 3] = $10;
    $0 = ($0 - $10) * 16777216.0;
    $3 = 1;
    if (!$5) {
     continue label$19
    }
    break label$19;
   };
   HEAPF64[($2 + 32 | 0) >> 3] = $0;
   label$22 : {
    label$23 : {
     if ($0 == 0.0) {
      break label$23
     }
     $3 = 2;
     break label$22;
    }
    $5 = 1;
    label$24 : while (1) {
     $3 = $5;
     $5 = $3 + -1 | 0;
     if (+HEAPF64[(($2 + 16 | 0) + ($3 << 3 | 0) | 0) >> 3] == 0.0) {
      continue label$24
     }
     break label$24;
    };
   }
   $4 = __rem_pio2_large($2 + 16 | 0 | 0, $2 | 0, ($4 >>> 20 | 0) + -1046 | 0 | 0, $3 + 1 | 0 | 0, 1 | 0) | 0;
   $0 = +HEAPF64[$2 >> 3];
   label$25 : {
    i64toi32_i32$2 = $9$hi;
    i64toi32_i32$1 = $9;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$0 | 0)) {
     $38 = 1
    } else {
     if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $39 = 0
      } else {
       $39 = 1
      }
      $40 = $39;
     } else {
      $40 = 0
     }
     $38 = $40;
    }
    if ($38) {
     break label$25
    }
    HEAPF64[$1 >> 3] = -$0;
    HEAPF64[($1 + 8 | 0) >> 3] = -+HEAPF64[($2 + 8 | 0) >> 3];
    $4 = 0 - $4 | 0;
    break label$3;
   }
   HEAPF64[$1 >> 3] = $0;
   i64toi32_i32$3 = $2;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
   $299 = i64toi32_i32$1;
   i64toi32_i32$1 = $1;
   HEAP32[($1 + 8 | 0) >> 2] = $299;
   HEAP32[($1 + 12 | 0) >> 2] = i64toi32_i32$2;
  }
  label$26 : {
   $8 = $2 + 48 | 0;
   if ($8 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $8;
  }
  return $4 | 0;
 }
 
 function __sin($0, $1, $2) {
  $0 = +$0;
  $1 = +$1;
  $2 = $2 | 0;
  var $3 = 0.0, $5 = 0.0, $4 = 0.0;
  $3 = $0 * $0;
  $4 = $3 * ($3 * $3) * ($3 * 1.58969099521155e-10 + -2.5050760253406863e-08) + ($3 * ($3 * 2.7557313707070068e-06 + -1.984126982985795e-04) + .00833333333332249);
  $5 = $3 * $0;
  label$1 : {
   if ($2) {
    break label$1
   }
   return +($5 * ($3 * $4 + -.16666666666666632) + $0);
  }
  return +($0 - ($3 * ($1 * .5 - $5 * $4) - $1 + $5 * .16666666666666632));
 }
 
 function cos($0) {
  $0 = +$0;
  var $1 = 0, $5 = 0.0, $2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $10 = 0, $4 = 0, $3 = 0, i64toi32_i32$2 = 0;
  label$1 : {
   $1 = global$0 - 16 | 0;
   $3 = $1;
   if ($1 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $3;
  }
  label$3 : {
   label$4 : {
    wasm2js_scratch_store_f64(+$0);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     $10 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0
    } else {
     $10 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0
    }
    $2 = $10 & 2147483647 | 0;
    if ($2 >>> 0 > 1072243195 >>> 0) {
     break label$4
    }
    $5 = 1.0;
    if ($2 >>> 0 < 1044816030 >>> 0) {
     break label$3
    }
    $5 = +__cos(+$0, +(0.0));
    break label$3;
   }
   label$5 : {
    if ($2 >>> 0 < 2146435072 >>> 0) {
     break label$5
    }
    $5 = $0 - $0;
    break label$3;
   }
   label$6 : {
    $2 = (__rem_pio2(+$0, $1 | 0) | 0) & 3 | 0;
    if ($2 >>> 0 > 2 >>> 0) {
     break label$6
    }
    label$7 : {
     switch ($2 | 0) {
     default:
      $5 = +__cos(+(+HEAPF64[$1 >> 3]), +(+HEAPF64[($1 + 8 | 0) >> 3]));
      break label$3;
     case 1:
      $5 = -+__sin(+(+HEAPF64[$1 >> 3]), +(+HEAPF64[($1 + 8 | 0) >> 3]), 1 | 0);
      break label$3;
     case 2:
      break label$7;
     };
    }
    $5 = -+__cos(+(+HEAPF64[$1 >> 3]), +(+HEAPF64[($1 + 8 | 0) >> 3]));
    break label$3;
   }
   $5 = +__sin(+(+HEAPF64[$1 >> 3]), +(+HEAPF64[($1 + 8 | 0) >> 3]), 1 | 0);
  }
  label$10 : {
   $4 = $1 + 16 | 0;
   if ($4 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $4;
  }
  return +$5;
 }
 
 function exp($0) {
  $0 = +$0;
  var $4 = 0.0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $6 = 0.0, $3 = 0, $1 = 0, $5 = 0.0, $3$hi = 0, $13 = 0, $14 = 0;
  wasm2js_scratch_store_f64(+$0);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  $3 = wasm2js_scratch_load_i32(0 | 0) | 0;
  $3$hi = i64toi32_i32$0;
  i64toi32_i32$2 = $3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $13 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $13 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $1 = $13;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          i64toi32_i32$1 = $3$hi;
          i64toi32_i32$0 = $3;
          i64toi32_i32$2 = 0;
          i64toi32_i32$3 = 32;
          i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
           i64toi32_i32$2 = 0;
           $14 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
          } else {
           i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
           $14 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
          }
          $2 = $14 & 2147483647 | 0;
          if ($2 >>> 0 < 1082532651 >>> 0) {
           break label$8
          }
          label$9 : {
           i64toi32_i32$2 = $3$hi;
           i64toi32_i32$1 = $3;
           i64toi32_i32$0 = 2147483647;
           i64toi32_i32$3 = -1;
           i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
           i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
           i64toi32_i32$1 = 2146435072;
           i64toi32_i32$3 = 0;
           if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0 | 0) | 0) {
            break label$9
           }
           return +$0;
          }
          label$10 : {
           if ($0 > 709.782712893384 ^ 1 | 0) {
            break label$10
           }
           return +($0 * 8988465674311579538646525.0e283);
          }
          if ($0 < -708.3964185322641 ^ 1 | 0) {
           break label$7
          }
          $4 = 0.0;
          if (!($0 < -745.1332191019411)) {
           break label$7
          }
          break label$2;
         }
         if ($2 >>> 0 < 1071001155 >>> 0) {
          break label$4
         }
         if ($2 >>> 0 < 1072734898 >>> 0) {
          break label$6
         }
        }
        label$11 : {
         $4 = $0 * 1.4426950408889634 + +HEAPF64[(($1 << 3 | 0) + 10432 | 0) >> 3];
         if (!(Math_abs($4) < 2147483648.0)) {
          break label$11
         }
         $2 = ~~$4;
         break label$5;
        }
        $2 = -2147483648;
        break label$5;
       }
       $2 = ($1 ^ 1 | 0) - $1 | 0;
      }
      $4 = +($2 | 0);
      $0 = $0 + $4 * -.6931471803691238;
      $5 = $4 * 1.9082149292705877e-10;
      $6 = $0 - $5;
      break label$3;
     }
     if ($2 >>> 0 <= 1043333120 >>> 0) {
      break label$1
     }
     $2 = 0;
     $5 = 0.0;
     $6 = $0;
    }
    $4 = $6 * $6;
    $4 = $6 - $4 * ($4 * ($4 * ($4 * ($4 * 4.1381367970572385e-08 + -1.6533902205465252e-06) + 6.613756321437934e-05) + -2.7777777777015593e-03) + .16666666666666602);
    $4 = $0 + ($6 * $4 / (2.0 - $4) - $5) + 1.0;
    if (!$2) {
     break label$2
    }
    $4 = +scalbn(+$4, $2 | 0);
   }
   return +$4;
  }
  return +($0 + 1.0);
 }
 
 function FLAC__window_bartlett($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $5 = 0, $8 = Math_fround(0), $4 = 0, $7 = Math_fround(0), $2 = 0, $3 = 0, $6 = 0;
  $2 = $1 + -1 | 0;
  label$1 : {
   label$2 : {
    if (!($1 & 1 | 0)) {
     break label$2
    }
    $3 = ($2 | 0) / (2 | 0) | 0;
    $4 = 0;
    label$3 : {
     if (($1 | 0) < (0 | 0)) {
      break label$3
     }
     $5 = 0;
     $6 = ($3 | 0) > (0 | 0) ? $3 : 0;
     $4 = $6 + 1 | 0;
     $7 = Math_fround($2 | 0);
     label$4 : while (1) {
      $8 = Math_fround($5 | 0);
      HEAPF32[($0 + ($5 << 2 | 0) | 0) >> 2] = Math_fround(Math_fround($8 + $8) / $7);
      $3 = ($5 | 0) == ($6 | 0);
      $5 = $5 + 1 | 0;
      if (!$3) {
       continue label$4
      }
      break label$4;
     };
    }
    if (($4 | 0) >= ($1 | 0)) {
     break label$1
    }
    $7 = Math_fround($2 | 0);
    label$5 : while (1) {
     $8 = Math_fround($4 | 0);
     HEAPF32[($0 + ($4 << 2 | 0) | 0) >> 2] = Math_fround(Math_fround(2.0) - Math_fround(Math_fround($8 + $8) / $7));
     $4 = $4 + 1 | 0;
     if (($4 | 0) != ($1 | 0)) {
      continue label$5
     }
     break label$1;
    };
   }
   $4 = ($1 | 0) / (2 | 0) | 0;
   $5 = 0;
   label$6 : {
    if (($1 | 0) < (2 | 0)) {
     break label$6
    }
    $7 = Math_fround($2 | 0);
    $5 = 0;
    label$7 : while (1) {
     $8 = Math_fround($5 | 0);
     HEAPF32[($0 + ($5 << 2 | 0) | 0) >> 2] = Math_fround(Math_fround($8 + $8) / $7);
     $5 = $5 + 1 | 0;
     if (($5 | 0) != ($4 | 0)) {
      continue label$7
     }
     break label$7;
    };
    $5 = $4;
   }
   if (($5 | 0) >= ($1 | 0)) {
    break label$1
   }
   $7 = Math_fround($2 | 0);
   label$8 : while (1) {
    $8 = Math_fround($5 | 0);
    HEAPF32[($0 + ($5 << 2 | 0) | 0) >> 2] = Math_fround(Math_fround(2.0) - Math_fround(Math_fround($8 + $8) / $7));
    $5 = $5 + 1 | 0;
    if (($5 | 0) != ($1 | 0)) {
     continue label$8
    }
    break label$8;
   };
  }
 }
 
 function FLAC__window_bartlett_hann($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $4 = Math_fround(0), $3 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  label$1 : {
   if (($1 | 0) < (1 | 0)) {
    break label$1
   }
   $3 = Math_fround($1 + -1 | 0 | 0);
   $2 = 0;
   label$2 : while (1) {
    $4 = Math_fround(Math_fround($2 | 0) / $3);
    (wasm2js_i32$0 = $0 + ($2 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+Math_fround(Math_abs(Math_fround($4 + Math_fround(-.5)))) * -.47999998927116394 + .6200000047683716 + +cos(+(+$4 * 6.283185307179586)) * -.3799999952316284)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $2 = $2 + 1 | 0;
    if (($2 | 0) != ($1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function FLAC__window_blackman($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0.0, $4 = 0.0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  label$1 : {
   if (($1 | 0) < (1 | 0)) {
    break label$1
   }
   $3 = +($1 + -1 | 0 | 0);
   $2 = 0;
   label$2 : while (1) {
    $4 = +($2 | 0);
    (wasm2js_i32$0 = $0 + ($2 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+cos(+($4 * 12.566370614359172 / $3)) * .07999999821186066 + (+cos(+($4 * 6.283185307179586 / $3)) * -.5 + .41999998688697815))), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $2 = $2 + 1 | 0;
    if (($2 | 0) != ($1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function FLAC__window_blackman_harris_4term_92db_sidelobe($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0.0, $4 = 0.0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  label$1 : {
   if (($1 | 0) < (1 | 0)) {
    break label$1
   }
   $3 = +($1 + -1 | 0 | 0);
   $2 = 0;
   label$2 : while (1) {
    $4 = +($2 | 0);
    (wasm2js_i32$0 = $0 + ($2 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+cos(+($4 * 12.566370614359172 / $3)) * .14127999544143677 + (+cos(+($4 * 6.283185307179586 / $3)) * -.488290011882782 + .35874998569488525) + +cos(+($4 * 18.84955592153876 / $3)) * -.011680000461637974)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $2 = $2 + 1 | 0;
    if (($2 | 0) != ($1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function FLAC__window_connes($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $4 = 0.0, $3 = 0.0;
  label$1 : {
   if (($1 | 0) < (1 | 0)) {
    break label$1
   }
   $3 = +($1 + -1 | 0 | 0) * .5;
   $2 = 0;
   label$2 : while (1) {
    $4 = (+($2 | 0) - $3) / $3;
    $4 = 1.0 - $4 * $4;
    HEAPF32[($0 + ($2 << 2 | 0) | 0) >> 2] = Math_fround($4 * $4);
    $2 = $2 + 1 | 0;
    if (($2 | 0) != ($1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function FLAC__window_flattop($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  label$1 : {
   if (($1 | 0) < (1 | 0)) {
    break label$1
   }
   $3 = +($1 + -1 | 0 | 0);
   $2 = 0;
   label$2 : while (1) {
    $4 = +($2 | 0);
    $5 = +cos(+($4 * 12.566370614359172 / $3));
    $6 = +cos(+($4 * 6.283185307179586 / $3));
    $7 = +cos(+($4 * 18.84955592153876 / $3));
    (wasm2js_i32$0 = $0 + ($2 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+cos(+($4 * 25.132741228718345 / $3)) * 6.9473679177463055e-03 + ($5 * .27726316452026367 + ($6 * -.4166315793991089 + .21557894349098206) + $7 * -.08357894420623779))), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $2 = $2 + 1 | 0;
    if (($2 | 0) != ($1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function FLAC__window_gauss($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  var $3 = 0, $4 = 0.0, $6 = 0.0, $5 = 0.0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  label$1 : {
   if (($1 | 0) < (1 | 0)) {
    break label$1
   }
   $4 = +($1 + -1 | 0 | 0) * .5;
   $5 = $4 * +$2;
   $3 = 0;
   label$2 : while (1) {
    $6 = (+($3 | 0) - $4) / $5;
    (wasm2js_i32$0 = $0 + ($3 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+exp(+($6 * ($6 * -.5))))), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $3 = $3 + 1 | 0;
    if (($3 | 0) != ($1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function FLAC__window_hamming($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0.0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  label$1 : {
   if (($1 | 0) < (1 | 0)) {
    break label$1
   }
   $3 = +($1 + -1 | 0 | 0);
   $2 = 0;
   label$2 : while (1) {
    (wasm2js_i32$0 = $0 + ($2 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+cos(+(+($2 | 0) * 6.283185307179586 / $3)) * -.46000000834465027 + .5400000214576721)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $2 = $2 + 1 | 0;
    if (($2 | 0) != ($1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function FLAC__window_hann($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0.0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  label$1 : {
   if (($1 | 0) < (1 | 0)) {
    break label$1
   }
   $3 = +($1 + -1 | 0 | 0);
   $2 = 0;
   label$2 : while (1) {
    (wasm2js_i32$0 = $0 + ($2 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(.5 - +cos(+(+($2 | 0) * 6.283185307179586 / $3)) * .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $2 = $2 + 1 | 0;
    if (($2 | 0) != ($1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function FLAC__window_kaiser_bessel($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0.0, $4 = 0.0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  label$1 : {
   if (($1 | 0) < (1 | 0)) {
    break label$1
   }
   $3 = +($1 + -1 | 0 | 0);
   $2 = 0;
   label$2 : while (1) {
    $4 = +($2 | 0);
    (wasm2js_i32$0 = $0 + ($2 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+cos(+($4 * 12.566370614359172 / $3)) * .09799999743700027 + (+cos(+($4 * 6.283185307179586 / $3)) * -.49799999594688416 + .4020000100135803) + +cos(+($4 * 18.84955592153876 / $3)) * -1.0000000474974513e-03)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $2 = $2 + 1 | 0;
    if (($2 | 0) != ($1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function FLAC__window_nuttall($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0.0, $4 = 0.0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  label$1 : {
   if (($1 | 0) < (1 | 0)) {
    break label$1
   }
   $3 = +($1 + -1 | 0 | 0);
   $2 = 0;
   label$2 : while (1) {
    $4 = +($2 | 0);
    (wasm2js_i32$0 = $0 + ($2 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+cos(+($4 * 12.566370614359172 / $3)) * .13659949600696564 + (+cos(+($4 * 6.283185307179586 / $3)) * -.48917749524116516 + .36358189582824707) + +cos(+($4 * 18.84955592153876 / $3)) * -.010641099885106087)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $2 = $2 + 1 | 0;
    if (($2 | 0) != ($1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function FLAC__window_rectangle($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  label$1 : {
   if (($1 | 0) < (1 | 0)) {
    break label$1
   }
   $2 = 0;
   label$2 : while (1) {
    HEAP32[($0 + ($2 << 2 | 0) | 0) >> 2] = 1065353216;
    $2 = $2 + 1 | 0;
    if (($2 | 0) != ($1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function FLAC__window_triangle($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0, $7 = Math_fround(0), $4 = 0, $6 = Math_fround(0), $5 = 0;
  $2 = 1;
  label$1 : {
   label$2 : {
    if (!($1 & 1 | 0)) {
     break label$2
    }
    $3 = ($1 + 1 | 0 | 0) / (2 | 0) | 0;
    label$3 : {
     if (($1 | 0) < (1 | 0)) {
      break label$3
     }
     $6 = Math_fround(Math_fround($1 | 0) + Math_fround(1.0));
     $4 = ($3 | 0) > (1 | 0) ? $3 : 1;
     $2 = $4 + 1 | 0;
     $3 = 1;
     label$4 : while (1) {
      $7 = Math_fround($3 | 0);
      HEAPF32[((($3 << 2 | 0) + $0 | 0) + -4 | 0) >> 2] = Math_fround(Math_fround($7 + $7) / $6);
      $5 = ($3 | 0) == ($4 | 0);
      $3 = $3 + 1 | 0;
      if (!$5) {
       continue label$4
      }
      break label$4;
     };
    }
    if (($2 | 0) > ($1 | 0)) {
     break label$1
    }
    $7 = Math_fround(Math_fround($1 | 0) + Math_fround(1.0));
    label$5 : while (1) {
     HEAPF32[((($2 << 2 | 0) + $0 | 0) + -4 | 0) >> 2] = Math_fround(Math_fround((($1 - $2 | 0) << 1 | 0) + 2 | 0 | 0) / $7);
     $3 = ($1 | 0) == ($2 | 0);
     $2 = $2 + 1 | 0;
     if (!$3) {
      continue label$5
     }
     break label$1;
    };
   }
   $3 = 1;
   label$6 : {
    if (($1 | 0) < (2 | 0)) {
     break label$6
    }
    $4 = $1 >>> 1 | 0;
    $3 = $4 + 1 | 0;
    $6 = Math_fround(Math_fround($1 | 0) + Math_fround(1.0));
    $2 = 1;
    label$7 : while (1) {
     $7 = Math_fround($2 | 0);
     HEAPF32[((($2 << 2 | 0) + $0 | 0) + -4 | 0) >> 2] = Math_fround(Math_fround($7 + $7) / $6);
     $5 = ($2 | 0) == ($4 | 0);
     $2 = $2 + 1 | 0;
     if (!$5) {
      continue label$7
     }
     break label$7;
    };
   }
   if (($3 | 0) > ($1 | 0)) {
    break label$1
   }
   $7 = Math_fround(Math_fround($1 | 0) + Math_fround(1.0));
   label$8 : while (1) {
    HEAPF32[((($3 << 2 | 0) + $0 | 0) + -4 | 0) >> 2] = Math_fround(Math_fround((($1 - $3 | 0) << 1 | 0) + 2 | 0 | 0) / $7);
    $2 = ($1 | 0) != ($3 | 0);
    $3 = $3 + 1 | 0;
    if ($2) {
     continue label$8
    }
    break label$8;
   };
  }
 }
 
 function FLAC__window_tukey($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  var $3 = 0, $4 = 0, $6 = 0.0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  label$1 : {
   label$2 : {
    if ($2 <= Math_fround(0.0) ^ 1 | 0) {
     break label$2
    }
    if (($1 | 0) < (1 | 0)) {
     break label$1
    }
    $3 = 0;
    label$3 : while (1) {
     HEAP32[($0 + ($3 << 2 | 0) | 0) >> 2] = 1065353216;
     $3 = $3 + 1 | 0;
     if (($3 | 0) != ($1 | 0)) {
      continue label$3
     }
     break label$1;
    };
   }
   label$4 : {
    if ($2 >= Math_fround(1.0) ^ 1 | 0) {
     break label$4
    }
    if (($1 | 0) < (1 | 0)) {
     break label$1
    }
    $6 = +($1 + -1 | 0 | 0);
    $3 = 0;
    label$5 : while (1) {
     (wasm2js_i32$0 = $0 + ($3 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(.5 - +cos(+(+($3 | 0) * 6.283185307179586 / $6)) * .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
     $3 = $3 + 1 | 0;
     if (($3 | 0) != ($1 | 0)) {
      continue label$5
     }
     break label$1;
    };
   }
   label$6 : {
    label$7 : {
     $2 = Math_fround(Math_fround($2 * Math_fround(.5)) * Math_fround($1 | 0));
     if (!(Math_fround(Math_abs($2)) < Math_fround(2147483648.0))) {
      break label$7
     }
     $4 = ~~$2;
     break label$6;
    }
    $4 = -2147483648;
   }
   label$8 : {
    if (($1 | 0) < (1 | 0)) {
     break label$8
    }
    $3 = 0;
    label$9 : while (1) {
     HEAP32[($0 + ($3 << 2 | 0) | 0) >> 2] = 1065353216;
     $3 = $3 + 1 | 0;
     if (($3 | 0) != ($1 | 0)) {
      continue label$9
     }
     break label$9;
    };
   }
   if (($4 | 0) < (2 | 0)) {
    break label$1
   }
   $1 = $1 - $4 | 0;
   $5 = $4 + -1 | 0;
   $6 = +($5 | 0);
   $3 = 0;
   label$10 : while (1) {
    (wasm2js_i32$0 = $0 + ($3 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(.5 - +cos(+(+($3 | 0) * 3.141592653589793 / $6)) * .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    (wasm2js_i32$0 = $0 + (($1 + $3 | 0) << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(.5 - +cos(+(+($3 + $5 | 0 | 0) * 3.141592653589793 / $6)) * .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $3 = $3 + 1 | 0;
    if (($3 | 0) != ($4 | 0)) {
     continue label$10
    }
    break label$10;
   };
  }
 }
 
 function FLAC__window_partial_tukey($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = Math_fround($3);
  $4 = Math_fround($4);
  var $8 = 0, $9 = 0, $7 = 0, $10 = 0, $5 = 0, $6 = 0, $12 = Math_fround(0), $11 = 0, $13 = 0.0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  label$1 : while (1) {
   $12 = $2;
   $2 = Math_fround(.05000000074505806);
   if ($12 <= Math_fround(0.0)) {
    continue label$1
   }
   $2 = Math_fround(.949999988079071);
   if ($12 >= Math_fround(1.0)) {
    continue label$1
   }
   break label$1;
  };
  label$2 : {
   label$3 : {
    $2 = Math_fround($1 | 0);
    $3 = Math_fround($2 * $3);
    if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
     break label$3
    }
    $5 = ~~$3;
    break label$2;
   }
   $5 = -2147483648;
  }
  label$4 : {
   label$5 : {
    $2 = Math_fround($2 * $4);
    if (!(Math_fround(Math_abs($2)) < Math_fround(2147483648.0))) {
     break label$5
    }
    $6 = ~~$2;
    break label$4;
   }
   $6 = -2147483648;
  }
  label$6 : {
   label$7 : {
    $2 = Math_fround(Math_fround($12 * Math_fround(.5)) * Math_fround($6 - $5 | 0 | 0));
    if (!(Math_fround(Math_abs($2)) < Math_fround(2147483648.0))) {
     break label$7
    }
    $7 = ~~$2;
    break label$6;
   }
   $7 = -2147483648;
  }
  $8 = 0;
  label$8 : {
   if (($5 | 0) < (1 | 0)) {
    break label$8
   }
   if (($1 | 0) < (1 | 0)) {
    break label$8
   }
   $9 = 0;
   $8 = $5 + -1 | 0;
   $10 = $1 + -1 | 0;
   $11 = $8 >>> 0 < $10 >>> 0 ? $8 : $10;
   memset($0 | 0, 0 | 0, ($11 << 2 | 0) + 4 | 0 | 0) | 0;
   $8 = $11 + 1 | 0;
   label$9 : while (1) {
    $10 = ($9 | 0) == ($11 | 0);
    $9 = $9 + 1 | 0;
    if (!$10) {
     continue label$9
    }
    break label$9;
   };
  }
  label$10 : {
   $10 = $7 + $5 | 0;
   if (($8 | 0) >= ($10 | 0)) {
    break label$10
   }
   if (($8 | 0) >= ($1 | 0)) {
    break label$10
   }
   $13 = +($7 | 0);
   $9 = 1;
   label$11 : while (1) {
    (wasm2js_i32$0 = $0 + ($8 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(.5 - +cos(+(+($9 | 0) * 3.141592653589793 / $13)) * .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $8 = $8 + 1 | 0;
    if (($8 | 0) >= ($10 | 0)) {
     break label$10
    }
    $9 = $9 + 1 | 0;
    if (($8 | 0) < ($1 | 0)) {
     continue label$11
    }
    break label$11;
   };
  }
  label$12 : {
   $9 = $6 - $7 | 0;
   if (($8 | 0) >= ($9 | 0)) {
    break label$12
   }
   if (($8 | 0) >= ($1 | 0)) {
    break label$12
   }
   label$13 : while (1) {
    HEAP32[($0 + ($8 << 2 | 0) | 0) >> 2] = 1065353216;
    $8 = $8 + 1 | 0;
    if (($8 | 0) >= ($9 | 0)) {
     break label$12
    }
    if (($8 | 0) < ($1 | 0)) {
     continue label$13
    }
    break label$13;
   };
  }
  label$14 : {
   if (($8 | 0) >= ($6 | 0)) {
    break label$14
   }
   if (($8 | 0) >= ($1 | 0)) {
    break label$14
   }
   $13 = +($7 | 0);
   label$15 : while (1) {
    (wasm2js_i32$0 = $0 + ($8 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(.5 - +cos(+(+($7 | 0) * 3.141592653589793 / $13)) * .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $8 = $8 + 1 | 0;
    if (($8 | 0) >= ($6 | 0)) {
     break label$14
    }
    $7 = $7 + -1 | 0;
    if (($8 | 0) < ($1 | 0)) {
     continue label$15
    }
    break label$15;
   };
  }
  label$16 : {
   if (($8 | 0) >= ($1 | 0)) {
    break label$16
   }
   memset($0 + ($8 << 2 | 0) | 0 | 0, 0 | 0, ($1 - $8 | 0) << 2 | 0 | 0) | 0;
  }
 }
 
 function FLAC__window_punchout_tukey($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = Math_fround($3);
  $4 = Math_fround($4);
  var $10 = 0, $6 = 0, $8 = 0, $12 = Math_fround(0), $9 = 0, $13 = 0.0, $7 = 0, $5 = 0, $11 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  label$1 : while (1) {
   $12 = $2;
   $2 = Math_fround(.05000000074505806);
   if ($12 <= Math_fround(0.0)) {
    continue label$1
   }
   $2 = Math_fround(.949999988079071);
   if ($12 >= Math_fround(1.0)) {
    continue label$1
   }
   break label$1;
  };
  $2 = Math_fround($12 * Math_fround(.5));
  label$2 : {
   label$3 : {
    $12 = Math_fround($1 | 0);
    $3 = Math_fround($12 * $3);
    if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
     break label$3
    }
    $5 = ~~$3;
    break label$2;
   }
   $5 = -2147483648;
  }
  label$4 : {
   label$5 : {
    $3 = Math_fround($2 * Math_fround($5 | 0));
    if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
     break label$5
    }
    $6 = ~~$3;
    break label$4;
   }
   $6 = -2147483648;
  }
  label$6 : {
   label$7 : {
    $12 = Math_fround($12 * $4);
    if (!(Math_fround(Math_abs($12)) < Math_fround(2147483648.0))) {
     break label$7
    }
    $7 = ~~$12;
    break label$6;
   }
   $7 = -2147483648;
  }
  $8 = ($6 | 0) < (1 | 0);
  label$8 : {
   label$9 : {
    $2 = Math_fround($2 * Math_fround($1 - $7 | 0 | 0));
    if (!(Math_fround(Math_abs($2)) < Math_fround(2147483648.0))) {
     break label$9
    }
    $9 = ~~$2;
    break label$8;
   }
   $9 = -2147483648;
  }
  $10 = 0;
  label$10 : {
   if ($8) {
    break label$10
   }
   if (($1 | 0) < (1 | 0)) {
    break label$10
   }
   $10 = ($6 + -1 | 0) >>> 0 < ($1 + -1 | 0) >>> 0 ? $6 : $1;
   $13 = +($6 | 0);
   $8 = 0;
   $11 = 1;
   label$11 : while (1) {
    (wasm2js_i32$0 = $0 + ($8 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(.5 - +cos(+(+($11 | 0) * 3.141592653589793 / $13)) * .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $11 = $11 + 1 | 0;
    $8 = $8 + 1 | 0;
    if (($8 | 0) != ($10 | 0)) {
     continue label$11
    }
    break label$11;
   };
  }
  label$12 : {
   $8 = $5 - $6 | 0;
   if (($10 | 0) >= ($8 | 0)) {
    break label$12
   }
   if (($10 | 0) >= ($1 | 0)) {
    break label$12
   }
   label$13 : while (1) {
    HEAP32[($0 + ($10 << 2 | 0) | 0) >> 2] = 1065353216;
    $10 = $10 + 1 | 0;
    if (($10 | 0) >= ($8 | 0)) {
     break label$12
    }
    if (($10 | 0) < ($1 | 0)) {
     continue label$13
    }
    break label$13;
   };
  }
  label$14 : {
   if (($10 | 0) >= ($5 | 0)) {
    break label$14
   }
   if (($10 | 0) >= ($1 | 0)) {
    break label$14
   }
   $13 = +($6 | 0);
   label$15 : while (1) {
    (wasm2js_i32$0 = $0 + ($10 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(.5 - +cos(+(+($6 | 0) * 3.141592653589793 / $13)) * .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $10 = $10 + 1 | 0;
    if (($10 | 0) >= ($5 | 0)) {
     break label$14
    }
    $6 = $6 + -1 | 0;
    if (($10 | 0) < ($1 | 0)) {
     continue label$15
    }
    break label$15;
   };
  }
  label$16 : {
   if (($10 | 0) >= ($7 | 0)) {
    break label$16
   }
   if (($10 | 0) >= ($1 | 0)) {
    break label$16
   }
   $6 = $10 ^ -1 | 0;
   $8 = $6 + $7 | 0;
   $6 = $6 + $1 | 0;
   memset($0 + ($10 << 2 | 0) | 0 | 0, 0 | 0, (($8 >>> 0 < $6 >>> 0 ? $8 : $6) << 2 | 0) + 4 | 0 | 0) | 0;
   label$17 : while (1) {
    $10 = $10 + 1 | 0;
    if (($10 | 0) >= ($7 | 0)) {
     break label$16
    }
    if (($10 | 0) < ($1 | 0)) {
     continue label$17
    }
    break label$17;
   };
  }
  label$18 : {
   $8 = $9 + $7 | 0;
   if (($10 | 0) >= ($8 | 0)) {
    break label$18
   }
   if (($10 | 0) >= ($1 | 0)) {
    break label$18
   }
   $13 = +($9 | 0);
   $6 = 1;
   label$19 : while (1) {
    (wasm2js_i32$0 = $0 + ($10 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(.5 - +cos(+(+($6 | 0) * 3.141592653589793 / $13)) * .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $10 = $10 + 1 | 0;
    if (($10 | 0) >= ($8 | 0)) {
     break label$18
    }
    $6 = $6 + 1 | 0;
    if (($10 | 0) < ($1 | 0)) {
     continue label$19
    }
    break label$19;
   };
  }
  label$20 : {
   $6 = $1 - $9 | 0;
   if (($10 | 0) >= ($6 | 0)) {
    break label$20
   }
   if (($10 | 0) >= ($1 | 0)) {
    break label$20
   }
   label$21 : while (1) {
    HEAP32[($0 + ($10 << 2 | 0) | 0) >> 2] = 1065353216;
    $10 = $10 + 1 | 0;
    if (($10 | 0) >= ($6 | 0)) {
     break label$20
    }
    if (($10 | 0) < ($1 | 0)) {
     continue label$21
    }
    break label$21;
   };
  }
  label$22 : {
   if (($10 | 0) >= ($1 | 0)) {
    break label$22
   }
   $13 = +($9 | 0);
   label$23 : while (1) {
    (wasm2js_i32$0 = $0 + ($10 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(.5 - +cos(+(+($9 | 0) * 3.141592653589793 / $13)) * .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $9 = $9 + -1 | 0;
    $10 = $10 + 1 | 0;
    if (($10 | 0) != ($1 | 0)) {
     continue label$23
    }
    break label$23;
   };
  }
 }
 
 function FLAC__window_welch($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0.0, $4 = 0.0;
  label$1 : {
   if (($1 | 0) < (1 | 0)) {
    break label$1
   }
   $3 = +($1 + -1 | 0 | 0) * .5;
   $2 = 0;
   label$2 : while (1) {
    $4 = (+($2 | 0) - $3) / $3;
    HEAPF32[($0 + ($2 << 2 | 0) | 0) >> 2] = Math_fround(1.0 - $4 * $4);
    $2 = $2 + 1 | 0;
    if (($2 | 0) != ($1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function FLAC__add_metadata_block($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4 = 0, $5 = 0, $16 = 0, $6 = 0, $7 = 0, $17 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
  $2 = global$12;
  $3 = strlen(HEAP32[global$58 >> 2] | 0 | 0) | 0;
  $4 = 0;
  label$1 : {
   if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[($0 + 4 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0) | 0)) {
    break label$1
   }
   if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[$0 >> 2] | 0 | 0, HEAP32[global$13 >> 2] | 0 | 0) | 0)) {
    break label$1
   }
   $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   label$2 : {
    if ((HEAP32[$0 >> 2] | 0 | 0) != (4 | 0)) {
     break label$2
    }
    $2 = ($2 + $3 | 0) - (HEAP32[($0 + 16 | 0) >> 2] | 0) | 0;
   }
   $5 = HEAP32[global$14 >> 2] | 0;
   if ($2 >>> $5 | 0) {
    break label$1
   }
   if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, $2 | 0, $5 | 0) | 0)) {
    break label$1
   }
   label$3 : {
    label$4 : {
     $2 = HEAP32[$0 >> 2] | 0;
     if ($2 >>> 0 > 6 >>> 0) {
      break label$4
     }
     label$5 : {
      label$6 : {
       label$7 : {
        label$8 : {
         label$9 : {
          switch ($2 | 0) {
          case 3:
           if (!(HEAP32[($0 + 16 | 0) >> 2] | 0)) {
            break label$3
           }
           $6 = HEAP32[global$23 >> 2] | 0;
           $7 = HEAP32[global$24 >> 2] | 0;
           $5 = HEAP32[global$25 >> 2] | 0;
           $4 = 0;
           $2 = 0;
           break label$8;
          default:
           if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[($0 + 16 | 0) >> 2] | 0 | 0, HEAP32[global$15 >> 2] | 0 | 0) | 0)) {
            break label$1
           }
           if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[($0 + 20 | 0) >> 2] | 0 | 0, HEAP32[global$16 >> 2] | 0 | 0) | 0)) {
            break label$1
           }
           if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[($0 + 24 | 0) >> 2] | 0 | 0, HEAP32[global$17 >> 2] | 0 | 0) | 0)) {
            break label$1
           }
           if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[($0 + 28 | 0) >> 2] | 0 | 0, HEAP32[global$18 >> 2] | 0 | 0) | 0)) {
            break label$1
           }
           if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[($0 + 32 | 0) >> 2] | 0 | 0, HEAP32[global$19 >> 2] | 0 | 0) | 0)) {
            break label$1
           }
           if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, (HEAP32[($0 + 36 | 0) >> 2] | 0) + -1 | 0 | 0, HEAP32[global$20 >> 2] | 0 | 0) | 0)) {
            break label$1
           }
           if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, (HEAP32[($0 + 40 | 0) >> 2] | 0) + -1 | 0 | 0, HEAP32[global$21 >> 2] | 0 | 0) | 0)) {
            break label$1
           }
           i64toi32_i32$2 = $0 + 48 | 0;
           i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
           i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
           if (!(FLAC__bitwriter_write_raw_uint64($1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, HEAP32[global$22 >> 2] | 0 | 0) | 0)) {
            break label$1
           }
           if (FLAC__bitwriter_write_byte_block($1 | 0, $0 + 56 | 0 | 0, 16 | 0) | 0) {
            break label$3
           }
           break label$1;
          case 1:
           if (FLAC__bitwriter_write_zeroes($1 | 0, (HEAP32[($0 + 8 | 0) >> 2] | 0) << 3 | 0 | 0) | 0) {
            break label$3
           }
           break label$1;
          case 6:
           break label$5;
          case 5:
           break label$6;
          case 4:
           break label$7;
          case 2:
           break label$9;
          };
         }
         $2 = (HEAP32[global$8 >> 2] | 0) >>> 3 | 0;
         if (!(FLAC__bitwriter_write_byte_block($1 | 0, $0 + 16 | 0 | 0, $2 | 0) | 0)) {
          break label$1
         }
         if (FLAC__bitwriter_write_byte_block($1 | 0, HEAP32[($0 + 20 | 0) >> 2] | 0 | 0, (HEAP32[($0 + 8 | 0) >> 2] | 0) - $2 | 0 | 0) | 0) {
          break label$3
         }
         break label$1;
        }
        label$13 : while (1) {
         $3 = Math_imul($2, 24);
         i64toi32_i32$2 = (HEAP32[($0 + 20 | 0) >> 2] | 0) + $3 | 0;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         if (!(FLAC__bitwriter_write_raw_uint64($1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, $5 | 0) | 0)) {
          break label$1
         }
         i64toi32_i32$2 = (HEAP32[($0 + 20 | 0) >> 2] | 0) + $3 | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
         if (!(FLAC__bitwriter_write_raw_uint64($1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $7 | 0) | 0)) {
          break label$1
         }
         if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[(((HEAP32[($0 + 20 | 0) >> 2] | 0) + $3 | 0) + 16 | 0) >> 2] | 0 | 0, $6 | 0) | 0)) {
          break label$1
         }
         $2 = $2 + 1 | 0;
         if ($2 >>> 0 >= (HEAP32[($0 + 16 | 0) >> 2] | 0) >>> 0) {
          break label$3
         }
         continue label$13;
        };
       }
       if (!(FLAC__bitwriter_write_raw_uint32_little_endian($1 | 0, $3 | 0) | 0)) {
        break label$1
       }
       if (!(FLAC__bitwriter_write_byte_block($1 | 0, HEAP32[global$58 >> 2] | 0 | 0, $3 | 0) | 0)) {
        break label$1
       }
       if (!(FLAC__bitwriter_write_raw_uint32_little_endian($1 | 0, HEAP32[($0 + 24 | 0) >> 2] | 0 | 0) | 0)) {
        break label$1
       }
       if (!(HEAP32[($0 + 24 | 0) >> 2] | 0)) {
        break label$3
       }
       $4 = 0;
       $2 = 0;
       label$14 : while (1) {
        $3 = $2 << 3 | 0;
        if (!(FLAC__bitwriter_write_raw_uint32_little_endian($1 | 0, HEAP32[((HEAP32[($0 + 28 | 0) >> 2] | 0) + $3 | 0) >> 2] | 0 | 0) | 0)) {
         break label$1
        }
        $3 = (HEAP32[($0 + 28 | 0) >> 2] | 0) + $3 | 0;
        if (!(FLAC__bitwriter_write_byte_block($1 | 0, HEAP32[($3 + 4 | 0) >> 2] | 0 | 0, HEAP32[$3 >> 2] | 0 | 0) | 0)) {
         break label$1
        }
        $2 = $2 + 1 | 0;
        if ($2 >>> 0 >= (HEAP32[($0 + 24 | 0) >> 2] | 0) >>> 0) {
         break label$3
        }
        continue label$14;
       };
      }
      if (!(FLAC__bitwriter_write_byte_block($1 | 0, $0 + 16 | 0 | 0, (HEAP32[global$26 >> 2] | 0) >>> 3 | 0 | 0) | 0)) {
       break label$1
      }
      i64toi32_i32$2 = $0 + 152 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      if (!(FLAC__bitwriter_write_raw_uint64($1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, HEAP32[global$27 >> 2] | 0 | 0) | 0)) {
       break label$1
      }
      $4 = 0;
      if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, (HEAP32[($0 + 160 | 0) >> 2] | 0 | 0) != (0 | 0) | 0, HEAP32[global$28 >> 2] | 0 | 0) | 0)) {
       break label$1
      }
      if (!(FLAC__bitwriter_write_zeroes($1 | 0, HEAP32[global$29 >> 2] | 0 | 0) | 0)) {
       break label$1
      }
      if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[($0 + 164 | 0) >> 2] | 0 | 0, HEAP32[global$30 >> 2] | 0 | 0) | 0)) {
       break label$1
      }
      if (!(HEAP32[($0 + 164 | 0) >> 2] | 0)) {
       break label$3
      }
      $8 = (HEAP32[global$31 >> 2] | 0) >>> 3 | 0;
      $9 = HEAP32[global$32 >> 2] | 0;
      $6 = HEAP32[global$33 >> 2] | 0;
      $5 = HEAP32[global$34 >> 2] | 0;
      $10 = HEAP32[global$35 >> 2] | 0;
      $11 = HEAP32[global$36 >> 2] | 0;
      $12 = HEAP32[global$37 >> 2] | 0;
      $13 = HEAP32[global$38 >> 2] | 0;
      $14 = HEAP32[global$39 >> 2] | 0;
      $15 = HEAP32[global$40 >> 2] | 0;
      $4 = 0;
      $16 = 0;
      label$15 : while (1) {
       $2 = (HEAP32[($0 + 168 | 0) >> 2] | 0) + ($16 << 5 | 0) | 0;
       i64toi32_i32$2 = $2;
       i64toi32_i32$0 = HEAP32[$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($2 + 4 | 0) >> 2] | 0;
       if (!(FLAC__bitwriter_write_raw_uint64($1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $15 | 0) | 0)) {
        break label$1
       }
       if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAPU8[($2 + 8 | 0) >> 0] | 0 | 0, $14 | 0) | 0)) {
        break label$1
       }
       if (!(FLAC__bitwriter_write_byte_block($1 | 0, $2 + 9 | 0 | 0, $8 | 0) | 0)) {
        break label$1
       }
       if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, (HEAPU8[($2 + 22 | 0) >> 0] | 0) & 1 | 0 | 0, $13 | 0) | 0)) {
        break label$1
       }
       if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, ((HEAPU8[($2 + 22 | 0) >> 0] | 0) >>> 1 | 0) & 1 | 0 | 0, $12 | 0) | 0)) {
        break label$1
       }
       if (!(FLAC__bitwriter_write_zeroes($1 | 0, $11 | 0) | 0)) {
        break label$1
       }
       if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAPU8[($2 + 23 | 0) >> 0] | 0 | 0, $10 | 0) | 0)) {
        break label$1
       }
       label$16 : {
        $17 = $2 + 23 | 0;
        if (!(HEAPU8[$17 >> 0] | 0)) {
         break label$16
        }
        $7 = $2 + 24 | 0;
        $2 = 0;
        label$17 : while (1) {
         label$18 : {
          $3 = (HEAP32[$7 >> 2] | 0) + ($2 << 4 | 0) | 0;
          i64toi32_i32$2 = $3;
          i64toi32_i32$1 = HEAP32[$3 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[($3 + 4 | 0) >> 2] | 0;
          if (FLAC__bitwriter_write_raw_uint64($1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, $5 | 0) | 0) {
           break label$18
          }
          return 0 | 0;
         }
         label$19 : {
          if (FLAC__bitwriter_write_raw_uint32($1 | 0, HEAPU8[($3 + 8 | 0) >> 0] | 0 | 0, $6 | 0) | 0) {
           break label$19
          }
          return 0 | 0;
         }
         label$20 : {
          if (!(FLAC__bitwriter_write_zeroes($1 | 0, $9 | 0) | 0)) {
           break label$20
          }
          $2 = $2 + 1 | 0;
          if ($2 >>> 0 >= (HEAPU8[$17 >> 0] | 0) >>> 0) {
           break label$16
          }
          continue label$17;
         }
         break label$17;
        };
        return 0 | 0;
       }
       $16 = $16 + 1 | 0;
       if ($16 >>> 0 < (HEAP32[($0 + 164 | 0) >> 2] | 0) >>> 0) {
        continue label$15
       }
       break label$3;
      };
     }
     if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[($0 + 16 | 0) >> 2] | 0 | 0, HEAP32[global$41 >> 2] | 0 | 0) | 0)) {
      break label$1
     }
     $2 = HEAP32[($0 + 20 | 0) >> 2] | 0;
     $3 = global$42;
     $2 = strlen($2 | 0) | 0;
     if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, $2 | 0, HEAP32[$3 >> 2] | 0 | 0) | 0)) {
      break label$1
     }
     if (!(FLAC__bitwriter_write_byte_block($1 | 0, HEAP32[($0 + 20 | 0) >> 2] | 0 | 0, $2 | 0) | 0)) {
      break label$1
     }
     $2 = HEAP32[($0 + 24 | 0) >> 2] | 0;
     $3 = global$43;
     $2 = strlen($2 | 0) | 0;
     if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, $2 | 0, HEAP32[$3 >> 2] | 0 | 0) | 0)) {
      break label$1
     }
     if (!(FLAC__bitwriter_write_byte_block($1 | 0, HEAP32[($0 + 24 | 0) >> 2] | 0 | 0, $2 | 0) | 0)) {
      break label$1
     }
     if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[($0 + 28 | 0) >> 2] | 0 | 0, HEAP32[global$44 >> 2] | 0 | 0) | 0)) {
      break label$1
     }
     if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[($0 + 32 | 0) >> 2] | 0 | 0, HEAP32[global$45 >> 2] | 0 | 0) | 0)) {
      break label$1
     }
     if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[($0 + 36 | 0) >> 2] | 0 | 0, HEAP32[global$46 >> 2] | 0 | 0) | 0)) {
      break label$1
     }
     if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[($0 + 40 | 0) >> 2] | 0 | 0, HEAP32[global$47 >> 2] | 0 | 0) | 0)) {
      break label$1
     }
     if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[($0 + 44 | 0) >> 2] | 0 | 0, HEAP32[global$48 >> 2] | 0 | 0) | 0)) {
      break label$1
     }
     if (FLAC__bitwriter_write_byte_block($1 | 0, HEAP32[($0 + 48 | 0) >> 2] | 0 | 0, HEAP32[($0 + 44 | 0) >> 2] | 0 | 0) | 0) {
      break label$3
     }
     break label$1;
    }
    if (!(FLAC__bitwriter_write_byte_block($1 | 0, HEAP32[($0 + 16 | 0) >> 2] | 0 | 0, HEAP32[($0 + 8 | 0) >> 2] | 0 | 0) | 0)) {
     break label$1
    }
   }
   $4 = 1;
  }
  return $4 | 0;
 }
 
 function FLAC__frame_add_header($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $6 = 0, $7 = 0, $2 = 0, $5 = 0, $4 = 0, $9 = 0, $8 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   $2 = global$0 - 16 | 0;
   $8 = $2;
   if ($2 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $8;
  }
  $3 = global$59;
  label$3 : {
   label$4 : {
    if (FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[global$60 >> 2] | 0 | 0, HEAP32[$3 >> 2] | 0 | 0) | 0) {
     break label$4
    }
    $3 = 0;
    break label$3;
   }
   $3 = 0;
   if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, 0 | 0, HEAP32[global$61 >> 2] | 0 | 0) | 0)) {
    break label$3
   }
   $3 = 0;
   if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, (HEAP32[($0 + 20 | 0) >> 2] | 0 | 0) != (0 | 0) | 0, HEAP32[global$62 >> 2] | 0 | 0) | 0)) {
    break label$3
   }
   $4 = 0;
   label$5 : {
    label$6 : {
     label$7 : {
      label$8 : {
       label$9 : {
        label$10 : {
         label$11 : {
          label$12 : {
           label$13 : {
            label$14 : {
             $3 = HEAP32[$0 >> 2] | 0;
             if (($3 | 0) > (2047 | 0)) {
              break label$14
             }
             label$15 : {
              if (($3 | 0) > (575 | 0)) {
               break label$15
              }
              label$16 : {
               if (($3 | 0) != (192 | 0)) {
                break label$16
               }
               $3 = 1;
               break label$5;
              }
              if (($3 | 0) == (256 | 0)) {
               break label$10
              }
              if (($3 | 0) != (512 | 0)) {
               break label$6
              }
              $3 = 9;
              break label$5;
             }
             if (($3 | 0) == (576 | 0)) {
              break label$13
             }
             if (($3 | 0) == (1024 | 0)) {
              break label$9
             }
             if (($3 | 0) != (1152 | 0)) {
              break label$6
             }
             $3 = 3;
             break label$5;
            }
            label$17 : {
             if (($3 | 0) > (4607 | 0)) {
              break label$17
             }
             if (($3 | 0) == (2048 | 0)) {
              break label$8
             }
             if (($3 | 0) == (2304 | 0)) {
              break label$12
             }
             if (($3 | 0) != (4096 | 0)) {
              break label$6
             }
             $3 = 12;
             break label$5;
            }
            label$18 : {
             if (($3 | 0) > (16383 | 0)) {
              break label$18
             }
             if (($3 | 0) == (4608 | 0)) {
              break label$11
             }
             if (($3 | 0) != (8192 | 0)) {
              break label$6
             }
             $3 = 13;
             break label$5;
            }
            if (($3 | 0) == (16384 | 0)) {
             break label$7
            }
            if (($3 | 0) != (32768 | 0)) {
             break label$6
            }
            $3 = 15;
            break label$5;
           }
           $3 = 2;
           break label$5;
          }
          $3 = 4;
          break label$5;
         }
         $3 = 5;
         break label$5;
        }
        $3 = 8;
        break label$5;
       }
       $3 = 10;
       break label$5;
      }
      $3 = 11;
      break label$5;
     }
     $3 = 14;
     break label$5;
    }
    $3 = $3 >>> 0 < 257 >>> 0 ? 6 : 7;
    $4 = $3;
   }
   label$19 : {
    if (FLAC__bitwriter_write_raw_uint32($1 | 0, $3 | 0, HEAP32[global$63 >> 2] | 0 | 0) | 0) {
     break label$19
    }
    $3 = 0;
    break label$3;
   }
   $5 = 0;
   label$20 : {
    label$21 : {
     label$22 : {
      label$23 : {
       label$24 : {
        label$25 : {
         label$26 : {
          label$27 : {
           label$28 : {
            $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
            if (($3 | 0) > (44099 | 0)) {
             break label$28
            }
            label$29 : {
             if (($3 | 0) > (22049 | 0)) {
              break label$29
             }
             if (($3 | 0) == (8e3 | 0)) {
              break label$27
             }
             if (($3 | 0) != (16e3 | 0)) {
              break label$21
             }
             $6 = 5;
             break label$20;
            }
            if (($3 | 0) == (22050 | 0)) {
             break label$26
            }
            if (($3 | 0) == (24e3 | 0)) {
             break label$25
            }
            if (($3 | 0) != (32e3 | 0)) {
             break label$21
            }
            $6 = 8;
            break label$20;
           }
           label$30 : {
            if (($3 | 0) > (95999 | 0)) {
             break label$30
            }
            if (($3 | 0) == (44100 | 0)) {
             break label$24
            }
            if (($3 | 0) == (48e3 | 0)) {
             break label$23
            }
            $6 = 1;
            if (($3 | 0) == (88200 | 0)) {
             break label$20
            }
            break label$21;
           }
           if (($3 | 0) == (96e3 | 0)) {
            break label$22
           }
           label$31 : {
            if (($3 | 0) == (192e3 | 0)) {
             break label$31
            }
            if (($3 | 0) != (176400 | 0)) {
             break label$21
            }
            $6 = 2;
            break label$20;
           }
           $6 = 3;
           break label$20;
          }
          $6 = 4;
          break label$20;
         }
         $6 = 6;
         break label$20;
        }
        $6 = 7;
        break label$20;
       }
       $6 = 9;
       break label$20;
      }
      $6 = 10;
      break label$20;
     }
     $6 = 11;
     break label$20;
    }
    $7 = ($3 >>> 0) % (1e3 >>> 0) | 0;
    label$32 : {
     if ($3 >>> 0 > 255e3 >>> 0) {
      break label$32
     }
     $6 = 12;
     $5 = 12;
     if (!$7) {
      break label$20
     }
    }
    label$33 : {
     if (($3 >>> 0) % (10 >>> 0) | 0) {
      break label$33
     }
     $6 = 14;
     $5 = 14;
     break label$20;
    }
    $6 = $3 >>> 0 < 65536 >>> 0 ? 13 : 0;
    $5 = $6;
   }
   $3 = 0;
   if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, $6 | 0, HEAP32[global$64 >> 2] | 0 | 0) | 0)) {
    break label$3
   }
   label$34 : {
    $7 = HEAP32[($0 + 12 | 0) >> 2] | 0;
    if ($7 >>> 0 > 3 >>> 0) {
     break label$34
    }
    label$35 : {
     switch ($7 | 0) {
     default:
      $6 = (HEAP32[($0 + 8 | 0) >> 2] | 0) + -1 | 0;
      break label$34;
     case 1:
      $6 = 8;
      break label$34;
     case 2:
      $6 = 9;
      break label$34;
     case 3:
      break label$35;
     };
    }
    $6 = 10;
   }
   if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, $6 | 0, HEAP32[global$65 >> 2] | 0 | 0) | 0)) {
    break label$3
   }
   $3 = 0;
   $6 = 0;
   label$39 : {
    $7 = __wasm_rotl_i32((HEAP32[($0 + 16 | 0) >> 2] | 0) + -8 | 0 | 0, 30 | 0) | 0;
    if ($7 >>> 0 > 4 >>> 0) {
     break label$39
    }
    $6 = HEAP32[((global$1 + 10448 | 0) + ($7 << 2 | 0) | 0) >> 2] | 0;
   }
   if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, $6 | 0, HEAP32[global$66 >> 2] | 0 | 0) | 0)) {
    break label$3
   }
   $3 = 0;
   if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, 0 | 0, HEAP32[global$67 >> 2] | 0 | 0) | 0)) {
    break label$3
   }
   label$40 : {
    label$41 : {
     if (HEAP32[($0 + 20 | 0) >> 2] | 0) {
      break label$41
     }
     if (FLAC__bitwriter_write_utf8_uint32($1 | 0, HEAP32[($0 + 24 | 0) >> 2] | 0 | 0) | 0) {
      break label$40
     }
     break label$3;
    }
    i64toi32_i32$1 = HEAP32[($0 + 28 | 0) >> 2] | 0;
    if (!(FLAC__bitwriter_write_utf8_uint64($1 | 0, HEAP32[($0 + 24 | 0) >> 2] | 0 | 0, i64toi32_i32$1 | 0) | 0)) {
     break label$3
    }
   }
   label$42 : {
    if (!$4) {
     break label$42
    }
    if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, (HEAP32[$0 >> 2] | 0) + -1 | 0 | 0, (($4 | 0) == (6 | 0) ? 8 : 16) | 0) | 0)) {
     break label$3
    }
   }
   label$43 : {
    $6 = $5 + -12 | 0;
    if ($6 >>> 0 > 2 >>> 0) {
     break label$43
    }
    label$44 : {
     switch ($6 | 0) {
     default:
      if (FLAC__bitwriter_write_raw_uint32($1 | 0, ((HEAP32[($0 + 4 | 0) >> 2] | 0) >>> 0) / (1e3 >>> 0) | 0 | 0, 8 | 0) | 0) {
       break label$43
      }
      break label$3;
     case 1:
      if (FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[($0 + 4 | 0) >> 2] | 0 | 0, 16 | 0) | 0) {
       break label$43
      }
      break label$3;
     case 2:
      break label$44;
     };
    }
    if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, ((HEAP32[($0 + 4 | 0) >> 2] | 0) >>> 0) / (10 >>> 0) | 0 | 0, 16 | 0) | 0)) {
     break label$3
    }
   }
   if (!(FLAC__bitwriter_get_write_crc8($1 | 0, $2 + 15 | 0 | 0) | 0)) {
    break label$3
   }
   $3 = global$68;
   $3 = (FLAC__bitwriter_write_raw_uint32($1 | 0, HEAPU8[($2 + 15 | 0) >> 0] | 0 | 0, HEAP32[$3 >> 2] | 0 | 0) | 0 | 0) != (0 | 0);
  }
  label$47 : {
   $9 = $2 + 16 | 0;
   if ($9 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $9;
  }
  return $3 | 0;
 }
 
 function FLAC__subframe_add_constant($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = 0;
  label$1 : {
   if (!(FLAC__bitwriter_write_raw_uint32($3 | 0, HEAP32[global$69 >> 2] | 0 | ($2 | 0) != (0 | 0) | 0 | 0, ((HEAP32[global$71 >> 2] | 0) + (HEAP32[global$70 >> 2] | 0) | 0) + (HEAP32[global$72 >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : {
    if (!$2) {
     break label$2
    }
    if (!(FLAC__bitwriter_write_unary_unsigned($3 | 0, $2 + -1 | 0 | 0) | 0)) {
     break label$1
    }
   }
   $4 = (FLAC__bitwriter_write_raw_int32($3 | 0, HEAP32[$0 >> 2] | 0 | 0, $1 | 0) | 0 | 0) != (0 | 0);
  }
  return $4 | 0;
 }
 
 function FLAC__subframe_add_fixed($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $6 = 0;
  $6 = 0;
  label$1 : {
   if (!(FLAC__bitwriter_write_raw_uint32($4 | 0, HEAP32[global$73 >> 2] | 0 | ($3 | 0) != (0 | 0) | 0 | ((HEAP32[($0 + 12 | 0) >> 2] | 0) << 1 | 0) | 0 | 0, ((HEAP32[global$71 >> 2] | 0) + (HEAP32[global$70 >> 2] | 0) | 0) + (HEAP32[global$72 >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : {
    if (!$3) {
     break label$2
    }
    if (!(FLAC__bitwriter_write_unary_unsigned($4 | 0, $3 + -1 | 0 | 0) | 0)) {
     break label$1
    }
   }
   label$3 : {
    if (!(HEAP32[($0 + 12 | 0) >> 2] | 0)) {
     break label$3
    }
    $3 = 0;
    label$4 : {
     label$5 : while (1) {
      if (!(FLAC__bitwriter_write_raw_int32($4 | 0, HEAP32[(($0 + ($3 << 2 | 0) | 0) + 16 | 0) >> 2] | 0 | 0, $2 | 0) | 0)) {
       break label$4
      }
      $3 = $3 + 1 | 0;
      if ($3 >>> 0 >= (HEAP32[($0 + 12 | 0) >> 2] | 0) >>> 0) {
       break label$3
      }
      continue label$5;
     };
    }
    return 0 | 0;
   }
   $6 = 0;
   if (!(FLAC__bitwriter_write_raw_uint32($4 | 0, HEAP32[$0 >> 2] | 0 | 0, HEAP32[global$51 >> 2] | 0 | 0) | 0)) {
    break label$1
   }
   label$6 : {
    if ((HEAP32[$0 >> 2] | 0) >>> 0 > 1 >>> 0) {
     break label$6
    }
    if (!(FLAC__bitwriter_write_raw_uint32($4 | 0, HEAP32[($0 + 4 | 0) >> 2] | 0 | 0, HEAP32[global$50 >> 2] | 0 | 0) | 0)) {
     break label$1
    }
    $3 = HEAP32[$0 >> 2] | 0;
    if ($3 >>> 0 > 1 >>> 0) {
     break label$6
    }
    $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    if (!(add_residual_partitioned_rice_($4 | 0, HEAP32[($0 + 32 | 0) >> 2] | 0 | 0, $1 | 0, HEAP32[($0 + 12 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0, HEAP32[($2 + 4 | 0) >> 2] | 0 | 0, HEAP32[($0 + 4 | 0) >> 2] | 0 | 0, ($3 | 0) == (1 | 0) | 0) | 0)) {
     break label$1
    }
   }
   $6 = 1;
  }
  return $6 | 0;
 }
 
 function add_residual_partitioned_rice_($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $11 = 0, $14 = 0, $10 = 0, $9 = 0, $15 = 0, $16 = 0, $12 = 0, $13 = 0;
  $8 = global$53;
  $9 = HEAP32[($7 ? global$54 : $8) >> 2] | 0;
  $8 = global$55;
  $10 = HEAP32[($7 ? global$56 : $8) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($6) {
      break label$3
     }
     label$4 : {
      if (HEAP32[$5 >> 2] | 0) {
       break label$4
      }
      $11 = 0;
      if (!(FLAC__bitwriter_write_raw_uint32($0 | 0, HEAP32[$4 >> 2] | 0 | 0, $10 | 0) | 0)) {
       break label$2
      }
      if (!(FLAC__bitwriter_write_rice_signed_block($0 | 0, $1 | 0, $2 | 0, HEAP32[$4 >> 2] | 0 | 0) | 0)) {
       break label$2
      }
      break label$1;
     }
     $11 = 0;
     if (!(FLAC__bitwriter_write_raw_uint32($0 | 0, $9 | 0, $10 | 0) | 0)) {
      break label$2
     }
     if (!(FLAC__bitwriter_write_raw_uint32($0 | 0, HEAP32[$5 >> 2] | 0 | 0, HEAP32[global$57 >> 2] | 0 | 0) | 0)) {
      break label$2
     }
     if (!$2) {
      break label$1
     }
     $7 = 0;
     label$5 : {
      label$6 : while (1) {
       if (!(FLAC__bitwriter_write_raw_int32($0 | 0, HEAP32[($1 + ($7 << 2 | 0) | 0) >> 2] | 0 | 0, HEAP32[$5 >> 2] | 0 | 0) | 0)) {
        break label$5
       }
       $7 = $7 + 1 | 0;
       if (($7 | 0) == ($2 | 0)) {
        break label$1
       }
       continue label$6;
      };
     }
     return 0 | 0;
    }
    $12 = ($3 + $2 | 0) >>> $6 | 0;
    $13 = HEAP32[global$57 >> 2] | 0;
    $2 = 0;
    $14 = 0;
    label$7 : while (1) {
     $15 = $12 - ($14 ? 0 : $3) | 0;
     $7 = $2;
     $2 = $15 + $7 | 0;
     label$8 : {
      label$9 : {
       $16 = $14 << 2 | 0;
       $8 = $5 + $16 | 0;
       if (HEAP32[$8 >> 2] | 0) {
        break label$9
       }
       $11 = 0;
       $8 = $4 + $16 | 0;
       if (!(FLAC__bitwriter_write_raw_uint32($0 | 0, HEAP32[$8 >> 2] | 0 | 0, $10 | 0) | 0)) {
        break label$2
       }
       if (FLAC__bitwriter_write_rice_signed_block($0 | 0, $1 + ($7 << 2 | 0) | 0 | 0, $15 | 0, HEAP32[$8 >> 2] | 0 | 0) | 0) {
        break label$8
       }
       break label$2;
      }
      $11 = 0;
      if (!(FLAC__bitwriter_write_raw_uint32($0 | 0, $9 | 0, $10 | 0) | 0)) {
       break label$2
      }
      if (!(FLAC__bitwriter_write_raw_uint32($0 | 0, HEAP32[$8 >> 2] | 0 | 0, $13 | 0) | 0)) {
       break label$2
      }
      if ($7 >>> 0 >= $2 >>> 0) {
       break label$8
      }
      label$10 : while (1) {
       if (!(FLAC__bitwriter_write_raw_int32($0 | 0, HEAP32[($1 + ($7 << 2 | 0) | 0) >> 2] | 0 | 0, HEAP32[$8 >> 2] | 0 | 0) | 0)) {
        break label$2
       }
       $7 = $7 + 1 | 0;
       if (($7 | 0) != ($2 | 0)) {
        continue label$10
       }
       break label$10;
      };
     }
     $11 = 1;
     $14 = $14 + 1 | 0;
     if (!($14 >>> $6 | 0)) {
      continue label$7
     }
     break label$7;
    };
   }
   return $11 | 0;
  }
  return 1 | 0;
 }
 
 function FLAC__subframe_add_lpc($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = 0;
  label$1 : {
   if (!(FLAC__bitwriter_write_raw_uint32($4 | 0, HEAP32[global$74 >> 2] | 0 | ($3 | 0) != (0 | 0) | 0 | (((HEAP32[($0 + 12 | 0) >> 2] | 0) << 1 | 0) + -2 | 0) | 0 | 0, ((HEAP32[global$71 >> 2] | 0) + (HEAP32[global$70 >> 2] | 0) | 0) + (HEAP32[global$72 >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : {
    if (!$3) {
     break label$2
    }
    if (!(FLAC__bitwriter_write_unary_unsigned($4 | 0, $3 + -1 | 0 | 0) | 0)) {
     break label$1
    }
   }
   label$3 : {
    if (!(HEAP32[($0 + 12 | 0) >> 2] | 0)) {
     break label$3
    }
    $3 = 0;
    label$4 : {
     label$5 : while (1) {
      if (!(FLAC__bitwriter_write_raw_int32($4 | 0, HEAP32[(($0 + ($3 << 2 | 0) | 0) + 152 | 0) >> 2] | 0 | 0, $2 | 0) | 0)) {
       break label$4
      }
      $3 = $3 + 1 | 0;
      if ($3 >>> 0 >= (HEAP32[($0 + 12 | 0) >> 2] | 0) >>> 0) {
       break label$3
      }
      continue label$5;
     };
    }
    return 0 | 0;
   }
   $5 = 0;
   if (!(FLAC__bitwriter_write_raw_uint32($4 | 0, (HEAP32[($0 + 16 | 0) >> 2] | 0) + -1 | 0 | 0, HEAP32[global$49 >> 2] | 0 | 0) | 0)) {
    break label$1
   }
   if (!(FLAC__bitwriter_write_raw_int32($4 | 0, HEAP32[($0 + 20 | 0) >> 2] | 0 | 0, HEAP32[global$7 >> 2] | 0 | 0) | 0)) {
    break label$1
   }
   label$6 : {
    if (!(HEAP32[($0 + 12 | 0) >> 2] | 0)) {
     break label$6
    }
    $3 = 0;
    label$7 : {
     label$8 : while (1) {
      if (!(FLAC__bitwriter_write_raw_int32($4 | 0, HEAP32[(($0 + ($3 << 2 | 0) | 0) + 24 | 0) >> 2] | 0 | 0, HEAP32[($0 + 16 | 0) >> 2] | 0 | 0) | 0)) {
       break label$7
      }
      $3 = $3 + 1 | 0;
      if ($3 >>> 0 >= (HEAP32[($0 + 12 | 0) >> 2] | 0) >>> 0) {
       break label$6
      }
      continue label$8;
     };
    }
    return 0 | 0;
   }
   $5 = 0;
   if (!(FLAC__bitwriter_write_raw_uint32($4 | 0, HEAP32[$0 >> 2] | 0 | 0, HEAP32[global$51 >> 2] | 0 | 0) | 0)) {
    break label$1
   }
   label$9 : {
    if ((HEAP32[$0 >> 2] | 0) >>> 0 > 1 >>> 0) {
     break label$9
    }
    if (!(FLAC__bitwriter_write_raw_uint32($4 | 0, HEAP32[($0 + 4 | 0) >> 2] | 0 | 0, HEAP32[global$50 >> 2] | 0 | 0) | 0)) {
     break label$1
    }
    $3 = HEAP32[$0 >> 2] | 0;
    if ($3 >>> 0 > 1 >>> 0) {
     break label$9
    }
    $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    if (!(add_residual_partitioned_rice_($4 | 0, HEAP32[($0 + 280 | 0) >> 2] | 0 | 0, $1 | 0, HEAP32[($0 + 12 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0, HEAP32[($2 + 4 | 0) >> 2] | 0 | 0, HEAP32[($0 + 4 | 0) >> 2] | 0 | 0, ($3 | 0) == (1 | 0) | 0) | 0)) {
     break label$1
    }
   }
   $5 = 1;
  }
  return $5 | 0;
 }
 
 function FLAC__subframe_add_verbatim($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = 0;
  $0 = HEAP32[$0 >> 2] | 0;
  label$1 : {
   if (!(FLAC__bitwriter_write_raw_uint32($4 | 0, HEAP32[global$75 >> 2] | 0 | ($3 | 0) != (0 | 0) | 0 | 0, ((HEAP32[global$71 >> 2] | 0) + (HEAP32[global$70 >> 2] | 0) | 0) + (HEAP32[global$72 >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : {
    if (!$3) {
     break label$2
    }
    if (!(FLAC__bitwriter_write_unary_unsigned($4 | 0, $3 + -1 | 0 | 0) | 0)) {
     break label$1
    }
   }
   label$3 : {
    if ($1) {
     break label$3
    }
    return 1 | 0;
   }
   $3 = 0;
   label$4 : {
    label$5 : while (1) {
     if (!(FLAC__bitwriter_write_raw_int32($4 | 0, HEAP32[($0 + ($3 << 2 | 0) | 0) >> 2] | 0 | 0, $2 | 0) | 0)) {
      break label$4
     }
     $3 = $3 + 1 | 0;
     if (($3 | 0) != ($1 | 0)) {
      continue label$5
     }
     break label$5;
    };
    return 1 | 0;
   }
   $5 = 0;
  }
  return $5 | 0;
 }
 
 function strncmp($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0, $5 = 0;
  label$1 : {
   if ($2) {
    break label$1
   }
   return 0 | 0;
  }
  $3 = 0;
  label$2 : {
   $4 = HEAPU8[$0 >> 0] | 0;
   if (!$4) {
    break label$2
   }
   label$3 : {
    label$4 : while (1) {
     $5 = HEAPU8[$1 >> 0] | 0;
     if (($4 & 255 | 0 | 0) != ($5 | 0)) {
      break label$3
     }
     $2 = $2 + -1 | 0;
     if (!$2) {
      break label$3
     }
     if (!$5) {
      break label$3
     }
     $1 = $1 + 1 | 0;
     $4 = HEAPU8[($0 + 1 | 0) >> 0] | 0;
     $0 = $0 + 1 | 0;
     if ($4) {
      continue label$4
     }
     break label$2;
    };
   }
   $3 = $4;
  }
  return ($3 & 255 | 0) - (HEAPU8[$1 >> 0] | 0) | 0 | 0;
 }
 
 function __uflow($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $4 = 0, $3 = 0;
  label$1 : {
   $1 = global$0 - 16 | 0;
   $3 = $1;
   if ($1 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $3;
  }
  $2 = -1;
  label$3 : {
   if (__toread($0 | 0) | 0) {
    break label$3
   }
   if ((FUNCTION_TABLE[HEAP32[($0 + 32 | 0) >> 2] | 0]($0, $1 + 15 | 0, 1) | 0 | 0) != (1 | 0)) {
    break label$3
   }
   $2 = HEAPU8[($1 + 15 | 0) >> 0] | 0;
  }
  label$4 : {
   $4 = $1 + 16 | 0;
   if ($4 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $4;
  }
  return $2 | 0;
 }
 
 function __shlim($0, $1, $1$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2 = 0, $3 = 0, $4 = 0, $4$hi = 0, i64toi32_i32$2 = 0, $11 = 0, $12 = 0, $13 = 0, i64toi32_i32$3 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0;
  HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] = $1;
  HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] = $1$hi;
  $2 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
  $3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = $2 - $3 | 0;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  $4 = i64toi32_i32$1;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$1 = $0;
  HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] = $4;
  HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   i64toi32_i32$0 = $1$hi;
   if (!($1 | $1$hi | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$2 = $4;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $1;
   if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
    $11 = 1
   } else {
    if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) {
      $12 = 0
     } else {
      $12 = 1
     }
     $13 = $12;
    } else {
     $13 = 0
    }
    $11 = $13;
   }
   if ($11) {
    break label$1
   }
   i64toi32_i32$2 = $1$hi;
   HEAP32[($0 + 104 | 0) >> 2] = $3 + $1 | 0;
   return;
  }
  HEAP32[($0 + 104 | 0) >> 2] = $2;
 }
 
 function __shgetc($0) {
  $0 = $0 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, $4$hi = 0, i64toi32_i32$4 = 0, $3 = 0, $4 = 0, $1 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $10$hi = 0, $27 = 0, $27$hi = 0, $35 = 0, $35$hi = 0, $47 = 0, $49 = 0, $49$hi = 0, $56 = 0, $56$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$2 = $0;
     i64toi32_i32$0 = HEAP32[($0 + 112 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($0 + 116 | 0) >> 2] | 0;
     $4 = i64toi32_i32$0;
     $4$hi = i64toi32_i32$1;
     if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
      break label$3
     }
     i64toi32_i32$2 = $0;
     i64toi32_i32$1 = HEAP32[($0 + 120 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($0 + 124 | 0) >> 2] | 0;
     $10$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$3 = $4;
     if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
      $22 = 1
     } else {
      if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        $23 = 0
       } else {
        $23 = 1
       }
       $24 = $23;
      } else {
       $24 = 0
      }
      $22 = $24;
     }
     if ($22) {
      break label$2
     }
    }
    $1 = __uflow($0 | 0) | 0;
    if (($1 | 0) > (-1 | 0)) {
     break label$1
    }
   }
   HEAP32[($0 + 104 | 0) >> 2] = 0;
   return -1 | 0;
  }
  $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
  label$4 : {
   label$5 : {
    i64toi32_i32$3 = $0;
    i64toi32_i32$2 = HEAP32[($0 + 112 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($0 + 116 | 0) >> 2] | 0;
    $4 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0) {
     break label$5
    }
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$1 = $0;
    i64toi32_i32$3 = HEAP32[($0 + 120 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($0 + 124 | 0) >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$3 = -1;
    i64toi32_i32$2 = -1;
    i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
    $27 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$0 = $4;
    i64toi32_i32$1 = $27$hi;
    i64toi32_i32$2 = $27;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $4 = i64toi32_i32$4;
    $4$hi = i64toi32_i32$5;
    $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    i64toi32_i32$0 = $2 - $3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
    $35 = i64toi32_i32$0;
    $35$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$3 = i64toi32_i32$4;
    i64toi32_i32$0 = $35$hi;
    i64toi32_i32$2 = $35;
    if ((i64toi32_i32$5 | 0) > (i64toi32_i32$0 | 0)) {
     $25 = 1
    } else {
     if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
       $26 = 0
      } else {
       $26 = 1
      }
      $28 = $26;
     } else {
      $28 = 0
     }
     $25 = $28;
    }
    if ($25) {
     break label$5
    }
    i64toi32_i32$3 = $4$hi;
    HEAP32[($0 + 104 | 0) >> 2] = $3 + $4 | 0;
    break label$4;
   }
   HEAP32[($0 + 104 | 0) >> 2] = $2;
  }
  label$6 : {
   label$7 : {
    if ($2) {
     break label$7
    }
    $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    break label$6;
   }
   $47 = $0;
   i64toi32_i32$2 = $0;
   i64toi32_i32$3 = HEAP32[($0 + 120 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[($0 + 124 | 0) >> 2] | 0;
   $49 = i64toi32_i32$3;
   $49$hi = i64toi32_i32$5;
   $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$3 = ($2 - $3 | 0) + 1 | 0;
   i64toi32_i32$5 = i64toi32_i32$3 >> 31 | 0;
   $56 = i64toi32_i32$3;
   $56$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $49$hi;
   i64toi32_i32$2 = $49;
   i64toi32_i32$3 = $56$hi;
   i64toi32_i32$0 = $56;
   i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   i64toi32_i32$2 = $47;
   HEAP32[(i64toi32_i32$2 + 120 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[(i64toi32_i32$2 + 124 | 0) >> 2] = i64toi32_i32$4;
  }
  label$8 : {
   $0 = $3 + -1 | 0;
   if (($1 | 0) == (HEAPU8[$0 >> 0] | 0 | 0)) {
    break label$8
   }
   HEAP8[$0 >> 0] = $1;
  }
  return $1 | 0;
 }
 
 function isspace($0) {
  $0 = $0 | 0;
  return ($0 | 0) == (32 | 0) | ($0 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
 }
 
 function __extendsftf2($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $5 = 0, i64toi32_i32$4 = 0, $2 = 0, $8 = 0, $8$hi = 0, $9 = 0, $9$hi = 0, $3 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $7 = 0, $6 = 0, $4 = 0, $39 = 0, $47 = 0, $47$hi = 0, $51$hi = 0, $57 = 0, $58 = 0, $58$hi = 0, $61$hi = 0, $62 = 0;
  label$1 : {
   $2 = global$0 - 16 | 0;
   $6 = $2;
   if ($2 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $6;
  }
  $3 = (wasm2js_scratch_store_f32($1), wasm2js_scratch_load_i32(0));
  $4 = $3 & -2147483648 | 0;
  label$3 : {
   label$4 : {
    $5 = $3 & 2147483647 | 0;
    if (($5 + -8388608 | 0) >>> 0 > 2130706431 >>> 0) {
     break label$4
    }
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = $5;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $27 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $27 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    i64toi32_i32$0 = $27;
    i64toi32_i32$2 = 1065353216;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $8 = i64toi32_i32$4;
    $8$hi = i64toi32_i32$5;
    i64toi32_i32$5 = 0;
    $9 = 0;
    $9$hi = i64toi32_i32$5;
    break label$3;
   }
   label$5 : {
    if ($5 >>> 0 < 2139095040 >>> 0) {
     break label$5
    }
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $3;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     $28 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
     $28 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    }
    i64toi32_i32$5 = $28;
    i64toi32_i32$1 = 2147418112;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $8 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $8$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $9 = 0;
    $9$hi = i64toi32_i32$1;
    break label$3;
   }
   label$6 : {
    if ($5) {
     break label$6
    }
    i64toi32_i32$1 = 0;
    $9 = 0;
    $9$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $8 = 0;
    $8$hi = i64toi32_i32$1;
    break label$3;
   }
   i64toi32_i32$1 = 0;
   $39 = $5;
   $5 = Math_clz32($5);
   i64toi32_i32$5 = 0;
   __ashlti3($2 | 0, $39 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $5 + 81 | 0 | 0);
   i64toi32_i32$0 = $2 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
   $47 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
   $47$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = 16265 - $5 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    $29 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
    $29 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
   }
   $51$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $47$hi;
   i64toi32_i32$5 = $47;
   i64toi32_i32$1 = $51$hi;
   i64toi32_i32$3 = $29;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $8 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $8$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $2;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $9 = i64toi32_i32$1;
   $9$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $9$hi;
  i64toi32_i32$1 = $0;
  HEAP32[i64toi32_i32$1 >> 2] = $9;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$5;
  $57 = i64toi32_i32$1;
  i64toi32_i32$5 = $8$hi;
  $58 = $8;
  $58$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  i64toi32_i32$0 = $4;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   $30 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
   $30 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
  }
  $61$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $58$hi;
  i64toi32_i32$5 = $58;
  i64toi32_i32$0 = $61$hi;
  i64toi32_i32$3 = $30;
  i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
  $62 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
  i64toi32_i32$5 = $57;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $62;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$0;
  label$7 : {
   $7 = $2 + 16 | 0;
   if ($7 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $7;
  }
 }
 
 function __floatsitf($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $3 = 0, i64toi32_i32$4 = 0, $2 = 0, $6 = 0, $6$hi = 0, $7 = 0, $7$hi = 0, $23 = 0, $24 = 0, $5 = 0, $4 = 0, $25 = 0, $33 = 0, $33$hi = 0, $37$hi = 0, $38 = 0, $38$hi = 0, $42$hi = 0;
  label$1 : {
   $2 = global$0 - 16 | 0;
   $4 = $2;
   if ($2 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $4;
  }
  label$3 : {
   label$4 : {
    if ($1) {
     break label$4
    }
    i64toi32_i32$0 = 0;
    $6 = 0;
    $6$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $7 = 0;
    $7$hi = i64toi32_i32$0;
    break label$3;
   }
   $3 = $1 >> 31 | 0;
   $3 = ($1 + $3 | 0) ^ $3 | 0;
   i64toi32_i32$0 = 0;
   $25 = $3;
   $3 = Math_clz32($3);
   i64toi32_i32$1 = 0;
   __ashlti3($2 | 0, $25 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $3 + 81 | 0 | 0);
   i64toi32_i32$2 = $2 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $33 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $33$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 16414 - $3 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $23 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $23 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $37$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $33$hi;
   i64toi32_i32$1 = $33;
   i64toi32_i32$0 = $37$hi;
   i64toi32_i32$3 = $23;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $38 = i64toi32_i32$4;
   $38$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $1 & -2147483648 | 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    $24 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
    $24 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
   }
   $42$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $38$hi;
   i64toi32_i32$5 = $38;
   i64toi32_i32$2 = $42$hi;
   i64toi32_i32$3 = $24;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $7 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $7$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $2;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $6 = i64toi32_i32$2;
   $6$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$2 = $0;
  HEAP32[i64toi32_i32$2 >> 2] = $6;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $7$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $7;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
  label$5 : {
   $5 = $2 + 16 | 0;
   if ($5 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $5;
  }
 }
 
 function __multf3($0, $1, $1$hi, $2, $2$hi, $3, $3$hi, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $5 = 0, $16$hi = 0, $16 = 0, $14$hi = 0, $13$hi = 0, $12$hi = 0, $17$hi = 0, $14 = 0, $6 = 0, $17 = 0, $13 = 0, $12 = 0, $20$hi = 0, $8 = 0, $20 = 0, $15$hi = 0, $18$hi = 0, $19$hi = 0, $7 = 0, $15 = 0, $18 = 0, $19 = 0, $21$hi = 0, $24$hi = 0, $21 = 0, $9 = 0, $22$hi = 0, $23$hi = 0, $25$hi = 0, $26$hi = 0, $230 = 0, $231 = 0, $232 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $240 = 0, $241 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $250 = 0, $252 = 0, $254 = 0, $255 = 0, $257 = 0, $22 = 0, $258 = 0, $260 = 0, $23 = 0, $24 = 0, $262 = 0, $26 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $280 = 0, $11 = 0, $10 = 0, $35 = 0, $35$hi = 0, $37$hi = 0, $40 = 0, $40$hi = 0, $42$hi = 0, $45 = 0, $45$hi = 0, $49$hi = 0, $76 = 0, $80 = 0, $87 = 0, $91 = 0, $100 = 0, $100$hi = 0, $112 = 0, $112$hi = 0, $134 = 0, $135 = 0, $135$hi = 0, $136 = 0, $136$hi = 0, $143$hi = 0, $146$hi = 0, $156 = 0, $156$hi = 0, $161$hi = 0, $168 = 0, $169 = 0, $169$hi = 0, $170 = 0, $170$hi = 0, $177$hi = 0, $180$hi = 0, $192 = 0, $192$hi = 0, $197$hi = 0, $200 = 0, $200$hi = 0, $202$hi = 0, $213 = 0, $213$hi = 0, $221 = 0, $221$hi = 0, $228 = 0, $228$hi = 0, $233 = 0, $233$hi = 0, $242 = 0, $242$hi = 0, $249 = 0, $249$hi = 0, $251 = 0, $251$hi = 0, $253 = 0, $253$hi = 0, $256 = 0, $258$hi = 0, $259 = 0, $259$hi = 0, $261 = 0, $261$hi = 0, $270 = 0, $270$hi = 0, $275 = 0, $275$hi = 0, $283 = 0, $283$hi = 0, $286$hi = 0, $25 = 0, $302 = 0, $302$hi = 0, $306 = 0, $307 = 0, $307$hi = 0, $311 = 0, $311$hi = 0, $315 = 0, $316$hi = 0, $317 = 0, $317$hi = 0, $318 = 0, $318$hi = 0, $321 = 0, $322$hi = 0, $325 = 0, $326$hi = 0, $327$hi = 0, $331 = 0, $332$hi = 0, $333$hi = 0, $336 = 0, $336$hi = 0, $337 = 0, $337$hi = 0, $344 = 0, $344$hi = 0, $350 = 0, $350$hi = 0, $352$hi = 0, $353 = 0, $353$hi = 0, $354 = 0, $354$hi = 0, $355 = 0, $355$hi = 0, $357$hi = 0, $361 = 0, $362$hi = 0, $363 = 0, $363$hi = 0, $364 = 0, $364$hi = 0, $366 = 0, $366$hi = 0, $369 = 0, $370$hi = 0, $373 = 0, $374$hi = 0, $375$hi = 0, $378 = 0, $379$hi = 0, $381$hi = 0, $382 = 0, $382$hi = 0, $386 = 0, $387$hi = 0, $388 = 0, $388$hi = 0, $389 = 0, $389$hi = 0, $392 = 0, $393$hi = 0, $396 = 0, $397$hi = 0, $398$hi = 0, $402 = 0, $403$hi = 0, $413 = 0, $413$hi = 0, $415$hi = 0, $418 = 0, $418$hi = 0, $420$hi = 0, $424 = 0, $424$hi = 0, $426$hi = 0, $460 = 0, $460$hi = 0, $462 = 0, $462$hi = 0, $463 = 0, $463$hi = 0, $465 = 0, $465$hi = 0, $469 = 0, $469$hi = 0, $471 = 0, $472$hi = 0, $477 = 0, $477$hi = 0, $481 = 0, $481$hi = 0, $490$hi = 0, $492 = 0, $492$hi = 0, $498 = 0, $504 = 0, $504$hi = 0, $509 = 0, $510$hi = 0, $514 = 0, $514$hi = 0, $518 = 0, $518$hi = 0, $521 = 0, $521$hi = 0, $525 = 0, $526$hi = 0;
  label$1 : {
   $5 = global$0 - 96 | 0;
   $10 = $5;
   if ($5 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $10;
  }
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $230 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $230 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $35 = $230;
  $35$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $231 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $231 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $37$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $35$hi;
  i64toi32_i32$1 = $35;
  i64toi32_i32$0 = $37$hi;
  i64toi32_i32$3 = $231;
  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
  $12 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
  $12$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$2 = $3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $232 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $232 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $40 = $232;
  $40$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 47;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $234 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $234 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $42$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $40$hi;
  i64toi32_i32$1 = $40;
  i64toi32_i32$0 = $42$hi;
  i64toi32_i32$3 = $234;
  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
  $13 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
  $13$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$2 = $3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 49;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $235 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $235 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $45 = $235;
  $45$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4;
  i64toi32_i32$2 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $14 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $14$hi = i64toi32_i32$2;
  i64toi32_i32$1 = $14;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 15;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $236 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $236 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $49$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $45$hi;
  i64toi32_i32$2 = $45;
  i64toi32_i32$1 = $49$hi;
  i64toi32_i32$3 = $236;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  $15 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  $15$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$3 = $2;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $16 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
  $16$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $17 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $17$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $17;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $237 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $237 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $18 = $237;
  $18$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $14$hi;
  i64toi32_i32$1 = $14;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $238 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   $238 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  $19 = $238;
  $19$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $239 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $239 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6 = $239 & 32767 | 0;
  label$3 : {
   label$4 : {
    label$5 : {
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 48;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $240 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $240 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7 = $240 & 32767 | 0;
     if (($7 + -1 | 0) >>> 0 > 32765 >>> 0) {
      break label$5
     }
     $8 = 0;
     if (($6 + -1 | 0) >>> 0 < 32766 >>> 0) {
      break label$4
     }
    }
    label$6 : {
     i64toi32_i32$2 = $1$hi;
     $76 = !($1 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2;
     i64toi32_i32$0 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
     $20 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
     $20$hi = i64toi32_i32$0;
     i64toi32_i32$2 = $20;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$3 = 0;
     $80 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$3 = $20;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $76 : $80) {
      break label$6
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$1 = $2;
     i64toi32_i32$2 = 32768;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $16 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $16$hi = i64toi32_i32$2;
     break label$3;
    }
    label$7 : {
     i64toi32_i32$2 = $3$hi;
     $87 = !($3 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$3 = $4;
     i64toi32_i32$1 = 2147483647;
     i64toi32_i32$0 = -1;
     i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
     $2 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
     $2$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $2;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$0 = 0;
     $91 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$0 = $2;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) | 0 ? $87 : $91) {
      break label$7
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$3 = $4;
     i64toi32_i32$2 = 32768;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $16 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $16$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $3$hi;
     $1 = $3;
     $1$hi = i64toi32_i32$2;
     break label$3;
    }
    label$8 : {
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $20$hi;
     i64toi32_i32$0 = $20;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
     $100 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
     $100$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$2 = $1;
     i64toi32_i32$0 = $100$hi;
     i64toi32_i32$1 = $100;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0) {
      break label$8
     }
     label$9 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$1 = $3;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      if (!!(i64toi32_i32$1 | i64toi32_i32$2 | 0 | i64toi32_i32$0 | 0)) {
       break label$9
      }
      i64toi32_i32$0 = 2147450880;
      $16 = 0;
      $16$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      $1 = 0;
      $1$hi = i64toi32_i32$0;
      break label$3;
     }
     i64toi32_i32$0 = $16$hi;
     i64toi32_i32$3 = $16;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $16 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $16$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$3;
    }
    label$10 : {
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
     $112 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
     $112$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3;
     i64toi32_i32$0 = $112$hi;
     i64toi32_i32$2 = $112;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break label$10
     }
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $20$hi;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$2 = $1;
     i64toi32_i32$0 = $20$hi;
     i64toi32_i32$1 = $20;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $2 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$0;
     label$11 : {
      i64toi32_i32$0 = $2$hi;
      if (!!($2 | i64toi32_i32$0 | 0)) {
       break label$11
      }
      i64toi32_i32$0 = 2147450880;
      $16 = 0;
      $16$hi = i64toi32_i32$0;
      break label$3;
     }
     i64toi32_i32$0 = $16$hi;
     i64toi32_i32$3 = $16;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $16 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $16$hi = i64toi32_i32$2;
     break label$3;
    }
    label$12 : {
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $20$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$0 = $1;
     i64toi32_i32$3 = $20$hi;
     i64toi32_i32$1 = $20;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$12
     }
     i64toi32_i32$2 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$3;
    }
    label$13 : {
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$1 = $3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$0 = $2;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break label$13
     }
     i64toi32_i32$2 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$3;
    }
    $8 = 0;
    label$14 : {
     i64toi32_i32$2 = $20$hi;
     i64toi32_i32$0 = $20;
     i64toi32_i32$3 = 65535;
     i64toi32_i32$1 = -1;
     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$14
     }
     $134 = $5 + 80 | 0;
     i64toi32_i32$0 = $1$hi;
     $135 = $1;
     $135$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $17$hi;
     $136 = $17;
     $136$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $17$hi;
     $8 = !($17 | i64toi32_i32$0 | 0);
     i64toi32_i32$4 = $8;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$3 = i64toi32_i32$4 ? $1 : $17;
     i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$2;
     i64toi32_i32$0 = Math_clz32(i64toi32_i32$1);
     i64toi32_i32$4 = 0;
     if ((i64toi32_i32$0 | 0) == (32 | 0)) {
      $241 = Math_clz32(i64toi32_i32$3) + 32 | 0
     } else {
      $241 = i64toi32_i32$0
     }
     $143$hi = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     $146$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $143$hi;
     i64toi32_i32$3 = $241;
     i64toi32_i32$1 = $146$hi;
     i64toi32_i32$0 = $8 << 6 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $8 = i64toi32_i32$2;
     i64toi32_i32$5 = $135$hi;
     i64toi32_i32$3 = $136$hi;
     __ashlti3($134 | 0, $135 | 0, i64toi32_i32$5 | 0, $136 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 + -15 | 0 | 0);
     $8 = 16 - i64toi32_i32$2 | 0;
     i64toi32_i32$4 = $5;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 80 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 84 | 0) >> 2] | 0;
     $1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$5;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $243 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      $243 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
     }
     $156 = $243;
     $156$hi = i64toi32_i32$3;
     i64toi32_i32$5 = $5 + 88 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $17 = i64toi32_i32$3;
     $17$hi = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
      $244 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
      $244 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
     }
     $161$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $156$hi;
     i64toi32_i32$4 = $156;
     i64toi32_i32$5 = $161$hi;
     i64toi32_i32$0 = $244;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $12 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
     $12$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$3 = $17;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $245 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      $245 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
     }
     $18 = $245;
     $18$hi = i64toi32_i32$4;
    }
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$5 = $2;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$0 = -1;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$4
    }
    $168 = $5 + 64 | 0;
    i64toi32_i32$5 = $3$hi;
    $169 = $3;
    $169$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $14$hi;
    $170 = $14;
    $170$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $14$hi;
    $9 = !($14 | i64toi32_i32$5 | 0);
    i64toi32_i32$1 = $9;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$4 = $14$hi;
    i64toi32_i32$3 = i64toi32_i32$1 ? $3 : $14;
    i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$4;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$0);
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $246 = Math_clz32(i64toi32_i32$3) + 32 | 0
    } else {
     $246 = i64toi32_i32$5
    }
    $177$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $180$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $177$hi;
    i64toi32_i32$3 = $246;
    i64toi32_i32$0 = $180$hi;
    i64toi32_i32$5 = $9 << 6 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $9 = i64toi32_i32$4;
    i64toi32_i32$2 = $169$hi;
    i64toi32_i32$3 = $170$hi;
    __ashlti3($168 | 0, $169 | 0, i64toi32_i32$2 | 0, $170 | 0, i64toi32_i32$3 | 0, i64toi32_i32$4 + -15 | 0 | 0);
    $8 = ($8 - i64toi32_i32$4 | 0) + 16 | 0;
    i64toi32_i32$1 = $5;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
    $3 = i64toi32_i32$3;
    $3$hi = i64toi32_i32$2;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 49;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $247 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $247 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
    }
    $192 = $247;
    $192$hi = i64toi32_i32$3;
    i64toi32_i32$2 = $5 + 72 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 15;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
     $248 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $248 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    }
    $197$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $192$hi;
    i64toi32_i32$1 = $192;
    i64toi32_i32$2 = $197$hi;
    i64toi32_i32$5 = $248;
    i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $15 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $15$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 17;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $250 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $250 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $200 = $250;
    $200$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = $2;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 47;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
     $252 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $252 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    }
    $202$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $200$hi;
    i64toi32_i32$1 = $200;
    i64toi32_i32$2 = $202$hi;
    i64toi32_i32$5 = $252;
    i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $13 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $13$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = $2;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 17;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $254 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $254 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $19 = $254;
    $19$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $13$hi;
   i64toi32_i32$2 = $13;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   $2 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$1 = $1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $4 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = __wasm_i64_mul($2 | 0, i64toi32_i32$2 | 0, $4 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $21 = i64toi32_i32$1;
   $21$hi = i64toi32_i32$2;
   $213 = i64toi32_i32$1;
   $213$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 15;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
    $255 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
    $255 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
   }
   i64toi32_i32$2 = $255;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = -32768;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   $1 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
   $1$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $12$hi;
   i64toi32_i32$1 = $12;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $3 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = __wasm_i64_mul($1 | 0, i64toi32_i32$2 | 0, $3 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $221 = i64toi32_i32$1;
   $221$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $213$hi;
   i64toi32_i32$3 = $213;
   i64toi32_i32$1 = $221$hi;
   i64toi32_i32$5 = $221;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $12 = i64toi32_i32$0;
   $12$hi = i64toi32_i32$4;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
    $257 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
    $257 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
   }
   $14 = $257;
   $14$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = __wasm_i64_mul($1 | 0, i64toi32_i32$3 | 0, $4 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $228 = i64toi32_i32$2;
   $228$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $14$hi;
   i64toi32_i32$4 = $14;
   i64toi32_i32$2 = $228$hi;
   i64toi32_i32$5 = $228;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $13 = i64toi32_i32$1;
   $13$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $14$hi;
   i64toi32_i32$0 = $13$hi;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$4 = $14$hi;
   i64toi32_i32$5 = $14;
   i64toi32_i32$3 = 0;
   $233 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   $233$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = __wasm_i64_mul($2 | 0, i64toi32_i32$3 | 0, $3 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $22 = i64toi32_i32$0;
   $22$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $17$hi;
   i64toi32_i32$5 = $17;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = -1;
   i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
   $14 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
   $14$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = $14$hi;
   i64toi32_i32$5 = __wasm_i64_mul($1 | 0, i64toi32_i32$0 | 0, $14 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $242 = i64toi32_i32$5;
   $242$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $22$hi;
   i64toi32_i32$3 = $22;
   i64toi32_i32$5 = $242$hi;
   i64toi32_i32$4 = $242;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $20 = i64toi32_i32$2;
   $20$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $15$hi;
   i64toi32_i32$0 = $15;
   i64toi32_i32$3 = 0;
   i64toi32_i32$4 = -1;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   $17 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   $17$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$3 = $17$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = __wasm_i64_mul($17 | 0, i64toi32_i32$3 | 0, $4 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $249 = i64toi32_i32$0;
   $249$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $20$hi;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$0 = $249$hi;
   i64toi32_i32$4 = $249;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $15 = i64toi32_i32$5;
   $15$hi = i64toi32_i32$2;
   $251 = i64toi32_i32$5;
   $251$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $12$hi;
   i64toi32_i32$3 = $12;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 32;
   i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $258 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    $258 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
   }
   $253 = $258;
   $253$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $12$hi;
   i64toi32_i32$1 = $21$hi;
   i64toi32_i32$1 = $12$hi;
   i64toi32_i32$2 = $12;
   i64toi32_i32$3 = $21$hi;
   i64toi32_i32$4 = $21;
   $256 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = $256;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
    $260 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
    $260 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
   }
   $258$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $253$hi;
   i64toi32_i32$2 = $253;
   i64toi32_i32$4 = $258$hi;
   i64toi32_i32$3 = $260;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   $259 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $259$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $251$hi;
   i64toi32_i32$1 = $251;
   i64toi32_i32$2 = $259$hi;
   i64toi32_i32$3 = $259;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $21 = i64toi32_i32$0;
   $21$hi = i64toi32_i32$5;
   $261 = i64toi32_i32$0;
   $261$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$5 = $14$hi;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = $14$hi;
   i64toi32_i32$1 = __wasm_i64_mul($2 | 0, i64toi32_i32$5 | 0, $14 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
   $23 = i64toi32_i32$1;
   $23$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$5 = $18$hi;
   i64toi32_i32$4 = $18;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 65536;
   i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   $12 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $12$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$4 = $12$hi;
   i64toi32_i32$4 = __wasm_i64_mul($1 | 0, i64toi32_i32$1 | 0, $12 | 0, i64toi32_i32$4 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $270 = i64toi32_i32$4;
   $270$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $23$hi;
   i64toi32_i32$5 = $23;
   i64toi32_i32$4 = $270$hi;
   i64toi32_i32$3 = $270;
   i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $18 = i64toi32_i32$2;
   $18$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $17$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $17$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$5 = __wasm_i64_mul($17 | 0, i64toi32_i32$0 | 0, $3 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $275 = i64toi32_i32$5;
   $275$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $18$hi;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$5 = $275$hi;
   i64toi32_i32$3 = $275;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $24 = i64toi32_i32$4;
   $24$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $19$hi;
   i64toi32_i32$0 = $19;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 2147483647;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = -2147483648;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = __wasm_i64_mul($1 | 0, i64toi32_i32$0 | 0, $4 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $283 = i64toi32_i32$2;
   $283$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $24$hi;
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$2 = $283$hi;
   i64toi32_i32$3 = $283;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $19 = i64toi32_i32$5;
   $19$hi = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
    $262 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
    $262 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   }
   $286$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $261$hi;
   i64toi32_i32$4 = $261;
   i64toi32_i32$0 = $286$hi;
   i64toi32_i32$3 = $262;
   i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $25 = i64toi32_i32$2;
   $25$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $233$hi;
   i64toi32_i32$1 = $233;
   i64toi32_i32$4 = $25$hi;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $4 = i64toi32_i32$0;
   $4$hi = i64toi32_i32$2;
   $6 = (($7 + $6 | 0) + $8 | 0) + -16383 | 0;
   label$15 : {
    label$16 : {
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$2 = $14$hi;
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$1 = $14$hi;
     i64toi32_i32$1 = __wasm_i64_mul($17 | 0, i64toi32_i32$2 | 0, $14 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $26 = i64toi32_i32$1;
     $26$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = __wasm_i64_mul($2 | 0, i64toi32_i32$2 | 0, $12 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $302 = i64toi32_i32$1;
     $302$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $26$hi;
     i64toi32_i32$5 = $26;
     i64toi32_i32$1 = $302$hi;
     i64toi32_i32$3 = $302;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $2 = i64toi32_i32$4;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $26$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$5 = $26$hi;
     i64toi32_i32$3 = $26;
     $306 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $307 = $306;
     $307$hi = i64toi32_i32$2;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = __wasm_i64_mul($1 | 0, i64toi32_i32$2 | 0, $3 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $311 = i64toi32_i32$0;
     $311$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$0 = $311$hi;
     i64toi32_i32$5 = $311;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $3 = i64toi32_i32$1;
     $3$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$5 = $2;
     $315 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $316$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $307$hi;
     i64toi32_i32$5 = $307;
     i64toi32_i32$4 = $316$hi;
     i64toi32_i32$3 = $315;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $317 = i64toi32_i32$0;
     $317$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     $318 = $3;
     $318$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $20$hi;
     i64toi32_i32$1 = $22$hi;
     i64toi32_i32$1 = $20$hi;
     i64toi32_i32$2 = $20;
     i64toi32_i32$5 = $22$hi;
     i64toi32_i32$3 = $22;
     $321 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $322$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$3 = $15;
     i64toi32_i32$5 = $20;
     $325 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $326$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $322$hi;
     i64toi32_i32$5 = $321;
     i64toi32_i32$2 = $326$hi;
     i64toi32_i32$1 = $325;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $327$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $318$hi;
     i64toi32_i32$3 = $318;
     i64toi32_i32$5 = $327$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $2 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3;
     $331 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $332$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $317$hi;
     i64toi32_i32$1 = $317;
     i64toi32_i32$4 = $332$hi;
     i64toi32_i32$3 = $331;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $333$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = __wasm_i64_mul($1 | 0, i64toi32_i32$2 | 0, $12 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $336 = i64toi32_i32$1;
     $336$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $333$hi;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$1 = $336$hi;
     i64toi32_i32$3 = $336;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $337 = i64toi32_i32$4;
     $337$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $14$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$0 = $14$hi;
     i64toi32_i32$0 = __wasm_i64_mul($1 | 0, i64toi32_i32$5 | 0, $14 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $3 = i64toi32_i32$0;
     $3$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$5 = $12$hi;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$0 = __wasm_i64_mul($17 | 0, i64toi32_i32$5 | 0, $12 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $344 = i64toi32_i32$0;
     $344$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$2 = $3;
     i64toi32_i32$0 = $344$hi;
     i64toi32_i32$3 = $344;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $1 = i64toi32_i32$1;
     $1$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = i64toi32_i32$1;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$3 = $3;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      $263 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
      $263 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
     }
     $350 = $263;
     $350$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = $1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $264 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
      $264 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
     }
     $352$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $350$hi;
     i64toi32_i32$4 = $350;
     i64toi32_i32$5 = $352$hi;
     i64toi32_i32$2 = $264;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $353 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     $353$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $337$hi;
     i64toi32_i32$3 = $337;
     i64toi32_i32$4 = $353$hi;
     i64toi32_i32$2 = $353;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $354 = i64toi32_i32$0;
     $354$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $2$hi;
     $355 = $2;
     $355$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$5 = $1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
      $265 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $265 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     }
     $357$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $355$hi;
     i64toi32_i32$1 = $355;
     i64toi32_i32$5 = $357$hi;
     i64toi32_i32$2 = $265;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $1 = i64toi32_i32$4;
     $1$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$2 = $2;
     $361 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $362$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $354$hi;
     i64toi32_i32$2 = $354;
     i64toi32_i32$0 = $362$hi;
     i64toi32_i32$1 = $361;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $363 = i64toi32_i32$5;
     $363$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     $364 = $1;
     $364$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $19$hi;
     i64toi32_i32$3 = $19;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $266 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
      $266 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
     }
     $366 = $266;
     $366$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$2 = $23$hi;
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$4 = $18;
     i64toi32_i32$3 = $23$hi;
     i64toi32_i32$1 = $23;
     $369 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $370$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $24$hi;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$4 = $24$hi;
     i64toi32_i32$1 = $24;
     i64toi32_i32$3 = $18;
     $373 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $374$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $370$hi;
     i64toi32_i32$3 = $369;
     i64toi32_i32$4 = $374$hi;
     i64toi32_i32$2 = $373;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $375$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$5 = $24$hi;
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$1 = $19;
     i64toi32_i32$3 = $24$hi;
     i64toi32_i32$2 = $24;
     $378 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $379$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $375$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$5 = $379$hi;
     i64toi32_i32$3 = $378;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
      $267 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
      $267 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
     }
     $381$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $366$hi;
     i64toi32_i32$0 = $366;
     i64toi32_i32$1 = $381$hi;
     i64toi32_i32$3 = $267;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $382 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     $382$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $364$hi;
     i64toi32_i32$2 = $364;
     i64toi32_i32$0 = $382$hi;
     i64toi32_i32$3 = $382;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $3 = i64toi32_i32$5;
     $3$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$3 = $1;
     $386 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $387$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $363$hi;
     i64toi32_i32$3 = $363;
     i64toi32_i32$4 = $387$hi;
     i64toi32_i32$2 = $386;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $388 = i64toi32_i32$0;
     $388$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     $389 = $3;
     $389$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $21$hi;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$5 = $21$hi;
     i64toi32_i32$1 = $21;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$2 = $15;
     $392 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $393$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $25$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$1 = $25$hi;
     i64toi32_i32$2 = $25;
     i64toi32_i32$3 = $21;
     $396 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $397$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $393$hi;
     i64toi32_i32$3 = $392;
     i64toi32_i32$1 = $397$hi;
     i64toi32_i32$5 = $396;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $398$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $389$hi;
     i64toi32_i32$2 = $389;
     i64toi32_i32$3 = $398$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $2 = i64toi32_i32$1;
     $2$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$5 = $3;
     $402 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $403$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $388$hi;
     i64toi32_i32$5 = $388;
     i64toi32_i32$4 = $403$hi;
     i64toi32_i32$2 = $402;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$1;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$5 = 65536;
     i64toi32_i32$2 = 0;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     if (!(i64toi32_i32$0 & i64toi32_i32$2 | 0 | i64toi32_i32$5 | 0)) {
      break label$16
     }
     $6 = $6 + 1 | 0;
     break label$15;
    }
    i64toi32_i32$5 = $13$hi;
    i64toi32_i32$1 = $13;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $268 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
     $268 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    $3 = $268;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$5 = $1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $269 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $269 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $413 = $269;
    $413$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $271 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $271 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $415$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $413$hi;
    i64toi32_i32$1 = $413;
    i64toi32_i32$0 = $415$hi;
    i64toi32_i32$2 = $271;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $1$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$5 = $4;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $272 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $272 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
    }
    $418 = $272;
    $418$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $273 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $273 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $420$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $418$hi;
    i64toi32_i32$1 = $418;
    i64toi32_i32$0 = $420$hi;
    i64toi32_i32$2 = $273;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $13$hi;
    i64toi32_i32$5 = $13;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $274 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $274 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $13 = $274;
    $13$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    $424 = $3;
    $424$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$0 = $4;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $276 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $276 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $426$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $424$hi;
    i64toi32_i32$1 = $424;
    i64toi32_i32$0 = $426$hi;
    i64toi32_i32$2 = $276;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $4 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $4$hi = i64toi32_i32$0;
   }
   label$17 : {
    if (($6 | 0) < (32767 | 0)) {
     break label$17
    }
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$5 = $16;
    i64toi32_i32$1 = 2147418112;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $16 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $16$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $1 = 0;
    $1$hi = i64toi32_i32$1;
    break label$3;
   }
   label$18 : {
    label$19 : {
     if (($6 | 0) > (0 | 0)) {
      break label$19
     }
     label$20 : {
      $7 = 1 - $6 | 0;
      if ($7 >>> 0 > 127 >>> 0) {
       break label$20
      }
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$1 = $4$hi;
      $6 = $6 + 127 | 0;
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$5 = $4$hi;
      __ashlti3($5 + 48 | 0 | 0, $13 | 0, i64toi32_i32$1 | 0, $4 | 0, i64toi32_i32$5 | 0, $6 | 0);
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$5 = $1$hi;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$1 = $1$hi;
      __ashlti3($5 + 32 | 0 | 0, $2 | 0, i64toi32_i32$5 | 0, $1 | 0, i64toi32_i32$1 | 0, $6 | 0);
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$5 = $4$hi;
      __lshrti3($5 + 16 | 0 | 0, $13 | 0, i64toi32_i32$1 | 0, $4 | 0, i64toi32_i32$5 | 0, $7 | 0);
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$5 = $1$hi;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$1 = $1$hi;
      __lshrti3($5 | 0, $2 | 0, i64toi32_i32$5 | 0, $1 | 0, i64toi32_i32$1 | 0, $7 | 0);
      i64toi32_i32$0 = $5;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
      $460 = i64toi32_i32$1;
      $460$hi = i64toi32_i32$5;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
      $462 = i64toi32_i32$5;
      $462$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $460$hi;
      i64toi32_i32$0 = $460;
      i64toi32_i32$5 = $462$hi;
      i64toi32_i32$2 = $462;
      i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
      $463 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      $463$hi = i64toi32_i32$5;
      i64toi32_i32$1 = $5;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] | 0;
      $465 = i64toi32_i32$5;
      $465$hi = i64toi32_i32$0;
      i64toi32_i32$1 = (i64toi32_i32$1 + 48 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $469 = i64toi32_i32$0;
      $469$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $465$hi;
      i64toi32_i32$1 = $465;
      i64toi32_i32$0 = $469$hi;
      i64toi32_i32$2 = $469;
      i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = 0;
      $471 = (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$5 = 0;
      $472$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $463$hi;
      i64toi32_i32$2 = $463;
      i64toi32_i32$0 = $472$hi;
      i64toi32_i32$1 = $471;
      i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
      $13 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
      $13$hi = i64toi32_i32$0;
      i64toi32_i32$5 = ($5 + 32 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $477 = i64toi32_i32$0;
      $477$hi = i64toi32_i32$2;
      i64toi32_i32$5 = ($5 + 16 | 0) + 8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $481 = i64toi32_i32$2;
      $481$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $477$hi;
      i64toi32_i32$5 = $477;
      i64toi32_i32$2 = $481$hi;
      i64toi32_i32$1 = $481;
      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      $4 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
      $4$hi = i64toi32_i32$2;
      i64toi32_i32$0 = $5 + 8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $1 = i64toi32_i32$2;
      $1$hi = i64toi32_i32$5;
      i64toi32_i32$0 = $5;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $2 = i64toi32_i32$5;
      $2$hi = i64toi32_i32$2;
      break label$18;
     }
     i64toi32_i32$2 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$3;
    }
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = $6;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $277 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
     $277 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $490$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$2 = $1;
    i64toi32_i32$0 = 65535;
    i64toi32_i32$1 = -1;
    i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
    $492 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
    $492$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $490$hi;
    i64toi32_i32$5 = $277;
    i64toi32_i32$2 = $492$hi;
    i64toi32_i32$1 = $492;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $1$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $16$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$0 = $1;
   i64toi32_i32$5 = $16$hi;
   i64toi32_i32$1 = $16;
   i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   $16 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $16$hi = i64toi32_i32$5;
   label$21 : {
    i64toi32_i32$5 = $13$hi;
    $498 = !($13 | i64toi32_i32$5 | 0);
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$2 = $4;
    i64toi32_i32$0 = -1;
    i64toi32_i32$1 = -1;
    if ((i64toi32_i32$5 | 0) > (i64toi32_i32$0 | 0)) {
     $278 = 1
    } else {
     if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$1 >>> 0) {
       $279 = 0
      } else {
       $279 = 1
      }
      $280 = $279;
     } else {
      $280 = 0
     }
     $278 = $280;
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4;
    i64toi32_i32$5 = -2147483648;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) | 0 ? $498 : $278) {
     break label$21
    }
    i64toi32_i32$1 = $16$hi;
    $504 = $16;
    $504$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $1 = i64toi32_i32$4;
    $1$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$5 = $2;
    $509 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
    i64toi32_i32$1 = 0;
    $510$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $504$hi;
    i64toi32_i32$5 = $504;
    i64toi32_i32$3 = $510$hi;
    i64toi32_i32$0 = $509;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $16 = i64toi32_i32$2;
    $16$hi = i64toi32_i32$4;
    break label$3;
   }
   label$22 : {
    i64toi32_i32$4 = $13$hi;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$1 = $4;
    i64toi32_i32$5 = -2147483648;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
    $514 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
    $514$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $13$hi;
    i64toi32_i32$4 = $13;
    i64toi32_i32$1 = $514$hi;
    i64toi32_i32$0 = $514;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) | 0) {
     break label$22
    }
    i64toi32_i32$5 = $2$hi;
    $1 = $2;
    $1$hi = i64toi32_i32$5;
    break label$3;
   }
   i64toi32_i32$5 = $16$hi;
   $518 = $16;
   $518$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$0 = $2;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
   $521 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   $521$hi = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$5 = i64toi32_i32$0;
   i64toi32_i32$0 = $521$hi;
   i64toi32_i32$4 = $521;
   i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $1 = i64toi32_i32$3;
   $1$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = i64toi32_i32$3;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$4 = $2;
   $525 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $526$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $518$hi;
   i64toi32_i32$4 = $518;
   i64toi32_i32$2 = $526$hi;
   i64toi32_i32$5 = $525;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $16 = i64toi32_i32$0;
   $16$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = $1$hi;
  i64toi32_i32$4 = $0;
  HEAP32[i64toi32_i32$4 >> 2] = $1;
  HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$3 = $16$hi;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $16;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$3;
  label$23 : {
   $11 = $5 + 96 | 0;
   if ($11 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $11;
  }
 }
 
 function __addtf3($0, $1, $1$hi, $2, $2$hi, $3, $3$hi, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, $6 = 0, $7 = 0, $5 = 0, $11$hi = 0, $11 = 0, $12$hi = 0, $13$hi = 0, $12 = 0, $13 = 0, i64toi32_i32$6 = 0, $14$hi = 0, $8 = 0, $125 = 0, $126 = 0, $128 = 0, $129 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $14 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $10 = 0, $9 = 0, $27 = 0, $33 = 0, $34$hi = 0, $38 = 0, $45 = 0, $49 = 0, $50$hi = 0, $54 = 0, $59 = 0, $61 = 0, $69 = 0, $71 = 0, $79 = 0, $79$hi = 0, $85 = 0, $85$hi = 0, $89 = 0, $89$hi = 0, $99 = 0, $99$hi = 0, $127 = 0, $130 = 0, $157 = 0, $158 = 0, $158$hi = 0, $159 = 0, $159$hi = 0, $166$hi = 0, $169$hi = 0, $189 = 0, $190 = 0, $190$hi = 0, $191 = 0, $191$hi = 0, $198$hi = 0, $201$hi = 0, $214 = 0, $214$hi = 0, $216$hi = 0, $220 = 0, $220$hi = 0, $222$hi = 0, $248 = 0, $248$hi = 0, $250 = 0, $250$hi = 0, $254 = 0, $254$hi = 0, $256 = 0, $257$hi = 0, $275$hi = 0, $278 = 0, $279$hi = 0, $288 = 0, $289 = 0, $289$hi = 0, $290 = 0, $290$hi = 0, $297$hi = 0, $300$hi = 0, $315 = 0, $315$hi = 0, $321 = 0, $322$hi = 0, $328 = 0, $328$hi = 0, $330$hi = 0, $331 = 0, $331$hi = 0, $333 = 0, $333$hi = 0, $360 = 0, $360$hi = 0, $362 = 0, $362$hi = 0, $366 = 0, $366$hi = 0, $368 = 0, $369$hi = 0, $376$hi = 0, $378 = 0, $378$hi = 0, $381$hi = 0, $382 = 0, $382$hi = 0, $384 = 0, $384$hi = 0, $386$hi = 0, $394$hi = 0, $398 = 0, $399$hi = 0, $400 = 0, $400$hi = 0, $148 = 0, $411 = 0, $412$hi = 0;
  label$1 : {
   $5 = global$0 - 112 | 0;
   $9 = $5;
   if ($5 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $9;
  }
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $11 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $11$hi = i64toi32_i32$1;
  label$3 : {
   label$4 : {
    label$5 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $12 = i64toi32_i32$4;
     $12$hi = i64toi32_i32$5;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$0 = -1;
     i64toi32_i32$3 = -1;
     $27 = (i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$3 = $2;
     i64toi32_i32$5 = 2147483647;
     i64toi32_i32$0 = -1;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     $13 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
     $13$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $12$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $12$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$0 = $1;
     $33 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $34$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$0 = $13;
     i64toi32_i32$5 = $34$hi;
     i64toi32_i32$3 = $33;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$0 = -1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $12 = i64toi32_i32$5;
     $12$hi = i64toi32_i32$2;
     i64toi32_i32$4 = i64toi32_i32$5;
     i64toi32_i32$1 = 2147418111;
     i64toi32_i32$3 = -1;
     $38 = i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$2 = 2147418111;
     i64toi32_i32$1 = -1;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) | 0 ? $27 : $38) {
      break label$5
     }
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3;
     i64toi32_i32$4 = -1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $12 = i64toi32_i32$0;
     $12$hi = i64toi32_i32$5;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = -1;
     $45 = (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$1 = $3;
     $49 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $50$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$1 = $11;
     i64toi32_i32$3 = $50$hi;
     i64toi32_i32$5 = $49;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$1 = -1;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $12 = i64toi32_i32$3;
     $12$hi = i64toi32_i32$4;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$2 = 2147418111;
     i64toi32_i32$5 = -1;
     $54 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$4 = 2147418111;
     i64toi32_i32$2 = -1;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) | 0 ? $45 : $54) {
      break label$4
     }
    }
    label$6 : {
     i64toi32_i32$5 = $1$hi;
     $59 = !($1 | i64toi32_i32$5 | 0);
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$2 = $13;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$4 = 0;
     $61 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$4 = $13;
     i64toi32_i32$5 = 2147418112;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) | 0 ? $59 : $61) {
      break label$6
     }
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$0 = $2;
     i64toi32_i32$2 = 32768;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     $4 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     $3 = $1;
     $3$hi = i64toi32_i32$2;
     break label$3;
    }
    label$7 : {
     i64toi32_i32$2 = $3$hi;
     $69 = !($3 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$4 = $11;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$5 = 0;
     $71 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$5 = $11;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) | 0 ? $69 : $71) {
      break label$7
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$0 = $4;
     i64toi32_i32$4 = 32768;
     i64toi32_i32$2 = 0;
     i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
     $4 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $4$hi = i64toi32_i32$4;
     break label$3;
    }
    label$8 : {
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$5 = $13;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = i64toi32_i32$4 ^ i64toi32_i32$0 | 0;
     $79 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
     $79$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$4 = $1;
     i64toi32_i32$5 = $79$hi;
     i64toi32_i32$2 = $79;
     i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0) | 0) {
      break label$8
     }
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$2 = $3;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$4 = $1;
     i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
     $85 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
     $85$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$0 = $4;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$4 = $2;
     i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$4 | 0;
     i64toi32_i32$0 = -2147483648;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
     $89 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
     $89$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $85$hi;
     i64toi32_i32$2 = $85;
     i64toi32_i32$5 = $89$hi;
     i64toi32_i32$4 = $89;
     i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     $6 = !(i64toi32_i32$2 | i64toi32_i32$4 | 0 | i64toi32_i32$5 | 0);
     i64toi32_i32$1 = $6;
     i64toi32_i32$5 = 2147450880;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$4 = i64toi32_i32$1 ? 0 : $2;
     i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$2;
     $4 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = i64toi32_i32$1 ? 0 : $1;
     i64toi32_i32$1 = i64toi32_i32$1 ? i64toi32_i32$0 : i64toi32_i32$4;
     $3 = i64toi32_i32$5;
     $3$hi = i64toi32_i32$1;
     break label$3;
    }
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$2 = $11;
    i64toi32_i32$5 = 2147418112;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
    $99 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
    $99$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$1 = $3;
    i64toi32_i32$2 = $99$hi;
    i64toi32_i32$0 = $99;
    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
     break label$3
    }
    label$9 : {
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$5 = $1;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$0 = $13;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | 0) {
      break label$9
     }
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$0 = $3;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$5 = $11;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$3
     }
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$5 = $3;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1;
     i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
     $3 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
     $3$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = $4;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$0 = $2;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     $4 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
     $4$hi = i64toi32_i32$5;
     break label$3;
    }
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$1 = $3;
    i64toi32_i32$2 = $11$hi;
    i64toi32_i32$0 = $11;
    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$1 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
     break label$4
    }
    i64toi32_i32$2 = $1$hi;
    $3 = $1;
    $3$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    $4 = $2;
    $4$hi = i64toi32_i32$2;
    break label$3;
   }
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$5 = $3;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1;
   $127 = i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$5 = $11$hi;
   i64toi32_i32$5 = $13$hi;
   i64toi32_i32$5 = $11$hi;
   i64toi32_i32$0 = $11;
   i64toi32_i32$2 = $13$hi;
   i64toi32_i32$1 = $13;
   $130 = i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$1 = $11;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = $13;
   $7 = (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) | 0 ? $127 : $130;
   i64toi32_i32$4 = $7;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = i64toi32_i32$4 ? $3 : $1;
   i64toi32_i32$2 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$0;
   $11 = i64toi32_i32$5;
   $11$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = i64toi32_i32$4 ? $4 : $2;
   i64toi32_i32$4 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$5;
   $13 = i64toi32_i32$1;
   $13$hi = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$1 = 65535;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
   $12 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $12$hi = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$5 = $7;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$2 = i64toi32_i32$5 ? $2 : $4;
   i64toi32_i32$4 = i64toi32_i32$5 ? i64toi32_i32$1 : i64toi32_i32$0;
   $2 = i64toi32_i32$2;
   $2$hi = i64toi32_i32$4;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 48;
   i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $125 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
    $125 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
   }
   $8 = $125 & 32767 | 0;
   label$10 : {
    i64toi32_i32$2 = $13$hi;
    i64toi32_i32$4 = $13;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $126 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $126 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
    }
    $6 = $126 & 32767 | 0;
    if ($6) {
     break label$10
    }
    $157 = $5 + 96 | 0;
    i64toi32_i32$5 = $11$hi;
    $158 = $11;
    $158$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $12$hi;
    $159 = $12;
    $159$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$5 = $12$hi;
    $6 = !($12 | i64toi32_i32$5 | 0);
    i64toi32_i32$0 = $6;
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$1 = i64toi32_i32$0 ? $11 : $12;
    i64toi32_i32$2 = i64toi32_i32$0 ? i64toi32_i32$5 : i64toi32_i32$4;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$2);
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $128 = Math_clz32(i64toi32_i32$1) + 32 | 0
    } else {
     $128 = i64toi32_i32$5
    }
    $166$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $169$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $166$hi;
    i64toi32_i32$1 = $128;
    i64toi32_i32$2 = $169$hi;
    i64toi32_i32$5 = $6 << 6 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $6 = i64toi32_i32$4;
    i64toi32_i32$3 = $158$hi;
    i64toi32_i32$1 = $159$hi;
    __ashlti3($157 | 0, $158 | 0, i64toi32_i32$3 | 0, $159 | 0, i64toi32_i32$1 | 0, i64toi32_i32$4 + -15 | 0 | 0);
    $6 = 16 - i64toi32_i32$4 | 0;
    i64toi32_i32$0 = $5 + 104 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $12 = i64toi32_i32$1;
    $12$hi = i64toi32_i32$3;
    i64toi32_i32$0 = $5;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 100 | 0) >> 2] | 0;
    $11 = i64toi32_i32$3;
    $11$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $7;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$5 = i64toi32_i32$2 ? $1 : $3;
   i64toi32_i32$0 = i64toi32_i32$2 ? i64toi32_i32$1 : i64toi32_i32$3;
   $3 = i64toi32_i32$5;
   $3$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$2 = $2;
   i64toi32_i32$5 = 65535;
   i64toi32_i32$1 = -1;
   i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
   $1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   $1$hi = i64toi32_i32$5;
   label$11 : {
    if ($8) {
     break label$11
    }
    $189 = $5 + 80 | 0;
    i64toi32_i32$5 = $3$hi;
    $190 = $3;
    $190$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    $191 = $1;
    $191$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $1$hi;
    $7 = !($1 | i64toi32_i32$5 | 0);
    i64toi32_i32$3 = $7;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$1 = i64toi32_i32$3 ? $3 : $1;
    i64toi32_i32$0 = i64toi32_i32$3 ? i64toi32_i32$5 : i64toi32_i32$2;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$0);
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $129 = Math_clz32(i64toi32_i32$1) + 32 | 0
    } else {
     $129 = i64toi32_i32$5
    }
    $198$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $201$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $198$hi;
    i64toi32_i32$1 = $129;
    i64toi32_i32$0 = $201$hi;
    i64toi32_i32$5 = $7 << 6 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $7 = i64toi32_i32$2;
    i64toi32_i32$4 = $190$hi;
    i64toi32_i32$1 = $191$hi;
    __ashlti3($189 | 0, $190 | 0, i64toi32_i32$4 | 0, $191 | 0, i64toi32_i32$1 | 0, i64toi32_i32$2 + -15 | 0 | 0);
    $8 = 16 - i64toi32_i32$2 | 0;
    i64toi32_i32$3 = $5 + 88 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $1 = i64toi32_i32$1;
    $1$hi = i64toi32_i32$4;
    i64toi32_i32$3 = $5;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 80 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 84 | 0) >> 2] | 0;
    $3 = i64toi32_i32$4;
    $3$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
    $131 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
    $131 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
   }
   $214 = $131;
   $214$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$1 = $3;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $132 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
    $132 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
   }
   $216$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $214$hi;
   i64toi32_i32$4 = $214;
   i64toi32_i32$1 = $216$hi;
   i64toi32_i32$5 = $132;
   i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
   i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   i64toi32_i32$4 = 524288;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   $4 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $12$hi;
   i64toi32_i32$1 = $12;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
    $133 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
    $133 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
   }
   $220 = $133;
   $220$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $11$hi;
   i64toi32_i32$4 = $11;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $134 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
    $134 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
   }
   $222$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $220$hi;
   i64toi32_i32$3 = $220;
   i64toi32_i32$4 = $222$hi;
   i64toi32_i32$5 = $134;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   $1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $1$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$1 = $3;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
    $135 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
    $135 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
   }
   $3 = $135;
   $3$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $13$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $13$hi;
   i64toi32_i32$4 = $13;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$5 = $2;
   i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $12 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
   $12$hi = i64toi32_i32$1;
   label$12 : {
    $7 = $6 - $8 | 0;
    if (!$7) {
     break label$12
    }
    label$13 : {
     if ($7 >>> 0 <= 127 >>> 0) {
      break label$13
     }
     i64toi32_i32$1 = 0;
     $4 = 0;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $3 = 1;
     $3$hi = i64toi32_i32$1;
     break label$12;
    }
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$4 = $4$hi;
    __ashlti3($5 + 64 | 0 | 0, $3 | 0, i64toi32_i32$1 | 0, $4 | 0, i64toi32_i32$4 | 0, 128 - $7 | 0 | 0);
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    __lshrti3($5 + 48 | 0 | 0, $3 | 0, i64toi32_i32$4 | 0, $4 | 0, i64toi32_i32$1 | 0, $7 | 0);
    i64toi32_i32$3 = $5;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 48 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 52 | 0) >> 2] | 0;
    $248 = i64toi32_i32$1;
    $248$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
    $250 = i64toi32_i32$4;
    $250$hi = i64toi32_i32$1;
    i64toi32_i32$3 = (i64toi32_i32$3 + 64 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $254 = i64toi32_i32$1;
    $254$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $250$hi;
    i64toi32_i32$3 = $250;
    i64toi32_i32$1 = $254$hi;
    i64toi32_i32$5 = $254;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 0;
    $256 = (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$4 = 0;
    $257$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $248$hi;
    i64toi32_i32$5 = $248;
    i64toi32_i32$1 = $257$hi;
    i64toi32_i32$3 = $256;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $3$hi = i64toi32_i32$1;
    i64toi32_i32$4 = ($5 + 48 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $4 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$5;
   }
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$4 = $1;
   i64toi32_i32$1 = 524288;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   $14 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $14$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $11$hi;
   i64toi32_i32$5 = $11;
   i64toi32_i32$4 = 0;
   i64toi32_i32$3 = 3;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    $136 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
    $136 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
   }
   $2 = $136;
   $2$hi = i64toi32_i32$4;
   label$14 : {
    label$15 : {
     i64toi32_i32$4 = $12$hi;
     i64toi32_i32$1 = $12;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = -1;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$5 | 0)) {
      $137 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$3 >>> 0) {
        $138 = 0
       } else {
        $138 = 1
       }
       $139 = $138;
      } else {
       $139 = 0
      }
      $137 = $139;
     }
     if ($137) {
      break label$15
     }
     label$16 : {
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$3 = $2;
      i64toi32_i32$4 = $3$hi;
      i64toi32_i32$5 = $3;
      i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
      $1 = i64toi32_i32$0;
      $1$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $14$hi;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$2 = $14$hi;
      i64toi32_i32$1 = $14;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$5 = $4;
      i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
      $275$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$5 = $3;
      $278 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $279$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $275$hi;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$0 = $279$hi;
      i64toi32_i32$1 = $278;
      i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
      i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0;
      i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
      $3 = i64toi32_i32$3;
      $3$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1$hi;
      i64toi32_i32$2 = $1;
      i64toi32_i32$5 = $3$hi;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
      if (!!(i64toi32_i32$2 | i64toi32_i32$1 | 0 | i64toi32_i32$5 | 0)) {
       break label$16
      }
      i64toi32_i32$5 = 0;
      $3 = 0;
      $3$hi = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      $4 = 0;
      $4$hi = i64toi32_i32$5;
      break label$3;
     }
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$4 = $3;
     i64toi32_i32$2 = 524287;
     i64toi32_i32$1 = -1;
     if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$14
     }
     $288 = $5 + 32 | 0;
     i64toi32_i32$4 = $1$hi;
     $289 = $1;
     $289$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     $290 = $3;
     $290$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $3$hi;
     $7 = !($3 | i64toi32_i32$4 | 0);
     i64toi32_i32$0 = $7;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$2 = i64toi32_i32$0 ? $1 : $3;
     i64toi32_i32$1 = i64toi32_i32$0 ? i64toi32_i32$4 : i64toi32_i32$5;
     i64toi32_i32$4 = Math_clz32(i64toi32_i32$1);
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$4 | 0) == (32 | 0)) {
      $140 = Math_clz32(i64toi32_i32$2) + 32 | 0
     } else {
      $140 = i64toi32_i32$4
     }
     $297$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $300$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $297$hi;
     i64toi32_i32$2 = $140;
     i64toi32_i32$1 = $300$hi;
     i64toi32_i32$4 = $7 << 6 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $7 = i64toi32_i32$5 + -12 | 0;
     i64toi32_i32$3 = $289$hi;
     i64toi32_i32$2 = $290$hi;
     __ashlti3($288 | 0, $289 | 0, i64toi32_i32$3 | 0, $290 | 0, i64toi32_i32$2 | 0, $7 | 0);
     $6 = $6 - $7 | 0;
     i64toi32_i32$0 = $5 + 40 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $3 = i64toi32_i32$2;
     $3$hi = i64toi32_i32$3;
     i64toi32_i32$0 = $5;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
     $1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$2;
     break label$14;
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $14$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$0 = $4;
    i64toi32_i32$3 = $14$hi;
    i64toi32_i32$4 = $14;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $315 = i64toi32_i32$1;
    $315$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = $3;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$4 = $2;
    i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $1 = i64toi32_i32$3;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$4 = $3;
    $321 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
    i64toi32_i32$5 = 0;
    $322$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $315$hi;
    i64toi32_i32$4 = $315;
    i64toi32_i32$1 = $322$hi;
    i64toi32_i32$2 = $321;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
    i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $3 = i64toi32_i32$0;
    $3$hi = i64toi32_i32$3;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$4 = 1048576;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
    if (!(i64toi32_i32$5 & i64toi32_i32$2 | 0 | i64toi32_i32$4 | 0)) {
     break label$14
    }
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $141 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
     $141 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
    }
    $328 = $141;
    $328$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$4 = $3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
     $142 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
     $142 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
    }
    $330$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $328$hi;
    i64toi32_i32$5 = $328;
    i64toi32_i32$4 = $330$hi;
    i64toi32_i32$2 = $142;
    i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
    $331 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $331$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
    $333 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    $333$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $331$hi;
    i64toi32_i32$4 = $331;
    i64toi32_i32$3 = $333$hi;
    i64toi32_i32$2 = $333;
    i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    $1$hi = i64toi32_i32$3;
    $6 = $6 + 1 | 0;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$5 = $3;
    i64toi32_i32$4 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $143 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
     $143 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
    }
    $3 = $143;
    $3$hi = i64toi32_i32$4;
   }
   i64toi32_i32$4 = $13$hi;
   i64toi32_i32$3 = $13;
   i64toi32_i32$5 = -2147483648;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
   $4 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $4$hi = i64toi32_i32$5;
   label$17 : {
    if (($6 | 0) < (32767 | 0)) {
     break label$17
    }
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$4 = $4;
    i64toi32_i32$3 = 2147418112;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $4 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    $4$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $3 = 0;
    $3$hi = i64toi32_i32$3;
    break label$3;
   }
   $7 = 0;
   label$18 : {
    label$19 : {
     if (($6 | 0) <= (0 | 0)) {
      break label$19
     }
     $7 = $6;
     break label$18;
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$4 = $3$hi;
    __ashlti3($5 + 16 | 0 | 0, $1 | 0, i64toi32_i32$3 | 0, $3 | 0, i64toi32_i32$4 | 0, $6 + 127 | 0 | 0);
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$3 = $3$hi;
    __lshrti3($5 | 0, $1 | 0, i64toi32_i32$4 | 0, $3 | 0, i64toi32_i32$3 | 0, 1 - $6 | 0 | 0);
    i64toi32_i32$5 = $5;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $360 = i64toi32_i32$3;
    $360$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 16 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 20 | 0) >> 2] | 0;
    $362 = i64toi32_i32$4;
    $362$hi = i64toi32_i32$3;
    i64toi32_i32$5 = (i64toi32_i32$5 + 16 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $366 = i64toi32_i32$3;
    $366$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $362$hi;
    i64toi32_i32$5 = $362;
    i64toi32_i32$3 = $366$hi;
    i64toi32_i32$2 = $366;
    i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 0;
    $368 = (i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$4 = 0;
    $369$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $360$hi;
    i64toi32_i32$2 = $360;
    i64toi32_i32$3 = $369$hi;
    i64toi32_i32$5 = $368;
    i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
    $1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    $1$hi = i64toi32_i32$3;
    i64toi32_i32$4 = $5 + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $3 = i64toi32_i32$3;
    $3$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$4 = $3;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $144 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
    $144 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
   }
   i64toi32_i32$2 = $144;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$5 = -1;
   i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
   $376$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$4 = $376$hi;
   i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$5 = $4;
   i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
   $378 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $378$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = $7;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 48;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
    $145 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
    $145 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
   }
   $381$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $378$hi;
   i64toi32_i32$2 = $378;
   i64toi32_i32$4 = $381$hi;
   i64toi32_i32$5 = $145;
   i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
   $382 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   $382$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $146 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
    $146 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
   }
   $384 = $146;
   $384$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$4 = $3;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
    $147 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
    $147 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
   }
   $386$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $384$hi;
   i64toi32_i32$2 = $384;
   i64toi32_i32$4 = $386$hi;
   i64toi32_i32$5 = $147;
   i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
   $4 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $1$hi;
   $6 = $1 & 7 | 0;
   i64toi32_i32$4 = 0;
   $394$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$3 = $4;
   i64toi32_i32$2 = $394$hi;
   i64toi32_i32$5 = $6 >>> 0 > 4 >>> 0;
   i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $3 = i64toi32_i32$1;
   $3$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$5 = $4;
   $398 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$4 = 0;
   $399$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $382$hi;
   i64toi32_i32$5 = $382;
   i64toi32_i32$0 = $399$hi;
   i64toi32_i32$3 = $398;
   i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $400 = i64toi32_i32$2;
   $400$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$4 = $3;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = 1;
   i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   i64toi32_i32$0 = ($6 | 0) == (4 | 0);
   $148 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
   i64toi32_i32$4 = 0;
   i64toi32_i32$3 = i64toi32_i32$0 ? $148 : 0;
   i64toi32_i32$1 = i64toi32_i32$0 ? i64toi32_i32$5 : i64toi32_i32$4;
   $1 = i64toi32_i32$3;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = i64toi32_i32$3;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$5 = $3;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $3 = i64toi32_i32$4;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = $1;
   $411 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $412$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $400$hi;
   i64toi32_i32$5 = $400;
   i64toi32_i32$2 = $412$hi;
   i64toi32_i32$0 = $411;
   i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $4 = i64toi32_i32$3;
   $4$hi = i64toi32_i32$4;
  }
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$5 = $0;
  HEAP32[i64toi32_i32$5 >> 2] = $3;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$4;
  i64toi32_i32$4 = $4$hi;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $4;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$4;
  label$20 : {
   $10 = $5 + 112 | 0;
   if ($10 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $10;
  }
 }
 
 function __extenddftf2($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, $8 = 0, $8$hi = 0, $2 = 0, $6 = 0, $9 = 0, $9$hi = 0, $6$hi = 0, $3 = 0, $7$hi = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $5 = 0, $4 = 0, $7 = 0, $58 = 0, $58$hi = 0, $62$hi = 0, $71 = 0;
  label$1 : {
   $2 = global$0 - 16 | 0;
   $4 = $2;
   if ($2 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $4;
  }
  wasm2js_scratch_store_f64(+$1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  $6 = wasm2js_scratch_load_i32(0 | 0) | 0;
  $6$hi = i64toi32_i32$0;
  i64toi32_i32$2 = $6;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $7 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $7$hi = i64toi32_i32$1;
  label$3 : {
   label$4 : {
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    $8 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
    $8$hi = i64toi32_i32$2;
    i64toi32_i32$1 = $8;
    i64toi32_i32$0 = -1048576;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    i64toi32_i32$2 = i64toi32_i32$4;
    i64toi32_i32$1 = 2145386495;
    i64toi32_i32$3 = -1;
    if (i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$4
    }
    i64toi32_i32$2 = $8$hi;
    i64toi32_i32$3 = $8;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 60;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
     $24 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
     $24 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
    }
    $9 = $24;
    $9$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $8$hi;
    i64toi32_i32$2 = $8;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $25 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $25 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
    }
    i64toi32_i32$5 = $25;
    i64toi32_i32$2 = 1006632960;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $8 = i64toi32_i32$0;
    $8$hi = i64toi32_i32$4;
    break label$3;
   }
   label$5 : {
    i64toi32_i32$4 = $8$hi;
    i64toi32_i32$3 = $8;
    i64toi32_i32$5 = 2146435072;
    i64toi32_i32$1 = 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
     break label$5
    }
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$1 = $6;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 60;
    i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     $26 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$2 | 0) | 0;
     $26 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    }
    $9 = $26;
    $9$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $6$hi;
    i64toi32_i32$3 = $6;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 4;
    i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $27 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
     $27 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
    }
    i64toi32_i32$4 = $27;
    i64toi32_i32$3 = 2147418112;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
    $8 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $8$hi = i64toi32_i32$3;
    break label$3;
   }
   label$6 : {
    i64toi32_i32$3 = $8$hi;
    if (!!($8 | i64toi32_i32$3 | 0)) {
     break label$6
    }
    i64toi32_i32$3 = 0;
    $9 = 0;
    $9$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $8 = 0;
    $8$hi = i64toi32_i32$3;
    break label$3;
   }
   label$7 : {
    label$8 : {
     i64toi32_i32$3 = $8$hi;
     i64toi32_i32$1 = $8;
     i64toi32_i32$4 = 1;
     i64toi32_i32$5 = 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0) {
      break label$8
     }
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$5 = $8;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $28 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
      $28 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$2 | 0) | 0;
     }
     $3 = Math_clz32($28);
     break label$7;
    }
    i64toi32_i32$3 = $6$hi;
    $3 = Math_clz32($6) + 32 | 0;
   }
   i64toi32_i32$3 = $8$hi;
   i64toi32_i32$5 = 0;
   __ashlti3($2 | 0, $8 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, $3 + 49 | 0 | 0);
   i64toi32_i32$1 = $2 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$5 | 0;
   $58 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
   $58$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = 15372 - $3 | 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 48;
   i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
    $29 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
    $29 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
   }
   $62$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $58$hi;
   i64toi32_i32$5 = $58;
   i64toi32_i32$3 = $62$hi;
   i64toi32_i32$4 = $29;
   i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
   $8 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
   $8$hi = i64toi32_i32$3;
   i64toi32_i32$1 = $2;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $9 = i64toi32_i32$3;
   $9$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $9$hi;
  i64toi32_i32$3 = $0;
  HEAP32[i64toi32_i32$3 >> 2] = $9;
  HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $8$hi;
  i64toi32_i32$5 = $7$hi;
  i64toi32_i32$5 = $8$hi;
  i64toi32_i32$1 = $8;
  i64toi32_i32$3 = $7$hi;
  i64toi32_i32$4 = $7;
  i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
  $71 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
  i64toi32_i32$1 = $0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $71;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$3;
  label$9 : {
   $5 = $2 + 16 | 0;
   if ($5 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $5;
  }
 }
 
 function __letf2($0, $0$hi, $1, $1$hi, $2, $2$hi, $3, $3$hi) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $4 = 0, $5 = 0, $6 = 0, $5$hi = 0, $6$hi = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $8 = 0, $12 = 0, $17 = 0, $21 = 0, $27 = 0, $27$hi = 0, $30 = 0, $30$hi = 0, $40 = 0, $50 = 0, $50$hi = 0, $53 = 0, $53$hi = 0, $58 = 0, $68 = 0, $68$hi = 0, $71 = 0, $71$hi = 0;
  $4 = 1;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8 : $12) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17 : $21) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36 = 0
      } else {
       $36 = 1
      }
      $37 = $36;
     } else {
      $37 = 0
     }
     $35 = $37;
    }
    if ($35) {
     break label$3
    }
    $4 = -1;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2;
    $40 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $38 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $39 = 0
      } else {
       $39 = 1
      }
      $41 = $39;
     } else {
      $41 = 0
     }
     $38 = $41;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40 : $38) {
     break label$1
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $50 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $53 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $53$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$0 = $50;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$1 = $53;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   $4 = -1;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $0;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2;
   $58 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $42 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $43 = 0
     } else {
      $43 = 1
     }
     $44 = $43;
    } else {
     $44 = 0
    }
    $42 = $44;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58 : $42) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $68 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $68$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $71 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $71$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $68$hi;
   i64toi32_i32$0 = $68;
   i64toi32_i32$3 = $71$hi;
   i64toi32_i32$1 = $71;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4 | 0;
 }
 
 function __getf2($0, $0$hi, $1, $1$hi, $2, $2$hi, $3, $3$hi) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $5 = 0, $6 = 0, $4 = 0, $5$hi = 0, $6$hi = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $8 = 0, $12 = 0, $17 = 0, $21 = 0, $27 = 0, $27$hi = 0, $30 = 0, $30$hi = 0, $40 = 0, $50 = 0, $50$hi = 0, $53 = 0, $53$hi = 0, $58 = 0, $68 = 0, $68$hi = 0, $71 = 0, $71$hi = 0;
  $4 = -1;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8 : $12) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17 : $21) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36 = 0
      } else {
       $36 = 1
      }
      $37 = $36;
     } else {
      $37 = 0
     }
     $35 = $37;
    }
    if ($35) {
     break label$3
    }
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2;
    $40 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $38 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $39 = 0
      } else {
       $39 = 1
      }
      $41 = $39;
     } else {
      $41 = 0
     }
     $38 = $41;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40 : $38) {
     break label$1
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $50 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $53 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $53$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$0 = $50;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$1 = $53;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $0;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2;
   $58 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $42 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $43 = 0
     } else {
      $43 = 1
     }
     $44 = $43;
    } else {
     $44 = 0
    }
    $42 = $44;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58 : $42) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $68 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $68$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $71 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $71$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $68$hi;
   i64toi32_i32$0 = $68;
   i64toi32_i32$3 = $71$hi;
   i64toi32_i32$1 = $71;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4 | 0;
 }
 
 function copysignl($0, $1, $1$hi, $2, $2$hi, $3, $3$hi, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $22 = 0, $23 = 0, $24 = 0, $7 = 0, $11 = 0, $18$hi = 0, $20 = 0, $20$hi = 0, $21 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0;
  HEAP32[i64toi32_i32$1 >> 2] = $1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $7 = i64toi32_i32$1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $22 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $22 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $11 = $22 & 32768 | 0;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $23 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $23 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $11 | ($23 & 32767 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $18$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $20 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $20$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $18$hi;
  i64toi32_i32$0 = $24;
  i64toi32_i32$2 = $20$hi;
  i64toi32_i32$3 = $20;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $21 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  i64toi32_i32$0 = $7;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $21;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function __floatunsitf($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $2 = 0, $5 = 0, $5$hi = 0, $6 = 0, $6$hi = 0, $19 = 0, $4 = 0, $3 = 0, $17 = 0, $26 = 0, $26$hi = 0, $30$hi = 0;
  label$1 : {
   $2 = global$0 - 16 | 0;
   $3 = $2;
   if ($2 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $3;
  }
  label$3 : {
   label$4 : {
    if ($1) {
     break label$4
    }
    i64toi32_i32$0 = 0;
    $5 = 0;
    $5$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $6 = 0;
    $6$hi = i64toi32_i32$0;
    break label$3;
   }
   i64toi32_i32$0 = 0;
   $17 = $1;
   $1 = Math_clz32($1) ^ 31 | 0;
   i64toi32_i32$1 = 0;
   __ashlti3($2 | 0, $17 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, 112 - $1 | 0 | 0);
   i64toi32_i32$2 = $2 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $26 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $26$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = $1 + 16383 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $19 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $19 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $30$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $26$hi;
   i64toi32_i32$1 = $26;
   i64toi32_i32$0 = $30$hi;
   i64toi32_i32$3 = $19;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $6 = i64toi32_i32$4;
   $6$hi = i64toi32_i32$5;
   i64toi32_i32$2 = $2;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $5 = i64toi32_i32$5;
   $5$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$5 = $0;
  HEAP32[i64toi32_i32$5 >> 2] = $5;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $6$hi;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $6;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$1;
  label$5 : {
   $4 = $2 + 16 | 0;
   if ($4 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $4;
  }
 }
 
 function __subtf3($0, $1, $1$hi, $2, $2$hi, $3, $3$hi, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, $5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $7 = 0, $6 = 0, $20 = 0, $20$hi = 0, $25 = 0;
  label$1 : {
   $5 = global$0 - 16 | 0;
   $6 = $5;
   if ($5 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $6;
  }
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $20 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $20$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$3 = $20$hi;
  __addtf3($5 | 0, $1 | 0, $1$hi | 0, $2 | 0, i64toi32_i32$2 | 0, $3 | 0, i64toi32_i32$0 | 0, $20 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $5;
  i64toi32_i32$3 = HEAP32[$5 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($5 + 4 | 0) >> 2] | 0;
  $1 = i64toi32_i32$3;
  $1$hi = i64toi32_i32$0;
  i64toi32_i32$2 = $5;
  i64toi32_i32$0 = HEAP32[($5 + 8 | 0) >> 2] | 0;
  i64toi32_i32$3 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  $25 = i64toi32_i32$0;
  i64toi32_i32$0 = $0;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $25;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$3 = $1$hi;
  HEAP32[i64toi32_i32$0 >> 2] = $1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  label$3 : {
   $7 = $5 + 16 | 0;
   if ($7 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $7;
  }
 }
 
 function scalbnl($0, $1, $1$hi, $2, $2$hi, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4 = 0, i64toi32_i32$4 = 0, $22 = 0, $6 = 0, $5 = 0, $76 = 0, $77 = 0, $77$hi = 0, $78 = 0, $78$hi = 0, $82$hi = 0, $86 = 0, $89 = 0;
  label$1 : {
   $4 = global$0 - 80 | 0;
   $5 = $4;
   if ($4 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $5;
  }
  label$3 : {
   label$4 : {
    if (($3 | 0) < (16384 | 0)) {
     break label$4
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 2147352576;
    __multf3($4 + 32 | 0 | 0, $1 | 0, i64toi32_i32$0 | 0, $2 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = ($4 + 32 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $2 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$1 = $4;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
    $1 = i64toi32_i32$2;
    $1$hi = i64toi32_i32$3;
    label$5 : {
     if (($3 | 0) >= (32767 | 0)) {
      break label$5
     }
     $3 = $3 + -16383 | 0;
     break label$3;
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 2147352576;
    __multf3($4 + 16 | 0 | 0, $1 | 0, i64toi32_i32$3 | 0, $2 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $3 = (($3 | 0) < (49149 | 0) ? $3 : 49149) + -32766 | 0;
    i64toi32_i32$2 = ($4 + 16 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $4;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
    $1 = i64toi32_i32$1;
    $1$hi = i64toi32_i32$0;
    break label$3;
   }
   if (($3 | 0) > (-16383 | 0)) {
    break label$3
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 65536;
   __multf3($4 + 64 | 0 | 0, $1 | 0, i64toi32_i32$0 | 0, $2 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$1 = ($4 + 64 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $2 = i64toi32_i32$3;
   $2$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $4;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
   $1 = i64toi32_i32$2;
   $1$hi = i64toi32_i32$3;
   label$6 : {
    if (($3 | 0) <= (-32765 | 0)) {
     break label$6
    }
    $3 = $3 + 16382 | 0;
    break label$3;
   }
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 65536;
   __multf3($4 + 48 | 0 | 0, $1 | 0, i64toi32_i32$3 | 0, $2 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $3 = (($3 | 0) > (-49146 | 0) ? $3 : -49146) + 32764 | 0;
   i64toi32_i32$2 = ($4 + 48 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $2 = i64toi32_i32$0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $4;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
   $1 = i64toi32_i32$1;
   $1$hi = i64toi32_i32$0;
  }
  $76 = $4;
  i64toi32_i32$0 = $1$hi;
  $77 = $1;
  $77$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  $78 = $2;
  $78$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3 + 16383 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $22 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $22 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $82$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $77$hi;
  i64toi32_i32$2 = $78$hi;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = $82$hi;
  __multf3($76 | 0, $77 | 0, i64toi32_i32$1 | 0, $78 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, $22 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $4 + 8 | 0;
  i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $86 = i64toi32_i32$3;
  i64toi32_i32$3 = $0;
  HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = $86;
  HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $4;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $89 = i64toi32_i32$0;
  i64toi32_i32$0 = $0;
  HEAP32[i64toi32_i32$0 >> 2] = $89;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  label$7 : {
   $6 = i64toi32_i32$2 + 80 | 0;
   if ($6 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $6;
  }
 }
 
 function __multi3($0, $1, $1$hi, $2, $2$hi, $3, $3$hi, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $53 = 0, $54 = 0, $6 = 0, $9 = 0, $9$hi = 0, $12 = 0, $12$hi = 0, $13 = 0, $13$hi = 0, $16 = 0, $16$hi = 0, $20 = 0, $20$hi = 0, $21 = 0, $21$hi = 0, $5 = 0, $5$hi = 0, $30$hi = 0, $33 = 0, $33$hi = 0, $36$hi = 0, $37 = 0, $37$hi = 0, $39 = 0, $39$hi = 0, $42 = 0, $42$hi = 0, $45$hi = 0, $47 = 0, $49$hi = 0, $51 = 0, $51$hi = 0, $52 = 0;
  $6 = $0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = __wasm_i64_mul($4 | 0, i64toi32_i32$0 | 0, $1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $9 = i64toi32_i32$1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$1 = __wasm_i64_mul($2 | 0, i64toi32_i32$0 | 0, $3 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $12 = i64toi32_i32$1;
  $12$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$2 = $9;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$3 = $12;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $13 = i64toi32_i32$4;
  $13$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $46 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
   $46 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
  }
  $4 = $46;
  $4$hi = i64toi32_i32$2;
  $16 = $4;
  $16$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$5 = $1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $48 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   $48 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
  }
  $2 = $48;
  $2$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $16$hi;
  i64toi32_i32$5 = $2$hi;
  i64toi32_i32$5 = __wasm_i64_mul($16 | 0, i64toi32_i32$0 | 0, $2 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $20 = i64toi32_i32$5;
  $20$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $13$hi;
  i64toi32_i32$2 = $13;
  i64toi32_i32$5 = $20$hi;
  i64toi32_i32$3 = $20;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $21 = i64toi32_i32$1;
  $21$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$0 = $3;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
  $3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $3$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$4 = $1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $1$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$4 = __wasm_i64_mul($3 | 0, i64toi32_i32$0 | 0, $1 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5 = i64toi32_i32$4;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$4;
  i64toi32_i32$4 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = 0;
   $49 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
  } else {
   i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
   $49 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
  }
  $30$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$4 = $2$hi;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$2 = __wasm_i64_mul($3 | 0, i64toi32_i32$4 | 0, $2 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $33 = i64toi32_i32$2;
  $33$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $30$hi;
  i64toi32_i32$0 = $49;
  i64toi32_i32$2 = $33$hi;
  i64toi32_i32$3 = $33;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $3 = i64toi32_i32$5;
  $3$hi = i64toi32_i32$1;
  i64toi32_i32$4 = i64toi32_i32$5;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $50 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
   $50 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
  }
  $36$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $21$hi;
  i64toi32_i32$1 = $21;
  i64toi32_i32$4 = $36$hi;
  i64toi32_i32$3 = $50;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $37 = i64toi32_i32$2;
  $37$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
  $39 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $39$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = __wasm_i64_mul($4 | 0, i64toi32_i32$1 | 0, $1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $42 = i64toi32_i32$0;
  $42$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $39$hi;
  i64toi32_i32$5 = $39;
  i64toi32_i32$0 = $42$hi;
  i64toi32_i32$3 = $42;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $3 = i64toi32_i32$4;
  $3$hi = i64toi32_i32$2;
  i64toi32_i32$1 = i64toi32_i32$4;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$5 = 0;
   $53 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
   $53 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
  }
  $45$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $37$hi;
  i64toi32_i32$2 = $37;
  i64toi32_i32$1 = $45$hi;
  i64toi32_i32$3 = $53;
  i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  i64toi32_i32$2 = $6;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$4;
  $47 = $0;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$5 = $3;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
   $54 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
   $54 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
  }
  $49$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$4 = $5;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
  $51 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $51$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $49$hi;
  i64toi32_i32$2 = $54;
  i64toi32_i32$4 = $51$hi;
  i64toi32_i32$3 = $51;
  i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
  $52 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $47;
  HEAP32[i64toi32_i32$2 >> 2] = $52;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$4;
 }
 
 function __divtf3($0, $1, $1$hi, $2, $2$hi, $3, $3$hi, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $20$hi = 0, $16$hi = 0, $18$hi = 0, $20 = 0, $21$hi = 0, $5 = 0, $16 = 0, i64toi32_i32$6 = 0, $22$hi = 0, $19$hi = 0, $18 = 0, $14$hi = 0, $21 = 0, $22 = 0, $14 = 0, $19 = 0, $15$hi = 0, $23$hi = 0, $15 = 0, $23 = 0, $13$hi = 0, $13 = 0, $8 = 0, $6 = 0, $17 = 0, $17$hi = 0, $7 = 0, $24$hi = 0, $9 = 0, $472 = 0, $473 = 0, $474 = 0, $476 = 0, $477 = 0, $478 = 0, $482 = 0, $483 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $491 = 0, $492 = 0, $493 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $508 = 0, $509 = 0, $510 = 0, $512 = 0, $514 = 0, $515 = 0, $519 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $525 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $24 = 0, $534 = 0, $535 = 0, $537 = 0, $538 = 0, $539 = 0, $540 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $549 = 0, $550 = 0, $551 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $559 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $579 = 0, $11 = 0, $12 = 0, $10 = 0, $55 = 0, $59 = 0, $66 = 0, $70 = 0, $79 = 0, $79$hi = 0, $84 = 0, $84$hi = 0, $92 = 0, $92$hi = 0, $108 = 0, $109 = 0, $109$hi = 0, $110 = 0, $110$hi = 0, $117$hi = 0, $120$hi = 0, $135 = 0, $136 = 0, $136$hi = 0, $137 = 0, $137$hi = 0, $144$hi = 0, $147$hi = 0, $162 = 0, $164 = 0, $164$hi = 0, $168$hi = 0, $179 = 0, $179$hi = 0, $180$hi = 0, $183 = 0, $186 = 0, $186$hi = 0, $191$hi = 0, $201 = 0, $201$hi = 0, $202$hi = 0, $204 = 0, $207 = 0, $207$hi = 0, $212$hi = 0, $222 = 0, $222$hi = 0, $223$hi = 0, $225 = 0, $228 = 0, $228$hi = 0, $233$hi = 0, $243 = 0, $243$hi = 0, $244$hi = 0, $246 = 0, $249 = 0, $249$hi = 0, $254$hi = 0, $263 = 0, $263$hi = 0, $264$hi = 0, $272 = 0, $272$hi = 0, $276$hi = 0, $281 = 0, $281$hi = 0, $286 = 0, $286$hi = 0, $293 = 0, $293$hi = 0, $300 = 0, $300$hi = 0, $305 = 0, $305$hi = 0, $307 = 0, $307$hi = 0, $310 = 0, $312$hi = 0, $313 = 0, $313$hi = 0, $316 = 0, $316$hi = 0, $317$hi = 0, $318 = 0, $318$hi = 0, $319 = 0, $319$hi = 0, $320 = 0, $320$hi = 0, $326 = 0, $326$hi = 0, $327 = 0, $327$hi = 0, $332 = 0, $332$hi = 0, $339 = 0, $339$hi = 0, $340$hi = 0, $342 = 0, $343 = 0, $343$hi = 0, $345 = 0, $345$hi = 0, $348 = 0, $350$hi = 0, $351 = 0, $351$hi = 0, $354 = 0, $354$hi = 0, $355$hi = 0, $356$hi = 0, $360 = 0, $361$hi = 0, $362$hi = 0, $364 = 0, $365$hi = 0, $366$hi = 0, $373 = 0, $373$hi = 0, $377 = 0, $377$hi = 0, $378 = 0, $378$hi = 0, $382 = 0, $382$hi = 0, $385$hi = 0, $390 = 0, $390$hi = 0, $392 = 0, $392$hi = 0, $395 = 0, $397$hi = 0, $398 = 0, $398$hi = 0, $401 = 0, $401$hi = 0, $402$hi = 0, $403 = 0, $403$hi = 0, $404 = 0, $404$hi = 0, $417 = 0, $417$hi = 0, $424 = 0, $424$hi = 0, $425$hi = 0, $427 = 0, $428 = 0, $428$hi = 0, $430 = 0, $430$hi = 0, $433 = 0, $435$hi = 0, $436 = 0, $436$hi = 0, $439 = 0, $439$hi = 0, $440$hi = 0, $441$hi = 0, $445 = 0, $446$hi = 0, $447 = 0, $447$hi = 0, $452 = 0, $453$hi = 0, $458 = 0, $458$hi = 0, $460 = 0, $460$hi = 0, $462$hi = 0, $467 = 0, $467$hi = 0, $471 = 0, $471$hi = 0, $475 = 0, $475$hi = 0, $479 = 0, $480 = 0, $480$hi = 0, $481 = 0, $481$hi = 0, $484 = 0, $484$hi = 0, $490 = 0, $490$hi = 0, $494 = 0, $495$hi = 0, $496$hi = 0, $499 = 0, $499$hi = 0, $500 = 0, $500$hi = 0, $507 = 0, $507$hi = 0, $511 = 0, $513 = 0, $513$hi = 0, $515$hi = 0, $516 = 0, $516$hi = 0, $517 = 0, $517$hi = 0, $518 = 0, $518$hi = 0, $520$hi = 0, $524 = 0, $525$hi = 0, $526 = 0, $526$hi = 0, $527 = 0, $527$hi = 0, $536 = 0, $536$hi = 0, $541 = 0, $541$hi = 0, $542 = 0, $542$hi = 0, $543 = 0, $543$hi = 0, $548 = 0, $548$hi = 0, $552 = 0, $553$hi = 0, $554$hi = 0, $558 = 0, $559$hi = 0, $560 = 0, $560$hi = 0, $561 = 0, $561$hi = 0, $568 = 0, $568$hi = 0, $573 = 0, $573$hi = 0, $578 = 0, $578$hi = 0, $581 = 0, $581$hi = 0, $584 = 0, $585$hi = 0, $588 = 0, $589$hi = 0, $590$hi = 0, $593 = 0, $594$hi = 0, $596$hi = 0, $597 = 0, $597$hi = 0, $601 = 0, $602$hi = 0, $603 = 0, $603$hi = 0, $604 = 0, $604$hi = 0, $605 = 0, $605$hi = 0, $612 = 0, $612$hi = 0, $615 = 0, $615$hi = 0, $618 = 0, $620$hi = 0, $621 = 0, $621$hi = 0, $625 = 0, $626 = 0, $626$hi = 0, $627 = 0, $627$hi = 0, $629$hi = 0, $630$hi = 0, $632 = 0, $633$hi = 0, $634$hi = 0, $638 = 0, $639$hi = 0, $644$hi = 0, $653 = 0, $654$hi = 0, $655 = 0, $655$hi = 0, $658 = 0, $658$hi = 0, $664 = 0, $664$hi = 0, $665 = 0, $665$hi = 0, $669 = 0, $669$hi = 0, $674 = 0, $675$hi = 0, $676 = 0, $676$hi = 0, $678$hi = 0, $580 = 0, $680 = 0, $680$hi = 0, $683 = 0, $683$hi = 0, $684 = 0, $684$hi = 0, $685$hi = 0, $688 = 0, $688$hi = 0, $689 = 0, $689$hi = 0, $691 = 0, $691$hi = 0, $694 = 0, $696$hi = 0, $697 = 0, $697$hi = 0, $698 = 0, $698$hi = 0, $699 = 0, $699$hi = 0, $701$hi = 0, $702 = 0, $702$hi = 0, $703 = 0, $703$hi = 0, $705$hi = 0, $706 = 0, $706$hi = 0, $707$hi = 0, $710 = 0, $710$hi = 0, $711$hi = 0, $714 = 0, $714$hi = 0, $716$hi = 0, $717$hi = 0, $727 = 0, $727$hi = 0, $729 = 0, $729$hi = 0, $731$hi = 0, $741 = 0, $742$hi = 0, $743 = 0, $743$hi = 0, $746 = 0, $746$hi = 0, $747 = 0, $747$hi = 0, $752 = 0, $752$hi = 0, $753 = 0, $753$hi = 0, $755$hi = 0, $761 = 0, $761$hi = 0, $766 = 0, $767$hi = 0, $768 = 0, $768$hi = 0, $771 = 0, $771$hi = 0, $775$hi = 0, $582 = 0, $777 = 0, $777$hi = 0, $778$hi = 0, $781 = 0, $781$hi = 0, $782 = 0, $782$hi = 0, $783 = 0, $783$hi = 0, $785 = 0, $785$hi = 0, $788 = 0, $790$hi = 0, $791 = 0, $791$hi = 0, $792 = 0, $792$hi = 0, $793 = 0, $793$hi = 0, $795$hi = 0, $796 = 0, $796$hi = 0, $797 = 0, $797$hi = 0, $799$hi = 0, $800 = 0, $800$hi = 0, $801$hi = 0, $804 = 0, $804$hi = 0, $805$hi = 0, $808 = 0, $808$hi = 0, $810$hi = 0, $811$hi = 0, $827 = 0, $827$hi = 0, $828 = 0, $828$hi = 0, $830$hi = 0, $832 = 0, $834 = 0, $834$hi = 0, $836$hi = 0, $840 = 0, $844 = 0, $845$hi = 0, $849 = 0, $850$hi = 0, $860$hi = 0, $862 = 0, $862$hi = 0, $863 = 0, $863$hi = 0, $864 = 0, $864$hi = 0, $866$hi = 0, $868 = 0, $870 = 0, $870$hi = 0, $872$hi = 0, $876 = 0, $880 = 0, $881$hi = 0, $885 = 0, $886$hi = 0, $887$hi = 0, $907 = 0;
  label$1 : {
   $5 = global$0 - 192 | 0;
   $10 = $5;
   if ($5 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $10;
  }
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $13 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $13$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2;
  i64toi32_i32$2 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $14 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $14$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$1 = $4;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$3 = $2;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $15 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $15$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $472 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $472 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6 = $472 & 32767 | 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$1 = $2;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 48;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $473 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $473 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      $7 = $473 & 32767 | 0;
      if (($7 + -1 | 0) >>> 0 > 32765 >>> 0) {
       break label$6
      }
      $8 = 0;
      if (($6 + -1 | 0) >>> 0 < 32766 >>> 0) {
       break label$5
      }
     }
     label$7 : {
      i64toi32_i32$0 = $1$hi;
      $55 = !($1 | i64toi32_i32$0 | 0);
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2;
      i64toi32_i32$1 = 2147483647;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
      $16 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      $16$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $16;
      i64toi32_i32$2 = 2147418112;
      i64toi32_i32$3 = 0;
      $59 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$3 = $16;
      i64toi32_i32$1 = 2147418112;
      i64toi32_i32$2 = 0;
      if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $55 : $59) {
       break label$7
      }
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $2;
      i64toi32_i32$0 = 32768;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      $15 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
      $15$hi = i64toi32_i32$0;
      break label$4;
     }
     label$8 : {
      i64toi32_i32$0 = $3$hi;
      $66 = !($3 | i64toi32_i32$0 | 0);
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$3 = $4;
      i64toi32_i32$2 = 2147483647;
      i64toi32_i32$1 = -1;
      i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
      $2 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
      $2$hi = i64toi32_i32$2;
      i64toi32_i32$0 = $2;
      i64toi32_i32$3 = 2147418112;
      i64toi32_i32$1 = 0;
      $70 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$1 = $2;
      i64toi32_i32$2 = 2147418112;
      i64toi32_i32$3 = 0;
      if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0 ? $66 : $70) {
       break label$8
      }
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$3 = $4;
      i64toi32_i32$0 = 32768;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $15 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $15$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $3$hi;
      $1 = $3;
      $1$hi = i64toi32_i32$0;
      break label$4;
     }
     label$9 : {
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$1 = $16;
      i64toi32_i32$3 = 2147418112;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
      $79 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
      $79$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$0 = $1;
      i64toi32_i32$1 = $79$hi;
      i64toi32_i32$2 = $79;
      i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = 0;
      if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
       break label$9
      }
      label$10 : {
       i64toi32_i32$3 = $3$hi;
       i64toi32_i32$3 = $2$hi;
       i64toi32_i32$2 = $2;
       i64toi32_i32$1 = 2147418112;
       i64toi32_i32$0 = 0;
       i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
       $84 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
       $84$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$3 = $3;
       i64toi32_i32$2 = $84$hi;
       i64toi32_i32$0 = $84;
       i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
       if (!!(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
        break label$10
       }
       i64toi32_i32$2 = 0;
       $1 = 0;
       $1$hi = i64toi32_i32$2;
       i64toi32_i32$2 = 2147450880;
       $15 = 0;
       $15$hi = i64toi32_i32$2;
       break label$4;
      }
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$1 = $15;
      i64toi32_i32$3 = 2147418112;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      $15 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $15$hi = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      $1 = 0;
      $1$hi = i64toi32_i32$3;
      break label$4;
     }
     label$11 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $2;
      i64toi32_i32$1 = 2147418112;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
      $92 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
      $92$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$3 = $3;
      i64toi32_i32$2 = $92$hi;
      i64toi32_i32$0 = $92;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
       break label$11
      }
      i64toi32_i32$1 = 0;
      $1 = 0;
      $1$hi = i64toi32_i32$1;
      break label$4;
     }
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$3 = $16;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0) {
      break label$3
     }
     label$12 : {
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$3 = $3;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$0 = $2;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
       break label$12
      }
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$0 = $15;
      i64toi32_i32$2 = 2147418112;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      $15 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
      $15$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      $1 = 0;
      $1$hi = i64toi32_i32$2;
      break label$4;
     }
     $8 = 0;
     label$13 : {
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$1 = $16;
      i64toi32_i32$0 = 65535;
      i64toi32_i32$3 = -1;
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
       break label$13
      }
      $108 = $5 + 176 | 0;
      i64toi32_i32$1 = $1$hi;
      $109 = $1;
      $109$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $14$hi;
      $110 = $14;
      $110$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$1 = $14$hi;
      $8 = !($14 | i64toi32_i32$1 | 0);
      i64toi32_i32$4 = $8;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$2 = $14$hi;
      i64toi32_i32$0 = i64toi32_i32$4 ? $1 : $14;
      i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$2;
      i64toi32_i32$1 = Math_clz32(i64toi32_i32$3);
      i64toi32_i32$4 = 0;
      if ((i64toi32_i32$1 | 0) == (32 | 0)) {
       $474 = Math_clz32(i64toi32_i32$0) + 32 | 0
      } else {
       $474 = i64toi32_i32$1
      }
      $117$hi = i64toi32_i32$4;
      i64toi32_i32$4 = 0;
      $120$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $117$hi;
      i64toi32_i32$0 = $474;
      i64toi32_i32$3 = $120$hi;
      i64toi32_i32$1 = $8 << 6 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $8 = i64toi32_i32$2;
      i64toi32_i32$5 = $109$hi;
      i64toi32_i32$0 = $110$hi;
      __ashlti3($108 | 0, $109 | 0, i64toi32_i32$5 | 0, $110 | 0, i64toi32_i32$0 | 0, i64toi32_i32$2 + -15 | 0 | 0);
      $8 = 16 - i64toi32_i32$2 | 0;
      i64toi32_i32$4 = $5 + 184 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
      $14 = i64toi32_i32$0;
      $14$hi = i64toi32_i32$5;
      i64toi32_i32$4 = $5;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 176 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 180 | 0) >> 2] | 0;
      $1 = i64toi32_i32$5;
      $1$hi = i64toi32_i32$0;
     }
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$4 = $2;
     i64toi32_i32$5 = 65535;
     i64toi32_i32$1 = -1;
     if (i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$5
     }
     $135 = $5 + 160 | 0;
     i64toi32_i32$4 = $3$hi;
     $136 = $3;
     $136$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $13$hi;
     $137 = $13;
     $137$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $13$hi;
     $9 = !($13 | i64toi32_i32$4 | 0);
     i64toi32_i32$3 = $9;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$5 = i64toi32_i32$3 ? $3 : $13;
     i64toi32_i32$1 = i64toi32_i32$3 ? i64toi32_i32$4 : i64toi32_i32$0;
     i64toi32_i32$4 = Math_clz32(i64toi32_i32$1);
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$4 | 0) == (32 | 0)) {
      $476 = Math_clz32(i64toi32_i32$5) + 32 | 0
     } else {
      $476 = i64toi32_i32$4
     }
     $144$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $147$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $144$hi;
     i64toi32_i32$5 = $476;
     i64toi32_i32$1 = $147$hi;
     i64toi32_i32$4 = $9 << 6 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $9 = i64toi32_i32$0;
     i64toi32_i32$2 = $136$hi;
     i64toi32_i32$5 = $137$hi;
     __ashlti3($135 | 0, $136 | 0, i64toi32_i32$2 | 0, $137 | 0, i64toi32_i32$5 | 0, i64toi32_i32$0 + -15 | 0 | 0);
     $8 = (i64toi32_i32$0 + $8 | 0) + -16 | 0;
     i64toi32_i32$3 = $5 + 168 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $13 = i64toi32_i32$5;
     $13$hi = i64toi32_i32$2;
     i64toi32_i32$3 = $5;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 160 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 164 | 0) >> 2] | 0;
     $3 = i64toi32_i32$2;
     $3$hi = i64toi32_i32$5;
    }
    $162 = $5 + 144 | 0;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$3 = $3;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 49;
    i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $477 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     $477 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
    }
    $164 = $477;
    $164$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $13$hi;
    i64toi32_i32$5 = $13;
    i64toi32_i32$3 = 65536;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $17 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    $17$hi = i64toi32_i32$3;
    i64toi32_i32$2 = $17;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 15;
    i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
     $478 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
     $478 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
    }
    $168$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $164$hi;
    i64toi32_i32$3 = $164;
    i64toi32_i32$2 = $168$hi;
    i64toi32_i32$4 = $478;
    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $2 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 1963258675;
    i64toi32_i32$5 = -102865788;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$4 = $2;
    i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0;
    i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
    $4 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$3;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$4 = 0;
    __multi3($162 | 0, $2 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$5 = ($5 + 144 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $179 = i64toi32_i32$4;
    $179$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = $179$hi;
    i64toi32_i32$0 = $179;
    i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
    $180$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = $180$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$0 = 0;
    __multi3($5 + 128 | 0 | 0, i64toi32_i32$3 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $4 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $183 = $5 + 112 | 0;
    i64toi32_i32$5 = $5;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 128 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 132 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 63;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $482 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $482 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
    }
    $186 = $482;
    $186$hi = i64toi32_i32$0;
    i64toi32_i32$2 = ($5 + 128 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 1;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $483 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
     $483 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $191$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $186$hi;
    i64toi32_i32$5 = $186;
    i64toi32_i32$2 = $191$hi;
    i64toi32_i32$1 = $483;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $4 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = 0;
    __multi3($183 | 0, $4 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, $2 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$1 = i64toi32_i32$2;
    i64toi32_i32$5 = ($5 + 112 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $201 = i64toi32_i32$1;
    $201$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $201$hi;
    i64toi32_i32$2 = $201;
    i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
    i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
    $202$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = $202$hi;
    i64toi32_i32$2 = 0;
    __multi3($5 + 96 | 0 | 0, $4 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
    $204 = $5 + 80 | 0;
    i64toi32_i32$5 = $5;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 96 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 100 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 63;
    i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $485 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
     $485 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
    }
    $207 = $485;
    $207$hi = i64toi32_i32$2;
    i64toi32_i32$0 = ($5 + 96 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
     $486 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
     $486 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
    }
    $212$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $207$hi;
    i64toi32_i32$5 = $207;
    i64toi32_i32$0 = $212$hi;
    i64toi32_i32$3 = $486;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $4 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = 0;
    __multi3($204 | 0, $4 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, $2 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$3 = i64toi32_i32$0;
    i64toi32_i32$5 = ($5 + 80 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $222 = i64toi32_i32$3;
    $222$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = $222$hi;
    i64toi32_i32$0 = $222;
    i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
    $223$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $223$hi;
    i64toi32_i32$0 = 0;
    __multi3($5 + 64 | 0 | 0, $4 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $225 = $5 + 48 | 0;
    i64toi32_i32$5 = $5;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 68 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $487 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
     $487 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
    }
    $228 = $487;
    $228$hi = i64toi32_i32$0;
    i64toi32_i32$2 = ($5 + 64 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
     $488 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
     $488 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    }
    $233$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $228$hi;
    i64toi32_i32$5 = $228;
    i64toi32_i32$2 = $233$hi;
    i64toi32_i32$4 = $488;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$4 = 0;
    __multi3($225 | 0, $4 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, $2 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$4 = i64toi32_i32$2;
    i64toi32_i32$5 = ($5 + 48 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $243 = i64toi32_i32$4;
    $243$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = $243$hi;
    i64toi32_i32$2 = $243;
    i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
    $244$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = $244$hi;
    i64toi32_i32$2 = 0;
    __multi3($5 + 32 | 0 | 0, $4 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$3 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
    $246 = $5 + 16 | 0;
    i64toi32_i32$5 = $5;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 32 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 36 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 63;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $489 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $489 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
    }
    $249 = $489;
    $249$hi = i64toi32_i32$2;
    i64toi32_i32$0 = ($5 + 32 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $491 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
     $491 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $254$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $249$hi;
    i64toi32_i32$5 = $249;
    i64toi32_i32$0 = $254$hi;
    i64toi32_i32$1 = $491;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $4 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = 0;
    __multi3($246 | 0, $4 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, $2 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$5 = ($5 + 16 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $263 = i64toi32_i32$1;
    $263$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $263$hi;
    i64toi32_i32$0 = $263;
    i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
    i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
    $264$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $264$hi;
    i64toi32_i32$0 = 0;
    __multi3($5 | 0, $4 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $6 = $8 + ($7 - $6 | 0) | 0;
    label$14 : {
     label$15 : {
      i64toi32_i32$5 = $5;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 63;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $492 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
       $492 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
      }
      $272 = $492;
      $272$hi = i64toi32_i32$0;
      i64toi32_i32$2 = $5 + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 1;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
       $493 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
       $493 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
      }
      $276$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $272$hi;
      i64toi32_i32$5 = $272;
      i64toi32_i32$2 = $276$hi;
      i64toi32_i32$3 = $493;
      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
      i64toi32_i32$5 = -1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $16 = i64toi32_i32$1;
      $16$hi = i64toi32_i32$4;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
      $4 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $4$hi = i64toi32_i32$0;
      $281 = $4;
      $281$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$4 = $2;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $495 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
       $495 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
      }
      $18 = $495;
      $18$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $281$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$4 = __wasm_i64_mul($281 | 0, i64toi32_i32$2 | 0, $18 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $19 = i64toi32_i32$4;
      $19$hi = i64toi32_i32$2;
      $286 = i64toi32_i32$4;
      $286$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$0 = $16;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $496 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
       $496 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$5 | 0) | 0;
      }
      $16 = $496;
      $16$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$2 = $2;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
      $20 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      $20$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$2 = $20$hi;
      i64toi32_i32$2 = __wasm_i64_mul($16 | 0, i64toi32_i32$0 | 0, $20 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $293 = i64toi32_i32$2;
      $293$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $286$hi;
      i64toi32_i32$4 = $286;
      i64toi32_i32$2 = $293$hi;
      i64toi32_i32$3 = $293;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $2 = i64toi32_i32$5;
      $2$hi = i64toi32_i32$1;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
       $497 = 0;
      } else {
       i64toi32_i32$4 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
       $497 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
      }
      $21 = $497;
      $21$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$0 = $20$hi;
      i64toi32_i32$0 = __wasm_i64_mul($4 | 0, i64toi32_i32$4 | 0, $20 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $300 = i64toi32_i32$0;
      $300$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$1 = $21;
      i64toi32_i32$0 = $300$hi;
      i64toi32_i32$3 = $300;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $20 = i64toi32_i32$2;
      $20$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $21$hi;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$3 = $21;
      i64toi32_i32$4 = 0;
      $305 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      $305$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$3 = $2;
      i64toi32_i32$5 = 0;
      i64toi32_i32$1 = 32;
      i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $498 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
       $498 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
      }
      $307 = $498;
      $307$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$4 = $2;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$1 = $19;
      $310 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      i64toi32_i32$1 = $310;
      i64toi32_i32$5 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
       $501 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
       $501 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
      }
      $312$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $307$hi;
      i64toi32_i32$4 = $307;
      i64toi32_i32$1 = $312$hi;
      i64toi32_i32$3 = $501;
      i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
      $313 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
      $313$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$4 = __wasm_i64_mul($16 | 0, i64toi32_i32$1 | 0, $18 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $316 = i64toi32_i32$4;
      $316$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $313$hi;
      i64toi32_i32$5 = $313;
      i64toi32_i32$4 = $316$hi;
      i64toi32_i32$3 = $316;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $317$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $305$hi;
      i64toi32_i32$1 = $305;
      i64toi32_i32$5 = $317$hi;
      i64toi32_i32$3 = i64toi32_i32$0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $318 = i64toi32_i32$4;
      $318$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $20$hi;
      $319 = $20;
      $319$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      $320 = $4;
      $320$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$2 = $3;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 17;
      i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $502 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
       $502 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
      }
      i64toi32_i32$0 = $502;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
      $18 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
      $18$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $320$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = __wasm_i64_mul($320 | 0, i64toi32_i32$2 | 0, $18 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $19 = i64toi32_i32$0;
      $19$hi = i64toi32_i32$2;
      $326 = i64toi32_i32$0;
      $326$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $16$hi;
      $327 = $16;
      $327$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$1 = $3;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 15;
      i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
       $503 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$5 | 0) | 0;
       $503 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
      }
      i64toi32_i32$2 = $503;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = -32768;
      i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
      $21 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      $21$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $327$hi;
      i64toi32_i32$2 = $21$hi;
      i64toi32_i32$2 = __wasm_i64_mul($327 | 0, i64toi32_i32$1 | 0, $21 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $332 = i64toi32_i32$2;
      $332$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $326$hi;
      i64toi32_i32$0 = $326;
      i64toi32_i32$2 = $332$hi;
      i64toi32_i32$3 = $332;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $2 = i64toi32_i32$5;
      $2$hi = i64toi32_i32$4;
      i64toi32_i32$1 = i64toi32_i32$5;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
       $504 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
       $504 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
      }
      $22 = $504;
      $22$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = $21$hi;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$1 = __wasm_i64_mul($4 | 0, i64toi32_i32$0 | 0, $21 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $339 = i64toi32_i32$1;
      $339$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $22$hi;
      i64toi32_i32$4 = $22;
      i64toi32_i32$1 = $339$hi;
      i64toi32_i32$3 = $339;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $340$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $22$hi;
      i64toi32_i32$5 = $340$hi;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$4 = $22$hi;
      i64toi32_i32$3 = $22;
      $342 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      $343 = $342;
      $343$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$3 = $2;
      i64toi32_i32$5 = 0;
      i64toi32_i32$4 = 32;
      i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $505 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
       $505 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
      }
      $345 = $505;
      $345$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$0 = $2;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$4 = $19;
      $348 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$4 = $348;
      i64toi32_i32$5 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
       $506 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$1 | 0) | 0;
       $506 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
      }
      $350$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $345$hi;
      i64toi32_i32$0 = $345;
      i64toi32_i32$4 = $350$hi;
      i64toi32_i32$3 = $506;
      i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
      $351 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
      $351$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = __wasm_i64_mul($16 | 0, i64toi32_i32$4 | 0, $18 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $354 = i64toi32_i32$0;
      $354$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $351$hi;
      i64toi32_i32$5 = $351;
      i64toi32_i32$0 = $354$hi;
      i64toi32_i32$3 = $354;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $355$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $343$hi;
      i64toi32_i32$4 = $343;
      i64toi32_i32$5 = $355$hi;
      i64toi32_i32$3 = i64toi32_i32$1;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $356$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $319$hi;
      i64toi32_i32$2 = $319;
      i64toi32_i32$4 = $356$hi;
      i64toi32_i32$3 = i64toi32_i32$0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $2 = i64toi32_i32$5;
      $2$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $20$hi;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$1 = i64toi32_i32$5;
      i64toi32_i32$2 = $20$hi;
      i64toi32_i32$3 = $20;
      $360 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $361$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $318$hi;
      i64toi32_i32$3 = $318;
      i64toi32_i32$0 = $361$hi;
      i64toi32_i32$2 = $360;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $362$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$1 = $2;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = 0;
      $364 = (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$1 = 0;
      $365$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $362$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$5 = $365$hi;
      i64toi32_i32$3 = $364;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $366$hi = i64toi32_i32$4;
      i64toi32_i32$4 = 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = $366$hi;
      i64toi32_i32$3 = i64toi32_i32$0;
      i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0;
      i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
      $20 = i64toi32_i32$5;
      $20$hi = i64toi32_i32$0;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
      $18 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
      $18$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$4 = __wasm_i64_mul($18 | 0, i64toi32_i32$1 | 0, $4 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $19 = i64toi32_i32$4;
      $19$hi = i64toi32_i32$1;
      $373 = i64toi32_i32$4;
      $373$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$4 = __wasm_i64_mul($18 | 0, i64toi32_i32$1 | 0, $16 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $21 = i64toi32_i32$4;
      $21$hi = i64toi32_i32$1;
      $377 = i64toi32_i32$4;
      $377$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $4$hi;
      $378 = $4;
      $378$hi = i64toi32_i32$1;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $508 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
       $508 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
      }
      $22 = $508;
      $22$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $378$hi;
      i64toi32_i32$0 = $22$hi;
      i64toi32_i32$0 = __wasm_i64_mul($378 | 0, i64toi32_i32$4 | 0, $22 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $382 = i64toi32_i32$0;
      $382$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $377$hi;
      i64toi32_i32$1 = $377;
      i64toi32_i32$0 = $382$hi;
      i64toi32_i32$3 = $382;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $20 = i64toi32_i32$2;
      $20$hi = i64toi32_i32$5;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
       $509 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
       $509 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
      }
      $385$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $373$hi;
      i64toi32_i32$5 = $373;
      i64toi32_i32$4 = $385$hi;
      i64toi32_i32$3 = $509;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $18 = i64toi32_i32$0;
      $18$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$3 = $19;
      i64toi32_i32$1 = 0;
      $390 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      $390$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $20$hi;
      i64toi32_i32$3 = $20;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $510 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
       $510 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      $392 = $510;
      $392$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $20$hi;
      i64toi32_i32$2 = $21$hi;
      i64toi32_i32$2 = $20$hi;
      i64toi32_i32$1 = $20;
      i64toi32_i32$3 = $21$hi;
      i64toi32_i32$5 = $21;
      $395 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = $395;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
       $512 = 0;
      } else {
       i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
       $512 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
      }
      $397$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $392$hi;
      i64toi32_i32$1 = $392;
      i64toi32_i32$5 = $397$hi;
      i64toi32_i32$3 = $512;
      i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
      $398 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
      $398$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$5 = $22$hi;
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$1 = $22$hi;
      i64toi32_i32$1 = __wasm_i64_mul($16 | 0, i64toi32_i32$5 | 0, $22 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $401 = i64toi32_i32$1;
      $401$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $398$hi;
      i64toi32_i32$2 = $398;
      i64toi32_i32$1 = $401$hi;
      i64toi32_i32$3 = $401;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $402$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $390$hi;
      i64toi32_i32$5 = $390;
      i64toi32_i32$2 = $402$hi;
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $403 = i64toi32_i32$1;
      $403$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $18$hi;
      $404 = $18;
      $404$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$4 = 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$3 = $2;
      i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
      i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
      i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 - i64toi32_i32$1 | 0;
      $2 = i64toi32_i32$2;
      $2$hi = i64toi32_i32$1;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $514 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
       $514 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
      }
      $20 = $514;
      $20$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = $20$hi;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$4 = __wasm_i64_mul($20 | 0, i64toi32_i32$0 | 0, $4 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $19 = i64toi32_i32$4;
      $19$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$1 = $2;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
      $21 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $21$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = __wasm_i64_mul($21 | 0, i64toi32_i32$4 | 0, $16 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $417 = i64toi32_i32$1;
      $417$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$0 = $19;
      i64toi32_i32$1 = $417$hi;
      i64toi32_i32$3 = $417;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $2 = i64toi32_i32$5;
      $2$hi = i64toi32_i32$2;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
       $515 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
       $515 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
      }
      $22 = $515;
      $22$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $21$hi;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = $21$hi;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$4 = __wasm_i64_mul($21 | 0, i64toi32_i32$0 | 0, $4 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $424 = i64toi32_i32$4;
      $424$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $22$hi;
      i64toi32_i32$2 = $22;
      i64toi32_i32$4 = $424$hi;
      i64toi32_i32$3 = $424;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $425$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $22$hi;
      i64toi32_i32$5 = $425$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$2 = $22$hi;
      i64toi32_i32$3 = $22;
      $427 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      $428 = $427;
      $428$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$3 = $2;
      i64toi32_i32$5 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $519 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       $519 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      $430 = $519;
      $430$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$0 = $2;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$2 = $19;
      $433 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = $433;
      i64toi32_i32$5 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
       $520 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
       $520 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      }
      $435$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $430$hi;
      i64toi32_i32$0 = $430;
      i64toi32_i32$2 = $435$hi;
      i64toi32_i32$3 = $520;
      i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
      $436 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
      $436$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $20$hi;
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$2 = $20$hi;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$0 = __wasm_i64_mul($20 | 0, i64toi32_i32$2 | 0, $16 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $439 = i64toi32_i32$0;
      $439$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $436$hi;
      i64toi32_i32$5 = $436;
      i64toi32_i32$0 = $439$hi;
      i64toi32_i32$3 = $439;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $440$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $428$hi;
      i64toi32_i32$2 = $428;
      i64toi32_i32$5 = $440$hi;
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $441$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $404$hi;
      i64toi32_i32$1 = $404;
      i64toi32_i32$2 = $441$hi;
      i64toi32_i32$3 = i64toi32_i32$0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $2 = i64toi32_i32$5;
      $2$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$3 = $18;
      $445 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $446$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $403$hi;
      i64toi32_i32$3 = $403;
      i64toi32_i32$0 = $446$hi;
      i64toi32_i32$1 = $445;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $447 = i64toi32_i32$2;
      $447$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$4 = $2;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = -2;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $19 = i64toi32_i32$0;
      $19$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$5 = i64toi32_i32$0;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$1 = $2;
      $452 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$5 = 0;
      $453$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $447$hi;
      i64toi32_i32$1 = $447;
      i64toi32_i32$2 = $453$hi;
      i64toi32_i32$4 = $452;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      i64toi32_i32$5 = i64toi32_i32$3;
      i64toi32_i32$1 = -1;
      i64toi32_i32$4 = -1;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $20 = i64toi32_i32$2;
      $20$hi = i64toi32_i32$3;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$5 = 0;
      i64toi32_i32$4 = -1;
      i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
      $2 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
      $2$hi = i64toi32_i32$5;
      $458 = $2;
      $458$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $1$hi;
      i64toi32_i32$3 = $1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$4 = 62;
      i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $521 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
       $521 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
      }
      $460 = $521;
      $460$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $14$hi;
      i64toi32_i32$5 = $14;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = 2;
      i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
       $522 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$1 | 0) | 0;
       $522 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
      }
      $462$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $460$hi;
      i64toi32_i32$0 = $460;
      i64toi32_i32$5 = $462$hi;
      i64toi32_i32$4 = $522;
      i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$4 = -1;
      i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
      $4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
      $4$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $458$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = __wasm_i64_mul($458 | 0, i64toi32_i32$0 | 0, $4 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $18 = i64toi32_i32$3;
      $18$hi = i64toi32_i32$0;
      $467 = i64toi32_i32$3;
      $467$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$5 = $1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = 30;
      i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = 0;
       $523 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
      } else {
       i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
       $523 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
      }
      i64toi32_i32$0 = $523;
      i64toi32_i32$5 = 0;
      i64toi32_i32$4 = -1;
      i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
      $16 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
      $16$hi = i64toi32_i32$5;
      $471 = $16;
      $471$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$3 = $20;
      i64toi32_i32$0 = 0;
      i64toi32_i32$4 = 32;
      i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $525 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
       $525 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
      }
      $20 = $525;
      $20$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $471$hi;
      i64toi32_i32$3 = $20$hi;
      i64toi32_i32$3 = __wasm_i64_mul($471 | 0, i64toi32_i32$0 | 0, $20 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $475 = i64toi32_i32$3;
      $475$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $467$hi;
      i64toi32_i32$5 = $467;
      i64toi32_i32$3 = $475$hi;
      i64toi32_i32$4 = $475;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $21 = i64toi32_i32$1;
      $21$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$2 = $21$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$4 = $18;
      $479 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      $480 = $479;
      $480$hi = i64toi32_i32$0;
      i64toi32_i32$0 = i64toi32_i32$2;
      $481 = i64toi32_i32$1;
      $481$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$4 = $19;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $528 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
       $528 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
      }
      $18 = $528;
      $18$hi = i64toi32_i32$2;
      $484 = $18;
      $484$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $14$hi;
      i64toi32_i32$0 = $14;
      i64toi32_i32$4 = 0;
      i64toi32_i32$5 = 30;
      i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $529 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
       $529 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
      }
      i64toi32_i32$2 = $529;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = -262145;
      i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = 262144;
      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      $14 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
      $14$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $484$hi;
      i64toi32_i32$4 = $14$hi;
      i64toi32_i32$4 = __wasm_i64_mul($484 | 0, i64toi32_i32$2 | 0, $14 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $490 = i64toi32_i32$4;
      $490$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $481$hi;
      i64toi32_i32$0 = $481;
      i64toi32_i32$4 = $490$hi;
      i64toi32_i32$5 = $490;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $22 = i64toi32_i32$3;
      $22$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$1 = $22$hi;
      i64toi32_i32$2 = i64toi32_i32$3;
      i64toi32_i32$0 = $21$hi;
      i64toi32_i32$5 = $21;
      $494 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $495$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $480$hi;
      i64toi32_i32$5 = $480;
      i64toi32_i32$1 = $495$hi;
      i64toi32_i32$0 = $494;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $496$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $14$hi;
      i64toi32_i32$3 = $20$hi;
      i64toi32_i32$3 = $14$hi;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$5 = __wasm_i64_mul($14 | 0, i64toi32_i32$3 | 0, $20 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $499 = i64toi32_i32$5;
      $499$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $496$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$5 = $499$hi;
      i64toi32_i32$0 = $499;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $500 = i64toi32_i32$1;
      $500$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$4 = $14$hi;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$2 = $14$hi;
      i64toi32_i32$2 = __wasm_i64_mul($2 | 0, i64toi32_i32$4 | 0, $14 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $23 = i64toi32_i32$2;
      $23$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$2 = $20$hi;
      i64toi32_i32$2 = __wasm_i64_mul($4 | 0, i64toi32_i32$4 | 0, $20 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $507 = i64toi32_i32$2;
      $507$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $23$hi;
      i64toi32_i32$3 = $23;
      i64toi32_i32$2 = $507$hi;
      i64toi32_i32$0 = $507;
      i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $21 = i64toi32_i32$5;
      $21$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $23$hi;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$3 = $23$hi;
      i64toi32_i32$0 = $23;
      $511 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      i64toi32_i32$0 = $511;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
       $530 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
       $530 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
      }
      $513 = $530;
      $513$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$4 = $21;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $531 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
       $531 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
      }
      $515$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $513$hi;
      i64toi32_i32$1 = $513;
      i64toi32_i32$4 = $515$hi;
      i64toi32_i32$3 = $531;
      i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
      $516 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
      $516$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $500$hi;
      i64toi32_i32$0 = $500;
      i64toi32_i32$1 = $516$hi;
      i64toi32_i32$3 = $516;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $517 = i64toi32_i32$2;
      $517$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $22$hi;
      $518 = $22;
      $518$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $21$hi;
      i64toi32_i32$4 = $21;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
       $532 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
       $532 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
      }
      $520$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $518$hi;
      i64toi32_i32$5 = $518;
      i64toi32_i32$4 = $520$hi;
      i64toi32_i32$3 = $532;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $21 = i64toi32_i32$1;
      $21$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $22$hi;
      i64toi32_i32$2 = $21$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$5 = $22$hi;
      i64toi32_i32$3 = $22;
      $524 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      $525$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $517$hi;
      i64toi32_i32$3 = $517;
      i64toi32_i32$2 = $525$hi;
      i64toi32_i32$5 = $524;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $526 = i64toi32_i32$4;
      $526$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $21$hi;
      $527 = $21;
      $527$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = __wasm_i64_mul($18 | 0, i64toi32_i32$1 | 0, $16 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $23 = i64toi32_i32$3;
      $23$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$0 = $19;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = -1;
      i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $19 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
      $19$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = __wasm_i64_mul($19 | 0, i64toi32_i32$3 | 0, $4 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $536 = i64toi32_i32$0;
      $536$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $23$hi;
      i64toi32_i32$1 = $23;
      i64toi32_i32$0 = $536$hi;
      i64toi32_i32$5 = $536;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $22 = i64toi32_i32$2;
      $22$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $23$hi;
      i64toi32_i32$4 = $22$hi;
      i64toi32_i32$3 = i64toi32_i32$2;
      i64toi32_i32$1 = $23$hi;
      i64toi32_i32$5 = $23;
      i64toi32_i32$3 = 0;
      $541 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      $541$hi = i64toi32_i32$3;
      i64toi32_i32$3 = i64toi32_i32$4;
      $542 = i64toi32_i32$2;
      $542$hi = i64toi32_i32$4;
      i64toi32_i32$3 = $2$hi;
      $543 = $2;
      $543$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$5 = $1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$1 = 2;
      i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
       $533 = 0;
      } else {
       i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
       $533 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
      }
      i64toi32_i32$3 = $533;
      i64toi32_i32$5 = 0;
      i64toi32_i32$1 = -4;
      i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
      $23 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
      $23$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $543$hi;
      i64toi32_i32$3 = $23$hi;
      i64toi32_i32$3 = __wasm_i64_mul($543 | 0, i64toi32_i32$5 | 0, $23 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $548 = i64toi32_i32$3;
      $548$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $542$hi;
      i64toi32_i32$4 = $542;
      i64toi32_i32$3 = $548$hi;
      i64toi32_i32$1 = $548;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $24 = i64toi32_i32$0;
      $24$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $22$hi;
      i64toi32_i32$2 = $24$hi;
      i64toi32_i32$5 = i64toi32_i32$0;
      i64toi32_i32$4 = $22$hi;
      i64toi32_i32$1 = $22;
      $552 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$5 = 0;
      $553$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $541$hi;
      i64toi32_i32$1 = $541;
      i64toi32_i32$2 = $553$hi;
      i64toi32_i32$4 = $552;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $554$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $527$hi;
      i64toi32_i32$5 = $527;
      i64toi32_i32$1 = $554$hi;
      i64toi32_i32$4 = i64toi32_i32$3;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $22 = i64toi32_i32$2;
      $22$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $21$hi;
      i64toi32_i32$3 = $22$hi;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$5 = $21$hi;
      i64toi32_i32$4 = $21;
      $558 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      $559$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $526$hi;
      i64toi32_i32$4 = $526;
      i64toi32_i32$3 = $559$hi;
      i64toi32_i32$5 = $558;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $560 = i64toi32_i32$1;
      $560$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $22$hi;
      $561 = $22;
      $561$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $23$hi;
      i64toi32_i32$2 = $20$hi;
      i64toi32_i32$2 = $23$hi;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$4 = __wasm_i64_mul($23 | 0, i64toi32_i32$2 | 0, $20 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $21 = i64toi32_i32$4;
      $21$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$2 = $14$hi;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$4 = $14$hi;
      i64toi32_i32$4 = __wasm_i64_mul($19 | 0, i64toi32_i32$2 | 0, $14 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $568 = i64toi32_i32$4;
      $568$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $21$hi;
      i64toi32_i32$0 = $21;
      i64toi32_i32$4 = $568$hi;
      i64toi32_i32$5 = $568;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $20 = i64toi32_i32$3;
      $20$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = __wasm_i64_mul($18 | 0, i64toi32_i32$1 | 0, $4 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $573 = i64toi32_i32$0;
      $573$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $20$hi;
      i64toi32_i32$2 = i64toi32_i32$3;
      i64toi32_i32$0 = $573$hi;
      i64toi32_i32$5 = $573;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $4 = i64toi32_i32$4;
      $4$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$2 = __wasm_i64_mul($2 | 0, i64toi32_i32$3 | 0, $16 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $578 = i64toi32_i32$2;
      $578$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$2 = $578$hi;
      i64toi32_i32$5 = $578;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $2 = i64toi32_i32$0;
      $2$hi = i64toi32_i32$4;
      i64toi32_i32$3 = i64toi32_i32$0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $534 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
       $534 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
      }
      $581 = $534;
      $581$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $20$hi;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$1 = $20$hi;
      i64toi32_i32$4 = $20;
      i64toi32_i32$3 = $21$hi;
      i64toi32_i32$5 = $21;
      $584 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $585$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$4 = i64toi32_i32$1;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$5 = $4;
      i64toi32_i32$3 = $20;
      $588 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$5 = 0;
      $589$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $585$hi;
      i64toi32_i32$3 = $584;
      i64toi32_i32$4 = $589$hi;
      i64toi32_i32$1 = $588;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $590$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$5 = $2;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$1 = $4;
      $593 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$5 = 0;
      $594$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $590$hi;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$0 = $594$hi;
      i64toi32_i32$3 = $593;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
       $535 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
       $535 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
      }
      $596$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $581$hi;
      i64toi32_i32$2 = $581;
      i64toi32_i32$5 = $596$hi;
      i64toi32_i32$3 = $535;
      i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
      $597 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      $597$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $561$hi;
      i64toi32_i32$1 = $561;
      i64toi32_i32$2 = $597$hi;
      i64toi32_i32$3 = $597;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $20 = i64toi32_i32$0;
      $20$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $22$hi;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$5 = i64toi32_i32$0;
      i64toi32_i32$1 = $22$hi;
      i64toi32_i32$3 = $22;
      $601 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$5 = 0;
      $602$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $560$hi;
      i64toi32_i32$3 = $560;
      i64toi32_i32$4 = $602$hi;
      i64toi32_i32$1 = $601;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $603 = i64toi32_i32$2;
      $603$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $20$hi;
      $604 = $20;
      $604$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $24$hi;
      $605 = $24;
      $605$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = $23$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$3 = $23$hi;
      i64toi32_i32$3 = __wasm_i64_mul($18 | 0, i64toi32_i32$0 | 0, $23 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $4 = i64toi32_i32$3;
      $4$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = __wasm_i64_mul($19 | 0, i64toi32_i32$0 | 0, $16 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $612 = i64toi32_i32$3;
      $612$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$5 = $4;
      i64toi32_i32$3 = $612$hi;
      i64toi32_i32$1 = $612;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $16 = i64toi32_i32$4;
      $16$hi = i64toi32_i32$2;
      i64toi32_i32$0 = i64toi32_i32$4;
      i64toi32_i32$5 = 0;
      i64toi32_i32$1 = 32;
      i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $537 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
       $537 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
      }
      $615 = $537;
      $615$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$2 = $16;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$1 = $4;
      $618 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      i64toi32_i32$1 = $618;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = 32;
      i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
       $538 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$3 | 0) | 0;
       $538 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
      }
      $620$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $615$hi;
      i64toi32_i32$2 = $615;
      i64toi32_i32$1 = $620$hi;
      i64toi32_i32$0 = $538;
      i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
      $621 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
      $621$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $605$hi;
      i64toi32_i32$5 = $605;
      i64toi32_i32$2 = $621$hi;
      i64toi32_i32$0 = $621;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $4 = i64toi32_i32$3;
      $4$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $24$hi;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$5 = $24$hi;
      i64toi32_i32$0 = $24;
      $625 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $626 = $625;
      $626$hi = i64toi32_i32$1;
      i64toi32_i32$1 = i64toi32_i32$4;
      $627 = i64toi32_i32$3;
      $627$hi = i64toi32_i32$4;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$0 = $2;
      i64toi32_i32$4 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
       $539 = 0;
      } else {
       i64toi32_i32$4 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
       $539 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
      }
      $629$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $627$hi;
      i64toi32_i32$1 = $627;
      i64toi32_i32$0 = $629$hi;
      i64toi32_i32$5 = $539;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $630$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = $630$hi;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$5 = $4;
      $632 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $633$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $626$hi;
      i64toi32_i32$5 = $626;
      i64toi32_i32$3 = $633$hi;
      i64toi32_i32$1 = $632;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $634$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $604$hi;
      i64toi32_i32$4 = $604;
      i64toi32_i32$5 = $634$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $4 = i64toi32_i32$3;
      $4$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $20$hi;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$2 = i64toi32_i32$3;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$1 = $20;
      $638 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $639$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $603$hi;
      i64toi32_i32$1 = $603;
      i64toi32_i32$0 = $639$hi;
      i64toi32_i32$4 = $638;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $2 = i64toi32_i32$5;
      $2$hi = i64toi32_i32$3;
      i64toi32_i32$2 = i64toi32_i32$5;
      i64toi32_i32$1 = 131071;
      i64toi32_i32$4 = -1;
      if (i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
       break label$15
      }
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$4 = $1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 49;
      i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
       $540 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
       $540 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
      }
      $644$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$2 = $4;
      i64toi32_i32$4 = 0;
      i64toi32_i32$1 = -1;
      i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
      $1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
      $1$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $3$hi;
      i64toi32_i32$3 = $3;
      i64toi32_i32$2 = 0;
      i64toi32_i32$1 = -1;
      i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
      $16 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
      $16$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = __wasm_i64_mul($1 | 0, i64toi32_i32$2 | 0, $16 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $20 = i64toi32_i32$3;
      $20$hi = i64toi32_i32$2;
      i64toi32_i32$4 = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 0;
      $653 = (i64toi32_i32$4 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$4 = 0;
      $654$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $644$hi;
      i64toi32_i32$1 = $540;
      i64toi32_i32$2 = $654$hi;
      i64toi32_i32$3 = $653;
      i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
      i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
      $655 = i64toi32_i32$0;
      $655$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$5 = 0;
      i64toi32_i32$4 = 0;
      i64toi32_i32$1 = $20$hi;
      i64toi32_i32$3 = $20;
      i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
      i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0;
      i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
      $19 = i64toi32_i32$2;
      $19$hi = i64toi32_i32$0;
      $658 = i64toi32_i32$2;
      $658$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$5 = $4;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $544 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
       $544 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
      }
      $20 = $544;
      $20$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$5 = __wasm_i64_mul($20 | 0, i64toi32_i32$4 | 0, $16 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $21 = i64toi32_i32$5;
      $21$hi = i64toi32_i32$4;
      $664 = i64toi32_i32$5;
      $664$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1$hi;
      $665 = $1;
      $665$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $3$hi;
      i64toi32_i32$0 = $3;
      i64toi32_i32$5 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $545 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
       $545 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
      }
      $18 = $545;
      $18$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $665$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = __wasm_i64_mul($665 | 0, i64toi32_i32$5 | 0, $18 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $669 = i64toi32_i32$0;
      $669$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $664$hi;
      i64toi32_i32$4 = $664;
      i64toi32_i32$0 = $669$hi;
      i64toi32_i32$3 = $669;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $14 = i64toi32_i32$1;
      $14$hi = i64toi32_i32$2;
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
       $546 = 0;
      } else {
       i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
       $546 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
      }
      $22 = $546;
      $22$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $658$hi;
      i64toi32_i32$2 = $658;
      i64toi32_i32$5 = $22$hi;
      i64toi32_i32$3 = $22;
      $674 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $675$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $655$hi;
      i64toi32_i32$3 = $655;
      i64toi32_i32$4 = $675$hi;
      i64toi32_i32$5 = $674;
      i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
      $676 = i64toi32_i32$0;
      $676$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$2 = $2;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = -1;
      i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $678$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = $678$hi;
      $580 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$2 = __wasm_i64_mul($580 | 0, i64toi32_i32$3 | 0, $16 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $680 = i64toi32_i32$2;
      $680$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$1 = $13;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = -1;
      i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
      $683 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
      $683$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$1 = $683$hi;
      i64toi32_i32$1 = __wasm_i64_mul($1 | 0, i64toi32_i32$2 | 0, $683 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $684 = i64toi32_i32$1;
      $684$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $680$hi;
      i64toi32_i32$3 = $680;
      i64toi32_i32$1 = $684$hi;
      i64toi32_i32$5 = $684;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $685$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $20$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = $20$hi;
      i64toi32_i32$3 = $18$hi;
      i64toi32_i32$3 = __wasm_i64_mul($20 | 0, i64toi32_i32$0 | 0, $18 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $688 = i64toi32_i32$3;
      $688$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $685$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$3 = $688$hi;
      i64toi32_i32$5 = $688;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $689 = i64toi32_i32$1;
      $689$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $14$hi;
      i64toi32_i32$0 = $14;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $547 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
       $547 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
      }
      $691 = $547;
      $691$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $14$hi;
      i64toi32_i32$2 = $21$hi;
      i64toi32_i32$2 = $14$hi;
      i64toi32_i32$4 = $14;
      i64toi32_i32$0 = $21$hi;
      i64toi32_i32$5 = $21;
      $694 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      i64toi32_i32$5 = $694;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = 32;
      i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
       $549 = 0;
      } else {
       i64toi32_i32$2 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
       $549 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
      }
      $696$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $691$hi;
      i64toi32_i32$4 = $691;
      i64toi32_i32$5 = $696$hi;
      i64toi32_i32$0 = $549;
      i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
      $697 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
      $697$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $689$hi;
      i64toi32_i32$2 = $689;
      i64toi32_i32$4 = $697$hi;
      i64toi32_i32$0 = $697;
      i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $698 = i64toi32_i32$3;
      $698$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $4$hi;
      $699 = $4;
      $699$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$5 = $17;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = 32;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $550 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
       $550 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
      }
      $701$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $699$hi;
      i64toi32_i32$5 = $701$hi;
      i64toi32_i32$5 = __wasm_i64_mul($699 | 0, i64toi32_i32$2 | 0, $550 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $702 = i64toi32_i32$5;
      $702$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $3$hi;
      $703 = $3;
      $703$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$1 = $2;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = 32;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $551 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $551 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      $705$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $703$hi;
      i64toi32_i32$1 = $705$hi;
      i64toi32_i32$1 = __wasm_i64_mul($703 | 0, i64toi32_i32$5 | 0, $551 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $706 = i64toi32_i32$1;
      $706$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $702$hi;
      i64toi32_i32$2 = $702;
      i64toi32_i32$1 = $706$hi;
      i64toi32_i32$0 = $706;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $707$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $18$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$2 = __wasm_i64_mul($2 | 0, i64toi32_i32$3 | 0, $18 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $710 = i64toi32_i32$2;
      $710$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $707$hi;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$2 = $710$hi;
      i64toi32_i32$0 = $710;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $711$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$4 = $13$hi;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$5 = __wasm_i64_mul($20 | 0, i64toi32_i32$4 | 0, $13 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $714 = i64toi32_i32$5;
      $714$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $711$hi;
      i64toi32_i32$3 = i64toi32_i32$1;
      i64toi32_i32$5 = $714$hi;
      i64toi32_i32$0 = $714;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 32;
      i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
       $553 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$5 | 0) | 0;
       $553 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
      }
      $716$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $698$hi;
      i64toi32_i32$1 = $698;
      i64toi32_i32$4 = $716$hi;
      i64toi32_i32$0 = $553;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $717$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $676$hi;
      i64toi32_i32$3 = $676;
      i64toi32_i32$1 = $717$hi;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
      i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0;
      i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
      $16 = i64toi32_i32$4;
      $16$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$5 = $22$hi;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$2 = $19;
      i64toi32_i32$3 = $22$hi;
      i64toi32_i32$0 = $22;
      i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
      i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
      i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
      $1 = i64toi32_i32$1;
      $1$hi = i64toi32_i32$4;
      $6 = $6 + -1 | 0;
      break label$14;
     }
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$5 = $4;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 33;
     i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $554 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      $554 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
     }
     $18 = $554;
     $18$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$4 = $1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = 48;
     i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
      $555 = 0;
     } else {
      i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$3 | 0) | 0;
      $555 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
     }
     $727 = $555;
     $727$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$2 = $4;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $556 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
      $556 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$3 | 0) | 0;
     }
     $729 = $556;
     $729$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$5 = $2;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 63;
     i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
      $557 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
      $557 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
     }
     $731$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $729$hi;
     i64toi32_i32$4 = $729;
     i64toi32_i32$5 = $731$hi;
     i64toi32_i32$0 = $557;
     i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
     $4 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
     $4$hi = i64toi32_i32$5;
     i64toi32_i32$2 = $4;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = -1;
     i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
     $1 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
     $1$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$5 = $3;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = -1;
     i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
     $16 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
     $16$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$5 = $16$hi;
     i64toi32_i32$5 = __wasm_i64_mul($1 | 0, i64toi32_i32$2 | 0, $16 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $20 = i64toi32_i32$5;
     $20$hi = i64toi32_i32$2;
     i64toi32_i32$4 = i64toi32_i32$5;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = 0;
     $741 = (i64toi32_i32$4 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$4 = 0;
     $742$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $727$hi;
     i64toi32_i32$0 = $727;
     i64toi32_i32$2 = $742$hi;
     i64toi32_i32$5 = $741;
     i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0;
     i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 - i64toi32_i32$1 | 0;
     $743 = i64toi32_i32$3;
     $743$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $20$hi;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = $20$hi;
     i64toi32_i32$5 = $20;
     i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
     i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0;
     i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
     $19 = i64toi32_i32$2;
     $19$hi = i64toi32_i32$3;
     $746 = i64toi32_i32$2;
     $746$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     $747 = $1;
     $747$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $559 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
      $559 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
     }
     $20 = $559;
     $20$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $747$hi;
     i64toi32_i32$1 = $20$hi;
     i64toi32_i32$1 = __wasm_i64_mul($747 | 0, i64toi32_i32$4 | 0, $20 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $21 = i64toi32_i32$1;
     $21$hi = i64toi32_i32$4;
     $752 = i64toi32_i32$1;
     $752$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $18$hi;
     $753 = $18;
     $753$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$3 = $2;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 31;
     i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      $562 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
      $562 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
     }
     $755$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $753$hi;
     i64toi32_i32$4 = $753;
     i64toi32_i32$3 = $755$hi;
     i64toi32_i32$5 = $562;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     $22 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
     $22$hi = i64toi32_i32$3;
     i64toi32_i32$1 = $22;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = -1;
     i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
     $14 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     $14$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $16$hi;
     i64toi32_i32$4 = $14$hi;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$1 = __wasm_i64_mul($14 | 0, i64toi32_i32$4 | 0, $16 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $761 = i64toi32_i32$1;
     $761$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $752$hi;
     i64toi32_i32$3 = $752;
     i64toi32_i32$1 = $761$hi;
     i64toi32_i32$5 = $761;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $18 = i64toi32_i32$0;
     $18$hi = i64toi32_i32$2;
     i64toi32_i32$4 = i64toi32_i32$0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
      $563 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
      $563 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
     }
     $23 = $563;
     $23$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $746$hi;
     i64toi32_i32$2 = $746;
     i64toi32_i32$4 = $23$hi;
     i64toi32_i32$5 = $23;
     $766 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $767$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $743$hi;
     i64toi32_i32$5 = $743;
     i64toi32_i32$3 = $767$hi;
     i64toi32_i32$4 = $766;
     i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
     i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0;
     i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
     $768 = i64toi32_i32$1;
     $768$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $14$hi;
     i64toi32_i32$0 = $20$hi;
     i64toi32_i32$0 = $14$hi;
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$5 = __wasm_i64_mul($14 | 0, i64toi32_i32$0 | 0, $20 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $771 = i64toi32_i32$5;
     $771$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2;
     i64toi32_i32$5 = 0;
     i64toi32_i32$4 = 1;
     i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $564 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
      $564 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$3 | 0) | 0;
     }
     $14 = $564;
     $14$hi = i64toi32_i32$5;
     i64toi32_i32$0 = $14;
     i64toi32_i32$2 = 0;
     i64toi32_i32$4 = -1;
     i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
     $775$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$2 = $775$hi;
     $582 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
     i64toi32_i32$0 = $16$hi;
     i64toi32_i32$0 = __wasm_i64_mul($582 | 0, i64toi32_i32$2 | 0, $16 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $777 = i64toi32_i32$0;
     $777$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $771$hi;
     i64toi32_i32$5 = $771;
     i64toi32_i32$0 = $777$hi;
     i64toi32_i32$4 = $777;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $778$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$2 = $13;
     i64toi32_i32$5 = 0;
     i64toi32_i32$4 = -1;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     $781 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
     $781$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$2 = $781$hi;
     i64toi32_i32$2 = __wasm_i64_mul($1 | 0, i64toi32_i32$5 | 0, $781 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $782 = i64toi32_i32$2;
     $782$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $778$hi;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$2 = $782$hi;
     i64toi32_i32$4 = $782;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $783 = i64toi32_i32$0;
     $783$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$5 = $18;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $565 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
      $565 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$2 | 0) | 0;
     }
     $785 = $565;
     $785$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$1 = $21$hi;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$3 = $18;
     i64toi32_i32$5 = $21$hi;
     i64toi32_i32$4 = $21;
     $788 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = $788;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$4 << i64toi32_i32$2 | 0;
      $566 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$2 | 0) | 0;
      $566 = i64toi32_i32$4 << i64toi32_i32$2 | 0;
     }
     $790$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $785$hi;
     i64toi32_i32$3 = $785;
     i64toi32_i32$4 = $790$hi;
     i64toi32_i32$5 = $566;
     i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
     $791 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $791$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $783$hi;
     i64toi32_i32$1 = $783;
     i64toi32_i32$3 = $791$hi;
     i64toi32_i32$5 = $791;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $792 = i64toi32_i32$2;
     $792$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $4$hi;
     $793 = $4;
     $793$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$4 = $17;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $567 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
      $567 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
     }
     $795$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $793$hi;
     i64toi32_i32$4 = $795$hi;
     i64toi32_i32$4 = __wasm_i64_mul($793 | 0, i64toi32_i32$1 | 0, $567 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $796 = i64toi32_i32$4;
     $796$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     $797 = $3;
     $797$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 33;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $569 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
      $569 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
     }
     $799$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $797$hi;
     i64toi32_i32$0 = $799$hi;
     i64toi32_i32$0 = __wasm_i64_mul($797 | 0, i64toi32_i32$4 | 0, $569 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $800 = i64toi32_i32$0;
     $800$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $796$hi;
     i64toi32_i32$1 = $796;
     i64toi32_i32$0 = $800$hi;
     i64toi32_i32$5 = $800;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $801$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $14$hi;
     i64toi32_i32$2 = $20$hi;
     i64toi32_i32$2 = $14$hi;
     i64toi32_i32$1 = $20$hi;
     i64toi32_i32$1 = __wasm_i64_mul($14 | 0, i64toi32_i32$2 | 0, $20 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $804 = i64toi32_i32$1;
     $804$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $801$hi;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$1 = $804$hi;
     i64toi32_i32$5 = $804;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $805$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$3 = $13$hi;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$4 = __wasm_i64_mul($22 | 0, i64toi32_i32$3 | 0, $13 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $808 = i64toi32_i32$4;
     $808$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $805$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$4 = $808$hi;
     i64toi32_i32$5 = $808;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      $570 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $570 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     }
     $810$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $792$hi;
     i64toi32_i32$0 = $792;
     i64toi32_i32$3 = $810$hi;
     i64toi32_i32$5 = $570;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $811$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $768$hi;
     i64toi32_i32$2 = $768;
     i64toi32_i32$0 = $811$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
     i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
     $16 = i64toi32_i32$3;
     $16$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $19$hi;
     i64toi32_i32$4 = $23$hi;
     i64toi32_i32$4 = $19$hi;
     i64toi32_i32$1 = $19;
     i64toi32_i32$2 = $23$hi;
     i64toi32_i32$5 = $23;
     i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
     i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0;
     i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
     $1 = i64toi32_i32$0;
     $1$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $14$hi;
     $2 = $14;
     $2$hi = i64toi32_i32$3;
    }
    label$16 : {
     if (($6 | 0) < (16384 | 0)) {
      break label$16
     }
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$4 = $15;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $15 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
     $15$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$4;
    }
    $7 = $6 + 16383 | 0;
    label$17 : {
     if (($6 | 0) > (-16383 | 0)) {
      break label$17
     }
     label$18 : {
      if ($7) {
       break label$18
      }
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$3 = $2;
      i64toi32_i32$4 = 65535;
      i64toi32_i32$5 = -1;
      i64toi32_i32$4 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
      $827 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
      $827$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $4$hi;
      $828 = $4;
      $828$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1$hi;
      i64toi32_i32$1 = $1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = 1;
      i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
       $571 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
       $571 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
      }
      $830$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $830$hi;
      i64toi32_i32$4 = $571;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$5 = $3;
      $832 = i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$5 = $16;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 1;
      i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
       $572 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
       $572 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
      }
      $834 = $572;
      $834$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$4 = $1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$1 = 63;
      i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $574 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
       $574 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
      }
      $836$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $834$hi;
      i64toi32_i32$3 = $834;
      i64toi32_i32$4 = $836$hi;
      i64toi32_i32$1 = $574;
      i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
      $1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
      $1$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = $1$hi;
      i64toi32_i32$5 = $1;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$1 = $17;
      $840 = i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$5 = i64toi32_i32$3;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$1 = $1;
      i64toi32_i32$4 = i64toi32_i32$3;
      i64toi32_i32$3 = $17;
      $844 = (i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) | 0 ? $832 : $840;
      i64toi32_i32$1 = 0;
      $845$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $828$hi;
      i64toi32_i32$3 = $828;
      i64toi32_i32$5 = $845$hi;
      i64toi32_i32$4 = $844;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $1 = i64toi32_i32$2;
      $1$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$4 = $4;
      $849 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $850$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $827$hi;
      i64toi32_i32$4 = $827;
      i64toi32_i32$0 = $850$hi;
      i64toi32_i32$3 = $849;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $3 = i64toi32_i32$5;
      $3$hi = i64toi32_i32$2;
      i64toi32_i32$1 = i64toi32_i32$5;
      i64toi32_i32$4 = 65536;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
      if (!(i64toi32_i32$1 & i64toi32_i32$3 | 0 | i64toi32_i32$4 | 0)) {
       break label$18
      }
      i64toi32_i32$4 = $3$hi;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$4 = $3$hi;
      i64toi32_i32$2 = $3;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$3 = $15;
      i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
      $15 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      $15$hi = i64toi32_i32$1;
      break label$4;
     }
     i64toi32_i32$1 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$4;
    }
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = $7;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
     $575 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $575 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
    }
    $860$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = $2;
    i64toi32_i32$4 = 65535;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
    $862 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
    $862$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $860$hi;
    i64toi32_i32$2 = $575;
    i64toi32_i32$1 = $862$hi;
    i64toi32_i32$3 = $862;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $863 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $863$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    $864 = $4;
    $864$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$4 = $1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
     $576 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $576 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
    }
    $866$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $866$hi;
    i64toi32_i32$1 = $576;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$3 = $3;
    $868 = i64toi32_i32$2 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $16$hi;
    i64toi32_i32$3 = $16;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
     $577 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $577 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
    }
    $870 = $577;
    $870$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$1 = $1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $579 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $579 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
    }
    $872$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $870$hi;
    i64toi32_i32$2 = $870;
    i64toi32_i32$1 = $872$hi;
    i64toi32_i32$4 = $579;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $17$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$2 = $17$hi;
    i64toi32_i32$4 = $17;
    $876 = i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 >= i64toi32_i32$4 >>> 0 | 0) | 0;
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$4 = $1;
    i64toi32_i32$1 = i64toi32_i32$2;
    i64toi32_i32$2 = $17;
    $880 = (i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $868 : $876;
    i64toi32_i32$4 = 0;
    $881$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $864$hi;
    i64toi32_i32$2 = $864;
    i64toi32_i32$3 = $881$hi;
    i64toi32_i32$1 = $880;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $1 = i64toi32_i32$0;
    $1$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$4 = i64toi32_i32$0;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4;
    $885 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$4 = 0;
    $886$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $863$hi;
    i64toi32_i32$1 = $863;
    i64toi32_i32$5 = $886$hi;
    i64toi32_i32$2 = $885;
    i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $887$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $15$hi;
    i64toi32_i32$0 = $887$hi;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$1 = $15$hi;
    i64toi32_i32$2 = $15;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $15 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    $15$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$4 = $0;
   HEAP32[i64toi32_i32$4 >> 2] = $1;
   HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = $15$hi;
   HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $15;
   HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$1;
   label$19 : {
    $11 = $5 + 192 | 0;
    if ($11 >>> 0 < global$85 >>> 0) {
     __handle_stack_overflow()
    }
    global$0 = $11;
   }
   return;
  }
  i64toi32_i32$4 = $0;
  i64toi32_i32$1 = 0;
  HEAP32[i64toi32_i32$4 >> 2] = 0;
  HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $15$hi;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$0 = $3;
  i64toi32_i32$4 = $2$hi;
  i64toi32_i32$2 = $2;
  i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$5 = (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = $15$hi;
  i64toi32_i32$4 = 2147450880;
  i64toi32_i32$0 = i64toi32_i32$5 ? $15 : 0;
  i64toi32_i32$2 = i64toi32_i32$5 ? i64toi32_i32$1 : i64toi32_i32$4;
  $907 = i64toi32_i32$0;
  i64toi32_i32$0 = $0;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $907;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
  label$21 : {
   $12 = $5 + 192 | 0;
   if ($12 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $12;
  }
 }
 
 function __fpclassifyl($0, $0$hi, $1, $1$hi) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $4$hi = 0, $4 = 0, $13 = 0, $2 = 0, $3 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $4 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $4$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $13 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $13 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $2 = $13 & 32767 | 0;
    if (($2 | 0) == (32767 | 0)) {
     break label$2
    }
    $3 = 4;
    if ($2) {
     break label$1
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$3 = $0;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    return (!(i64toi32_i32$1 | i64toi32_i32$3 | 0 | i64toi32_i32$0 | 0) ? 2 : 3) | 0;
   }
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$2 = $4;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $0;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $3 = !(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0);
  }
  return $3 | 0;
 }
 
 function fmodl($0, $1, $1$hi, $2, $2$hi, $3, $3$hi, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $5 = 0, $12$hi = 0, $12 = 0, $13$hi = 0, $8 = 0, $13 = 0, i64toi32_i32$6 = 0, $15$hi = 0, $6 = 0, $15 = 0, $9 = 0, $14$hi = 0, $64 = 0, $7 = 0, $66 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $14 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $11 = 0, $10 = 0, $60 = 0, $60$hi = 0, $63$hi = 0, $65 = 0, $65$hi = 0, $67 = 0, $67$hi = 0, $68 = 0, $68$hi = 0, $75$hi = 0, $77 = 0, $77$hi = 0, $136$hi = 0, $139 = 0, $140$hi = 0, $180 = 0, $180$hi = 0, $185 = 0, $186$hi = 0, $224 = 0, $224$hi = 0, $226$hi = 0, $235 = 0, $236 = 0, $236$hi = 0, $238 = 0, $238$hi = 0, $244$hi = 0, $245 = 0, $245$hi = 0, $252 = 0, $252$hi = 0, $257$hi = 0;
  label$1 : {
   $5 = global$0 - 128 | 0;
   $10 = $5;
   if ($5 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $10;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 0;
     if (!(__letf2($3 | 0, i64toi32_i32$0 | 0, $4 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0) | 0)) {
      break label$5
     }
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$2 = $4$hi;
     $6 = __fpclassifyl($3 | 0, i64toi32_i32$3 | 0, $4 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 48;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $64 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $64 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7 = $64;
     $8 = $7 & 32767 | 0;
     if (($8 | 0) == (32767 | 0)) {
      break label$5
     }
     if ($6) {
      break label$4
     }
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    __multf3($5 + 16 | 0 | 0, $1 | 0, i64toi32_i32$3 | 0, $2 | 0, i64toi32_i32$1 | 0, $3 | 0, i64toi32_i32$2 | 0, $4 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $5;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
    $4 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$1 = (i64toi32_i32$1 + 16 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $3 = i64toi32_i32$2;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$3 = i64toi32_i32$2;
    __divtf3($5 | 0, $4 | 0, i64toi32_i32$0 | 0, $3 | 0, i64toi32_i32$2 | 0, $4 | 0, i64toi32_i32$0 | 0, $3 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$2 = $5 + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $5;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $4 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$3;
    break label$3;
   }
   label$6 : {
    i64toi32_i32$3 = $1$hi;
    $60 = $1;
    $60$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = $8;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $66 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $66 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $63$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$3 = $2;
    i64toi32_i32$2 = 65535;
    i64toi32_i32$0 = -1;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    $65 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    $65$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $63$hi;
    i64toi32_i32$1 = $66;
    i64toi32_i32$3 = $65$hi;
    i64toi32_i32$0 = $65;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $12 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    $12$hi = i64toi32_i32$3;
    $67 = $12;
    $67$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $3$hi;
    $68 = $3;
    $68$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$2 = $4;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $69 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $69 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $9 = $69 & 32767 | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = $9;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $70 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $70 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    $75$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $77 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
    $77$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $75$hi;
    i64toi32_i32$2 = $70;
    i64toi32_i32$1 = $77$hi;
    i64toi32_i32$0 = $77;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $13 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $13$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $60$hi;
    i64toi32_i32$2 = $67$hi;
    i64toi32_i32$3 = $68$hi;
    i64toi32_i32$0 = $13$hi;
    if ((__letf2($60 | 0, i64toi32_i32$1 | 0, $67 | 0, i64toi32_i32$2 | 0, $68 | 0, i64toi32_i32$3 | 0, $13 | 0, i64toi32_i32$0 | 0) | 0 | 0) > (0 | 0)) {
     break label$6
    }
    label$7 : {
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$1 = $13$hi;
     if (!(__letf2($1 | 0, i64toi32_i32$0 | 0, $12 | 0, i64toi32_i32$3 | 0, $3 | 0, i64toi32_i32$2 | 0, $13 | 0, i64toi32_i32$1 | 0) | 0)) {
      break label$7
     }
     i64toi32_i32$1 = $1$hi;
     $4 = $1;
     $4$hi = i64toi32_i32$1;
     break label$3;
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 0;
    __multf3($5 + 112 | 0 | 0, $1 | 0, i64toi32_i32$1 | 0, $2 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$2 = $5 + 120 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$3;
    i64toi32_i32$2 = $5;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
    $4 = i64toi32_i32$3;
    $4$hi = i64toi32_i32$0;
    break label$3;
   }
   label$8 : {
    label$9 : {
     if (!$8) {
      break label$9
     }
     i64toi32_i32$0 = $1$hi;
     $4 = $1;
     $4$hi = i64toi32_i32$0;
     break label$8;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $12$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $12$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1081540608;
    __multf3($5 + 96 | 0 | 0, $1 | 0, i64toi32_i32$0 | 0, $12 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$3 = $5 + 104 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $12 = i64toi32_i32$1;
    $12$hi = i64toi32_i32$2;
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $71 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $71 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $8 = $71 + -120 | 0;
    i64toi32_i32$2 = $5;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 96 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 100 | 0) >> 2] | 0;
    $4 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$3;
   }
   label$10 : {
    if ($9) {
     break label$10
    }
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $13$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$1 = $13$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1081540608;
    __multf3($5 + 80 | 0 | 0, $3 | 0, i64toi32_i32$3 | 0, $13 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $5 + 88 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $13 = i64toi32_i32$0;
    $13$hi = i64toi32_i32$2;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $72 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $72 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    $9 = $72 + -120 | 0;
    i64toi32_i32$2 = $5;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 80 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 84 | 0) >> 2] | 0;
    $3 = i64toi32_i32$0;
    $3$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $12$hi;
   i64toi32_i32$2 = $12;
   i64toi32_i32$0 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   i64toi32_i32$2 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $12 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
   $12$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $13$hi;
   i64toi32_i32$0 = $13;
   i64toi32_i32$1 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $14 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $14$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $12$hi;
   i64toi32_i32$1 = $12;
   i64toi32_i32$2 = $14$hi;
   i64toi32_i32$3 = $14;
   i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
   $136$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$0 = $4;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$3 = $3;
   $139 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$0 = 0;
   $140$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $136$hi;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$5 = $140$hi;
   i64toi32_i32$1 = $139;
   i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$1 | 0;
   i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0;
   i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
   $15 = i64toi32_i32$2;
   $15$hi = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = -1;
   if ((i64toi32_i32$4 | 0) > (i64toi32_i32$3 | 0)) {
    $73 = 1
   } else {
    if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$3 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$1 >>> 0) {
      $74 = 0
     } else {
      $74 = 1
     }
     $75 = $74;
    } else {
     $75 = 0
    }
    $73 = $75;
   }
   $6 = $73;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$1 = $4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$3 = $3;
   i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
   $13 = i64toi32_i32$5;
   $13$hi = i64toi32_i32$2;
   label$11 : {
    if (($8 | 0) <= ($9 | 0)) {
     break label$11
    }
    label$12 : while (1) {
     label$13 : {
      label$14 : {
       if (!($6 & 1 | 0)) {
        break label$14
       }
       label$15 : {
        i64toi32_i32$2 = $15$hi;
        i64toi32_i32$2 = $13$hi;
        i64toi32_i32$2 = $15$hi;
        i64toi32_i32$0 = $15;
        i64toi32_i32$1 = $13$hi;
        i64toi32_i32$3 = $13;
        i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
        i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
         break label$15
        }
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$2 = $2$hi;
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$1 = $2$hi;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 0;
        __multf3($5 + 32 | 0 | 0, $1 | 0, i64toi32_i32$2 | 0, $2 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0);
        i64toi32_i32$1 = $5 + 40 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $2 = i64toi32_i32$0;
        $2$hi = i64toi32_i32$3;
        i64toi32_i32$1 = $5;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
        $4 = i64toi32_i32$3;
        $4$hi = i64toi32_i32$0;
        break label$3;
       }
       i64toi32_i32$0 = $13$hi;
       i64toi32_i32$1 = $13;
       i64toi32_i32$3 = 0;
       i64toi32_i32$2 = 63;
       i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = 0;
        $76 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
        $76 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
       }
       $12 = $76;
       $12$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $15$hi;
       i64toi32_i32$0 = $15;
       i64toi32_i32$1 = 0;
       i64toi32_i32$2 = 1;
       i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        $78 = 0;
       } else {
        i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
        $78 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
       }
       $15 = $78;
       $15$hi = i64toi32_i32$1;
       break label$13;
      }
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$3 = $4;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = 63;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $79 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
       $79 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      $15 = $79;
      $15$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $12$hi;
      i64toi32_i32$1 = $12;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = 1;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       $80 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
       $80 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      }
      $12 = $80;
      $12$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      $13 = $4;
      $13$hi = i64toi32_i32$3;
     }
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$0 = $15;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$2 = $12;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $12 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $12$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $14$hi;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$3 = $12;
     i64toi32_i32$0 = $14$hi;
     i64toi32_i32$2 = $14;
     i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
     i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
     i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
     $180 = i64toi32_i32$4;
     $180$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$1 = $13;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
      $81 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
      $81 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
     }
     $4 = $81;
     $4$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$5 = $4;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$2 = $3;
     $185 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $186$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $180$hi;
     i64toi32_i32$2 = $180;
     i64toi32_i32$3 = $186$hi;
     i64toi32_i32$1 = $185;
     i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
     i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
     $15 = i64toi32_i32$0;
     $15$hi = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$1 = -1;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$2 | 0)) {
      $82 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$1 >>> 0) {
        $83 = 0
       } else {
        $83 = 1
       }
       $84 = $83;
      } else {
       $84 = 0
      }
      $82 = $84;
     }
     $6 = $82;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$1 = $4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$2 = $3;
     i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
     i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0;
     i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
     $13 = i64toi32_i32$3;
     $13$hi = i64toi32_i32$0;
     $8 = $8 + -1 | 0;
     if (($8 | 0) > ($9 | 0)) {
      continue label$12
     }
     break label$12;
    };
    $8 = $9;
   }
   label$16 : {
    if (!$6) {
     break label$16
    }
    i64toi32_i32$0 = $15$hi;
    $12 = $15;
    $12$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $13$hi;
    $4 = $13;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $12$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $12$hi;
    i64toi32_i32$5 = $12;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$2 = $4;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | 0) {
     break label$16
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    __multf3($5 + 48 | 0 | 0, $1 | 0, i64toi32_i32$0 | 0, $2 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$1 = $5 + 56 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $2 = i64toi32_i32$5;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$1 = $5;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] | 0;
    $4 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$5;
    break label$3;
   }
   label$17 : {
    i64toi32_i32$5 = $12$hi;
    i64toi32_i32$1 = $12;
    i64toi32_i32$2 = 65535;
    i64toi32_i32$0 = -1;
    if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$17
    }
    label$18 : while (1) {
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$0 = $4;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 63;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $85 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $85 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
     }
     $3 = $85;
     $3$hi = i64toi32_i32$5;
     $8 = $8 + -1 | 0;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$1 = $4;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $86 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
      $86 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $4 = $86;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $3$hi;
     $224 = $3;
     $224$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$5 = $12;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
      $87 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $87 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     }
     $226$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $224$hi;
     i64toi32_i32$0 = $224;
     i64toi32_i32$5 = $226$hi;
     i64toi32_i32$2 = $87;
     i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
     $12 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $12$hi = i64toi32_i32$5;
     i64toi32_i32$1 = $12;
     i64toi32_i32$0 = 65536;
     i64toi32_i32$2 = 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
      continue label$18
     }
     break label$18;
    };
   }
   $6 = $7 & 32768 | 0;
   label$19 : {
    if (($8 | 0) > (0 | 0)) {
     break label$19
    }
    $235 = $5 + 64 | 0;
    i64toi32_i32$1 = $4$hi;
    $236 = $4;
    $236$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $12$hi;
    i64toi32_i32$2 = $12;
    i64toi32_i32$5 = 65535;
    i64toi32_i32$0 = -1;
    i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
    $238 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    $238$hi = i64toi32_i32$5;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $8 + 120 | 0 | $6 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     $88 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
     $88 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    $244$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $238$hi;
    i64toi32_i32$5 = $238;
    i64toi32_i32$1 = $244$hi;
    i64toi32_i32$0 = $88;
    i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $245 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $245$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $236$hi;
    i64toi32_i32$5 = $245$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1065811968;
    __multf3($235 | 0, $236 | 0, i64toi32_i32$1 | 0, $245 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$5 = $5 + 72 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $2 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$5 = $5;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 64 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 68 | 0) >> 2] | 0;
    $4 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$0;
    break label$3;
   }
   i64toi32_i32$0 = $12$hi;
   i64toi32_i32$5 = $12;
   i64toi32_i32$2 = 65535;
   i64toi32_i32$1 = -1;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $252 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
   $252$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = $8 | $6 | 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = 48;
   i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $89 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $89 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $257$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $252$hi;
   i64toi32_i32$2 = $252;
   i64toi32_i32$0 = $257$hi;
   i64toi32_i32$1 = $89;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   $2 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
   $2$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $0;
  HEAP32[i64toi32_i32$2 >> 2] = $4;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $2;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$0;
  label$20 : {
   $11 = $5 + 128 | 0;
   if ($11 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $11;
  }
 }
 
 function fabs($0) {
  $0 = +$0;
  return +Math_abs($0);
 }
 
 function __floatscan($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $8 = 0, i64toi32_i32$0 = 0, $4 = 0, $5 = 0, i64toi32_i32$1 = 0, $9 = 0, i64toi32_i32$2 = 0, $13 = 0, $13$hi = 0, $12 = 0, $12$hi = 0, $6 = 0, $7 = 0, $11 = 0, $10 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   $4 = global$0 - 48 | 0;
   $10 = $4;
   if ($4 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $10;
  }
  i64toi32_i32$0 = 0;
  $12 = 0;
  $12$hi = i64toi32_i32$0;
  label$3 : {
   label$4 : {
    if ($2 >>> 0 > 2 >>> 0) {
     break label$4
    }
    $5 = $1 + 4 | 0;
    $2 = $2 << 2 | 0;
    $6 = HEAP32[($2 + 10556 | 0) >> 2] | 0;
    $7 = HEAP32[($2 + 10544 | 0) >> 2] | 0;
    label$5 : while (1) {
     label$6 : {
      label$7 : {
       $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
       if ($2 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$7
       }
       HEAP32[$5 >> 2] = $2 + 1 | 0;
       $2 = HEAPU8[$2 >> 0] | 0;
       break label$6;
      }
      $2 = __shgetc($1 | 0) | 0;
     }
     if (isspace($2 | 0) | 0) {
      continue label$5
     }
     break label$5;
    };
    label$8 : {
     label$9 : {
      $8 = $2 + -43 | 0;
      if ($8 >>> 0 <= 2 >>> 0) {
       break label$9
      }
      $9 = 1;
      break label$8;
     }
     $9 = 1;
     label$10 : {
      switch ($8 | 0) {
      case 1:
       break label$8;
      default:
       break label$10;
      };
     }
     $9 = ($2 | 0) == (45 | 0) ? -1 : 1;
     label$11 : {
      $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
      if ($2 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$11
      }
      HEAP32[$5 >> 2] = $2 + 1 | 0;
      $2 = HEAPU8[$2 >> 0] | 0;
      break label$8;
     }
     $2 = __shgetc($1 | 0) | 0;
    }
    $8 = 0;
    label$12 : {
     label$13 : {
      label$14 : {
       label$15 : while (1) {
        if (($2 | 32 | 0 | 0) != (HEAP8[($8 + 10468 | 0) >> 0] | 0 | 0)) {
         break label$14
        }
        label$16 : {
         if ($8 >>> 0 > 6 >>> 0) {
          break label$16
         }
         label$17 : {
          $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
          if ($2 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$17
          }
          HEAP32[$5 >> 2] = $2 + 1 | 0;
          $2 = HEAPU8[$2 >> 0] | 0;
          break label$16;
         }
         $2 = __shgetc($1 | 0) | 0;
        }
        $8 = $8 + 1 | 0;
        if (($8 | 0) != (8 | 0)) {
         continue label$15
        }
        break label$13;
       };
      }
      label$18 : {
       if (($8 | 0) == (3 | 0)) {
        break label$18
       }
       if (($8 | 0) == (8 | 0)) {
        break label$13
       }
       if (!$3) {
        break label$12
       }
       if ($8 >>> 0 < 4 >>> 0) {
        break label$12
       }
       if (($8 | 0) == (8 | 0)) {
        break label$13
       }
      }
      label$19 : {
       $1 = HEAP32[($1 + 104 | 0) >> 2] | 0;
       if (!$1) {
        break label$19
       }
       HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1 | 0;
      }
      if (!$3) {
       break label$13
      }
      if ($8 >>> 0 < 4 >>> 0) {
       break label$13
      }
      label$20 : while (1) {
       label$21 : {
        if (!$1) {
         break label$21
        }
        HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1 | 0;
       }
       $8 = $8 + -1 | 0;
       if ($8 >>> 0 > 3 >>> 0) {
        continue label$20
       }
       break label$20;
      };
     }
     __extendsftf2($4 | 0, Math_fround(Math_fround(Math_fround($9 | 0) * Math_fround(infinity))));
     i64toi32_i32$2 = $4 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $13 = i64toi32_i32$0;
     $13$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $4;
     i64toi32_i32$1 = HEAP32[$4 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($4 + 4 | 0) >> 2] | 0;
     $12 = i64toi32_i32$1;
     $12$hi = i64toi32_i32$0;
     break label$3;
    }
    label$22 : {
     label$23 : {
      label$24 : {
       if ($8) {
        break label$24
       }
       $8 = 0;
       label$25 : while (1) {
        if (($2 | 32 | 0 | 0) != (HEAP8[($8 + 10477 | 0) >> 0] | 0 | 0)) {
         break label$24
        }
        label$26 : {
         if ($8 >>> 0 > 1 >>> 0) {
          break label$26
         }
         label$27 : {
          $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
          if ($2 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$27
          }
          HEAP32[$5 >> 2] = $2 + 1 | 0;
          $2 = HEAPU8[$2 >> 0] | 0;
          break label$26;
         }
         $2 = __shgetc($1 | 0) | 0;
        }
        $8 = $8 + 1 | 0;
        if (($8 | 0) != (3 | 0)) {
         continue label$25
        }
        break label$23;
       };
      }
      label$28 : {
       label$29 : {
        if ($8 >>> 0 > 3 >>> 0) {
         break label$29
        }
        switch ($8 | 0) {
        case 3:
         break label$23;
        case 1:
        case 2:
         break label$29;
        default:
         break label$28;
        };
       }
       label$30 : {
        if (!(HEAP32[($1 + 104 | 0) >> 2] | 0)) {
         break label$30
        }
        HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1 | 0;
       }
       (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 28), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       break label$22;
      }
      label$31 : {
       if (($2 | 0) != (48 | 0)) {
        break label$31
       }
       label$32 : {
        label$33 : {
         $8 = HEAP32[($1 + 4 | 0) >> 2] | 0;
         if ($8 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
          break label$33
         }
         HEAP32[$5 >> 2] = $8 + 1 | 0;
         $8 = HEAPU8[$8 >> 0] | 0;
         break label$32;
        }
        $8 = __shgetc($1 | 0) | 0;
       }
       label$34 : {
        if (($8 | 32 | 0 | 0) != (120 | 0)) {
         break label$34
        }
        hexfloat($4 + 16 | 0 | 0, $1 | 0, $7 | 0, $6 | 0, $9 | 0, $3 | 0);
        i64toi32_i32$2 = $4;
        i64toi32_i32$0 = HEAP32[($4 + 24 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($4 + 28 | 0) >> 2] | 0;
        $13 = i64toi32_i32$0;
        $13$hi = i64toi32_i32$1;
        i64toi32_i32$2 = $4;
        i64toi32_i32$1 = HEAP32[($4 + 16 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($4 + 20 | 0) >> 2] | 0;
        $12 = i64toi32_i32$1;
        $12$hi = i64toi32_i32$0;
        break label$3;
       }
       if (!(HEAP32[($1 + 104 | 0) >> 2] | 0)) {
        break label$31
       }
       HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1 | 0;
      }
      decfloat($4 + 32 | 0 | 0, $1 | 0, $2 | 0, $7 | 0, $6 | 0, $9 | 0, $3 | 0);
      i64toi32_i32$2 = $4;
      i64toi32_i32$0 = HEAP32[($4 + 40 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($4 + 44 | 0) >> 2] | 0;
      $13 = i64toi32_i32$0;
      $13$hi = i64toi32_i32$1;
      i64toi32_i32$2 = $4;
      i64toi32_i32$1 = HEAP32[($4 + 32 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($4 + 36 | 0) >> 2] | 0;
      $12 = i64toi32_i32$1;
      $12$hi = i64toi32_i32$0;
      break label$3;
     }
     label$35 : {
      label$36 : {
       $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
       if ($2 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$36
       }
       HEAP32[$5 >> 2] = $2 + 1 | 0;
       $2 = HEAPU8[$2 >> 0] | 0;
       break label$35;
      }
      $2 = __shgetc($1 | 0) | 0;
     }
     label$37 : {
      label$38 : {
       if (($2 | 0) != (40 | 0)) {
        break label$38
       }
       $8 = 1;
       break label$37;
      }
      i64toi32_i32$0 = 2147450880;
      $13 = 0;
      $13$hi = i64toi32_i32$0;
      if (!(HEAP32[($1 + 104 | 0) >> 2] | 0)) {
       break label$3
      }
      HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1 | 0;
      break label$3;
     }
     label$39 : while (1) {
      label$40 : {
       label$41 : {
        $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
        if ($2 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$41
        }
        HEAP32[$5 >> 2] = $2 + 1 | 0;
        $2 = HEAPU8[$2 >> 0] | 0;
        break label$40;
       }
       $2 = __shgetc($1 | 0) | 0;
      }
      $9 = $2 + -65 | 0;
      label$42 : {
       label$43 : {
        if (($2 + -48 | 0) >>> 0 < 10 >>> 0) {
         break label$43
        }
        if ($9 >>> 0 < 26 >>> 0) {
         break label$43
        }
        $9 = $2 + -97 | 0;
        if (($2 | 0) == (95 | 0)) {
         break label$43
        }
        if ($9 >>> 0 >= 26 >>> 0) {
         break label$42
        }
       }
       $8 = $8 + 1 | 0;
       continue label$39;
      }
      break label$39;
     };
     i64toi32_i32$0 = 2147450880;
     $13 = 0;
     $13$hi = i64toi32_i32$0;
     if (($2 | 0) == (41 | 0)) {
      break label$3
     }
     label$44 : {
      $2 = HEAP32[($1 + 104 | 0) >> 2] | 0;
      if (!$2) {
       break label$44
      }
      HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1 | 0;
     }
     label$45 : {
      if (!$3) {
       break label$45
      }
      if (!$8) {
       break label$3
      }
      label$46 : while (1) {
       $8 = $8 + -1 | 0;
       label$47 : {
        if (!$2) {
         break label$47
        }
        HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1 | 0;
       }
       if ($8) {
        continue label$46
       }
       break label$3;
      };
     }
     (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 28), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    }
    i64toi32_i32$0 = 0;
    $12 = 0;
    $12$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    __shlim($1 | 0, 0 | 0, i64toi32_i32$0 | 0);
   }
   i64toi32_i32$0 = 0;
   $13 = 0;
   $13$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $12$hi;
  i64toi32_i32$1 = $0;
  HEAP32[i64toi32_i32$1 >> 2] = $12;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $13$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $13;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  label$48 : {
   $11 = $4 + 48 | 0;
   if ($11 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $11;
  }
 }
 
 function hexfloat($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $6 = 0, i64toi32_i32$4 = 0, $7 = 0, $18$hi = 0, $21$hi = 0, $18 = 0, $21 = 0, $17$hi = 0, $19$hi = 0, $16$hi = 0, $17 = 0, $19 = 0, $20$hi = 0, $16 = 0, $10 = 0, $20 = 0, $8 = 0, $9 = 0, $22$hi = 0, $12 = 0, $22 = 0, $11 = 0, $13 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $15 = 0, $14 = 0, $139 = 0, $139$hi = 0, $143 = 0, $143$hi = 0, $148 = 0, $148$hi = 0, $152 = 0, $152$hi = 0, $170 = 0, $170$hi = 0, $174 = 0, $174$hi = 0, $263$hi = 0, $270 = 0, $270$hi = 0, $279 = 0, $279$hi = 0, $283 = 0, $283$hi = 0, $287 = 0, $287$hi = 0, $291 = 0, $291$hi = 0, $301 = 0, $301$hi = 0, $318 = 0, $318$hi = 0, $322 = 0, $322$hi = 0, $327 = 0, $327$hi = 0, $329 = 0, $329$hi = 0, $347$hi = 0, $355 = 0, $356 = 0, $359$hi = 0, $383 = 0, $383$hi = 0, $387 = 0, $387$hi = 0, $401 = 0, $421 = 0, $421$hi = 0, $425 = 0, $425$hi = 0, $429 = 0, $429$hi = 0, $433 = 0, $433$hi = 0, $440 = 0, $440$hi = 0, $443 = 0, $443$hi = 0, $449 = 0, $449$hi = 0, $453 = 0, $453$hi = 0, $455 = 0, $455$hi = 0, $459 = 0, $459$hi = 0, $463 = 0, $463$hi = 0, $467 = 0, $467$hi = 0, $497 = 0, $497$hi = 0, $501 = 0, $501$hi = 0, $505 = 0, $505$hi = 0, $509 = 0, $509$hi = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   $6 = global$0 - 432 | 0;
   $14 = $6;
   if ($6 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $14;
  }
  label$3 : {
   label$4 : {
    $7 = HEAP32[($1 + 4 | 0) >> 2] | 0;
    if ($7 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
     break label$4
    }
    HEAP32[($1 + 4 | 0) >> 2] = $7 + 1 | 0;
    $7 = HEAPU8[$7 >> 0] | 0;
    break label$3;
   }
   $7 = __shgetc($1 | 0) | 0;
  }
  $8 = 0;
  i64toi32_i32$0 = 0;
  $16 = 0;
  $16$hi = i64toi32_i32$0;
  $9 = 0;
  label$5 : {
   label$6 : {
    label$7 : {
     label$8 : while (1) {
      label$9 : {
       if (($7 | 0) == (48 | 0)) {
        break label$9
       }
       if (($7 | 0) != (46 | 0)) {
        break label$5
       }
       $7 = HEAP32[($1 + 4 | 0) >> 2] | 0;
       if ($7 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$7
       }
       HEAP32[($1 + 4 | 0) >> 2] = $7 + 1 | 0;
       $7 = HEAPU8[$7 >> 0] | 0;
       break label$6;
      }
      label$10 : {
       $7 = HEAP32[($1 + 4 | 0) >> 2] | 0;
       if ($7 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$10
       }
       $9 = 1;
       HEAP32[($1 + 4 | 0) >> 2] = $7 + 1 | 0;
       $7 = HEAPU8[$7 >> 0] | 0;
       continue label$8;
      }
      $9 = 1;
      $7 = __shgetc($1 | 0) | 0;
      continue label$8;
     };
    }
    $7 = __shgetc($1 | 0) | 0;
   }
   $8 = 1;
   i64toi32_i32$0 = 0;
   $16 = 0;
   $16$hi = i64toi32_i32$0;
   if (($7 | 0) != (48 | 0)) {
    break label$5
   }
   label$11 : while (1) {
    label$12 : {
     label$13 : {
      $7 = HEAP32[($1 + 4 | 0) >> 2] | 0;
      if ($7 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$13
      }
      HEAP32[($1 + 4 | 0) >> 2] = $7 + 1 | 0;
      $7 = HEAPU8[$7 >> 0] | 0;
      break label$12;
     }
     $7 = __shgetc($1 | 0) | 0;
    }
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$2 = $16;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $16 = i64toi32_i32$4;
    $16$hi = i64toi32_i32$5;
    if (($7 | 0) == (48 | 0)) {
     continue label$11
    }
    break label$11;
   };
   $8 = 1;
   $9 = 1;
  }
  i64toi32_i32$5 = 1073676288;
  $17 = 0;
  $17$hi = i64toi32_i32$5;
  $10 = 0;
  i64toi32_i32$5 = 0;
  $18 = 0;
  $18$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  $19 = 0;
  $19$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  $20 = 0;
  $20$hi = i64toi32_i32$5;
  $11 = 0;
  i64toi32_i32$5 = 0;
  $21 = 0;
  $21$hi = i64toi32_i32$5;
  label$14 : {
   label$15 : while (1) {
    $12 = $7 | 32 | 0;
    label$16 : {
     label$17 : {
      $13 = $7 + -48 | 0;
      if ($13 >>> 0 < 10 >>> 0) {
       break label$17
      }
      label$18 : {
       if (($7 | 0) == (46 | 0)) {
        break label$18
       }
       if (($12 + -97 | 0) >>> 0 > 5 >>> 0) {
        break label$14
       }
      }
      if (($7 | 0) != (46 | 0)) {
       break label$17
      }
      if ($8) {
       break label$14
      }
      $8 = 1;
      i64toi32_i32$5 = $21$hi;
      $16 = $21;
      $16$hi = i64toi32_i32$5;
      break label$16;
     }
     $7 = ($7 | 0) > (57 | 0) ? $12 + -87 | 0 : $13;
     label$19 : {
      label$20 : {
       i64toi32_i32$5 = $21$hi;
       i64toi32_i32$0 = $21;
       i64toi32_i32$2 = 0;
       i64toi32_i32$3 = 7;
       if ((i64toi32_i32$5 | 0) > (i64toi32_i32$2 | 0)) {
        $110 = 1
       } else {
        if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$2 | 0)) {
         if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
          $111 = 0
         } else {
          $111 = 1
         }
         $112 = $111;
        } else {
         $112 = 0
        }
        $110 = $112;
       }
       if ($110) {
        break label$20
       }
       $10 = $7 + ($10 << 4 | 0) | 0;
       break label$19;
      }
      label$21 : {
       i64toi32_i32$0 = $21$hi;
       i64toi32_i32$3 = $21;
       i64toi32_i32$5 = 0;
       i64toi32_i32$2 = 28;
       if ((i64toi32_i32$0 | 0) > (i64toi32_i32$5 | 0)) {
        $113 = 1
       } else {
        if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$5 | 0)) {
         if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$2 >>> 0) {
          $114 = 0
         } else {
          $114 = 1
         }
         $115 = $114;
        } else {
         $115 = 0
        }
        $113 = $115;
       }
       if ($113) {
        break label$21
       }
       __floatsitf($6 + 48 | 0 | 0, $7 | 0);
       i64toi32_i32$3 = $20$hi;
       i64toi32_i32$3 = $17$hi;
       i64toi32_i32$3 = $20$hi;
       i64toi32_i32$0 = $17$hi;
       i64toi32_i32$2 = 0;
       i64toi32_i32$5 = 1073414144;
       __multf3($6 + 32 | 0 | 0, $20 | 0, i64toi32_i32$3 | 0, $17 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
       i64toi32_i32$0 = $6;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
       $20 = i64toi32_i32$5;
       $20$hi = i64toi32_i32$2;
       i64toi32_i32$0 = (i64toi32_i32$0 + 32 | 0) + 8 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $17 = i64toi32_i32$2;
       $17$hi = i64toi32_i32$5;
       i64toi32_i32$0 = $6;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
       $139 = i64toi32_i32$5;
       $139$hi = i64toi32_i32$2;
       i64toi32_i32$0 = (i64toi32_i32$0 + 48 | 0) + 8 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $143 = i64toi32_i32$2;
       $143$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $20$hi;
       i64toi32_i32$2 = $17$hi;
       i64toi32_i32$0 = $139$hi;
       i64toi32_i32$3 = $143$hi;
       __multf3($6 + 16 | 0 | 0, $20 | 0, i64toi32_i32$5 | 0, $17 | 0, i64toi32_i32$2 | 0, $139 | 0, i64toi32_i32$0 | 0, $143 | 0, i64toi32_i32$3 | 0);
       i64toi32_i32$3 = $18$hi;
       i64toi32_i32$3 = $19$hi;
       i64toi32_i32$2 = $6;
       i64toi32_i32$3 = HEAP32[($6 + 16 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($6 + 20 | 0) >> 2] | 0;
       $148 = i64toi32_i32$3;
       $148$hi = i64toi32_i32$0;
       i64toi32_i32$2 = ($6 + 16 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $152 = i64toi32_i32$0;
       $152$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $18$hi;
       i64toi32_i32$0 = $19$hi;
       i64toi32_i32$2 = $148$hi;
       i64toi32_i32$5 = $152$hi;
       __addtf3($6 | 0, $18 | 0, i64toi32_i32$3 | 0, $19 | 0, i64toi32_i32$0 | 0, $148 | 0, i64toi32_i32$2 | 0, $152 | 0, i64toi32_i32$5 | 0);
       i64toi32_i32$0 = $6 + 8 | 0;
       i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $19 = i64toi32_i32$5;
       $19$hi = i64toi32_i32$2;
       i64toi32_i32$0 = $6;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $18 = i64toi32_i32$2;
       $18$hi = i64toi32_i32$5;
       break label$19;
      }
      if ($11) {
       break label$19
      }
      if (!$7) {
       break label$19
      }
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 1073610752;
      __multf3($6 + 80 | 0 | 0, $20 | 0, i64toi32_i32$5 | 0, $17 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$3 = $18$hi;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$2 = $6;
      i64toi32_i32$3 = HEAP32[($6 + 80 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($6 + 84 | 0) >> 2] | 0;
      $170 = i64toi32_i32$3;
      $170$hi = i64toi32_i32$0;
      i64toi32_i32$2 = ($6 + 80 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $174 = i64toi32_i32$0;
      $174$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $18$hi;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$2 = $170$hi;
      i64toi32_i32$5 = $174$hi;
      __addtf3($6 + 64 | 0 | 0, $18 | 0, i64toi32_i32$3 | 0, $19 | 0, i64toi32_i32$0 | 0, $170 | 0, i64toi32_i32$2 | 0, $174 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$0 = ($6 + 64 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $19 = i64toi32_i32$5;
      $19$hi = i64toi32_i32$2;
      $11 = 1;
      i64toi32_i32$0 = $6;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
      $18 = i64toi32_i32$2;
      $18$hi = i64toi32_i32$5;
     }
     i64toi32_i32$5 = $21$hi;
     i64toi32_i32$0 = $21;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 1;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $21 = i64toi32_i32$1;
     $21$hi = i64toi32_i32$4;
     $9 = 1;
    }
    label$22 : {
     $7 = HEAP32[($1 + 4 | 0) >> 2] | 0;
     if ($7 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
      break label$22
     }
     HEAP32[($1 + 4 | 0) >> 2] = $7 + 1 | 0;
     $7 = HEAPU8[$7 >> 0] | 0;
     continue label$15;
    }
    $7 = __shgetc($1 | 0) | 0;
    continue label$15;
   };
  }
  label$23 : {
   label$24 : {
    label$25 : {
     label$26 : {
      if ($9) {
       break label$26
      }
      label$27 : {
       if (HEAP32[($1 + 104 | 0) >> 2] | 0) {
        break label$27
       }
       if ($5) {
        break label$24
       }
       break label$25;
      }
      $7 = HEAP32[($1 + 4 | 0) >> 2] | 0;
      HEAP32[($1 + 4 | 0) >> 2] = $7 + -1 | 0;
      if (!$5) {
       break label$25
      }
      HEAP32[($1 + 4 | 0) >> 2] = $7 + -2 | 0;
      if (!$8) {
       break label$24
      }
      HEAP32[($1 + 4 | 0) >> 2] = $7 + -3 | 0;
      break label$24;
     }
     label$28 : {
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$5 = $21;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 7;
      if ((i64toi32_i32$4 | 0) > (i64toi32_i32$0 | 0)) {
       $116 = 1
      } else {
       if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$3 >>> 0) {
         $117 = 0
        } else {
         $117 = 1
        }
        $118 = $117;
       } else {
        $118 = 0
       }
       $116 = $118;
      }
      if ($116) {
       break label$28
      }
      i64toi32_i32$5 = $21$hi;
      $17 = $21;
      $17$hi = i64toi32_i32$5;
      label$29 : while (1) {
       $10 = $10 << 4 | 0;
       i64toi32_i32$5 = $17$hi;
       i64toi32_i32$3 = $17;
       i64toi32_i32$4 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $17 = i64toi32_i32$2;
       $17$hi = i64toi32_i32$1;
       i64toi32_i32$5 = i64toi32_i32$2;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 8;
       if ((i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0) {
        continue label$29
       }
       break label$29;
      };
     }
     label$30 : {
      label$31 : {
       if (($12 | 0) != (112 | 0)) {
        break label$31
       }
       i64toi32_i32$5 = scanexp($1 | 0, $5 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $17 = i64toi32_i32$5;
       $17$hi = i64toi32_i32$1;
       i64toi32_i32$0 = i64toi32_i32$5;
       i64toi32_i32$5 = -2147483648;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | 0) {
        break label$30
       }
       label$32 : {
        if (!$5) {
         break label$32
        }
        i64toi32_i32$0 = 0;
        $17 = 0;
        $17$hi = i64toi32_i32$0;
        if (!(HEAP32[($1 + 104 | 0) >> 2] | 0)) {
         break label$30
        }
        HEAP32[($1 + 4 | 0) >> 2] = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
        break label$30;
       }
       i64toi32_i32$0 = 0;
       $18 = 0;
       $18$hi = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       __shlim($1 | 0, 0 | 0, i64toi32_i32$0 | 0);
       i64toi32_i32$0 = 0;
       $21 = 0;
       $21$hi = i64toi32_i32$0;
       break label$23;
      }
      i64toi32_i32$0 = 0;
      $17 = 0;
      $17$hi = i64toi32_i32$0;
      if (!(HEAP32[($1 + 104 | 0) >> 2] | 0)) {
       break label$30
      }
      HEAP32[($1 + 4 | 0) >> 2] = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
     }
     label$33 : {
      if ($10) {
       break label$33
      }
      __extenddftf2($6 + 112 | 0 | 0, +(+($4 | 0) * 0.0));
      i64toi32_i32$3 = $6 + 120 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $21 = i64toi32_i32$0;
      $21$hi = i64toi32_i32$1;
      i64toi32_i32$3 = $6;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
      $18 = i64toi32_i32$1;
      $18$hi = i64toi32_i32$0;
      break label$23;
     }
     label$34 : {
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$0 = $21$hi;
      i64toi32_i32$4 = $8;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$5 = i64toi32_i32$4 ? $16 : $21;
      i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$1;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = 2;
      i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
       $119 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
       $119 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
      }
      $263$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$5 = $263$hi;
      i64toi32_i32$3 = $119;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$0 = $17;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = -32;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $21 = i64toi32_i32$4;
      $21$hi = i64toi32_i32$1;
      i64toi32_i32$5 = 0 - $3 | 0;
      i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
      $270 = i64toi32_i32$5;
      $270$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$5 = $270$hi;
      i64toi32_i32$0 = $270;
      if ((i64toi32_i32$1 | 0) < (i64toi32_i32$5 | 0)) {
       $120 = 1
      } else {
       if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$5 | 0)) {
        if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0) {
         $121 = 0
        } else {
         $121 = 1
        }
        $122 = $121;
       } else {
        $122 = 0
       }
       $120 = $122;
      }
      if ($120) {
       break label$34
      }
      (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      __floatsitf($6 + 160 | 0 | 0, $4 | 0);
      i64toi32_i32$0 = $6;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 160 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 164 | 0) >> 2] | 0;
      $279 = i64toi32_i32$2;
      $279$hi = i64toi32_i32$1;
      i64toi32_i32$0 = (i64toi32_i32$0 + 160 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $283 = i64toi32_i32$1;
      $283$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $279$hi;
      i64toi32_i32$1 = $283$hi;
      i64toi32_i32$0 = -1;
      i64toi32_i32$5 = 2147418111;
      __multf3($6 + 144 | 0 | 0, $279 | 0, i64toi32_i32$2 | 0, $283 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$0 | 0, -1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$1 = $6;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] | 0;
      $287 = i64toi32_i32$5;
      $287$hi = i64toi32_i32$0;
      i64toi32_i32$1 = (i64toi32_i32$1 + 144 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $291 = i64toi32_i32$0;
      $291$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $287$hi;
      i64toi32_i32$0 = $291$hi;
      i64toi32_i32$1 = -1;
      i64toi32_i32$2 = 2147418111;
      __multf3($6 + 128 | 0 | 0, $287 | 0, i64toi32_i32$5 | 0, $291 | 0, i64toi32_i32$0 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$2 | 0);
      i64toi32_i32$0 = ($6 + 128 | 0) + 8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $21 = i64toi32_i32$2;
      $21$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $6;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 128 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 132 | 0) >> 2] | 0;
      $18 = i64toi32_i32$1;
      $18$hi = i64toi32_i32$2;
      break label$23;
     }
     label$35 : {
      i64toi32_i32$2 = $21$hi;
      i64toi32_i32$1 = $3 + -226 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
      $301 = i64toi32_i32$1;
      $301$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $21$hi;
      i64toi32_i32$0 = $21;
      i64toi32_i32$1 = $301$hi;
      i64toi32_i32$5 = $301;
      if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
       $123 = 1
      } else {
       if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$5 >>> 0) {
         $124 = 0
        } else {
         $124 = 1
        }
        $125 = $124;
       } else {
        $125 = 0
       }
       $123 = $125;
      }
      if ($123) {
       break label$35
      }
      label$36 : {
       if (($10 | 0) <= (-1 | 0)) {
        break label$36
       }
       label$37 : while (1) {
        i64toi32_i32$0 = $18$hi;
        i64toi32_i32$0 = $19$hi;
        i64toi32_i32$0 = $18$hi;
        i64toi32_i32$2 = $19$hi;
        i64toi32_i32$5 = 0;
        i64toi32_i32$1 = -1073807360;
        __addtf3($6 + 416 | 0 | 0, $18 | 0, i64toi32_i32$0 | 0, $19 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0);
        i64toi32_i32$1 = i64toi32_i32$0;
        i64toi32_i32$1 = i64toi32_i32$2;
        i64toi32_i32$1 = i64toi32_i32$0;
        i64toi32_i32$5 = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 1073610752;
        $7 = __getf2($18 | 0, i64toi32_i32$1 | 0, $19 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$0 = i64toi32_i32$5;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$5 = $6;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 416 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 420 | 0) >> 2] | 0;
        $318 = i64toi32_i32$0;
        $318$hi = i64toi32_i32$2;
        $1 = ($7 | 0) < (0 | 0);
        i64toi32_i32$3 = $1;
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$0 = $318$hi;
        i64toi32_i32$1 = i64toi32_i32$3 ? $18 : $318;
        i64toi32_i32$5 = i64toi32_i32$3 ? i64toi32_i32$2 : i64toi32_i32$0;
        $322 = i64toi32_i32$1;
        $322$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $19$hi;
        i64toi32_i32$3 = ($6 + 416 | 0) + 8 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
        $327 = i64toi32_i32$5;
        $327$hi = i64toi32_i32$1;
        i64toi32_i32$0 = $1;
        i64toi32_i32$1 = $19$hi;
        i64toi32_i32$5 = $327$hi;
        i64toi32_i32$2 = i64toi32_i32$0 ? $19 : $327;
        i64toi32_i32$3 = i64toi32_i32$0 ? i64toi32_i32$1 : i64toi32_i32$5;
        $329 = i64toi32_i32$2;
        $329$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $18$hi;
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$0 = $322$hi;
        i64toi32_i32$1 = $329$hi;
        __addtf3($6 + 400 | 0 | 0, $18 | 0, i64toi32_i32$3 | 0, $19 | 0, i64toi32_i32$2 | 0, $322 | 0, i64toi32_i32$0 | 0, $329 | 0, i64toi32_i32$1 | 0);
        i64toi32_i32$1 = $21$hi;
        i64toi32_i32$2 = $21;
        i64toi32_i32$0 = -1;
        i64toi32_i32$3 = -1;
        i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $21 = i64toi32_i32$5;
        $21$hi = i64toi32_i32$4;
        i64toi32_i32$1 = ($6 + 400 | 0) + 8 | 0;
        i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $19 = i64toi32_i32$4;
        $19$hi = i64toi32_i32$2;
        i64toi32_i32$1 = $6;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 400 | 0) >> 2] | 0;
        i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 404 | 0) >> 2] | 0;
        $18 = i64toi32_i32$2;
        $18$hi = i64toi32_i32$4;
        $10 = $10 << 1 | 0 | ($7 | 0) > (-1 | 0) | 0;
        if (($10 | 0) > (-1 | 0)) {
         continue label$37
        }
        break label$37;
       };
      }
      label$38 : {
       label$39 : {
        i64toi32_i32$4 = $21$hi;
        i64toi32_i32$2 = $3;
        i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
        $347$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $21$hi;
        i64toi32_i32$1 = $21;
        i64toi32_i32$2 = $347$hi;
        i64toi32_i32$3 = $3;
        i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        i64toi32_i32$5 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$2 | 0;
        i64toi32_i32$5 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
        i64toi32_i32$4 = i64toi32_i32$0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 32;
        i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
        i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
        }
        $16 = i64toi32_i32$2;
        $16$hi = i64toi32_i32$0;
        $7 = i64toi32_i32$2;
        $355 = (i64toi32_i32$2 | 0) > (0 | 0) ? i64toi32_i32$2 : 0;
        $356 = $2;
        i64toi32_i32$4 = $2;
        i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
        $359$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $16$hi;
        i64toi32_i32$5 = i64toi32_i32$2;
        i64toi32_i32$4 = $359$hi;
        i64toi32_i32$3 = $2;
        if ((i64toi32_i32$0 | 0) < (i64toi32_i32$4 | 0)) {
         $126 = 1
        } else {
         if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$4 | 0)) {
          if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
           $127 = 0
          } else {
           $127 = 1
          }
          $128 = $127;
         } else {
          $128 = 0
         }
         $126 = $128;
        }
        $7 = $126 ? $355 : $356;
        if (($7 | 0) < (113 | 0)) {
         break label$39
        }
        __floatsitf($6 + 384 | 0 | 0, $4 | 0);
        i64toi32_i32$3 = $6 + 392 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
        $16 = i64toi32_i32$5;
        $16$hi = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        $17 = 0;
        $17$hi = i64toi32_i32$0;
        i64toi32_i32$3 = $6;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 384 | 0) >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 388 | 0) >> 2] | 0;
        $20 = i64toi32_i32$0;
        $20$hi = i64toi32_i32$5;
        i64toi32_i32$5 = 0;
        $22 = 0;
        $22$hi = i64toi32_i32$5;
        break label$38;
       }
       __extenddftf2($6 + 352 | 0 | 0, +(+scalbn(+(1.0), 144 - $7 | 0 | 0)));
       __floatsitf($6 + 336 | 0 | 0, $4 | 0);
       i64toi32_i32$3 = $6;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 352 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 356 | 0) >> 2] | 0;
       $383 = i64toi32_i32$5;
       $383$hi = i64toi32_i32$0;
       i64toi32_i32$3 = (i64toi32_i32$3 + 352 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
       $387 = i64toi32_i32$0;
       $387$hi = i64toi32_i32$5;
       i64toi32_i32$3 = $6;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 336 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 340 | 0) >> 2] | 0;
       $20 = i64toi32_i32$5;
       $20$hi = i64toi32_i32$0;
       i64toi32_i32$3 = (i64toi32_i32$3 + 336 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
       $16 = i64toi32_i32$0;
       $16$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $383$hi;
       i64toi32_i32$0 = $387$hi;
       i64toi32_i32$3 = $20$hi;
       i64toi32_i32$4 = $16$hi;
       copysignl($6 + 368 | 0 | 0, $383 | 0, i64toi32_i32$5 | 0, $387 | 0, i64toi32_i32$0 | 0, $20 | 0, i64toi32_i32$3 | 0, $16 | 0, i64toi32_i32$4 | 0);
       i64toi32_i32$0 = $6;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 376 | 0) >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 380 | 0) >> 2] | 0;
       $22 = i64toi32_i32$4;
       $22$hi = i64toi32_i32$3;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 368 | 0) >> 2] | 0;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 372 | 0) >> 2] | 0;
       $17 = i64toi32_i32$3;
       $17$hi = i64toi32_i32$4;
      }
      $401 = $6 + 320 | 0;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 0;
      $7 = !($10 & 1 | 0) & ((__letf2($18 | 0, i64toi32_i32$4 | 0, $19 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0 | 0) != (0 | 0) & ($7 | 0) < (32 | 0) | 0) | 0;
      __floatunsitf($401 | 0, $10 + $7 | 0 | 0);
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$3 = $6;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 320 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 324 | 0) >> 2] | 0;
      $421 = i64toi32_i32$5;
      $421$hi = i64toi32_i32$0;
      i64toi32_i32$3 = (i64toi32_i32$3 + 320 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $425 = i64toi32_i32$0;
      $425$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$3 = $421$hi;
      i64toi32_i32$4 = $425$hi;
      __multf3($6 + 304 | 0 | 0, $20 | 0, i64toi32_i32$5 | 0, $16 | 0, i64toi32_i32$0 | 0, $421 | 0, i64toi32_i32$3 | 0, $425 | 0, i64toi32_i32$4 | 0);
      i64toi32_i32$0 = $6;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 304 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 308 | 0) >> 2] | 0;
      $429 = i64toi32_i32$4;
      $429$hi = i64toi32_i32$3;
      i64toi32_i32$0 = (i64toi32_i32$0 + 304 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $433 = i64toi32_i32$3;
      $433$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = $22$hi;
      i64toi32_i32$4 = $429$hi;
      i64toi32_i32$3 = $433$hi;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$5 = $22$hi;
      __addtf3($6 + 272 | 0 | 0, $429 | 0, i64toi32_i32$4 | 0, $433 | 0, i64toi32_i32$3 | 0, $17 | 0, i64toi32_i32$0 | 0, $22 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$1 = $7;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$4 = i64toi32_i32$1 ? 0 : $18;
      i64toi32_i32$3 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$0;
      $440 = i64toi32_i32$4;
      $440$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$5 = i64toi32_i32$0 ? 0 : $19;
      i64toi32_i32$1 = i64toi32_i32$0 ? i64toi32_i32$3 : i64toi32_i32$4;
      $443 = i64toi32_i32$5;
      $443$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $20$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = $440$hi;
      i64toi32_i32$5 = $443$hi;
      i64toi32_i32$0 = $20$hi;
      i64toi32_i32$3 = $16$hi;
      __multf3($6 + 288 | 0 | 0, $440 | 0, i64toi32_i32$1 | 0, $443 | 0, i64toi32_i32$5 | 0, $20 | 0, i64toi32_i32$0 | 0, $16 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$5 = $6;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 288 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 292 | 0) >> 2] | 0;
      $449 = i64toi32_i32$3;
      $449$hi = i64toi32_i32$0;
      i64toi32_i32$5 = (i64toi32_i32$5 + 288 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $453 = i64toi32_i32$0;
      $453$hi = i64toi32_i32$3;
      i64toi32_i32$5 = $6;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 272 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 276 | 0) >> 2] | 0;
      $455 = i64toi32_i32$3;
      $455$hi = i64toi32_i32$0;
      i64toi32_i32$5 = (i64toi32_i32$5 + 272 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $459 = i64toi32_i32$0;
      $459$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $449$hi;
      i64toi32_i32$0 = $453$hi;
      i64toi32_i32$5 = $455$hi;
      i64toi32_i32$1 = $459$hi;
      __addtf3($6 + 256 | 0 | 0, $449 | 0, i64toi32_i32$3 | 0, $453 | 0, i64toi32_i32$0 | 0, $455 | 0, i64toi32_i32$5 | 0, $459 | 0, i64toi32_i32$1 | 0);
      i64toi32_i32$0 = $6;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 256 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 260 | 0) >> 2] | 0;
      $463 = i64toi32_i32$1;
      $463$hi = i64toi32_i32$5;
      i64toi32_i32$0 = (i64toi32_i32$0 + 256 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $467 = i64toi32_i32$5;
      $467$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$1 = $22$hi;
      i64toi32_i32$1 = $463$hi;
      i64toi32_i32$5 = $467$hi;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$3 = $22$hi;
      __subtf3($6 + 240 | 0 | 0, $463 | 0, i64toi32_i32$1 | 0, $467 | 0, i64toi32_i32$5 | 0, $17 | 0, i64toi32_i32$0 | 0, $22 | 0, i64toi32_i32$3 | 0);
      label$40 : {
       i64toi32_i32$5 = $6;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 240 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 244 | 0) >> 2] | 0;
       $18 = i64toi32_i32$3;
       $18$hi = i64toi32_i32$0;
       i64toi32_i32$5 = (i64toi32_i32$5 + 240 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
       $19 = i64toi32_i32$0;
       $19$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $18$hi;
       i64toi32_i32$0 = $19$hi;
       i64toi32_i32$5 = 0;
       i64toi32_i32$1 = 0;
       if (__letf2($18 | 0, i64toi32_i32$3 | 0, $19 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0) | 0) {
        break label$40
       }
       (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      }
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$5 = $19$hi;
      scalbnl($6 + 224 | 0 | 0, $18 | 0, i64toi32_i32$1 | 0, $19 | 0, i64toi32_i32$5 | 0, $21 | 0);
      i64toi32_i32$0 = $6;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 232 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 236 | 0) >> 2] | 0;
      $21 = i64toi32_i32$5;
      $21$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 224 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 228 | 0) >> 2] | 0;
      $18 = i64toi32_i32$1;
      $18$hi = i64toi32_i32$5;
      break label$23;
     }
     (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     __floatsitf($6 + 208 | 0 | 0, $4 | 0);
     i64toi32_i32$0 = $6;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 208 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 212 | 0) >> 2] | 0;
     $497 = i64toi32_i32$5;
     $497$hi = i64toi32_i32$1;
     i64toi32_i32$0 = (i64toi32_i32$0 + 208 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $501 = i64toi32_i32$1;
     $501$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $497$hi;
     i64toi32_i32$1 = $501$hi;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 65536;
     __multf3($6 + 192 | 0 | 0, $497 | 0, i64toi32_i32$5 | 0, $501 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
     i64toi32_i32$1 = $6;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 192 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 196 | 0) >> 2] | 0;
     $505 = i64toi32_i32$3;
     $505$hi = i64toi32_i32$0;
     i64toi32_i32$1 = (i64toi32_i32$1 + 192 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $509 = i64toi32_i32$0;
     $509$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $505$hi;
     i64toi32_i32$0 = $509$hi;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 65536;
     __multf3($6 + 176 | 0 | 0, $505 | 0, i64toi32_i32$3 | 0, $509 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0);
     i64toi32_i32$0 = ($6 + 176 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $21 = i64toi32_i32$5;
     $21$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $6;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 176 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 180 | 0) >> 2] | 0;
     $18 = i64toi32_i32$1;
     $18$hi = i64toi32_i32$5;
     break label$23;
    }
    i64toi32_i32$5 = 0;
    __shlim($1 | 0, 0 | 0, i64toi32_i32$5 | 0);
   }
   __extenddftf2($6 + 96 | 0 | 0, +(+($4 | 0) * 0.0));
   i64toi32_i32$0 = $6 + 104 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $21 = i64toi32_i32$5;
   $21$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $6;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 100 | 0) >> 2] | 0;
   $18 = i64toi32_i32$1;
   $18$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $18$hi;
  i64toi32_i32$1 = $0;
  HEAP32[i64toi32_i32$1 >> 2] = $18;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $21$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $21;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$5;
  label$41 : {
   $15 = $6 + 432 | 0;
   if ($15 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $15;
  }
 }
 
 function decfloat($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $21$hi = 0, $12 = 0, $21 = 0, $22$hi = 0, i64toi32_i32$0 = 0, $11 = 0, $22 = 0, $8 = 0, $15 = 0, $14 = 0, $24$hi = 0, $23$hi = 0, $16 = 0, $24 = 0, $23 = 0, $13 = 0, $17 = 0, $25$hi = 0, $26$hi = 0, $27 = 0.0, $25 = 0, $26 = 0, $9 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0, $20 = 0, $19 = 0, $10 = 0, $133 = 0, $238 = 0, $238$hi = 0, $242 = 0, $242$hi = 0, $244 = 0, $244$hi = 0, $248 = 0, $248$hi = 0, $258 = 0, $258$hi = 0, $267 = 0, $267$hi = 0, $271 = 0, $271$hi = 0, $275 = 0, $275$hi = 0, $279 = 0, $279$hi = 0, $289 = 0, $289$hi = 0, $298 = 0, $298$hi = 0, $302 = 0, $302$hi = 0, $306 = 0, $306$hi = 0, $310 = 0, $310$hi = 0, $359 = 0, $359$hi = 0, $363 = 0, $363$hi = 0, $365 = 0, $365$hi = 0, $369 = 0, $369$hi = 0, $388 = 0, $388$hi = 0, $392 = 0, $392$hi = 0, $394 = 0, $394$hi = 0, $398 = 0, $398$hi = 0, $409 = 0, $409$hi = 0, $413 = 0, $413$hi = 0, $415 = 0, $415$hi = 0, $419 = 0, $419$hi = 0, $447 = 0, $447$hi = 0, $451 = 0, $451$hi = 0, $453 = 0, $453$hi = 0, $457 = 0, $457$hi = 0, $467 = 0, $467$hi = 0, $471 = 0, $471$hi = 0, $473 = 0, $473$hi = 0, $477 = 0, $477$hi = 0, $506 = 0, $584$hi = 0, $586$hi = 0, $594 = 0, $594$hi = 0, $735 = 0, $735$hi = 0, $739 = 0, $739$hi = 0, $741 = 0, $741$hi = 0, $745 = 0, $745$hi = 0, $764 = 0, $764$hi = 0, $768 = 0, $768$hi = 0, $810 = 0, $872 = 0, $872$hi = 0, $876 = 0, $876$hi = 0, $893 = 0, $893$hi = 0, $897 = 0, $897$hi = 0, $913 = 0, $913$hi = 0, $917 = 0, $917$hi = 0, $954 = 0, $954$hi = 0, $958 = 0, $958$hi = 0, $977 = 0, $977$hi = 0, $981 = 0, $981$hi = 0, $1004 = 0, $1004$hi = 0, $1008 = 0, $1008$hi = 0, $1024 = 0, $1024$hi = 0, $1028 = 0, $1028$hi = 0, $1042 = 0, $1042$hi = 0, $1044 = 0, $1044$hi = 0, $1064 = 0, $1064$hi = 0, $1068 = 0, $1068$hi = 0, $1096$hi = 0, $175 = 0, $1103$hi = 0, $176 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   $7 = global$0 - 8960 | 0;
   $19 = $7;
   if ($7 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $19;
  }
  $8 = 0;
  $9 = $4 + $3 | 0;
  $10 = 0 - $9 | 0;
  i64toi32_i32$0 = 0;
  $21 = 0;
  $21$hi = i64toi32_i32$0;
  $11 = 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : while (1) {
      label$7 : {
       if (($2 | 0) == (48 | 0)) {
        break label$7
       }
       if (($2 | 0) != (46 | 0)) {
        break label$3
       }
       $12 = HEAP32[($1 + 4 | 0) >> 2] | 0;
       if ($12 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$5
       }
       HEAP32[($1 + 4 | 0) >> 2] = $12 + 1 | 0;
       $2 = HEAPU8[$12 >> 0] | 0;
       break label$4;
      }
      label$8 : {
       $12 = HEAP32[($1 + 4 | 0) >> 2] | 0;
       if ($12 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$8
       }
       $11 = 1;
       HEAP32[($1 + 4 | 0) >> 2] = $12 + 1 | 0;
       $2 = HEAPU8[$12 >> 0] | 0;
       continue label$6;
      }
      $11 = 1;
      $2 = __shgetc($1 | 0) | 0;
      continue label$6;
     };
    }
    $2 = __shgetc($1 | 0) | 0;
   }
   $8 = 1;
   i64toi32_i32$0 = 0;
   $21 = 0;
   $21$hi = i64toi32_i32$0;
   if (($2 | 0) != (48 | 0)) {
    break label$3
   }
   label$9 : while (1) {
    label$10 : {
     label$11 : {
      $12 = HEAP32[($1 + 4 | 0) >> 2] | 0;
      if ($12 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$11
      }
      HEAP32[($1 + 4 | 0) >> 2] = $12 + 1 | 0;
      $2 = HEAPU8[$12 >> 0] | 0;
      break label$10;
     }
     $2 = __shgetc($1 | 0) | 0;
    }
    i64toi32_i32$0 = $21$hi;
    i64toi32_i32$2 = $21;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $21 = i64toi32_i32$4;
    $21$hi = i64toi32_i32$5;
    if (($2 | 0) == (48 | 0)) {
     continue label$9
    }
    break label$9;
   };
   $11 = 1;
   $8 = 1;
  }
  $13 = 0;
  HEAP32[($7 + 768 | 0) >> 2] = 0;
  $14 = $2 + -48 | 0;
  label$12 : {
   label$13 : {
    label$14 : {
     label$15 : {
      label$16 : {
       label$17 : {
        label$18 : {
         $15 = ($2 | 0) == (46 | 0);
         if ($15) {
          break label$18
         }
         i64toi32_i32$5 = 0;
         $22 = 0;
         $22$hi = i64toi32_i32$5;
         if ($14 >>> 0 <= 9 >>> 0) {
          break label$18
         }
         $12 = 0;
         $16 = 0;
         break label$17;
        }
        i64toi32_i32$5 = 0;
        $22 = 0;
        $22$hi = i64toi32_i32$5;
        $16 = 0;
        $12 = 0;
        $13 = 0;
        label$19 : while (1) {
         label$20 : {
          label$21 : {
           if (!($15 & 1 | 0)) {
            break label$21
           }
           label$22 : {
            if ($8) {
             break label$22
            }
            i64toi32_i32$5 = $22$hi;
            $21 = $22;
            $21$hi = i64toi32_i32$5;
            $8 = 1;
            break label$20;
           }
           $11 = ($11 | 0) != (0 | 0);
           break label$16;
          }
          i64toi32_i32$5 = $22$hi;
          i64toi32_i32$0 = $22;
          i64toi32_i32$2 = 0;
          i64toi32_i32$3 = 1;
          i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
          i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
          if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
          }
          $22 = i64toi32_i32$1;
          $22$hi = i64toi32_i32$4;
          label$23 : {
           if (($12 | 0) > (2044 | 0)) {
            break label$23
           }
           $15 = ($2 | 0) != (48 | 0);
           i64toi32_i32$4 = $22$hi;
           $17 = $22;
           $11 = ($7 + 768 | 0) + ($12 << 2 | 0) | 0;
           label$24 : {
            if (!$16) {
             break label$24
            }
            $14 = ($2 + Math_imul(HEAP32[$11 >> 2] | 0, 10) | 0) + -48 | 0;
           }
           $13 = $15 ? $17 : $13;
           HEAP32[$11 >> 2] = $14;
           $11 = 1;
           $2 = $16 + 1 | 0;
           $133 = $2;
           $2 = ($2 | 0) == (9 | 0);
           $16 = $2 ? 0 : $133;
           $12 = $12 + $2 | 0;
           break label$20;
          }
          if (($2 | 0) == (48 | 0)) {
           break label$20
          }
          HEAP32[($7 + 8944 | 0) >> 2] = HEAP32[($7 + 8944 | 0) >> 2] | 0 | 1 | 0;
         }
         label$25 : {
          label$26 : {
           $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
           if ($2 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
            break label$26
           }
           HEAP32[($1 + 4 | 0) >> 2] = $2 + 1 | 0;
           $2 = HEAPU8[$2 >> 0] | 0;
           break label$25;
          }
          $2 = __shgetc($1 | 0) | 0;
         }
         $14 = $2 + -48 | 0;
         $15 = ($2 | 0) == (46 | 0);
         if ($15) {
          continue label$19
         }
         if ($14 >>> 0 < 10 >>> 0) {
          continue label$19
         }
         break label$19;
        };
       }
       i64toi32_i32$4 = $21$hi;
       i64toi32_i32$4 = $22$hi;
       i64toi32_i32$2 = $8;
       i64toi32_i32$4 = $21$hi;
       i64toi32_i32$0 = $22$hi;
       i64toi32_i32$3 = i64toi32_i32$2 ? $21 : $22;
       i64toi32_i32$5 = i64toi32_i32$2 ? i64toi32_i32$4 : i64toi32_i32$0;
       $21 = i64toi32_i32$3;
       $21$hi = i64toi32_i32$5;
       label$27 : {
        if (!$11) {
         break label$27
        }
        if (($2 | 32 | 0 | 0) != (101 | 0)) {
         break label$27
        }
        label$28 : {
         i64toi32_i32$5 = scanexp($1 | 0, $6 | 0) | 0;
         i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
         $23 = i64toi32_i32$5;
         $23$hi = i64toi32_i32$3;
         i64toi32_i32$2 = i64toi32_i32$5;
         i64toi32_i32$5 = -2147483648;
         i64toi32_i32$4 = 0;
         if ((i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0) {
          break label$28
         }
         if (!$6) {
          break label$14
         }
         i64toi32_i32$2 = 0;
         $23 = 0;
         $23$hi = i64toi32_i32$2;
         if (!(HEAP32[($1 + 104 | 0) >> 2] | 0)) {
          break label$28
         }
         HEAP32[($1 + 4 | 0) >> 2] = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
        }
        i64toi32_i32$2 = $23$hi;
        i64toi32_i32$2 = $21$hi;
        i64toi32_i32$2 = $23$hi;
        i64toi32_i32$4 = $23;
        i64toi32_i32$3 = $21$hi;
        i64toi32_i32$5 = $21;
        i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
        i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
        }
        $21 = i64toi32_i32$0;
        $21$hi = i64toi32_i32$1;
        break label$13;
       }
       $11 = ($11 | 0) != (0 | 0);
       if (($2 | 0) < (0 | 0)) {
        break label$15
       }
      }
      if (!(HEAP32[($1 + 104 | 0) >> 2] | 0)) {
       break label$15
      }
      HEAP32[($1 + 4 | 0) >> 2] = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
     }
     if ($11) {
      break label$13
     }
     (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 28), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    }
    i64toi32_i32$1 = 0;
    $22 = 0;
    $22$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    __shlim($1 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$1 = 0;
    $21 = 0;
    $21$hi = i64toi32_i32$1;
    break label$12;
   }
   label$29 : {
    $1 = HEAP32[($7 + 768 | 0) >> 2] | 0;
    if ($1) {
     break label$29
    }
    __extenddftf2($7 | 0, +(+($5 | 0) * 0.0));
    i64toi32_i32$2 = $7 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $21 = i64toi32_i32$1;
    $21$hi = i64toi32_i32$4;
    i64toi32_i32$2 = $7;
    i64toi32_i32$4 = HEAP32[$7 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7 + 4 | 0) >> 2] | 0;
    $22 = i64toi32_i32$4;
    $22$hi = i64toi32_i32$1;
    break label$12;
   }
   label$30 : {
    i64toi32_i32$1 = $22$hi;
    i64toi32_i32$2 = $22;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 9;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$4 | 0)) {
     $165 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$5 >>> 0) {
       $166 = 0
      } else {
       $166 = 1
      }
      $167 = $166;
     } else {
      $167 = 0
     }
     $165 = $167;
    }
    if ($165) {
     break label$30
    }
    i64toi32_i32$2 = $21$hi;
    i64toi32_i32$2 = $22$hi;
    i64toi32_i32$2 = $21$hi;
    i64toi32_i32$5 = $21;
    i64toi32_i32$1 = $22$hi;
    i64toi32_i32$4 = $22;
    if ((i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0) {
     break label$30
    }
    label$31 : {
     if (($3 | 0) > (30 | 0)) {
      break label$31
     }
     if ($1 >>> $3 | 0) {
      break label$30
     }
    }
    __floatsitf($7 + 48 | 0 | 0, $5 | 0);
    __floatunsitf($7 + 32 | 0 | 0, $1 | 0);
    i64toi32_i32$4 = $7;
    i64toi32_i32$5 = HEAP32[($7 + 48 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7 + 52 | 0) >> 2] | 0;
    $238 = i64toi32_i32$5;
    $238$hi = i64toi32_i32$2;
    i64toi32_i32$4 = ($7 + 48 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $242 = i64toi32_i32$2;
    $242$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $7;
    i64toi32_i32$5 = HEAP32[($7 + 32 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7 + 36 | 0) >> 2] | 0;
    $244 = i64toi32_i32$5;
    $244$hi = i64toi32_i32$2;
    i64toi32_i32$4 = ($7 + 32 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $248 = i64toi32_i32$2;
    $248$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $238$hi;
    i64toi32_i32$2 = $242$hi;
    i64toi32_i32$4 = $244$hi;
    i64toi32_i32$1 = $248$hi;
    __multf3($7 + 16 | 0 | 0, $238 | 0, i64toi32_i32$5 | 0, $242 | 0, i64toi32_i32$2 | 0, $244 | 0, i64toi32_i32$4 | 0, $248 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = ($7 + 16 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $21 = i64toi32_i32$1;
    $21$hi = i64toi32_i32$4;
    i64toi32_i32$2 = $7;
    i64toi32_i32$4 = HEAP32[($7 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7 + 20 | 0) >> 2] | 0;
    $22 = i64toi32_i32$4;
    $22$hi = i64toi32_i32$1;
    break label$12;
   }
   label$32 : {
    i64toi32_i32$1 = $21$hi;
    i64toi32_i32$4 = ($4 | 0) / (-2 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
    $258 = i64toi32_i32$4;
    $258$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $21$hi;
    i64toi32_i32$2 = $21;
    i64toi32_i32$4 = $258$hi;
    i64toi32_i32$5 = $258;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$4 | 0)) {
     $168 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0) {
       $169 = 0
      } else {
       $169 = 1
      }
      $170 = $169;
     } else {
      $170 = 0
     }
     $168 = $170;
    }
    if ($168) {
     break label$32
    }
    (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    __floatsitf($7 + 96 | 0 | 0, $5 | 0);
    i64toi32_i32$5 = $7;
    i64toi32_i32$2 = HEAP32[($7 + 96 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7 + 100 | 0) >> 2] | 0;
    $267 = i64toi32_i32$2;
    $267$hi = i64toi32_i32$1;
    i64toi32_i32$5 = ($7 + 96 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $271 = i64toi32_i32$1;
    $271$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $267$hi;
    i64toi32_i32$1 = $271$hi;
    i64toi32_i32$5 = -1;
    i64toi32_i32$4 = 2147418111;
    __multf3($7 + 80 | 0 | 0, $267 | 0, i64toi32_i32$2 | 0, $271 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$5 | 0, -1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$1 = $7;
    i64toi32_i32$4 = HEAP32[($7 + 80 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7 + 84 | 0) >> 2] | 0;
    $275 = i64toi32_i32$4;
    $275$hi = i64toi32_i32$5;
    i64toi32_i32$1 = ($7 + 80 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $279 = i64toi32_i32$5;
    $279$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $275$hi;
    i64toi32_i32$5 = $279$hi;
    i64toi32_i32$1 = -1;
    i64toi32_i32$2 = 2147418111;
    __multf3($7 + 64 | 0 | 0, $275 | 0, i64toi32_i32$4 | 0, $279 | 0, i64toi32_i32$5 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$5 = ($7 + 64 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $21 = i64toi32_i32$2;
    $21$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7;
    i64toi32_i32$1 = HEAP32[($7 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7 + 68 | 0) >> 2] | 0;
    $22 = i64toi32_i32$1;
    $22$hi = i64toi32_i32$2;
    break label$12;
   }
   label$33 : {
    i64toi32_i32$2 = $21$hi;
    i64toi32_i32$1 = $4 + -226 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
    $289 = i64toi32_i32$1;
    $289$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $21$hi;
    i64toi32_i32$5 = $21;
    i64toi32_i32$1 = $289$hi;
    i64toi32_i32$4 = $289;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$1 | 0)) {
     $171 = 1
    } else {
     if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
       $172 = 0
      } else {
       $172 = 1
      }
      $173 = $172;
     } else {
      $173 = 0
     }
     $171 = $173;
    }
    if ($171) {
     break label$33
    }
    (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    __floatsitf($7 + 144 | 0 | 0, $5 | 0);
    i64toi32_i32$4 = $7;
    i64toi32_i32$5 = HEAP32[($7 + 144 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7 + 148 | 0) >> 2] | 0;
    $298 = i64toi32_i32$5;
    $298$hi = i64toi32_i32$2;
    i64toi32_i32$4 = ($7 + 144 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $302 = i64toi32_i32$2;
    $302$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $298$hi;
    i64toi32_i32$2 = $302$hi;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 65536;
    __multf3($7 + 128 | 0 | 0, $298 | 0, i64toi32_i32$5 | 0, $302 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = $7;
    i64toi32_i32$1 = HEAP32[($7 + 128 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7 + 132 | 0) >> 2] | 0;
    $306 = i64toi32_i32$1;
    $306$hi = i64toi32_i32$4;
    i64toi32_i32$2 = ($7 + 128 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $310 = i64toi32_i32$4;
    $310$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $306$hi;
    i64toi32_i32$4 = $310$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 65536;
    __multf3($7 + 112 | 0 | 0, $306 | 0, i64toi32_i32$1 | 0, $310 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$4 = ($7 + 112 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $21 = i64toi32_i32$5;
    $21$hi = i64toi32_i32$2;
    i64toi32_i32$4 = $7;
    i64toi32_i32$2 = HEAP32[($7 + 112 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7 + 116 | 0) >> 2] | 0;
    $22 = i64toi32_i32$2;
    $22$hi = i64toi32_i32$5;
    break label$12;
   }
   label$34 : {
    if (!$16) {
     break label$34
    }
    label$35 : {
     if (($16 | 0) > (8 | 0)) {
      break label$35
     }
     $2 = ($7 + 768 | 0) + ($12 << 2 | 0) | 0;
     $1 = HEAP32[$2 >> 2] | 0;
     label$36 : while (1) {
      $1 = Math_imul($1, 10);
      $16 = $16 + 1 | 0;
      if (($16 | 0) != (9 | 0)) {
       continue label$36
      }
      break label$36;
     };
     HEAP32[$2 >> 2] = $1;
    }
    $12 = $12 + 1 | 0;
   }
   i64toi32_i32$5 = $21$hi;
   $8 = $21;
   label$37 : {
    if (($13 | 0) > (8 | 0)) {
     break label$37
    }
    if (($13 | 0) > ($8 | 0)) {
     break label$37
    }
    if (($8 | 0) > (17 | 0)) {
     break label$37
    }
    label$38 : {
     if (($8 | 0) != (9 | 0)) {
      break label$38
     }
     __floatsitf($7 + 192 | 0 | 0, $5 | 0);
     __floatunsitf($7 + 176 | 0 | 0, HEAP32[($7 + 768 | 0) >> 2] | 0 | 0);
     i64toi32_i32$4 = $7;
     i64toi32_i32$5 = HEAP32[($7 + 192 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($7 + 196 | 0) >> 2] | 0;
     $359 = i64toi32_i32$5;
     $359$hi = i64toi32_i32$2;
     i64toi32_i32$4 = ($7 + 192 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $363 = i64toi32_i32$2;
     $363$hi = i64toi32_i32$5;
     i64toi32_i32$4 = $7;
     i64toi32_i32$5 = HEAP32[($7 + 176 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($7 + 180 | 0) >> 2] | 0;
     $365 = i64toi32_i32$5;
     $365$hi = i64toi32_i32$2;
     i64toi32_i32$4 = ($7 + 176 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $369 = i64toi32_i32$2;
     $369$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $359$hi;
     i64toi32_i32$2 = $363$hi;
     i64toi32_i32$4 = $365$hi;
     i64toi32_i32$1 = $369$hi;
     __multf3($7 + 160 | 0 | 0, $359 | 0, i64toi32_i32$5 | 0, $363 | 0, i64toi32_i32$2 | 0, $365 | 0, i64toi32_i32$4 | 0, $369 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$2 = ($7 + 160 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $21 = i64toi32_i32$1;
     $21$hi = i64toi32_i32$4;
     i64toi32_i32$2 = $7;
     i64toi32_i32$4 = HEAP32[($7 + 160 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($7 + 164 | 0) >> 2] | 0;
     $22 = i64toi32_i32$4;
     $22$hi = i64toi32_i32$1;
     break label$12;
    }
    label$39 : {
     if (($8 | 0) > (8 | 0)) {
      break label$39
     }
     __floatsitf($7 + 272 | 0 | 0, $5 | 0);
     __floatunsitf($7 + 256 | 0 | 0, HEAP32[($7 + 768 | 0) >> 2] | 0 | 0);
     i64toi32_i32$2 = $7;
     i64toi32_i32$1 = HEAP32[($7 + 272 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7 + 276 | 0) >> 2] | 0;
     $388 = i64toi32_i32$1;
     $388$hi = i64toi32_i32$4;
     i64toi32_i32$2 = ($7 + 272 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $392 = i64toi32_i32$4;
     $392$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $7;
     i64toi32_i32$1 = HEAP32[($7 + 256 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7 + 260 | 0) >> 2] | 0;
     $394 = i64toi32_i32$1;
     $394$hi = i64toi32_i32$4;
     i64toi32_i32$2 = ($7 + 256 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $398 = i64toi32_i32$4;
     $398$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $388$hi;
     i64toi32_i32$4 = $392$hi;
     i64toi32_i32$2 = $394$hi;
     i64toi32_i32$5 = $398$hi;
     __multf3($7 + 240 | 0 | 0, $388 | 0, i64toi32_i32$1 | 0, $392 | 0, i64toi32_i32$4 | 0, $394 | 0, i64toi32_i32$2 | 0, $398 | 0, i64toi32_i32$5 | 0);
     __floatsitf($7 + 224 | 0 | 0, HEAP32[(((8 - $8 | 0) << 2 | 0) + 10512 | 0) >> 2] | 0 | 0);
     i64toi32_i32$4 = $7;
     i64toi32_i32$5 = HEAP32[($7 + 240 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($7 + 244 | 0) >> 2] | 0;
     $409 = i64toi32_i32$5;
     $409$hi = i64toi32_i32$2;
     i64toi32_i32$4 = ($7 + 240 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $413 = i64toi32_i32$2;
     $413$hi = i64toi32_i32$5;
     i64toi32_i32$4 = $7;
     i64toi32_i32$5 = HEAP32[($7 + 224 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($7 + 228 | 0) >> 2] | 0;
     $415 = i64toi32_i32$5;
     $415$hi = i64toi32_i32$2;
     i64toi32_i32$4 = ($7 + 224 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $419 = i64toi32_i32$2;
     $419$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $409$hi;
     i64toi32_i32$2 = $413$hi;
     i64toi32_i32$4 = $415$hi;
     i64toi32_i32$1 = $419$hi;
     __divtf3($7 + 208 | 0 | 0, $409 | 0, i64toi32_i32$5 | 0, $413 | 0, i64toi32_i32$2 | 0, $415 | 0, i64toi32_i32$4 | 0, $419 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$2 = ($7 + 208 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $21 = i64toi32_i32$1;
     $21$hi = i64toi32_i32$4;
     i64toi32_i32$2 = $7;
     i64toi32_i32$4 = HEAP32[($7 + 208 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($7 + 212 | 0) >> 2] | 0;
     $22 = i64toi32_i32$4;
     $22$hi = i64toi32_i32$1;
     break label$12;
    }
    $1 = HEAP32[($7 + 768 | 0) >> 2] | 0;
    label$40 : {
     $2 = ($3 + Math_imul($8, -3) | 0) + 27 | 0;
     if (($2 | 0) > (30 | 0)) {
      break label$40
     }
     if ($1 >>> $2 | 0) {
      break label$37
     }
    }
    __floatsitf($7 + 352 | 0 | 0, $5 | 0);
    __floatunsitf($7 + 336 | 0 | 0, $1 | 0);
    i64toi32_i32$2 = $7;
    i64toi32_i32$1 = HEAP32[($7 + 352 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7 + 356 | 0) >> 2] | 0;
    $447 = i64toi32_i32$1;
    $447$hi = i64toi32_i32$4;
    i64toi32_i32$2 = ($7 + 352 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $451 = i64toi32_i32$4;
    $451$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $7;
    i64toi32_i32$1 = HEAP32[($7 + 336 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7 + 340 | 0) >> 2] | 0;
    $453 = i64toi32_i32$1;
    $453$hi = i64toi32_i32$4;
    i64toi32_i32$2 = ($7 + 336 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $457 = i64toi32_i32$4;
    $457$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $447$hi;
    i64toi32_i32$4 = $451$hi;
    i64toi32_i32$2 = $453$hi;
    i64toi32_i32$5 = $457$hi;
    __multf3($7 + 320 | 0 | 0, $447 | 0, i64toi32_i32$1 | 0, $451 | 0, i64toi32_i32$4 | 0, $453 | 0, i64toi32_i32$2 | 0, $457 | 0, i64toi32_i32$5 | 0);
    __floatsitf($7 + 304 | 0 | 0, HEAP32[(($8 << 2 | 0) + 10472 | 0) >> 2] | 0 | 0);
    i64toi32_i32$4 = $7;
    i64toi32_i32$5 = HEAP32[($7 + 320 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7 + 324 | 0) >> 2] | 0;
    $467 = i64toi32_i32$5;
    $467$hi = i64toi32_i32$2;
    i64toi32_i32$4 = ($7 + 320 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $471 = i64toi32_i32$2;
    $471$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $7;
    i64toi32_i32$5 = HEAP32[($7 + 304 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7 + 308 | 0) >> 2] | 0;
    $473 = i64toi32_i32$5;
    $473$hi = i64toi32_i32$2;
    i64toi32_i32$4 = ($7 + 304 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $477 = i64toi32_i32$2;
    $477$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $467$hi;
    i64toi32_i32$2 = $471$hi;
    i64toi32_i32$4 = $473$hi;
    i64toi32_i32$1 = $477$hi;
    __multf3($7 + 288 | 0 | 0, $467 | 0, i64toi32_i32$5 | 0, $471 | 0, i64toi32_i32$2 | 0, $473 | 0, i64toi32_i32$4 | 0, $477 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = ($7 + 288 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $21 = i64toi32_i32$1;
    $21$hi = i64toi32_i32$4;
    i64toi32_i32$2 = $7;
    i64toi32_i32$4 = HEAP32[($7 + 288 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7 + 292 | 0) >> 2] | 0;
    $22 = i64toi32_i32$4;
    $22$hi = i64toi32_i32$1;
    break label$12;
   }
   $16 = 0;
   label$41 : {
    label$42 : {
     $1 = ($8 | 0) % (9 | 0) | 0;
     if ($1) {
      break label$42
     }
     $2 = 0;
     break label$41;
    }
    $6 = ($8 | 0) > (-1 | 0) ? $1 : $1 + 9 | 0;
    label$43 : {
     label$44 : {
      if ($12) {
       break label$44
      }
      $2 = 0;
      $12 = 0;
      break label$43;
     }
     $15 = HEAP32[(((8 - $6 | 0) << 2 | 0) + 10512 | 0) >> 2] | 0;
     $17 = (1e9 | 0) / ($15 | 0) | 0;
     $11 = 0;
     $1 = 0;
     $2 = 0;
     label$45 : while (1) {
      $14 = ($7 + 768 | 0) + ($1 << 2 | 0) | 0;
      $506 = $14;
      $14 = HEAP32[$14 >> 2] | 0;
      $13 = ($14 >>> 0) / ($15 >>> 0) | 0;
      $11 = $13 + $11 | 0;
      HEAP32[$506 >> 2] = $11;
      $11 = ($1 | 0) == ($2 | 0) & !$11 | 0;
      $2 = $11 ? ($2 + 1 | 0) & 2047 | 0 : $2;
      $8 = $11 ? $8 + -9 | 0 : $8;
      $11 = Math_imul($17, $14 - Math_imul($13, $15) | 0);
      $1 = $1 + 1 | 0;
      if (($1 | 0) != ($12 | 0)) {
       continue label$45
      }
      break label$45;
     };
     if (!$11) {
      break label$43
     }
     HEAP32[(($7 + 768 | 0) + ($12 << 2 | 0) | 0) >> 2] = $11;
     $12 = $12 + 1 | 0;
    }
    $8 = ($8 - $6 | 0) + 9 | 0;
   }
   label$46 : while (1) {
    $13 = ($7 + 768 | 0) + ($2 << 2 | 0) | 0;
    label$47 : {
     label$48 : while (1) {
      label$49 : {
       if (($8 | 0) < (36 | 0)) {
        break label$49
       }
       if (($8 | 0) != (36 | 0)) {
        break label$47
       }
       if ((HEAP32[$13 >> 2] | 0) >>> 0 >= 10384593 >>> 0) {
        break label$47
       }
      }
      $14 = $12 + 2047 | 0;
      $11 = 0;
      $15 = $12;
      label$50 : while (1) {
       $12 = $15;
       label$51 : {
        label$52 : {
         $1 = $14 & 2047 | 0;
         $15 = ($7 + 768 | 0) + ($1 << 2 | 0) | 0;
         i64toi32_i32$2 = $15;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$4 = 0;
         i64toi32_i32$2 = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         i64toi32_i32$5 = 29;
         i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
          $174 = 0;
         } else {
          i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
          $174 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         }
         $584$hi = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         $586$hi = i64toi32_i32$1;
         i64toi32_i32$1 = $584$hi;
         i64toi32_i32$4 = $174;
         i64toi32_i32$2 = $586$hi;
         i64toi32_i32$5 = $11;
         i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
         i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
         if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
         }
         $21 = i64toi32_i32$3;
         $21$hi = i64toi32_i32$0;
         i64toi32_i32$1 = i64toi32_i32$3;
         i64toi32_i32$4 = 0;
         i64toi32_i32$5 = 1000000001;
         if (i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$5 >>> 0 | 0) | 0) {
          break label$52
         }
         $11 = 0;
         break label$51;
        }
        i64toi32_i32$1 = $21$hi;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = __wasm_i64_udiv($21 | 0, i64toi32_i32$1 | 0, 1e9 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $22 = i64toi32_i32$0;
        $22$hi = i64toi32_i32$1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = __wasm_i64_mul($22 | 0, i64toi32_i32$1 | 0, 1e9 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $594 = i64toi32_i32$0;
        $594$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $21$hi;
        i64toi32_i32$5 = $21;
        i64toi32_i32$0 = $594$hi;
        i64toi32_i32$4 = $594;
        i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        i64toi32_i32$3 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) + i64toi32_i32$0 | 0;
        i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        $21 = i64toi32_i32$2;
        $21$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $22$hi;
        $11 = $22;
       }
       i64toi32_i32$3 = $21$hi;
       $14 = $21;
       HEAP32[$15 >> 2] = $21;
       $15 = ($1 | 0) != (($12 + -1 | 0) & 2047 | 0 | 0) ? $12 : ($1 | 0) == ($2 | 0) ? $12 : $21 ? $12 : $1;
       $14 = $1 + -1 | 0;
       if (($1 | 0) != ($2 | 0)) {
        continue label$50
       }
       break label$50;
      };
      $16 = $16 + -29 | 0;
      if (!$11) {
       continue label$48
      }
      break label$48;
     };
     label$53 : {
      $2 = ($2 + -1 | 0) & 2047 | 0;
      if (($2 | 0) != ($15 | 0)) {
       break label$53
      }
      $1 = ($7 + 768 | 0) + ((($15 + 2046 | 0) & 2047 | 0) << 2 | 0) | 0;
      $12 = ($15 + -1 | 0) & 2047 | 0;
      HEAP32[$1 >> 2] = HEAP32[$1 >> 2] | 0 | (HEAP32[(($7 + 768 | 0) + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
     }
     $8 = $8 + 9 | 0;
     HEAP32[(($7 + 768 | 0) + ($2 << 2 | 0) | 0) >> 2] = $11;
     continue label$46;
    }
    break label$46;
   };
   label$54 : {
    label$55 : while (1) {
     $6 = ($12 + 1 | 0) & 2047 | 0;
     $18 = ($7 + 768 | 0) + ((($12 + -1 | 0) & 2047 | 0) << 2 | 0) | 0;
     label$56 : while (1) {
      $14 = ($8 | 0) > (45 | 0) ? 9 : 1;
      label$57 : {
       label$58 : while (1) {
        $15 = $2;
        $1 = 0;
        label$59 : {
         label$60 : {
          label$61 : while (1) {
           $2 = ($1 + $15 | 0) & 2047 | 0;
           if (($2 | 0) == ($12 | 0)) {
            break label$60
           }
           $2 = HEAP32[(($7 + 768 | 0) + ($2 << 2 | 0) | 0) >> 2] | 0;
           $11 = HEAP32[(($1 << 2 | 0) + 10496 | 0) >> 2] | 0;
           if ($2 >>> 0 < $11 >>> 0) {
            break label$60
           }
           if ($2 >>> 0 > $11 >>> 0) {
            break label$59
           }
           $1 = $1 + 1 | 0;
           if (($1 | 0) != (4 | 0)) {
            continue label$61
           }
           break label$61;
          };
         }
         if (($8 | 0) != (36 | 0)) {
          break label$59
         }
         i64toi32_i32$3 = 0;
         $21 = 0;
         $21$hi = i64toi32_i32$3;
         $1 = 0;
         i64toi32_i32$3 = 0;
         $22 = 0;
         $22$hi = i64toi32_i32$3;
         label$62 : while (1) {
          label$63 : {
           $2 = ($1 + $15 | 0) & 2047 | 0;
           if (($2 | 0) != ($12 | 0)) {
            break label$63
           }
           $12 = ($12 + 1 | 0) & 2047 | 0;
           HEAP32[((($12 << 2 | 0) + ($7 + 768 | 0) | 0) + -4 | 0) >> 2] = 0;
          }
          i64toi32_i32$3 = $21$hi;
          i64toi32_i32$3 = $22$hi;
          i64toi32_i32$3 = $21$hi;
          i64toi32_i32$5 = $22$hi;
          i64toi32_i32$1 = 0;
          i64toi32_i32$4 = 1075633366;
          __multf3($7 + 752 | 0 | 0, $21 | 0, i64toi32_i32$3 | 0, $22 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0, 1342177280 | 0, i64toi32_i32$4 | 0);
          __floatunsitf($7 + 736 | 0 | 0, HEAP32[(($7 + 768 | 0) + ($2 << 2 | 0) | 0) >> 2] | 0 | 0);
          i64toi32_i32$5 = $7;
          i64toi32_i32$4 = HEAP32[($7 + 752 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($7 + 756 | 0) >> 2] | 0;
          $735 = i64toi32_i32$4;
          $735$hi = i64toi32_i32$1;
          i64toi32_i32$5 = ($7 + 752 | 0) + 8 | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
          i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
          $739 = i64toi32_i32$1;
          $739$hi = i64toi32_i32$4;
          i64toi32_i32$5 = $7;
          i64toi32_i32$4 = HEAP32[($7 + 736 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($7 + 740 | 0) >> 2] | 0;
          $741 = i64toi32_i32$4;
          $741$hi = i64toi32_i32$1;
          i64toi32_i32$5 = ($7 + 736 | 0) + 8 | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
          i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
          $745 = i64toi32_i32$1;
          $745$hi = i64toi32_i32$4;
          i64toi32_i32$4 = $735$hi;
          i64toi32_i32$1 = $739$hi;
          i64toi32_i32$5 = $741$hi;
          i64toi32_i32$3 = $745$hi;
          __addtf3($7 + 720 | 0 | 0, $735 | 0, i64toi32_i32$4 | 0, $739 | 0, i64toi32_i32$1 | 0, $741 | 0, i64toi32_i32$5 | 0, $745 | 0, i64toi32_i32$3 | 0);
          i64toi32_i32$1 = ($7 + 720 | 0) + 8 | 0;
          i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $22 = i64toi32_i32$3;
          $22$hi = i64toi32_i32$5;
          i64toi32_i32$1 = $7;
          i64toi32_i32$5 = HEAP32[($7 + 720 | 0) >> 2] | 0;
          i64toi32_i32$3 = HEAP32[($7 + 724 | 0) >> 2] | 0;
          $21 = i64toi32_i32$5;
          $21$hi = i64toi32_i32$3;
          $1 = $1 + 1 | 0;
          if (($1 | 0) != (4 | 0)) {
           continue label$62
          }
          break label$62;
         };
         __floatsitf($7 + 704 | 0 | 0, $5 | 0);
         i64toi32_i32$3 = $21$hi;
         i64toi32_i32$3 = $22$hi;
         i64toi32_i32$1 = $7;
         i64toi32_i32$3 = HEAP32[($7 + 704 | 0) >> 2] | 0;
         i64toi32_i32$5 = HEAP32[($7 + 708 | 0) >> 2] | 0;
         $764 = i64toi32_i32$3;
         $764$hi = i64toi32_i32$5;
         i64toi32_i32$1 = ($7 + 704 | 0) + 8 | 0;
         i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
         $768 = i64toi32_i32$5;
         $768$hi = i64toi32_i32$3;
         i64toi32_i32$3 = $21$hi;
         i64toi32_i32$5 = $22$hi;
         i64toi32_i32$1 = $764$hi;
         i64toi32_i32$4 = $768$hi;
         __multf3($7 + 688 | 0 | 0, $21 | 0, i64toi32_i32$3 | 0, $22 | 0, i64toi32_i32$5 | 0, $764 | 0, i64toi32_i32$1 | 0, $768 | 0, i64toi32_i32$4 | 0);
         i64toi32_i32$5 = ($7 + 688 | 0) + 8 | 0;
         i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
         $22 = i64toi32_i32$4;
         $22$hi = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         $21 = 0;
         $21$hi = i64toi32_i32$1;
         i64toi32_i32$5 = $7;
         i64toi32_i32$1 = HEAP32[($7 + 688 | 0) >> 2] | 0;
         i64toi32_i32$4 = HEAP32[($7 + 692 | 0) >> 2] | 0;
         $23 = i64toi32_i32$1;
         $23$hi = i64toi32_i32$4;
         $11 = $16 + 113 | 0;
         $1 = $11 - $4 | 0;
         $14 = ($1 | 0) < ($3 | 0);
         $2 = $14 ? (($1 | 0) > (0 | 0) ? $1 : 0) : $3;
         if (($2 | 0) <= (112 | 0)) {
          break label$57
         }
         i64toi32_i32$4 = 0;
         $24 = 0;
         $24$hi = i64toi32_i32$4;
         i64toi32_i32$4 = 0;
         $25 = 0;
         $25$hi = i64toi32_i32$4;
         i64toi32_i32$4 = 0;
         $26 = 0;
         $26$hi = i64toi32_i32$4;
         break label$54;
        }
        $16 = $14 + $16 | 0;
        $2 = $12;
        if (($15 | 0) == ($2 | 0)) {
         continue label$58
        }
        break label$58;
       };
       $13 = 1e9 >>> $14 | 0;
       $17 = (-1 << $14 | 0) ^ -1 | 0;
       $1 = 0;
       $2 = $15;
       label$64 : while (1) {
        $11 = ($7 + 768 | 0) + ($15 << 2 | 0) | 0;
        $810 = $11;
        $11 = HEAP32[$11 >> 2] | 0;
        $1 = ($11 >>> $14 | 0) + $1 | 0;
        HEAP32[$810 >> 2] = $1;
        $1 = ($15 | 0) == ($2 | 0) & !$1 | 0;
        $2 = $1 ? ($2 + 1 | 0) & 2047 | 0 : $2;
        $8 = $1 ? $8 + -9 | 0 : $8;
        $1 = Math_imul($11 & $17 | 0, $13);
        $15 = ($15 + 1 | 0) & 2047 | 0;
        if (($15 | 0) != ($12 | 0)) {
         continue label$64
        }
        break label$64;
       };
       if (!$1) {
        continue label$56
       }
       label$65 : {
        if (($6 | 0) == ($2 | 0)) {
         break label$65
        }
        HEAP32[(($7 + 768 | 0) + ($12 << 2 | 0) | 0) >> 2] = $1;
        $12 = $6;
        continue label$55;
       }
       HEAP32[$18 >> 2] = HEAP32[$18 >> 2] | 0 | 1 | 0;
       $2 = $6;
       continue label$56;
      }
      break label$56;
     };
     break label$55;
    };
    __extenddftf2($7 + 640 | 0 | 0, +(+scalbn(+(1.0), 225 - $2 | 0 | 0)));
    i64toi32_i32$5 = $7;
    i64toi32_i32$4 = HEAP32[($7 + 640 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7 + 644 | 0) >> 2] | 0;
    $872 = i64toi32_i32$4;
    $872$hi = i64toi32_i32$1;
    i64toi32_i32$5 = ($7 + 640 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $876 = i64toi32_i32$1;
    $876$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $23$hi;
    i64toi32_i32$4 = $22$hi;
    i64toi32_i32$4 = $872$hi;
    i64toi32_i32$1 = $876$hi;
    i64toi32_i32$5 = $23$hi;
    i64toi32_i32$3 = $22$hi;
    copysignl($7 + 672 | 0 | 0, $872 | 0, i64toi32_i32$4 | 0, $876 | 0, i64toi32_i32$1 | 0, $23 | 0, i64toi32_i32$5 | 0, $22 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $7;
    i64toi32_i32$3 = HEAP32[($7 + 680 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7 + 684 | 0) >> 2] | 0;
    $26 = i64toi32_i32$3;
    $26$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $7;
    i64toi32_i32$5 = HEAP32[($7 + 672 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[($7 + 676 | 0) >> 2] | 0;
    $25 = i64toi32_i32$5;
    $25$hi = i64toi32_i32$3;
    __extenddftf2($7 + 624 | 0 | 0, +(+scalbn(+(1.0), 113 - $2 | 0 | 0)));
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$3 = $22$hi;
    i64toi32_i32$1 = $7;
    i64toi32_i32$3 = HEAP32[($7 + 624 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7 + 628 | 0) >> 2] | 0;
    $893 = i64toi32_i32$3;
    $893$hi = i64toi32_i32$5;
    i64toi32_i32$1 = ($7 + 624 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $897 = i64toi32_i32$5;
    $897$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$5 = $22$hi;
    i64toi32_i32$1 = $893$hi;
    i64toi32_i32$4 = $897$hi;
    fmodl($7 + 656 | 0 | 0, $23 | 0, i64toi32_i32$3 | 0, $22 | 0, i64toi32_i32$5 | 0, $893 | 0, i64toi32_i32$1 | 0, $897 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$4 = i64toi32_i32$5;
    i64toi32_i32$5 = $7;
    i64toi32_i32$4 = HEAP32[($7 + 656 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7 + 660 | 0) >> 2] | 0;
    $21 = i64toi32_i32$4;
    $21$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7;
    i64toi32_i32$1 = HEAP32[($7 + 664 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7 + 668 | 0) >> 2] | 0;
    $24 = i64toi32_i32$1;
    $24$hi = i64toi32_i32$4;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$1 = $22$hi;
    i64toi32_i32$5 = $21$hi;
    i64toi32_i32$3 = $24$hi;
    __subtf3($7 + 608 | 0 | 0, $23 | 0, i64toi32_i32$4 | 0, $22 | 0, i64toi32_i32$1 | 0, $21 | 0, i64toi32_i32$5 | 0, $24 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$3 = $25$hi;
    i64toi32_i32$3 = $26$hi;
    i64toi32_i32$1 = $7;
    i64toi32_i32$3 = HEAP32[($7 + 608 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7 + 612 | 0) >> 2] | 0;
    $913 = i64toi32_i32$3;
    $913$hi = i64toi32_i32$5;
    i64toi32_i32$1 = ($7 + 608 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $917 = i64toi32_i32$5;
    $917$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $25$hi;
    i64toi32_i32$5 = $26$hi;
    i64toi32_i32$1 = $913$hi;
    i64toi32_i32$4 = $917$hi;
    __addtf3($7 + 592 | 0 | 0, $25 | 0, i64toi32_i32$3 | 0, $26 | 0, i64toi32_i32$5 | 0, $913 | 0, i64toi32_i32$1 | 0, $917 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$5 = ($7 + 592 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $22 = i64toi32_i32$4;
    $22$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7;
    i64toi32_i32$1 = HEAP32[($7 + 592 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7 + 596 | 0) >> 2] | 0;
    $23 = i64toi32_i32$1;
    $23$hi = i64toi32_i32$4;
   }
   label$66 : {
    $8 = ($15 + 4 | 0) & 2047 | 0;
    if (($8 | 0) == ($12 | 0)) {
     break label$66
    }
    label$67 : {
     label$68 : {
      $8 = HEAP32[(($7 + 768 | 0) + ($8 << 2 | 0) | 0) >> 2] | 0;
      if ($8 >>> 0 > 499999999 >>> 0) {
       break label$68
      }
      label$69 : {
       if ($8) {
        break label$69
       }
       if ((($15 + 5 | 0) & 2047 | 0 | 0) == ($12 | 0)) {
        break label$67
       }
      }
      __extenddftf2($7 + 480 | 0 | 0, +(+($5 | 0) * .25));
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$4 = $24$hi;
      i64toi32_i32$5 = $7;
      i64toi32_i32$4 = HEAP32[($7 + 480 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($7 + 484 | 0) >> 2] | 0;
      $954 = i64toi32_i32$4;
      $954$hi = i64toi32_i32$1;
      i64toi32_i32$5 = ($7 + 480 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $958 = i64toi32_i32$1;
      $958$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$1 = $24$hi;
      i64toi32_i32$5 = $954$hi;
      i64toi32_i32$3 = $958$hi;
      __addtf3($7 + 464 | 0 | 0, $21 | 0, i64toi32_i32$4 | 0, $24 | 0, i64toi32_i32$1 | 0, $954 | 0, i64toi32_i32$5 | 0, $958 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$1 = ($7 + 464 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $24 = i64toi32_i32$3;
      $24$hi = i64toi32_i32$5;
      i64toi32_i32$1 = $7;
      i64toi32_i32$5 = HEAP32[($7 + 464 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[($7 + 468 | 0) >> 2] | 0;
      $21 = i64toi32_i32$5;
      $21$hi = i64toi32_i32$3;
      break label$67;
     }
     label$70 : {
      if (($8 | 0) == (5e8 | 0)) {
       break label$70
      }
      __extenddftf2($7 + 576 | 0 | 0, +(+($5 | 0) * .75));
      i64toi32_i32$3 = $21$hi;
      i64toi32_i32$3 = $24$hi;
      i64toi32_i32$1 = $7;
      i64toi32_i32$3 = HEAP32[($7 + 576 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[($7 + 580 | 0) >> 2] | 0;
      $977 = i64toi32_i32$3;
      $977$hi = i64toi32_i32$5;
      i64toi32_i32$1 = ($7 + 576 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $981 = i64toi32_i32$5;
      $981$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $21$hi;
      i64toi32_i32$5 = $24$hi;
      i64toi32_i32$1 = $977$hi;
      i64toi32_i32$4 = $981$hi;
      __addtf3($7 + 560 | 0 | 0, $21 | 0, i64toi32_i32$3 | 0, $24 | 0, i64toi32_i32$5 | 0, $977 | 0, i64toi32_i32$1 | 0, $981 | 0, i64toi32_i32$4 | 0);
      i64toi32_i32$5 = ($7 + 560 | 0) + 8 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $24 = i64toi32_i32$4;
      $24$hi = i64toi32_i32$1;
      i64toi32_i32$5 = $7;
      i64toi32_i32$1 = HEAP32[($7 + 560 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[($7 + 564 | 0) >> 2] | 0;
      $21 = i64toi32_i32$1;
      $21$hi = i64toi32_i32$4;
      break label$67;
     }
     $27 = +($5 | 0);
     label$71 : {
      if ((($15 + 5 | 0) & 2047 | 0 | 0) != ($12 | 0)) {
       break label$71
      }
      __extenddftf2($7 + 512 | 0 | 0, +($27 * .5));
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$4 = $24$hi;
      i64toi32_i32$5 = $7;
      i64toi32_i32$4 = HEAP32[($7 + 512 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($7 + 516 | 0) >> 2] | 0;
      $1004 = i64toi32_i32$4;
      $1004$hi = i64toi32_i32$1;
      i64toi32_i32$5 = ($7 + 512 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $1008 = i64toi32_i32$1;
      $1008$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$1 = $24$hi;
      i64toi32_i32$5 = $1004$hi;
      i64toi32_i32$3 = $1008$hi;
      __addtf3($7 + 496 | 0 | 0, $21 | 0, i64toi32_i32$4 | 0, $24 | 0, i64toi32_i32$1 | 0, $1004 | 0, i64toi32_i32$5 | 0, $1008 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$1 = ($7 + 496 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $24 = i64toi32_i32$3;
      $24$hi = i64toi32_i32$5;
      i64toi32_i32$1 = $7;
      i64toi32_i32$5 = HEAP32[($7 + 496 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[($7 + 500 | 0) >> 2] | 0;
      $21 = i64toi32_i32$5;
      $21$hi = i64toi32_i32$3;
      break label$67;
     }
     __extenddftf2($7 + 544 | 0 | 0, +($27 * .75));
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$3 = $24$hi;
     i64toi32_i32$1 = $7;
     i64toi32_i32$3 = HEAP32[($7 + 544 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[($7 + 548 | 0) >> 2] | 0;
     $1024 = i64toi32_i32$3;
     $1024$hi = i64toi32_i32$5;
     i64toi32_i32$1 = ($7 + 544 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $1028 = i64toi32_i32$5;
     $1028$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$5 = $24$hi;
     i64toi32_i32$1 = $1024$hi;
     i64toi32_i32$4 = $1028$hi;
     __addtf3($7 + 528 | 0 | 0, $21 | 0, i64toi32_i32$3 | 0, $24 | 0, i64toi32_i32$5 | 0, $1024 | 0, i64toi32_i32$1 | 0, $1028 | 0, i64toi32_i32$4 | 0);
     i64toi32_i32$5 = ($7 + 528 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $24 = i64toi32_i32$4;
     $24$hi = i64toi32_i32$1;
     i64toi32_i32$5 = $7;
     i64toi32_i32$1 = HEAP32[($7 + 528 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7 + 532 | 0) >> 2] | 0;
     $21 = i64toi32_i32$1;
     $21$hi = i64toi32_i32$4;
    }
    if (($2 | 0) > (111 | 0)) {
     break label$66
    }
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$4 = $24$hi;
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$1 = $24$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 1073676288;
    fmodl($7 + 448 | 0 | 0, $21 | 0, i64toi32_i32$4 | 0, $24 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $7;
    i64toi32_i32$3 = HEAP32[($7 + 448 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7 + 452 | 0) >> 2] | 0;
    $1042 = i64toi32_i32$3;
    $1042$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $7;
    i64toi32_i32$5 = HEAP32[($7 + 456 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[($7 + 460 | 0) >> 2] | 0;
    $1044 = i64toi32_i32$5;
    $1044$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $1042$hi;
    i64toi32_i32$5 = $1044$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = 0;
    if (__letf2($1042 | 0, i64toi32_i32$3 | 0, $1044 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0) | 0) {
     break label$66
    }
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$4 = $24$hi;
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$1 = $24$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 1073676288;
    __addtf3($7 + 432 | 0 | 0, $21 | 0, i64toi32_i32$4 | 0, $24 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $7 + 440 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $24 = i64toi32_i32$3;
    $24$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $7;
    i64toi32_i32$5 = HEAP32[($7 + 432 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[($7 + 436 | 0) >> 2] | 0;
    $21 = i64toi32_i32$5;
    $21$hi = i64toi32_i32$3;
   }
   i64toi32_i32$3 = $23$hi;
   i64toi32_i32$3 = $22$hi;
   i64toi32_i32$3 = $21$hi;
   i64toi32_i32$3 = $24$hi;
   i64toi32_i32$3 = $23$hi;
   i64toi32_i32$5 = $22$hi;
   i64toi32_i32$1 = $21$hi;
   i64toi32_i32$4 = $24$hi;
   __addtf3($7 + 416 | 0 | 0, $23 | 0, i64toi32_i32$3 | 0, $22 | 0, i64toi32_i32$5 | 0, $21 | 0, i64toi32_i32$1 | 0, $24 | 0, i64toi32_i32$4 | 0);
   i64toi32_i32$5 = $7;
   i64toi32_i32$4 = HEAP32[($7 + 416 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($7 + 420 | 0) >> 2] | 0;
   $1064 = i64toi32_i32$4;
   $1064$hi = i64toi32_i32$1;
   i64toi32_i32$5 = ($7 + 416 | 0) + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $1068 = i64toi32_i32$1;
   $1068$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $25$hi;
   i64toi32_i32$4 = $26$hi;
   i64toi32_i32$4 = $1064$hi;
   i64toi32_i32$1 = $1068$hi;
   i64toi32_i32$5 = $25$hi;
   i64toi32_i32$3 = $26$hi;
   __subtf3($7 + 400 | 0 | 0, $1064 | 0, i64toi32_i32$4 | 0, $1068 | 0, i64toi32_i32$1 | 0, $25 | 0, i64toi32_i32$5 | 0, $26 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$1 = ($7 + 400 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $22 = i64toi32_i32$3;
   $22$hi = i64toi32_i32$5;
   i64toi32_i32$1 = $7;
   i64toi32_i32$5 = HEAP32[($7 + 400 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[($7 + 404 | 0) >> 2] | 0;
   $23 = i64toi32_i32$5;
   $23$hi = i64toi32_i32$3;
   label$72 : {
    if (($11 & 2147483647 | 0 | 0) <= (-2 - $9 | 0 | 0)) {
     break label$72
    }
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$3 = $22$hi;
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$5 = $22$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = 1073610752;
    __multf3($7 + 384 | 0 | 0, $23 | 0, i64toi32_i32$3 | 0, $22 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$4 = $24$hi;
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$1 = $24$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 0;
    $11 = __letf2($21 | 0, i64toi32_i32$4 | 0, $24 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$3 = $22$hi;
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$5 = $22$hi;
    $27 = +fabs(+(+__trunctfdf2($23 | 0, i64toi32_i32$3 | 0, $22 | 0, i64toi32_i32$5 | 0)));
    i64toi32_i32$1 = ($7 + 384 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $1096$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $22$hi;
    $12 = $27 >= 1038459371706965525706099.0e10;
    i64toi32_i32$0 = $12;
    i64toi32_i32$3 = $1096$hi;
    $175 = i64toi32_i32$5;
    i64toi32_i32$5 = $22$hi;
    i64toi32_i32$4 = $12 ? $175 : $22;
    i64toi32_i32$1 = $12 ? i64toi32_i32$3 : i64toi32_i32$5;
    $22 = i64toi32_i32$4;
    $22$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $7;
    i64toi32_i32$1 = HEAP32[($7 + 384 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7 + 388 | 0) >> 2] | 0;
    $1103$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $23$hi;
    i64toi32_i32$5 = $12;
    i64toi32_i32$4 = $1103$hi;
    $176 = i64toi32_i32$1;
    i64toi32_i32$1 = $23$hi;
    i64toi32_i32$3 = i64toi32_i32$5 ? $176 : $23;
    i64toi32_i32$0 = i64toi32_i32$5 ? i64toi32_i32$4 : i64toi32_i32$1;
    $23 = i64toi32_i32$3;
    $23$hi = i64toi32_i32$0;
    $16 = $16 + i64toi32_i32$5 | 0;
    label$73 : {
     if (($11 | 0) != (0 | 0) & ($14 & (i64toi32_i32$5 ^ 1 | 0 | ($2 | 0) != ($1 | 0) | 0) | 0) | 0) {
      break label$73
     }
     if (($16 + 110 | 0 | 0) <= ($10 | 0)) {
      break label$72
     }
    }
    (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   }
   i64toi32_i32$0 = $23$hi;
   i64toi32_i32$0 = $22$hi;
   i64toi32_i32$0 = $23$hi;
   i64toi32_i32$3 = $22$hi;
   scalbnl($7 + 368 | 0 | 0, $23 | 0, i64toi32_i32$0 | 0, $22 | 0, i64toi32_i32$3 | 0, $16 | 0);
   i64toi32_i32$5 = $7;
   i64toi32_i32$3 = HEAP32[($7 + 376 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($7 + 380 | 0) >> 2] | 0;
   $21 = i64toi32_i32$3;
   $21$hi = i64toi32_i32$0;
   i64toi32_i32$5 = $7;
   i64toi32_i32$0 = HEAP32[($7 + 368 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[($7 + 372 | 0) >> 2] | 0;
   $22 = i64toi32_i32$0;
   $22$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = $22$hi;
  i64toi32_i32$0 = $0;
  HEAP32[i64toi32_i32$0 >> 2] = $22;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$3 = $21$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $21;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$3;
  label$74 : {
   $20 = $7 + 8960 | 0;
   if ($20 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $20;
  }
 }
 
 function scanexp($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$0 = 0, $3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $6$hi = 0, $5 = 0, $6 = 0, i64toi32_i32$2 = 0, $4 = 0, $18 = 0, $19 = 0, $20 = 0, $88$hi = 0, $90 = 0, $90$hi = 0, $139$hi = 0;
  label$1 : {
   label$2 : {
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    if ($2 >>> 0 >= (HEAP32[($0 + 104 | 0) >> 2] | 0) >>> 0) {
     break label$2
    }
    HEAP32[($0 + 4 | 0) >> 2] = $2 + 1 | 0;
    $2 = HEAPU8[$2 >> 0] | 0;
    break label$1;
   }
   $2 = __shgetc($0 | 0) | 0;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     $3 = $2 + -43 | 0;
     if ($3 >>> 0 > 2 >>> 0) {
      break label$5
     }
     switch ($3 | 0) {
     case 1:
      break label$5;
     default:
      break label$4;
     };
    }
    $3 = $2 + -48 | 0;
    $4 = 0;
    break label$3;
   }
   label$6 : {
    label$7 : {
     $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     if ($3 >>> 0 >= (HEAP32[($0 + 104 | 0) >> 2] | 0) >>> 0) {
      break label$7
     }
     HEAP32[($0 + 4 | 0) >> 2] = $3 + 1 | 0;
     $5 = HEAPU8[$3 >> 0] | 0;
     break label$6;
    }
    $5 = __shgetc($0 | 0) | 0;
   }
   $4 = ($2 | 0) == (45 | 0);
   $3 = $5 + -48 | 0;
   label$8 : {
    if (!$1) {
     break label$8
    }
    if ($3 >>> 0 < 10 >>> 0) {
     break label$8
    }
    if (!(HEAP32[($0 + 104 | 0) >> 2] | 0)) {
     break label$8
    }
    HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) + -1 | 0;
   }
   $2 = $5;
  }
  label$9 : {
   label$10 : {
    if ($3 >>> 0 >= 10 >>> 0) {
     break label$10
    }
    $3 = 0;
    label$11 : while (1) {
     $3 = $2 + Math_imul($3, 10) | 0;
     label$12 : {
      label$13 : {
       $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       if ($2 >>> 0 >= (HEAP32[($0 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$13
       }
       HEAP32[($0 + 4 | 0) >> 2] = $2 + 1 | 0;
       $2 = HEAPU8[$2 >> 0] | 0;
       break label$12;
      }
      $2 = __shgetc($0 | 0) | 0;
     }
     $3 = $3 + -48 | 0;
     label$14 : {
      $5 = $2 + -48 | 0;
      if ($5 >>> 0 > 9 >>> 0) {
       break label$14
      }
      if (($3 | 0) < (214748364 | 0)) {
       continue label$11
      }
     }
     break label$11;
    };
    i64toi32_i32$1 = $3;
    i64toi32_i32$0 = $3 >> 31 | 0;
    $6 = $3;
    $6$hi = i64toi32_i32$0;
    label$15 : {
     if ($5 >>> 0 >= 10 >>> 0) {
      break label$15
     }
     label$16 : while (1) {
      i64toi32_i32$0 = 0;
      $88$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $6$hi;
      i64toi32_i32$1 = 0;
      i64toi32_i32$1 = __wasm_i64_mul($6 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $90 = i64toi32_i32$1;
      $90$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $88$hi;
      i64toi32_i32$2 = $2;
      i64toi32_i32$1 = $90$hi;
      i64toi32_i32$3 = $90;
      i64toi32_i32$4 = $2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $6 = i64toi32_i32$4;
      $6$hi = i64toi32_i32$5;
      label$17 : {
       label$18 : {
        $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
        if ($2 >>> 0 >= (HEAP32[($0 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$18
        }
        HEAP32[($0 + 4 | 0) >> 2] = $2 + 1 | 0;
        $2 = HEAPU8[$2 >> 0] | 0;
        break label$17;
       }
       $2 = __shgetc($0 | 0) | 0;
      }
      i64toi32_i32$5 = $6$hi;
      i64toi32_i32$0 = $6;
      i64toi32_i32$2 = -1;
      i64toi32_i32$3 = -48;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $6 = i64toi32_i32$1;
      $6$hi = i64toi32_i32$4;
      $5 = $2 + -48 | 0;
      if ($5 >>> 0 > 9 >>> 0) {
       break label$15
      }
      i64toi32_i32$4 = $6$hi;
      i64toi32_i32$5 = $6;
      i64toi32_i32$0 = 21474836;
      i64toi32_i32$3 = 2061584302;
      if ((i64toi32_i32$4 | 0) < (i64toi32_i32$0 | 0)) {
       $18 = 1
      } else {
       if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
         $19 = 0
        } else {
         $19 = 1
        }
        $20 = $19;
       } else {
        $20 = 0
       }
       $18 = $20;
      }
      if ($18) {
       continue label$16
      }
      break label$16;
     };
    }
    label$19 : {
     if ($5 >>> 0 >= 10 >>> 0) {
      break label$19
     }
     label$20 : while (1) {
      label$21 : {
       label$22 : {
        $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
        if ($2 >>> 0 >= (HEAP32[($0 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$22
        }
        HEAP32[($0 + 4 | 0) >> 2] = $2 + 1 | 0;
        $2 = HEAPU8[$2 >> 0] | 0;
        break label$21;
       }
       $2 = __shgetc($0 | 0) | 0;
      }
      if (($2 + -48 | 0) >>> 0 < 10 >>> 0) {
       continue label$20
      }
      break label$20;
     };
    }
    label$23 : {
     if (!(HEAP32[($0 + 104 | 0) >> 2] | 0)) {
      break label$23
     }
     HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = $6$hi;
    i64toi32_i32$0 = $6;
    i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
    i64toi32_i32$1 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
    $139$hi = i64toi32_i32$1;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$4 = $4;
    i64toi32_i32$1 = $139$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$0;
    i64toi32_i32$5 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$3;
    $6 = i64toi32_i32$0;
    $6$hi = i64toi32_i32$5;
    break label$9;
   }
   i64toi32_i32$5 = -2147483648;
   $6 = 0;
   $6$hi = i64toi32_i32$5;
   if (!(HEAP32[($0 + 104 | 0) >> 2] | 0)) {
    break label$9
   }
   HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) + -1 | 0;
   i64toi32_i32$5 = -2147483648;
   i64toi32_i32$0 = 0;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
   return i64toi32_i32$0 | 0;
  }
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$5 = $6;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$5 | 0;
 }
 
 function strtox($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $6 = 0, $5 = 0, $7 = 0, $7$hi = 0, $8 = 0, $8$hi = 0, $38 = 0, $39 = 0, $40 = 0, $42 = 0, $42$hi = 0, $48 = 0, $48$hi = 0;
  label$1 : {
   $4 = global$0 - 160 | 0;
   $5 = $4;
   if ($4 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $5;
  }
  memset($4 + 16 | 0 | 0, 0 | 0, 144 | 0) | 0;
  HEAP32[($4 + 92 | 0) >> 2] = -1;
  HEAP32[($4 + 60 | 0) >> 2] = $1;
  HEAP32[($4 + 24 | 0) >> 2] = -1;
  HEAP32[($4 + 20 | 0) >> 2] = $1;
  i64toi32_i32$0 = 0;
  __shlim($4 + 16 | 0 | 0, 0 | 0, i64toi32_i32$0 | 0);
  __floatscan($4 | 0, $4 + 16 | 0 | 0, $3 | 0, 1 | 0);
  i64toi32_i32$2 = $4;
  i64toi32_i32$0 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  $7 = i64toi32_i32$0;
  $7$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = HEAP32[$4 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($4 + 4 | 0) >> 2] | 0;
  $8 = i64toi32_i32$1;
  $8$hi = i64toi32_i32$0;
  label$3 : {
   if (!$2) {
    break label$3
   }
   $38 = $2;
   $39 = $1;
   $40 = $1;
   i64toi32_i32$2 = $4;
   i64toi32_i32$0 = HEAP32[($4 + 136 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($4 + 140 | 0) >> 2] | 0;
   $42 = i64toi32_i32$0;
   $42$hi = i64toi32_i32$1;
   i64toi32_i32$0 = (HEAP32[($4 + 20 | 0) >> 2] | 0) - (HEAP32[($4 + 24 | 0) >> 2] | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
   $48 = i64toi32_i32$0;
   $48$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $42$hi;
   i64toi32_i32$2 = $42;
   i64toi32_i32$0 = $48$hi;
   i64toi32_i32$3 = $48;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   HEAP32[$38 >> 2] = !(i64toi32_i32$4 | i64toi32_i32$5 | 0) ? $39 : $40 + i64toi32_i32$4 | 0;
  }
  i64toi32_i32$5 = $8$hi;
  i64toi32_i32$2 = $0;
  HEAP32[i64toi32_i32$2 >> 2] = $8;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $7$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $7;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
  label$4 : {
   $6 = $4 + 160 | 0;
   if ($6 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $6;
  }
 }
 
 function strtod($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4 = 0, $3 = 0, $17 = 0, $17$hi = 0, $19 = 0, $19$hi = 0, $5 = 0.0;
  label$1 : {
   $2 = global$0 - 16 | 0;
   $3 = $2;
   if ($2 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $3;
  }
  strtox($2 | 0, $0 | 0, $1 | 0, 1 | 0);
  i64toi32_i32$0 = HEAP32[$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2 + 4 | 0) >> 2] | 0;
  $17 = i64toi32_i32$0;
  $17$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2 + 12 | 0) >> 2] | 0;
  $19 = i64toi32_i32$1;
  $19$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $17$hi;
  i64toi32_i32$1 = $19$hi;
  $5 = +__trunctfdf2($17 | 0, i64toi32_i32$0 | 0, $19 | 0, i64toi32_i32$1 | 0);
  label$3 : {
   $4 = $2 + 16 | 0;
   if ($4 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $4;
  }
  return +$5;
 }
 
 function FLAC__stream_encoder_new() {
  var $1 = 0, $0 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2 = 0;
  label$1 : {
   $0 = dlcalloc(1 | 0, 8 | 0) | 0;
   if ($0) {
    break label$1
   }
   return 0 | 0;
  }
  $1 = dlcalloc(1 | 0, 1032 | 0) | 0;
  HEAP32[$0 >> 2] = $1;
  label$2 : {
   if (!$1) {
    break label$2
   }
   $2 = dlcalloc(1 | 0, 11856 | 0) | 0;
   HEAP32[($0 + 4 | 0) >> 2] = $2;
   label$3 : {
    if ($2) {
     break label$3
    }
    dlfree($1 | 0);
    break label$2;
   }
   $1 = FLAC__bitwriter_new() | 0;
   $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($2 + 6856 | 0) >> 2] = $1;
   label$4 : {
    if ($1) {
     break label$4
    }
    dlfree($2 | 0);
    dlfree(HEAP32[$0 >> 2] | 0 | 0);
    break label$2;
   }
   HEAP32[($2 + 7296 | 0) >> 2] = 0;
   $1 = HEAP32[$0 >> 2] | 0;
   i64toi32_i32$1 = $1;
   i64toi32_i32$0 = 1056964608;
   HEAP32[($1 + 44 | 0) >> 2] = 13;
   HEAP32[($1 + 48 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1;
   i64toi32_i32$0 = 1;
   HEAP32[($1 + 36 | 0) >> 2] = 0;
   HEAP32[($1 + 40 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1;
   i64toi32_i32$0 = 44100;
   HEAP32[($1 + 28 | 0) >> 2] = 16;
   HEAP32[($1 + 32 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1;
   i64toi32_i32$0 = 2;
   HEAP32[($1 + 20 | 0) >> 2] = 0;
   HEAP32[($1 + 24 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1;
   i64toi32_i32$0 = 0;
   HEAP32[($1 + 12 | 0) >> 2] = 1;
   HEAP32[($1 + 16 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1;
   i64toi32_i32$0 = 1;
   HEAP32[($1 + 4 | 0) >> 2] = 0;
   HEAP32[($1 + 8 | 0) >> 2] = i64toi32_i32$0;
   $1 = HEAP32[$0 >> 2] | 0;
   i64toi32_i32$1 = $1;
   i64toi32_i32$0 = 0;
   HEAP32[($1 + 592 | 0) >> 2] = 0;
   HEAP32[($1 + 596 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1;
   i64toi32_i32$0 = 0;
   HEAP32[($1 + 556 | 0) >> 2] = 0;
   HEAP32[($1 + 560 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1 + 564 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1 + 572 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1 + 580 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1 + 600 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 7248 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 7252 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(i64toi32_i32$1 + 7048 | 0) >> 2] = 0;
   i64toi32_i32$1 = i64toi32_i32$1 + 7256 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $2 + 7264 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $2 + 7272 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $2 + 7280 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($2 + 7288 | 0) >> 2] = 0;
   FLAC__ogg_encoder_aspect_set_defaults($1 + 632 | 0 | 0);
   label$5 : {
    $1 = HEAP32[$0 >> 2] | 0;
    if ((HEAP32[$1 >> 2] | 0 | 0) != (1 | 0)) {
     break label$5
    }
    i64toi32_i32$1 = $1;
    i64toi32_i32$0 = 0;
    HEAP32[($1 + 16 | 0) >> 2] = 1;
    HEAP32[($1 + 20 | 0) >> 2] = i64toi32_i32$0;
    FLAC__stream_encoder_set_apodization($0 | 0, global$1 + 10761 | 0 | 0) | 0;
    $1 = HEAP32[$0 >> 2] | 0;
    if ((HEAP32[$1 >> 2] | 0 | 0) != (1 | 0)) {
     break label$5
    }
    i64toi32_i32$1 = $1;
    i64toi32_i32$0 = 5;
    HEAP32[($1 + 576 | 0) >> 2] = 0;
    HEAP32[($1 + 580 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1;
    i64toi32_i32$0 = 0;
    HEAP32[($1 + 564 | 0) >> 2] = 0;
    HEAP32[($1 + 568 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1;
    i64toi32_i32$0 = 0;
    HEAP32[($1 + 556 | 0) >> 2] = 8;
    HEAP32[($1 + 560 | 0) >> 2] = i64toi32_i32$0;
   }
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 11848 | 0) >> 2] = 0;
   HEAP32[($1 + 6176 | 0) >> 2] = $1 + 336 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6180 | 0) >> 2] = $1 + 628 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6184 | 0) >> 2] = $1 + 920 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6188 | 0) >> 2] = $1 + 1212 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6192 | 0) >> 2] = $1 + 1504 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6196 | 0) >> 2] = $1 + 1796 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6200 | 0) >> 2] = $1 + 2088 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6204 | 0) >> 2] = $1 + 2380 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6208 | 0) >> 2] = $1 + 2672 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6212 | 0) >> 2] = $1 + 2964 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6216 | 0) >> 2] = $1 + 3256 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6220 | 0) >> 2] = $1 + 3548 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6224 | 0) >> 2] = $1 + 3840 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6228 | 0) >> 2] = $1 + 4132 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6232 | 0) >> 2] = $1 + 4424 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6236 | 0) >> 2] = $1 + 4716 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6240 | 0) >> 2] = $1 + 5008 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6244 | 0) >> 2] = $1 + 5300 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6248 | 0) >> 2] = $1 + 5592 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6252 | 0) >> 2] = $1 + 5884 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6640 | 0) >> 2] = $1 + 6256 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6644 | 0) >> 2] = $1 + 6268 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6648 | 0) >> 2] = $1 + 6280 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6652 | 0) >> 2] = $1 + 6292 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6656 | 0) >> 2] = $1 + 6304 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6660 | 0) >> 2] = $1 + 6316 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6664 | 0) >> 2] = $1 + 6328 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6668 | 0) >> 2] = $1 + 6340 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6672 | 0) >> 2] = $1 + 6352 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6676 | 0) >> 2] = $1 + 6364 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6680 | 0) >> 2] = $1 + 6376 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6684 | 0) >> 2] = $1 + 6388 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6688 | 0) >> 2] = $1 + 6400 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6692 | 0) >> 2] = $1 + 6412 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6696 | 0) >> 2] = $1 + 6424 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6700 | 0) >> 2] = $1 + 6436 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6704 | 0) >> 2] = $1 + 6448 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6708 | 0) >> 2] = $1 + 6460 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6712 | 0) >> 2] = $1 + 6472 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6716 | 0) >> 2] = $1 + 6484 | 0;
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6256 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6268 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6280 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6292 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6304 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6316 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6328 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6340 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6352 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6364 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6376 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6388 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6400 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6412 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6424 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6436 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6448 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6460 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6472 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6484 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 11724 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 11736 | 0 | 0);
   HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 1;
   return $0 | 0;
  }
  dlfree($0 | 0);
  return 0 | 0;
 }
 
 function FLAC__stream_encoder_set_apodization($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $3 = 0, $5 = 0, $8 = Math_fround(0), $7 = 0, $2 = 0, $6 = 0, $9 = Math_fround(0), $11 = 0.0, $10 = Math_fround(0);
  $2 = 0;
  label$1 : {
   $3 = HEAP32[$0 >> 2] | 0;
   if ((HEAP32[$3 >> 2] | 0 | 0) != (1 | 0)) {
    break label$1
   }
   HEAP32[($3 + 40 | 0) >> 2] = 0;
   $4 = 0;
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      $2 = strchr($1 | 0, 59 | 0) | 0;
      if (!$2) {
       break label$4
      }
      $5 = $2 - $1 | 0;
      break label$3;
     }
     $5 = strlen($1 | 0) | 0;
    }
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         label$10 : {
          label$11 : {
           label$12 : {
            label$13 : {
             label$14 : {
              label$15 : {
               label$16 : {
                label$17 : {
                 label$18 : {
                  label$19 : {
                   $6 = ($5 | 0) != (8 | 0);
                   if ($6) {
                    break label$19
                   }
                   if (strncmp(global$1 + 10568 | 0 | 0, $1 | 0, 8 | 0) | 0) {
                    break label$18
                   }
                   HEAP32[($3 + 40 | 0) >> 2] = $4 + 1 | 0;
                   HEAP32[(($3 + ($4 << 4 | 0) | 0) + 44 | 0) >> 2] = 0;
                   break label$5;
                  }
                  $7 = $5 + -6 | 0;
                  if ($7 >>> 0 > 20 >>> 0) {
                   break label$14
                  }
                  label$20 : {
                   switch ($7 | 0) {
                   case 2:
                   case 3:
                   case 4:
                   case 5:
                   case 6:
                   case 8:
                   case 9:
                   case 10:
                   case 11:
                   case 12:
                   case 13:
                   case 14:
                   case 15:
                   case 16:
                   case 17:
                   case 18:
                   case 19:
                    break label$14;
                   case 1:
                    break label$15;
                   case 20:
                    break label$17;
                   case 7:
                    break label$20;
                   default:
                    break label$16;
                   };
                  }
                  $7 = 1;
                  if (strncmp(global$1 + 10577 | 0 | 0, $1 | 0, 13 | 0) | 0) {
                   break label$13
                  }
                  HEAP32[($3 + 40 | 0) >> 2] = $4 + 1 | 0;
                  HEAP32[(($3 + ($4 << 4 | 0) | 0) + 44 | 0) >> 2] = 1;
                  break label$5;
                 }
                 $7 = 0;
                 if (strncmp(global$1 + 10591 | 0 | 0, $1 | 0, 8 | 0) | 0) {
                  break label$13
                 }
                 HEAP32[($3 + 40 | 0) >> 2] = $4 + 1 | 0;
                 HEAP32[(($3 + ($4 << 4 | 0) | 0) + 44 | 0) >> 2] = 2;
                 break label$5;
                }
                $7 = 0;
                if (strncmp(global$1 + 10600 | 0 | 0, $1 | 0, 26 | 0) | 0) {
                 break label$13
                }
                HEAP32[($3 + 40 | 0) >> 2] = $4 + 1 | 0;
                HEAP32[(($3 + ($4 << 4 | 0) | 0) + 44 | 0) >> 2] = 3;
                break label$5;
               }
               if (strncmp(global$1 + 10627 | 0 | 0, $1 | 0, 6 | 0) | 0) {
                break label$5
               }
               HEAP32[($3 + 40 | 0) >> 2] = $4 + 1 | 0;
               HEAP32[(($3 + ($4 << 4 | 0) | 0) + 44 | 0) >> 2] = 4;
               break label$5;
              }
              if (strncmp(global$1 + 10634 | 0 | 0, $1 | 0, 7 | 0) | 0) {
               break label$12
              }
              HEAP32[($3 + 40 | 0) >> 2] = $4 + 1 | 0;
              HEAP32[(($3 + ($4 << 4 | 0) | 0) + 44 | 0) >> 2] = 5;
              break label$5;
             }
             $7 = 0;
             if ($5 >>> 0 < 8 >>> 0) {
              break label$11
             }
            }
            if (strncmp(global$1 + 10642 | 0 | 0, $1 | 0, 6 | 0) | 0) {
             break label$10
            }
            $8 = Math_fround(+strtod($1 + 6 | 0 | 0, 0 | 0));
            if ($8 > Math_fround(0.0) ^ 1 | 0) {
             break label$5
            }
            if ($8 <= Math_fround(.5) ^ 1 | 0) {
             break label$5
            }
            $4 = HEAP32[$0 >> 2] | 0;
            HEAPF32[(($4 + ((HEAP32[($4 + 40 | 0) >> 2] | 0) << 4 | 0) | 0) + 48 | 0) >> 2] = $8;
            $4 = HEAP32[$0 >> 2] | 0;
            $5 = HEAP32[($4 + 40 | 0) >> 2] | 0;
            HEAP32[($4 + 40 | 0) >> 2] = $5 + 1 | 0;
            HEAP32[(($4 + ($5 << 4 | 0) | 0) + 44 | 0) >> 2] = 6;
            break label$5;
           }
           if (strncmp(global$1 + 10649 | 0 | 0, $1 | 0, 7 | 0) | 0) {
            break label$9
           }
           HEAP32[($3 + 40 | 0) >> 2] = $4 + 1 | 0;
           HEAP32[(($3 + ($4 << 4 | 0) | 0) + 44 | 0) >> 2] = 7;
           break label$5;
          }
          $5 = $5 + -4 | 0;
          if ($5 >>> 0 > 1 >>> 0) {
           break label$5
          }
          label$21 : {
           switch ($5 | 0) {
           case 1:
            break label$7;
           default:
            break label$21;
           };
          }
          if (strncmp(global$1 + 10657 | 0 | 0, $1 | 0, 4 | 0) | 0) {
           break label$5
          }
          HEAP32[($3 + 40 | 0) >> 2] = $4 + 1 | 0;
          HEAP32[(($3 + ($4 << 4 | 0) | 0) + 44 | 0) >> 2] = 8;
          break label$5;
         }
         if (!$7) {
          break label$8
         }
         if (strncmp(global$1 + 10662 | 0 | 0, $1 | 0, 13 | 0) | 0) {
          break label$8
         }
         HEAP32[($3 + 40 | 0) >> 2] = $4 + 1 | 0;
         HEAP32[(($3 + ($4 << 4 | 0) | 0) + 44 | 0) >> 2] = 9;
         break label$5;
        }
        if (strncmp(global$1 + 10676 | 0 | 0, $1 | 0, 7 | 0) | 0) {
         break label$5
        }
        HEAP32[($3 + 40 | 0) >> 2] = $4 + 1 | 0;
        HEAP32[(($3 + ($4 << 4 | 0) | 0) + 44 | 0) >> 2] = 10;
        break label$5;
       }
       label$22 : {
        if (($5 | 0) != (9 | 0)) {
         break label$22
        }
        if (strncmp(global$1 + 10684 | 0 | 0, $1 | 0, 9 | 0) | 0) {
         break label$22
        }
        HEAP32[($3 + 40 | 0) >> 2] = $4 + 1 | 0;
        HEAP32[(($3 + ($4 << 4 | 0) | 0) + 44 | 0) >> 2] = 11;
        break label$5;
       }
       label$23 : {
        if ($6) {
         break label$23
        }
        label$24 : {
         if (strncmp(global$1 + 10694 | 0 | 0, $1 | 0, 8 | 0) | 0) {
          break label$24
         }
         HEAP32[($3 + 40 | 0) >> 2] = $4 + 1 | 0;
         HEAP32[(($3 + ($4 << 4 | 0) | 0) + 44 | 0) >> 2] = 12;
         break label$5;
        }
        if (strncmp(global$1 + 10703 | 0 | 0, $1 | 0, 6 | 0) | 0) {
         break label$5
        }
        break label$6;
       }
       if (!(strncmp(global$1 + 10703 | 0 | 0, $1 | 0, 6 | 0) | 0)) {
        break label$6
       }
       if ($5 >>> 0 < 16 >>> 0) {
        break label$5
       }
       label$25 : {
        if (strncmp(global$1 + 10710 | 0 | 0, $1 | 0, 14 | 0) | 0) {
         break label$25
        }
        label$26 : {
         label$27 : {
          $11 = +strtod($1 + 14 | 0 | 0, 0 | 0);
          if (!(Math_abs($11) < 2147483648.0)) {
           break label$27
          }
          $7 = ~~$11;
          break label$26;
         }
         $7 = -2147483648;
        }
        label$28 : {
         label$29 : {
          $4 = strchr($1 | 0, 47 | 0) | 0;
          if ($4) {
           break label$29
          }
          $8 = Math_fround(.10000000149011612);
          break label$28;
         }
         $8 = Math_fround(.9900000095367432);
         $5 = $4 + 1 | 0;
         if (Math_fround(+strtod($5 | 0, 0 | 0)) < Math_fround(.9900000095367432) ^ 1 | 0) {
          break label$28
         }
         $8 = Math_fround(+strtod($5 | 0, 0 | 0));
        }
        label$30 : {
         label$31 : {
          $4 = strchr(($4 ? $4 + 1 | 0 : $1) | 0, 47 | 0) | 0;
          if ($4) {
           break label$31
          }
          $9 = Math_fround(.20000000298023224);
          break label$30;
         }
         $9 = Math_fround(+strtod($4 + 1 | 0 | 0, 0 | 0));
        }
        $4 = HEAP32[$0 >> 2] | 0;
        $3 = HEAP32[($4 + 40 | 0) >> 2] | 0;
        label$32 : {
         if (($7 | 0) > (1 | 0)) {
          break label$32
         }
         HEAPF32[(($4 + ($3 << 4 | 0) | 0) + 48 | 0) >> 2] = $9;
         $4 = HEAP32[$0 >> 2] | 0;
         $5 = HEAP32[($4 + 40 | 0) >> 2] | 0;
         HEAP32[($4 + 40 | 0) >> 2] = $5 + 1 | 0;
         HEAP32[(($4 + ($5 << 4 | 0) | 0) + 44 | 0) >> 2] = 13;
         break label$5;
        }
        if (($3 + $7 | 0) >>> 0 > 31 >>> 0) {
         break label$5
        }
        $10 = Math_fround(Math_fround(Math_fround(1.0) / Math_fround(Math_fround(1.0) - $8)) + Math_fround(-1.0));
        $8 = Math_fround($10 + Math_fround($7 | 0));
        $5 = 0;
        label$33 : while (1) {
         HEAPF32[(($4 + ($3 << 4 | 0) | 0) + 48 | 0) >> 2] = $9;
         $4 = HEAP32[$0 >> 2] | 0;
         HEAPF32[(($4 + ((HEAP32[($4 + 40 | 0) >> 2] | 0) << 4 | 0) | 0) + 52 | 0) >> 2] = Math_fround(Math_fround($5 | 0) / $8);
         $4 = HEAP32[$0 >> 2] | 0;
         $5 = $5 + 1 | 0;
         HEAPF32[(($4 + ((HEAP32[($4 + 40 | 0) >> 2] | 0) << 4 | 0) | 0) + 56 | 0) >> 2] = Math_fround(Math_fround($10 + Math_fround($5 | 0)) / $8);
         $4 = HEAP32[$0 >> 2] | 0;
         $6 = HEAP32[($4 + 40 | 0) >> 2] | 0;
         $3 = $6 + 1 | 0;
         HEAP32[($4 + 40 | 0) >> 2] = $3;
         HEAP32[(($4 + ($6 << 4 | 0) | 0) + 44 | 0) >> 2] = 14;
         if (($5 | 0) != ($7 | 0)) {
          continue label$33
         }
         break label$5;
        };
       }
       if ($5 >>> 0 < 17 >>> 0) {
        break label$5
       }
       if (strncmp(global$1 + 10725 | 0 | 0, $1 | 0, 15 | 0) | 0) {
        break label$5
       }
       label$34 : {
        label$35 : {
         $11 = +strtod($1 + 15 | 0 | 0, 0 | 0);
         if (!(Math_abs($11) < 2147483648.0)) {
          break label$35
         }
         $7 = ~~$11;
         break label$34;
        }
        $7 = -2147483648;
       }
       $9 = Math_fround(.20000000298023224);
       $8 = Math_fround(.20000000298023224);
       label$36 : {
        $4 = strchr($1 | 0, 47 | 0) | 0;
        if (!$4) {
         break label$36
        }
        $8 = Math_fround(.9900000095367432);
        $5 = $4 + 1 | 0;
        if (Math_fround(+strtod($5 | 0, 0 | 0)) < Math_fround(.9900000095367432) ^ 1 | 0) {
         break label$36
        }
        $8 = Math_fround(+strtod($5 | 0, 0 | 0));
       }
       label$37 : {
        $4 = strchr(($4 ? $4 + 1 | 0 : $1) | 0, 47 | 0) | 0;
        if (!$4) {
         break label$37
        }
        $9 = Math_fround(+strtod($4 + 1 | 0 | 0, 0 | 0));
       }
       $4 = HEAP32[$0 >> 2] | 0;
       $3 = HEAP32[($4 + 40 | 0) >> 2] | 0;
       label$38 : {
        if (($7 | 0) > (1 | 0)) {
         break label$38
        }
        HEAPF32[(($4 + ($3 << 4 | 0) | 0) + 48 | 0) >> 2] = $9;
        $4 = HEAP32[$0 >> 2] | 0;
        $5 = HEAP32[($4 + 40 | 0) >> 2] | 0;
        HEAP32[($4 + 40 | 0) >> 2] = $5 + 1 | 0;
        HEAP32[(($4 + ($5 << 4 | 0) | 0) + 44 | 0) >> 2] = 13;
        break label$5;
       }
       if (($3 + $7 | 0) >>> 0 > 31 >>> 0) {
        break label$5
       }
       $10 = Math_fround(Math_fround(Math_fround(1.0) / Math_fround(Math_fround(1.0) - $8)) + Math_fround(-1.0));
       $8 = Math_fround($10 + Math_fround($7 | 0));
       $5 = 0;
       label$39 : while (1) {
        HEAPF32[(($4 + ($3 << 4 | 0) | 0) + 48 | 0) >> 2] = $9;
        $4 = HEAP32[$0 >> 2] | 0;
        HEAPF32[(($4 + ((HEAP32[($4 + 40 | 0) >> 2] | 0) << 4 | 0) | 0) + 52 | 0) >> 2] = Math_fround(Math_fround($5 | 0) / $8);
        $4 = HEAP32[$0 >> 2] | 0;
        $5 = $5 + 1 | 0;
        HEAPF32[(($4 + ((HEAP32[($4 + 40 | 0) >> 2] | 0) << 4 | 0) | 0) + 56 | 0) >> 2] = Math_fround(Math_fround($10 + Math_fround($5 | 0)) / $8);
        $4 = HEAP32[$0 >> 2] | 0;
        $6 = HEAP32[($4 + 40 | 0) >> 2] | 0;
        $3 = $6 + 1 | 0;
        HEAP32[($4 + 40 | 0) >> 2] = $3;
        HEAP32[(($4 + ($6 << 4 | 0) | 0) + 44 | 0) >> 2] = 15;
        if (($5 | 0) != ($7 | 0)) {
         continue label$39
        }
        break label$5;
       };
      }
      if (strncmp(global$1 + 10741 | 0 | 0, $1 | 0, 5 | 0) | 0) {
       break label$5
      }
      HEAP32[($3 + 40 | 0) >> 2] = $4 + 1 | 0;
      HEAP32[(($3 + ($4 << 4 | 0) | 0) + 44 | 0) >> 2] = 16;
      break label$5;
     }
     $8 = Math_fround(+strtod($1 + 6 | 0 | 0, 0 | 0));
     if ($8 >= Math_fround(0.0) ^ 1 | 0) {
      break label$5
     }
     if ($8 <= Math_fround(1.0) ^ 1 | 0) {
      break label$5
     }
     $4 = HEAP32[$0 >> 2] | 0;
     HEAPF32[(($4 + ((HEAP32[($4 + 40 | 0) >> 2] | 0) << 4 | 0) | 0) + 48 | 0) >> 2] = $8;
     $4 = HEAP32[$0 >> 2] | 0;
     $5 = HEAP32[($4 + 40 | 0) >> 2] | 0;
     HEAP32[($4 + 40 | 0) >> 2] = $5 + 1 | 0;
     HEAP32[(($4 + ($5 << 4 | 0) | 0) + 44 | 0) >> 2] = 13;
    }
    $3 = HEAP32[$0 >> 2] | 0;
    $4 = HEAP32[($3 + 40 | 0) >> 2] | 0;
    label$40 : {
     if (!$2) {
      break label$40
     }
     $1 = ($4 | 0) == (32 | 0) ? $1 : $2 ? $2 + 1 | 0 : $1;
     if (($4 | 0) != (32 | 0)) {
      continue label$2
     }
    }
    break label$2;
   };
   $2 = 1;
   if ($4) {
    break label$1
   }
   HEAP32[($3 + 40 | 0) >> 2] = 1;
   HEAP32[($3 + 44 | 0) >> 2] = 13;
   HEAP32[($3 + 48 | 0) >> 2] = 1056964608;
  }
  return $2 | 0;
 }
 
 function FLAC__stream_encoder_delete($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 11848 | 0) >> 2] = 1;
   FLAC__stream_encoder_finish($0 | 0) | 0;
   label$2 : {
    $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    $2 = HEAP32[($1 + 11752 | 0) >> 2] | 0;
    if (!$2) {
     break label$2
    }
    FLAC__stream_decoder_delete($2 | 0);
    $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   }
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($1 + 6256 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6268 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6280 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6292 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6304 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6316 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6328 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6340 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6352 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6364 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6376 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6388 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6400 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6412 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6424 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6436 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6448 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6460 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6472 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6484 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 11724 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 11736 | 0 | 0);
   FLAC__bitwriter_delete(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6856 | 0) >> 2] | 0 | 0);
   dlfree(HEAP32[($0 + 4 | 0) >> 2] | 0 | 0);
   dlfree(HEAP32[$0 >> 2] | 0 | 0);
   dlfree($0 | 0);
  }
 }
 
 function FLAC__stream_encoder_finish($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $1 = 0, $20 = 0, $20$hi = 0, $8 = 0, $5 = 0, $21$hi = 0, $21 = 0, $9 = 0, $120 = 0, $121 = 0, $11 = 0, $12 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $160 = 0, $19 = 0, $18 = 0, $159 = 0, $164 = 0, $184 = 0, $188 = 0, $192 = 0, $197 = 0, $200 = 0, $329 = 0, $332 = 0, $335 = 0, $338 = 0, $341 = 0, $344 = 0, $347 = 0, $350 = 0, $353 = 0, $356 = 0, $359 = 0, $362 = 0, $365 = 0, $368 = 0, $10 = 0, $416 = 0, $418$hi = 0, $446$hi = 0, $459 = 0, $472 = 0, $475 = 0, $478 = 0, $481 = 0, $483 = 0, $490 = 0, $493$hi = 0, $498$hi = 0, $540 = 0, $543$hi = 0, $547$hi = 0, $587 = 0, $611 = 0, $620 = 0, $620$hi = 0, $623 = 0, $623$hi = 0, $624 = 0, $624$hi = 0, $627 = 0, $627$hi = 0, $630 = 0, $630$hi = 0, $631 = 0, $631$hi = 0, $632 = 0, $632$hi = 0, $635 = 0, $635$hi = 0, $638 = 0, $638$hi = 0, $639 = 0, $639$hi = 0, $642 = 0, $642$hi = 0, $644$hi = 0, $645 = 0, $645$hi = 0, $646 = 0, $646$hi = 0, $647 = 0, $648 = 0, $655 = 0, $655$hi = 0, $658 = 0, $658$hi = 0, $659 = 0, $659$hi = 0, $662 = 0, $662$hi = 0, $665 = 0, $665$hi = 0, $666 = 0, $666$hi = 0, $667 = 0, $667$hi = 0, $670 = 0, $670$hi = 0, $673 = 0, $673$hi = 0, $674 = 0, $674$hi = 0, $677 = 0, $677$hi = 0, $679$hi = 0, $680 = 0, $680$hi = 0, $681 = 0, $681$hi = 0, $682 = 0;
  label$1 : {
   $1 = global$0 - 32 | 0;
   $18 = $1;
   if ($1 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $18;
  }
  label$3 : {
   label$4 : {
    if ($0) {
     break label$4
    }
    $2 = 0;
    break label$3;
   }
   $3 = 0;
   label$5 : {
    $4 = HEAP32[$0 >> 2] | 0;
    $2 = HEAP32[$4 >> 2] | 0;
    if ($2 >>> 0 > 1 >>> 0) {
     break label$5
    }
    label$6 : {
     switch ($2 | 0) {
     case 1:
      break label$3;
     default:
      break label$6;
     };
    }
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    if (HEAP32[($2 + 11848 | 0) >> 2] | 0) {
     break label$5
    }
    $2 = HEAP32[($2 + 7052 | 0) >> 2] | 0;
    if (!$2) {
     break label$5
    }
    $3 = HEAP32[($4 + 36 | 0) >> 2] | 0;
    HEAP32[($4 + 36 | 0) >> 2] = $2;
    $3 = !(process_frame_($0 | 0, ($3 | 0) != ($2 | 0) | 0, 1 | 0) | 0);
    $4 = HEAP32[$0 >> 2] | 0;
   }
   label$7 : {
    if (!(HEAP32[($4 + 12 | 0) >> 2] | 0)) {
     break label$7
    }
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    FLAC__MD5Final($2 + 6928 | 0 | 0, $2 + 7060 | 0 | 0);
   }
   $4 = $0 + 4 | 0;
   label$8 : {
    label$9 : {
     $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     if (!(HEAP32[($2 + 11848 | 0) >> 2] | 0)) {
      break label$9
     }
     $5 = $3;
     break label$8;
    }
    label$10 : {
     $6 = HEAP32[$0 >> 2] | 0;
     if (HEAP32[$6 >> 2] | 0) {
      break label$10
     }
     label$11 : {
      $7 = HEAP32[($2 + 7268 | 0) >> 2] | 0;
      if (!$7) {
       break label$11
      }
      label$12 : {
       label$13 : {
        if (!(HEAP32[($2 + 7260 | 0) >> 2] | 0)) {
         break label$13
        }
        $8 = HEAP32[($2 + 6900 | 0) >> 2] | 0;
        $5 = HEAP32[($2 + 6896 | 0) >> 2] | 0;
        i64toi32_i32$2 = $2 + 6920 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $20 = i64toi32_i32$0;
        $20$hi = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        if ((FUNCTION_TABLE[$7]($0, 0, i64toi32_i32$1, HEAP32[($2 + 7288 | 0) >> 2] | 0) | 0 | 0) == (2 | 0)) {
         break label$12
        }
        simple_ogg_page__init($1 | 0);
        label$14 : {
         i64toi32_i32$2 = HEAP32[$0 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 608 | 0) >> 2] | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 612 | 0) >> 2] | 0;
         $6 = HEAP32[($0 + 4 | 0) >> 2] | 0;
         if (!(simple_ogg_page__get_at($0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, $1 | 0, HEAP32[($6 + 7268 | 0) >> 2] | 0 | 0, HEAP32[($6 + 7264 | 0) >> 2] | 0 | 0, HEAP32[($6 + 7288 | 0) >> 2] | 0 | 0) | 0)) {
          break label$14
         }
         $6 = global$15;
         label$15 : {
          $9 = (HEAP32[global$16 >> 2] | 0) + (HEAP32[$6 >> 2] | 0) | 0;
          $6 = (((($9 + (HEAP32[global$17 >> 2] | 0) | 0) + (HEAP32[global$18 >> 2] | 0) | 0) + (HEAP32[global$19 >> 2] | 0) | 0) + (HEAP32[global$20 >> 2] | 0) | 0) + (HEAP32[global$21 >> 2] | 0) | 0;
          $7 = ($6 + (HEAP32[global$22 >> 2] | 0) | 0) >>> 3 | 0;
          if (($7 + 33 | 0) >>> 0 <= (HEAP32[($1 + 12 | 0) >> 2] | 0) >>> 0) {
           break label$15
          }
          HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
          simple_ogg_page__clear($1 | 0);
          break label$12;
         }
         $7 = $7 + (HEAP32[($1 + 8 | 0) >> 2] | 0) | 0;
         i64toi32_i32$2 = $2 + 6936 | 0;
         i64toi32_i32$0 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
         i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
         $159 = i64toi32_i32$0;
         i64toi32_i32$0 = $7 + 25 | 0;
         $120 = $159;
         HEAP8[i64toi32_i32$0 >> 0] = $120;
         HEAP8[(i64toi32_i32$0 + 1 | 0) >> 0] = $120 >>> 8 | 0;
         HEAP8[(i64toi32_i32$0 + 2 | 0) >> 0] = $120 >>> 16 | 0;
         HEAP8[(i64toi32_i32$0 + 3 | 0) >> 0] = $120 >>> 24 | 0;
         HEAP8[(i64toi32_i32$0 + 4 | 0) >> 0] = i64toi32_i32$1;
         HEAP8[(i64toi32_i32$0 + 5 | 0) >> 0] = i64toi32_i32$1 >>> 8 | 0;
         HEAP8[(i64toi32_i32$0 + 6 | 0) >> 0] = i64toi32_i32$1 >>> 16 | 0;
         HEAP8[(i64toi32_i32$0 + 7 | 0) >> 0] = i64toi32_i32$1 >>> 24 | 0;
         i64toi32_i32$2 = $2 + 6928 | 0;
         i64toi32_i32$1 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
         i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
         $164 = i64toi32_i32$1;
         i64toi32_i32$1 = $7 + 17 | 0;
         $121 = $164;
         HEAP8[i64toi32_i32$1 >> 0] = $121;
         HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $121 >>> 8 | 0;
         HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $121 >>> 16 | 0;
         HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $121 >>> 24 | 0;
         HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
         HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
         HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
         HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
         label$16 : {
          $2 = ($6 + -4 | 0) >>> 3 | 0;
          if (($2 + 22 | 0) >>> 0 <= (HEAP32[($1 + 12 | 0) >> 2] | 0) >>> 0) {
           break label$16
          }
          HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
          simple_ogg_page__clear($1 | 0);
          break label$12;
         }
         $2 = $2 + (HEAP32[($1 + 8 | 0) >> 2] | 0) | 0;
         i64toi32_i32$0 = $20$hi;
         HEAP8[($2 + 21 | 0) >> 0] = $20;
         $184 = $2 + 20 | 0;
         i64toi32_i32$2 = $20;
         i64toi32_i32$1 = 0;
         i64toi32_i32$3 = 8;
         i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = 0;
          $122 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
         } else {
          i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
          $122 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
         }
         HEAP8[$184 >> 0] = $122;
         $188 = $2 + 19 | 0;
         i64toi32_i32$1 = $20$hi;
         i64toi32_i32$0 = $20;
         i64toi32_i32$2 = 0;
         i64toi32_i32$3 = 16;
         i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$2 = 0;
          $123 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
         } else {
          i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
          $123 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
         }
         HEAP8[$188 >> 0] = $123;
         $192 = $2 + 18 | 0;
         i64toi32_i32$2 = $20$hi;
         i64toi32_i32$1 = $20;
         i64toi32_i32$0 = 0;
         i64toi32_i32$3 = 24;
         i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$0 = 0;
          $124 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
         } else {
          i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
          $124 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
         }
         HEAP8[$192 >> 0] = $124;
         $2 = $2 + 17 | 0;
         $197 = $2;
         $200 = (HEAPU8[$2 >> 0] | 0) & 240 | 0;
         i64toi32_i32$0 = $20$hi;
         i64toi32_i32$2 = $20;
         i64toi32_i32$1 = 0;
         i64toi32_i32$3 = 32;
         i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = 0;
          $125 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
         } else {
          i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
          $125 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
         }
         HEAP8[$197 >> 0] = $200 | ($125 & 15 | 0) | 0;
         label$17 : {
          $2 = $9 >>> 3 | 0;
          if (($2 + 23 | 0) >>> 0 <= (HEAP32[($1 + 12 | 0) >> 2] | 0) >>> 0) {
           break label$17
          }
          HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
          simple_ogg_page__clear($1 | 0);
          break label$12;
         }
         $2 = $2 + (HEAP32[($1 + 8 | 0) >> 2] | 0) | 0;
         HEAP8[($2 + 22 | 0) >> 0] = $8;
         HEAP8[($2 + 21 | 0) >> 0] = $8 >>> 8 | 0;
         HEAP8[($2 + 20 | 0) >> 0] = $8 >>> 16 | 0;
         HEAP8[($2 + 19 | 0) >> 0] = $5;
         HEAP8[($2 + 18 | 0) >> 0] = $5 >>> 8 | 0;
         HEAP8[($2 + 17 | 0) >> 0] = $5 >>> 16 | 0;
         i64toi32_i32$0 = HEAP32[$0 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 608 | 0) >> 2] | 0;
         i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 612 | 0) >> 2] | 0;
         $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
         $2 = simple_ogg_page__set_at($0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$2 | 0, $1 | 0, HEAP32[($2 + 7268 | 0) >> 2] | 0 | 0, HEAP32[($2 + 7276 | 0) >> 2] | 0 | 0, HEAP32[($2 + 7288 | 0) >> 2] | 0 | 0) | 0;
         simple_ogg_page__clear($1 | 0);
         if (!$2) {
          break label$12
         }
         $2 = HEAP32[((HEAP32[$4 >> 2] | 0) + 7048 | 0) >> 2] | 0;
         if (!$2) {
          break label$12
         }
         if (!(HEAP32[$2 >> 2] | 0)) {
          break label$12
         }
         i64toi32_i32$0 = HEAP32[$0 >> 2] | 0;
         i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 616 | 0) >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 620 | 0) >> 2] | 0;
         if (!(i64toi32_i32$2 | i64toi32_i32$1 | 0)) {
          break label$12
         }
         FLAC__format_seektable_sort($2 | 0) | 0;
         simple_ogg_page__init($1 | 0);
         i64toi32_i32$0 = HEAP32[$0 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 616 | 0) >> 2] | 0;
         i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 620 | 0) >> 2] | 0;
         $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
         if (!(simple_ogg_page__get_at($0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$2 | 0, $1 | 0, HEAP32[($2 + 7268 | 0) >> 2] | 0 | 0, HEAP32[($2 + 7264 | 0) >> 2] | 0 | 0, HEAP32[($2 + 7288 | 0) >> 2] | 0 | 0) | 0)) {
          break label$14
         }
         label$18 : {
          $8 = HEAP32[$4 >> 2] | 0;
          $7 = HEAP32[($8 + 7048 | 0) >> 2] | 0;
          $2 = HEAP32[$7 >> 2] | 0;
          if ((Math_imul($2, 18) + 4 | 0 | 0) == (HEAP32[($1 + 12 | 0) >> 2] | 0 | 0)) {
           break label$18
          }
          HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
          simple_ogg_page__clear($1 | 0);
          break label$12;
         }
         label$19 : {
          if (!$2) {
           break label$19
          }
          $2 = (HEAP32[($1 + 8 | 0) >> 2] | 0) + 4 | 0;
          $6 = 0;
          label$20 : while (1) {
           $7 = (HEAP32[($7 + 4 | 0) >> 2] | 0) + Math_imul($6, 24) | 0;
           i64toi32_i32$0 = $7;
           i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
           i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
           $20 = i64toi32_i32$2;
           $20$hi = i64toi32_i32$1;
           i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
           i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
           $21 = i64toi32_i32$1;
           $21$hi = i64toi32_i32$2;
           $7 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
           HEAP8[($2 + 17 | 0) >> 0] = $7;
           HEAP8[($2 + 15 | 0) >> 0] = i64toi32_i32$1;
           i64toi32_i32$2 = $20$hi;
           HEAP8[($2 + 7 | 0) >> 0] = $20;
           HEAP8[($2 + 16 | 0) >> 0] = $7 >>> 8 | 0;
           $329 = $2;
           i64toi32_i32$2 = $21$hi;
           i64toi32_i32$0 = i64toi32_i32$1;
           i64toi32_i32$1 = 0;
           i64toi32_i32$3 = 8;
           i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$1 = 0;
            $126 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
           } else {
            i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            $126 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
           }
           HEAP8[($329 + 14 | 0) >> 0] = $126;
           $332 = $2;
           i64toi32_i32$1 = $21$hi;
           i64toi32_i32$2 = $21;
           i64toi32_i32$0 = 0;
           i64toi32_i32$3 = 16;
           i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$0 = 0;
            $127 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
           } else {
            i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
            $127 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
           }
           HEAP8[($332 + 13 | 0) >> 0] = $127;
           $335 = $2;
           i64toi32_i32$0 = $21$hi;
           i64toi32_i32$1 = $21;
           i64toi32_i32$2 = 0;
           i64toi32_i32$3 = 24;
           i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$2 = 0;
            $128 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
           } else {
            i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
            $128 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
           }
           HEAP8[($335 + 12 | 0) >> 0] = $128;
           $338 = $2;
           i64toi32_i32$2 = $21$hi;
           i64toi32_i32$0 = $21;
           i64toi32_i32$1 = 0;
           i64toi32_i32$3 = 32;
           i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$1 = 0;
            $129 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
           } else {
            i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            $129 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
           }
           HEAP8[($338 + 11 | 0) >> 0] = $129;
           $341 = $2;
           i64toi32_i32$1 = $21$hi;
           i64toi32_i32$2 = $21;
           i64toi32_i32$0 = 0;
           i64toi32_i32$3 = 40;
           i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$0 = 0;
            $130 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
           } else {
            i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
            $130 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
           }
           HEAP8[($341 + 10 | 0) >> 0] = $130;
           $344 = $2;
           i64toi32_i32$0 = $21$hi;
           i64toi32_i32$1 = $21;
           i64toi32_i32$2 = 0;
           i64toi32_i32$3 = 48;
           i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$2 = 0;
            $131 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
           } else {
            i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
            $131 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
           }
           HEAP8[($344 + 9 | 0) >> 0] = $131;
           $347 = $2;
           i64toi32_i32$2 = $21$hi;
           i64toi32_i32$0 = $21;
           i64toi32_i32$1 = 0;
           i64toi32_i32$3 = 56;
           i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$1 = 0;
            $132 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
           } else {
            i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            $132 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
           }
           HEAP8[($347 + 8 | 0) >> 0] = $132;
           $350 = $2;
           i64toi32_i32$1 = $20$hi;
           i64toi32_i32$2 = $20;
           i64toi32_i32$0 = 0;
           i64toi32_i32$3 = 8;
           i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$0 = 0;
            $133 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
           } else {
            i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
            $133 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
           }
           HEAP8[($350 + 6 | 0) >> 0] = $133;
           $353 = $2;
           i64toi32_i32$0 = $20$hi;
           i64toi32_i32$1 = $20;
           i64toi32_i32$2 = 0;
           i64toi32_i32$3 = 16;
           i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$2 = 0;
            $134 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
           } else {
            i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
            $134 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
           }
           HEAP8[($353 + 5 | 0) >> 0] = $134;
           $356 = $2;
           i64toi32_i32$2 = $20$hi;
           i64toi32_i32$0 = $20;
           i64toi32_i32$1 = 0;
           i64toi32_i32$3 = 24;
           i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$1 = 0;
            $135 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
           } else {
            i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            $135 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
           }
           HEAP8[($356 + 4 | 0) >> 0] = $135;
           $359 = $2;
           i64toi32_i32$1 = $20$hi;
           i64toi32_i32$2 = $20;
           i64toi32_i32$0 = 0;
           i64toi32_i32$3 = 32;
           i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$0 = 0;
            $136 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
           } else {
            i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
            $136 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
           }
           HEAP8[($359 + 3 | 0) >> 0] = $136;
           $362 = $2;
           i64toi32_i32$0 = $20$hi;
           i64toi32_i32$1 = $20;
           i64toi32_i32$2 = 0;
           i64toi32_i32$3 = 40;
           i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$2 = 0;
            $137 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
           } else {
            i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
            $137 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
           }
           HEAP8[($362 + 2 | 0) >> 0] = $137;
           $365 = $2;
           i64toi32_i32$2 = $20$hi;
           i64toi32_i32$0 = $20;
           i64toi32_i32$1 = 0;
           i64toi32_i32$3 = 48;
           i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$1 = 0;
            $138 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
           } else {
            i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            $138 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
           }
           HEAP8[($365 + 1 | 0) >> 0] = $138;
           $368 = $2;
           i64toi32_i32$1 = $20$hi;
           i64toi32_i32$2 = $20;
           i64toi32_i32$0 = 0;
           i64toi32_i32$3 = 56;
           i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$0 = 0;
            $139 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
           } else {
            i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
            $139 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
           }
           HEAP8[$368 >> 0] = $139;
           $2 = $2 + 18 | 0;
           $6 = $6 + 1 | 0;
           $8 = HEAP32[$4 >> 2] | 0;
           $7 = HEAP32[($8 + 7048 | 0) >> 2] | 0;
           if ($6 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
            continue label$20
           }
           break label$20;
          };
         }
         i64toi32_i32$1 = HEAP32[$0 >> 2] | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 616 | 0) >> 2] | 0;
         i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 620 | 0) >> 2] | 0;
         simple_ogg_page__set_at($0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$2 | 0, $1 | 0, HEAP32[($8 + 7268 | 0) >> 2] | 0 | 0, HEAP32[($8 + 7276 | 0) >> 2] | 0 | 0, HEAP32[($8 + 7288 | 0) >> 2] | 0 | 0) | 0;
        }
        simple_ogg_page__clear($1 | 0);
        break label$12;
       }
       $10 = HEAP32[($2 + 6912 | 0) >> 2] | 0;
       $11 = HEAP32[($2 + 6900 | 0) >> 2] | 0;
       $12 = HEAP32[($2 + 6896 | 0) >> 2] | 0;
       i64toi32_i32$1 = $2 + 6920 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
       $20 = i64toi32_i32$2;
       $20$hi = i64toi32_i32$0;
       $8 = global$15;
       $5 = global$16;
       $9 = global$17;
       $416 = $0;
       i64toi32_i32$1 = $6;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 608 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 612 | 0) >> 2] | 0;
       $418$hi = i64toi32_i32$2;
       $5 = (HEAP32[$5 >> 2] | 0) + (HEAP32[$8 >> 2] | 0) | 0;
       $8 = (((($5 + (HEAP32[$9 >> 2] | 0) | 0) + (HEAP32[global$18 >> 2] | 0) | 0) + (HEAP32[global$19 >> 2] | 0) | 0) + (HEAP32[global$20 >> 2] | 0) | 0) + (HEAP32[global$21 >> 2] | 0) | 0;
       i64toi32_i32$2 = 0;
       $446$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $418$hi;
       i64toi32_i32$1 = i64toi32_i32$0;
       i64toi32_i32$0 = $446$hi;
       i64toi32_i32$3 = (($8 + (HEAP32[global$22 >> 2] | 0) | 0) >>> 3 | 0) + 4 | 0;
       i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $6 = FUNCTION_TABLE[$7]($416, i64toi32_i32$4, i64toi32_i32$5, HEAP32[($2 + 7288 | 0) >> 2] | 0) | 0;
       if ($6 >>> 0 > 1 >>> 0) {
        break label$12
       }
       label$21 : {
        switch ($6 | 0) {
        case 1:
         HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 5;
         break label$12;
        default:
         break label$21;
        };
       }
       label$23 : {
        $459 = $2 + 6928 | 0;
        $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
        if (!(FUNCTION_TABLE[HEAP32[($2 + 7276 | 0) >> 2] | 0]($0, $459, 16, 0, 0, HEAP32[($2 + 7288 | 0) >> 2] | 0) | 0)) {
         break label$23
        }
        HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 5;
        break label$12;
       }
       i64toi32_i32$5 = $20$hi;
       HEAP8[($1 + 4 | 0) >> 0] = $20;
       $472 = $1;
       i64toi32_i32$2 = $20;
       i64toi32_i32$1 = 0;
       i64toi32_i32$3 = 8;
       i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = 0;
        $140 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
       } else {
        i64toi32_i32$1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
        $140 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
       }
       HEAP8[($472 + 3 | 0) >> 0] = $140;
       $475 = $1;
       i64toi32_i32$1 = $20$hi;
       i64toi32_i32$5 = $20;
       i64toi32_i32$2 = 0;
       i64toi32_i32$3 = 16;
       i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $141 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
        $141 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
       }
       HEAP8[($475 + 2 | 0) >> 0] = $141;
       $478 = $1;
       i64toi32_i32$2 = $20$hi;
       i64toi32_i32$1 = $20;
       i64toi32_i32$5 = 0;
       i64toi32_i32$3 = 24;
       i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$5 = 0;
        $142 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
       } else {
        i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
        $142 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
       }
       HEAP8[($478 + 1 | 0) >> 0] = $142;
       $481 = $1;
       $483 = $10 << 4 | 0;
       i64toi32_i32$5 = $20$hi;
       i64toi32_i32$2 = $20;
       i64toi32_i32$1 = 0;
       i64toi32_i32$3 = 32;
       i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = 0;
        $143 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
       } else {
        i64toi32_i32$1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
        $143 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
       }
       HEAP8[$481 >> 0] = ($483 | ($143 & 15 | 0) | 0) + 240 | 0;
       $490 = $0;
       i64toi32_i32$5 = HEAP32[$0 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 608 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 612 | 0) >> 2] | 0;
       $493$hi = i64toi32_i32$2;
       i64toi32_i32$2 = 0;
       $498$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $493$hi;
       i64toi32_i32$5 = i64toi32_i32$1;
       i64toi32_i32$1 = $498$hi;
       i64toi32_i32$3 = (($8 + -4 | 0) >>> 3 | 0) + 4 | 0;
       i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       $2 = FUNCTION_TABLE[HEAP32[($2 + 7268 | 0) >> 2] | 0]($490, i64toi32_i32$0, i64toi32_i32$4, HEAP32[($2 + 7288 | 0) >> 2] | 0) | 0;
       if ($2 >>> 0 > 1 >>> 0) {
        break label$12
       }
       label$24 : {
        switch ($2 | 0) {
        case 1:
         HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 5;
         break label$12;
        default:
         break label$24;
        };
       }
       label$26 : {
        $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
        if (!(FUNCTION_TABLE[HEAP32[($2 + 7276 | 0) >> 2] | 0]($0, $1, 5, 0, 0, HEAP32[($2 + 7288 | 0) >> 2] | 0) | 0)) {
         break label$26
        }
        HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 5;
        break label$12;
       }
       HEAP8[($1 + 5 | 0) >> 0] = $11;
       HEAP8[($1 + 4 | 0) >> 0] = $11 >>> 8 | 0;
       HEAP8[($1 + 3 | 0) >> 0] = $11 >>> 16 | 0;
       HEAP8[($1 + 2 | 0) >> 0] = $12;
       HEAP8[($1 + 1 | 0) >> 0] = $12 >>> 8 | 0;
       HEAP8[$1 >> 0] = $12 >>> 16 | 0;
       $540 = $0;
       i64toi32_i32$2 = HEAP32[$0 >> 2] | 0;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 608 | 0) >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 612 | 0) >> 2] | 0;
       $543$hi = i64toi32_i32$5;
       i64toi32_i32$5 = 0;
       $547$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $543$hi;
       i64toi32_i32$2 = i64toi32_i32$4;
       i64toi32_i32$4 = $547$hi;
       i64toi32_i32$3 = ($5 >>> 3 | 0) + 4 | 0;
       i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       $2 = FUNCTION_TABLE[HEAP32[($2 + 7268 | 0) >> 2] | 0]($540, i64toi32_i32$1, i64toi32_i32$0, HEAP32[($2 + 7288 | 0) >> 2] | 0) | 0;
       if ($2 >>> 0 > 1 >>> 0) {
        break label$12
       }
       label$27 : {
        switch ($2 | 0) {
        case 1:
         HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 5;
         break label$12;
        default:
         break label$27;
        };
       }
       label$29 : {
        $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
        if (!(FUNCTION_TABLE[HEAP32[($2 + 7276 | 0) >> 2] | 0]($0, $1, 6, 0, 0, HEAP32[($2 + 7288 | 0) >> 2] | 0) | 0)) {
         break label$29
        }
        HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 5;
        break label$12;
       }
       $2 = HEAP32[((HEAP32[$4 >> 2] | 0) + 7048 | 0) >> 2] | 0;
       if (!$2) {
        break label$12
       }
       if (!(HEAP32[$2 >> 2] | 0)) {
        break label$12
       }
       i64toi32_i32$5 = HEAP32[$0 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 616 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 620 | 0) >> 2] | 0;
       if (!(i64toi32_i32$0 | i64toi32_i32$2 | 0)) {
        break label$12
       }
       FLAC__format_seektable_sort($2 | 0) | 0;
       $587 = $0;
       i64toi32_i32$5 = HEAP32[$0 >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 616 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 620 | 0) >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$2;
       i64toi32_i32$2 = 0;
       i64toi32_i32$3 = 4;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       $2 = FUNCTION_TABLE[HEAP32[($2 + 7268 | 0) >> 2] | 0]($587, i64toi32_i32$4, i64toi32_i32$1, HEAP32[($2 + 7288 | 0) >> 2] | 0) | 0;
       if ($2 >>> 0 > 1 >>> 0) {
        break label$12
       }
       label$30 : {
        label$31 : {
         switch ($2 | 0) {
         default:
          $6 = HEAP32[$4 >> 2] | 0;
          $2 = HEAP32[($6 + 7048 | 0) >> 2] | 0;
          if (!(HEAP32[$2 >> 2] | 0)) {
           break label$12
          }
          $8 = 0;
          break label$30;
         case 1:
          break label$31;
         };
        }
        HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 5;
        break label$12;
       }
       label$33 : {
        label$34 : while (1) {
         $611 = $1;
         $7 = Math_imul($8, 24);
         i64toi32_i32$0 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + $7 | 0;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
         i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
         $20 = i64toi32_i32$1;
         $20$hi = i64toi32_i32$5;
         i64toi32_i32$0 = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         i64toi32_i32$3 = 56;
         i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
          $144 = 0;
         } else {
          i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
          $144 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
         }
         $620 = $144;
         $620$hi = i64toi32_i32$1;
         i64toi32_i32$1 = $20$hi;
         i64toi32_i32$5 = $20;
         i64toi32_i32$0 = 0;
         i64toi32_i32$3 = 40;
         i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
          $145 = 0;
         } else {
          i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
          $145 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
         }
         i64toi32_i32$1 = $145;
         i64toi32_i32$5 = 16711680;
         i64toi32_i32$3 = 0;
         i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
         $623 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
         $623$hi = i64toi32_i32$5;
         i64toi32_i32$5 = $620$hi;
         i64toi32_i32$0 = $620;
         i64toi32_i32$1 = $623$hi;
         i64toi32_i32$3 = $623;
         i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
         $624 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
         $624$hi = i64toi32_i32$1;
         i64toi32_i32$1 = $20$hi;
         i64toi32_i32$5 = $20;
         i64toi32_i32$0 = 0;
         i64toi32_i32$3 = 24;
         i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
          $146 = 0;
         } else {
          i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
          $146 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
         }
         i64toi32_i32$1 = $146;
         i64toi32_i32$5 = 65280;
         i64toi32_i32$3 = 0;
         i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
         $627 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
         $627$hi = i64toi32_i32$5;
         i64toi32_i32$5 = $20$hi;
         i64toi32_i32$0 = $20;
         i64toi32_i32$1 = 0;
         i64toi32_i32$3 = 8;
         i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
          $147 = 0;
         } else {
          i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
          $147 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
         }
         i64toi32_i32$5 = $147;
         i64toi32_i32$0 = 255;
         i64toi32_i32$3 = 0;
         i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
         $630 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
         $630$hi = i64toi32_i32$0;
         i64toi32_i32$0 = $627$hi;
         i64toi32_i32$1 = $627;
         i64toi32_i32$5 = $630$hi;
         i64toi32_i32$3 = $630;
         i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
         $631 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
         $631$hi = i64toi32_i32$5;
         i64toi32_i32$5 = $624$hi;
         i64toi32_i32$0 = $624;
         i64toi32_i32$1 = $631$hi;
         i64toi32_i32$3 = $631;
         i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
         $632 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
         $632$hi = i64toi32_i32$1;
         i64toi32_i32$1 = $20$hi;
         i64toi32_i32$5 = $20;
         i64toi32_i32$0 = 0;
         i64toi32_i32$3 = 8;
         i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$0 = 0;
          $148 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
         } else {
          i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
          $148 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$2 | 0) | 0;
         }
         i64toi32_i32$1 = $148;
         i64toi32_i32$5 = 0;
         i64toi32_i32$3 = -16777216;
         i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
         $635 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
         $635$hi = i64toi32_i32$5;
         i64toi32_i32$5 = $20$hi;
         i64toi32_i32$0 = $20;
         i64toi32_i32$1 = 0;
         i64toi32_i32$3 = 24;
         i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = 0;
          $149 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
         } else {
          i64toi32_i32$1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
          $149 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
         }
         i64toi32_i32$5 = $149;
         i64toi32_i32$0 = 0;
         i64toi32_i32$3 = 16711680;
         i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
         $638 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
         $638$hi = i64toi32_i32$0;
         i64toi32_i32$0 = $635$hi;
         i64toi32_i32$1 = $635;
         i64toi32_i32$5 = $638$hi;
         i64toi32_i32$3 = $638;
         i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
         $639 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
         $639$hi = i64toi32_i32$5;
         i64toi32_i32$5 = $20$hi;
         i64toi32_i32$0 = $20;
         i64toi32_i32$1 = 0;
         i64toi32_i32$3 = 40;
         i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = 0;
          $150 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
         } else {
          i64toi32_i32$1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
          $150 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
         }
         i64toi32_i32$5 = $150;
         i64toi32_i32$0 = 0;
         i64toi32_i32$3 = 65280;
         i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
         $642 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
         $642$hi = i64toi32_i32$0;
         i64toi32_i32$0 = $20$hi;
         i64toi32_i32$1 = $20;
         i64toi32_i32$5 = 0;
         i64toi32_i32$3 = 56;
         i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$5 = 0;
          $151 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
         } else {
          i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
          $151 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
         }
         $644$hi = i64toi32_i32$5;
         i64toi32_i32$5 = $642$hi;
         i64toi32_i32$0 = $642;
         i64toi32_i32$1 = $644$hi;
         i64toi32_i32$3 = $151;
         i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
         $645 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
         $645$hi = i64toi32_i32$1;
         i64toi32_i32$1 = $639$hi;
         i64toi32_i32$5 = $639;
         i64toi32_i32$0 = $645$hi;
         i64toi32_i32$3 = $645;
         i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
         $646 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
         $646$hi = i64toi32_i32$0;
         i64toi32_i32$0 = $632$hi;
         i64toi32_i32$1 = $632;
         i64toi32_i32$5 = $646$hi;
         i64toi32_i32$3 = $646;
         i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
         $647 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
         i64toi32_i32$1 = $611;
         HEAP32[i64toi32_i32$1 >> 2] = $647;
         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$5;
         $648 = $1;
         i64toi32_i32$0 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + $7 | 0;
         i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
         $20 = i64toi32_i32$5;
         $20$hi = i64toi32_i32$1;
         i64toi32_i32$0 = i64toi32_i32$5;
         i64toi32_i32$5 = 0;
         i64toi32_i32$3 = 56;
         i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
          $152 = 0;
         } else {
          i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
          $152 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
         }
         $655 = $152;
         $655$hi = i64toi32_i32$5;
         i64toi32_i32$5 = $20$hi;
         i64toi32_i32$1 = $20;
         i64toi32_i32$0 = 0;
         i64toi32_i32$3 = 40;
         i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
          $153 = 0;
         } else {
          i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
          $153 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
         }
         i64toi32_i32$5 = $153;
         i64toi32_i32$1 = 16711680;
         i64toi32_i32$3 = 0;
         i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
         $658 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
         $658$hi = i64toi32_i32$1;
         i64toi32_i32$1 = $655$hi;
         i64toi32_i32$0 = $655;
         i64toi32_i32$5 = $658$hi;
         i64toi32_i32$3 = $658;
         i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
         $659 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
         $659$hi = i64toi32_i32$5;
         i64toi32_i32$5 = $20$hi;
         i64toi32_i32$1 = $20;
         i64toi32_i32$0 = 0;
         i64toi32_i32$3 = 24;
         i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
          $154 = 0;
         } else {
          i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
          $154 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
         }
         i64toi32_i32$5 = $154;
         i64toi32_i32$1 = 65280;
         i64toi32_i32$3 = 0;
         i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
         $662 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
         $662$hi = i64toi32_i32$1;
         i64toi32_i32$1 = $20$hi;
         i64toi32_i32$0 = $20;
         i64toi32_i32$5 = 0;
         i64toi32_i32$3 = 8;
         i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
          $155 = 0;
         } else {
          i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
          $155 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
         }
         i64toi32_i32$1 = $155;
         i64toi32_i32$0 = 255;
         i64toi32_i32$3 = 0;
         i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
         $665 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
         $665$hi = i64toi32_i32$0;
         i64toi32_i32$0 = $662$hi;
         i64toi32_i32$5 = $662;
         i64toi32_i32$1 = $665$hi;
         i64toi32_i32$3 = $665;
         i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
         $666 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
         $666$hi = i64toi32_i32$1;
         i64toi32_i32$1 = $659$hi;
         i64toi32_i32$0 = $659;
         i64toi32_i32$5 = $666$hi;
         i64toi32_i32$3 = $666;
         i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
         $667 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
         $667$hi = i64toi32_i32$5;
         i64toi32_i32$5 = $20$hi;
         i64toi32_i32$1 = $20;
         i64toi32_i32$0 = 0;
         i64toi32_i32$3 = 8;
         i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$0 = 0;
          $156 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
         } else {
          i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
          $156 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
         }
         i64toi32_i32$5 = $156;
         i64toi32_i32$1 = 0;
         i64toi32_i32$3 = -16777216;
         i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
         $670 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
         $670$hi = i64toi32_i32$1;
         i64toi32_i32$1 = $20$hi;
         i64toi32_i32$0 = $20;
         i64toi32_i32$5 = 0;
         i64toi32_i32$3 = 24;
         i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$5 = 0;
          $157 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
         } else {
          i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
          $157 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
         }
         i64toi32_i32$1 = $157;
         i64toi32_i32$0 = 0;
         i64toi32_i32$3 = 16711680;
         i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
         $673 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
         $673$hi = i64toi32_i32$0;
         i64toi32_i32$0 = $670$hi;
         i64toi32_i32$5 = $670;
         i64toi32_i32$1 = $673$hi;
         i64toi32_i32$3 = $673;
         i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
         $674 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
         $674$hi = i64toi32_i32$1;
         i64toi32_i32$1 = $20$hi;
         i64toi32_i32$0 = $20;
         i64toi32_i32$5 = 0;
         i64toi32_i32$3 = 40;
         i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$5 = 0;
          $158 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
         } else {
          i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
          $158 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
         }
         i64toi32_i32$1 = $158;
         i64toi32_i32$0 = 0;
         i64toi32_i32$3 = 65280;
         i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
         $677 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
         $677$hi = i64toi32_i32$0;
         i64toi32_i32$0 = $20$hi;
         i64toi32_i32$5 = $20;
         i64toi32_i32$1 = 0;
         i64toi32_i32$3 = 56;
         i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = 0;
          $160 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
         } else {
          i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
          $160 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$2 | 0) | 0;
         }
         $679$hi = i64toi32_i32$1;
         i64toi32_i32$1 = $677$hi;
         i64toi32_i32$0 = $677;
         i64toi32_i32$5 = $679$hi;
         i64toi32_i32$3 = $160;
         i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
         $680 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
         $680$hi = i64toi32_i32$5;
         i64toi32_i32$5 = $674$hi;
         i64toi32_i32$1 = $674;
         i64toi32_i32$0 = $680$hi;
         i64toi32_i32$3 = $680;
         i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
         $681 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
         $681$hi = i64toi32_i32$0;
         i64toi32_i32$0 = $667$hi;
         i64toi32_i32$5 = $667;
         i64toi32_i32$1 = $681$hi;
         i64toi32_i32$3 = $681;
         i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
         $682 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
         i64toi32_i32$5 = $648;
         HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $682;
         HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$1;
         $2 = HEAPU16[(((HEAP32[($2 + 4 | 0) >> 2] | 0) + $7 | 0) + 16 | 0) >> 1] | 0;
         HEAP16[($1 + 16 | 0) >> 1] = ($2 << 24 | 0 | (($2 << 8 | 0) & 16711680 | 0) | 0) >>> 16 | 0;
         if (FUNCTION_TABLE[HEAP32[($6 + 7276 | 0) >> 2] | 0]($0, $1, 18, 0, 0, HEAP32[($6 + 7288 | 0) >> 2] | 0) | 0) {
          break label$33
         }
         $8 = $8 + 1 | 0;
         $6 = HEAP32[$4 >> 2] | 0;
         $2 = HEAP32[($6 + 7048 | 0) >> 2] | 0;
         if ($8 >>> 0 >= (HEAP32[$2 >> 2] | 0) >>> 0) {
          break label$12
         }
         continue label$34;
        };
       }
       HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 5;
      }
      $6 = HEAP32[$0 >> 2] | 0;
      $3 = HEAP32[$6 >> 2] | 0 ? 1 : $3;
      $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     }
     $7 = HEAP32[($2 + 7280 | 0) >> 2] | 0;
     if (!$7) {
      break label$10
     }
     FUNCTION_TABLE[$7]($0, $2 + 6872 | 0, HEAP32[($2 + 7288 | 0) >> 2] | 0);
     $6 = HEAP32[$0 >> 2] | 0;
    }
    label$35 : {
     if (HEAP32[($6 + 4 | 0) >> 2] | 0) {
      break label$35
     }
     $5 = $3;
     break label$8;
    }
    label$36 : {
     $2 = HEAP32[((HEAP32[$4 >> 2] | 0) + 11752 | 0) >> 2] | 0;
     if ($2) {
      break label$36
     }
     $5 = $3;
     break label$8;
    }
    label$37 : {
     if (!(FLAC__stream_decoder_finish($2 | 0) | 0)) {
      break label$37
     }
     $5 = $3;
     break label$8;
    }
    $5 = 1;
    if ($3) {
     break label$8
    }
    HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 4;
   }
   label$38 : {
    $2 = HEAP32[$4 >> 2] | 0;
    $3 = HEAP32[($2 + 7296 | 0) >> 2] | 0;
    if (!$3) {
     break label$38
    }
    label$39 : {
     if (($3 | 0) == (HEAP32[global$76 >> 2] | 0 | 0)) {
      break label$39
     }
     fclose($3 | 0) | 0;
     $2 = HEAP32[$4 >> 2] | 0;
    }
    HEAP32[($2 + 7296 | 0) >> 2] = 0;
   }
   label$40 : {
    if (!(HEAP32[($2 + 7260 | 0) >> 2] | 0)) {
     break label$40
    }
    FLAC__ogg_encoder_aspect_finish((HEAP32[$0 >> 2] | 0) + 632 | 0 | 0);
   }
   label$41 : {
    $2 = HEAP32[$0 >> 2] | 0;
    $3 = HEAP32[($2 + 600 | 0) >> 2] | 0;
    if (!$3) {
     break label$41
    }
    dlfree($3 | 0);
    $2 = HEAP32[$0 >> 2] | 0;
    i64toi32_i32$5 = $2;
    i64toi32_i32$1 = 0;
    HEAP32[($2 + 600 | 0) >> 2] = 0;
    HEAP32[($2 + 604 | 0) >> 2] = i64toi32_i32$1;
   }
   label$42 : {
    if (!(HEAP32[($2 + 24 | 0) >> 2] | 0)) {
     break label$42
    }
    $3 = 0;
    label$43 : while (1) {
     label$44 : {
      $6 = HEAP32[$4 >> 2] | 0;
      $2 = $3 << 2 | 0;
      $7 = HEAP32[(($6 + $2 | 0) + 7328 | 0) >> 2] | 0;
      if (!$7) {
       break label$44
      }
      dlfree($7 | 0);
      HEAP32[(((HEAP32[$4 >> 2] | 0) + $2 | 0) + 7328 | 0) >> 2] = 0;
      $6 = HEAP32[$4 >> 2] | 0;
     }
     label$45 : {
      $6 = HEAP32[(($6 + $2 | 0) + 7368 | 0) >> 2] | 0;
      if (!$6) {
       break label$45
      }
      dlfree($6 | 0);
      HEAP32[(((HEAP32[$4 >> 2] | 0) + $2 | 0) + 7368 | 0) >> 2] = 0;
     }
     $3 = $3 + 1 | 0;
     if ($3 >>> 0 < (HEAP32[((HEAP32[$0 >> 2] | 0) + 24 | 0) >> 2] | 0) >>> 0) {
      continue label$43
     }
     break label$43;
    };
   }
   label$46 : {
    $2 = HEAP32[$4 >> 2] | 0;
    $3 = HEAP32[($2 + 7360 | 0) >> 2] | 0;
    if (!$3) {
     break label$46
    }
    dlfree($3 | 0);
    HEAP32[((HEAP32[$4 >> 2] | 0) + 7360 | 0) >> 2] = 0;
    $2 = HEAP32[$4 >> 2] | 0;
   }
   label$47 : {
    $3 = HEAP32[($2 + 7400 | 0) >> 2] | 0;
    if (!$3) {
     break label$47
    }
    dlfree($3 | 0);
    HEAP32[((HEAP32[$4 >> 2] | 0) + 7400 | 0) >> 2] = 0;
    $2 = HEAP32[$4 >> 2] | 0;
   }
   label$48 : {
    $3 = HEAP32[($2 + 7364 | 0) >> 2] | 0;
    if (!$3) {
     break label$48
    }
    dlfree($3 | 0);
    HEAP32[((HEAP32[$4 >> 2] | 0) + 7364 | 0) >> 2] = 0;
    $2 = HEAP32[$4 >> 2] | 0;
   }
   label$49 : {
    $3 = HEAP32[($2 + 7404 | 0) >> 2] | 0;
    if (!$3) {
     break label$49
    }
    dlfree($3 | 0);
    HEAP32[((HEAP32[$4 >> 2] | 0) + 7404 | 0) >> 2] = 0;
    $2 = HEAP32[$4 >> 2] | 0;
   }
   label$50 : {
    $6 = HEAP32[$0 >> 2] | 0;
    if (!(HEAP32[($6 + 40 | 0) >> 2] | 0)) {
     break label$50
    }
    $3 = 0;
    label$51 : while (1) {
     label$52 : {
      $7 = $3 << 2 | 0;
      $8 = HEAP32[(($2 + $7 | 0) + 7408 | 0) >> 2] | 0;
      if (!$8) {
       break label$52
      }
      dlfree($8 | 0);
      HEAP32[(((HEAP32[($0 + 4 | 0) >> 2] | 0) + $7 | 0) + 7408 | 0) >> 2] = 0;
      $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      $6 = HEAP32[$0 >> 2] | 0;
     }
     $3 = $3 + 1 | 0;
     if ($3 >>> 0 < (HEAP32[($6 + 40 | 0) >> 2] | 0) >>> 0) {
      continue label$51
     }
     break label$51;
    };
   }
   label$53 : {
    $3 = HEAP32[($2 + 7536 | 0) >> 2] | 0;
    if (!$3) {
     break label$53
    }
    dlfree($3 | 0);
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    HEAP32[($2 + 7536 | 0) >> 2] = 0;
    $6 = HEAP32[$0 >> 2] | 0;
   }
   label$54 : {
    if (!(HEAP32[($6 + 24 | 0) >> 2] | 0)) {
     break label$54
    }
    $6 = 0;
    label$55 : while (1) {
     label$56 : {
      $3 = $6 << 3 | 0;
      $7 = HEAP32[(($2 + $3 | 0) + 7540 | 0) >> 2] | 0;
      if (!$7) {
       break label$56
      }
      dlfree($7 | 0);
      HEAP32[(((HEAP32[$4 >> 2] | 0) + $3 | 0) + 7540 | 0) >> 2] = 0;
      $2 = HEAP32[$4 >> 2] | 0;
     }
     label$57 : {
      $7 = HEAP32[(($2 + $3 | 0) + 7544 | 0) >> 2] | 0;
      if (!$7) {
       break label$57
      }
      dlfree($7 | 0);
      HEAP32[(((HEAP32[$4 >> 2] | 0) + $3 | 0) + 7544 | 0) >> 2] = 0;
      $2 = HEAP32[$4 >> 2] | 0;
     }
     $6 = $6 + 1 | 0;
     if ($6 >>> 0 < (HEAP32[((HEAP32[$0 >> 2] | 0) + 24 | 0) >> 2] | 0) >>> 0) {
      continue label$55
     }
     break label$55;
    };
   }
   label$58 : {
    $3 = HEAP32[($2 + 7604 | 0) >> 2] | 0;
    if (!$3) {
     break label$58
    }
    dlfree($3 | 0);
    HEAP32[((HEAP32[$4 >> 2] | 0) + 7604 | 0) >> 2] = 0;
    $2 = HEAP32[$4 >> 2] | 0;
   }
   label$59 : {
    $3 = HEAP32[($2 + 7608 | 0) >> 2] | 0;
    if (!$3) {
     break label$59
    }
    dlfree($3 | 0);
    HEAP32[((HEAP32[$4 >> 2] | 0) + 7608 | 0) >> 2] = 0;
    $2 = HEAP32[$4 >> 2] | 0;
   }
   label$60 : {
    $3 = HEAP32[($2 + 7612 | 0) >> 2] | 0;
    if (!$3) {
     break label$60
    }
    dlfree($3 | 0);
    HEAP32[((HEAP32[$4 >> 2] | 0) + 7612 | 0) >> 2] = 0;
    $2 = HEAP32[$4 >> 2] | 0;
   }
   label$61 : {
    $3 = HEAP32[($2 + 7616 | 0) >> 2] | 0;
    if (!$3) {
     break label$61
    }
    dlfree($3 | 0);
    HEAP32[((HEAP32[$4 >> 2] | 0) + 7616 | 0) >> 2] = 0;
    $2 = HEAP32[$4 >> 2] | 0;
   }
   label$62 : {
    $3 = HEAP32[($2 + 7620 | 0) >> 2] | 0;
    if (!$3) {
     break label$62
    }
    dlfree($3 | 0);
    $2 = HEAP32[$4 >> 2] | 0;
    HEAP32[($2 + 7620 | 0) >> 2] = 0;
   }
   label$63 : {
    $3 = HEAP32[($2 + 7624 | 0) >> 2] | 0;
    if (!$3) {
     break label$63
    }
    dlfree($3 | 0);
    $2 = HEAP32[$4 >> 2] | 0;
    HEAP32[($2 + 7624 | 0) >> 2] = 0;
   }
   label$64 : {
    $3 = HEAP32[$0 >> 2] | 0;
    if (!(HEAP32[($3 + 4 | 0) >> 2] | 0)) {
     break label$64
    }
    if (!(HEAP32[($3 + 24 | 0) >> 2] | 0)) {
     break label$64
    }
    $4 = 0;
    label$65 : while (1) {
     label$66 : {
      $6 = $4 << 2 | 0;
      $7 = HEAP32[(($2 + $6 | 0) + 11764 | 0) >> 2] | 0;
      if (!$7) {
       break label$66
      }
      dlfree($7 | 0);
      HEAP32[(((HEAP32[($0 + 4 | 0) >> 2] | 0) + $6 | 0) + 11764 | 0) >> 2] = 0;
      $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      $3 = HEAP32[$0 >> 2] | 0;
     }
     $4 = $4 + 1 | 0;
     if ($4 >>> 0 < (HEAP32[($3 + 24 | 0) >> 2] | 0) >>> 0) {
      continue label$65
     }
     break label$65;
    };
   }
   FLAC__bitwriter_free(HEAP32[($2 + 6856 | 0) >> 2] | 0 | 0);
   $2 = HEAP32[$0 >> 2] | 0;
   i64toi32_i32$5 = $2;
   i64toi32_i32$1 = 1056964608;
   HEAP32[($2 + 44 | 0) >> 2] = 13;
   HEAP32[($2 + 48 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$5 = $2;
   i64toi32_i32$1 = 1;
   HEAP32[($2 + 36 | 0) >> 2] = 0;
   HEAP32[($2 + 40 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$5 = $2;
   i64toi32_i32$1 = 44100;
   HEAP32[($2 + 28 | 0) >> 2] = 16;
   HEAP32[($2 + 32 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$5 = $2;
   i64toi32_i32$1 = 2;
   HEAP32[($2 + 20 | 0) >> 2] = 0;
   HEAP32[($2 + 24 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$5 = $2;
   i64toi32_i32$1 = 0;
   HEAP32[($2 + 12 | 0) >> 2] = 1;
   HEAP32[($2 + 16 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$5 = $2;
   i64toi32_i32$1 = 1;
   HEAP32[($2 + 4 | 0) >> 2] = 0;
   HEAP32[($2 + 8 | 0) >> 2] = i64toi32_i32$1;
   $2 = HEAP32[$0 >> 2] | 0;
   i64toi32_i32$5 = $2;
   i64toi32_i32$1 = 0;
   HEAP32[($2 + 592 | 0) >> 2] = 0;
   HEAP32[($2 + 596 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$5 = $2;
   i64toi32_i32$1 = 0;
   HEAP32[($2 + 556 | 0) >> 2] = 0;
   HEAP32[($2 + 560 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$5 = $2 + 564 | 0;
   i64toi32_i32$1 = 0;
   HEAP32[i64toi32_i32$5 >> 2] = 0;
   HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$5 = $2 + 572 | 0;
   i64toi32_i32$1 = 0;
   HEAP32[i64toi32_i32$5 >> 2] = 0;
   HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$5 = $2 + 580 | 0;
   i64toi32_i32$1 = 0;
   HEAP32[i64toi32_i32$5 >> 2] = 0;
   HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$5 = $2 + 600 | 0;
   i64toi32_i32$1 = 0;
   HEAP32[i64toi32_i32$5 >> 2] = 0;
   HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
   $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$5 = $4;
   i64toi32_i32$1 = 0;
   HEAP32[(i64toi32_i32$5 + 7248 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$5 + 7252 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[(i64toi32_i32$5 + 7048 | 0) >> 2] = 0;
   i64toi32_i32$5 = i64toi32_i32$5 + 7256 | 0;
   i64toi32_i32$1 = 0;
   HEAP32[i64toi32_i32$5 >> 2] = 0;
   HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$5 = $4 + 7264 | 0;
   i64toi32_i32$1 = 0;
   HEAP32[i64toi32_i32$5 >> 2] = 0;
   HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$5 = $4 + 7272 | 0;
   i64toi32_i32$1 = 0;
   HEAP32[i64toi32_i32$5 >> 2] = 0;
   HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$5 = $4 + 7280 | 0;
   i64toi32_i32$1 = 0;
   HEAP32[i64toi32_i32$5 >> 2] = 0;
   HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($4 + 7288 | 0) >> 2] = 0;
   FLAC__ogg_encoder_aspect_set_defaults($2 + 632 | 0 | 0);
   label$67 : {
    $2 = HEAP32[$0 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0 | 0) != (1 | 0)) {
     break label$67
    }
    i64toi32_i32$5 = $2;
    i64toi32_i32$1 = 0;
    HEAP32[($2 + 16 | 0) >> 2] = 1;
    HEAP32[($2 + 20 | 0) >> 2] = i64toi32_i32$1;
    FLAC__stream_encoder_set_apodization($0 | 0, global$1 + 10761 | 0 | 0) | 0;
    $2 = HEAP32[$0 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0 | 0) != (1 | 0)) {
     break label$67
    }
    i64toi32_i32$5 = $2;
    i64toi32_i32$1 = 5;
    HEAP32[($2 + 576 | 0) >> 2] = 0;
    HEAP32[($2 + 580 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$5 = $2;
    i64toi32_i32$1 = 0;
    HEAP32[($2 + 564 | 0) >> 2] = 0;
    HEAP32[($2 + 568 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$5 = $2;
    i64toi32_i32$1 = 0;
    HEAP32[($2 + 556 | 0) >> 2] = 8;
    HEAP32[($2 + 560 | 0) >> 2] = i64toi32_i32$1;
   }
   label$68 : {
    if ($5) {
     break label$68
    }
    HEAP32[$2 >> 2] = 1;
   }
   $2 = !$5;
  }
  label$69 : {
   $19 = $1 + 32 | 0;
   if ($19 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $19;
  }
  return $2 | 0;
 }
 
 function process_frame_($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $15 = 0, $9 = 0, $4 = 0, $10 = 0, $3 = 0, $14 = 0, $11 = 0, $12 = 0, i64toi32_i32$2 = 0, $8 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $7 = 0, $13 = 0, i64toi32_i32$5 = 0, $6 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $17 = 0, $16 = 0, $696 = 0, $698 = 0, $698$hi = 0, $701 = 0, $701$hi = 0;
  label$1 : {
   $3 = global$0 - 48 | 0;
   $16 = $3;
   if ($3 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $16;
  }
  label$3 : {
   label$4 : {
    $4 = HEAP32[$0 >> 2] | 0;
    if (!(HEAP32[($4 + 12 | 0) >> 2] | 0)) {
     break label$4
    }
    $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    $5 = FLAC__MD5Accumulate($5 + 7060 | 0 | 0, $5 + 4 | 0 | 0, HEAP32[($4 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4 + 36 | 0) >> 2] | 0 | 0, ((HEAP32[($4 + 28 | 0) >> 2] | 0) + 7 | 0) >>> 3 | 0 | 0) | 0;
    $4 = HEAP32[$0 >> 2] | 0;
    if ($5) {
     break label$4
    }
    HEAP32[$4 >> 2] = 8;
    $1 = 0;
    break label$3;
   }
   $6 = HEAP32[($4 + 576 | 0) >> 2] | 0;
   $7 = 0;
   label$5 : {
    label$6 : {
     if (!$1) {
      break label$6
     }
     $8 = 0;
     break label$5;
    }
    $1 = FLAC__format_get_max_rice_partition_order_from_blocksize(HEAP32[($4 + 36 | 0) >> 2] | 0 | 0) | 0;
    $4 = HEAP32[$0 >> 2] | 0;
    $5 = HEAP32[($4 + 580 | 0) >> 2] | 0;
    $8 = $1 >>> 0 < $5 >>> 0 ? $1 : $5;
   }
   $9 = HEAP32[($4 + 36 | 0) >> 2] | 0;
   HEAP32[($3 + 8 | 0) >> 2] = $9;
   HEAP32[($3 + 12 | 0) >> 2] = HEAP32[($4 + 32 | 0) >> 2] | 0;
   $1 = HEAP32[($4 + 24 | 0) >> 2] | 0;
   HEAP32[($3 + 20 | 0) >> 2] = 0;
   HEAP32[($3 + 16 | 0) >> 2] = $1;
   $1 = HEAP32[($4 + 28 | 0) >> 2] | 0;
   HEAP32[($3 + 28 | 0) >> 2] = 0;
   HEAP32[($3 + 24 | 0) >> 2] = $1;
   $10 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($3 + 32 | 0) >> 2] = HEAP32[($10 + 7056 | 0) >> 2] | 0;
   label$7 : {
    label$8 : {
     if (!(HEAP32[($4 + 16 | 0) >> 2] | 0)) {
      break label$8
     }
     $7 = 1;
     if (!(HEAP32[($4 + 20 | 0) >> 2] | 0)) {
      break label$8
     }
     if (!(HEAP32[($10 + 6864 | 0) >> 2] | 0)) {
      break label$8
     }
     $11 = 0;
     $1 = HEAP32[($10 + 6868 | 0) >> 2] | 0;
     $7 = ($1 | 0) != (0 | 0);
     if ($1) {
      break label$7
     }
    }
    label$9 : {
     if (HEAP32[($4 + 24 | 0) >> 2] | 0) {
      break label$9
     }
     $11 = 1;
     break label$7;
    }
    $12 = 0;
    label$10 : while (1) {
     $13 = $10 + ($12 << 2 | 0) | 0;
     $1 = 0;
     label$11 : {
      label$12 : {
       if ($9) {
        break label$12
       }
       $14 = 0;
       break label$11;
      }
      $11 = HEAP32[($13 + 4 | 0) >> 2] | 0;
      $5 = 0;
      label$13 : {
       label$14 : while (1) {
        $1 = HEAP32[($11 + ($5 << 2 | 0) | 0) >> 2] | 0 | $1 | 0;
        $15 = $1 & 1 | 0;
        $5 = $5 + 1 | 0;
        if ($5 >>> 0 >= $9 >>> 0) {
         break label$13
        }
        if (!$15) {
         continue label$14
        }
        break label$14;
       };
      }
      $5 = 0;
      label$15 : {
       if ($1) {
        break label$15
       }
       $14 = 0;
       break label$11;
      }
      $14 = 0;
      if ($15) {
       break label$11
      }
      label$16 : while (1) {
       $5 = $5 + 1 | 0;
       $15 = $1 & 2 | 0;
       $1 = $1 >> 1 | 0;
       if (!$15) {
        continue label$16
       }
       break label$16;
      };
      $14 = 0;
      if (!$5) {
       break label$11
      }
      label$17 : while (1) {
       $1 = $11 + ($14 << 2 | 0) | 0;
       HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) >> $5 | 0;
       $14 = $14 + 1 | 0;
       if (($14 | 0) != ($9 | 0)) {
        continue label$17
       }
       break label$17;
      };
      $14 = $5;
     }
     $15 = $10 + Math_imul($12, 584) | 0;
     $1 = HEAP32[($4 + 28 | 0) >> 2] | 0;
     $5 = $14 >>> 0 > $1 >>> 0 ? $1 : $14;
     HEAP32[($15 + 624 | 0) >> 2] = $5;
     HEAP32[($15 + 916 | 0) >> 2] = $5;
     HEAP32[($13 + 216 | 0) >> 2] = $1 - $5 | 0;
     $11 = 1;
     $12 = $12 + 1 | 0;
     if ($12 >>> 0 >= (HEAP32[($4 + 24 | 0) >> 2] | 0) >>> 0) {
      break label$7
     }
     $9 = HEAP32[($4 + 36 | 0) >> 2] | 0;
     continue label$10;
    };
   }
   $13 = $6 >>> 0 < $8 >>> 0;
   label$18 : {
    if (!$7) {
     break label$18
    }
    $1 = 0;
    $15 = 0;
    label$19 : {
     $14 = HEAP32[($4 + 36 | 0) >> 2] | 0;
     if (!$14) {
      break label$19
     }
     $12 = HEAP32[($10 + 36 | 0) >> 2] | 0;
     $5 = 0;
     $15 = 0;
     label$20 : {
      label$21 : while (1) {
       $5 = HEAP32[($12 + ($15 << 2 | 0) | 0) >> 2] | 0 | $5 | 0;
       $9 = $5 & 1 | 0;
       $15 = $15 + 1 | 0;
       if ($15 >>> 0 >= $14 >>> 0) {
        break label$20
       }
       if (!$9) {
        continue label$21
       }
       break label$21;
      };
     }
     $15 = 0;
     if (!$5) {
      break label$19
     }
     if ($9) {
      break label$19
     }
     label$22 : while (1) {
      $15 = $15 + 1 | 0;
      $9 = $5 & 2 | 0;
      $5 = $5 >> 1 | 0;
      if (!$9) {
       continue label$22
      }
      break label$22;
     };
     $5 = 0;
     label$23 : {
      if ($15) {
       break label$23
      }
      $15 = 0;
      break label$19;
     }
     label$24 : while (1) {
      $9 = $12 + ($5 << 2 | 0) | 0;
      HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) >> $15 | 0;
      $5 = $5 + 1 | 0;
      if (($5 | 0) != ($14 | 0)) {
       continue label$24
      }
      break label$24;
     };
    }
    $5 = HEAP32[($4 + 28 | 0) >> 2] | 0;
    $15 = $15 >>> 0 > $5 >>> 0 ? $5 : $15;
    HEAP32[($10 + 5296 | 0) >> 2] = $15;
    HEAP32[($10 + 5588 | 0) >> 2] = $15;
    HEAP32[($10 + 248 | 0) >> 2] = $5 - $15 | 0;
    label$25 : {
     $9 = HEAP32[($4 + 36 | 0) >> 2] | 0;
     if (!$9) {
      break label$25
     }
     $14 = HEAP32[($10 + 40 | 0) >> 2] | 0;
     $5 = 0;
     label$26 : {
      label$27 : while (1) {
       $1 = HEAP32[($14 + ($5 << 2 | 0) | 0) >> 2] | 0 | $1 | 0;
       $15 = $1 & 1 | 0;
       $5 = $5 + 1 | 0;
       if ($5 >>> 0 >= $9 >>> 0) {
        break label$26
       }
       if (!$15) {
        continue label$27
       }
       break label$27;
      };
     }
     $5 = 0;
     label$28 : {
      if ($1) {
       break label$28
      }
      $1 = 0;
      break label$25;
     }
     label$29 : {
      if (!$15) {
       break label$29
      }
      $1 = 0;
      break label$25;
     }
     label$30 : while (1) {
      $5 = $5 + 1 | 0;
      $15 = $1 & 2 | 0;
      $1 = $1 >> 1 | 0;
      if (!$15) {
       continue label$30
      }
      break label$30;
     };
     $1 = 0;
     if (!$5) {
      break label$25
     }
     label$31 : while (1) {
      $15 = $14 + ($1 << 2 | 0) | 0;
      HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) >> $5 | 0;
      $1 = $1 + 1 | 0;
      if (($1 | 0) != ($9 | 0)) {
       continue label$31
      }
      break label$31;
     };
     $1 = $5;
    }
    $5 = HEAP32[($4 + 28 | 0) >> 2] | 0;
    $1 = $1 >>> 0 > $5 >>> 0 ? $5 : $1;
    HEAP32[($10 + 5880 | 0) >> 2] = $1;
    HEAP32[($10 + 6172 | 0) >> 2] = $1;
    HEAP32[($10 + 252 | 0) >> 2] = ($5 - $1 | 0) + 1 | 0;
   }
   $9 = $13 ? $6 : $8;
   label$32 : {
    if (!$11) {
     break label$32
    }
    if (!(HEAP32[($4 + 24 | 0) >> 2] | 0)) {
     break label$32
    }
    $1 = 0;
    label$33 : while (1) {
     $5 = $10 + ($1 << 2 | 0) | 0;
     $15 = $10 + ($1 << 3 | 0) | 0;
     process_subframe_($0 | 0, $9 | 0, $8 | 0, $3 + 8 | 0 | 0, HEAP32[($5 + 216 | 0) >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0, $15 + 6176 | 0 | 0, $15 + 6640 | 0 | 0, $15 + 256 | 0 | 0, $5 + 6768 | 0 | 0, $5 + 6808 | 0 | 0);
     $10 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     $1 = $1 + 1 | 0;
     if ($1 >>> 0 < (HEAP32[((HEAP32[$0 >> 2] | 0) + 24 | 0) >> 2] | 0) >>> 0) {
      continue label$33
     }
     break label$33;
    };
   }
   label$34 : {
    label$35 : {
     label$36 : {
      if (!$7) {
       break label$36
      }
      process_subframe_($0 | 0, $9 | 0, $8 | 0, $3 + 8 | 0 | 0, HEAP32[($10 + 248 | 0) >> 2] | 0 | 0, HEAP32[($10 + 36 | 0) >> 2] | 0 | 0, $10 + 6240 | 0 | 0, $10 + 6704 | 0 | 0, $10 + 320 | 0 | 0, $10 + 6800 | 0 | 0, $10 + 6840 | 0 | 0);
      $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      process_subframe_($0 | 0, $9 | 0, $8 | 0, $3 + 8 | 0 | 0, HEAP32[($1 + 252 | 0) >> 2] | 0 | 0, HEAP32[($1 + 40 | 0) >> 2] | 0 | 0, $1 + 6248 | 0 | 0, $1 + 6712 | 0 | 0, $1 + 328 | 0 | 0, $1 + 6804 | 0 | 0, $1 + 6844 | 0 | 0);
      $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      label$37 : {
       label$38 : {
        if (!(HEAP32[((HEAP32[$0 >> 2] | 0) + 20 | 0) >> 2] | 0)) {
         break label$38
        }
        if (!(HEAP32[($1 + 6864 | 0) >> 2] | 0)) {
         break label$38
        }
        $5 = HEAP32[($1 + 6868 | 0) >> 2] | 0 ? 3 : 0;
        break label$37;
       }
       $5 = HEAP32[($1 + 6844 | 0) >> 2] | 0;
       $15 = HEAP32[($1 + 6808 | 0) >> 2] | 0;
       $9 = $5 + $15 | 0;
       $11 = HEAP32[($1 + 6812 | 0) >> 2] | 0;
       $15 = $11 + $15 | 0;
       $14 = $9 >>> 0 < $15 >>> 0;
       $11 = $5 + $11 | 0;
       $15 = $14 ? $9 : $15;
       $9 = $11 >>> 0 < $15 >>> 0;
       $5 = ((HEAP32[($1 + 6840 | 0) >> 2] | 0) + $5 | 0) >>> 0 < ($9 ? $11 : $15) >>> 0 ? 3 : $9 ? 2 : $14;
      }
      HEAP32[($3 + 20 | 0) >> 2] = $5;
      label$39 : {
       if (FLAC__frame_add_header($3 + 8 | 0 | 0, HEAP32[($1 + 6856 | 0) >> 2] | 0 | 0) | 0) {
        break label$39
       }
       HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 7;
       $1 = 0;
       break label$3;
      }
      label$40 : {
       label$41 : {
        label$42 : {
         label$43 : {
          label$44 : {
           label$45 : {
            if ($5 >>> 0 > 3 >>> 0) {
             break label$45
            }
            switch ($5 | 0) {
            case 3:
             break label$41;
            case 2:
             break label$42;
            case 1:
             break label$43;
            default:
             break label$44;
            };
           }
           $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
           $9 = 0;
           $5 = 0;
           $15 = 0;
           $11 = 0;
           break label$40;
          }
          $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
          $15 = $1 + 336 | 0;
          $5 = $15 + Math_imul(HEAP32[($1 + 6768 | 0) >> 2] | 0, 292) | 0;
          $9 = ($15 + Math_imul(HEAP32[($1 + 6772 | 0) >> 2] | 0, 292) | 0) + 584 | 0;
          $11 = HEAP32[($1 + 220 | 0) >> 2] | 0;
          $15 = HEAP32[($1 + 216 | 0) >> 2] | 0;
          break label$40;
         }
         $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
         $5 = ($1 + Math_imul(HEAP32[($1 + 6768 | 0) >> 2] | 0, 292) | 0) + 336 | 0;
         $9 = ($1 + Math_imul(HEAP32[($1 + 6804 | 0) >> 2] | 0, 292) | 0) + 5592 | 0;
         $11 = HEAP32[($1 + 252 | 0) >> 2] | 0;
         $15 = HEAP32[($1 + 216 | 0) >> 2] | 0;
         break label$40;
        }
        $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
        $9 = ($1 + Math_imul(HEAP32[($1 + 6772 | 0) >> 2] | 0, 292) | 0) + 920 | 0;
        $5 = ($1 + Math_imul(HEAP32[($1 + 6804 | 0) >> 2] | 0, 292) | 0) + 5592 | 0;
        $11 = HEAP32[($1 + 220 | 0) >> 2] | 0;
        $15 = HEAP32[($1 + 252 | 0) >> 2] | 0;
        break label$40;
       }
       $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       $15 = $1 + 5008 | 0;
       $5 = $15 + Math_imul(HEAP32[($1 + 6800 | 0) >> 2] | 0, 292) | 0;
       $9 = ($15 + Math_imul(HEAP32[($1 + 6804 | 0) >> 2] | 0, 292) | 0) + 584 | 0;
       $11 = HEAP32[($1 + 252 | 0) >> 2] | 0;
       $15 = HEAP32[($1 + 248 | 0) >> 2] | 0;
      }
      if (!(add_subframe_($0 | 0, HEAP32[($3 + 8 | 0) >> 2] | 0 | 0, $15 | 0, $5 | 0, HEAP32[($1 + 6856 | 0) >> 2] | 0 | 0) | 0)) {
       break label$35
      }
      if (!(add_subframe_($0 | 0, HEAP32[($3 + 8 | 0) >> 2] | 0 | 0, $11 | 0, $9 | 0, HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6856 | 0) >> 2] | 0 | 0) | 0)) {
       break label$35
      }
      $5 = HEAP32[$0 >> 2] | 0;
      break label$34;
     }
     $1 = FLAC__frame_add_header($3 + 8 | 0 | 0, HEAP32[($10 + 6856 | 0) >> 2] | 0 | 0) | 0;
     $5 = HEAP32[$0 >> 2] | 0;
     label$46 : {
      if (!$1) {
       break label$46
      }
      if (!(HEAP32[($5 + 24 | 0) >> 2] | 0)) {
       break label$34
      }
      $1 = 0;
      label$47 : while (1) {
       $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       $15 = $5 + ($1 << 2 | 0) | 0;
       if (!(add_subframe_($0 | 0, HEAP32[($3 + 8 | 0) >> 2] | 0 | 0, HEAP32[($15 + 216 | 0) >> 2] | 0 | 0, (($5 + Math_imul($1, 584) | 0) + Math_imul(HEAP32[($15 + 6768 | 0) >> 2] | 0, 292) | 0) + 336 | 0 | 0, HEAP32[($5 + 6856 | 0) >> 2] | 0 | 0) | 0)) {
        break label$35
       }
       $1 = $1 + 1 | 0;
       $5 = HEAP32[$0 >> 2] | 0;
       if ($1 >>> 0 >= (HEAP32[($5 + 24 | 0) >> 2] | 0) >>> 0) {
        break label$34
       }
       continue label$47;
      };
     }
     HEAP32[$5 >> 2] = 7;
    }
    $1 = 0;
    break label$3;
   }
   label$48 : {
    if (!(HEAP32[($5 + 20 | 0) >> 2] | 0)) {
     break label$48
    }
    $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    $5 = (HEAP32[($1 + 6864 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($1 + 6864 | 0) >> 2] = $5 >>> 0 < (HEAP32[($1 + 6860 | 0) >> 2] | 0) >>> 0 ? $5 : 0;
   }
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6868 | 0) >> 2] = HEAP32[($3 + 20 | 0) >> 2] | 0;
   label$49 : {
    if (FLAC__bitwriter_zero_pad_to_byte_boundary(HEAP32[($1 + 6856 | 0) >> 2] | 0 | 0) | 0) {
     break label$49
    }
    HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
    $1 = 0;
    break label$3;
   }
   label$50 : {
    label$51 : {
     if (!(FLAC__bitwriter_get_write_crc16(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6856 | 0) >> 2] | 0 | 0, $3 + 8 | 0 | 0) | 0)) {
      break label$51
     }
     $1 = HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6856 | 0) >> 2] | 0;
     $5 = global$52;
     if (FLAC__bitwriter_write_raw_uint32($1 | 0, HEAPU16[($3 + 8 | 0) >> 1] | 0 | 0, HEAP32[$5 >> 2] | 0 | 0) | 0) {
      break label$50
     }
    }
    HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
    $1 = 0;
    break label$3;
   }
   label$52 : {
    if (write_bitbuffer_($0 | 0, HEAP32[((HEAP32[$0 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0, $2 | 0) | 0) {
     break label$52
    }
    $1 = 0;
    break label$3;
   }
   $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($5 + 7052 | 0) >> 2] = 0;
   $1 = 1;
   HEAP32[($5 + 7056 | 0) >> 2] = (HEAP32[($5 + 7056 | 0) >> 2] | 0) + 1 | 0;
   $5 = $5 + 6920 | 0;
   $696 = $5;
   i64toi32_i32$2 = $5;
   i64toi32_i32$0 = HEAP32[$5 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($5 + 4 | 0) >> 2] | 0;
   $698 = i64toi32_i32$0;
   $698$hi = i64toi32_i32$1;
   i64toi32_i32$2 = HEAP32[$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
   i64toi32_i32$0 = 0;
   $701 = i64toi32_i32$1;
   $701$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $698$hi;
   i64toi32_i32$2 = $698;
   i64toi32_i32$1 = $701$hi;
   i64toi32_i32$3 = $701;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   i64toi32_i32$2 = $696;
   HEAP32[i64toi32_i32$2 >> 2] = i64toi32_i32$4;
   HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  }
  label$53 : {
   $17 = $3 + 48 | 0;
   if ($17 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $17;
  }
  return $1 | 0;
 }
 
 function FLAC__stream_encoder_init_stream($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  return init_stream_internal__1($0 | 0, 0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, 0 | 0) | 0 | 0;
 }
 
 function init_stream_internal__1($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $9 = 0, $10 = 0, $11 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $12 = 0, $13 = 0, $18 = 0, $16 = 0, $8 = 0, $21 = 0.0, $14 = 0, $15 = 0, $17 = 0, i64toi32_i32$2 = 0, $20 = 0, $19 = 0, $193 = 0, $1156 = 0;
  label$1 : {
   $8 = global$0 - 176 | 0;
   $19 = $8;
   if ($8 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $19;
  }
  $9 = 13;
  label$3 : {
   $10 = HEAP32[$0 >> 2] | 0;
   if ((HEAP32[$10 >> 2] | 0 | 0) != (1 | 0)) {
    break label$3
   }
   $9 = 3;
   if (!$2) {
    break label$3
   }
   label$4 : {
    if (!$3) {
     break label$4
    }
    if (!$4) {
     break label$3
    }
   }
   $9 = 4;
   $11 = HEAP32[($10 + 24 | 0) >> 2] | 0;
   if (($11 + -1 | 0) >>> 0 > 7 >>> 0) {
    break label$3
   }
   label$5 : {
    label$6 : {
     label$7 : {
      if (($11 | 0) == (2 | 0)) {
       break label$7
      }
      HEAP32[($10 + 16 | 0) >> 2] = 0;
      break label$6;
     }
     if (HEAP32[($10 + 16 | 0) >> 2] | 0) {
      break label$5
     }
    }
    HEAP32[($10 + 20 | 0) >> 2] = 0;
   }
   label$8 : {
    $11 = HEAP32[($10 + 28 | 0) >> 2] | 0;
    if ($11 >>> 0 < 32 >>> 0) {
     break label$8
    }
    HEAP32[($10 + 16 | 0) >> 2] = 0;
    $9 = 5;
    break label$3;
   }
   $9 = 5;
   if (($11 + -4 | 0) >>> 0 > 20 >>> 0) {
    break label$3
   }
   label$9 : {
    if (FLAC__format_sample_rate_is_valid(HEAP32[($10 + 32 | 0) >> 2] | 0 | 0) | 0) {
     break label$9
    }
    $9 = 6;
    break label$3;
   }
   label$10 : {
    label$11 : {
     $10 = HEAP32[$0 >> 2] | 0;
     $11 = HEAP32[($10 + 36 | 0) >> 2] | 0;
     if ($11) {
      break label$11
     }
     $11 = HEAP32[($10 + 556 | 0) >> 2] | 0 ? 4096 : 1152;
     HEAP32[($10 + 36 | 0) >> 2] = $11;
     break label$10;
    }
    $9 = 7;
    if (($11 + -16 | 0) >>> 0 > 65519 >>> 0) {
     break label$3
    }
   }
   $9 = 8;
   $12 = HEAP32[($10 + 556 | 0) >> 2] | 0;
   if ($12 >>> 0 > 32 >>> 0) {
    break label$3
   }
   $9 = 10;
   if ($11 >>> 0 < $12 >>> 0) {
    break label$3
   }
   label$12 : {
    label$13 : {
     $12 = HEAP32[($10 + 560 | 0) >> 2] | 0;
     if ($12) {
      break label$13
     }
     label$14 : {
      label$15 : {
       $9 = HEAP32[($10 + 28 | 0) >> 2] | 0;
       if ($9 >>> 0 > 15 >>> 0) {
        break label$15
       }
       $9 = $9 >>> 0 > 5 >>> 0 ? ($9 >>> 1 | 0) + 2 | 0 : 5;
       break label$14;
      }
      label$16 : {
       if (($9 | 0) != (16 | 0)) {
        break label$16
       }
       $9 = 7;
       if ($11 >>> 0 < 193 >>> 0) {
        break label$14
       }
       $9 = 8;
       if ($11 >>> 0 < 385 >>> 0) {
        break label$14
       }
       $9 = 9;
       if ($11 >>> 0 < 577 >>> 0) {
        break label$14
       }
       $9 = 10;
       if ($11 >>> 0 < 1153 >>> 0) {
        break label$14
       }
       $9 = 11;
       if ($11 >>> 0 < 2305 >>> 0) {
        break label$14
       }
       $9 = $11 >>> 0 < 4609 >>> 0 ? 12 : 13;
       break label$14;
      }
      $9 = 13;
      if ($11 >>> 0 < 385 >>> 0) {
       break label$14
      }
      $9 = $11 >>> 0 < 1153 >>> 0 ? 14 : 15;
     }
     HEAP32[($10 + 560 | 0) >> 2] = $9;
     break label$12;
    }
    $9 = 9;
    if (($12 + -5 | 0) >>> 0 > 10 >>> 0) {
     break label$3
    }
   }
   label$17 : {
    label$18 : {
     if (HEAP32[($10 + 8 | 0) >> 2] | 0) {
      break label$18
     }
     $11 = HEAP32[($10 + 580 | 0) >> 2] | 0;
     break label$17;
    }
    $9 = 11;
    if (!(FLAC__format_blocksize_is_subset($11 | 0, HEAP32[($10 + 32 | 0) >> 2] | 0 | 0) | 0)) {
     break label$3
    }
    if (!(FLAC__format_sample_rate_is_subset(HEAP32[((HEAP32[$0 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0) | 0)) {
     break label$3
    }
    $10 = HEAP32[$0 >> 2] | 0;
    if ((__wasm_rotl_i32((HEAP32[($10 + 28 | 0) >> 2] | 0) + -8 | 0 | 0, 30 | 0) | 0) >>> 0 > 4 >>> 0) {
     break label$3
    }
    $11 = HEAP32[($10 + 580 | 0) >> 2] | 0;
    if ($11 >>> 0 > 8 >>> 0) {
     break label$3
    }
    if ((HEAP32[($10 + 32 | 0) >> 2] | 0) >>> 0 > 48e3 >>> 0) {
     break label$17
    }
    if ((HEAP32[($10 + 36 | 0) >> 2] | 0) >>> 0 > 4608 >>> 0) {
     break label$3
    }
    if ((HEAP32[($10 + 556 | 0) >> 2] | 0) >>> 0 > 12 >>> 0) {
     break label$3
    }
   }
   label$19 : {
    $9 = 1 << (HEAP32[global$50 >> 2] | 0) | 0;
    if ($11 >>> 0 < $9 >>> 0) {
     break label$19
    }
    $11 = $9 + -1 | 0;
    HEAP32[($10 + 580 | 0) >> 2] = $11;
   }
   label$20 : {
    if ((HEAP32[($10 + 576 | 0) >> 2] | 0) >>> 0 < $11 >>> 0) {
     break label$20
    }
    HEAP32[($10 + 576 | 0) >> 2] = $11;
   }
   label$21 : {
    if (!$7) {
     break label$21
    }
    $11 = HEAP32[($10 + 600 | 0) >> 2] | 0;
    if (!$11) {
     break label$21
    }
    $13 = HEAP32[($10 + 604 | 0) >> 2] | 0;
    if ($13 >>> 0 < 2 >>> 0) {
     break label$21
    }
    $9 = 1;
    label$22 : while (1) {
     label$23 : {
      $12 = HEAP32[($11 + ($9 << 2 | 0) | 0) >> 2] | 0;
      if (!$12) {
       break label$23
      }
      if ((HEAP32[$12 >> 2] | 0 | 0) != (4 | 0)) {
       break label$23
      }
      label$24 : while (1) {
       $193 = $11 + ($9 << 2 | 0) | 0;
       $9 = $9 + -1 | 0;
       HEAP32[$193 >> 2] = HEAP32[($11 + ($9 << 2 | 0) | 0) >> 2] | 0;
       $11 = HEAP32[((HEAP32[$0 >> 2] | 0) + 600 | 0) >> 2] | 0;
       if ($9) {
        continue label$24
       }
       break label$24;
      };
      HEAP32[$11 >> 2] = $12;
      $10 = HEAP32[$0 >> 2] | 0;
      break label$21;
     }
     $9 = $9 + 1 | 0;
     if (($9 | 0) != ($13 | 0)) {
      continue label$22
     }
     break label$22;
    };
   }
   $11 = HEAP32[($10 + 604 | 0) >> 2] | 0;
   label$25 : {
    label$26 : {
     label$27 : {
      $9 = HEAP32[($10 + 600 | 0) >> 2] | 0;
      if (!$9) {
       break label$27
      }
      $12 = 0;
      if (!$11) {
       break label$25
      }
      label$28 : while (1) {
       label$29 : {
        $10 = HEAP32[($9 + ($12 << 2 | 0) | 0) >> 2] | 0;
        if (!$10) {
         break label$29
        }
        if ((HEAP32[$10 >> 2] | 0 | 0) != (3 | 0)) {
         break label$29
        }
        HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 7048 | 0) >> 2] = $10 + 16 | 0;
        break label$26;
       }
       $12 = $12 + 1 | 0;
       if (($12 | 0) != ($11 | 0)) {
        continue label$28
       }
       break label$26;
      };
     }
     $9 = 12;
     if ($11) {
      break label$3
     }
     $12 = 0;
     break label$25;
    }
    $11 = 0;
    $10 = 0;
    $14 = 0;
    $13 = 0;
    $15 = 0;
    label$30 : while (1) {
     label$31 : {
      label$32 : {
       $16 = HEAP32[($9 + ($11 << 2 | 0) | 0) >> 2] | 0;
       $17 = HEAP32[$16 >> 2] | 0;
       if ($17 >>> 0 > 6 >>> 0) {
        break label$32
       }
       $9 = 12;
       $12 = $13;
       $18 = $10;
       label$33 : {
        switch ($17 | 0) {
        case 3:
         if ($15) {
          break label$3
         }
         $15 = 1;
         $12 = $13;
         $18 = $10;
         if (FLAC__format_seektable_is_legal($16 + 16 | 0 | 0) | 0) {
          break label$31
         }
         break label$3;
        case 4:
         $12 = 1;
         $18 = $10;
         if (!$13) {
          break label$31
         }
         break label$3;
        case 5:
         $12 = $13;
         $18 = $10;
         if (FLAC__format_cuesheet_is_legal($16 + 16 | 0 | 0, HEAP32[($16 + 160 | 0) >> 2] | 0 | 0, 0 | 0) | 0) {
          break label$31
         }
         break label$3;
        case 1:
        case 2:
         break label$31;
        case 6:
         break label$33;
        default:
         break label$3;
        };
       }
       $12 = $16 + 16 | 0;
       if (!(FLAC__format_picture_is_legal($12 | 0, 0 | 0) | 0)) {
        break label$3
       }
       $12 = (HEAP32[$12 >> 2] | 0) + -1 | 0;
       if ($12 >>> 0 > 1 >>> 0) {
        break label$32
       }
       label$37 : {
        switch ($12 | 0) {
        default:
         if ($14) {
          break label$3
         }
         $12 = global$1;
         label$39 : {
          $18 = HEAP32[($16 + 20 | 0) >> 2] | 0;
          if (!(strcmp($18 | 0, $12 + 10747 | 0 | 0) | 0)) {
           break label$39
          }
          if (strcmp($18 | 0, global$1 + 10757 | 0 | 0) | 0) {
           break label$3
          }
         }
         if ((HEAP32[($16 + 28 | 0) >> 2] | 0 | 0) != (32 | 0)) {
          break label$3
         }
         $14 = 1;
         $12 = $13;
         $18 = $10;
         if ((HEAP32[($16 + 32 | 0) >> 2] | 0 | 0) == (32 | 0)) {
          break label$31
         }
         break label$3;
        case 1:
         break label$37;
        };
       }
       $18 = 1;
       $12 = $13;
       if ($10) {
        break label$3
       }
       break label$31;
      }
      $12 = $13;
      $18 = $10;
     }
     $11 = $11 + 1 | 0;
     $10 = HEAP32[$0 >> 2] | 0;
     if ($11 >>> 0 >= (HEAP32[($10 + 604 | 0) >> 2] | 0) >>> 0) {
      break label$25
     }
     $9 = HEAP32[($10 + 600 | 0) >> 2] | 0;
     $10 = $18;
     $13 = $12;
     continue label$30;
    };
   }
   $11 = 0;
   $13 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[$13 >> 2] = 0;
   label$40 : {
    if (!(HEAP32[($10 + 24 | 0) >> 2] | 0)) {
     break label$40
    }
    label$41 : while (1) {
     $9 = $11 << 2 | 0;
     HEAP32[(($13 + $9 | 0) + 4 | 0) >> 2] = 0;
     HEAP32[(((HEAP32[($0 + 4 | 0) >> 2] | 0) + $9 | 0) + 7328 | 0) >> 2] = 0;
     HEAP32[(((HEAP32[($0 + 4 | 0) >> 2] | 0) + $9 | 0) + 44 | 0) >> 2] = 0;
     HEAP32[(((HEAP32[($0 + 4 | 0) >> 2] | 0) + $9 | 0) + 7368 | 0) >> 2] = 0;
     $13 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     $11 = $11 + 1 | 0;
     if ($11 >>> 0 < (HEAP32[((HEAP32[$0 >> 2] | 0) + 24 | 0) >> 2] | 0) >>> 0) {
      continue label$41
     }
     break label$41;
    };
   }
   $10 = 0;
   HEAP32[($13 + 36 | 0) >> 2] = 0;
   HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 7360 | 0) >> 2] = 0;
   HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 76 | 0) >> 2] = 0;
   HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 7400 | 0) >> 2] = 0;
   HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 40 | 0) >> 2] = 0;
   HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 7364 | 0) >> 2] = 0;
   HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 80 | 0) >> 2] = 0;
   HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 7404 | 0) >> 2] = 0;
   $9 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   label$42 : {
    $11 = HEAP32[$0 >> 2] | 0;
    if (!(HEAP32[($11 + 40 | 0) >> 2] | 0)) {
     break label$42
    }
    label$43 : while (1) {
     $11 = $10 << 2 | 0;
     HEAP32[(($9 + $11 | 0) + 84 | 0) >> 2] = 0;
     HEAP32[(((HEAP32[($0 + 4 | 0) >> 2] | 0) + $11 | 0) + 7408 | 0) >> 2] = 0;
     $9 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     $10 = $10 + 1 | 0;
     $11 = HEAP32[$0 >> 2] | 0;
     if ($10 >>> 0 < (HEAP32[($11 + 40 | 0) >> 2] | 0) >>> 0) {
      continue label$43
     }
     break label$43;
    };
   }
   $10 = 0;
   HEAP32[($9 + 7536 | 0) >> 2] = 0;
   HEAP32[($9 + 212 | 0) >> 2] = 0;
   label$44 : {
    if (!(HEAP32[($11 + 24 | 0) >> 2] | 0)) {
     break label$44
    }
    label$45 : while (1) {
     $11 = $10 << 3 | 0;
     HEAP32[(($9 + $11 | 0) + 256 | 0) >> 2] = 0;
     HEAP32[(((HEAP32[($0 + 4 | 0) >> 2] | 0) + $11 | 0) + 7540 | 0) >> 2] = 0;
     HEAP32[(((HEAP32[($0 + 4 | 0) >> 2] | 0) + $11 | 0) + 260 | 0) >> 2] = 0;
     HEAP32[(((HEAP32[($0 + 4 | 0) >> 2] | 0) + $11 | 0) + 7544 | 0) >> 2] = 0;
     $9 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     HEAP32[(($9 + ($10 << 2 | 0) | 0) + 6768 | 0) >> 2] = 0;
     $10 = $10 + 1 | 0;
     if ($10 >>> 0 < (HEAP32[((HEAP32[$0 >> 2] | 0) + 24 | 0) >> 2] | 0) >>> 0) {
      continue label$45
     }
     break label$45;
    };
   }
   HEAP32[($9 + 320 | 0) >> 2] = 0;
   HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 7604 | 0) >> 2] = 0;
   HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 324 | 0) >> 2] = 0;
   HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 7608 | 0) >> 2] = 0;
   $9 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($9 + 6800 | 0) >> 2] = 0;
   HEAP32[($9 + 328 | 0) >> 2] = 0;
   HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 7612 | 0) >> 2] = 0;
   HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 332 | 0) >> 2] = 0;
   HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 7616 | 0) >> 2] = 0;
   $9 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$1 = $9;
   i64toi32_i32$0 = 0;
   HEAP32[($9 + 7620 | 0) >> 2] = 0;
   HEAP32[($9 + 7624 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $9;
   i64toi32_i32$0 = 0;
   HEAP32[($9 + 6848 | 0) >> 2] = 0;
   HEAP32[($9 + 6852 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($9 + 6804 | 0) >> 2] = 0;
   $10 = HEAP32[$0 >> 2] | 0;
   $11 = HEAP32[($10 + 36 | 0) >> 2] | 0;
   $10 = HEAP32[($10 + 32 | 0) >> 2] | 0;
   i64toi32_i32$1 = $9;
   i64toi32_i32$0 = 0;
   HEAP32[($9 + 7052 | 0) >> 2] = 0;
   HEAP32[($9 + 7056 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($9 + 6864 | 0) >> 2] = 0;
   label$46 : {
    label$47 : {
     $21 = +($10 >>> 0) * .4 / +($11 >>> 0) + .5;
     if (!($21 < 4294967296.0 & $21 >= 0.0 | 0)) {
      break label$47
     }
     $10 = ~~$21 >>> 0;
     break label$46;
    }
    $10 = 0;
   }
   HEAP32[($9 + 6860 | 0) >> 2] = $10 ? $10 : 1;
   FLAC__cpu_info($9 + 7156 | 0 | 0);
   $9 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   $10 = global$77;
   HEAP32[($9 + 7244 | 0) >> 2] = $10;
   HEAP32[($9 + 7240 | 0) >> 2] = global$78;
   HEAP32[($9 + 7236 | 0) >> 2] = $10;
   HEAP32[($9 + 7228 | 0) >> 2] = global$79;
   HEAP32[($9 + 7224 | 0) >> 2] = global$80;
   HEAP32[($9 + 7220 | 0) >> 2] = global$2 + 15 | 0;
   HEAP32[($9 + 7232 | 0) >> 2] = global$81;
   $11 = HEAP32[$0 >> 2] | 0;
   HEAP32[$11 >> 2] = 0;
   HEAP32[($9 + 7260 | 0) >> 2] = $7;
   label$48 : {
    label$49 : {
     label$50 : {
      if (!$7) {
       break label$50
      }
      if (!(FLAC__ogg_encoder_aspect_init($11 + 632 | 0 | 0) | 0)) {
       break label$49
      }
      $11 = HEAP32[$0 >> 2] | 0;
      $9 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     }
     $10 = $0 + 4 | 0;
     HEAP32[($9 + 7276 | 0) >> 2] = $2;
     HEAP32[($9 + 7264 | 0) >> 2] = $1;
     HEAP32[($9 + 7288 | 0) >> 2] = $6;
     HEAP32[($9 + 7280 | 0) >> 2] = $5;
     HEAP32[($9 + 7272 | 0) >> 2] = $4;
     HEAP32[($9 + 7268 | 0) >> 2] = $3;
     $7 = HEAP32[($11 + 36 | 0) >> 2] | 0;
     if ((HEAP32[$9 >> 2] | 0) >>> 0 >= $7 >>> 0) {
      break label$48
     }
     $1 = $7 + 5 | 0;
     label$51 : {
      label$52 : {
       label$53 : {
        if (!(HEAP32[($11 + 24 | 0) >> 2] | 0)) {
         break label$53
        }
        $2 = 0;
        label$54 : while (1) {
         $9 = $2 << 2 | 0;
         $3 = (HEAP32[$10 >> 2] | 0) + $9 | 0;
         $3 = FLAC__memory_alloc_aligned_int32_array($1 | 0, $3 + 7328 | 0 | 0, $3 + 4 | 0 | 0) | 0;
         $4 = HEAP32[(((HEAP32[$10 >> 2] | 0) + $9 | 0) + 4 | 0) >> 2] | 0;
         i64toi32_i32$1 = $4;
         i64toi32_i32$0 = 0;
         HEAP32[i64toi32_i32$1 >> 2] = 0;
         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
         i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
         i64toi32_i32$0 = 0;
         HEAP32[i64toi32_i32$1 >> 2] = 0;
         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
         $9 = ((HEAP32[$10 >> 2] | 0) + $9 | 0) + 4 | 0;
         HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + 16 | 0;
         if (!$3) {
          break label$52
         }
         $2 = $2 + 1 | 0;
         if ($2 >>> 0 < (HEAP32[((HEAP32[$0 >> 2] | 0) + 24 | 0) >> 2] | 0) >>> 0) {
          continue label$54
         }
         break label$54;
        };
       }
       $9 = HEAP32[$10 >> 2] | 0;
       $9 = FLAC__memory_alloc_aligned_int32_array($1 | 0, $9 + 7360 | 0 | 0, $9 + 36 | 0 | 0) | 0;
       $2 = HEAP32[((HEAP32[$10 >> 2] | 0) + 36 | 0) >> 2] | 0;
       i64toi32_i32$1 = $2;
       i64toi32_i32$0 = 0;
       HEAP32[$2 >> 2] = 0;
       HEAP32[($2 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 8 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       $2 = HEAP32[$10 >> 2] | 0;
       HEAP32[($2 + 36 | 0) >> 2] = (HEAP32[($2 + 36 | 0) >> 2] | 0) + 16 | 0;
       label$55 : {
        label$56 : {
         if ($9) {
          break label$56
         }
         $9 = ($9 | 0) != (0 | 0);
         break label$55;
        }
        $9 = HEAP32[$10 >> 2] | 0;
        $9 = FLAC__memory_alloc_aligned_int32_array($1 | 0, $9 + 7364 | 0 | 0, $9 + 40 | 0 | 0) | 0;
        $2 = HEAP32[((HEAP32[$10 >> 2] | 0) + 40 | 0) >> 2] | 0;
        i64toi32_i32$1 = $2;
        i64toi32_i32$0 = 0;
        HEAP32[$2 >> 2] = 0;
        HEAP32[($2 + 4 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$1 = $2 + 8 | 0;
        i64toi32_i32$0 = 0;
        HEAP32[i64toi32_i32$1 >> 2] = 0;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        $2 = (HEAP32[$10 >> 2] | 0) + 40 | 0;
        HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 16 | 0;
        $9 = ($9 | 0) != (0 | 0);
       }
       if (!$9) {
        break label$52
       }
       label$57 : {
        $9 = HEAP32[$0 >> 2] | 0;
        if (!(HEAP32[($9 + 556 | 0) >> 2] | 0)) {
         break label$57
        }
        $2 = HEAP32[$10 >> 2] | 0;
        label$58 : {
         if (!(HEAP32[($9 + 40 | 0) >> 2] | 0)) {
          break label$58
         }
         $9 = 0;
         label$59 : while (1) {
          $2 = $2 + ($9 << 2 | 0) | 0;
          if (!(FLAC__memory_alloc_aligned_real_array($7 | 0, $2 + 7408 | 0 | 0, $2 + 84 | 0 | 0) | 0)) {
           break label$52
          }
          $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
          $9 = $9 + 1 | 0;
          if ($9 >>> 0 < (HEAP32[((HEAP32[$0 >> 2] | 0) + 40 | 0) >> 2] | 0) >>> 0) {
           continue label$59
          }
          break label$59;
         };
        }
        if (!(FLAC__memory_alloc_aligned_real_array($7 | 0, $2 + 7536 | 0 | 0, $2 + 212 | 0 | 0) | 0)) {
         break label$52
        }
       }
       $2 = 0;
       $9 = 0;
       label$60 : while (1) {
        label$61 : {
         if ($9 >>> 0 < (HEAP32[((HEAP32[$0 >> 2] | 0) + 24 | 0) >> 2] | 0) >>> 0) {
          break label$61
         }
         label$62 : while (1) {
          label$63 : {
           label$64 : {
            $3 = $2 << 3 | 0;
            $9 = (HEAP32[$10 >> 2] | 0) + $3 | 0;
            $9 = FLAC__memory_alloc_aligned_int32_array($7 | 0, $9 + 7604 | 0 | 0, $9 + 320 | 0 | 0) | 0;
            if ($9) {
             break label$64
            }
            $9 = ($9 | 0) != (0 | 0);
            break label$63;
           }
           $9 = (HEAP32[$10 >> 2] | 0) + $3 | 0;
           $9 = (FLAC__memory_alloc_aligned_int32_array($7 | 0, $9 + 7608 | 0 | 0, $9 + 324 | 0 | 0) | 0 | 0) != (0 | 0);
          }
          label$65 : {
           if ($2) {
            break label$65
           }
           $2 = 1;
           if ($9) {
            continue label$62
           }
          }
          break label$62;
         };
         if (!$9) {
          break label$52
         }
         $3 = $7 << 1 | 0;
         $9 = HEAP32[($0 + 4 | 0) >> 2] | 0;
         $2 = FLAC__memory_alloc_aligned_uint64_array($3 | 0, $9 + 7620 | 0 | 0, $9 + 6848 | 0 | 0) | 0;
         label$66 : {
          label$67 : {
           $9 = HEAP32[$0 >> 2] | 0;
           $4 = HEAP32[($9 + 572 | 0) >> 2] | 0;
           if (!$4) {
            break label$67
           }
           if (!$2) {
            break label$67
           }
           $9 = HEAP32[$10 >> 2] | 0;
           if (FLAC__memory_alloc_aligned_unsigned_array($3 | 0, $9 + 7624 | 0 | 0, $9 + 6852 | 0 | 0) | 0) {
            break label$66
           }
           break label$52;
          }
          if (!$2) {
           break label$51
          }
          if ($4) {
           break label$51
          }
         }
         label$68 : {
          $9 = HEAP32[$10 >> 2] | 0;
          if ((HEAP32[$9 >> 2] | 0 | 0) == ($7 | 0)) {
           break label$68
          }
          $2 = HEAP32[$0 >> 2] | 0;
          if (!(HEAP32[($2 + 556 | 0) >> 2] | 0)) {
           break label$68
          }
          if (!(HEAP32[($2 + 40 | 0) >> 2] | 0)) {
           break label$68
          }
          $9 = 0;
          label$69 : while (1) {
           label$70 : {
            label$71 : {
             $3 = $2 + ($9 << 4 | 0) | 0;
             $2 = HEAP32[($3 + 44 | 0) >> 2] | 0;
             if ($2 >>> 0 > 16 >>> 0) {
              break label$71
             }
             label$72 : {
              switch ($2 | 0) {
              default:
               FLAC__window_bartlett(HEAP32[(((HEAP32[$10 >> 2] | 0) + ($9 << 2 | 0) | 0) + 84 | 0) >> 2] | 0 | 0, $7 | 0);
               break label$70;
              case 1:
               FLAC__window_bartlett_hann(HEAP32[(((HEAP32[$10 >> 2] | 0) + ($9 << 2 | 0) | 0) + 84 | 0) >> 2] | 0 | 0, $7 | 0);
               break label$70;
              case 2:
               FLAC__window_blackman(HEAP32[(((HEAP32[$10 >> 2] | 0) + ($9 << 2 | 0) | 0) + 84 | 0) >> 2] | 0 | 0, $7 | 0);
               break label$70;
              case 3:
               FLAC__window_blackman_harris_4term_92db_sidelobe(HEAP32[(((HEAP32[$10 >> 2] | 0) + ($9 << 2 | 0) | 0) + 84 | 0) >> 2] | 0 | 0, $7 | 0);
               break label$70;
              case 4:
               FLAC__window_connes(HEAP32[(((HEAP32[$10 >> 2] | 0) + ($9 << 2 | 0) | 0) + 84 | 0) >> 2] | 0 | 0, $7 | 0);
               break label$70;
              case 5:
               FLAC__window_flattop(HEAP32[(((HEAP32[$10 >> 2] | 0) + ($9 << 2 | 0) | 0) + 84 | 0) >> 2] | 0 | 0, $7 | 0);
               break label$70;
              case 6:
               FLAC__window_gauss(HEAP32[(((HEAP32[$10 >> 2] | 0) + ($9 << 2 | 0) | 0) + 84 | 0) >> 2] | 0 | 0, $7 | 0, Math_fround(Math_fround(HEAPF32[($3 + 48 | 0) >> 2])));
               break label$70;
              case 7:
               FLAC__window_hamming(HEAP32[(((HEAP32[$10 >> 2] | 0) + ($9 << 2 | 0) | 0) + 84 | 0) >> 2] | 0 | 0, $7 | 0);
               break label$70;
              case 8:
               FLAC__window_hann(HEAP32[(((HEAP32[$10 >> 2] | 0) + ($9 << 2 | 0) | 0) + 84 | 0) >> 2] | 0 | 0, $7 | 0);
               break label$70;
              case 9:
               FLAC__window_kaiser_bessel(HEAP32[(((HEAP32[$10 >> 2] | 0) + ($9 << 2 | 0) | 0) + 84 | 0) >> 2] | 0 | 0, $7 | 0);
               break label$70;
              case 10:
               FLAC__window_nuttall(HEAP32[(((HEAP32[$10 >> 2] | 0) + ($9 << 2 | 0) | 0) + 84 | 0) >> 2] | 0 | 0, $7 | 0);
               break label$70;
              case 11:
               FLAC__window_rectangle(HEAP32[(((HEAP32[$10 >> 2] | 0) + ($9 << 2 | 0) | 0) + 84 | 0) >> 2] | 0 | 0, $7 | 0);
               break label$70;
              case 12:
               FLAC__window_triangle(HEAP32[(((HEAP32[$10 >> 2] | 0) + ($9 << 2 | 0) | 0) + 84 | 0) >> 2] | 0 | 0, $7 | 0);
               break label$70;
              case 13:
               FLAC__window_tukey(HEAP32[(((HEAP32[$10 >> 2] | 0) + ($9 << 2 | 0) | 0) + 84 | 0) >> 2] | 0 | 0, $7 | 0, Math_fround(Math_fround(HEAPF32[($3 + 48 | 0) >> 2])));
               break label$70;
              case 14:
               FLAC__window_partial_tukey(HEAP32[(((HEAP32[$10 >> 2] | 0) + ($9 << 2 | 0) | 0) + 84 | 0) >> 2] | 0 | 0, $7 | 0, Math_fround(Math_fround(HEAPF32[($3 + 48 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($3 + 52 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($3 + 56 | 0) >> 2])));
               break label$70;
              case 15:
               FLAC__window_punchout_tukey(HEAP32[(((HEAP32[$10 >> 2] | 0) + ($9 << 2 | 0) | 0) + 84 | 0) >> 2] | 0 | 0, $7 | 0, Math_fround(Math_fround(HEAPF32[($3 + 48 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($3 + 52 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($3 + 56 | 0) >> 2])));
               break label$70;
              case 16:
               break label$72;
              };
             }
             FLAC__window_welch(HEAP32[(((HEAP32[$10 >> 2] | 0) + ($9 << 2 | 0) | 0) + 84 | 0) >> 2] | 0 | 0, $7 | 0);
             break label$70;
            }
            FLAC__window_hann(HEAP32[(((HEAP32[$10 >> 2] | 0) + ($9 << 2 | 0) | 0) + 84 | 0) >> 2] | 0 | 0, $7 | 0);
           }
           $9 = $9 + 1 | 0;
           $2 = HEAP32[$0 >> 2] | 0;
           if ($9 >>> 0 < (HEAP32[($2 + 40 | 0) >> 2] | 0) >>> 0) {
            continue label$69
           }
           break label$69;
          };
          $9 = HEAP32[$10 >> 2] | 0;
         }
         HEAP32[$9 >> 2] = $7;
         break label$48;
        }
        label$89 : {
         label$90 : {
          $4 = $9 << 3 | 0;
          $3 = (HEAP32[$10 >> 2] | 0) + $4 | 0;
          $3 = FLAC__memory_alloc_aligned_int32_array($7 | 0, $3 + 7540 | 0 | 0, $3 + 256 | 0 | 0) | 0;
          if ($3) {
           break label$90
          }
          $3 = ($3 | 0) != (0 | 0);
          break label$89;
         }
         $3 = (HEAP32[$10 >> 2] | 0) + $4 | 0;
         $3 = (FLAC__memory_alloc_aligned_int32_array($7 | 0, $3 + 7544 | 0 | 0, $3 + 260 | 0 | 0) | 0 | 0) != (0 | 0);
        }
        $9 = $9 + 1 | 0;
        if ($3) {
         continue label$60
        }
        break label$60;
       };
      }
      $9 = HEAP32[$0 >> 2] | 0;
     }
     HEAP32[$9 >> 2] = 8;
     $9 = 1;
     break label$3;
    }
    HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
    $9 = 1;
    break label$3;
   }
   $9 = FLAC__bitwriter_init(HEAP32[($9 + 6856 | 0) >> 2] | 0 | 0) | 0;
   $3 = HEAP32[$0 >> 2] | 0;
   label$91 : {
    if ($9) {
     break label$91
    }
    HEAP32[$3 >> 2] = 8;
    $9 = 1;
    break label$3;
   }
   label$92 : {
    label$93 : {
     label$94 : {
      if (HEAP32[($3 + 4 | 0) >> 2] | 0) {
       break label$94
      }
      $2 = 1;
      break label$93;
     }
     $9 = 1;
     $2 = HEAP32[$10 >> 2] | 0;
     $4 = (HEAP32[($3 + 36 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($2 + 11796 | 0) >> 2] = $4;
     label$95 : {
      if (!(HEAP32[($3 + 24 | 0) >> 2] | 0)) {
       break label$95
      }
      $2 = safe_malloc_mul_2op_p(4 | 0, $4 | 0) | 0;
      HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 11764 | 0) >> 2] = $2;
      $3 = HEAP32[$0 >> 2] | 0;
      label$96 : {
       if (!$2) {
        break label$96
       }
       label$97 : while (1) {
        $2 = HEAP32[$10 >> 2] | 0;
        if ($9 >>> 0 >= (HEAP32[($3 + 24 | 0) >> 2] | 0) >>> 0) {
         break label$95
        }
        $2 = safe_malloc_mul_2op_p(4 | 0, HEAP32[($2 + 11796 | 0) >> 2] | 0 | 0) | 0;
        HEAP32[(((HEAP32[($0 + 4 | 0) >> 2] | 0) + ($9 << 2 | 0) | 0) + 11764 | 0) >> 2] = $2;
        $9 = $9 + 1 | 0;
        $3 = HEAP32[$0 >> 2] | 0;
        if ($2) {
         continue label$97
        }
        break label$97;
       };
      }
      HEAP32[$3 >> 2] = 8;
      $9 = 1;
      break label$3;
     }
     HEAP32[($2 + 11800 | 0) >> 2] = 0;
     label$98 : {
      $2 = HEAP32[($2 + 11752 | 0) >> 2] | 0;
      if ($2) {
       break label$98
      }
      $2 = FLAC__stream_decoder_new() | 0;
      HEAP32[((HEAP32[$10 >> 2] | 0) + 11752 | 0) >> 2] = $2;
      if ($2) {
       break label$98
      }
      HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 3;
      $9 = 1;
      break label$3;
     }
     $9 = global$2;
     $9 = FLAC__stream_decoder_init_stream($2 | 0, $9 + 17 | 0 | 0, 0 | 0, 0 | 0, 0 | 0, 0 | 0, $9 + 18 | 0 | 0, $9 + 19 | 0 | 0, $9 + 20 | 0 | 0, $0 | 0) | 0;
     $3 = HEAP32[$0 >> 2] | 0;
     if ($9) {
      break label$92
     }
     $2 = !(HEAP32[($3 + 4 | 0) >> 2] | 0);
    }
    $9 = HEAP32[$10 >> 2] | 0;
    i64toi32_i32$1 = $9;
    i64toi32_i32$0 = 0;
    HEAP32[($9 + 7312 | 0) >> 2] = 0;
    HEAP32[($9 + 7316 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($9 + 7292 | 0) >> 2] = 0;
    i64toi32_i32$1 = $9 + 11816 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $9 + 11824 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $9 + 11832 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($9 + 11840 | 0) >> 2] = 0;
    i64toi32_i32$1 = $3 + 624 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $3 + 616 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $3;
    i64toi32_i32$0 = 0;
    HEAP32[($3 + 608 | 0) >> 2] = 0;
    HEAP32[($3 + 612 | 0) >> 2] = i64toi32_i32$0;
    label$99 : {
     if ($2) {
      break label$99
     }
     HEAP32[($9 + 11756 | 0) >> 2] = 0;
    }
    $9 = HEAP32[($9 + 6856 | 0) >> 2] | 0;
    $2 = global$82;
    label$100 : {
     if (FLAC__bitwriter_write_raw_uint32($9 | 0, HEAP32[global$83 >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0) | 0) {
      break label$100
     }
     HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 7;
     $9 = 1;
     break label$3;
    }
    $9 = 1;
    if (!(write_bitbuffer_($0 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    label$101 : {
     $3 = HEAP32[$0 >> 2] | 0;
     if (!(HEAP32[($3 + 4 | 0) >> 2] | 0)) {
      break label$101
     }
     HEAP32[($2 + 11756 | 0) >> 2] = 1;
    }
    i64toi32_i32$1 = $2;
    i64toi32_i32$0 = 0;
    HEAP32[($2 + 6872 | 0) >> 2] = 0;
    HEAP32[($2 + 6876 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($2 + 6880 | 0) >> 2] = 34;
    HEAP32[($2 + 6888 | 0) >> 2] = HEAP32[($3 + 36 | 0) >> 2] | 0;
    HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6892 | 0) >> 2] = HEAP32[((HEAP32[$0 >> 2] | 0) + 36 | 0) >> 2] | 0;
    HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6896 | 0) >> 2] = 0;
    HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6900 | 0) >> 2] = 0;
    HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6904 | 0) >> 2] = HEAP32[((HEAP32[$0 >> 2] | 0) + 32 | 0) >> 2] | 0;
    HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6908 | 0) >> 2] = HEAP32[((HEAP32[$0 >> 2] | 0) + 24 | 0) >> 2] | 0;
    HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6912 | 0) >> 2] = HEAP32[((HEAP32[$0 >> 2] | 0) + 28 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[$0 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 592 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 596 | 0) >> 2] | 0;
    $1156 = i64toi32_i32$0;
    i64toi32_i32$0 = (HEAP32[($0 + 4 | 0) >> 2] | 0) + 6920 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $1156;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    i64toi32_i32$0 = $2 + 6936 | 0;
    i64toi32_i32$1 = 0;
    HEAP32[i64toi32_i32$0 >> 2] = 0;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$0 = $2 + 6928 | 0;
    i64toi32_i32$1 = 0;
    HEAP32[i64toi32_i32$0 >> 2] = 0;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    label$102 : {
     if (!(HEAP32[((HEAP32[$0 >> 2] | 0) + 12 | 0) >> 2] | 0)) {
      break label$102
     }
     FLAC__MD5Init((HEAP32[$10 >> 2] | 0) + 7060 | 0 | 0);
    }
    label$103 : {
     $2 = HEAP32[$10 >> 2] | 0;
     if (FLAC__add_metadata_block($2 + 6872 | 0 | 0, HEAP32[($2 + 6856 | 0) >> 2] | 0 | 0) | 0) {
      break label$103
     }
     HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 7;
     break label$3;
    }
    if (!(write_bitbuffer_($0 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[((HEAP32[$10 >> 2] | 0) + 6896 | 0) >> 2] = (-1 << (HEAP32[global$17 >> 2] | 0) | 0) ^ -1 | 0;
    i64toi32_i32$0 = (HEAP32[$10 >> 2] | 0) + 6920 | 0;
    i64toi32_i32$1 = 0;
    HEAP32[i64toi32_i32$0 >> 2] = 0;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    label$104 : {
     if ($12) {
      break label$104
     }
     HEAP32[$8 >> 2] = 4;
     $2 = HEAP32[((HEAP32[$0 >> 2] | 0) + 604 | 0) >> 2] | 0;
     i64toi32_i32$0 = $8 + 24 | 0;
     i64toi32_i32$1 = 0;
     HEAP32[i64toi32_i32$0 >> 2] = 0;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$0 = $8;
     i64toi32_i32$1 = 0;
     HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = 0;
     HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$1;
     HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = 8;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = !$2;
     label$105 : {
      if (FLAC__add_metadata_block(i64toi32_i32$0 | 0, HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6856 | 0) >> 2] | 0 | 0) | 0) {
       break label$105
      }
      HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 7;
      break label$3;
     }
     if (!(write_bitbuffer_($0 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$3
     }
    }
    label$106 : {
     $3 = HEAP32[$0 >> 2] | 0;
     $4 = HEAP32[($3 + 604 | 0) >> 2] | 0;
     if (!$4) {
      break label$106
     }
     $2 = 0;
     label$107 : while (1) {
      $3 = HEAP32[((HEAP32[($3 + 600 | 0) >> 2] | 0) + ($2 << 2 | 0) | 0) >> 2] | 0;
      HEAP32[($3 + 4 | 0) >> 2] = ($2 | 0) == ($4 + -1 | 0 | 0);
      label$108 : {
       if (FLAC__add_metadata_block($3 | 0, HEAP32[((HEAP32[$10 >> 2] | 0) + 6856 | 0) >> 2] | 0 | 0) | 0) {
        break label$108
       }
       HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 7;
       break label$3;
      }
      label$109 : {
       if (!(write_bitbuffer_($0 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$109
       }
       $2 = $2 + 1 | 0;
       $3 = HEAP32[$0 >> 2] | 0;
       $4 = HEAP32[($3 + 604 | 0) >> 2] | 0;
       if ($2 >>> 0 >= $4 >>> 0) {
        break label$106
       }
       continue label$107;
      }
      break label$107;
     };
     $9 = 1;
     break label$3;
    }
    label$110 : {
     $2 = HEAP32[$10 >> 2] | 0;
     $4 = HEAP32[($2 + 7272 | 0) >> 2] | 0;
     if (!$4) {
      break label$110
     }
     $9 = 1;
     $2 = FUNCTION_TABLE[$4]($0, $3 + 624 | 0, HEAP32[($2 + 7288 | 0) >> 2] | 0) | 0;
     $3 = HEAP32[$0 >> 2] | 0;
     if (($2 | 0) != (1 | 0)) {
      break label$110
     }
     HEAP32[$3 >> 2] = 5;
     break label$3;
    }
    $9 = 0;
    if (!(HEAP32[($3 + 4 | 0) >> 2] | 0)) {
     break label$3
    }
    HEAP32[((HEAP32[$10 >> 2] | 0) + 11756 | 0) >> 2] = 2;
    break label$3;
   }
   HEAP32[$3 >> 2] = 3;
   $9 = 1;
  }
  label$111 : {
   $20 = $8 + 176 | 0;
   if ($20 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $20;
  }
  return $9 | 0;
 }
 
 function precompute_partition_info_sums_($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var i64toi32_i32$0 = 0, $9 = 0, $10 = 0, i64toi32_i32$5 = 0, $12 = 0, i64toi32_i32$2 = 0, $11 = 0, i64toi32_i32$1 = 0, $7 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $13$hi = 0, $13 = 0, $8 = 0, $48 = 0, $89 = 0, $96$hi = 0, $135 = 0, $142 = 0, $142$hi = 0, $144 = 0, $144$hi = 0;
  $7 = 1 << $5 | 0;
  $8 = $7 >>> 0 > 1 >>> 0 ? $7 : 1;
  $9 = 0;
  $10 = 0 - $3 | 0;
  $11 = ($3 + $2 | 0) >>> $5 | 0;
  $12 = $11 - $3 | 0;
  label$1 : {
   label$2 : {
    if (($6 + 4 | 0) >>> 0 >= (32 - (Math_clz32($11) ^ 31 | 0) | 0) >>> 0) {
     break label$2
    }
    $6 = 0;
    label$3 : while (1) {
     $3 = 0;
     label$4 : {
      $10 = $10 + $11 | 0;
      if ($9 >>> 0 >= $10 >>> 0) {
       break label$4
      }
      label$5 : while (1) {
       $2 = HEAP32[($0 + ($9 << 2 | 0) | 0) >> 2] | 0;
       $48 = $2;
       $2 = $2 >> 31 | 0;
       $3 = (($48 + $2 | 0) ^ $2 | 0) + $3 | 0;
       $9 = $9 + 1 | 0;
       if ($9 >>> 0 < $10 >>> 0) {
        continue label$5
       }
       break label$5;
      };
      $9 = $12;
     }
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = $1 + ($6 << 3 | 0) | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $3;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $12 = $12 + $11 | 0;
     $6 = $6 + 1 | 0;
     if (($6 | 0) != ($8 | 0)) {
      continue label$3
     }
     break label$1;
    };
   }
   $2 = 0;
   label$6 : while (1) {
    i64toi32_i32$0 = 0;
    $13 = 0;
    $13$hi = i64toi32_i32$0;
    label$7 : {
     $10 = $10 + $11 | 0;
     if ($9 >>> 0 >= $10 >>> 0) {
      break label$7
     }
     label$8 : while (1) {
      i64toi32_i32$0 = $13$hi;
      $3 = HEAP32[($0 + ($9 << 2 | 0) | 0) >> 2] | 0;
      $89 = $3;
      $3 = $3 >> 31 | 0;
      i64toi32_i32$0 = 0;
      $96$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $13$hi;
      i64toi32_i32$2 = $13;
      i64toi32_i32$1 = $96$hi;
      i64toi32_i32$3 = ($89 + $3 | 0) ^ $3 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $13 = i64toi32_i32$4;
      $13$hi = i64toi32_i32$5;
      $9 = $9 + 1 | 0;
      if ($9 >>> 0 < $10 >>> 0) {
       continue label$8
      }
      break label$8;
     };
     $9 = $12;
    }
    i64toi32_i32$5 = $13$hi;
    i64toi32_i32$2 = $1 + ($2 << 3 | 0) | 0;
    HEAP32[i64toi32_i32$2 >> 2] = $13;
    HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
    $12 = $12 + $11 | 0;
    $2 = $2 + 1 | 0;
    if (($2 | 0) != ($8 | 0)) {
     continue label$6
    }
    break label$6;
   };
  }
  label$9 : {
   if (($5 | 0) <= ($4 | 0)) {
    break label$9
   }
   $12 = 0;
   $2 = $7;
   label$10 : while (1) {
    $5 = $5 + -1 | 0;
    label$11 : {
     $9 = $2;
     $2 = $2 >>> 1 | 0;
     if (!$2) {
      break label$11
     }
     $11 = $9 & -2 | 0;
     $3 = 0;
     $9 = $7;
     $10 = $12;
     label$12 : while (1) {
      $135 = $1 + ($9 << 3 | 0) | 0;
      $0 = $1 + ($10 << 3 | 0) | 0;
      i64toi32_i32$0 = $0 + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $142 = i64toi32_i32$5;
      $142$hi = i64toi32_i32$2;
      i64toi32_i32$0 = $0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $144 = i64toi32_i32$2;
      $144$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $142$hi;
      i64toi32_i32$0 = $142;
      i64toi32_i32$2 = $144$hi;
      i64toi32_i32$3 = $144;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      i64toi32_i32$0 = $135;
      HEAP32[i64toi32_i32$0 >> 2] = i64toi32_i32$1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$4;
      $10 = $10 + 2 | 0;
      $9 = $9 + 1 | 0;
      $3 = $3 + 1 | 0;
      if (($3 | 0) != ($2 | 0)) {
       continue label$12
      }
      break label$12;
     };
     $12 = $12 + $11 | 0;
     $7 = $7 + $2 | 0;
    }
    if (($5 | 0) > ($4 | 0)) {
     continue label$10
    }
    break label$10;
   };
  }
 }
 
 function verify_read_callback_($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $7 = 0, $8 = 0, $5 = 0, $4 = 0, $6 = 0;
  label$1 : {
   $4 = HEAP32[($3 + 4 | 0) >> 2] | 0;
   if (!(HEAP32[($4 + 11760 | 0) >> 2] | 0)) {
    break label$1
   }
   HEAP32[$2 >> 2] = 4;
   $7 = global$5;
   $8 = HEAPU8[$7 >> 0] | 0 | ((HEAPU8[($7 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($7 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($7 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP8[$1 >> 0] = $8;
   HEAP8[($1 + 1 | 0) >> 0] = $8 >>> 8 | 0;
   HEAP8[($1 + 2 | 0) >> 0] = $8 >>> 16 | 0;
   HEAP8[($1 + 3 | 0) >> 0] = $8 >>> 24 | 0;
   HEAP32[((HEAP32[($3 + 4 | 0) >> 2] | 0) + 11760 | 0) >> 2] = 0;
   return 0 | 0;
  }
  label$2 : {
   $5 = HEAP32[($4 + 11812 | 0) >> 2] | 0;
   if ($5) {
    break label$2
   }
   return 2 | 0;
  }
  label$3 : {
   $6 = HEAP32[$2 >> 2] | 0;
   if ($5 >>> 0 >= $6 >>> 0) {
    break label$3
   }
   HEAP32[$2 >> 2] = $5;
   $6 = $5;
  }
  memcpy($1 | 0, HEAP32[($4 + 11804 | 0) >> 2] | 0 | 0, $6 | 0) | 0;
  $3 = HEAP32[($3 + 4 | 0) >> 2] | 0;
  $1 = $3 + 11804 | 0;
  $2 = HEAP32[$2 >> 2] | 0;
  HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + $2 | 0;
  $3 = $3 + 11812 | 0;
  HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) - $2 | 0;
  return 0 | 0;
 }
 
 function verify_write_callback_($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $8 = 0, i64toi32_i32$2 = 0, $5 = 0, $9 = 0, $6 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, $4 = 0, $7 = 0, $10 = 0, $11 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $61 = 0, $63$hi = 0, $65$hi = 0, $82 = 0, $83$hi = 0, $85$hi = 0, $24 = 0, $96 = 0;
  $4 = HEAP32[$1 >> 2] | 0;
  $5 = HEAP32[($3 + 4 | 0) >> 2] | 0;
  label$1 : {
   $6 = HEAP32[($1 + 8 | 0) >> 2] | 0;
   if (!$6) {
    break label$1
   }
   $7 = $4 << 2 | 0;
   $8 = 0;
   label$2 : while (1) {
    label$3 : {
     $9 = $8 << 2 | 0;
     $10 = HEAP32[($2 + $9 | 0) >> 2] | 0;
     $9 = HEAP32[(($5 + $9 | 0) + 11764 | 0) >> 2] | 0;
     if (!(memcmp($10 | 0, $9 | 0, $7 | 0) | 0)) {
      break label$3
     }
     $11 = 0;
     label$4 : {
      label$5 : {
       if (!$4) {
        break label$5
       }
       $6 = 0;
       label$6 : while (1) {
        label$7 : {
         $2 = $6 << 2 | 0;
         $7 = HEAP32[($10 + $2 | 0) >> 2] | 0;
         $2 = HEAP32[($9 + $2 | 0) >> 2] | 0;
         if (($7 | 0) == ($2 | 0)) {
          break label$7
         }
         $11 = $6;
         break label$4;
        }
        $6 = $6 + 1 | 0;
        if (($6 | 0) != ($4 | 0)) {
         continue label$6
        }
        break label$6;
       };
      }
      $2 = 0;
      $7 = 0;
     }
     $61 = $5 + 11816 | 0;
     i64toi32_i32$2 = $1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
     $63$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $65$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $63$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$0 = $65$hi;
     i64toi32_i32$4 = i64toi32_i32$2 + $11 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < $11 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$2 = $61;
     HEAP32[i64toi32_i32$2 >> 2] = i64toi32_i32$4;
     HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
     i64toi32_i32$1 = $1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
     HEAP32[($5 + 11840 | 0) >> 2] = $7;
     HEAP32[($5 + 11836 | 0) >> 2] = $2;
     HEAP32[($5 + 11832 | 0) >> 2] = $11;
     HEAP32[($5 + 11828 | 0) >> 2] = $8;
     $82 = $5 + 11824 | 0;
     $83$hi = i64toi32_i32$2;
     i64toi32_i32$2 = 0;
     $85$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $83$hi;
     $24 = i64toi32_i32$5;
     i64toi32_i32$5 = $85$hi;
     i64toi32_i32$5 = __wasm_i64_udiv($24 | 0, i64toi32_i32$2 | 0, $4 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     HEAP32[$82 >> 2] = i64toi32_i32$5;
     HEAP32[(HEAP32[$3 >> 2] | 0) >> 2] = 4;
     return 1 | 0;
    }
    $8 = $8 + 1 | 0;
    if (($8 | 0) != ($6 | 0)) {
     continue label$2
    }
    break label$2;
   };
   $8 = $5 + 11800 | 0;
   $96 = $8;
   $8 = (HEAP32[$8 >> 2] | 0) - $4 | 0;
   HEAP32[$96 >> 2] = $8;
   $9 = HEAP32[($5 + 11764 | 0) >> 2] | 0;
   $10 = $4 << 2 | 0;
   memmove($9 | 0, $9 + $10 | 0 | 0, $8 << 2 | 0 | 0) | 0;
   $8 = 1;
   label$8 : {
    if (($6 | 0) == (1 | 0)) {
     break label$8
    }
    label$9 : while (1) {
     $9 = HEAP32[($3 + 4 | 0) >> 2] | 0;
     $5 = HEAP32[(($9 + ($8 << 2 | 0) | 0) + 11764 | 0) >> 2] | 0;
     memmove($5 | 0, $5 + $10 | 0 | 0, (HEAP32[($9 + 11800 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
     $8 = $8 + 1 | 0;
     if (($8 | 0) != ($6 | 0)) {
      continue label$9
     }
     break label$9;
    };
   }
   return 0 | 0;
  }
  $8 = $5 + 11800 | 0;
  HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) - $4 | 0;
  return 0 | 0;
 }
 
 function verify_metadata_callback_($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
 }
 
 function verify_error_callback_($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  HEAP32[(HEAP32[$2 >> 2] | 0) >> 2] = 3;
 }
 
 function write_bitbuffer_($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, $4 = 0, i64toi32_i32$3 = 0, $3 = 0, $8 = 0, $17$hi = 0, $9 = 0, $15$hi = 0, $6 = 0, $7 = 0, $10 = 0, $15 = 0, $14$hi = 0, $11 = 0, $16$hi = 0, $17 = 0, $13 = 0, $12 = 0, $100 = 0, $108 = 0, $14 = 0, $133$hi = 0, $16 = 0, $202 = 0, $204$hi = 0, $206$hi = 0, $208 = 0, $210$hi = 0, $212$hi = 0, $236 = 0, $250 = 0;
  label$1 : {
   $3 = global$0 - 16 | 0;
   $12 = $3;
   if ($3 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $12;
  }
  $4 = FLAC__bitwriter_get_buffer(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6856 | 0) >> 2] | 0 | 0, $3 + 4 | 0 | 0, $3 | 0) | 0;
  $5 = HEAP32[$0 >> 2] | 0;
  label$3 : {
   label$4 : {
    label$5 : {
     if ($4) {
      break label$5
     }
     HEAP32[$5 >> 2] = 8;
     break label$4;
    }
    label$6 : {
     if (!(HEAP32[($5 + 4 | 0) >> 2] | 0)) {
      break label$6
     }
     $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     HEAP32[($4 + 11804 | 0) >> 2] = HEAP32[($3 + 4 | 0) >> 2] | 0;
     HEAP32[($4 + 11812 | 0) >> 2] = HEAP32[$3 >> 2] | 0;
     label$7 : {
      if (HEAP32[($4 + 11756 | 0) >> 2] | 0) {
       break label$7
      }
      HEAP32[($4 + 11760 | 0) >> 2] = 1;
      break label$6;
     }
     if (FLAC__stream_decoder_process_single(HEAP32[($4 + 11752 | 0) >> 2] | 0 | 0) | 0) {
      break label$6
     }
     FLAC__bitwriter_release_buffer(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6856 | 0) >> 2] | 0 | 0);
     FLAC__bitwriter_clear(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6856 | 0) >> 2] | 0 | 0);
     $4 = 0;
     $0 = HEAP32[$0 >> 2] | 0;
     if ((HEAP32[$0 >> 2] | 0 | 0) == (4 | 0)) {
      break label$3
     }
     HEAP32[$0 >> 2] = 3;
     break label$3;
    }
    $6 = HEAP32[$3 >> 2] | 0;
    $7 = HEAP32[($3 + 4 | 0) >> 2] | 0;
    i64toi32_i32$1 = $3;
    i64toi32_i32$0 = 0;
    HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
    label$8 : {
     label$9 : {
      $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      $5 = HEAP32[($4 + 7272 | 0) >> 2] | 0;
      if (!$5) {
       break label$9
      }
      if ((FUNCTION_TABLE[$5]($0, $3 + 8 | 0, HEAP32[($4 + 7288 | 0) >> 2] | 0) | 0 | 0) != (1 | 0)) {
       break label$9
      }
      HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 5;
      break label$8;
     }
     label$10 : {
      if ($1) {
       break label$10
      }
      $4 = (HEAPU8[$7 >> 0] | 0) & 127 | 0;
      if ($4 >>> 0 > 3 >>> 0) {
       break label$10
      }
      label$11 : {
       switch ($4 | 0) {
       default:
        i64toi32_i32$2 = $3;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
        $100 = i64toi32_i32$0;
        i64toi32_i32$0 = HEAP32[$0 >> 2] | 0;
        HEAP32[(i64toi32_i32$0 + 608 | 0) >> 2] = $100;
        HEAP32[(i64toi32_i32$0 + 612 | 0) >> 2] = i64toi32_i32$1;
        break label$10;
       case 1:
       case 2:
        break label$10;
       case 3:
        break label$11;
       };
      }
      $4 = HEAP32[$0 >> 2] | 0;
      i64toi32_i32$2 = $4;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 616 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 620 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 0;
      if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0) {
       break label$10
      }
      i64toi32_i32$3 = $3;
      i64toi32_i32$2 = HEAP32[($3 + 8 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($3 + 12 | 0) >> 2] | 0;
      $108 = i64toi32_i32$2;
      i64toi32_i32$2 = $4;
      HEAP32[(i64toi32_i32$2 + 616 | 0) >> 2] = $108;
      HEAP32[(i64toi32_i32$2 + 620 | 0) >> 2] = i64toi32_i32$0;
     }
     label$13 : {
      $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      $8 = HEAP32[($5 + 7048 | 0) >> 2] | 0;
      if (!$8) {
       break label$13
      }
      $9 = HEAP32[$0 >> 2] | 0;
      i64toi32_i32$3 = $9;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 624 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 628 | 0) >> 2] | 0;
      $14 = i64toi32_i32$0;
      $14$hi = i64toi32_i32$2;
      if (!(i64toi32_i32$0 | i64toi32_i32$2 | 0)) {
       break label$13
      }
      $10 = HEAP32[$8 >> 2] | 0;
      if (!$10) {
       break label$13
      }
      $4 = HEAP32[($5 + 7292 | 0) >> 2] | 0;
      if ($4 >>> 0 >= $10 >>> 0) {
       break label$13
      }
      $11 = HEAP32[($9 + 36 | 0) >> 2] | 0;
      i64toi32_i32$2 = 0;
      $133$hi = i64toi32_i32$2;
      i64toi32_i32$3 = $5;
      i64toi32_i32$2 = HEAP32[($5 + 7312 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($5 + 7316 | 0) >> 2] | 0;
      $15 = i64toi32_i32$2;
      $15$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $133$hi;
      i64toi32_i32$3 = $11;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$1 = $15;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      i64toi32_i32$0 = i64toi32_i32$4;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = -1;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $16 = i64toi32_i32$2;
      $16$hi = i64toi32_i32$4;
      $9 = HEAP32[($8 + 4 | 0) >> 2] | 0;
      label$14 : while (1) {
       $8 = $9 + Math_imul($4, 24) | 0;
       i64toi32_i32$5 = $8;
       i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
       $17 = i64toi32_i32$4;
       $17$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $16$hi;
       i64toi32_i32$0 = $17$hi;
       i64toi32_i32$5 = i64toi32_i32$4;
       i64toi32_i32$4 = $16$hi;
       i64toi32_i32$1 = $16;
       if (i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
        break label$13
       }
       label$15 : {
        i64toi32_i32$5 = $17$hi;
        i64toi32_i32$5 = $15$hi;
        i64toi32_i32$5 = $17$hi;
        i64toi32_i32$1 = $17;
        i64toi32_i32$0 = $15$hi;
        i64toi32_i32$4 = $15;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0) {
         break label$15
        }
        i64toi32_i32$1 = $15$hi;
        i64toi32_i32$5 = $8;
        HEAP32[i64toi32_i32$5 >> 2] = $15;
        HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$4 = $3;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] | 0;
        $17 = i64toi32_i32$1;
        $17$hi = i64toi32_i32$5;
        HEAP32[($8 + 16 | 0) >> 2] = $11;
        i64toi32_i32$5 = $14$hi;
        i64toi32_i32$5 = $17$hi;
        i64toi32_i32$4 = i64toi32_i32$1;
        i64toi32_i32$1 = $14$hi;
        i64toi32_i32$0 = $14;
        i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
        i64toi32_i32$2 = (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$1 | 0;
        i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
        i64toi32_i32$4 = $8;
        HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = i64toi32_i32$3;
        HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$2;
       }
       $4 = $4 + 1 | 0;
       HEAP32[($5 + 7292 | 0) >> 2] = $4;
       if (($4 | 0) != ($10 | 0)) {
        continue label$14
       }
       break label$14;
      };
     }
     label$16 : {
      label$17 : {
       if (!(HEAP32[($5 + 7260 | 0) >> 2] | 0)) {
        break label$17
       }
       $4 = FLAC__ogg_encoder_aspect_write_callback_wrapper((HEAP32[$0 >> 2] | 0) + 632 | 0 | 0, $7 | 0, $6 | 0, $1 | 0, HEAP32[($5 + 7056 | 0) >> 2] | 0 | 0, $2 | 0, HEAP32[($5 + 7276 | 0) >> 2] | 0 | 0, $0 | 0, HEAP32[($5 + 7288 | 0) >> 2] | 0 | 0) | 0;
       break label$16;
      }
      $4 = FUNCTION_TABLE[HEAP32[($5 + 7276 | 0) >> 2] | 0]($0, $7, $6, $1, HEAP32[($5 + 7056 | 0) >> 2] | 0, HEAP32[($5 + 7288 | 0) >> 2] | 0) | 0;
     }
     label$18 : {
      if ($4) {
       break label$18
      }
      $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      $202 = $5;
      i64toi32_i32$5 = $5;
      i64toi32_i32$2 = HEAP32[($5 + 7304 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[($5 + 7308 | 0) >> 2] | 0;
      $204$hi = i64toi32_i32$4;
      i64toi32_i32$4 = 0;
      $206$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $204$hi;
      i64toi32_i32$5 = i64toi32_i32$2;
      i64toi32_i32$2 = $206$hi;
      i64toi32_i32$0 = $6;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      i64toi32_i32$5 = $202;
      HEAP32[(i64toi32_i32$5 + 7304 | 0) >> 2] = i64toi32_i32$1;
      HEAP32[(i64toi32_i32$5 + 7308 | 0) >> 2] = i64toi32_i32$3;
      $208 = $5;
      i64toi32_i32$4 = $5;
      i64toi32_i32$3 = HEAP32[($5 + 7312 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[($5 + 7316 | 0) >> 2] | 0;
      $210$hi = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      $212$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $210$hi;
      i64toi32_i32$4 = i64toi32_i32$3;
      i64toi32_i32$3 = $212$hi;
      i64toi32_i32$0 = $1;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      i64toi32_i32$4 = $208;
      HEAP32[(i64toi32_i32$4 + 7312 | 0) >> 2] = i64toi32_i32$2;
      HEAP32[(i64toi32_i32$4 + 7316 | 0) >> 2] = i64toi32_i32$1;
      $4 = 1;
      $8 = HEAP32[($5 + 7320 | 0) >> 2] | 0;
      $2 = (HEAP32[($5 + 7056 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($5 + 7320 | 0) >> 2] = $8 >>> 0 > $2 >>> 0 ? $8 : $2;
      FLAC__bitwriter_release_buffer(HEAP32[($5 + 6856 | 0) >> 2] | 0 | 0);
      FLAC__bitwriter_clear(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6856 | 0) >> 2] | 0 | 0);
      if (!$1) {
       break label$3
      }
      $1 = (HEAP32[($0 + 4 | 0) >> 2] | 0) + 6896 | 0;
      $236 = $1;
      $5 = HEAP32[$3 >> 2] | 0;
      $1 = HEAP32[$1 >> 2] | 0;
      HEAP32[$236 >> 2] = $5 >>> 0 < $1 >>> 0 ? $5 : $1;
      $0 = (HEAP32[($0 + 4 | 0) >> 2] | 0) + 6900 | 0;
      $250 = $0;
      $0 = HEAP32[$0 >> 2] | 0;
      HEAP32[$250 >> 2] = $5 >>> 0 > $0 >>> 0 ? $5 : $0;
      break label$3;
     }
     HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 5;
    }
    FLAC__bitwriter_release_buffer(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6856 | 0) >> 2] | 0 | 0);
    FLAC__bitwriter_clear(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6856 | 0) >> 2] | 0 | 0);
    HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 5;
   }
   $4 = 0;
  }
  label$19 : {
   $13 = $3 + 16 | 0;
   if ($13 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $13;
  }
  return $4 | 0;
 }
 
 function FLAC__stream_encoder_init_ogg_stream($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  return init_stream_internal__1($0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, 1 | 0) | 0 | 0;
 }
 
 function process_subframe_($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  $10 = $10 | 0;
  var $12 = 0, $13 = 0, $16 = 0, $17 = 0, $11 = 0, $18 = 0, $15 = 0, $20 = 0, $19 = 0, $49 = 0.0, $27 = 0, $14 = 0, $24 = 0, $26 = 0, $25 = 0, $23 = 0, $29 = 0, $40 = 0, $21 = 0, $22 = 0, $48 = Math_fround(0), $28 = 0, i64toi32_i32$0 = 0, $42 = 0, $30 = 0, $43 = 0, $44 = 0, $46 = 0, $45 = 0, $47 = Math_fround(0), $253 = 0, $345 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $50 = 0.0, $37 = 0, $38 = 0, $39 = 0, $41 = 0, $575 = 0;
  label$1 : {
   $11 = global$0 - 576 | 0;
   $45 = $11;
   if ($11 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $45;
  }
  $12 = HEAP32[((HEAP32[$0 >> 2] | 0) + 28 | 0) >> 2] | 0;
  $13 = global$53;
  $14 = HEAP32[($12 >>> 0 > 16 >>> 0 ? global$54 : $13) >> 2] | 0;
  $13 = HEAP32[$3 >> 2] | 0;
  label$3 : {
   label$4 : {
    label$5 : {
     if (!(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 7256 | 0) >> 2] | 0)) {
      break label$5
     }
     $12 = -1;
     if ($13 >>> 0 > 3 >>> 0) {
      break label$4
     }
    }
    $12 = HEAP32[$6 >> 2] | 0;
    HEAP32[($12 + 4 | 0) >> 2] = $5;
    HEAP32[$12 >> 2] = 1;
    $12 = ((((HEAP32[global$70 >> 2] | 0) + Math_imul($13, $4) | 0) + (HEAP32[global$71 >> 2] | 0) | 0) + (HEAP32[global$72 >> 2] | 0) | 0) + (HEAP32[($12 + 288 | 0) >> 2] | 0) | 0;
    $15 = 0;
    $13 = HEAP32[$3 >> 2] | 0;
    if ($13 >>> 0 < 4 >>> 0) {
     break label$3
    }
   }
   $16 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   label$6 : {
    label$7 : {
     $13 = $13 + -4 | 0;
     if ((($4 + (Math_clz32($13 | 1 | 0) ^ 31 | 0) | 0) + 4 | 0) >>> 0 > 32 >>> 0) {
      break label$7
     }
     $17 = FUNCTION_TABLE[HEAP32[($16 + 7224 | 0) >> 2] | 0]($5 + 16 | 0, $13, $11 + 416 | 0) | 0;
     break label$6;
    }
    $17 = FUNCTION_TABLE[HEAP32[($16 + 7228 | 0) >> 2] | 0]($5 + 16 | 0, $13, $11 + 416 | 0) | 0;
   }
   label$8 : {
    label$9 : {
     label$10 : {
      label$11 : {
       $15 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       if (HEAP32[($15 + 7248 | 0) >> 2] | 0) {
        break label$11
       }
       if (Math_fround(HEAPF32[($11 + 420 | 0) >> 2]) != Math_fround(0.0)) {
        break label$11
       }
       $13 = 1;
       $16 = HEAP32[$5 >> 2] | 0;
       $18 = HEAP32[$3 >> 2] | 0;
       if ($18 >>> 0 <= 1 >>> 0) {
        break label$10
       }
       label$12 : while (1) {
        if (($16 | 0) != (HEAP32[($5 + ($13 << 2 | 0) | 0) >> 2] | 0 | 0)) {
         break label$11
        }
        $13 = $13 + 1 | 0;
        if ($13 >>> 0 >= $18 >>> 0) {
         break label$10
        }
        continue label$12;
       };
      }
      $13 = HEAP32[$0 >> 2] | 0;
      label$13 : {
       if (HEAP32[($15 + 7252 | 0) >> 2] | 0) {
        break label$13
       }
       $19 = $12;
       break label$9;
      }
      $19 = -1;
      $15 = 0;
      label$14 : {
       if (($12 | 0) == (-1 | 0)) {
        break label$14
       }
       $19 = $12;
       break label$8;
      }
      if (!(HEAP32[($13 + 556 | 0) >> 2] | 0)) {
       break label$9
      }
      $19 = $12;
      break label$8;
     }
     $13 = HEAP32[($6 + 4 | 0) >> 2] | 0;
     HEAP32[($13 + 4 | 0) >> 2] = $16;
     HEAP32[$13 >> 2] = 0;
     $13 = ((((HEAP32[global$70 >> 2] | 0) + $4 | 0) + (HEAP32[global$71 >> 2] | 0) | 0) + (HEAP32[global$72 >> 2] | 0) | 0) + (HEAP32[($13 + 288 | 0) >> 2] | 0) | 0;
     $15 = $13 >>> 0 < $12 >>> 0;
     $12 = $15 ? $13 : $12;
     break label$3;
    }
    $15 = 0;
    $12 = HEAP32[($13 + 568 | 0) >> 2] | 0;
    $16 = $12 ? 0 : $17;
    $12 = $12 ? 4 : $17;
    $17 = HEAP32[$3 >> 2] | 0;
    $20 = $12 >>> 0 < $17 >>> 0 ? $12 : $17 + -1 | 0;
    if ($16 >>> 0 > $20 >>> 0) {
     break label$8
    }
    $21 = $14 + -1 | 0;
    $22 = HEAP32[global$72 >> 2] | 0;
    $23 = HEAP32[global$71 >> 2] | 0;
    $24 = HEAP32[global$70 >> 2] | 0;
    $47 = Math_fround($4 >>> 0);
    $15 = 0;
    label$15 : while (1) {
     label$16 : {
      $12 = $16 << 2 | 0;
      $48 = Math_fround(HEAPF32[(($11 + 416 | 0) + $12 | 0) >> 2]);
      if ($48 >= $47) {
       break label$16
      }
      $25 = !$15;
      $13 = $25 << 2 | 0;
      $17 = HEAP32[($7 + $13 | 0) >> 2] | 0;
      $18 = HEAP32[($6 + $13 | 0) >> 2] | 0;
      $26 = HEAP32[((HEAP32[$0 >> 2] | 0) + 572 | 0) >> 2] | 0;
      $27 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      $28 = HEAP32[($27 + 6852 | 0) >> 2] | 0;
      $27 = HEAP32[($27 + 6848 | 0) >> 2] | 0;
      $253 = $5 + $12 | 0;
      $29 = (HEAP32[$3 >> 2] | 0) - $16 | 0;
      $12 = HEAP32[($8 + $13 | 0) >> 2] | 0;
      FLAC__fixed_compute_residual($253 | 0, $29 | 0, $16 | 0, $12 | 0);
      HEAP32[($18 + 36 | 0) >> 2] = $12;
      HEAP32[($18 + 12 | 0) >> 2] = $17;
      i64toi32_i32$0 = 0;
      HEAP32[$18 >> 2] = 2;
      HEAP32[($18 + 4 | 0) >> 2] = i64toi32_i32$0;
      $13 = $48 > Math_fround(0.0);
      label$17 : {
       label$18 : {
        $49 = +$48 + .5;
        if (!($49 < 4294967296.0 & $49 >= 0.0 | 0)) {
         break label$18
        }
        $17 = ~~$49 >>> 0;
        break label$17;
       }
       $17 = 0;
      }
      $13 = $13 ? $17 + 1 | 0 : 1;
      $26 = find_best_partition_order_(HEAP32[($0 + 4 | 0) >> 2] | 0 | 0, $12 | 0, $27 | 0, $28 | 0, $29 | 0, $16 | 0, ($13 >>> 0 < $14 >>> 0 ? $13 : $21) | 0, $14 | 0, $1 | 0, $2 | 0, $4 | 0, $26 | 0, $18 + 4 | 0 | 0) | 0;
      HEAP32[($18 + 16 | 0) >> 2] = $16;
      label$19 : {
       if (!$16) {
        break label$19
       }
       $17 = $18 + 20 | 0;
       $12 = 0;
       label$20 : while (1) {
        $13 = $12 << 2 | 0;
        HEAP32[($17 + $13 | 0) >> 2] = HEAP32[($5 + $13 | 0) >> 2] | 0;
        $12 = $12 + 1 | 0;
        if (($12 | 0) != ($16 | 0)) {
         continue label$20
        }
        break label$20;
       };
      }
      $12 = (((($26 + Math_imul($16, $4) | 0) + $24 | 0) + $23 | 0) + $22 | 0) + (HEAP32[($18 + 288 | 0) >> 2] | 0) | 0;
      $345 = $12;
      $12 = $12 >>> 0 < $19 >>> 0;
      $19 = $12 ? $345 : $19;
      $15 = $12 ? $25 : $15;
     }
     $16 = $16 + 1 | 0;
     if ($16 >>> 0 <= $20 >>> 0) {
      continue label$15
     }
     break label$15;
    };
    $13 = HEAP32[$0 >> 2] | 0;
   }
   label$21 : {
    $16 = HEAP32[($13 + 556 | 0) >> 2] | 0;
    if ($16) {
     break label$21
    }
    $12 = $19;
    break label$3;
   }
   $12 = HEAP32[$3 >> 2] | 0;
   $16 = $16 >>> 0 < $12 >>> 0 ? $16 : $12 + -1 | 0;
   HEAP32[($11 + 12 | 0) >> 2] = $16;
   label$22 : {
    if ($16) {
     break label$22
    }
    $12 = $19;
    break label$3;
   }
   label$23 : {
    if (HEAP32[($13 + 40 | 0) >> 2] | 0) {
     break label$23
    }
    $12 = $19;
    break label$3;
   }
   $30 = 32 - $4 | 0;
   $31 = $14 + -1 | 0;
   $32 = HEAP32[global$7 >> 2] | 0;
   $33 = HEAP32[global$49 >> 2] | 0;
   $34 = HEAP32[global$72 >> 2] | 0;
   $35 = HEAP32[global$71 >> 2] | 0;
   $36 = HEAP32[global$70 >> 2] | 0;
   $50 = +($4 >>> 0);
   $37 = $4 >>> 0 < 18 >>> 0;
   $38 = $4 >>> 0 > 16 >>> 0;
   $39 = $4 >>> 0 > 17 >>> 0;
   $40 = 0;
   label$24 : while (1) {
    $13 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    FLAC__lpc_window_data($5 | 0, HEAP32[(($13 + ($40 << 2 | 0) | 0) + 84 | 0) >> 2] | 0 | 0, HEAP32[($13 + 212 | 0) >> 2] | 0 | 0, $12 | 0);
    $12 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[($12 + 7232 | 0) >> 2] | 0](HEAP32[($12 + 212 | 0) >> 2] | 0, HEAP32[$3 >> 2] | 0, (HEAP32[($11 + 12 | 0) >> 2] | 0) + 1 | 0, $11 + 272 | 0);
    label$25 : {
     if (Math_fround(HEAPF32[($11 + 272 | 0) >> 2]) == Math_fround(0.0)) {
      break label$25
     }
     FLAC__lpc_compute_lp_coefficients($11 + 272 | 0 | 0, $11 + 12 | 0 | 0, (HEAP32[($0 + 4 | 0) >> 2] | 0) + 7628 | 0 | 0, $11 + 16 | 0 | 0);
     $17 = 1;
     $13 = HEAP32[($11 + 12 | 0) >> 2] | 0;
     label$26 : {
      $12 = HEAP32[$0 >> 2] | 0;
      if (HEAP32[($12 + 568 | 0) >> 2] | 0) {
       break label$26
      }
      $17 = HEAP32[$3 >> 2] | 0;
      $16 = 5;
      label$27 : {
       if (HEAP32[($12 + 564 | 0) >> 2] | 0) {
        break label$27
       }
       $16 = HEAP32[($12 + 560 | 0) >> 2] | 0;
      }
      $13 = FLAC__lpc_compute_best_order($11 + 16 | 0 | 0, $13 | 0, $17 | 0, $16 + $4 | 0 | 0) | 0;
      HEAP32[($11 + 12 | 0) >> 2] = $13;
      $17 = $13;
     }
     label$28 : {
      $12 = HEAP32[$3 >> 2] | 0;
      if ($13 >>> 0 < $12 >>> 0) {
       break label$28
      }
      $13 = $12 + -1 | 0;
      HEAP32[($11 + 12 | 0) >> 2] = $13;
     }
     if ($17 >>> 0 > $13 >>> 0) {
      break label$25
     }
     label$29 : while (1) {
      label$30 : {
       $23 = $17 + -1 | 0;
       $49 = +FLAC__lpc_compute_expected_bits_per_residual_sample(+(+HEAPF64[(($11 + 16 | 0) + ($23 << 3 | 0) | 0) >> 3]), $12 - $17 | 0 | 0);
       if ($49 >= $50) {
        break label$30
       }
       $12 = $49 > 0.0;
       label$31 : {
        label$32 : {
         $49 = $49 + .5;
         if (!($49 < 4294967296.0 & $49 >= 0.0 | 0)) {
          break label$32
         }
         $13 = ~~$49 >>> 0;
         break label$31;
        }
        $13 = 0;
       }
       $12 = $12 ? $13 + 1 | 0 : 1;
       $16 = $12 >>> 0 < $14 >>> 0;
       label$33 : {
        label$34 : {
         $13 = HEAP32[$0 >> 2] | 0;
         if (!(HEAP32[($13 + 564 | 0) >> 2] | 0)) {
          break label$34
         }
         $18 = 5;
         $24 = 15;
         if ($39) {
          break label$33
         }
         $20 = $30 - (Math_clz32($17) ^ 31 | 0) | 0;
         if ($20 >>> 0 > 14 >>> 0) {
          break label$33
         }
         $18 = 5;
         $24 = $20 >>> 0 > 5 >>> 0 ? $20 : 5;
         break label$33;
        }
        $24 = HEAP32[($13 + 560 | 0) >> 2] | 0;
        $18 = $24;
       }
       $41 = $16 ? $12 : $31;
       $42 = $5 + ($17 << 2 | 0) | 0;
       $43 = Math_clz32($17) ^ 31 | 0;
       $25 = $30 - $43 | 0;
       label$35 : while (1) {
        $27 = HEAP32[$3 >> 2] | 0;
        $26 = !$15;
        $12 = $26 << 2 | 0;
        $28 = HEAP32[($7 + $12 | 0) >> 2] | 0;
        $16 = HEAP32[($6 + $12 | 0) >> 2] | 0;
        $20 = HEAP32[($8 + $12 | 0) >> 2] | 0;
        $29 = HEAP32[($13 + 572 | 0) >> 2] | 0;
        $13 = HEAP32[($0 + 4 | 0) >> 2] | 0;
        $21 = HEAP32[($13 + 6852 | 0) >> 2] | 0;
        $22 = HEAP32[($13 + 6848 | 0) >> 2] | 0;
        $12 = 0;
        label$36 : {
         $575 = ($13 + ($23 << 7 | 0) | 0) + 7628 | 0;
         $13 = $37 ? ($25 >>> 0 > $18 >>> 0 ? $18 : $25) : $18;
         if (FLAC__lpc_quantize_coefficients($575 | 0, $17 | 0, $13 | 0, $11 + 448 | 0 | 0, $11 + 444 | 0 | 0) | 0) {
          break label$36
         }
         $12 = $27 - $17 | 0;
         label$37 : {
          label$38 : {
           $27 = $13 + $4 | 0;
           if (($27 + $43 | 0) >>> 0 > 32 >>> 0) {
            break label$38
           }
           $44 = HEAP32[($0 + 4 | 0) >> 2] | 0;
           label$39 : {
            if ($38) {
             break label$39
            }
            if ($13 >>> 0 > 16 >>> 0) {
             break label$39
            }
            FUNCTION_TABLE[HEAP32[($44 + 7244 | 0) >> 2] | 0]($42, $12, $11 + 448 | 0, $17, HEAP32[($11 + 444 | 0) >> 2] | 0, $20);
            break label$37;
           }
           FUNCTION_TABLE[HEAP32[($44 + 7236 | 0) >> 2] | 0]($42, $12, $11 + 448 | 0, $17, HEAP32[($11 + 444 | 0) >> 2] | 0, $20);
           break label$37;
          }
          FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 7240 | 0) >> 2] | 0]($42, $12, $11 + 448 | 0, $17, HEAP32[($11 + 444 | 0) >> 2] | 0, $20);
         }
         i64toi32_i32$0 = 0;
         HEAP32[$16 >> 2] = 3;
         HEAP32[($16 + 4 | 0) >> 2] = i64toi32_i32$0;
         HEAP32[($16 + 284 | 0) >> 2] = $20;
         HEAP32[($16 + 12 | 0) >> 2] = $28;
         $20 = find_best_partition_order_(HEAP32[($0 + 4 | 0) >> 2] | 0 | 0, $20 | 0, $22 | 0, $21 | 0, $12 | 0, $17 | 0, $41 | 0, $14 | 0, $1 | 0, $2 | 0, $4 | 0, $29 | 0, $16 + 4 | 0 | 0) | 0;
         HEAP32[($16 + 20 | 0) >> 2] = $13;
         HEAP32[($16 + 16 | 0) >> 2] = $17;
         HEAP32[($16 + 24 | 0) >> 2] = HEAP32[($11 + 444 | 0) >> 2] | 0;
         memcpy($16 + 28 | 0 | 0, $11 + 448 | 0 | 0, 128 | 0) | 0;
         $12 = 0;
         label$40 : {
          if (!$17) {
           break label$40
          }
          label$41 : while (1) {
           $13 = $12 << 2 | 0;
           HEAP32[(($16 + $13 | 0) + 156 | 0) >> 2] = HEAP32[($5 + $13 | 0) >> 2] | 0;
           $12 = $12 + 1 | 0;
           if (($12 | 0) != ($17 | 0)) {
            continue label$41
           }
           break label$41;
          };
         }
         $12 = (((((($20 + Math_imul($27, $17) | 0) + $36 | 0) + $35 | 0) + $34 | 0) + (HEAP32[($16 + 288 | 0) >> 2] | 0) | 0) + $33 | 0) + $32 | 0;
        }
        $13 = ($12 | 0) != (0 | 0) & $12 >>> 0 < $19 >>> 0 | 0;
        $15 = $13 ? $26 : $15;
        $19 = $13 ? $12 : $19;
        $18 = $18 + 1 | 0;
        if ($18 >>> 0 > $24 >>> 0) {
         break label$30
        }
        $13 = HEAP32[$0 >> 2] | 0;
        continue label$35;
       };
      }
      $17 = $17 + 1 | 0;
      if ($17 >>> 0 > (HEAP32[($11 + 12 | 0) >> 2] | 0) >>> 0) {
       break label$25
      }
      $12 = HEAP32[$3 >> 2] | 0;
      continue label$29;
     };
    }
    label$42 : {
     $40 = $40 + 1 | 0;
     if ($40 >>> 0 < (HEAP32[((HEAP32[$0 >> 2] | 0) + 40 | 0) >> 2] | 0) >>> 0) {
      break label$42
     }
     $12 = $19;
     break label$3;
    }
    $12 = HEAP32[$3 >> 2] | 0;
    continue label$24;
   };
  }
  label$43 : {
   if (($12 | 0) != (-1 | 0)) {
    break label$43
   }
   $13 = HEAP32[$3 >> 2] | 0;
   $12 = HEAP32[($6 + ($15 << 2 | 0) | 0) >> 2] | 0;
   HEAP32[($12 + 4 | 0) >> 2] = $5;
   HEAP32[$12 >> 2] = 1;
   $12 = ((((HEAP32[global$70 >> 2] | 0) + Math_imul($13, $4) | 0) + (HEAP32[global$71 >> 2] | 0) | 0) + (HEAP32[global$72 >> 2] | 0) | 0) + (HEAP32[($12 + 288 | 0) >> 2] | 0) | 0;
  }
  HEAP32[$9 >> 2] = $15;
  HEAP32[$10 >> 2] = $12;
  label$44 : {
   $46 = $11 + 576 | 0;
   if ($46 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $46;
  }
 }
 
 function add_subframe_($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0;
  $5 = 1;
  label$1 : {
   $6 = HEAP32[$3 >> 2] | 0;
   if ($6 >>> 0 > 3 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     switch ($6 | 0) {
     default:
      if (FLAC__subframe_add_constant($3 + 4 | 0 | 0, $2 | 0, HEAP32[($3 + 288 | 0) >> 2] | 0 | 0, $4 | 0) | 0) {
       break label$1
      }
      HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 7;
      break label$2;
     case 2:
      if (FLAC__subframe_add_fixed($3 + 4 | 0 | 0, $1 - (HEAP32[($3 + 16 | 0) >> 2] | 0) | 0 | 0, $2 | 0, HEAP32[($3 + 288 | 0) >> 2] | 0 | 0, $4 | 0) | 0) {
       break label$1
      }
      HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 7;
      break label$2;
     case 3:
      if (FLAC__subframe_add_lpc($3 + 4 | 0 | 0, $1 - (HEAP32[($3 + 16 | 0) >> 2] | 0) | 0 | 0, $2 | 0, HEAP32[($3 + 288 | 0) >> 2] | 0 | 0, $4 | 0) | 0) {
       break label$1
      }
      HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 7;
      break label$2;
     case 1:
      break label$3;
     };
    }
    if (FLAC__subframe_add_verbatim($3 + 4 | 0 | 0, $1 | 0, $2 | 0, HEAP32[($3 + 288 | 0) >> 2] | 0 | 0, $4 | 0) | 0) {
     break label$1
    }
    HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 7;
   }
   $5 = 0;
  }
  return $5 | 0;
 }
 
 function FLAC__stream_encoder_set_ogg_serial_number($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = 0;
  label$1 : {
   $0 = HEAP32[$0 >> 2] | 0;
   if ((HEAP32[$0 >> 2] | 0 | 0) != (1 | 0)) {
    break label$1
   }
   FLAC__ogg_encoder_aspect_set_serial_number($0 + 632 | 0 | 0, $1 | 0);
   $2 = 1;
  }
  return $2 | 0;
 }
 
 function FLAC__stream_encoder_set_verify($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = 0;
  label$1 : {
   $0 = HEAP32[$0 >> 2] | 0;
   if ((HEAP32[$0 >> 2] | 0 | 0) != (1 | 0)) {
    break label$1
   }
   HEAP32[($0 + 4 | 0) >> 2] = $1;
   $2 = 1;
  }
  return $2 | 0;
 }
 
 function FLAC__stream_encoder_set_channels($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = 0;
  label$1 : {
   $0 = HEAP32[$0 >> 2] | 0;
   if ((HEAP32[$0 >> 2] | 0 | 0) != (1 | 0)) {
    break label$1
   }
   HEAP32[($0 + 24 | 0) >> 2] = $1;
   $2 = 1;
  }
  return $2 | 0;
 }
 
 function FLAC__stream_encoder_set_bits_per_sample($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = 0;
  label$1 : {
   $0 = HEAP32[$0 >> 2] | 0;
   if ((HEAP32[$0 >> 2] | 0 | 0) != (1 | 0)) {
    break label$1
   }
   HEAP32[($0 + 28 | 0) >> 2] = $1;
   $2 = 1;
  }
  return $2 | 0;
 }
 
 function FLAC__stream_encoder_set_sample_rate($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = 0;
  label$1 : {
   $0 = HEAP32[$0 >> 2] | 0;
   if ((HEAP32[$0 >> 2] | 0 | 0) != (1 | 0)) {
    break label$1
   }
   HEAP32[($0 + 32 | 0) >> 2] = $1;
   $2 = 1;
  }
  return $2 | 0;
 }
 
 function FLAC__stream_encoder_set_compression_level($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3 = 0, $4 = 0, $21 = 0, $37 = 0, $46 = 0;
  $2 = 0;
  label$1 : {
   $3 = HEAP32[$0 >> 2] | 0;
   if ((HEAP32[$3 >> 2] | 0 | 0) != (1 | 0)) {
    break label$1
   }
   $4 = Math_imul($1 >>> 0 < 8 >>> 0 ? $1 : 8, 44);
   $2 = (global$1 + 11168 | 0) + $4 | 0;
   i64toi32_i32$0 = HEAP32[$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($2 + 4 | 0) >> 2] | 0;
   $21 = i64toi32_i32$0;
   i64toi32_i32$0 = $3;
   HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = $21;
   HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$1;
   $3 = FLAC__stream_encoder_set_apodization($0 | 0, HEAP32[($2 + 40 | 0) >> 2] | 0 | 0) | 0;
   $2 = 0;
   $1 = 0;
   label$2 : {
    $0 = HEAP32[$0 >> 2] | 0;
    if ((HEAP32[$0 >> 2] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    $2 = (global$1 + 11168 | 0) + $4 | 0;
    i64toi32_i32$1 = HEAP32[($2 + 28 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($2 + 32 | 0) >> 2] | 0;
    $37 = i64toi32_i32$1;
    i64toi32_i32$1 = $0;
    HEAP32[($0 + 576 | 0) >> 2] = $37;
    HEAP32[($0 + 580 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($0 + 568 | 0) >> 2] = HEAP32[($2 + 24 | 0) >> 2] | 0;
    HEAP32[($0 + 564 | 0) >> 2] = HEAP32[($2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($2 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($2 + 12 | 0) >> 2] | 0;
    $46 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[($0 + 556 | 0) >> 2] = $46;
    HEAP32[($0 + 560 | 0) >> 2] = i64toi32_i32$1;
    $1 = 1;
    $2 = $3 & 1 | 0;
   }
   $2 = $1 & $2 | 0;
  }
  return $2 | 0;
 }
 
 function FLAC__stream_encoder_set_blocksize($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = 0;
  label$1 : {
   $0 = HEAP32[$0 >> 2] | 0;
   if ((HEAP32[$0 >> 2] | 0 | 0) != (1 | 0)) {
    break label$1
   }
   HEAP32[($0 + 36 | 0) >> 2] = $1;
   $2 = 1;
  }
  return $2 | 0;
 }
 
 function FLAC__stream_encoder_set_total_samples_estimate($0, $1, $1$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $2 = 0, $17 = 0, $3 = 0, $9 = 0, $10 = 0, $10$hi = 0, $12 = 0, $12$hi = 0, $15$hi = 0, $19 = 0;
  $2 = 0;
  label$1 : {
   $0 = HEAP32[$0 >> 2] | 0;
   if ((HEAP32[$0 >> 2] | 0 | 0) != (1 | 0)) {
    break label$1
   }
   $9 = $0;
   i64toi32_i32$0 = $1$hi;
   $10 = $1;
   $10$hi = i64toi32_i32$0;
   i64toi32_i32$2 = global$22;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = 0;
   $12 = i64toi32_i32$0;
   $12$hi = i64toi32_i32$1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$2 = -1;
   i64toi32_i32$0 = $12$hi;
   i64toi32_i32$3 = $12;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $17 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $17 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   i64toi32_i32$1 = $17;
   i64toi32_i32$2 = -1;
   i64toi32_i32$3 = -1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
   $15$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $15$hi;
   i64toi32_i32$0 = $3;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$4 = i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$0 = $10$hi;
   i64toi32_i32$1 = i64toi32_i32$4 ? $10 : $3;
   i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$2;
   $19 = i64toi32_i32$1;
   i64toi32_i32$1 = $9;
   HEAP32[(i64toi32_i32$1 + 592 | 0) >> 2] = $19;
   HEAP32[(i64toi32_i32$1 + 596 | 0) >> 2] = i64toi32_i32$3;
   $2 = 1;
  }
  return $2 | 0;
 }
 
 function FLAC__stream_encoder_get_state($0) {
  $0 = $0 | 0;
  return HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function FLAC__stream_encoder_process_interleaved($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $16 = 0, $11 = 0, $15 = 0, $8 = 0, $17 = 0, $7 = 0, $9 = 0, $4 = 0, $12 = 0, $14 = 0, $13 = 0, $6 = 0, $10 = 0, $5 = 0;
  $3 = HEAP32[$0 >> 2] | 0;
  $4 = HEAP32[($3 + 36 | 0) >> 2] | 0;
  $5 = $4 + 1 | 0;
  $6 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $7 = HEAP32[($3 + 24 | 0) >> 2] | 0;
     if (($7 | 0) != (2 | 0)) {
      break label$3
     }
     if (!(HEAP32[($3 + 16 | 0) >> 2] | 0)) {
      break label$3
     }
     $8 = 0;
     label$4 : while (1) {
      $9 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      label$5 : {
       if (!(HEAP32[($3 + 4 | 0) >> 2] | 0)) {
        break label$5
       }
       $10 = HEAP32[($9 + 11800 | 0) >> 2] | 0;
       label$6 : {
        $3 = $5 - (HEAP32[($9 + 7052 | 0) >> 2] | 0) | 0;
        $11 = $2 - $8 | 0;
        $12 = $3 >>> 0 < $11 >>> 0 ? $3 : $11;
        if (!$12) {
         break label$6
        }
        label$7 : {
         if (!$7) {
          break label$7
         }
         $3 = $8 << 1 | 0;
         $13 = HEAP32[($9 + 11768 | 0) >> 2] | 0;
         $14 = HEAP32[($9 + 11764 | 0) >> 2] | 0;
         $15 = 0;
         $11 = $10;
         label$8 : while (1) {
          $16 = $11 << 2 | 0;
          $17 = $3 << 2 | 0;
          HEAP32[($14 + $16 | 0) >> 2] = HEAP32[($1 + $17 | 0) >> 2] | 0;
          HEAP32[($13 + $16 | 0) >> 2] = HEAP32[($1 + ($17 | 4 | 0) | 0) >> 2] | 0;
          $11 = $11 + 1 | 0;
          $3 = $3 + 2 | 0;
          $15 = $15 + 1 | 0;
          if (($15 | 0) != ($12 | 0)) {
           continue label$8
          }
          break label$8;
         };
        }
        $10 = $12 + $10 | 0;
       }
       HEAP32[($9 + 11800 | 0) >> 2] = $10;
      }
      $11 = $8 >>> 0 < $2 >>> 0;
      $3 = HEAP32[($9 + 7052 | 0) >> 2] | 0;
      label$9 : {
       if ($8 >>> 0 >= $2 >>> 0) {
        break label$9
       }
       if ($3 >>> 0 > $4 >>> 0) {
        break label$9
       }
       $17 = HEAP32[($9 + 40 | 0) >> 2] | 0;
       $12 = HEAP32[($9 + 8 | 0) >> 2] | 0;
       $13 = HEAP32[($9 + 36 | 0) >> 2] | 0;
       $14 = HEAP32[($9 + 4 | 0) >> 2] | 0;
       label$10 : while (1) {
        $11 = $3 << 2 | 0;
        $16 = $1 + ($6 << 2 | 0) | 0;
        $15 = HEAP32[$16 >> 2] | 0;
        HEAP32[($14 + $11 | 0) >> 2] = $15;
        $16 = HEAP32[($16 + 4 | 0) >> 2] | 0;
        HEAP32[($12 + $11 | 0) >> 2] = $16;
        HEAP32[($17 + $11 | 0) >> 2] = $15 - $16 | 0;
        HEAP32[($13 + $11 | 0) >> 2] = ($16 + $15 | 0) >> 1 | 0;
        $3 = $3 + 1 | 0;
        $6 = $6 + 2 | 0;
        $8 = $8 + 1 | 0;
        $11 = $8 >>> 0 < $2 >>> 0;
        if ($8 >>> 0 >= $2 >>> 0) {
         break label$9
        }
        if ($3 >>> 0 <= $4 >>> 0) {
         continue label$10
        }
        break label$10;
       };
      }
      HEAP32[($9 + 7052 | 0) >> 2] = $3;
      label$11 : {
       if ($3 >>> 0 <= $4 >>> 0) {
        break label$11
       }
       $3 = 0;
       if (!(process_frame_($0 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$1
       }
       $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       $16 = HEAP32[($3 + 4 | 0) >> 2] | 0;
       $15 = $4 << 2 | 0;
       HEAP32[$16 >> 2] = HEAP32[($16 + $15 | 0) >> 2] | 0;
       $16 = HEAP32[($3 + 8 | 0) >> 2] | 0;
       HEAP32[$16 >> 2] = HEAP32[($16 + $15 | 0) >> 2] | 0;
       $16 = HEAP32[($3 + 36 | 0) >> 2] | 0;
       HEAP32[$16 >> 2] = HEAP32[($16 + $15 | 0) >> 2] | 0;
       $16 = HEAP32[($3 + 40 | 0) >> 2] | 0;
       HEAP32[$16 >> 2] = HEAP32[($16 + $15 | 0) >> 2] | 0;
       HEAP32[($3 + 7052 | 0) >> 2] = 1;
      }
      if (!$11) {
       break label$2
      }
      $3 = HEAP32[$0 >> 2] | 0;
      continue label$4;
     };
    }
    $16 = 0;
    label$12 : while (1) {
     $8 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     label$13 : {
      if (!(HEAP32[($3 + 4 | 0) >> 2] | 0)) {
       break label$13
      }
      $14 = HEAP32[($8 + 11800 | 0) >> 2] | 0;
      label$14 : {
       $3 = $5 - (HEAP32[($8 + 7052 | 0) >> 2] | 0) | 0;
       $11 = $2 - $16 | 0;
       $13 = $3 >>> 0 < $11 >>> 0 ? $3 : $11;
       if (!$13) {
        break label$14
       }
       label$15 : {
        if (!$7) {
         break label$15
        }
        $17 = Math_imul($16, $7);
        $12 = 0;
        $15 = $14;
        label$16 : while (1) {
         $3 = $17;
         $11 = 0;
         label$17 : while (1) {
          HEAP32[((HEAP32[(($8 + ($11 << 2 | 0) | 0) + 11764 | 0) >> 2] | 0) + ($15 << 2 | 0) | 0) >> 2] = HEAP32[($1 + ($3 << 2 | 0) | 0) >> 2] | 0;
          $3 = $3 + 1 | 0;
          $11 = $11 + 1 | 0;
          if (($11 | 0) != ($7 | 0)) {
           continue label$17
          }
          break label$17;
         };
         $15 = $15 + 1 | 0;
         $17 = $17 + $7 | 0;
         $12 = $12 + 1 | 0;
         if (($12 | 0) != ($13 | 0)) {
          continue label$16
         }
         break label$16;
        };
       }
       $14 = $13 + $14 | 0;
      }
      HEAP32[($8 + 11800 | 0) >> 2] = $14;
     }
     $17 = $16 >>> 0 < $2 >>> 0;
     $15 = HEAP32[($8 + 7052 | 0) >> 2] | 0;
     label$18 : {
      if ($16 >>> 0 >= $2 >>> 0) {
       break label$18
      }
      if ($15 >>> 0 > $4 >>> 0) {
       break label$18
      }
      label$19 : {
       if (!$7) {
        break label$19
       }
       label$20 : while (1) {
        $3 = 0;
        $11 = $6;
        label$21 : while (1) {
         HEAP32[((HEAP32[(($8 + ($3 << 2 | 0) | 0) + 4 | 0) >> 2] | 0) + ($15 << 2 | 0) | 0) >> 2] = HEAP32[($1 + ($11 << 2 | 0) | 0) >> 2] | 0;
         $11 = $11 + 1 | 0;
         $3 = $3 + 1 | 0;
         if (($3 | 0) != ($7 | 0)) {
          continue label$21
         }
         break label$21;
        };
        $15 = $15 + 1 | 0;
        $6 = $7 + $6 | 0;
        $16 = $16 + 1 | 0;
        $17 = $16 >>> 0 < $2 >>> 0;
        if ($16 >>> 0 >= $2 >>> 0) {
         break label$18
        }
        if ($15 >>> 0 <= $4 >>> 0) {
         continue label$20
        }
        break label$18;
       };
      }
      label$22 : while (1) {
       $15 = $15 + 1 | 0;
       $16 = $16 + 1 | 0;
       $17 = $16 >>> 0 < $2 >>> 0;
       if ($16 >>> 0 >= $2 >>> 0) {
        break label$18
       }
       if ($15 >>> 0 <= $4 >>> 0) {
        continue label$22
       }
       break label$22;
      };
     }
     HEAP32[($8 + 7052 | 0) >> 2] = $15;
     label$23 : {
      if ($15 >>> 0 <= $4 >>> 0) {
       break label$23
      }
      $3 = 0;
      if (!(process_frame_($0 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$1
      }
      $8 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      label$24 : {
       if (!$7) {
        break label$24
       }
       $3 = 0;
       label$25 : while (1) {
        $11 = HEAP32[(($8 + ($3 << 2 | 0) | 0) + 4 | 0) >> 2] | 0;
        HEAP32[$11 >> 2] = HEAP32[($11 + ($4 << 2 | 0) | 0) >> 2] | 0;
        $3 = $3 + 1 | 0;
        if (($3 | 0) != ($7 | 0)) {
         continue label$25
        }
        break label$25;
       };
      }
      HEAP32[($8 + 7052 | 0) >> 2] = 1;
     }
     if (!$17) {
      break label$2
     }
     $3 = HEAP32[$0 >> 2] | 0;
     continue label$12;
    };
   }
   $3 = 1;
  }
  return $3 | 0;
 }
 
 function find_best_partition_order_($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  $10 = $10 | 0;
  $11 = $11 | 0;
  $12 = $12 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $20 = 0, $36$hi = 0, $24 = 0, $21 = 0, $14 = 0, $36 = 0, $37 = 0, $37$hi = 0, $19 = 0, $38 = 0, $38$hi = 0, $23 = 0, $18 = 0, $25 = 0, $17 = 0, $22 = 0, $15 = 0, $26 = 0, $27 = 0, $39$hi = 0, $16 = 0, $31 = 0, $13 = 0, $39 = 0, $29 = 0, $30 = 0, $35$hi = 0, $32 = 0, $33 = 0, $34 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $28 = 0, $35 = 0, $250$hi = 0, $314$hi = 0, $365$hi = 0, $429$hi = 0, $444 = 0, $481 = 0, $482 = 0, $503 = 0;
  $13 = $5 + $4 | 0;
  $14 = FLAC__format_get_max_rice_partition_order_from_blocksize_limited_max_and_predictor_order($9 | 0, $13 | 0, $5 | 0) | 0;
  $15 = $14 >>> 0 > $8 >>> 0 ? $8 : $14;
  FUNCTION_TABLE[HEAP32[($0 + 7220 | 0) >> 2] | 0]($1, $2, $4, $5, $15, $14, $10);
  label$1 : {
   if (!$11) {
    break label$1
   }
   $10 = 0;
   $8 = 0;
   label$2 : {
    if (($14 | 0) < (0 | 0)) {
     break label$2
    }
    $8 = 1 << $14 | 0;
    $16 = $8 >>> 0 > 1 >>> 0 ? $8 : 1;
    $17 = $13 >>> $14 | 0;
    $18 = 0;
    $19 = 0;
    label$3 : while (1) {
     $20 = 0;
     $9 = $18;
     $21 = 0;
     label$4 : {
      label$5 : {
       $22 = $19 ? 0 : $5;
       $23 = $17 - $22 | 0;
       if (!$23) {
        break label$5
       }
       label$6 : while (1) {
        $24 = HEAP32[($1 + ($9 << 2 | 0) | 0) >> 2] | 0;
        $20 = ($24 >> 31 | 0) ^ $24 | 0 | $20 | 0;
        $9 = $9 + 1 | 0;
        $21 = $21 + 1 | 0;
        if (($21 | 0) != ($23 | 0)) {
         continue label$6
        }
        break label$6;
       };
       $18 = ($18 + $17 | 0) - $22 | 0;
       if (!$20) {
        break label$5
       }
       $9 = (Math_clz32($20) ^ 31 | 0) + 2 | 0;
       break label$4;
      }
      $9 = 1;
     }
     HEAP32[($3 + ($19 << 2 | 0) | 0) >> 2] = $9;
     $19 = $19 + 1 | 0;
     if (($19 | 0) != ($16 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   if (($14 | 0) <= ($15 | 0)) {
    break label$1
   }
   $24 = $14;
   label$7 : while (1) {
    $24 = $24 + -1 | 0;
    $9 = 0;
    label$8 : while (1) {
     $20 = $3 + ($10 << 2 | 0) | 0;
     $21 = HEAP32[$20 >> 2] | 0;
     $20 = HEAP32[($20 + 4 | 0) >> 2] | 0;
     HEAP32[($3 + ($8 << 2 | 0) | 0) >> 2] = $21 >>> 0 > $20 >>> 0 ? $21 : $20;
     $8 = $8 + 1 | 0;
     $10 = $10 + 2 | 0;
     $9 = $9 + 1 | 0;
     if (!($9 >>> $24 | 0)) {
      continue label$8
     }
     break label$8;
    };
    if (($24 | 0) > ($15 | 0)) {
     continue label$7
    }
    break label$7;
   };
  }
  label$9 : {
   label$10 : {
    if (($14 | 0) >= ($15 | 0)) {
     break label$10
    }
    $25 = 0;
    HEAP32[($12 + 4 | 0) >> 2] = 0;
    $10 = 6;
    $26 = 0;
    $27 = 0;
    break label$9;
   }
   $22 = HEAP32[global$55 >> 2] | 0;
   $28 = (Math_imul($6 + 1 | 0, $4) - ($4 >>> 1 | 0) | 0) + $22 | 0;
   $16 = $7 + -1 | 0;
   $8 = global$56;
   $29 = (HEAP32[global$57 >> 2] | 0) + (HEAP32[$8 >> 2] | 0) | 0;
   $8 = global$51;
   $30 = (HEAP32[global$50 >> 2] | 0) + (HEAP32[$8 >> 2] | 0) | 0;
   i64toi32_i32$0 = 0;
   $35 = $6 + -1 | 0;
   $35$hi = i64toi32_i32$0;
   $31 = 0;
   $25 = 0;
   $26 = 0;
   $27 = 0;
   label$11 : {
    label$12 : while (1) {
     $32 = !$26;
     $8 = $0 + Math_imul($32, 12) | 0;
     $10 = $8 + 11724 | 0;
     $1 = $14;
     FLAC__format_entropy_coding_method_partitioned_rice_contents_ensure_size($10 | 0, ($14 >>> 0 > 6 >>> 0 ? $14 : 6) | 0) | 0;
     $33 = $3 + ($31 << 2 | 0) | 0;
     $18 = $2 + ($31 << 3 | 0) | 0;
     $34 = HEAP32[($8 + 11728 | 0) >> 2] | 0;
     $14 = HEAP32[$10 >> 2] | 0;
     label$13 : {
      label$14 : {
       if (!$1) {
        break label$14
       }
       $17 = $13 >>> $1 | 0;
       if ($17 >>> 0 <= $5 >>> 0) {
        break label$11
       }
       $21 = 0;
       $19 = 0;
       $23 = $30;
       label$15 : {
        if ($11) {
         break label$15
        }
        label$16 : while (1) {
         $24 = $17 - ($21 ? 0 : $5) | 0;
         label$17 : {
          label$18 : {
           i64toi32_i32$2 = $18 + ($21 << 3 | 0) | 0;
           i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
           i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
           $36 = i64toi32_i32$0;
           $36$hi = i64toi32_i32$1;
           i64toi32_i32$2 = i64toi32_i32$0;
           i64toi32_i32$0 = 0;
           i64toi32_i32$3 = 268435457;
           if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
            break label$18
           }
           i64toi32_i32$2 = 0;
           $37 = $24;
           $37$hi = i64toi32_i32$2;
           $8 = 0;
           label$19 : {
            label$20 : {
             i64toi32_i32$2 = $36$hi;
             i64toi32_i32$3 = $36;
             i64toi32_i32$1 = 16777216;
             i64toi32_i32$0 = 0;
             if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 <= i64toi32_i32$0 >>> 0 | 0) | 0) {
              break label$20
             }
             i64toi32_i32$3 = $37$hi;
             $38 = $37;
             $38$hi = i64toi32_i32$3;
             break label$19;
            }
            i64toi32_i32$3 = $37$hi;
            $38 = $37;
            $38$hi = i64toi32_i32$3;
            i64toi32_i32$0 = $37;
            i64toi32_i32$2 = 0;
            i64toi32_i32$1 = 7;
            i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
             i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
             $58 = 0;
            } else {
             i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
             $58 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
            }
            $250$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $36$hi;
            i64toi32_i32$2 = $250$hi;
            i64toi32_i32$3 = $58;
            i64toi32_i32$0 = $36$hi;
            i64toi32_i32$1 = $36;
            if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 >= i64toi32_i32$1 >>> 0 | 0) | 0) {
             break label$19
            }
            label$21 : while (1) {
             $8 = $8 + 8 | 0;
             i64toi32_i32$3 = $37$hi;
             i64toi32_i32$1 = $37;
             i64toi32_i32$2 = 0;
             i64toi32_i32$0 = 15;
             i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
             if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
              i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
              $59 = 0;
             } else {
              i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
              $59 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
             }
             $39 = $59;
             $39$hi = i64toi32_i32$2;
             i64toi32_i32$2 = $37$hi;
             i64toi32_i32$3 = $37;
             i64toi32_i32$1 = 0;
             i64toi32_i32$0 = 8;
             i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
             if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
              $60 = 0;
             } else {
              i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
              $60 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
             }
             $38 = $60;
             $38$hi = i64toi32_i32$1;
             $37 = $38;
             $37$hi = i64toi32_i32$1;
             i64toi32_i32$1 = $39$hi;
             i64toi32_i32$1 = $36$hi;
             i64toi32_i32$1 = $39$hi;
             i64toi32_i32$2 = $39;
             i64toi32_i32$3 = $36$hi;
             i64toi32_i32$0 = $36;
             if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
              continue label$21
             }
             break label$21;
            };
           }
           i64toi32_i32$2 = $38$hi;
           i64toi32_i32$2 = $36$hi;
           i64toi32_i32$2 = $38$hi;
           i64toi32_i32$0 = $38;
           i64toi32_i32$1 = $36$hi;
           i64toi32_i32$3 = $36;
           if (i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
            break label$17
           }
           label$22 : while (1) {
            $8 = $8 + 1 | 0;
            i64toi32_i32$0 = $38$hi;
            i64toi32_i32$3 = $38;
            i64toi32_i32$2 = 0;
            i64toi32_i32$1 = 1;
            i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
             i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
             $61 = 0;
            } else {
             i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
             $61 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
            }
            $38 = $61;
            $38$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $36$hi;
            i64toi32_i32$2 = $38$hi;
            i64toi32_i32$0 = $38;
            i64toi32_i32$3 = $36$hi;
            i64toi32_i32$1 = $36;
            if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
             continue label$22
            }
            break label$17;
           };
          }
          $8 = 0;
          $10 = $24;
          label$23 : {
           i64toi32_i32$0 = $36$hi;
           $9 = $36;
           if (($10 << 3 | 0) >>> 0 >= $9 >>> 0) {
            break label$23
           }
           label$24 : while (1) {
            $8 = $8 + 4 | 0;
            $20 = $10 << 7 | 0;
            $10 = $10 << 4 | 0;
            if ($20 >>> 0 < $9 >>> 0) {
             continue label$24
            }
            break label$24;
           };
          }
          if ($10 >>> 0 >= $9 >>> 0) {
           break label$17
          }
          label$25 : while (1) {
           $8 = $8 + 1 | 0;
           $10 = $10 << 1 | 0;
           if ($10 >>> 0 < $9 >>> 0) {
            continue label$25
           }
           break label$25;
          };
         }
         $8 = $8 >>> 0 < $7 >>> 0 ? $8 : $16;
         $10 = Math_imul($8 + 1 | 0, $24);
         label$26 : {
          label$27 : {
           if (!$8) {
            break label$27
           }
           i64toi32_i32$0 = $36$hi;
           i64toi32_i32$0 = 0;
           $314$hi = i64toi32_i32$0;
           i64toi32_i32$0 = $36$hi;
           i64toi32_i32$1 = $36;
           i64toi32_i32$2 = $314$hi;
           i64toi32_i32$3 = $8 + -1 | 0;
           i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$2 = 0;
            $62 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
           } else {
            i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
            $62 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
           }
           $9 = $62;
           break label$26;
          }
          i64toi32_i32$2 = $36$hi;
          $9 = $36 << 1 | 0;
         }
         $10 = (($22 - ($24 >>> 1 | 0) | 0) + $10 | 0) + $9 | 0;
         $19 = ($10 | 0) == (-1 | 0) ? $19 : $8;
         HEAP32[($14 + ($21 << 2 | 0) | 0) >> 2] = $19;
         $23 = $10 + $23 | 0;
         $21 = $21 + 1 | 0;
         if (!($21 >>> $1 | 0)) {
          continue label$16
         }
         break label$13;
        };
       }
       label$28 : while (1) {
        $24 = $17 - ($21 ? 0 : $5) | 0;
        label$29 : {
         label$30 : {
          label$31 : {
           label$32 : {
            i64toi32_i32$0 = $18 + ($21 << 3 | 0) | 0;
            i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
            i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
            $36 = i64toi32_i32$2;
            $36$hi = i64toi32_i32$1;
            i64toi32_i32$0 = i64toi32_i32$2;
            i64toi32_i32$2 = 0;
            i64toi32_i32$3 = 268435457;
            if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
             break label$32
            }
            i64toi32_i32$0 = 0;
            $37 = $24;
            $37$hi = i64toi32_i32$0;
            $8 = 0;
            i64toi32_i32$0 = $36$hi;
            i64toi32_i32$3 = $36;
            i64toi32_i32$1 = 16777216;
            i64toi32_i32$2 = 0;
            if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
             break label$30
            }
            i64toi32_i32$3 = $37$hi;
            $38 = $37;
            $38$hi = i64toi32_i32$3;
            i64toi32_i32$2 = $37;
            i64toi32_i32$0 = 0;
            i64toi32_i32$1 = 7;
            i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
             i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
             $63 = 0;
            } else {
             i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
             $63 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
            }
            $365$hi = i64toi32_i32$0;
            i64toi32_i32$0 = $36$hi;
            i64toi32_i32$0 = $365$hi;
            i64toi32_i32$3 = $63;
            i64toi32_i32$2 = $36$hi;
            i64toi32_i32$1 = $36;
            if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
             break label$31
            }
            break label$30;
           }
           $8 = 0;
           $10 = $24;
           label$33 : {
            i64toi32_i32$3 = $36$hi;
            $9 = $36;
            if (($10 << 3 | 0) >>> 0 >= $9 >>> 0) {
             break label$33
            }
            label$34 : while (1) {
             $8 = $8 + 4 | 0;
             $20 = $10 << 7 | 0;
             $10 = $10 << 4 | 0;
             if ($20 >>> 0 < $9 >>> 0) {
              continue label$34
             }
             break label$34;
            };
           }
           if ($10 >>> 0 >= $9 >>> 0) {
            break label$29
           }
           label$35 : while (1) {
            $8 = $8 + 1 | 0;
            $10 = $10 << 1 | 0;
            if ($10 >>> 0 < $9 >>> 0) {
             continue label$35
            }
            break label$29;
           };
          }
          label$36 : while (1) {
           $8 = $8 + 8 | 0;
           i64toi32_i32$3 = $38$hi;
           i64toi32_i32$1 = $38;
           i64toi32_i32$0 = 0;
           i64toi32_i32$2 = 15;
           i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
            i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
            $64 = 0;
           } else {
            i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
            $64 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
           }
           $39 = $64;
           $39$hi = i64toi32_i32$0;
           i64toi32_i32$0 = $38$hi;
           i64toi32_i32$3 = $38;
           i64toi32_i32$1 = 0;
           i64toi32_i32$2 = 8;
           i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
            i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
            $65 = 0;
           } else {
            i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
            $65 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
           }
           $37 = $65;
           $37$hi = i64toi32_i32$1;
           $38 = $37;
           $38$hi = i64toi32_i32$1;
           i64toi32_i32$1 = $39$hi;
           i64toi32_i32$1 = $36$hi;
           i64toi32_i32$1 = $39$hi;
           i64toi32_i32$0 = $39;
           i64toi32_i32$3 = $36$hi;
           i64toi32_i32$2 = $36;
           if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
            continue label$36
           }
           break label$36;
          };
         }
         i64toi32_i32$0 = $37$hi;
         i64toi32_i32$0 = $36$hi;
         i64toi32_i32$0 = $37$hi;
         i64toi32_i32$2 = $37;
         i64toi32_i32$1 = $36$hi;
         i64toi32_i32$3 = $36;
         if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
          break label$29
         }
         label$37 : while (1) {
          $8 = $8 + 1 | 0;
          i64toi32_i32$2 = $37$hi;
          i64toi32_i32$3 = $37;
          i64toi32_i32$0 = 0;
          i64toi32_i32$1 = 1;
          i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
           i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
           $66 = 0;
          } else {
           i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
           $66 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
          }
          $37 = $66;
          $37$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $36$hi;
          i64toi32_i32$0 = $37$hi;
          i64toi32_i32$2 = $37;
          i64toi32_i32$3 = $36$hi;
          i64toi32_i32$1 = $36;
          if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
           continue label$37
          }
          break label$37;
         };
        }
        $8 = $8 >>> 0 < $7 >>> 0 ? $8 : $16;
        $9 = Math_imul($8 + 1 | 0, $24);
        label$38 : {
         label$39 : {
          if (!$8) {
           break label$39
          }
          i64toi32_i32$2 = $36$hi;
          i64toi32_i32$2 = 0;
          $429$hi = i64toi32_i32$2;
          i64toi32_i32$2 = $36$hi;
          i64toi32_i32$1 = $36;
          i64toi32_i32$0 = $429$hi;
          i64toi32_i32$3 = $8 + -1 | 0;
          i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
           i64toi32_i32$0 = 0;
           $67 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
          } else {
           i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
           $67 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
          }
          $19 = $67;
          break label$38;
         }
         i64toi32_i32$0 = $36$hi;
         $19 = $36 << 1 | 0;
        }
        $10 = $21 << 2 | 0;
        $20 = HEAP32[($33 + $10 | 0) >> 2] | 0;
        $444 = $20;
        $20 = $29 + Math_imul($20, $24) | 0;
        $24 = (($22 - ($24 >>> 1 | 0) | 0) + $9 | 0) + $19 | 0;
        $9 = $20 >>> 0 > $24 >>> 0;
        HEAP32[($34 + $10 | 0) >> 2] = $9 ? 0 : $444;
        HEAP32[($14 + $10 | 0) >> 2] = $9 ? $8 : 0;
        $23 = ($9 ? $24 : $20) + $23 | 0;
        $21 = $21 + 1 | 0;
        if (!($21 >>> $1 | 0)) {
         continue label$28
        }
        break label$13;
       };
      }
      $481 = $6;
      $482 = $28;
      i64toi32_i32$2 = $18;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $37 = i64toi32_i32$0;
      $37$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $35$hi;
      i64toi32_i32$1 = $37$hi;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$0 = $35$hi;
      i64toi32_i32$3 = $35;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $68 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
       $68 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
      }
      i64toi32_i32$0 = $37$hi;
      $8 = $482 + ($6 ? $68 : $37 << 1 | 0) | 0;
      $10 = ($8 | 0) == (-1 | 0) ? 0 : $481;
      label$40 : {
       if (!$11) {
        break label$40
       }
       $9 = HEAP32[$33 >> 2] | 0;
       $503 = $9;
       $20 = $29 + Math_imul($9, $4) | 0;
       $9 = $20 >>> 0 > $8 >>> 0;
       HEAP32[$34 >> 2] = $9 ? 0 : $503;
       $8 = $9 ? $8 : $20;
       $10 = $9 ? $10 : 0;
      }
      HEAP32[$14 >> 2] = $10;
      $23 = $8 + $30 | 0;
     }
     $8 = ($27 + -1 | 0) >>> 0 >= $23 >>> 0;
     $25 = $8 ? $1 : $25;
     $26 = $8 ? $32 : $26;
     $27 = $8 ? $23 : $27;
     $14 = $1 + -1 | 0;
     $31 = $31 + (1 << $1 | 0) | 0;
     if (($1 | 0) > ($15 | 0)) {
      continue label$12
     }
     break label$12;
    };
   }
   HEAP32[($12 + 4 | 0) >> 2] = $25;
   $10 = $25 >>> 0 > 6 >>> 0 ? $25 : 6;
  }
  $8 = HEAP32[($12 + 8 | 0) >> 2] | 0;
  FLAC__format_entropy_coding_method_partitioned_rice_contents_ensure_size($8 | 0, $10 | 0) | 0;
  $9 = $0 + Math_imul($26, 12) | 0;
  $10 = 1 << $25 | 0;
  $20 = $10 << 2 | 0;
  memcpy(HEAP32[$8 >> 2] | 0 | 0, HEAP32[($9 + 11724 | 0) >> 2] | 0 | 0, $20 | 0) | 0;
  label$41 : {
   if (!$11) {
    break label$41
   }
   memcpy(HEAP32[($8 + 4 | 0) >> 2] | 0 | 0, HEAP32[($9 + 11728 | 0) >> 2] | 0 | 0, $20 | 0) | 0;
  }
  $20 = $10 >>> 0 > 1 >>> 0 ? $10 : 1;
  $10 = HEAP32[global$53 >> 2] | 0;
  $9 = HEAP32[$8 >> 2] | 0;
  $8 = 0;
  label$42 : {
   label$43 : {
    label$44 : while (1) {
     if ((HEAP32[($9 + ($8 << 2 | 0) | 0) >> 2] | 0) >>> 0 >= $10 >>> 0) {
      break label$43
     }
     $8 = $8 + 1 | 0;
     if (($8 | 0) == ($20 | 0)) {
      break label$42
     }
     continue label$44;
    };
   }
   HEAP32[$12 >> 2] = 1;
  }
  return $27 | 0;
 }
 
 function __set_stack_limit($0) {
  $0 = $0 | 0;
  global$85 = $0;
 }
 
 function stackSave() {
  return global$0 | 0;
 }
 
 function stackAlloc($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  label$1 : {
   $1 = (global$0 - $0 | 0) & -16 | 0;
   $2 = $1;
   if ($1 >>> 0 < global$85 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $2;
  }
  return $1 | 0;
 }
 
 function stackRestore($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = $0;
  if ($1 >>> 0 < global$85 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
 }
 
 function __growWasmMemory($0) {
  $0 = $0 | 0;
  return __wasm_memory_grow($0 | 0) | 0;
 }
 
 function dynCall_iii($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return FUNCTION_TABLE[$0]($1, $2) | 0 | 0;
 }
 
 function dynCall_ii($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return FUNCTION_TABLE[$0]($1) | 0 | 0;
 }
 
 function dynCall_iiii($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  return FUNCTION_TABLE[$0]($1, $2, $3) | 0 | 0;
 }
 
 function dynCall_jiji($0, $1, $2, $2$hi, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = FUNCTION_TABLE[$0]($1, $2, i64toi32_i32$0, $3) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function dynCall_viiiiii($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6);
 }
 
 function dynCall_iiiii($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  return FUNCTION_TABLE[$0]($1, $2, $3, $4) | 0 | 0;
 }
 
 function dynCall_viiiiiii($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6, $7);
 }
 
 function dynCall_viiii($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  FUNCTION_TABLE[$0]($1, $2, $3, $4);
 }
 
 function dynCall_viii($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  FUNCTION_TABLE[$0]($1, $2, $3);
 }
 
 function legalstub$FLAC__stream_encoder_set_total_samples_estimate($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $12 = 0, $3 = 0, $5 = 0, $5$hi = 0, $8$hi = 0;
  $3 = $0;
  i64toi32_i32$0 = 0;
  $5 = $1;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $12 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $12 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $8$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$0 = $5;
  i64toi32_i32$2 = $8$hi;
  i64toi32_i32$3 = $12;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  return FLAC__stream_encoder_set_total_samples_estimate($3 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0) | 0 | 0;
 }
 
 function legalstub$dynCall_jiji($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $17 = 0, $18 = 0, $6 = 0, $7 = 0, $9 = 0, $9$hi = 0, $12$hi = 0, $5 = 0, $5$hi = 0;
  $6 = $0;
  $7 = $1;
  i64toi32_i32$0 = 0;
  $9 = $2;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $17 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $17 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $9$hi;
  i64toi32_i32$0 = $9;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$3 = $17;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  i64toi32_i32$2 = dynCall_jiji($6 | 0, $7 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0, $4 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5 = i64toi32_i32$2;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $18 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $18 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  setTempRet0($18 | 0);
  i64toi32_i32$2 = $5$hi;
  return $5 | 0;
 }
 
 function legalfunc$__wasi_fd_seek($0, $1, $1$hi, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $12 = 0, $4 = 0, $6 = 0, i64toi32_i32$2 = 0;
  $4 = $0;
  i64toi32_i32$0 = $1$hi;
  $6 = $1;
  i64toi32_i32$2 = $1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $12 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $12 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  return legalimport$__wasi_fd_seek($4 | 0, $6 | 0, $12 | 0, $2 | 0, $3 | 0) | 0 | 0;
 }
 
 function legalfunc$wasm2js_scratch_load_i64() {
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $10 = 0, $0 = 0, $1 = 0, $1$hi = 0, $2 = 0, $4$hi = 0;
  $0 = legalimport$wasm2js_scratch_load_i64() | 0;
  i64toi32_i32$0 = 0;
  $1 = $0;
  $1$hi = i64toi32_i32$0;
  $2 = getTempRet0() | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $10 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $10 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $4$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$0 = $1;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$3 = $10;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  i64toi32_i32$0 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$0 | 0;
 }
 
 function legalfunc$wasm2js_scratch_store_i64($0, $0$hi) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8 = 0, $2 = 0, i64toi32_i32$2 = 0;
  i64toi32_i32$0 = $0$hi;
  $2 = $0;
  i64toi32_i32$2 = $0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $8 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $8 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  legalimport$wasm2js_scratch_store_i64($2 | 0, $8 | 0);
 }
 
 function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, var$2 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, var$3 = 0, var$4 = 0, var$5 = 0, $21 = 0, $22 = 0, var$6 = 0, $24 = 0, $17 = 0, $18 = 0, $23 = 0, $29 = 0, $45 = 0, $56$hi = 0, $62$hi = 0;
  i64toi32_i32$0 = var$1$hi;
  var$2 = var$1;
  var$4 = var$2 >>> 16 | 0;
  i64toi32_i32$0 = var$0$hi;
  var$3 = var$0;
  var$5 = var$3 >>> 16 | 0;
  $17 = Math_imul(var$4, var$5);
  $18 = var$2;
  i64toi32_i32$2 = var$3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $21 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $21 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $23 = $17 + Math_imul($18, $21) | 0;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$0 = var$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $22 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $22 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $29 = $23 + Math_imul($22, var$3) | 0;
  var$2 = var$2 & 65535 | 0;
  var$3 = var$3 & 65535 | 0;
  var$6 = Math_imul(var$2, var$3);
  var$2 = (var$6 >>> 16 | 0) + Math_imul(var$2, var$5) | 0;
  $45 = $29 + (var$2 >>> 16 | 0) | 0;
  var$2 = (var$2 & 65535 | 0) + Math_imul(var$4, var$3) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $45 + (var$2 >>> 16 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $56$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $62$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $56$hi;
  i64toi32_i32$2 = $24;
  i64toi32_i32$1 = $62$hi;
  i64toi32_i32$3 = var$2 << 16 | 0 | (var$6 & 65535 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  i64toi32_i32$2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$2 | 0;
 }
 
 function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, var$2 = 0, var$3 = 0, var$4 = 0, var$5 = 0, var$5$hi = 0, var$6 = 0, var$6$hi = 0, i64toi32_i32$6 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, var$8$hi = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, var$7$hi = 0, $51 = 0, $63$hi = 0, $65 = 0, $65$hi = 0, $70 = 0, $119 = 0, $120$hi = 0, $129$hi = 0, $134$hi = 0, var$8 = 0, $140 = 0, $140$hi = 0, $142$hi = 0, $144 = 0, $144$hi = 0, $151 = 0, $151$hi = 0, $154$hi = 0, var$7 = 0, $165$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             i64toi32_i32$0 = var$0$hi;
             i64toi32_i32$2 = var$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$3 = 32;
             i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
             if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = 0;
              $39 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
             } else {
              i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              $39 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
             }
             var$2 = $39;
             if (var$2) {
              block : {
               i64toi32_i32$1 = var$1$hi;
               var$3 = var$1;
               if (!var$3) {
                break label$11
               }
               i64toi32_i32$1 = var$1$hi;
               i64toi32_i32$0 = var$1;
               i64toi32_i32$2 = 0;
               i64toi32_i32$3 = 32;
               i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
               if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$2 = 0;
                $40 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
               } else {
                i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                $40 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
               }
               var$4 = $40;
               if (!var$4) {
                break label$9
               }
               var$2 = Math_clz32(var$4) - Math_clz32(var$2) | 0;
               if (var$2 >>> 0 <= 31 >>> 0) {
                break label$8
               }
               break label$2;
              }
             }
             i64toi32_i32$2 = var$1$hi;
             i64toi32_i32$1 = var$1;
             i64toi32_i32$0 = 1;
             i64toi32_i32$3 = 0;
             if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
              break label$2
             }
             i64toi32_i32$1 = var$0$hi;
             var$2 = var$0;
             i64toi32_i32$1 = var$1$hi;
             var$3 = var$1;
             var$2 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
             i64toi32_i32$1 = 0;
             legalfunc$wasm2js_scratch_store_i64(var$0 - Math_imul(var$2, var$3) | 0 | 0, i64toi32_i32$1 | 0);
             i64toi32_i32$1 = 0;
             i64toi32_i32$2 = var$2;
             i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
             return i64toi32_i32$2 | 0;
            }
            i64toi32_i32$2 = var$1$hi;
            i64toi32_i32$3 = var$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$1 = 0;
             $41 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            } else {
             i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
             $41 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
            }
            var$3 = $41;
            i64toi32_i32$1 = var$0$hi;
            if (!var$0) {
             break label$7
            }
            if (!var$3) {
             break label$6
            }
            var$4 = var$3 + -1 | 0;
            if (var$4 & var$3 | 0) {
             break label$6
            }
            i64toi32_i32$1 = 0;
            i64toi32_i32$2 = var$4 & var$2 | 0;
            i64toi32_i32$3 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
             $42 = 0;
            } else {
             i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
             $42 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
            }
            $63$hi = i64toi32_i32$3;
            i64toi32_i32$3 = var$0$hi;
            i64toi32_i32$1 = var$0;
            i64toi32_i32$2 = 0;
            i64toi32_i32$0 = -1;
            i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
            $65 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
            $65$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $63$hi;
            i64toi32_i32$3 = $42;
            i64toi32_i32$1 = $65$hi;
            i64toi32_i32$0 = $65;
            i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
            legalfunc$wasm2js_scratch_store_i64(i64toi32_i32$3 | i64toi32_i32$0 | 0 | 0, i64toi32_i32$1 | 0);
            $70 = (__wasm_ctz_i32(var$3 | 0) | 0) & 31 | 0;
            i64toi32_i32$1 = 0;
            i64toi32_i32$3 = var$2 >>> $70 | 0;
            i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
            return i64toi32_i32$3 | 0;
           }
          }
          var$4 = var$3 + -1 | 0;
          if (!(var$4 & var$3 | 0)) {
           break label$5
          }
          var$2 = (Math_clz32(var$3) + 33 | 0) - Math_clz32(var$2) | 0;
          var$3 = 0 - var$2 | 0;
          break label$3;
         }
         var$3 = 63 - var$2 | 0;
         var$2 = var$2 + 1 | 0;
         break label$3;
        }
        var$4 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = var$2 - Math_imul(var$4, var$3) | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 32;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         $43 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $43 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        legalfunc$wasm2js_scratch_store_i64($43 | 0, i64toi32_i32$1 | 0);
        i64toi32_i32$1 = 0;
        i64toi32_i32$2 = var$4;
        i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
        return i64toi32_i32$2 | 0;
       }
       var$2 = Math_clz32(var$3) - Math_clz32(var$2) | 0;
       if (var$2 >>> 0 < 31 >>> 0) {
        break label$4
       }
       break label$2;
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      legalfunc$wasm2js_scratch_store_i64(var$4 & var$0 | 0 | 0, i64toi32_i32$2 | 0);
      if ((var$3 | 0) == (1 | 0)) {
       break label$1
      }
      i64toi32_i32$2 = var$0$hi;
      $119 = __wasm_ctz_i32(var$3 | 0) | 0;
      i64toi32_i32$2 = 0;
      $120$hi = i64toi32_i32$2;
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$3 = var$0;
      i64toi32_i32$1 = $120$hi;
      i64toi32_i32$0 = $119;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $44 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $44 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      i64toi32_i32$3 = $44;
      i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
      return i64toi32_i32$3 | 0;
     }
     var$3 = 63 - var$2 | 0;
     var$2 = var$2 + 1 | 0;
    }
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$3 = 0;
    $129$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$2 = var$0;
    i64toi32_i32$1 = $129$hi;
    i64toi32_i32$0 = var$2 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $45 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $45 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    var$5 = $45;
    var$5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$1 = 0;
    $134$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$3 = var$0;
    i64toi32_i32$2 = $134$hi;
    i64toi32_i32$0 = var$3 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $46 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $46 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    var$0 = $46;
    var$0$hi = i64toi32_i32$2;
    label$13 : {
     if (var$2) {
      block3 : {
       i64toi32_i32$2 = var$1$hi;
       i64toi32_i32$1 = var$1;
       i64toi32_i32$3 = -1;
       i64toi32_i32$0 = -1;
       i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       var$8 = i64toi32_i32$4;
       var$8$hi = i64toi32_i32$5;
       label$15 : while (1) {
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$2 = var$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         $47 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
         $47 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
        }
        $140 = $47;
        $140$hi = i64toi32_i32$1;
        i64toi32_i32$1 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = 0;
         $48 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
        } else {
         i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
         $48 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
        }
        $142$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $140$hi;
        i64toi32_i32$1 = $140;
        i64toi32_i32$5 = $142$hi;
        i64toi32_i32$0 = $48;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$5 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
        var$5$hi = i64toi32_i32$5;
        $144 = var$5;
        $144$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$2 = var$8;
        i64toi32_i32$1 = var$5$hi;
        i64toi32_i32$0 = var$5;
        i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        i64toi32_i32$5 = i64toi32_i32$3;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
         $49 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
        } else {
         i64toi32_i32$2 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
         $49 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
        }
        var$6 = $49;
        var$6$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$1$hi;
        i64toi32_i32$2 = var$6$hi;
        i64toi32_i32$4 = var$6;
        i64toi32_i32$5 = var$1$hi;
        i64toi32_i32$0 = var$1;
        i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
        $151 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
        $151$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $144$hi;
        i64toi32_i32$2 = $144;
        i64toi32_i32$4 = $151$hi;
        i64toi32_i32$0 = $151;
        i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
        var$5 = i64toi32_i32$1;
        var$5$hi = i64toi32_i32$3;
        i64toi32_i32$3 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
         $50 = 0;
        } else {
         i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $50 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
        }
        $154$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$7$hi;
        i64toi32_i32$2 = $154$hi;
        i64toi32_i32$3 = $50;
        i64toi32_i32$5 = var$7$hi;
        i64toi32_i32$0 = var$7;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
        var$0$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$6$hi;
        i64toi32_i32$2 = var$6;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
        var$6 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
        var$6$hi = i64toi32_i32$3;
        var$7 = var$6;
        var$7$hi = i64toi32_i32$3;
        var$2 = var$2 + -1 | 0;
        if (var$2) {
         continue label$15
        }
        break label$15;
       };
       break label$13;
      }
     }
    }
    i64toi32_i32$3 = var$5$hi;
    legalfunc$wasm2js_scratch_store_i64(var$5 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$5 = var$0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $51 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $51 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $165$hi = i64toi32_i32$2;
    i64toi32_i32$2 = var$6$hi;
    i64toi32_i32$2 = $165$hi;
    i64toi32_i32$3 = $51;
    i64toi32_i32$5 = var$6$hi;
    i64toi32_i32$0 = var$6;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
    return i64toi32_i32$3 | 0;
   }
   i64toi32_i32$3 = var$0$hi;
   legalfunc$wasm2js_scratch_store_i64(var$0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$3 = 0;
   var$0 = 0;
   var$0$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = var$0$hi;
  i64toi32_i32$5 = var$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
  return i64toi32_i32$5 | 0;
 }
 
 function __wasm_ctz_i32(var$0) {
  var$0 = var$0 | 0;
  if (var$0) {
   return 31 - Math_clz32((var$0 + -1 | 0) ^ var$0 | 0) | 0 | 0
  }
  return 32 | 0;
 }
 
 function __wasm_i64_mul(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_udiv(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_urem(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$0 = legalfunc$wasm2js_scratch_load_i64() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function __wasm_rotl_i32(var$0, var$1) {
  var$0 = var$0 | 0;
  var$1 = var$1 | 0;
  var var$2 = 0;
  var$2 = var$1 & 31 | 0;
  var$1 = (0 - var$1 | 0) & 31 | 0;
  return ((-1 >>> var$2 | 0) & var$0 | 0) << var$2 | 0 | (((-1 << var$1 | 0) & var$0 | 0) >>> var$1 | 0) | 0 | 0;
 }
 
 // EMSCRIPTEN_END_FUNCS
;
 FUNCTION_TABLE[1] = seekpoint_compare_;
 FUNCTION_TABLE[2] = __stdio_close;
 FUNCTION_TABLE[3] = __stdio_read;
 FUNCTION_TABLE[4] = __stdio_seek;
 FUNCTION_TABLE[5] = FLAC__lpc_restore_signal;
 FUNCTION_TABLE[6] = FLAC__lpc_restore_signal_wide;
 FUNCTION_TABLE[7] = read_callback_;
 FUNCTION_TABLE[8] = read_callback_proxy_;
 FUNCTION_TABLE[9] = __emscripten_stdout_close;
 FUNCTION_TABLE[10] = __stdio_write;
 FUNCTION_TABLE[11] = __emscripten_stdout_seek;
 FUNCTION_TABLE[12] = FLAC__lpc_compute_residual_from_qlp_coefficients;
 FUNCTION_TABLE[13] = FLAC__lpc_compute_residual_from_qlp_coefficients_wide;
 FUNCTION_TABLE[14] = FLAC__fixed_compute_best_predictor_wide;
 FUNCTION_TABLE[15] = FLAC__fixed_compute_best_predictor;
 FUNCTION_TABLE[16] = precompute_partition_info_sums_;
 FUNCTION_TABLE[17] = FLAC__lpc_compute_autocorrelation;
 FUNCTION_TABLE[18] = verify_read_callback_;
 FUNCTION_TABLE[19] = verify_write_callback_;
 FUNCTION_TABLE[20] = verify_metadata_callback_;
 FUNCTION_TABLE[21] = verify_error_callback_;
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 function __wasm_memory_grow(pagesToAdd) {
  pagesToAdd = pagesToAdd | 0;
  var oldPages = __wasm_memory_size() | 0;
  var newPages = oldPages + pagesToAdd | 0;
  if ((oldPages < newPages) && (newPages < 65536)) {
   var newBuffer = new ArrayBuffer(Math_imul(newPages, 65536));
   var newHEAP8 = new global.Int8Array(newBuffer);
   newHEAP8.set(HEAP8);
   HEAP8 = newHEAP8;
   HEAP8 = new global.Int8Array(newBuffer);
   HEAP16 = new global.Int16Array(newBuffer);
   HEAP32 = new global.Int32Array(newBuffer);
   HEAPU8 = new global.Uint8Array(newBuffer);
   HEAPU16 = new global.Uint16Array(newBuffer);
   HEAPU32 = new global.Uint32Array(newBuffer);
   HEAPF32 = new global.Float32Array(newBuffer);
   HEAPF64 = new global.Float64Array(newBuffer);
   buffer = newBuffer;
   memory.buffer = newBuffer;
  }
  return oldPages;
 }
 
 return {
  "__wasm_call_ctors": __wasm_call_ctors, 
  "FLAC__stream_decoder_new": FLAC__stream_decoder_new, 
  "FLAC__stream_decoder_delete": FLAC__stream_decoder_delete, 
  "FLAC__stream_decoder_finish": FLAC__stream_decoder_finish, 
  "FLAC__stream_decoder_init_stream": FLAC__stream_decoder_init_stream, 
  "FLAC__stream_decoder_reset": FLAC__stream_decoder_reset, 
  "FLAC__stream_decoder_init_ogg_stream": FLAC__stream_decoder_init_ogg_stream, 
  "FLAC__stream_decoder_set_ogg_serial_number": FLAC__stream_decoder_set_ogg_serial_number, 
  "FLAC__stream_decoder_set_md5_checking": FLAC__stream_decoder_set_md5_checking, 
  "FLAC__stream_decoder_get_state": FLAC__stream_decoder_get_state, 
  "FLAC__stream_decoder_get_md5_checking": FLAC__stream_decoder_get_md5_checking, 
  "FLAC__stream_decoder_process_single": FLAC__stream_decoder_process_single, 
  "FLAC__stream_decoder_process_until_end_of_metadata": FLAC__stream_decoder_process_until_end_of_metadata, 
  "FLAC__stream_decoder_process_until_end_of_stream": FLAC__stream_decoder_process_until_end_of_stream, 
  "FLAC__stream_encoder_new": FLAC__stream_encoder_new, 
  "FLAC__stream_encoder_delete": FLAC__stream_encoder_delete, 
  "FLAC__stream_encoder_finish": FLAC__stream_encoder_finish, 
  "FLAC__stream_encoder_init_stream": FLAC__stream_encoder_init_stream, 
  "FLAC__stream_encoder_init_ogg_stream": FLAC__stream_encoder_init_ogg_stream, 
  "FLAC__stream_encoder_set_ogg_serial_number": FLAC__stream_encoder_set_ogg_serial_number, 
  "FLAC__stream_encoder_set_verify": FLAC__stream_encoder_set_verify, 
  "FLAC__stream_encoder_set_channels": FLAC__stream_encoder_set_channels, 
  "FLAC__stream_encoder_set_bits_per_sample": FLAC__stream_encoder_set_bits_per_sample, 
  "FLAC__stream_encoder_set_sample_rate": FLAC__stream_encoder_set_sample_rate, 
  "FLAC__stream_encoder_set_compression_level": FLAC__stream_encoder_set_compression_level, 
  "FLAC__stream_encoder_set_blocksize": FLAC__stream_encoder_set_blocksize, 
  "FLAC__stream_encoder_set_total_samples_estimate": legalstub$FLAC__stream_encoder_set_total_samples_estimate, 
  "FLAC__stream_encoder_get_state": FLAC__stream_encoder_get_state, 
  "FLAC__stream_encoder_process_interleaved": FLAC__stream_encoder_process_interleaved, 
  "__errno_location": __errno_location, 
  "fflush": fflush, 
  "malloc": dlmalloc, 
  "free": dlfree, 
  "__set_stack_limit": __set_stack_limit, 
  "stackSave": stackSave, 
  "stackAlloc": stackAlloc, 
  "stackRestore": stackRestore, 
  "__growWasmMemory": __growWasmMemory, 
  "dynCall_iii": dynCall_iii, 
  "dynCall_ii": dynCall_ii, 
  "dynCall_iiii": dynCall_iiii, 
  "dynCall_jiji": legalstub$dynCall_jiji, 
  "dynCall_viiiiii": dynCall_viiiiii, 
  "dynCall_iiiii": dynCall_iiiii, 
  "dynCall_viiiiiii": dynCall_viiiiiii, 
  "dynCall_viiii": dynCall_viiii, 
  "dynCall_viii": dynCall_viii
 };
}

for (var base64ReverseLookup = new Uint8Array(123/*'z'+1*/), i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2);
    if (b64[bLength-2] == '=') --end;
    if (b64[bLength-1] == '=') --end;
    for (; i < bLength; i += 4, j += 3) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j+1 < end) uint8Array[j+1] = b1 << 4 | b2 >> 2;
      if (j+2 < end) uint8Array[j+2] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
  }
var bufferView = new Uint8Array(wasmMemory.buffer);
base64DecodeToExistingUint8Array(bufferView, 1024, "");
base64DecodeToExistingUint8Array(bufferView, 10864, "ARkAAAYZAAAJAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAABAAAADgvAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAAAAAAAAAAAAJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAACwAAAEgzAAAABAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAK/////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIKwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAAAAAJKgAAAQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAAAAAAAkqAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAACSoAAAAAAAAAAAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAJKgAAAQAAAAEAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAkqAAABAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAAAAAAAACSoAAAEAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgAAAAAAAAAVKgAAAQAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAAAAAABUqAAABAAAAAAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAAAAAAAAAMioAAA==");
base64DecodeToExistingUint8Array(bufferView
return asmFunc({
    'Int8Array': Int8Array,
    'Int16Array': Int16Array,
    'Int32Array': Int32Array,
    'Uint8Array': Uint8Array,
    'Uint16Array': Uint16Array,
    'Uint32Array': Uint32Array,
    'Float32Array': Float32Array,
    'Float64Array': Float64Array,
    'NaN': NaN,
    'Infinity': Infinity,
    'Math': Math
  },
  asmLibraryArg,
  wasmMemory.buffer
)

}
)(asmLibraryArg, wasmMemory, wasmTable);
    return {
      'exports': exports
    };
  },

  instantiate: /** @suppress{checkTypes} */ function(binary, info) {
    return {
      then: function(ok) {
        ok({
          'instance': new WebAssembly.Instance(new WebAssembly.Module(binary))
        });
        // Emulate a simple WebAssembly.instantiate(..).then(()=>{}).catch(()=>{}) syntax.
        return { catch: function() {} };
      }
    };
  },

  RuntimeError: Error
};

// We don't need to actually download a wasm binary, mark it as present but empty.
wasmBinary = [];



if (typeof WebAssembly !== 'object') {
  abort('No WebAssembly support found. Build with -s WASM=0 to target JavaScript instead.');
}


// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @param {number} ptr
    @param {number} value
    @param {string} type
    @param {number|boolean=} noSafe */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @param {number} ptr
    @param {string} type
    @param {number|boolean=} noSafe */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}





// Wasm globals

var wasmMemory;

// In fastcomp asm.js, we don't need a wasm Table at all.
// In the wasm backend, we polyfill the WebAssembly object,
// so this creates a (non-native-wasm) table for us.
var wasmTable = new WebAssembly.Table({
  'initial': 22,
  'maximum': 22 + 5,
  'element': 'anyfunc'
});


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
/** @param {Array=} argTypes
    @param {Arguments|Array=} args
    @param {Object=} opts */
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);

  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

/** @param {Array=} argTypes
    @param {Object=} opts */
function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}


// runtime_strings.js: Strings related runtime functions that are part of both MINIMAL_RUNTIME and regular runtime.

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (u8Array[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = u8Array[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (u8Array[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).');
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}



// runtime_strings_extra.js: Strings related runtime functions that are available only in regular runtime.

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;

function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated
    @param {boolean=} dontAddNull */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

/** @param {boolean=} dontAddNull */
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}



// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var STATIC_BASE = 1024,
    STACK_BASE = 5257200,
    STACKTOP = STACK_BASE,
    STACK_MAX = 14320,
    DYNAMIC_BASE = 5257200,
    DYNAMICTOP_PTR = 14160;

assert(STACK_BASE % 16 === 0, 'stack must start aligned');
assert(DYNAMIC_BASE % 16 === 0, 'heap must start aligned');



var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 16777216;if (!Object.getOwnPropertyDescriptor(Module, 'INITIAL_MEMORY')) Object.defineProperty(Module, 'INITIAL_MEMORY', { configurable: true, get: function() { abort('Module.INITIAL_MEMORY has been replaced with plain INITIAL_INITIAL_MEMORY') } });

assert(INITIAL_INITIAL_MEMORY >= TOTAL_STACK, 'INITIAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_INITIAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');






// In standalone mode, the wasm creates the memory, and the user can't provide it.
// In non-standalone/normal mode, we create the memory here.

// Create the main memory. (Note: this isn't used in STANDALONE_WASM mode since the wasm
// memory is created in the wasm, not in JS.)

  if (Module['wasmMemory']) {
    wasmMemory = Module['wasmMemory'];
  } else
  {
    wasmMemory = new WebAssembly.Memory({
      'initial': INITIAL_INITIAL_MEMORY / WASM_PAGE_SIZE
    });
  }


if (wasmMemory) {
  buffer = wasmMemory.buffer;
}

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['INITIAL_MEMORY'].
INITIAL_INITIAL_MEMORY = buffer.byteLength;
assert(INITIAL_INITIAL_MEMORY % WASM_PAGE_SIZE === 0);
updateGlobalBufferAndViews(buffer);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;




// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  // The stack grows downwards
  HEAPU32[(STACK_MAX >> 2)+1] = 0x2135467;
  HEAPU32[(STACK_MAX >> 2)+2] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  HEAP32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  var cookie1 = HEAPU32[(STACK_MAX >> 2)+1];
  var cookie2 = HEAPU32[(STACK_MAX >> 2)+2];
  if (cookie1 != 0x2135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x' + cookie2.toString(16) + ' ' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}




// Endianness check (note: assumes compiler arch was little-endian)
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';
})();

function abortFnPtrError(ptr, sig) {
	abort("Invalid function pointer " + ptr + " called with signature '" + sig + "'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this). Build with ASSERTIONS=2 for more info.");
}



function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  checkStackCookie();
  assert(!runtimeInitialized);
  runtimeInitialized = true;
  if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  FS.ignorePermissions = false;
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

/** @param {number|boolean=} ignore */
function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
/** @param {number|boolean=} ignore */
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


/** @param {string|number=} what */
function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  out(what);
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  var output = 'abort(' + what + ') at ' + stackTrace();
  what = output;

  // Throw a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  throw new WebAssembly.RuntimeError(what);
}


var memoryInitializer = null;








// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}




var wasmBinaryFile = 'libflac.dev.wasm';
if (!isDataURI(wasmBinaryFile)) {
  wasmBinaryFile = locateFile(wasmBinaryFile);
}

function getBinary() {
  try {
    if (wasmBinary) {
      return new Uint8Array(wasmBinary);
    }

    var binary = tryParseAsDataURI(wasmBinaryFile);
    if (binary) {
      return binary;
    }
    if (readBinary) {
      return readBinary(wasmBinaryFile);
    } else {
      throw "both async and sync fetching of the wasm failed";
    }
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // if we don't have the binary yet, and have the Fetch api, use that
  // in some environments, like Electron's render process, Fetch api may be present, but have a different context than expected, let's only use it on the Web
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === 'function') {
    return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
      if (!response['ok']) {
        throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
      }
      return response['arrayBuffer']();
    }).catch(function () {
      return getBinary();
    });
  }
  // Otherwise, getBinary should be able to get it synchronously
  return new Promise(function(resolve, reject) {
    resolve(getBinary());
  });
}



// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': asmLibraryArg,
    'wasi_snapshot_preview1': asmLibraryArg
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    var exports = instance.exports;
    Module['asm'] = exports;
    removeRunDependency('wasm-instantiate');
  }
   // we can't run yet (except in a pthread, where we have a custom sync instantiator)
  addRunDependency('wasm-instantiate');


  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiatedSource(output) {
    // 'output' is a WebAssemblyInstantiatedSource object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
      // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
      // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(output['instance']);
  }


  function instantiateArrayBuffer(receiver) {
    return getBinaryPromise().then(function(binary) {
      return WebAssembly.instantiate(binary, info);
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);
      abort(reason);
    });
  }

  // Prefer streaming instantiation if available.
  function instantiateAsync() {
    if (!wasmBinary &&
        typeof WebAssembly.instantiateStreaming === 'function' &&
        !isDataURI(wasmBinaryFile) &&
        typeof fetch === 'function') {
      fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function (response) {
        var result = WebAssembly.instantiateStreaming(response, info);
        return result.then(receiveInstantiatedSource, function(reason) {
            // We expect the most common failure cause to be a bad MIME type for the binary,
            // in which case falling back to ArrayBuffer instantiation should work.
            err('wasm streaming compile failed: ' + reason);
            err('falling back to ArrayBuffer instantiation');
            instantiateArrayBuffer(receiveInstantiatedSource);
          });
      });
    } else {
      return instantiateArrayBuffer(receiveInstantiatedSource);
    }
  }
  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  if (Module['instantiateWasm']) {
    try {
      var exports = Module['instantiateWasm'](info, receiveInstance);
      return exports;
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
      return false;
    }
  }

  instantiateAsync();
  return {}; // no exports yet; we'll fill them in later
}


// Globals used by JS i64 conversions
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = {
  
};




// STATICTOP = STATIC_BASE + 13296;
/* global initializers */  __ATINIT__.push({ func: function() { ___wasm_call_ctors() } });




/* no memory initializer */
// {{PRE_LIBRARY}}


  function demangle(func) {
      warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b_Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  function jsStackTrace() {
      var err = new Error();
      if (!err.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error();
        } catch(e) {
          err = e;
        }
        if (!err.stack) {
          return '(no stack trace available)';
        }
      }
      return err.stack.toString();
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  function ___handle_stack_overflow() {
      abort('stack overflow')
    }

  function _abort() {
      abort();
    }

  function _emscripten_get_sbrk_ptr() {
      return 14160;
    }

  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.copyWithin(dest, src, src + num);
    }

  
  function _emscripten_get_heap_size() {
      return HEAPU8.length;
    }
  
  function emscripten_realloc_buffer(size) {
      try {
        // round size grow request up to wasm page size (fixed 64KB per spec)
        wasmMemory.grow((size - buffer.byteLength + 65535) >> 16); // .grow() takes a delta compared to the previous size
        updateGlobalBufferAndViews(wasmMemory.buffer);
        return 1 /*success*/;
      } catch(e) {
        console.error('emscripten_realloc_buffer: Attempted to grow heap from ' + buffer.byteLength  + ' bytes to ' + size + ' bytes, but got error: ' + e);
      }
    }function _emscripten_resize_heap(requestedSize) {
      var oldSize = _emscripten_get_heap_size();
      // With pthreads, races can happen (another thread might increase the size in between), so return a failure, and let the caller retry.
      assert(requestedSize > oldSize);
  
  
      var PAGE_MULTIPLE = 65536;
  
      // Memory resize rules:
      // 1. When resizing, always produce a resized heap that is at least 16MB (to avoid tiny heap sizes receiving lots of repeated resizes at startup)
      // 2. Always increase heap size to at least the requested size, rounded up to next page multiple.
      // 3a. If MEMORY_GROWTH_LINEAR_STEP == -1, excessively resize the heap geometrically: increase the heap size according to 
      //                                         MEMORY_GROWTH_GEOMETRIC_STEP factor (default +20%),
      //                                         At most overreserve by MEMORY_GROWTH_GEOMETRIC_CAP bytes (default 96MB).
      // 3b. If MEMORY_GROWTH_LINEAR_STEP != -1, excessively resize the heap linearly: increase the heap size by at least MEMORY_GROWTH_LINEAR_STEP bytes.
      // 4. Max size for the heap is capped at 2048MB-PAGE_MULTIPLE, or by MAXIMUM_MEMORY, or by ASAN limit, depending on which is smallest
      // 5. If we were unable to allocate as much memory, it may be due to over-eager decision to excessively reserve due to (3) above.
      //    Hence if an allocation fails, cut down on the amount of excess growth, in an attempt to succeed to perform a smaller allocation.
  
      var maxHeapSize = 2147483648 - PAGE_MULTIPLE;
      if (requestedSize > maxHeapSize) {
        err('Cannot enlarge memory, asked to go up to ' + requestedSize + ' bytes, but the limit is ' + maxHeapSize + ' bytes!');
        return false;
      }
  
      var minHeapSize = 16777216;
  
      // Loop through potential heap size increases. If we attempt a too eager reservation that fails, cut down on the
      // attempted size and reserve a smaller bump instead. (max 3 times, chosen somewhat arbitrarily)
      for(var cutDown = 1; cutDown <= 4; cutDown *= 2) {
        var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown); // ensure geometric growth
        // but limit overreserving (default to capping at +96MB overgrowth at most)
        overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296 );
  
  
        var newSize = Math.min(maxHeapSize, alignUp(Math.max(minHeapSize, requestedSize, overGrownHeapSize), PAGE_MULTIPLE));
  
        var replacement = emscripten_realloc_buffer(newSize);
        if (replacement) {
          err('Warning: Enlarging memory arrays, this is not fast! ' + [oldSize, newSize]);
  
          return true;
        }
      }
      err('Failed to grow the heap from ' + oldSize + ' bytes to ' + newSize + ' bytes, not enough memory!');
      return false;
    }

  
  
  var PATH={splitPath:function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function(path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function(path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function(path) {
        return PATH.splitPath(path)[3];
      },join:function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function(l, r) {
        return PATH.normalize(l + '/' + r);
      }};
  
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else err('failed to set errno from JS');
      return value;
    }
  
  var PATH_FS={resolve:function() {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function(from, to) {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function(stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function(stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function(tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = Buffer.alloc ? Buffer.alloc(BUFSIZE) : new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              try {
                bytesRead = nodeFS.readSync(process.stdin.fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function(mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(63);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function(node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function(node) {
        if (!node.contents) return new Uint8Array(0);
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function(node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
        return;
      },resizeFileStorage:function(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newSize); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function(parent, name) {
          throw FS.genericErrors[44];
        },mknod:function(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function(old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function(parent, name) {
          delete parent.contents[name];
        },rmdir:function(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
        },readdir:function(node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        }},stream_ops:{read:function(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function(stream, buffer, offset, length, position, canOwn) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
          // If the buffer is located in main memory (HEAP), and if
          // memory can grow, we can't hold on to references of the
          // memory buffer, as they may get invalidated. That means we
          // need to do copy its contents.
          if (buffer.buffer === HEAP8.buffer) {
            // FIXME: this is inefficient as the file packager may have
            //        copied the data into memory already - we may want to
            //        integrate more there and let the file packager loading
            //        code be able to query if memory growth is on or off.
            if (canOwn) {
              warnOnce('file packager has copied file data into memory, but in memory growth we are forced to copy it again (see --no-heap-copy)');
            }
            canOwn = false;
          }
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = buffer.slice(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },allocate:function(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function(stream, buffer, offset, length, position, prot, flags) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                contents.buffer === buffer.buffer ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            // malloc() can lead to growing the heap. If targeting the heap, we need to
            // re-acquire the heap buffer object in case growth had occurred.
            var fromHeap = (buffer.buffer == HEAP8.buffer);
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            (fromHeap ? HEAP8 : buffer).set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function(stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var ERRNO_MESSAGES={0:"Success",1:"Arg list too long",2:"Permission denied",3:"Address already in use",4:"Address not available",5:"Address family not supported by protocol family",6:"No more processes",7:"Socket already connected",8:"Bad file number",9:"Trying to read unreadable message",10:"Mount device busy",11:"Operation canceled",12:"No children",13:"Connection aborted",14:"Connection refused",15:"Connection reset by peer",16:"File locking deadlock error",17:"Destination address required",18:"Math arg out of domain of func",19:"Quota exceeded",20:"File exists",21:"Bad address",22:"File too large",23:"Host is unreachable",24:"Identifier removed",25:"Illegal byte sequence",26:"Connection already in progress",27:"Interrupted system call",28:"Invalid argument",29:"I/O error",30:"Socket is already connected",31:"Is a directory",32:"Too many symbolic links",33:"Too many open files",34:"Too many links",35:"Message too long",36:"Multihop attempted",37:"File or path name too long",38:"Network interface is not configured",39:"Connection reset by network",40:"Network is unreachable",41:"Too many open files in system",42:"No buffer space available",43:"No such device",44:"No such file or directory",45:"Exec format error",46:"No record locks available",47:"The link has been severed",48:"Not enough core",49:"No message of desired type",50:"Protocol not available",51:"No space left on device",52:"Function not implemented",53:"Socket is not connected",54:"Not a directory",55:"Directory not empty",56:"State not recoverable",57:"Socket operation on non-socket",59:"Not a typewriter",60:"No such device or address",61:"Value too large for defined data type",62:"Previous owner died",63:"Not super-user",64:"Broken pipe",65:"Protocol error",66:"Unknown protocol",67:"Protocol wrong type for socket",68:"Math result not representable",69:"Read only file system",70:"Illegal seek",71:"No such process",72:"Stale file handle",73:"Connection timed out",74:"Text file busy",75:"Cross-device link",100:"Device not a stream",101:"Bad font file fmt",102:"Invalid slot",103:"Invalid request code",104:"No anode",105:"Block device required",106:"Channel number out of range",107:"Level 3 halted",108:"Level 3 reset",109:"Link number out of range",110:"Protocol driver not attached",111:"No CSI structure available",112:"Level 2 halted",113:"Invalid exchange",114:"Invalid request descriptor",115:"Exchange full",116:"No data (for no delay io)",117:"Timer expired",118:"Out of streams resources",119:"Machine is not on the network",120:"Package not installed",121:"The object is remote",122:"Advertise error",123:"Srmount error",124:"Communication error on send",125:"Cross mount point (not really error)",126:"Given log. name not unique",127:"f.d. invalid for this operation",128:"Remote address changed",129:"Can   access a needed shared lib",130:"Accessing a corrupted shared lib",131:".lib section in a.out corrupted",132:"Attempting to link in too many libs",133:"Attempting to exec a shared library",135:"Streams pipe error",136:"Too many users",137:"Socket type not supported",138:"Not supported",139:"Protocol family not supported",140:"Can't send after socket shutdown",141:"Too many references",142:"Host is down",148:"No medium (in tape drive)",156:"Level 2 not synchronized"};
  
  var ERRNO_CODES={EPERM:63,ENOENT:44,ESRCH:71,EINTR:27,EIO:29,ENXIO:60,E2BIG:1,ENOEXEC:45,EBADF:8,ECHILD:12,EAGAIN:6,EWOULDBLOCK:6,ENOMEM:48,EACCES:2,EFAULT:21,ENOTBLK:105,EBUSY:10,EEXIST:20,EXDEV:75,ENODEV:43,ENOTDIR:54,EISDIR:31,EINVAL:28,ENFILE:41,EMFILE:33,ENOTTY:59,ETXTBSY:74,EFBIG:22,ENOSPC:51,ESPIPE:70,EROFS:69,EMLINK:34,EPIPE:64,EDOM:18,ERANGE:68,ENOMSG:49,EIDRM:24,ECHRNG:106,EL2NSYNC:156,EL3HLT:107,EL3RST:108,ELNRNG:109,EUNATCH:110,ENOCSI:111,EL2HLT:112,EDEADLK:16,ENOLCK:46,EBADE:113,EBADR:114,EXFULL:115,ENOANO:104,EBADRQC:103,EBADSLT:102,EDEADLOCK:16,EBFONT:101,ENOSTR:100,ENODATA:116,ETIME:117,ENOSR:118,ENONET:119,ENOPKG:120,EREMOTE:121,ENOLINK:47,EADV:122,ESRMNT:123,ECOMM:124,EPROTO:65,EMULTIHOP:36,EDOTDOT:125,EBADMSG:9,ENOTUNIQ:126,EBADFD:127,EREMCHG:128,ELIBACC:129,ELIBBAD:130,ELIBSCN:131,ELIBMAX:132,ELIBEXEC:133,ENOSYS:52,ENOTEMPTY:55,ENAMETOOLONG:37,ELOOP:32,EOPNOTSUPP:138,EPFNOSUPPORT:139,ECONNRESET:15,ENOBUFS:42,EAFNOSUPPORT:5,EPROTOTYPE:67,ENOTSOCK:57,ENOPROTOOPT:50,ESHUTDOWN:140,ECONNREFUSED:14,EADDRINUSE:3,ECONNABORTED:13,ENETUNREACH:40,ENETDOWN:38,ETIMEDOUT:73,EHOSTDOWN:142,EHOSTUNREACH:23,EINPROGRESS:26,EALREADY:7,EDESTADDRREQ:17,EMSGSIZE:35,EPROTONOSUPPORT:66,ESOCKTNOSUPPORT:137,EADDRNOTAVAIL:4,ENETRESET:39,EISCONN:30,ENOTCONN:53,ETOOMANYREFS:141,EUSERS:136,EDQUOT:19,ESTALE:72,ENOTSUP:138,ENOMEDIUM:148,EILSEQ:25,EOVERFLOW:61,ECANCELED:11,ENOTRECOVERABLE:56,EOWNERDEAD:62,ESTRPIPE:135};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function(e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function(path, opts) {
        path = PATH_FS.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(32);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(32);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function(node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function(parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function(parent, name) {
        var errCode = FS.mayLookup(parent);
        if (errCode) {
          throw new FS.ErrnoError(errCode, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function(parent, name, mode, rdev) {
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function(node) {
        FS.hashRemoveNode(node);
      },isRoot:function(node) {
        return node === node.parent;
      },isMountpoint:function(node) {
        return !!node.mounted;
      },isFile:function(mode) {
        return (mode & 61440) === 32768;
      },isDir:function(mode) {
        return (mode & 61440) === 16384;
      },isLink:function(mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function(mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function(mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function(mode) {
        return (mode & 61440) === 4096;
      },isSocket:function(mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function(str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function(flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function(node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 2;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 2;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },mayLookup:function(dir) {
        var errCode = FS.nodePermissions(dir, 'x');
        if (errCode) return errCode;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },mayCreate:function(dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function(dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var errCode = FS.nodePermissions(dir, 'wx');
        if (errCode) {
          return errCode;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },mayOpen:function(node, flags) {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function(fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },getStream:function(fd) {
        return FS.streams[fd];
      },createStream:function(stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = /** @constructor */ function(){};
          FS.FSStream.prototype = {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          };
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function(fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function(stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function() {
          throw new FS.ErrnoError(70);
        }},major:function(dev) {
        return ((dev) >> 8);
      },minor:function(dev) {
        return ((dev) & 0xff);
      },makedev:function(ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function(dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function(dev) {
        return FS.devices[dev];
      },getMounts:function(mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function(populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          err('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(errCode) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(errCode);
        }
  
        function done(errCode) {
          if (errCode) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(errCode);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function(type, opts, mountpoint) {
        if (typeof type === 'string') {
          // The filesystem was not included, and instead we have an error
          // message stored in the variable.
          throw type;
        }
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function(parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function(path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.mayCreate(parent, name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function(path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function(path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function(path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 20) throw e;
          }
        }
      },mkdev:function(path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function(oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var errCode = FS.mayCreate(parent, newname);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(10);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(28);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(55);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var errCode = FS.mayDelete(old_dir, old_name, isdir);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        errCode = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(10);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          errCode = FS.nodePermissions(old_dir, 'w');
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          err("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, true);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(54);
        }
        return node.node_ops.readdir(node);
      },unlink:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, false);
        if (errCode) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function(path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(63);
        }
        return node.node_ops.getattr(node);
      },lstat:function(path) {
        return FS.stat(path, true);
      },chmod:function(path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function(path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function(fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chmod(stream.node, mode);
      },chown:function(path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function(path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function(fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function(path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.nodePermissions(node, 'w');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function(fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.truncate(stream.node, len);
      },utime:function(path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function(path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(20);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var errCode = FS.mayOpen(node, flags);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            err("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          err("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function(stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function(stream) {
        return stream.fd === null;
      },llseek:function(stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function(stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function(stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          err("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function(stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(28);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(138);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function(stream, buffer, offset, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function(stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function(stream) {
        return 0;
      },ioctl:function(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function(path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function(path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function() {
        return FS.currentPath;
      },chdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var errCode = FS.nodePermissions(lookup.node, 'x');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function() {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function() {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else
        if (ENVIRONMENT_IS_NODE) {
          // for nodejs with or without crypto support included
          try {
            var crypto_module = require('crypto');
            // nodejs has crypto support
            random_device = function() { return crypto_module['randomBytes'](1)[0]; };
          } catch (e) {
            // nodejs doesn't have crypto support
          }
        } else
        {}
        if (!random_device) {
          // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
          random_device = function() { abort("no cryptographic support found for random_device. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };"); };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function() {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(8);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function() {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        var stdout = FS.open('/dev/stdout', 'w');
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function() {
        if (FS.ErrnoError) return;
        FS.ErrnoError = /** @this{Object} */ function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = /** @this{Object} */ function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
  
          // Try to get a maximally helpful stack trace. On Node.js, getting Error.stack
          // now ensures it shows what we want.
          if (this.stack) {
            // Define the stack property for Node.js 4, which otherwise errors on the next line.
            Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
            this.stack = demangleAll(this.stack);
          }
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [44].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function() {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
        };
      },init:function(input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function() {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function(canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function(parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function(relative, base) {
        return PATH_FS.resolve(base, relative);
      },standardizePath:function(path) {
        return PATH.normalize(path);
      },findObject:function(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function(path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function(parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function(parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function(parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function(parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function(parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (read_) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(read_(obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(29);
        return success;
      },createLazyFile:function(parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        /** @constructor */
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = /** @this{Object} */ function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        };
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        };
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(/** @type{Array<number>} */(xhr.response || []));
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            out("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        };
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: /** @this{Object} */ function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: /** @this{Object} */ function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: /** @this {FSNode} */ function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(29);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(29);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function() {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function() {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          out('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={mappings:{},DEFAULT_POLLMASK:5,umask:511,calculateAt:function(dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(8);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function(func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -54;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)]=tempI64[0],HEAP32[(((buf)+(44))>>2)]=tempI64[1]);
        HEAP32[(((buf)+(48))>>2)]=4096;
        HEAP32[(((buf)+(52))>>2)]=stat.blocks;
        HEAP32[(((buf)+(56))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(76))>>2)]=0;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(80))>>2)]=tempI64[0],HEAP32[(((buf)+(84))>>2)]=tempI64[1]);
        return 0;
      },doMsync:function(addr, stream, len, flags, offset) {
        var buffer = HEAPU8.slice(addr, addr + len);
        FS.msync(stream, buffer, offset, len, flags);
      },doMkdir:function(path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function(path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -28;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function(path, buf, bufsize) {
        if (bufsize <= 0) return -28;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function(path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -28;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        if (!node) {
          return -44;
        }
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -2;
        }
        return 0;
      },doDup:function(path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:undefined,get:function() {
        assert(SYSCALLS.varargs != undefined);
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      },getStreamFromFD:function(fd) {
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(8);
        return stream;
      },get64:function(low, high) {
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      }};function _fd_close(fd) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_read(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doReadv(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var HIGH_OFFSET = 0x100000000; // 2^32
      // use an unsigned operator on low and shift high by 32-bits
      var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
  
      var DOUBLE_LIMIT = 0x20000000000000; // 2^53
      // we also check for equality since DOUBLE_LIMIT + 1 == DOUBLE_LIMIT
      if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
        return -61;
      }
  
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((newOffset)>>2)]=tempI64[0],HEAP32[(((newOffset)+(4))>>2)]=tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_write(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doWritev(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  
  function _round(d) {
      d = +d;
      return d >= +0 ? +Math_floor(d + +0.5) : +Math_ceil(d - +0.5);
    }

  function _setTempRet0($i) {
      setTempRet0(($i) | 0);
    }
var FSNode = /** @constructor */ function(parent, name, mode, rdev) {
    if (!parent) {
      parent = this;  // root node sets parent to itself
    }
    this.parent = parent;
    this.mount = parent.mount;
    this.mounted = null;
    this.id = FS.nextInode++;
    this.name = name;
    this.mode = mode;
    this.node_ops = {};
    this.stream_ops = {};
    this.rdev = rdev;
  };
  var readMode = 292/*292*/ | 73/*73*/;
  var writeMode = 146/*146*/;
  Object.defineProperties(FSNode.prototype, {
   read: {
    get: /** @this{FSNode} */function() {
     return (this.mode & readMode) === readMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= readMode : this.mode &= ~readMode;
    }
   },
   write: {
    get: /** @this{FSNode} */function() {
     return (this.mode & writeMode) === writeMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= writeMode : this.mode &= ~writeMode;
    }
   },
   isFolder: {
    get: /** @this{FSNode} */function() {
     return FS.isDir(this.mode);
    }
   },
   isDevice: {
    get: /** @this{FSNode} */function() {
     return FS.isChrdev(this.mode);
    }
   }
  });
  FS.FSNode = FSNode;
  FS.staticInit();;
var ASSERTIONS = true;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {string} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      // TODO: Update Node.js externs, Closure does not recognize the following Buffer.from()
      /**@suppress{checkTypes}*/
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf['buffer'], buf['byteOffset'], buf['byteLength']);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


// ASM_LIBRARY EXTERN PRIMITIVES: Math_floor,Math_ceil

var asmGlobalArg = {};
var asmLibraryArg = { "__handle_stack_overflow": ___handle_stack_overflow, "abort": _abort, "emscripten_get_sbrk_ptr": _emscripten_get_sbrk_ptr, "emscripten_memcpy_big": _emscripten_memcpy_big, "emscripten_resize_heap": _emscripten_resize_heap, "fd_close": _fd_close, "fd_read": _fd_read, "fd_seek": _fd_seek, "fd_write": _fd_write, "getTempRet0": getTempRet0, "memory": wasmMemory, "round": _round, "setTempRet0": setTempRet0, "table": wasmTable };
var asm = createWasm();
Module["asm"] = asm;
/** @type {function(...*):?} */
var ___wasm_call_ctors = Module["___wasm_call_ctors"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__wasm_call_ctors"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _FLAC__stream_decoder_new = Module["_FLAC__stream_decoder_new"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["FLAC__stream_decoder_new"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _FLAC__stream_decoder_delete = Module["_FLAC__stream_decoder_delete"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["FLAC__stream_decoder_delete"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _FLAC__stream_decoder_finish = Module["_FLAC__stream_decoder_finish"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["FLAC__stream_decoder_finish"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _FLAC__stream_decoder_init_stream = Module["_FLAC__stream_decoder_init_stream"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["FLAC__stream_decoder_init_stream"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _FLAC__stream_decoder_reset = Module["_FLAC__stream_decoder_reset"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["FLAC__stream_decoder_reset"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _FLAC__stream_decoder_init_ogg_stream = Module["_FLAC__stream_decoder_init_ogg_stream"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["FLAC__stream_decoder_init_ogg_stream"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _FLAC__stream_decoder_set_ogg_serial_number = Module["_FLAC__stream_decoder_set_ogg_serial_number"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["FLAC__stream_decoder_set_ogg_serial_number"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _FLAC__stream_decoder_set_md5_checking = Module["_FLAC__stream_decoder_set_md5_checking"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["FLAC__stream_decoder_set_md5_checking"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _FLAC__stream_decoder_get_state = Module["_FLAC__stream_decoder_get_state"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["FLAC__stream_decoder_get_state"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _FLAC__stream_decoder_get_md5_checking = Module["_FLAC__stream_decoder_get_md5_checking"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["FLAC__stream_decoder_get_md5_checking"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _FLAC__stream_decoder_process_single = Module["_FLAC__stream_decoder_process_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["FLAC__stream_decoder_process_single"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _FLAC__stream_decoder_process_until_end_of_metadata = Module["_FLAC__stream_decoder_process_until_end_of_metadata"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["FLAC__stream_decoder_process_until_end_of_metadata"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _FLAC__stream_decoder_process_until_end_of_stream = Module["_FLAC__stream_decoder_process_until_end_of_stream"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["FLAC__stream_decoder_process_until_end_of_stream"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _FLAC__stream_encoder_new = Module["_FLAC__stream_encoder_new"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["FLAC__stream_encoder_new"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _FLAC__stream_encoder_delete = Module["_FLAC__stream_encoder_delete"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["FLAC__stream_encoder_delete"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _FLAC__stream_encoder_finish = Module["_FLAC__stream_encoder_finish"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["FLAC__stream_encoder_finish"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _FLAC__stream_encoder_init_stream = Module["_FLAC__stream_encoder_init_stream"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["FLAC__stream_encoder_init_stream"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _FLAC__stream_encoder_init_ogg_stream = Module["_FLAC__stream_encoder_init_ogg_stream"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["FLAC__stream_encoder_init_ogg_stream"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _FLAC__stream_encoder_set_ogg_serial_number = Module["_FLAC__stream_encoder_set_ogg_serial_number"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["FLAC__stream_encoder_set_ogg_serial_number"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _FLAC__stream_encoder_set_verify = Module["_FLAC__stream_encoder_set_verify"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["FLAC__stream_encoder_set_verify"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _FLAC__stream_encoder_set_channels = Module["_FLAC__stream_encoder_set_channels"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["FLAC__stream_encoder_set_channels"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _FLAC__stream_encoder_set_bits_per_sample = Module["_FLAC__stream_encoder_set_bits_per_sample"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["FLAC__stream_encoder_set_bits_per_sample"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _FLAC__stream_encoder_set_sample_rate = Module["_FLAC__stream_encoder_set_sample_rate"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["FLAC__stream_encoder_set_sample_rate"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _FLAC__stream_encoder_set_compression_level = Module["_FLAC__stream_encoder_set_compression_level"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["FLAC__stream_encoder_set_compression_level"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _FLAC__stream_encoder_set_blocksize = Module["_FLAC__stream_encoder_set_blocksize"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["FLAC__stream_encoder_set_blocksize"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _FLAC__stream_encoder_set_total_samples_estimate = Module["_FLAC__stream_encoder_set_total_samples_estimate"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["FLAC__stream_encoder_set_total_samples_estimate"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _FLAC__stream_encoder_get_state = Module["_FLAC__stream_encoder_get_state"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["FLAC__stream_encoder_get_state"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _FLAC__stream_encoder_process_interleaved = Module["_FLAC__stream_encoder_process_interleaved"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["FLAC__stream_encoder_process_interleaved"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___errno_location = Module["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__errno_location"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fflush = Module["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fflush"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _malloc = Module["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["malloc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _free = Module["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["free"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___set_stack_limit = Module["___set_stack_limit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__set_stack_limit"].apply(null, arguments)
};

/** @type {function(...*):?} */
var stackSave = Module["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackSave"].apply(null, arguments)
};

/** @type {function(...*):?} */
var stackAlloc = Module["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackAlloc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var stackRestore = Module["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackRestore"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __growWasmMemory = Module["__growWasmMemory"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__growWasmMemory"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iii = Module["dynCall_iii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_ii = Module["dynCall_ii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_ii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiii = Module["dynCall_iiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_jiji = Module["dynCall_jiji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_jiji"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viiiiii = Module["dynCall_viiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiiii = Module["dynCall_iiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viiii = Module["dynCall_viiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viii = Module["dynCall_viii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viii"].apply(null, arguments)
};




// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromString")) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "intArrayToString")) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;
Module["setValue"] = setValue;
Module["getValue"] = getValue;
if (!Object.getOwnPropertyDescriptor(Module, "allocate")) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getMemory")) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ArrayToString")) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ToString")) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8Array")) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8")) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF8")) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreRun")) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnInit")) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreMain")) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnExit")) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPostRun")) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeStringToMemory")) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeArrayToMemory")) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeAsciiToMemory")) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addRunDependency")) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "removeRunDependency")) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createFolder")) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPath")) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDataFile")) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPreloadedFile")) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLazyFile")) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLink")) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDevice")) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_unlink")) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "dynamicAlloc")) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadDynamicLibrary")) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadWebAssemblyModule")) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getLEB")) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFunctionTables")) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignFunctionTables")) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFunctions")) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addFunction")) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "removeFunction")) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "prettyPrint")) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeBigInt")) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCompilerSetting")) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "print")) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "printErr")) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTempRet0")) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setTempRet0")) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callMain")) Module["callMain"] = function() { abort("'callMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abort")) Module["abort"] = function() { abort("'abort' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToNewUTF8")) Module["stringToNewUTF8"] = function() { abort("'stringToNewUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscripten_realloc_buffer")) Module["emscripten_realloc_buffer"] = function() { abort("'emscripten_realloc_buffer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ENV")) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setjmpId")) Module["setjmpId"] = function() { abort("'setjmpId' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_CODES")) Module["ERRNO_CODES"] = function() { abort("'ERRNO_CODES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_MESSAGES")) Module["ERRNO_MESSAGES"] = function() { abort("'ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "DNS")) Module["DNS"] = function() { abort("'DNS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GAI_ERRNO_MESSAGES")) Module["GAI_ERRNO_MESSAGES"] = function() { abort("'GAI_ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Protocols")) Module["Protocols"] = function() { abort("'Protocols' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Sockets")) Module["Sockets"] = function() { abort("'Sockets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UNWIND_CACHE")) Module["UNWIND_CACHE"] = function() { abort("'UNWIND_CACHE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgs")) Module["readAsmConstArgs"] = function() { abort("'readAsmConstArgs' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_q")) Module["jstoi_q"] = function() { abort("'jstoi_q' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_s")) Module["jstoi_s"] = function() { abort("'jstoi_s' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH")) Module["PATH"] = function() { abort("'PATH' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH_FS")) Module["PATH_FS"] = function() { abort("'PATH_FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SYSCALLS")) Module["SYSCALLS"] = function() { abort("'SYSCALLS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMmap2")) Module["syscallMmap2"] = function() { abort("'syscallMmap2' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMunmap")) Module["syscallMunmap"] = function() { abort("'syscallMunmap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "JSEvents")) Module["JSEvents"] = function() { abort("'JSEvents' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangle")) Module["demangle"] = function() { abort("'demangle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangleAll")) Module["demangleAll"] = function() { abort("'demangleAll' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jsStackTrace")) Module["jsStackTrace"] = function() { abort("'jsStackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64")) Module["writeI53ToI64"] = function() { abort("'writeI53ToI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Clamped")) Module["writeI53ToI64Clamped"] = function() { abort("'writeI53ToI64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Signaling")) Module["writeI53ToI64Signaling"] = function() { abort("'writeI53ToI64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Clamped")) Module["writeI53ToU64Clamped"] = function() { abort("'writeI53ToU64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Signaling")) Module["writeI53ToU64Signaling"] = function() { abort("'writeI53ToU64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromI64")) Module["readI53FromI64"] = function() { abort("'readI53FromI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromU64")) Module["readI53FromU64"] = function() { abort("'readI53FromU64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertI32PairToI53")) Module["convertI32PairToI53"] = function() { abort("'convertI32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertU32PairToI53")) Module["convertU32PairToI53"] = function() { abort("'convertU32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Browser")) Module["Browser"] = function() { abort("'Browser' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS")) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "MEMFS")) Module["MEMFS"] = function() { abort("'MEMFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "TTY")) Module["TTY"] = function() { abort("'TTY' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PIPEFS")) Module["PIPEFS"] = function() { abort("'PIPEFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SOCKFS")) Module["SOCKFS"] = function() { abort("'SOCKFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GL")) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGet")) Module["emscriptenWebGLGet"] = function() { abort("'emscriptenWebGLGet' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetTexPixelData")) Module["emscriptenWebGLGetTexPixelData"] = function() { abort("'emscriptenWebGLGetTexPixelData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetUniform")) Module["emscriptenWebGLGetUniform"] = function() { abort("'emscriptenWebGLGetUniform' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetVertexAttrib")) Module["emscriptenWebGLGetVertexAttrib"] = function() { abort("'emscriptenWebGLGetVertexAttrib' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AL")) Module["AL"] = function() { abort("'AL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL")) Module["SDL"] = function() { abort("'SDL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_gfx")) Module["SDL_gfx"] = function() { abort("'SDL_gfx' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLUT")) Module["GLUT"] = function() { abort("'GLUT' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "EGL")) Module["EGL"] = function() { abort("'EGL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW_Window")) Module["GLFW_Window"] = function() { abort("'GLFW_Window' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW")) Module["GLFW"] = function() { abort("'GLFW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLEW")) Module["GLEW"] = function() { abort("'GLEW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "IDBStore")) Module["IDBStore"] = function() { abort("'IDBStore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runAndAbortIfError")) Module["runAndAbortIfError"] = function() { abort("'runAndAbortIfError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "warnOnce")) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackSave")) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackRestore")) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc")) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AsciiToString")) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToAscii")) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF16ToString")) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF16")) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF16")) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF32ToString")) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF32")) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF32")) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8")) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8OnStack")) Module["allocateUTF8OnStack"] = function() { abort("'allocateUTF8OnStack' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["writeStackCookie"] = writeStackCookie;
Module["checkStackCookie"] = checkStackCookie;
Module["abortStackOverflow"] = abortStackOverflow;
if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromBase64")) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tryParseAsDataURI")) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NORMAL")) Object.defineProperty(Module, "ALLOC_NORMAL", { configurable: true, get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_STACK")) Object.defineProperty(Module, "ALLOC_STACK", { configurable: true, get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_DYNAMIC")) Object.defineProperty(Module, "ALLOC_DYNAMIC", { configurable: true, get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NONE")) Object.defineProperty(Module, "ALLOC_NONE", { configurable: true, get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });



var calledRun;


/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;


dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};





/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    ['stdout', 'stderr'].forEach(function(name) {
      var info = FS.analyzePath('/dev/' + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty && tty.output && tty.output.length) {
        has = true;
      }
    });
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

/** @param {boolean|number=} implicit */
function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && noExitRuntime && status === 0) {
    return;
  }

  if (noExitRuntime) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      err('program exited (with status: ' + status + '), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  quit_(status, new ExitStatus(status));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}


  noExitRuntime = true;

run();





// {{MODULE_ADDITIONS}}



//libflac function wrappers

/**
 * HELPER read/extract stream info meta-data from frame header / meta-data
 * @param {POINTER} p_streaminfo
 * @returns StreamInfo
 */
function _readStreamInfo(p_streaminfo){//-> FLAC__StreamMetadata.type (FLAC__MetadataType) === FLAC__METADATA_TYPE_STREAMINFO (0)

	/*
	typedef struct {
		unsigned min_blocksize, max_blocksize;
		unsigned min_framesize, max_framesize;
		unsigned sample_rate;
		unsigned channels;
		unsigned bits_per_sample;
		FLAC__uint64 total_samples;
		FLAC__byte md5sum[16];
	} FLAC__StreamMetadata_StreamInfo;
	 */

	var min_blocksize = Module.getValue(p_streaminfo,'i32');//4 bytes
	var max_blocksize = Module.getValue(p_streaminfo+4,'i32');//4 bytes

	var min_framesize = Module.getValue(p_streaminfo+8,'i32');//4 bytes
	var max_framesize = Module.getValue(p_streaminfo+12,'i32');//4 bytes

	var sample_rate = Module.getValue(p_streaminfo+16,'i32');//4 bytes
	var channels = Module.getValue(p_streaminfo+20,'i32');//4 bytes

	var bits_per_sample = Module.getValue(p_streaminfo+24,'i32');//4 bytes

	//FIXME should be at p_streaminfo+28, but seems to be at p_streaminfo+32
	var total_samples = Module.getValue(p_streaminfo+32,'i64');//8 bytes

	var md5sum = _readMd5(p_streaminfo+40);//16 bytes

	return {
		min_blocksize: min_blocksize,
		max_blocksize: max_blocksize,
		min_framesize: min_framesize,
		max_framesize: max_framesize,
		sampleRate: sample_rate,
		channels: channels,
		bitsPerSample: bits_per_sample,
		total_samples: total_samples,
		md5sum: md5sum
	};
}

/**
 * read MD5 checksum
 * @param {POINTER} p_md5
 * @returns {String} as HEX string representation
 */
function _readMd5(p_md5){

	var sb = [], v, str;
	for(var i=0, len = 16; i < len; ++i){
		v = Module.getValue(p_md5+i,'i8');//1 byte
		if(v < 0) v = 256 + v;//<- "convert" to uint8, if necessary
		str = v.toString(16);
		if(str.length < 2) str = '0' + str;//<- add padding, if necessary
		sb.push(str);
	}
	return sb.join('');
}

/**
 * HELPER: read frame data
 *
 * @param {POINTER} p_frame
 * @returns FrameHeader
 */
function _readFrameHdr(p_frame){

	/*
	typedef struct {
		unsigned blocksize;
		unsigned sample_rate;
		unsigned channels;
		FLAC__ChannelAssignment channel_assignment;
		unsigned bits_per_sample;
		FLAC__FrameNumberType number_type;
		union {
			FLAC__uint32 frame_number;
			FLAC__uint64 sample_number;
		} number;
		FLAC__uint8 crc;
	} FLAC__FrameHeader;
	 */

	var blocksize = Module.getValue(p_frame,'i32');//4 bytes
	var sample_rate = Module.getValue(p_frame+4,'i32');//4 bytes
	var channels = Module.getValue(p_frame+8,'i32');//4 bytes

	// 0: FLAC__CHANNEL_ASSIGNMENT_INDEPENDENT	independent channels
	// 1: FLAC__CHANNEL_ASSIGNMENT_LEFT_SIDE 	left+side stereo
	// 2: FLAC__CHANNEL_ASSIGNMENT_RIGHT_SIDE 	right+side stereo
	// 3: FLAC__CHANNEL_ASSIGNMENT_MID_SIDE 	mid+side stereo
	var channel_assignment = Module.getValue(p_frame+12,'i32');//4 bytes

	var bits_per_sample = Module.getValue(p_frame+16,'i32');

	// 0: FLAC__FRAME_NUMBER_TYPE_FRAME_NUMBER 	number contains the frame number
	// 1: FLAC__FRAME_NUMBER_TYPE_SAMPLE_NUMBER	number contains the sample number of first sample in frame
	var number_type = Module.getValue(p_frame+20,'i32');

	// union {} number: The frame number or sample number of first sample in frame; use the number_type value to determine which to use.
	var frame_number = Module.getValue(p_frame+24,'i32');
	var sample_number = Module.getValue(p_frame+24,'i64');

	var number = number_type === 0? frame_number : sample_number;
	var numberType = number_type === 0? 'frames' : 'samples';

	var crc = Module.getValue(p_frame+36,'i8');

	//TODO read subframe
	//TODO read footer

	return {
		blocksize: blocksize,
		sampleRate: sample_rate,
		channels: channels,
		bitsPerSample: bits_per_sample,
		number: number,
		numberType: numberType,
		crc: crc
	};
}


/**
 * HELPER workaround / fix for returned write-buffer when decoding FLAC
 *
 * @param {number} heapOffset
 * 				the offset for the data on HEAPU8
 * @param {Uint8Array} newBuffer
 * 				the target buffer into which the data should be written -- with the correct (block) size
 * @param {number} padding
 * 				number of padding bytes
 */
function __fix_write_buffer(heapOffset, newBuffer, padding){

	var dv = new DataView(newBuffer.buffer);
	var targetSize = newBuffer.length;

	var increase = padding > 0? 1 : 2;//<- for FIX/workaround, NOTE: if padding occurres, there is no fix/increase needed (more details comment below)
	var buffer = HEAPU8.subarray(heapOffset, heapOffset + targetSize * increase);

	// FIXME for some reason, the bytes values 0 (min) and 255 (max) get "triplicated",
	//		or inserted "doubled" which should be ignored, i.e.
	//		x x x	-> x
	//		x x		-> <ignored>
	//		where x is 0 or 255
	// -> HACK for now: remove/"over-read" 2 of the values, for each of these triplets/doublications
	var jump, isPrint;
	for(var i=0, j=0, size = buffer.length; i < size && j < targetSize; ++i, ++j){

		if(i === size-1 && j < targetSize - 1){
			//increase heap-view, in order to read more (valid) data into the target buffer
			buffer = HEAPU8.subarray(heapOffset, size + targetSize);
			size = buffer.length;
		}

		// NOTE if padding occurres, there does not seem to be no duplication/triplication of 255 or 0, so must not try to fix!
		if(padding === 0 && (buffer[i] === 0 || buffer[i] === 255)){

			jump = 0;
			isPrint = true;

			if(i + 1 < size && buffer[i] === buffer[i+1]){

				++jump;

				if(i + 2 < size){
					if(buffer[i] === buffer[i+2]){
						++jump;
					} else {
						//if only 2 occurrences: ignore value
						isPrint = false;
					}
				}
			}//else: if single value: do print (an do not jump)


			if(isPrint){
				dv.setUint8(j, buffer[i]);
				if(jump === 2 && i + 3 < size && buffer[i] === buffer[i+3]){
					//special case for reducing triples in case the following value is also the same
					// (ie. something like: x x x |+ x)
					// -> then: do write the value one more time, and jump one further ahead
					// i.e. if value occurs 4 times in a row, write 2 values
					++jump;
					dv.setUint8(++j, buffer[i]);
				}
			} else {
				--j;
			}

			i += jump;//<- apply jump, if there were value duplications

		} else {
			dv.setUint8(j, buffer[i]);
		}

	}
}


// FLAC__STREAM_DECODER_READ_STATUS_CONTINUE     	The read was OK and decoding can continue.
// FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM   The read was attempted while at the end of the stream. Note that the client must only return this value when the read callback was called when already at the end of the stream. Otherwise, if the read itself moves to the end of the stream, the client should still return the data and FLAC__STREAM_DECODER_READ_STATUS_CONTINUE, and then on the next read callback it should return FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM with a byte count of 0.
// FLAC__STREAM_DECODER_READ_STATUS_ABORT       	An unrecoverable error occurred. The decoder will return from the process call.
var FLAC__STREAM_DECODER_READ_STATUS_CONTINUE = 0;
var FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM = 1;
var FLAC__STREAM_DECODER_READ_STATUS_ABORT = 2;

// FLAC__STREAM_DECODER_WRITE_STATUS_CONTINUE   The write was OK and decoding can continue.
// FLAC__STREAM_DECODER_WRITE_STATUS_ABORT     	An unrecoverable error occurred. The decoder will return from the process call.
var FLAC__STREAM_DECODER_WRITE_STATUS_CONTINUE = 0;
var FLAC__STREAM_DECODER_WRITE_STATUS_ABORT = 1;

/**
 * @interface FLAC__StreamDecoderInitStatus
 * @memberOf Flac
 *
 * @property {"FLAC__STREAM_DECODER_INIT_STATUS_OK"}	0 	Initialization was successful.
 * @property {"FLAC__STREAM_DECODER_INIT_STATUS_UNSUPPORTED_CONTAINER"}	1 	The library was not compiled with support for the given container format.
 * @property {"FLAC__STREAM_DECODER_INIT_STATUS_INVALID_CALLBACKS"}	2 	A required callback was not supplied.
 * @property {"FLAC__STREAM_DECODER_INIT_STATUS_MEMORY_ALLOCATION_ERROR"}	3 	An error occurred allocating memory.
 * @property {"FLAC__STREAM_DECODER_INIT_STATUS_ERROR_OPENING_FILE"}	4 	fopen() failed in FLAC__stream_decoder_init_file() or FLAC__stream_decoder_init_ogg_file().
 * @property {"FLAC__STREAM_DECODER_INIT_STATUS_ALREADY_INITIALIZED"}	5 	FLAC__stream_decoder_init_*() was called when the decoder was already initialized, usually because FLAC__stream_decoder_finish() was not called.
 */
var FLAC__STREAM_DECODER_INIT_STATUS_OK	= 0;
var FLAC__STREAM_DECODER_INIT_STATUS_UNSUPPORTED_CONTAINER	= 1;
var FLAC__STREAM_DECODER_INIT_STATUS_INVALID_CALLBACKS	= 2;
var FLAC__STREAM_DECODER_INIT_STATUS_MEMORY_ALLOCATION_ERROR = 3;
var FLAC__STREAM_DECODER_INIT_STATUS_ERROR_OPENING_FILE = 4;
var FLAC__STREAM_DECODER_INIT_STATUS_ALREADY_INITIALIZED = 5;

/**
 * @interface FLAC__StreamEncoderInitStatus
 * @memberOf Flac
 *
 * @property {"FLAC__STREAM_ENCODER_INIT_STATUS_OK"}	0 	Initialization was successful.
 * @property {"FLAC__STREAM_ENCODER_INIT_STATUS_ENCODER_ERROR"}	1 	General failure to set up encoder; call FLAC__stream_encoder_get_state() for cause.
 * @property {"FLAC__STREAM_ENCODER_INIT_STATUS_UNSUPPORTED_CONTAINER"}	2 	The library was not compiled with support for the given container format.
 * @property {"FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_CALLBACKS"}	3 	A required callback was not supplied.
 * @property {"FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_NUMBER_OF_CHANNELS"}	4 	The encoder has an invalid setting for number of channels.
 * @property {"FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_BITS_PER_SAMPLE"}	5 	The encoder has an invalid setting for bits-per-sample. FLAC supports 4-32 bps but the reference encoder currently supports only up to 24 bps.
 * @property {"FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_SAMPLE_RATE"}	6 	The encoder has an invalid setting for the input sample rate.
 * @property {"FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_BLOCK_SIZE"}	7 	The encoder has an invalid setting for the block size.
 * @property {"FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_MAX_LPC_ORDER"}	8 	The encoder has an invalid setting for the maximum LPC order.
 * @property {"FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_QLP_COEFF_PRECISION"}	9 	The encoder has an invalid setting for the precision of the quantized linear predictor coefficients.
 * @property {"FLAC__STREAM_ENCODER_INIT_STATUS_BLOCK_SIZE_TOO_SMALL_FOR_LPC_ORDER"}	10 	The specified block size is less than the maximum LPC order.
 * @property {"FLAC__STREAM_ENCODER_INIT_STATUS_NOT_STREAMABLE"}	11 	The encoder is bound to the Subset but other settings violate it.
 * @property {"FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_METADATA"}	12 	The metadata input to the encoder is invalid, in one of the following ways:
 *																	      FLAC__stream_encoder_set_metadata() was called with a null pointer but a block count > 0
 *																	      One of the metadata blocks contains an undefined type
 *																	      It contains an illegal CUESHEET as checked by FLAC__format_cuesheet_is_legal()
 *																	      It contains an illegal SEEKTABLE as checked by FLAC__format_seektable_is_legal()
 *																	      It contains more than one SEEKTABLE block or more than one VORBIS_COMMENT block
 * @property {"FLAC__STREAM_ENCODER_INIT_STATUS_ALREADY_INITIALIZED"}	13 	FLAC__stream_encoder_init_*() was called when the encoder was already initialized, usually because FLAC__stream_encoder_finish() was not called.
 */
var FLAC__STREAM_ENCODER_INIT_STATUS_OK = 0;
var FLAC__STREAM_ENCODER_INIT_STATUS_ENCODER_ERROR = 1;
var FLAC__STREAM_ENCODER_INIT_STATUS_UNSUPPORTED_CONTAINER = 2;
var FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_CALLBACKS = 3;
var FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_NUMBER_OF_CHANNELS = 4;
var FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_BITS_PER_SAMPLE = 5;
var FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_SAMPLE_RATE = 6;
var FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_BLOCK_SIZE = 7;
var FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_MAX_LPC_ORDER = 8;
var FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_QLP_COEFF_PRECISION = 9;
var FLAC__STREAM_ENCODER_INIT_STATUS_BLOCK_SIZE_TOO_SMALL_FOR_LPC_ORDER = 10;
var FLAC__STREAM_ENCODER_INIT_STATUS_NOT_STREAMABLE = 11;
var FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_METADATA = 12;
var FLAC__STREAM_ENCODER_INIT_STATUS_ALREADY_INITIALIZED = 13;

//FLAC__STREAM_ENCODER_WRITE_STATUS_OK 				The write was OK and encoding can continue.
//FLAC__STREAM_ENCODER_WRITE_STATUS_FATAL_ERROR		An unrecoverable error occurred. The encoder will return from the process call
var FLAC__STREAM_ENCODER_WRITE_STATUS_OK = 0;
var FLAC__STREAM_ENCODER_WRITE_STATUS_FATAL_ERROR = 1;


/**
 * Map for encoder/decoder callback functions
 *
 * <pre>[ID] -> {function_type: FUNCTION}</pre>
 *
 * type: {[id: number]: {[callback_type: string]: function}}
 * @private
 */
var coders = {};

/**
 * Get a registered callback for the encoder / decoder instance
 *
 * @param {Number} p_coder
 * 			the encoder/decoder pointer (ID)
 * @param {String} func_type
 * 			the callback type, one of
 * 				"write" | "read" | "error" | "metadata"
 * @returns {Function} the callback (or VOID if there is no callback registered)
 * @private
 */
function getCallback(p_coder, func_type){
	if(coders[p_coder]){
		return coders[p_coder][func_type];
	}
}

/**
 * Register a callback for an encoder / decoder instance (will / should be deleted, when finish()/delete())
 *
 * @param {Number} p_coder
 * 			the encoder/decoder pointer (ID)
 * @param {String} func_type
 * 			the callback type, one of
 * 				"write" | "read" | "error" | "metadata"
 * @param {Function} callback
 * 			the callback function
 * @private
 */
function setCallback(p_coder, func_type, callback){
	if(!coders[p_coder]){
		coders[p_coder] = {};
	}
	coders[p_coder][func_type] = callback;
}

//(const FLAC__StreamEncoder *encoder, const FLAC__byte buffer[], size_t bytes, unsigned samples, unsigned current_frame, void *client_data)
// -> FLAC__StreamEncoderWriteStatus
var enc_write_fn_ptr = addFunction(function(p_encoder, buffer, bytes, samples, current_frame, p_client_data){
	var arraybuf = new ArrayBuffer(buffer);
	var retdata = new Uint8Array(bytes);
	retdata.set(HEAPU8.subarray(buffer, buffer + bytes));
	var write_callback_fn = getCallback(p_encoder, 'write');
	try{
		write_callback_fn(retdata, bytes, samples, current_frame, p_client_data);
	} catch(err) {
		console.error(err);
		return FLAC__STREAM_ENCODER_WRITE_STATUS_FATAL_ERROR;
	}
	return FLAC__STREAM_ENCODER_WRITE_STATUS_OK
}, 'iiiiiii');

//(const FLAC__StreamDecoder *decoder, FLAC__byte buffer[], size_t *bytes, void *client_data)
// -> FLAC__StreamDecoderReadStatus
var dec_read_fn_ptr = addFunction(function(p_decoder, buffer, bytes, p_client_data){
	//FLAC__StreamDecoderReadCallback, see https://xiph.org/flac/api/group__flac__stream__decoder.html#ga7a5f593b9bc2d163884348b48c4285fd

	var len = Module.getValue(bytes, 'i32');

	if(len === 0){
		return FLAC__STREAM_DECODER_READ_STATUS_ABORT;
	}

	var read_callback_fn = getCallback(p_decoder, 'read');

	//callback must return object with: {buffer: TypedArray, readDataLength: number, error: boolean}
	var readResult = read_callback_fn(len, p_client_data);
	//in case of END_OF_STREAM or an error, readResult.readDataLength must be returned with 0

	var readLen = readResult.readDataLength;
	Module.setValue(bytes, readLen, 'i32');

	if(readResult.error){
		return FLAC__STREAM_DECODER_READ_STATUS_ABORT;
	}

	if(readLen === 0){
		return FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM;
	}

	var readBuf = readResult.buffer;

	var dataHeap = new Uint8Array(Module.HEAPU8.buffer, buffer, readLen);
	dataHeap.set(new Uint8Array(readBuf));

	return FLAC__STREAM_DECODER_READ_STATUS_CONTINUE;
}, 'iiiii');

//(const FLAC__StreamDecoder *decoder, const FLAC__Frame *frame, const FLAC__int32 *const buffer[], void *client_data)
// -> FLAC__StreamDecoderWriteStatus
var dec_write_fn_ptr = addFunction(function(p_decoder, p_frame, p_buffer, p_client_data){

	// var dec = Module.getValue(p_decoder,'i32');
	// var clientData = Module.getValue(p_client_data,'i32');

	var frameInfo = _readFrameHdr(p_frame);

//	console.log(frameInfo);//DEBUG

	var channels = frameInfo.channels;
	var block_size = frameInfo.blocksize * (frameInfo.bitsPerSample / 8);

	//take padding bits into account for calculating buffer size
	//FIXME do this gererically(?) ... for now hard-coded handling for 24-bit which is padded with 1 extra bit
	var padding = frameInfo.bitsPerSample === 24? 1 : 0;
	if(padding > 0){
		block_size += frameInfo.blocksize * padding;
	}

	var data = [];//<- array for the data of each channel
	var bufferOffset, heapView, _buffer;

	for(var i=0; i < channels; ++i){

		bufferOffset = Module.getValue(p_buffer + (i*4),'i32');

		_buffer = new Uint8Array(block_size);
		//FIXME HACK for "strange" data (see helper function __fix_write_buffer)
		__fix_write_buffer(bufferOffset, _buffer, padding);

		data.push(_buffer.subarray(0, block_size));
	}

	var write_callback_fn = getCallback(p_decoder, 'write');
	var res = write_callback_fn(data, frameInfo);//, clientData);

	// FLAC__STREAM_DECODER_WRITE_STATUS_CONTINUE	The write was OK and decoding can continue.
	// FLAC__STREAM_DECODER_WRITE_STATUS_ABORT     	An unrecoverable error occurred. The decoder will return from the process call.

	return res !== false? FLAC__STREAM_DECODER_WRITE_STATUS_CONTINUE : FLAC__STREAM_DECODER_WRITE_STATUS_ABORT;
}, 'iiiii');

/**
 * Decoding error codes.
 *
 * <br>
 * If the error code is not known, value <code>FLAC__STREAM_DECODER_ERROR__UNKNOWN__</code> is used.
 *
 * @property {"FLAC__STREAM_DECODER_ERROR_STATUS_LOST_SYNC"}					0   An error in the stream caused the decoder to lose synchronization.
 * @property {"FLAC__STREAM_DECODER_ERROR_STATUS_BAD_HEADER"}  				1   The decoder encountered a corrupted frame header.
 * @property {"FLAC__STREAM_DECODER_ERROR_STATUS_FRAME_CRC_MISMATCH"}	2   The frame's data did not match the CRC in the footer.
 * @property {"FLAC__STREAM_DECODER_ERROR_STATUS_UNPARSEABLE_STREAM"}	3   The decoder encountered reserved fields in use in the stream.
 *
 *
 * @interface FLAC__StreamDecoderErrorStatus
 * @memberOf Flac
 */
var DecoderErrorCode = {
	0: 'FLAC__STREAM_DECODER_ERROR_STATUS_LOST_SYNC',
	1: 'FLAC__STREAM_DECODER_ERROR_STATUS_BAD_HEADER',
	2: 'FLAC__STREAM_DECODER_ERROR_STATUS_FRAME_CRC_MISMATCH',
	3: 'FLAC__STREAM_DECODER_ERROR_STATUS_UNPARSEABLE_STREAM'
}

//(const FLAC__StreamDecoder *decoder, FLAC__StreamDecoderErrorStatus status, void *client_data)
// -> void
var dec_error_fn_ptr = addFunction(function(p_decoder, err, p_client_data){

	//err:
	var msg = DecoderErrorCode[err] || 'FLAC__STREAM_DECODER_ERROR__UNKNOWN__';//<- this should never happen;

	var error_callback_fn = getCallback(p_decoder, 'error');
	error_callback_fn(err, msg, p_client_data);
}, 'viii');

//(const FLAC__StreamDecoder *decoder, const FLAC__StreamMetadata *metadata, void *client_data) -> void
//(const FLAC__StreamEncoder *encoder, const FLAC__StreamMetadata *metadata, void *client_data) -> void
var metadata_fn_ptr = addFunction(function(p_coder, p_metadata, p_client_data){
	/*
	 typedef struct {
		FLAC__MetadataType type;
		FLAC__bool is_last;
		unsigned length;
		union {
			FLAC__StreamMetadata_StreamInfo stream_info;
			FLAC__StreamMetadata_Padding padding;
			FLAC__StreamMetadata_Application application;
			FLAC__StreamMetadata_SeekTable seek_table;
			FLAC__StreamMetadata_VorbisComment vorbis_comment;
			FLAC__StreamMetadata_CueSheet cue_sheet;
			FLAC__StreamMetadata_Picture picture;
			FLAC__StreamMetadata_Unknown unknown;
		} data;
	} FLAC__StreamMetadata;
	 */

	/*
	FLAC__METADATA_TYPE_STREAMINFO 		STREAMINFO block
	FLAC__METADATA_TYPE_PADDING 		PADDING block
	FLAC__METADATA_TYPE_APPLICATION 	APPLICATION block
	FLAC__METADATA_TYPE_SEEKTABLE 		SEEKTABLE block
	FLAC__METADATA_TYPE_VORBIS_COMMENT 	VORBISCOMMENT block (a.k.a. FLAC tags)
	FLAC__METADATA_TYPE_CUESHEET 		CUESHEET block
	FLAC__METADATA_TYPE_PICTURE 		PICTURE block
	FLAC__METADATA_TYPE_UNDEFINED 		marker to denote beginning of undefined type range; this number will increase as new metadata types are added
	FLAC__MAX_METADATA_TYPE 			No type will ever be greater than this. There is not enough room in the protocol block.
	 */

	var type = Module.getValue(p_metadata,'i32');//4 bytes
	var is_last = Module.getValue(p_metadata+4,'i32');//4 bytes
	var length = Module.getValue(p_metadata+8,'i64');//8 bytes

	var metadata_callback_fn = getCallback(p_coder, 'metadata');
	var meta_data;
	if(type === 0){// === FLAC__METADATA_TYPE_STREAMINFO
		meta_data = _readStreamInfo(p_metadata+16);

		metadata_callback_fn(meta_data);
	}
	//TODO handle other meta data too

}, 'viii');


////////////// helper fields and functions for event handling
// see exported on()/off() functions
var listeners = {};
var persistedEvents = [];
var add_event_listener = function (eventName, listener){
	var list = listeners[eventName];
	if(!list){
		list = [listener];
		listeners[eventName] = list;
	} else {
		list.push(listener);
	}
	check_and_trigger_persisted_event(eventName, listener);
};
var check_and_trigger_persisted_event = function(eventName, listener){
	var activated;
	for(var i=persistedEvents.length-1; i >= 0; --i){
		activated = persistedEvents[i];
		if(activated && activated.event === eventName){
			listener.apply(null, activated.args);
			break;
		}
	}
};
var remove_event_listener = function (eventName, listener){
	var list = listeners[eventName];
	if(list){
		for(var i=list.length-1; i >= 0; --i){
			if(list[i] === listener){
				list.splice(i, 1);
			}
		}
	}
};
/**
 * HELPER: fire an event
 * @param  {string} eventName
 * 										the event name
 * @param  {Array<any>} [args] OPITIONAL
 * 										the arguments when triggering the listeners
 * @param  {boolean} [isPersist] OPTIONAL (positinal argument!)
 * 										if TRUE, handlers for this event that will be registered after this will get triggered immediately
 * 										(i.e. event is "persistent": once triggered it stays "active")
 *
 */
var do_fire_event = function (eventName, args, isPersist){
	if(_exported['on'+eventName]){
		_exported['on'+eventName].apply(null, args);
	}
	var list = listeners[eventName];
	if(list){
		for(var i=0, size=list.length; i < size; ++i){
			list[i].apply(null, args)
		}
	}
	if(isPersist){
		persistedEvents.push({event: eventName, args: args});
	}
}

/////////////////////////////////////    export / public: /////////////////////////////////////////////
/**
 * The <code>Flac</code> module that provides functionality
 * for encoding WAV/PCM audio to Flac and decoding Flac to PCM.
 *
 * <br/><br/>
 * <p>
 * NOTE most functions are named analogous to the original C library functions,
 *      so that its documentation may be used for further reading.
 * </p>
 *
 * @see https://xiph.org/flac/api/group__flac__stream__encoder.html
 * @see https://xiph.org/flac/api/group__flac__stream__decoder.html
 *
 * @class Flac
 * @namespace Flac
 */
var _exported = {
	_module: Module,//internal: reference to Flac module
	_clear_enc_cb: function(enc_ptr){//internal function: remove reference to encoder instance and its callbacks
		delete coders[enc_ptr];
	},
	_clear_dec_cb: function(dec_ptr){//internal function: remove reference to decoder instance and its callbacks
		delete coders[dec_ptr];
	},
	/**
	 * Returns if Flac has been initialized / is ready to be used.
	 *
	 * @returns {boolean} <code>true</code>, if Flac is ready to be used
	 *
	 * @memberOf Flac#
	 * @function
	 * @see #onready
	 * @see #on
	 */
	isReady: function() { return _flac_ready; },
	/**
	 * Hook for handler function that gets called, when asynchronous initialization has finished.
	 *
	 * NOTE that if the execution environment does not support <code>Object#defineProperty</code>, then
	 *      this function is not called, after {@link #isReady} is <code>true</code>.
	 *      In this case, {@link #isReady} should be checked, before setting <code>onready</code>
	 *      and if it is <code>true</code>, handler should be executed immediately instead of setting <code>onready</code>.
	 *
	 * @memberOf Flac#
	 * @function
	 * @param {Flac.event:ReadyEvent} event the ready-event object
	 * @see #isReady
	 * @see #on
	 * @default undefined
	 * @example
	 *  // [1] if Object.defineProperty() IS supported:
	 *  Flac.onready = function(event){
	 *     //gets executed when library becomes ready, or immediately, if it already is ready...
	 *	   doSomethingWithFlac();
	 *  };
	 *
	 *  // [2] if Object.defineProperty() is NOT supported:
	 *	// do check Flac.isReady(), and only set handler, if not ready yet
	 *  // (otherwise immediately excute handler code)
	 *  if(!Flac.isReady()){
	 *    Flac.onready = function(event){
	 *       //gets executed when library becomes ready...
	 *		 doSomethingWithFlac();
	 *    };
	 *  } else {
	 * 		// Flac is already ready: immediately start processing
	 *		doSomethingWithFlac();
	 *	}
	 */
	onready: void(0),
	/**
	 * Ready event: is fired when the library has been initialized and is ready to be used
	 * (e.g. asynchronous loading of binary / WASM modules has been completed).
	 *
	 * Before this event is fired, use of functions related to encoding and decoding may
	 * cause errors.
	 *
	 * @event ReadyEvent
	 * @memberOf Flac
	 * @type {object}
	 * @property {string} type 	the type of the event <code>"ready"</code>
	 * @property {Flac} target 	the initalized FLAC library instance
	 *
	 * @see #isReady
	 * @see #on
	 */
	/**
	 * Add an event listener for module-events.
	 * Supported events:
	 * <ul>
	 *  <li> <code>"ready"</code> &rarr; {@link Flac.event:ReadyEvent}: emitted when module is ready for usage (i.e. {@link #isReady} is true)<br/>
	 *             <em>NOTE listener will get immediately triggered if module is already <code>"ready"</code></em>
	 *  </li>
	 * </ul>
	 *
	 * @param {string} eventName
	 * @param {Function} listener
	 *
	 * @memberOf Flac#
	 * @function
	 * @see #off
	 * @see #onready
	 * @see Flac.event:ReadyEvent
	 * @example
	 *  Flac.on('ready', function(event){
	 *     //gets executed when library is ready, or becomes ready...
	 *  });
	 */
	on: add_event_listener,
	/**
	 * Remove an event listener for module-events.
	 * @param {string} eventName
	 * @param {Function} listener
	 *
	 * @memberOf Flac#
	 * @function
	 * @see #on
	 */
	off: remove_event_listener,

	/**
	 * Set the "verify" flag. If true, the encoder will verify it's own encoded output by feeding it through an internal decoder and comparing the original signal against the decoded signal. If a mismatch occurs, the process call will return false. Note that this will slow the encoding process by the extra time required for decoding and comparison.
	 *
	 * <p>
	 * NOTE: only use on un-initilized encoder instances!
	 *
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 *
	 * @param {boolean} is_verify enable/disable checksum verification during encoding
	 *
	 * @returns {boolean} <code>false</code> if the encoder is already initialized, else <code>true</code>
	 *
	 * @see #create_libflac_encoder
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_encoder_set_verify: Module.cwrap('FLAC__stream_encoder_set_verify', 'number', [ 'number', 'number' ]),
	/**
	 * Set the compression level
	 *
	 * The compression level is roughly proportional to the amount of effort the encoder expends to compress the file. A higher level usually means more computation but higher compression. The default level is suitable for most applications.
	 *
	 * Currently the levels range from 0 (fastest, least compression) to 8 (slowest, most compression). A value larger than 8 will be treated as 8.
	 *
	 *
	 * <p>
	 * NOTE: only use on un-initilized encoder instances!
	 *
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 *
	 * @param {number} compression_level the desired Flac compression level: [0, 8]
	 *
	 * @returns {boolean} <code>false</code> if the encoder is already initialized, else <code>true</code>
	 *
	 * @see #create_libflac_encoder
	 * @see <a href="https://xiph.org/flac/api/group__flac__stream__encoder.html#gae49cf32f5256cb47eecd33779493ac85">FLAC API for FLAC__stream_encoder_set_compression_level()</a>
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_encoder_set_compression_level: Module.cwrap('FLAC__stream_encoder_set_compression_level', 'number', [ 'number', 'number' ]),
	/**
	 * Set the blocksize to use while encoding.
	 * The number of samples to use per frame. Use 0 to let the encoder estimate a blocksize; this is usually best.
	 *
	 * <p>
	 * NOTE: only use on un-initilized encoder instances!
	 *
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 *
	 * @param {number} block_size  the number of samples to use per frame
	 *
	 * @returns {boolean} <code>false</code> if the encoder is already initialized, else <code>true</code>
	 *
	 * @see #create_libflac_encoder
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_encoder_set_blocksize: Module.cwrap('FLAC__stream_encoder_set_blocksize', 'number', [ 'number', 'number']),
/*

TODO export other encoder API functions?:

FLAC__StreamEncoder * 	FLAC__stream_encoder_new (void)

FLAC__bool 	FLAC__stream_encoder_set_channels (FLAC__StreamEncoder *encoder, unsigned value)

FLAC__bool 	FLAC__stream_encoder_set_bits_per_sample (FLAC__StreamEncoder *encoder, unsigned value)

FLAC__bool 	FLAC__stream_encoder_set_sample_rate (FLAC__StreamEncoder *encoder, unsigned value)

FLAC__bool 	FLAC__stream_encoder_set_do_mid_side_stereo (FLAC__StreamEncoder *encoder, FLAC__bool value)

FLAC__bool 	FLAC__stream_encoder_set_loose_mid_side_stereo (FLAC__StreamEncoder *encoder, FLAC__bool value)

FLAC__bool 	FLAC__stream_encoder_set_apodization (FLAC__StreamEncoder *encoder, const char *specification)

FLAC__bool 	FLAC__stream_encoder_set_max_lpc_order (FLAC__StreamEncoder *encoder, unsigned value)

FLAC__bool 	FLAC__stream_encoder_set_qlp_coeff_precision (FLAC__StreamEncoder *encoder, unsigned value)

FLAC__bool 	FLAC__stream_encoder_set_do_qlp_coeff_prec_search (FLAC__StreamEncoder *encoder, FLAC__bool value)

FLAC__bool 	FLAC__stream_encoder_set_do_escape_coding (FLAC__StreamEncoder *encoder, FLAC__bool value)

FLAC__bool 	FLAC__stream_encoder_set_do_exhaustive_model_search (FLAC__StreamEncoder *encoder, FLAC__bool value)

FLAC__bool 	FLAC__stream_encoder_set_min_residual_partition_order (FLAC__StreamEncoder *encoder, unsigned value)

FLAC__bool 	FLAC__stream_encoder_set_max_residual_partition_order (FLAC__StreamEncoder *encoder, unsigned value)

FLAC__bool 	FLAC__stream_encoder_set_rice_parameter_search_dist (FLAC__StreamEncoder *encoder, unsigned value)


FLAC__StreamDecoderState 	FLAC__stream_encoder_get_verify_decoder_state (const FLAC__StreamEncoder *encoder)

FLAC__bool 	FLAC__stream_encoder_get_verify (const FLAC__StreamEncoder *encoder)

FLAC__bool 	FLAC__stream_encoder_get_streamable_subset (const FLAC__StreamEncoder *encoder)

unsigned 	FLAC__stream_encoder_get_channels (const FLAC__StreamEncoder *encoder)

unsigned 	FLAC__stream_encoder_get_bits_per_sample (const FLAC__StreamEncoder *encoder)

unsigned 	FLAC__stream_encoder_get_sample_rate (const FLAC__StreamEncoder *encoder)

unsigned 	FLAC__stream_encoder_get_blocksize (const FLAC__StreamEncoder *encoder)

FLAC__bool 	FLAC__stream_encoder_get_do_mid_side_stereo (const FLAC__StreamEncoder *encoder)

FLAC__bool 	FLAC__stream_encoder_get_loose_mid_side_stereo (const FLAC__StreamEncoder *encoder)

unsigned 	FLAC__stream_encoder_get_max_lpc_order (const FLAC__StreamEncoder *encoder)

unsigned 	FLAC__stream_encoder_get_qlp_coeff_precision (const FLAC__StreamEncoder *encoder)

FLAC__bool 	FLAC__stream_encoder_get_do_qlp_coeff_prec_search (const FLAC__StreamEncoder *encoder)

FLAC__bool 	FLAC__stream_encoder_get_do_escape_coding (const FLAC__StreamEncoder *encoder)

FLAC__bool 	FLAC__stream_encoder_get_do_exhaustive_model_search (const FLAC__StreamEncoder *encoder)

unsigned 	FLAC__stream_encoder_get_min_residual_partition_order (const FLAC__StreamEncoder *encoder)

unsigned 	FLAC__stream_encoder_get_max_residual_partition_order (const FLAC__StreamEncoder *encoder)

unsigned 	FLAC__stream_encoder_get_rice_parameter_search_dist (const FLAC__StreamEncoder *encoder)

FLAC__uint64 	FLAC__stream_encoder_get_total_samples_estimate (const FLAC__StreamEncoder *encoder)



TODO export other decoder API functions?:

FLAC__StreamDecoder * 	FLAC__stream_decoder_new (void)

FLAC__bool 	FLAC__stream_decoder_set_md5_checking (FLAC__StreamDecoder *decoder, FLAC__bool value)

FLAC__bool 	FLAC__stream_decoder_set_metadata_respond (FLAC__StreamDecoder *decoder, FLAC__MetadataType type)

FLAC__bool 	FLAC__stream_decoder_set_metadata_respond_application (FLAC__StreamDecoder *decoder, const FLAC__byte id[4])

FLAC__bool 	FLAC__stream_decoder_set_metadata_respond_all (FLAC__StreamDecoder *decoder)

FLAC__bool 	FLAC__stream_decoder_set_metadata_ignore (FLAC__StreamDecoder *decoder, FLAC__MetadataType type)

FLAC__bool 	FLAC__stream_decoder_set_metadata_ignore_application (FLAC__StreamDecoder *decoder, const FLAC__byte id[4])

FLAC__bool 	FLAC__stream_decoder_set_metadata_ignore_all (FLAC__StreamDecoder *decoder)


const char * 	FLAC__stream_decoder_get_resolved_state_string (const FLAC__StreamDecoder *decoder)

FLAC__uint64 	FLAC__stream_decoder_get_total_samples (const FLAC__StreamDecoder *decoder)

unsigned 	FLAC__stream_decoder_get_channels (const FLAC__StreamDecoder *decoder)

unsigned 	FLAC__stream_decoder_get_bits_per_sample (const FLAC__StreamDecoder *decoder)

unsigned 	FLAC__stream_decoder_get_sample_rate (const FLAC__StreamDecoder *decoder)

unsigned 	FLAC__stream_decoder_get_blocksize (const FLAC__StreamDecoder *decoder)


FLAC__bool 	FLAC__stream_decoder_flush (FLAC__StreamDecoder *decoder)

FLAC__bool 	FLAC__stream_decoder_skip_single_frame (FLAC__StreamDecoder *decoder)

 */

	/**
	 * Create an encoder.
	 *
	 * @param {number} sample_rate
	 * 					the sample rate of the input PCM data
	 * @param {number} channels
	 * 					the number of channels of the input PCM data
	 * @param {number} bps
	 * 					bits per sample of the input PCM data
	 * @param {number} compression_level
	 * 					the desired Flac compression level: [0, 8]
	 * @param {number} [total_samples] OPTIONAL
	 * 					the number of total samples of the input PCM data:<br>
	 * 					 Sets an estimate of the total samples that will be encoded.
	 * 					 This is merely an estimate and may be set to 0 if unknown.
	 * 					 This value will be written to the STREAMINFO block before encoding,
	 * 					 and can remove the need for the caller to rewrite the value later if
	 * 					 the value is known before encoding.<br>
	 * 					If specified, the it will be written into metadata of the FLAC header.<br>
	 * 					DEFAULT: 0 (i.e. unknown number of samples)
	 * @param {boolean} [is_verify] OPTIONAL
	 * 					enable/disable checksum verification during encoding<br>
	 * 					DEFAULT: true<br>
	 * 					NOTE: this argument is positional (i.e. total_samples must also be given)
	 * @param {number} [block_size] OPTIONAL
	 * 					the number of samples to use per frame.<br>
	 * 					DEFAULT: 0 (i.e. encoder sets block size automatically)
	 * 					NOTE: this argument is positional (i.e. total_samples and is_verify must also be given)
	 *
	 *
	 * @returns {number} the ID of the created encoder instance (or 0, if there was an error)
	 *
	 * @memberOf Flac#
	 * @function
	 */
	create_libflac_encoder: function(sample_rate, channels, bps, compression_level, total_samples, is_verify, block_size){
		is_verify = typeof is_verify === 'undefined'? 1 : is_verify + 0;
		total_samples = typeof total_samples === 'number'? total_samples : 0;
		block_size = typeof block_size === 'number'? block_size : 0;
		var ok = true;
		var encoder = Module.ccall('FLAC__stream_encoder_new', 'number', [ ], [ ]);
		ok &= Module.ccall('FLAC__stream_encoder_set_verify', 'number', ['number', 'number'], [ encoder, is_verify ]);
		ok &= Module.ccall('FLAC__stream_encoder_set_compression_level', 'number', ['number', 'number'], [ encoder, compression_level ]);
		ok &= Module.ccall('FLAC__stream_encoder_set_channels', 'number', ['number', 'number'], [ encoder, channels ]);
		ok &= Module.ccall('FLAC__stream_encoder_set_bits_per_sample', 'number', ['number', 'number'], [ encoder, bps ]);
		ok &= Module.ccall('FLAC__stream_encoder_set_sample_rate', 'number', ['number', 'number'], [ encoder, sample_rate ]);
		ok &= Module.ccall('FLAC__stream_encoder_set_blocksize', 'number', [ 'number', 'number'], [ encoder, block_size ]);
		ok &= Module.ccall('FLAC__stream_encoder_set_total_samples_estimate', 'number', ['number', 'number'], [ encoder, total_samples ]);
		if (ok){
			return encoder;
		}
		return 0;
	},
	/**
	 * @deprecated use {@link #create_libflac_encoder} instead
	 * @memberOf Flac#
	 * @function
	 */
	init_libflac_encoder: function(){
		console.warn('Flac.init_libflac_encoder() is deprecated, use Flac.create_libflac_encoder() instead!');
		return this.create_libflac_encoder.apply(this, arguments);
	},

	/**
	 * Create a decoder.
	 *
	 * @param {boolean} [is_verify]
	 * 				enable/disable checksum verification during decoding<br>
	 * 				DEFAULT: true
	 *
	 * @returns {number} the ID of the created decoder instance (or 0, if there was an error)
	 *
	 * @memberOf Flac#
	 * @function
	 */
	create_libflac_decoder: function(is_verify){
		is_verify = typeof is_verify === 'undefined'? 1 : is_verify + 0;
		var ok = true;
		var decoder = Module.ccall('FLAC__stream_decoder_new', 'number', [ ], [ ]);
		ok &= Module.ccall('FLAC__stream_decoder_set_md5_checking', 'number', ['number', 'number'], [ decoder, is_verify ]);
		if (ok){
			return decoder;
		}
		return 0;
	},
	/**
	 * @deprecated use {@link #create_libflac_decoder} instead
	 * @memberOf Flac#
	 * @function
	 */
	init_libflac_decoder: function(){
		console.warn('Flac.init_libflac_decoder() is deprecated, use Flac.create_libflac_decoder() instead!');
		return this.create_libflac_decoder.apply(this, arguments);
	},
	/**
	 * the callback for writing the encoded FLAC data.
	 *
	 * @callback Flac~encoder_write_callback_fn
	 * @param {Uint8Array} data the encoded FLAC data
	 * @param {number} numberOfBytes the number of bytes in data
	 * @param {number} samples the number of samples encoded in data
	 * @param {number} currentFrame the number of the (current) encoded frame in data
	 * @returns {undefined | false} returning <code>false</code> indicates that an
	 * 								unrecoverable error occurred and decoding should be aborted
	 */
	/**
	 * the callback for the metadata of the encoded/decoded Flac data.
	 * @callback Flac~metadata_callback_fn
	 * @param {Flac.StreamMetadata} metadata the FLAC meta data
	 */
	/**
	 * FLAC meta data
	 * @interface Metadata
	 * @memberOf Flac
	 * @property {number}  sampleRate the sample rate (Hz)
	 * @property {number}  channels the number of channels
	 * @property {number}  bitsPerSample bits per sample
	 */
	/**
	 * FLAC stream meta data
	 * @interface StreamMetadata
	 * @memberOf Flac
	 * @augments Flac.Metadata
	 * @property {number}  min_blocksize the minimal block size (bytes)
	 * @property {number}  max_blocksize the maximal block size (bytes)
	 * @property {number}  min_framesize the minimal frame size (bytes)
	 * @property {number}  max_framesize the maximal frame size (bytes)
	 * @property {number}  total_samples the total number of (encoded/decoded) samples
	 * @property {string}  md5sum  the MD5 checksum for the decoded data (if validation is active)
	 */
	/**
	 * Initialize the encoder.
	 *
	 * @param {number} encoder
	 * 				the ID of the encoder instance that has not been initialized (or has been reset)
	 *
	 * @param {Flac~encoder_write_callback_fn} write_callback_fn
	 * 				the callback for writing the encoded Flac data:
	 * 				<pre>write_callback_fn(data: Uint8Array, numberOfBytes: Number, samples: Number, currentFrame: Number)</pre>
	 *
	 * @param {Flac~metadata_callback_fn} [metadata_callback_fn] OPTIONAL
	 * 				the callback for the metadata of the encoded Flac data:
	 * 				<pre>metadata_callback_fn(metadata: StreamMetadata)</pre>
	 *
	 * @param {number|boolean} [ogg_serial_number] OPTIONAL
	 * 				if number or <code>true</code> is specified, the encoder will be initialized to
	 * 				write to an OGG container, see {@link Flac.init_encoder_ogg_stream}:
	 * 				<code>true</code> will set a default serial number (<code>1</code>),
	 * 				if specified as number, it will be used as the stream's serial number within the ogg container.
	 *
	 * @returns {number} the encoder status (<code>0</code> for <code>FLAC__STREAM_ENCODER_INIT_STATUS_OK</code>),
	 * 					 see {@link Flac.FLAC__StreamEncoderInitStatus}
	 *
	 * @memberOf Flac#
	 * @function
	 */
	init_encoder_stream: function(encoder, write_callback_fn, metadata_callback_fn, ogg_serial_number, client_data){

		var is_ogg = (ogg_serial_number === true);
		client_data = client_data|0;

		if(typeof write_callback_fn !== 'function'){
			return FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_CALLBACKS;
		}
		setCallback(encoder, 'write', write_callback_fn);

		var __metadata_callback_fn_ptr = 0;
		if(typeof metadata_callback_fn === 'function'){
			setCallback(encoder, 'metadata', metadata_callback_fn);
			__metadata_callback_fn_ptr = metadata_fn_ptr;
		}

		//NOTE the following comments are used for auto-detecting exported functions (only change if ccall function name(s) change!):
		//	Module.ccall('FLAC__stream_encoder_init_stream'
		var func_name = 'FLAC__stream_encoder_init_stream';
		var args_types = ['number', 'number', 'number', 'number', 'number', 'number'];
		var args = [
			encoder,
			enc_write_fn_ptr,
			0,//	FLAC__StreamEncoderSeekCallback
			0,//	FLAC__StreamEncoderTellCallback
			__metadata_callback_fn_ptr,
			client_data
		];

		if(typeof ogg_serial_number === 'number'){

			is_ogg = true;

		} else if(is_ogg){//else: set default serial number for stream in OGG container

			//NOTE from FLAC docs: "It is recommended to set a serial number explicitly as the default of '0' may collide with other streams."
			ogg_serial_number = 1;
		}

		if(is_ogg){
			//NOTE the following comments are used for auto-detecting exported functions (only change if ccall function name(s) change!):
			//	Module.ccall('FLAC__stream_encoder_init_ogg_stream'
			func_name = 'FLAC__stream_encoder_init_ogg_stream';

			//2nd arg: FLAC__StreamEncoderReadCallback ptr -> duplicate first entry & insert at [1]
			args.unshift(args[0]);
			args[1] = 0;//	FLAC__StreamEncoderReadCallback

			args_types.unshift(args_types[0]);
			args_types[1] = 'number';


			//NOTE ignore BOOL return value when setting serial number, since init-call's returned
			//     status will also indicate, if encoder already has been initialized
			Module.ccall(
				'FLAC__stream_encoder_set_ogg_serial_number', 'number',
				['number', 'number'],
				[ encoder, ogg_serial_number ]
			);
		}

		var init_status = Module.ccall(func_name, 'number', args_types, args);

		return init_status;
	},
	/**
	 * Initialize the encoder for writing to an OGG container.
	 *
	 * @param {number} [ogg_serial_number] OPTIONAL
	 * 				the serial number for the stream in the OGG container
	 * 				DEFAULT: <code>1</code>
	 *
	 * @memberOf Flac#
	 * @function
	 * @copydoc #init_encoder_stream
	 */
	init_encoder_ogg_stream: function(encoder, write_callback_fn, metadata_callback_fn, ogg_serial_number, client_data){

		if(typeof ogg_serial_number !== 'number'){
			ogg_serial_number = true;
		}
		return this.init_encoder_stream(encoder, write_callback_fn, metadata_callback_fn, ogg_serial_number, client_data);
	},
	/**
	 * Result / return value for {@link Flac~decoder_read_callback_fn} callback function
	 *
	 * @interface ReadResult
	 * @memberOf Flac
	 * @property {TypedArray}  buffer  a TypedArray (e.g. Uint8Array) with the read data
	 * @property {number}  readDataLength the number of read data bytes. A number of <code>0</code> (zero) indicates that the end-of-stream is reached.
	 * @property {boolean}  [error] OPTIONAL value of <code>true</code> indicates that an error occured (decoding will be aborted)
	 */
	/**
	 * The callback for reading the FLAC data that will be decoded.
	 *
	 * @callback Flac~decoder_read_callback_fn
	 * @param {number} numberOfBytes the maximal number of bytes that the read callback can return
	 * @returns {Flac.ReadResult} the result of the reading action/request
	 */
	/**
	 * The callback for writing the decoded FLAC data.
	 *
	 * @callback Flac~decoder_write_callback_fn
	 * @param {Uint8Array[]} data array of the channels with the decoded PCM data as <code>Uint8Array</code>s
	 * @param {Flac.BlockMetadata} frameInfo the metadata information for the decoded data
	 */
	/**
	 * The callback for reporting decoding errors.
	 *
	 * @callback Flac~decoder_error_callback_fn
	 * @param {number} errorCode the error code
	 * @param {Flac.FLAC__StreamDecoderErrorStatus} errorDescription the string representation / description of the error
	 */
	/**
	 * FLAC block meta data
	 * @interface BlockMetadata
	 * @augments Flac.Metadata
	 * @memberOf Flac
	 *
	 * @property {number}  blocksize the block size (bytes)
	 * @property {number}  number the number of the decoded samples or frames
	 * @property {string}  numberType the type to which <code>number</code> refers to: either <code>"frames"</code> or <code>"samples"</code>
	 * @property {string}  crc the MD5 checksum for the decoded data, if validation is enabled
	 */
	/**
	 * Initialize the decoder.
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance that has not been initialized (or has been reset)
	 *
	 * @param {Flac~decoder_read_callback_fn} read_callback_fn
	 * 				the callback for reading the Flac data that should get decoded:
	 * 				<pre>read_callback_fn(numberOfBytes: Number) : {buffer: ArrayBuffer, readDataLength: number, error: boolean}</pre>
	 *
	 * @param {Flac~decoder_write_callback_fn} write_callback_fn
	 * 				the callback for writing the decoded data:
	 * 				<pre>write_callback_fn(data: Uint8Array[], frameInfo: Metadata)</pre>
	 *
	 * @param {Flac~decoder_error_callback_fn} [error_callback_fn] OPTIONAL
	 * 				the error callback:
	 * 				<pre>error_callback_fn(errorCode: Number, errorDescription: String)</pre>
	 *
	 * @param {Flac~metadata_callback_fn} [metadata_callback_fn] OPTIONAL
	 * 				callback for receiving the metadata of FLAC data that will be decoded:
	 * 				<pre>metadata_callback_fn(metadata: StreamMetadata)</pre>
	 *
	 * @param {number|boolean} [ogg_serial_number] OPTIONAL
	 * 				if number or <code>true</code> is specified, the decoder will be initilized to
	 * 				read from an OGG container, see {@link Flac.init_decoder_ogg_stream}:<br/>
	 * 				<code>true</code> will use the default serial number, if specified as number the
	 * 				corresponding stream with the serial number from the ogg container will be used.
	 *
	 * @returns {number} the decoder status(<code>0</code> for <code>FLAC__STREAM_DECODER_INIT_STATUS_OK</code>),
	 * 					 see {@link Flac.FLAC__StreamDecoderInitStatus}
	 *
	 * @memberOf Flac#
	 * @function
	 */
	init_decoder_stream: function(decoder, read_callback_fn, write_callback_fn, error_callback_fn, metadata_callback_fn, ogg_serial_number, client_data){

		client_data = client_data|0;

		if(typeof read_callback_fn !== 'function'){
			return FLAC__STREAM_DECODER_INIT_STATUS_INVALID_CALLBACKS;
		}
		setCallback(decoder, 'read', read_callback_fn);

		if(typeof write_callback_fn !== 'function'){
			return FLAC__STREAM_DECODER_INIT_STATUS_INVALID_CALLBACKS;
		}
		setCallback(decoder, 'write', write_callback_fn);

		var __error_callback_fn_ptr = 0;
		if(typeof error_callback_fn === 'function'){
			setCallback(decoder, 'error', error_callback_fn);
			__error_callback_fn_ptr = dec_error_fn_ptr;
		}

		var __metadata_callback_fn_ptr = 0;
		if(typeof metadata_callback_fn === 'function'){
			setCallback(decoder, 'metadata', metadata_callback_fn);
			__metadata_callback_fn_ptr = metadata_fn_ptr;
		}

		var is_ogg = (ogg_serial_number === true);
		if(typeof ogg_serial_number === 'number'){

			is_ogg = true;

			//NOTE ignore BOOL return value when setting serial number, since init-call's returned
			//     status will also indicate, if decoder already has been initialized
			Module.ccall(
				'FLAC__stream_decoder_set_ogg_serial_number', 'number',
				['number', 'number'],
				[ decoder, ogg_serial_number ]
			);
		}

		//NOTE the following comments are used for auto-detecting exported functions (only change if ccall function name(s) change!):
		//	Module.ccall('FLAC__stream_decoder_init_stream'
		//	Module.ccall('FLAC__stream_decoder_init_ogg_stream'
		var init_func_name = !is_ogg? 'FLAC__stream_decoder_init_stream' : 'FLAC__stream_decoder_init_ogg_stream';

		var init_status = Module.ccall(
				init_func_name, 'number',
				[ 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number'],
				[
					 decoder,
					 dec_read_fn_ptr,
					 0,// FLAC__StreamDecoderSeekCallback
					 0,// FLAC__StreamDecoderTellCallback
					 0,//	FLAC__StreamDecoderLengthCallback
					 0,//	FLAC__StreamDecoderEofCallback
					 dec_write_fn_ptr,
					 __metadata_callback_fn_ptr,
					 __error_callback_fn_ptr,
					 client_data
				]
		);

		return init_status;
	},
	/**
	 * Initialize the decoder for writing to an OGG container.
	 *
	 * @param {number} [ogg_serial_number] OPTIONAL
	 * 				the serial number for the stream in the OGG container that should be decoded.<br/>
	 * 				The default behavior is to use the serial number of the first Ogg page. Setting a serial number here will explicitly specify which stream is to be decoded.
	 *
	 * @memberOf Flac#
	 * @function
	 * @copydoc #init_decoder_stream
	 */
	init_decoder_ogg_stream: function(decoder, read_callback_fn, write_callback_fn, error_callback_fn, metadata_callback_fn, ogg_serial_number, client_data){

		if(typeof ogg_serial_number !== 'number'){
			ogg_serial_number = true;
		}
		return this.init_decoder_stream(decoder, read_callback_fn, write_callback_fn, error_callback_fn, metadata_callback_fn, ogg_serial_number, client_data);
	},
	/**
	 * Encode / submit data for encoding.
	 *
	 * This version allows you to supply the input data where the channels are interleaved into a
	 * single array (i.e. channel0_sample0, channel1_sample0, ... , channelN_sample0, channel0_sample1, ...).
	 *
	 * The samples need not be block-aligned but they must be sample-aligned, i.e. the first value should be
	 * channel0_sample0 and the last value channelN_sampleM.
	 *
	 * Each sample should be a signed integer, right-justified to the resolution set by bits-per-sample.
	 *
	 * For example, if the resolution is 16 bits per sample, the samples should all be in the range [-32768,32767].
	 *
	 *
	 * For applications where channel order is important, channels must follow the order as described in the frame header.
	 *
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 *
	 * @param {TypedArray} buffer
	 * 				the audio data in a typed array with signed integers (and size according to the set bits-per-sample setting)
	 *
	 * @param {number} num_of_samples
	 * 				the number of samples in buffer
	 *
	 * @returns {boolean} true if successful, else false; in this case, check the encoder state with FLAC__stream_encoder_get_state() to see what went wrong.
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_encoder_process_interleaved: function(encoder, buffer, num_of_samples){
		// get the length of the data in bytes
		var numBytes = buffer.length * buffer.BYTES_PER_ELEMENT;
		// console.log("DEBUG numBytes: " + numBytes);
		// malloc enough space for the data
		var ptr = Module._malloc(numBytes);
		// get a bytes-wise view on the newly allocated buffer
		var heapBytes= new Uint8Array(Module.HEAPU8.buffer, ptr, numBytes);
		// console.log("DEBUG heapBytes: " + heapBytes);
		// copy data into heapBytes
		heapBytes.set(new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength));// issue #11 (2): do use byteOffset and byteLength for copying the data in case the underlying buffer/ArrayBuffer of the TypedArray view is larger than the TypedArray
		var status = Module.ccall('FLAC__stream_encoder_process_interleaved', 'number',
				['number', 'number', 'number'],
				[encoder, heapBytes.byteOffset, num_of_samples]
		);
		Module._free(ptr);
		return status;
	},

	/**
	 * Decodes a single frame.
	 *
	 * To check decoding progress, use {@link #FLAC__stream_decoder_get_state}.
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @returns {boolean} FALSE if an error occurred
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_decoder_process_single: Module.cwrap('FLAC__stream_decoder_process_single', 'number', ['number']),

	/**
	 * Decodes data until end of stream.
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @returns {boolean} FALSE if an error occurred
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_decoder_process_until_end_of_stream: Module.cwrap('FLAC__stream_decoder_process_until_end_of_stream', 'number', ['number']),

	/**
	 * Decodes data until end of metadata.
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @returns {boolean} false if any fatal read, write, or memory allocation error occurred (meaning decoding must stop), else true.
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_decoder_process_until_end_of_metadata: Module.cwrap('FLAC__stream_decoder_process_until_end_of_metadata', 'number', ['number']),

	/**
	 * Decoder state code.
	 *
	 * @interface FLAC__StreamDecoderState
	 * @memberOf Flac
	 *
	 * @property {"FLAC__STREAM_DECODER_SEARCH_FOR_METADATA"} 		0	The decoder is ready to search for metadata
	 * @property {"FLAC__STREAM_DECODER_READ_METADATA"}  					1	The decoder is ready to or is in the process of reading metadata
	 * @property {"FLAC__STREAM_DECODER_SEARCH_FOR_FRAME_SYNC"} 	2	The decoder is ready to or is in the process of searching for the frame sync code
	 * @property {"FLAC__STREAM_DECODER_READ_FRAME"}							3	The decoder is ready to or is in the process of reading a frame
	 * @property {"FLAC__STREAM_DECODER_END_OF_STREAM"}						4	The decoder has reached the end of the stream
	 * @property {"FLAC__STREAM_DECODER_OGG_ERROR"}								5	An error occurred in the underlying Ogg layer
	 * @property {"FLAC__STREAM_DECODER_SEEK_ERROR"}							6	An error occurred while seeking. The decoder must be flushed with FLAC__stream_decoder_flush() or reset with FLAC__stream_decoder_reset() before decoding can continue
	 * @property {"FLAC__STREAM_DECODER_ABORTED"}									7	The decoder was aborted by the read callback
	 * @property {"FLAC__STREAM_DECODER_MEMORY_ALLOCATION_ERROR"}	8	An error occurred allocating memory. The decoder is in an invalid state and can no longer be used
	 * @property {"FLAC__STREAM_DECODER_UNINITIALIZED"}						9	The decoder is in the uninitialized state; one of the FLAC__stream_decoder_init_*() functions must be called before samples can be processed.
	 *
	 */
	/**
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @returns {number} the decoder state, see {@link Flac.FLAC__StreamDecoderState}
	 *
	 * @memberOf Flac#
	 * @function
	 * @see .FLAC__StreamDecoderState
	 */
	FLAC__stream_decoder_get_state: Module.cwrap('FLAC__stream_decoder_get_state', 'number', ['number']),

	/**
	 * Encoder state code.
	 *
	 * @interface FLAC__StreamEncoderState
	 * @memberOf Flac
	 *
	 * @property {"FLAC__STREAM_ENCODER_OK"}														0 	The encoder is in the normal OK state and samples can be processed.
	 * @property {"FLAC__STREAM_ENCODER_UNINITIALIZED"}									1 	The encoder is in the uninitialized state; one of the FLAC__stream_encoder_init_*() functions must be called before samples can be processed.
	 * @property {"FLAC__STREAM_ENCODER_OGG_ERROR"}											2 	An error occurred in the underlying Ogg layer.
	 * @property {"FLAC__STREAM_ENCODER_VERIFY_DECODER_ERROR"}					3 	An error occurred in the underlying verify stream decoder; check FLAC__stream_encoder_get_verify_decoder_state().
	 * @property {"FLAC__STREAM_ENCODER_VERIFY_MISMATCH_IN_AUDIO_DATA"}	4 	The verify decoder detected a mismatch between the original audio signal and the decoded audio signal.
	 * @property {"FLAC__STREAM_ENCODER_CLIENT_ERROR"}									5 	One of the callbacks returned a fatal error.
	 * @property {"FLAC__STREAM_ENCODER_IO_ERROR"}											6 	An I/O error occurred while opening/reading/writing a file. Check errno.
	 * @property {"FLAC__STREAM_ENCODER_FRAMING_ERROR"}									7 	An error occurred while writing the stream; usually, the write_callback returned an error.
	 * @property {"FLAC__STREAM_ENCODER_MEMORY_ALLOCATION_ERROR"}				8 	Memory allocation failed.
	 *
	 */
	/**
	 *
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 *
	 * @returns {number} the encoder state, see {@link Flac.FLAC__StreamEncoderState}
	 *
	 * @memberOf Flac#
	 * @function
	 * @see Flac.FLAC__StreamEncoderState
	 */
	FLAC__stream_encoder_get_state:  Module.cwrap('FLAC__stream_encoder_get_state', 'number', ['number']),

	/**
	 * Get if MD5 verification is enabled for decoder
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @returns {boolean} <code>true</code> if MD5 verification is enabled
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_decoder_get_md5_checking: Module.cwrap('FLAC__stream_decoder_get_md5_checking', 'number', ['number']),

//	/** @returns {boolean} FALSE if the decoder is already initialized, else TRUE. */
//	FLAC__stream_decoder_set_md5_checking: Module.cwrap('FLAC__stream_decoder_set_md5_checking', 'number', ['number', 'number']),

	/**
	 * Finish the encoding process.
	 *
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 *
	 * @returns {boolean} <code>false</code> if an error occurred processing the last frame;
	 * 					 or if verify mode is set, there was a verify mismatch; else <code>true</code>.
	 * 					 If <code>false</code>, caller should check the state with {@link Flac#FLAC__stream_encoder_get_state}
	 * 					 for more information about the error.
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_encoder_finish: Module.cwrap('FLAC__stream_encoder_finish', 'number', [ 'number' ]),
	/**
	 * Finish the decoding process.
	 *
	 * The decoder can be reused, after initializing it again.
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @returns {boolean} <code>false</code> if MD5 checking is on AND a STREAMINFO block was available AND the MD5 signature in
	 * 						 the STREAMINFO block was non-zero AND the signature does not match the one computed by the decoder;
	 * 						 else <code>true</code>.
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_decoder_finish: Module.cwrap('FLAC__stream_decoder_finish', 'number', [ 'number' ]),
	/**
	 * Reset the decoder for reuse.
	 *
	 * <p>
	 * NOTE: Needs to be re-initialized, before it can be used again
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @returns {boolean} true if successful
	 *
	 * @see #init_decoder_stream
	 * @see #init_decoder_ogg_stream
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_decoder_reset: Module.cwrap('FLAC__stream_decoder_reset', 'number', [ 'number' ]),
	/**
	 * Delete the encoder instance, and free up its resources.
	 *
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_encoder_delete: function(encoder){
		this._clear_enc_cb(encoder);//<- remove callback references
		return Module.ccall('FLAC__stream_encoder_delete', 'number', [ 'number' ], [encoder]);
	},
	/**
	 * Delete the decoder instance, and free up its resources.
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_decoder_delete: function(decoder){
		this._clear_dec_cb(decoder);//<- remove callback references
		return Module.ccall('FLAC__stream_decoder_delete', 'number', [ 'number' ], [decoder]);
	}

};//END: var _exported = {

//if Properties are supported by JS execution environment:
// support "immediate triggering" onready function, if library is already initialized when setting onready callback
if(typeof Object.defineProperty === 'function'){
	//add internal field for storing onready callback:
	_exported._onready = void(0);
	//define getter & define setter with "immediate trigger" functionality:
	Object.defineProperty(_exported, 'onready', {
		get() { return this._onready; },
		set(newValue) {
			this._onready = newValue;
			if(this.isReady()){
				check_and_trigger_persisted_event('ready', newValue);
			}
		}
	});
} else {
	//if Properties are NOTE supported by JS execution environment:
	// pring usage warning for onready hook instead
	console.warn('WARN: note that setting Flac.onready handler after Flac.isReady() is already true, will have no effect, that is, the handler function will not be triggered!');
}

if(expLib && expLib.exports){
	expLib.exports = _exported;
}
return _exported;

}));//END: UMD wrapper

